/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:02:06 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      node0.isNot();
      Node node1 = new Node(30);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(96);
      Node node1 = new Node(38, node0, node0, node0);
      Node node2 = node1.getLastSibling();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(118, node0);
      node1.srcrefTree(node0);
      node0.putBooleanProp(35, false);
      try { 
        node1.setString((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // VAR is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(103);
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(38);
      node0.type = 36;
      node0.isOptionalArg();
      Node node1 = new Node(52, node0, node0, node0, 30, 37);
      node1.useSourceInfoFrom(node0);
      node0.checkTreeEqualsImpl(node1);
      node1.isEquivalentToShallow(node1);
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(1976, 153, 63);
      node0.setSourceEncodedPosition(64);
      node0.isLocalResultCall();
      node0.getLineno();
      node0.isLocalResultCall();
      node0.getJSType();
      node0.isVar();
      node0.isSwitch();
      node0.getBooleanProp(522);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      Node node1 = node0.getAncestor(0);
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(105);
      node0.isAssignAdd();
      node0.setCharno((-283));
      node0.isReturn();
      Node node1 = node0.getLastSibling();
      node1.removeProp(4146);
      node1.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      node0.isFor();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(38, nodeArray0, 39, 103);
      Node node2 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem");
      Node node3 = node1.srcrefTree(node2);
      Node node4 = new Node(110, node0, node3, node0, node2, 8, 54);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node4, node3);
      node0.getAncestor(50);
      // Undeclared exception!
      try { 
        node3.setString("KI&Hk(lCE]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newNumber(124.0);
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.setDirectives(hashSet0);
      node0.setChangeTime(37);
      node0.putBooleanProp(37, true);
      try { 
        node0.setString("iE.55y,MwBuP#");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 124.0 [opt_arg: com.google.javascript.rhino.Node$IntPropListItem@0000000005] [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(109);
      Node node1 = new Node(4, node0, node0, node0);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(154, nodeArray0, 154, 154);
      Node node1 = new Node(42, node0, node0, node0, node0);
      node0.copyInformationFromForTree(node1);
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node0.isEquivalentToShallow(node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CHB3:(\u0000");
      node0.isAssign();
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ImmutableList.of();
      Node node0 = new Node(118);
      Node node1 = Node.newNumber((double) 50);
      node0.useSourceInfoFromForTree(node1);
      node1.isNoSideEffectsCall();
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(41, 41, 41);
      Node node1 = node0.cloneNode();
      node1.isEquivalentToShallow(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node1.isContinue();
      node0.isGetterDef();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(154, 154, 154);
      node0.isReturn();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isCatch();
      node0.isOr();
      node0.isLabelName();
      Node node1 = new Node(83, node0, 92, 1657);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node1.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      node0.isOr();
      Node node1 = node0.cloneNode();
      node0.isOnlyModifiesArgumentsCall();
      node1.checkTreeEqualsImpl(node0);
      node1.isAdd();
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(37);
      node0.isFor();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(38, nodeArray0, 39, 103);
      Node node2 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem");
      Node node3 = node1.srcrefTree(node2);
      Node node4 = new Node(110, node0, node3, node0, node2, 8, 54);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node4, node3);
      node3.isEquivalentTo(node1, false, true, true);
      node4.srcref(node2);
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(105, 100, 105);
      node0.isAssignAdd();
      node0.setCharno((-283));
      node0.isReturn();
      node0.getAncestor(3320);
      try { 
        node0.setString("KI&Hk(lCE]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FUNCTION <invalid> is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(38);
      int int0 = 100;
      Node node1 = new Node(100, node0);
      node1.hasMoreThanOneChild();
      node1.getIntProp(122);
      node0.isContinue();
      // Undeclared exception!
      try { 
        node1.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newNumber((double) 33);
      Node node1 = new Node((-995), 84, (-1304));
      Node node2 = Node.newString("|CNilA", 4, 30);
      node2.getQualifiedName();
      node1.addChildrenAfter(node2, (Node) null);
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(115, 545, 83);
      node0.isOr();
      node0.getDirectives();
      node0.cloneNode();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.putIntProp(91, 91);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("#%`Vh:.TXddV6Z'", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = new Node(98);
      node1.checkTreeEqualsImpl(node0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isNE();
      node1.isWhile();
      node0.getStaticSourceFile();
      node1.isLabelName();
      // Undeclared exception!
      try { 
        node0.setString("#%`Vh:.TXddV6Z'");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 91
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString((-4391), "7Ln#W^&kJsQN{d7ieg4");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(8, node0);
      node0.getIntProp(29);
      node1.isContinue();
      node1.removeChild(node0);
      Node node2 = new Node(48, node1, node0, node1, node1, 29, 38);
      Node node3 = new Node(47, node2);
      node3.isQualifiedName();
      node2.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isAssignAdd();
      Node node1 = node0.getLastSibling();
      node0.isEquivalentToShallow(node1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      // Undeclared exception!
      try { 
        node0.appendStringTree(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(39, 39, 39);
      node0.type = 15;
      Node node1 = new Node(2, 38, 4095);
      node1.isNoSideEffectsCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = new Node(40, node1, node1, 46, 54);
      node2.isSetterDef();
      node2.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(132, 132, 132);
      node0.cloneTree();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(86);
      Node node1 = new Node(32, node0, node0, node0, 40, 31);
      node0.children();
      Node node2 = node0.srcrefTree(node1);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node1.isEquivalentToShallow(node2);
      // Undeclared exception!
      try { 
        node2.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber((double) 40);
      node0.putBooleanProp(40, true);
      node0.isCall();
      node0.isOnlyModifiesArgumentsCall();
      node0.toString(true, true, true);
      Node node1 = Node.newNumber(1332.230602754, (-3445), 40);
      // Undeclared exception!
      try { 
        node1.useSourceInfoIfMissingFromForTree(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(118, 118, 118);
      node0.isTry();
      node0.setLength(118);
      node0.getQualifiedName();
      Node node1 = node0.cloneNode();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(43);
      node0.isTrue();
      Node node1 = node0.cloneNode();
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString("9zQ", (-1459), 117);
      Node node1 = new Node((-1459), node0);
      Node node2 = new Node(31, node1, node1);
      node1.replaceChild(node0, node2);
      node1.isNE();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node3 = Node.newNumber((double) 46);
      node3.clonePropsFrom(node0);
      node0.setLineno(48);
      Node node4 = node1.cloneNode();
      node3.getAncestors();
      node0.siblings();
      node4.addChildrenToFront(node0);
      node0.getChangeTime();
      node4.setCharno(43);
      // Undeclared exception!
      try { 
        node2.cloneTree();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(95, 95, (-1468));
      node0.getChangeTime();
      node0.putBooleanProp(40, true);
      node0.isCall();
      node0.isOnlyModifiesArgumentsCall();
      node0.toString(true, true, true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(154, nodeArray0, 154, 154);
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node0.isHook();
      node0.isFor();
      node0.isStringKey();
      Node node1 = new Node(154, node0, node0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString(22, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isLocalResultCall();
      Node node1 = new Node(119, node0);
      node0.hasMoreThanOneChild();
      node0.getIntProp(57);
      node1.isContinue();
      node1.removeChild(node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.checkTreeEqualsImpl(node1);
      node0.checkTreeEqualsImpl(node1);
      node0.isNot();
      Node node3 = node1.cloneNode();
      node3.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      node0.isBreak();
      node0.isSyntheticBlock();
      node0.children();
      node0.isStringKey();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(43);
      node0.getQualifiedName();
      node0.isAdd();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(36, nodeArray0);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(154);
      node1.putBooleanProp(49, false);
      node0.isInstanceOf();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(101);
      node0.isOr();
      Node node1 = node0.cloneTree();
      node1.addChildToFront(node0);
      Node node2 = node0.cloneNode();
      node2.isContinue();
      node0.isNew();
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node.mergeLineCharNo(155, 155);
      Node node0 = new Node(155, 155, 77);
      node0.mayMutateArguments();
      node0.setVarArgs(true);
      Node node1 = Node.newString("=Flj");
      node0.addChildrenToBack(node1);
      node0.setSourceEncodedPosition(86);
      node0.isUnscopedQualifiedName();
      Node node2 = new Node((-1618), node0, node0, node0, node0, 15, 4);
      Node node3 = node0.copyInformationFromForTree(node2);
      node3.setCharno(1);
      node0.isThrow();
      // Undeclared exception!
      try { 
        node3.checkTreeEquals(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1618
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newNumber((double) 33);
      node0.putBooleanProp(33, true);
      // Undeclared exception!
      try { 
        node0.getProp(33);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      node0.isWhile();
      Node node1 = new Node(43, node0, node0, node0, 2, 9);
      node0.useSourceInfoIfMissingFrom(node1);
      Node node2 = null;
      try {
        node2 = new Node(37, node0, node0, node0, 5734, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node((-192), (-903), (-903));
      node0.isReturn();
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(35);
      Node node1 = new Node(57, node0, node0, node0, 12, 36);
      Node node2 = node0.srcrefTree(node1);
      Node node3 = Node.newString("synthetic");
      node3.checkTreeEqualsImpl(node1);
      node2.isEquivalentTo(node0, true, true, false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(154);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Class<TemplateType> class0 = TemplateType.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<TemplateType> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Iterator<TemplateType> iterator0 = serviceLoader0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.srcrefTree(node1);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isWhile();
      Node node1 = new Node(43, node0, node0, 376, 43);
      node0.clonePropsFrom(node1);
      Node node2 = null;
      try {
        node2 = new Node(30, node0, node0, node0, 54, 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node(122);
      Node node1 = new Node(30, node0, node0, node0, 54, 48);
      node1.getInputId();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9!5qCqyhl<.j");
      Node node2 = node1.clonePropsFrom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.isDebugger();
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = new Node(147, 4181, 147);
      Node node1 = Node.newNumber((double) 1, 40, 1843);
      Node node2 = new Node(39, node1, node1, 57, 2);
      node2.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString(2435, "BITAND", 2435, 4361);
      Node node1 = new Node(31);
      Node node2 = new Node((-1903), node0, node0, node1, 4103, 52);
      node1.useSourceInfoFrom(node0);
      // Undeclared exception!
      try { 
        node2.addChildrenToFront(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isAssignAdd();
      Node node1 = new Node(48, 39, 262);
      node0.isAdd();
      node1.isBlock();
      node0.useSourceInfoFromForTree(node1);
      node1.isFor();
      node0.isSwitch();
      node1.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(691, nodeArray0, 691, 691);
      Node node1 = new Node(38, 57, 2801);
      node1.isSetterDef();
      Node node2 = new Node(122, node0, node1);
      node2.isSetterDef();
      node2.isVoid();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node(110);
      Node node1 = new Node(30, node0, node0, node0, 54, 48);
      node1.removeFirstChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(47, nodeArray0, 3478, (-2285));
      node1.checkTreeEquals(node0);
      node1.getInputId();
      Node node2 = node1.clonePropsFrom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.getAncestor(0);
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(154, nodeArray0, 154, 154);
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.isComma();
      node0.isEquivalentToShallow(node0);
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(126, nodeArray0, (-408), 2031);
      Node node1 = new Node(126, node0, 2, 1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.newNumber((double) 1, (-1837), 36);
      node1.isFor();
      Node node2 = Node.newString("+}Da0l");
      node2.isExprResult();
      node1.isLabel();
      Node.newString("+}Da0l", 46, 21);
      node2.getJSType();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(35);
      node0.cloneNode();
      Node node1 = Node.newNumber((-1495.51027637));
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(38);
      node0.type = 36;
      node0.isOptionalArg();
      Node node1 = new Node(52, node0, node0, node0, 30, 37);
      node1.clonePropsFrom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.getAncestor(29);
      Node node2 = Node.newNumber((-2424.274), 98, 4095);
      node2.isDebugger();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      node0.isBreak();
      node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString("Seo9'#c:H^gEb");
      Node node1 = new Node(56, node0, node0, 1, 16);
      node0.setLineno(56);
      node1.srcref(node0);
      Node.mergeLineCharNo(52, (-1036));
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(545, 54, 820);
      Node node1 = Node.newNumber((double) 46, 4095, (-872));
      Node node2 = new Node(43, node1, node1, 52, 4);
      Node node3 = new Node(Integer.MAX_VALUE, 98, 40);
      node2.useSourceInfoIfMissingFrom(node3);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(37);
      Node node1 = node0.srcrefTree(node0);
      node1.checkTreeEqualsImpl(node0);
      node0.isRegExp();
      node0.isEquivalentTo(node1, true, true, true);
      node0.isIf();
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isWhile();
      Node node1 = new Node(30, node0, node0, node0, 54, 48);
      node1.cloneNode();
      node0.isContinue();
      ObjectType objectType0 = null;
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, "/Q:eRWB_kb]Me4T91t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(38);
      node0.type = 36;
      node0.isOptionalArg();
      Node node1 = new Node(52, node0, node0, node0, 30, 37);
      node0.checkTreeEqualsImpl(node1);
      node0.removeProp(49);
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(154, nodeArray0, 154, 154);
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node_SideEffectFlags0.setMutatesThis();
      node0.cloneNode();
      node0.isContinue();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newNumber(2623.2654065996);
      InputId inputId0 = new InputId((String) null);
      node0.setInputId(inputId0);
      node0.getAncestors();
      node0.toStringTree();
      Node node1 = new Node(47);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-9);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.checkTreeEquals(node1);
      node0.getInputId();
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node((-153), 52, (-153));
      Node node1 = Node.newNumber(1470.04398817, 52, 48);
      Node node2 = new Node(1, node1, node1, 4694, (-5560));
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(161);
      node0.getProp(161);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.wasEmptyNode();
      Node node1 = new Node(47, node0);
      node1.srcref(node0);
      Node node2 = Node.newString("is_constant_name", 40, 921);
      // Undeclared exception!
      try { 
        node2.checkTreeTypeAwareEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(155);
      node0.isOr();
      node0.isInc();
      node0.isGetElem();
      node0.isBlock();
      node0.isRegExp();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-399), 124);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = new Node(43);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.useSourceInfoIfMissingFromForTree(node0);
      node1.isDefaultCase();
      node1.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node1.isTrue();
      node1.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_FUNCTION_TYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[5];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative1;
      jSTypeNativeArray0[3] = jSTypeNative0;
      jSTypeNativeArray0[4] = jSTypeNative0;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = new Node(57, node0, node0, node0, node0);
      Node node2 = node0.getChildBefore((Node) null);
      node2.isSwitch();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(85);
      Node.newNumber((double) 85);
      node0.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isLabelName();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(101);
      node0.isOr();
      Node node1 = node0.cloneNode();
      node1.isContinue();
      node0.isNew();
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(155, nodeArray0, 48, 48);
      Node node1 = new Node(37, nodeArray0, 1317, 2);
      Node node2 = node0.useSourceInfoFrom(node1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.getType();
      node2.isAssign();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(1369, 4146, 130);
      Node node1 = new Node(130, node0);
      node1.isGetElem();
      node1.srcrefTree(node0);
      Node node2 = new Node(308, node1);
      node1.isEquivalentTo(node2, false, false, false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(42);
      Node node1 = new Node(132, node0, 49, 2);
      node0.clonePropsFrom(node1);
      Node node2 = null;
      try {
        node2 = new Node(132, node1, node0, node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newNumber(1826.0);
      node0.isDo();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Node node1 = new Node(40, node0, node0);
      node1.srcrefTree(node0);
      node1.toString(false, false, false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(132, 132, 132);
      node0.isExprResult();
      node0.removeProp(132);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      node0.isFor();
      Node node1 = Node.newString("Object#Key");
      Node node2 = new Node(47, node1, node0);
      node2.isExprResult();
      node2.cloneTree();
      Node node3 = Node.newNumber((double) 56);
      Node node4 = Node.newString(37, "Object#Element");
      Node node5 = node2.copyInformationFromForTree(node4);
      node5.isLabelName();
      node4.getJSType();
      node3.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(103, 103, 16);
      node0.wasEmptyNode();
      node0.isInc();
      node0.isFor();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(15, nodeArray0, 50, 4095);
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(52, 52, 52);
      Node node1 = Node.newNumber(1.0, 2596, 47);
      Node node2 = new Node(38, node1, node1, 29, 52);
      Node node3 = new Node(46, node2, node2, 2, 8);
      node3.setVarArgs(false);
      node0.useSourceInfoIfMissingFrom(node2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newNumber(338.9194724, 212, 212);
      Node node1 = Node.newNumber((double) 4095);
      InputId inputId0 = new InputId("5VP;$)3");
      node1.setInputId(inputId0);
      node1.getAncestors();
      node0.checkTreeEquals(node1);
      node0.getInputId();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(32);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 32
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = node0.getAncestor(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node1.getAncestor(42);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.isObjectLit();
      node1.isNoSideEffectsCall();
      Node node2 = node0.cloneTree();
      Node node3 = Node.newString("0");
      node2.srcref(node0);
      Node node4 = node2.useSourceInfoIfMissingFrom(node3);
      node3.isQualifiedName();
      node1.isEquivalentToShallow(node3);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesArguments();
      // Undeclared exception!
      try { 
        node4.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ImmutableList.of();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(147);
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node node0 = new Node(101);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node0.wasEmptyNode();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.isArrayLit();
      node0.isAnd();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got AND
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node((-4389));
      node0.mayMutateGlobalStateOrThrow();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry1.createParameters((List<JSType>) immutableList0);
      Node node2 = Node.newString("Object#Key", 0, 699);
      Node node3 = new Node(4, node0, node2, node0, node0, 21, 12);
      Node node4 = node3.clonePropsFrom(node2);
      Node node5 = null;
      try {
        node5 = new Node(37, node4, node1, node2, node0, (-1581), 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      node0.toString(false, false, false);
      node0.getQualifiedName();
      node0.isRegExp();
      Node node1 = Node.newNumber((double) 36);
      node0.copyInformationFromForTree(node1);
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(36, 36, 37);
      node0.siblings();
      node0.isInc();
      Node node1 = new Node(102, node0, node0, node0, 103, 38);
      node1.isQuotedString();
      node1.srcrefTree(node0);
      node1.isHook();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(51, 49, 50);
      Node node2 = new Node(47, node1, node1, node0, node0, 16, 79);
      node2.getQualifiedName();
      Node node3 = Node.newNumber((-454.82), (-4096), 0);
      node2.addChildrenAfter(node3, node1);
      node3.isFor();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(36, 36, 37);
      node0.siblings();
      node0.isInc();
      Node node1 = new Node(102, node0, node0, node0, 103, 38);
      node1.srcref(node0);
      node1.isHook();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isThis();
      Node node1 = new Node(57, node0, 50, 8);
      node0.getLength();
      node0.isContinue();
      node0.isNE();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(39, 39, 39);
      node0.type = 15;
      Node node1 = new Node(2, 38, 4095);
      node1.isNoSideEffectsCall();
      node1.putIntProp(57, 161);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("new child has existing sibling", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node2 = new Node(161);
      node0.mayMutateArguments();
      node0.checkTreeEqualsImpl(node1);
      node0.isNE();
      node1.isStringKey();
      node2.isTypeOf();
      try { 
        node0.setString("unexpected prop id ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LE 39 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000005] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString("Seo9'#c:H^gEb");
      Node node1 = new Node(51, node0);
      node0.getChangeTime();
      Node node2 = node1.copyInformationFrom(node0);
      node1.replaceChild(node0, node1);
      node0.isHook();
      node1.isNull();
      node2.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      Node node0 = Node.newString("<invalid>");
      Node node1 = new Node(43, node0);
      Node node2 = node1.srcref(node0);
      node1.checkTreeTypeAwareEqualsImpl(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.checkTreeEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(36);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(119, node0);
      node0.isFromExterns();
      node0.getIntProp(57);
      node1.isContinue();
      node1.removeChild(node0);
      Node node2 = new Node(30, node0, node0, node0);
      node1.isUnscopedQualifiedName();
      node2.isQualifiedName();
      Node node3 = new Node(12, node2, 303, (-480));
      Node node4 = node2.srcrefTree(node1);
      node2.copyInformationFrom(node4);
      Node node5 = Node.newString("Fw}yns3SXk1E`m", 2476, 3987);
      node3.addChildToBack(node5);
      node0.getChangeTime();
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node3, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node((-4389));
      node0.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      Node node1 = new Node(31);
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(51);
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(132, 132, 132);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isExprResult();
      node0.isInstanceOf();
      node0.isGetterDef();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isLabelName();
      Node node1 = Node.newNumber(48.0, 2204, 2824);
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber(124.0);
      node0.putBooleanProp(37, true);
      try { 
        node0.setString("iE.55,MwBuP#");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 124.0 [opt_arg: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node0 = new Node(93);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = node0.getAncestor(0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.setJSDocInfo(jSDocInfo0);
      node1.getProp(2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node(114);
      node0.getChangeTime();
      Node node1 = new Node((-118), node0, node0, 149, 0);
      node0.useSourceInfoIfMissingFrom(node1);
      Node.newString("<nK");
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isRegExp();
      node0.isAssignAdd();
      node0.isTypeOf();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(155);
      node0.isOr();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = Node.newString("bect#Key");
      node0.srcrefTree(node1);
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      Node node2 = new Node(15, node0);
      Node node3 = node2.srcref(node0);
      node3.checkTreeTypeAwareEqualsImpl(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.checkTreeEqualsImpl(node2);
      node2.isNull();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(101);
      node0.isOr();
      Node node1 = node0.cloneNode();
      node1.isContinue();
      node1.getBooleanProp(1);
      node1.useSourceInfoFrom(node0);
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node node0 = new Node(126);
      node0.wasEmptyNode();
      node_SideEffectFlags2.setMutatesGlobalState();
      node0.isArrayLit();
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(28);
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesArguments();
      Node node0 = Node.newNumber((-1527.18086117));
      Node node1 = new Node(28, node0, node0);
      Node node2 = new Node(28, node1);
      Node node3 = new Node(28, node2);
      Node node4 = node0.srcref(node2);
      node4.checkTreeTypeAwareEqualsImpl(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node3.checkTreeEqualsImpl(node2);
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newNumber(1826.0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Node node1 = new Node(40, node0, node0);
      node0.detachFromParent();
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString("Seo9'#c:H^gEb");
      Node node1 = new Node(51, node0);
      node0.getChangeTime();
      node1.replaceChild(node0, node1);
      node0.isHook();
      node1.checkTreeEqualsImpl(node0);
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node((-4389));
      node0.mayMutateGlobalStateOrThrow();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("[dl");
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) templateType0;
      jSTypeArray0[1] = (JSType) templateType0;
      jSTypeArray0[2] = (JSType) templateType0;
      jSTypeArray0[3] = (JSType) templateType0;
      jSTypeArray0[4] = (JSType) templateType0;
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, jSTypeArray0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) templateType0, true, jSTypeArray0);
      TemplateTypeMap templateTypeMap0 = templatizedType0.getTemplateTypeMap();
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry2, templateTypeMap0);
      TemplateTypeMapReplacer templateTypeMapReplacer1 = new TemplateTypeMapReplacer(jSTypeRegistry2, templateTypeMap0);
      templateTypeMapReplacer1.caseFunctionType(functionType0);
      node0.isGetterDef();
      Node node1 = Node.newString(38, "Not declared as a type name");
      node1.isAssign();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) (-2860), (-2030), 103);
      Node node1 = new Node(38, node0, node0);
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = new Node((-2860), node1, node1, 54, 46);
      Node node3 = node1.useSourceInfoFrom(node0);
      node2.isUnscopedQualifiedName();
      node3.checkTreeTypeAwareEqualsImpl(node1);
      node2.getSourceFileName();
      // Undeclared exception!
      try { 
        node3.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(41);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(41);
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags2.setMutatesArguments();
      Node node0 = new Node(41);
      node0.wasEmptyNode();
      node_SideEffectFlags3.setMutatesGlobalState();
      node0.isArrayLit();
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node((-408), 124, 124);
      Node node1 = new Node(49, node0, node0);
      node1.useSourceInfoFrom(node0);
      Node node2 = Node.newNumber((double) 30);
      Node node3 = Node.newString("O>e");
      node3.getBooleanProp(52);
      node2.isVar();
      node3.isFunction();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString("Seo9'#c:H^gEb");
      Node node1 = new Node(51, node0);
      node0.getChangeTime();
      node1.replaceChild(node0, node1);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node1.isArrayLit();
      node1.getAncestor(57);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newString(1215, "]P|RVJ2,)L*\"Qfv8D}");
      Node node1 = Node.newString(47, "node is not a child", 16, 52);
      node0.mayMutateGlobalStateOrThrow();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isGetElem();
      node0.isBlock();
      node1.isRegExp();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(33, 33, 4146);
      Node node1 = new Node(51, node0, node0);
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = null;
      try {
        node3 = new Node(51, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = Node.newNumber((double) 57, 8, 40);
      Node node2 = Node.newNumber(Double.POSITIVE_INFINITY, 48, 48);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.useSourceInfoFromForTree(node1);
      Node node3 = new Node(1039, node2, 29, 54);
      node3.isUnscopedQualifiedName();
      node2.isTrue();
      node3.addChildToBack(node0);
      node3.replaceChildAfter(node2, node1);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node1.addChildToBack(node3);
      node3.useSourceInfoIfMissingFrom(node2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newNumber((double) 33);
      node0.putBooleanProp(33, true);
      // Undeclared exception!
      try { 
        node0.setString("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 33
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = new Node(109);
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      Node node1 = new Node(30, node0);
      Node node2 = node1.srcref(node0);
      node0.getJSType();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isFor();
      node0.isInc();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(143, nodeArray0, 143, 143);
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      node0.isComma();
      Node node1 = new Node(32, node0, node0, 9, 46);
      node1.isDefaultCase();
      node0.isNew();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.REGEXP_FUNCTION_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(39, nodeArray0, 0, 46);
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(114);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node1 = new Node(16, 0, 2802);
      Node node2 = node0.srcref(node1);
      node0.getJSType();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.checkTreeEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString((-4391), "com.google.common.collect.LinkedHashMultimap$ValueEntry");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(16);
      Node node1 = new Node(1);
      node0.isThis();
      node0.isSetterDef();
      node0.isTry();
      Node node2 = new Node(0, node1, node0, node1);
      node2.isInc();
      Node node3 = Node.newString(29, "W;W*XzM", 47, 5);
      node3.isTypeOf();
      Node.newNumber((double) 4095);
      node2.useSourceInfoFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(124);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getAncestor(0);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(3389);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 3389
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(38);
      node0.toString();
      node0.isAnd();
      node0.setWasEmptyNode(false);
      node0.toString();
      node0.isRegExp();
      Node node1 = new Node(44);
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newNumber((-0.4539620626510791));
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(38, node0, 51, 29);
      node0.addChildToBack(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node((-4389));
      node0.mayMutateGlobalStateOrThrow();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(47);
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node node1 = new Node(30);
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags(51);
      node1.isDelProp();
      Node node2 = node1.srcrefTree(node0);
      node2.isAssign();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(119, (-1), 119);
      Node node1 = new Node((-2859), node0, node0);
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = Node.newNumber((double) 43);
      node3.isGetElem();
      node3.getBooleanProp(40);
      node3.isOnlyModifiesArgumentsCall();
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(119, (-1), 119);
      Node node1 = new Node((-2859), node0, node0);
      node0.useSourceInfoFrom(node1);
      Node node2 = Node.newNumber((double) 43);
      node2.isGetElem();
      node2.getBooleanProp(40);
      node0.isVar();
      node2.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(2005, 2005, 2005);
      node0.isIf();
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString((-4391), "3',Y{IzD2I90/qJd");
      Node.newString(46, "3',Y{IzD2I90/qJd", 42, 47);
      node0.mayMutateGlobalStateOrThrow();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      Node node1 = Node.newString("w~x6{{A.t", 40, 58);
      Node node2 = new Node(111, node0, node1);
      Node node3 = node2.srcref(node1);
      node1.checkTreeEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(4);
      node_SideEffectFlags3.areAllFlagsSet();
      node3.isSwitch();
      node3.isCase();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newString(" [", (-149), 124);
      node0.putBooleanProp(124, true);
      node0.getIntProp(124);
      node0.setString("NI/_\"v3/Wwa");
      node0.isCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[7];
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createEnumType("Object#Key", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(143, nodeArray0, 143, 143);
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      byte[] byteArray0 = new byte[8];
      node_SideEffectFlags2.clearAllFlags();
      byteArray0[4] = (byte)13;
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      Node node1 = new Node(152);
      node1.isGetElem();
      Node node2 = Node.newString("Object#Element");
      node2.toStringTree();
      node2.isFromExterns();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, 121, 4076);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.removeFirstChild();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isIf();
      node_SideEffectFlags2.setThrows();
      // Undeclared exception!
      try { 
        node0.isEquivalentToTyped((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isBreak();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = node0.cloneNode();
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isLocalResultCall();
      Node node1 = new Node(119, node0);
      node0.hasMoreThanOneChild();
      node0.getIntProp(57);
      node1.isContinue();
      node1.removeChild(node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node node3 = node2.clonePropsFrom(node1);
      node2.getStaticSourceFile();
      Node node4 = Node.newString((-1781), "this");
      node3.useSourceInfoIfMissingFrom(node4);
      node2.checkTreeEqualsImpl(node1);
      node0.checkTreeEqualsImpl(node1);
      node0.isNot();
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.Iterators$13");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0);
      node1.hasMoreThanOneChild();
      Node node2 = node1.copyInformationFrom(node0);
      node2.getJSType();
      Node node3 = node2.srcrefTree(node1);
      Node node4 = node3.copyInformationFromForTree(node1);
      node1.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node1.isDelProp();
      node1.checkTreeEquals(node3);
      node2.addChildrenToFront(node4);
      node2.copyInformationFrom(node4);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      node0.isBreak();
      node0.isWhile();
      node0.setWasEmptyNode(false);
      Node node1 = new Node(30, node0);
      Node node2 = new Node(48, 83, 55);
      node0.isCall();
      node0.isOnlyModifiesArgumentsCall();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node(37);
      int int0 = Node.VAR_ARGS_NAME;
      Node node1 = node0.srcrefTree(node0);
      Node node2 = new Node(55, node0, node1, node1, node1, 241, 2);
      Node node3 = node0.clonePropsFrom(node1);
      node3.getLastSibling();
      node1.isEquivalentTo(node2, false, false, false);
      node1.isIf();
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, 40, 4077);
      node0.getSourceFileName();
      Node node1 = new Node(40, node0, node0, node0, node0, 40, 30);
      node0.addChildToFront(node1);
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, 124, 124);
      node0.isLabel();
      node0.setWasEmptyNode(false);
      Node node1 = Node.newString(51, "Seo9'#c:H^gEb", (-237), 16);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node((-4389));
      node0.mayMutateGlobalStateOrThrow();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(47);
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node node1 = new Node(30);
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(54);
      node_SideEffectFlags1.setAllFlags();
      node0.isVar();
      node1.setSideEffectFlags(38);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString(57, "z\"l!5xWr6#UY");
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.isLocalResultCall();
      Node node1 = new Node(4, node0);
      node1.hasMoreThanOneChild();
      node0.getIntProp(56);
      node1.isContinue();
      node1.removeChild(node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node0.checkTreeEqualsImpl(node2);
      Node node3 = Node.newNumber((double) 1, 4095, 40);
      node2.checkTreeEqualsImpl(node3);
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      Node node1 = new Node(112);
      int int0 = Node.VAR_ARGS_NAME;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node1.isDefaultCase();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newString(1, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isLocalResultCall();
      Node node1 = new Node((-3008), node0);
      node1.hasMoreThanOneChild();
      node1.getIntProp(122);
      Node node2 = Node.newString(113, "node is not a child", 55, 77);
      node2.isContinue();
      node1.removeChild(node0);
      node1.copyInformationFromForTree(node2);
      Node node3 = Node.newString(4142, "node is not a child", 0, 147);
      node2.checkTreeEqualsImpl(node3);
      node0.checkTreeEqualsImpl(node1);
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = new Node(37);
      int int0 = Node.VAR_ARGS_NAME;
      Node node1 = node0.cloneNode();
      Node node2 = node0.srcrefTree(node1);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isQualifiedName();
      node1.useSourceInfoIfMissingFrom(node2);
      node2.isAdd();
      node1.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isThis();
      node0.getProp(56);
      Node node1 = new Node(126, node0);
      Node node2 = node1.srcref(node0);
      node0.checkTreeEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.areAllFlagsSet();
      node2.isSwitch();
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString(41, "node is not a child");
      node0.isAssign();
      Node node1 = new Node(39, node0, node0, 53, 4);
      Node node2 = node1.srcrefTree(node0);
      node2.isVarArgs();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node0.addChildToFront(node1);
      node0.isLabel();
      try { 
        node0.setDouble(41);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NULL node is not a child is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unexpected prop id ");
      Node node0 = new Node(21);
      node0.toString(false, false, false);
      node0.cloneTree();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(120);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = Node.newString(23, " V}O.", 7, 4549);
      Node node1 = new Node(2);
      node1.isNot();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(32, nodeArray0);
      Node node3 = new Node(23, node0, node0, node2, node2);
      node0.isNoSideEffectsCall();
      node1.setCharno(0);
      node0.isAdd();
      node0.getNext();
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newNumber(4655.418909, 147, 147);
      node0.isSwitch();
      node0.getAncestors();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cannot store more than MAX_VALUE elements");
      node0.removeFirstChild();
      node0.isNE();
      // Undeclared exception!
      try { 
        node0.copyInformationFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = Node.newNumber((double) 57, 8, 47);
      Node node2 = Node.newNumber(Double.POSITIVE_INFINITY, 48, 48);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node3 = new Node(40, node2, node2, 4095, 2);
      node3.useSourceInfoIfMissingFrom(node0);
      node2.srcref(node0);
      node1.checkTreeEqualsImpl(node3);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.areAllFlagsSet();
      node0.isSwitch();
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ImmutableList.of();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Key", 28, 209);
      Node node1 = new Node(119, node0, node0, 119, 362);
      Node node2 = node1.cloneNode();
      Node node3 = node1.srcrefTree(node0);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node1.setLineno(46);
      node0.isQualifiedName();
      Node node4 = new Node(43, node2, node1, node3);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      node0.getIntProp(38);
      node0.type = 15;
      node0.putIntProp(57, 50);
      Node node1 = new Node(46);
      node0.checkTreeEqualsImpl(node0);
      node0.isNE();
      node0.isDebugger();
      node0.isLabel();
      node1.isNew();
      node0.isTypeOf();
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1250), (-1250));
      Node node1 = new Node((-1250), node0, node0);
      Node node2 = new Node((-1250), node1, node1, node1);
      node2.getType();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(28);
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesArguments();
      Node node0 = Node.newNumber((double) 28);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(44);
      node0.isOr();
      int int0 = Node.IS_NAMESPACE;
      Node node1 = new Node(46, node0, 4095, 46);
      node0.cloneNode();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isQualifiedName();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.putBooleanProp(38, true);
      node0.isSyntheticBlock();
      Vector<Node> vector0 = new Vector<Node>(26);
      node0.removeProp(40);
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-14));
      Node node1 = new Node(54, node0, node0, node0, node0, 54, 0);
      node0.getProp(38);
      Node node2 = node1.cloneTree();
      Node node3 = Node.newString("BITAND");
      node0.isNull();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.newString("BITAND");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node4 = node2.setJSDocInfo(jSDocInfo0);
      Node node5 = new Node(53, node1, node3, node1, node3);
      node4.getInputId();
      node2.getStaticSourceFile();
      node3.setStaticSourceFile((StaticSourceFile) null);
      Node node6 = null;
      try {
        node6 = new Node(114, node1, node3, 112, (-2575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isOr();
      int int0 = Node.VAR_ARGS_NAME;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node1 = Node.newString(51, "Object#Key");
      Node node2 = node0.srcrefTree(node1);
      Node.newNumber(2488.441);
      node0.getJSDocInfo();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node1.setLineno(1148);
      node1.isQualifiedName();
      Node node3 = new Node(49, node0);
      node0.copyInformationFrom(node3);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(103, 103, 103);
      node0.setWasEmptyNode(true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.getJSType();
      Node node1 = Node.newString(32, "synthetic", 32, 30);
      Node node2 = node0.srcrefTree(node1);
      Node node3 = node0.copyInformationFromForTree(node2);
      node3.checkTreeEqualsImpl(node1);
      node0.checkTreeEqualsImpl(node1);
      node2.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isLocalResultCall();
      Node node1 = new Node(119, node0);
      node0.hasMoreThanOneChild();
      node0.getIntProp(57);
      node1.isContinue();
      node1.removeChild(node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.checkTreeEqualsImpl(node1);
      node0.checkTreeEqualsImpl(node1);
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isOr();
      int int0 = Node.IS_DISPATCHER;
      node0.isStringKey();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isGetterDef();
      node0.getSourceFileName();
      Node node1 = new Node(43, 114, 29);
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(49, 101, 101);
      node0.isAnd();
      node0.setWasEmptyNode(true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isFunction();
      node0.isAnd();
      node0.toStringTree();
      node0.isHook();
      node0.getParent();
      // Undeclared exception!
      try { 
        node0.addChildToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString("ARRAY_FUNCTION_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(53, node0);
      Node node2 = Node.newString("ARRAY_FUNCTION_TYPE", 40, 155);
      Node node3 = new Node(4, (-2376), 1611);
      Node node4 = node3.copyInformationFrom(node0);
      node4.getLength();
      node2.getJSType();
      Node node5 = node3.srcrefTree(node0);
      Node node6 = new Node(707, 39, 1);
      node0.copyInformationFromForTree(node6);
      Node.newNumber(0.0, 50, 355);
      node4.checkTreeEqualsImpl(node5);
      node5.checkTreeEqualsImpl(node4);
      Node.newNumber((double) 39);
      node5.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node((-1), 33, 1225);
      Node node1 = new Node(1472, node0, node0);
      Node node2 = new Node(43, node1);
      node2.useSourceInfoFrom(node0);
      Node node3 = Node.newNumber((double) 29);
      node1.isGetElem();
      node2.getBooleanProp(3769);
      node3.isVar();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got FALSE
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(103, 103, 103);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isAnd();
      node0.setWasEmptyNode(true);
      Node node1 = new Node(130, node0, 1, 2131);
      node0.isUnscopedQualifiedName();
      Node node2 = new Node(57);
      node0.setVarArgs(true);
      node0.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(103, 103, 103);
      node0.isAdd();
      int int0 = Node.VAR_ARGS_NAME;
      Node node1 = new Node(49);
      Node node2 = node1.cloneNode();
      Node node3 = node2.srcrefTree(node0);
      Node node4 = new Node(4, node2, node0, node0, 37, 0);
      node1.setLineno((-2850));
      node3.isQualifiedName();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = new Node(37);
      node0.isOr();
      Node node1 = Node.newNumber((double) 42, 1706, 2);
      Node node2 = node0.copyInformationFrom(node1);
      node1.getLength();
      node1.getJSType();
      node1.srcrefTree(node2);
      Node node3 = node0.copyInformationFromForTree(node2);
      Node node4 = Node.newNumber((-1327.2445), 12, 100);
      node0.checkTreeEqualsImpl(node2);
      node2.checkTreeEqualsImpl(node3);
      node1.isEquivalentToShallow(node4);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newString("v/ p\",{jm'B");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(32, node0);
      Node node2 = Node.newString("v/ p\",{jm'B", 351, 30);
      Node node3 = node0.copyInformationFrom(node2);
      node3.getLength();
      node2.getJSType();
      Node node4 = node0.srcrefTree(node1);
      node1.copyInformationFromForTree(node0);
      Node node5 = Node.newNumber((double) 48, 2, 102);
      node1.checkTreeEqualsImpl(node3);
      node5.checkTreeEqualsImpl(node4);
      node4.isEquivalentToShallow(node3);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(103, 103, 103);
      node0.isAnd();
      node0.setWasEmptyNode(true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isFunction();
      Node node1 = Node.newString("ARRAY_FUNCTION_TYPE");
      Node node2 = node0.copyInformationFromForTree(node1);
      Node.newNumber(0.5, 2266, (-1719));
      node2.checkTreeEqualsImpl(node1);
      node1.checkTreeEqualsImpl(node0);
      node0.isEquivalentToShallow(node2);
      Node.newString("ARRAY_FUNCTION_TYPE");
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = new Node(37);
      node0.isOr();
      int int0 = Node.VAR_ARGS_NAME;
      Node node1 = node0.cloneNode();
      Node node2 = node0.srcrefTree(node1);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node2.setLineno(4);
      node1.isQualifiedName();
      Node node3 = new Node(12, node0, node1, node0);
      node0.getParent();
      node3.removeChildren();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isFor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node(39, node0);
      Node node2 = node1.getLastSibling();
      node1.isEquivalentToShallow(node2);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(114);
      int int0 = Node.VAR_ARGS_NAME;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
      node0.isFor();
      node0.isComma();
      node0.isDefaultCase();
      node0.isIf();
      Node node1 = Node.newString((-1071), "aVVi", (-2065), 40);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.isHook();
      node0.isRegExp();
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node.newString("Object#Element", 101, 46);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node3 = new Node(42, node2, node1, node0, node2, 437, 54);
      Node node4 = node1.clonePropsFrom(node3);
      node3.getLastSibling();
      node4.isEquivalentTo(node2, true, false, false);
      node3.isCase();
      node2.isIf();
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString((-4391), ">eE8nu)[");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(228);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesArguments();
      node0.isFor();
      Node node1 = new Node(155, node0);
      Node node2 = node1.srcref(node0);
      node0.isExprResult();
      node2.getJSType();
      Node node3 = new Node(2, 8, 253);
      node2.checkTreeTypeAwareEqualsImpl(node3);
      node_SideEffectFlags3.areAllFlagsSet();
      node3.getInputId();
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(37);
      node0.isOr();
      int int0 = Node.VAR_ARGS_NAME;
      Node node1 = node0.cloneNode();
      Node node2 = node0.srcrefTree(node1);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node2.setLineno(4);
      node1.isQualifiedName();
      node2.removeChildren();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(39, nodeArray0, 124, 43);
      Node node1 = new Node(47, node0);
      Node node2 = new Node(86, node1, node1, node1, 2, 51);
      node2.useSourceInfoFrom(node0);
      Node node3 = Node.newNumber(3923.5164660349974);
      node3.isGetElem();
      node3.getBooleanProp(47);
      node0.isVar();
      node3.getSourceFileName();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Key");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-848));
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node.newNumber((double) 54);
      Node node1 = new Node(0, 48, 4044);
      node1.copyInformationFromForTree(node0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) node0;
      objectArray0[1] = (Object) node0;
      objectArray0[2] = (Object) node1;
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage("/:A-g", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property /:A-g
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(111, 111, 2561);
      node0.isAnd();
      node0.setWasEmptyNode(false);
      node0.toString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isFunction();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(117);
      node0.isOr();
      int int0 = Node.VAR_ARGS_NAME;
      Node node1 = node0.cloneNode();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ARRAY_FUNCTION_TYPE");
      Node node2 = new Node(430, 264, (-2748));
      Node node3 = Node.newNumber(983.2794563, 53, 264);
      node3.getQualifiedName();
      node2.getQualifiedName();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newString("Seo9'#c:H^gEb");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node1.copyInformationFrom(node0);
      node1.getLength();
      node0.getJSType();
      Node node2 = null;
      try {
        node2 = new Node(39, node0, node0, (-3292), 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(54, nodeArray0, 117, 1364);
      Node node1 = new Node(39, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = Node.newNumber(2488.441);
      node3.isGetElem();
      node3.getBooleanProp(38);
      node2.isVar();
      node1.getSourceFileName();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.isHook();
      node0.isRegExp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("G'F]5mcT)");
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) templateType0;
      jSTypeArray0[1] = (JSType) templateType0;
      jSTypeArray0[2] = (JSType) templateType0;
      jSTypeArray0[3] = (JSType) templateType0;
      jSTypeArray0[4] = (JSType) templateType0;
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, jSTypeArray0);
      templatizedType0.toMaybeTemplatizedType();
      ObjectType objectType0 = FunctionType.getTopDefiningInterface(templateType0, "can't use .skipNulls() with maps");
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) objectType0, false, jSTypeArray0);
      modificationVisitor0.caseFunctionType(functionType0);
      FunctionType.getTopDefiningInterface(objectType0, (String) null);
      jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, templatizedType0);
      jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = new Node(101);
      node0.isOr();
      int int0 = Node.VAR_ARGS_NAME;
      Node node1 = node0.cloneNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node node2 = new Node(57, node0);
      node1.srcref(node0);
      node1.getJSType();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node_SideEffectFlags1.areAllFlagsSet();
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isOr();
      int int0 = Node.VAR_ARGS_NAME;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node1 = Node.newString(51, "Object#Key");
      Node node2 = node0.srcrefTree(node1);
      Node.newNumber(2488.441);
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node1.setLineno(1148);
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(46, 47, 52);
      Node node2 = Node.newNumber(Double.POSITIVE_INFINITY, 102, 102);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = Node.newNumber(0.0);
      node0.getQualifiedName();
      Node node4 = new Node(1293, node2, 29, 54);
      node0.isUnscopedQualifiedName();
      node4.isQualifiedName();
      node4.addChildToBack(node0);
      node1.getChangeTime();
      node4.replaceChildAfter(node2, node1);
      node0.getBooleanProp(32);
      node4.addChildToFront(node3);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Node node1 = new Node(47, node0, node0, 63, 30);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      Node node3 = node1.getLastChild();
      Node node4 = new Node(31);
      node4.isInc();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node3.isFunction();
      Node node5 = node2.cloneNode();
      node5.isEquivalentTo(node0);
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(103, 103, 103);
      node0.isAnd();
      node0.setWasEmptyNode(true);
      node0.toString();
      node0.isCase();
      node0.isDec();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString("Object#Element");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node1 = new Node(52);
      node1.setWasEmptyNode(true);
      node0.toString();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.isFunction();
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newString("Seo9'#c:H^gEb");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isFromExterns();
      Node.newNumber((double) 46);
      node1.isDebugger();
      node0.isLabel();
      node0.setChangeTime(4);
      Node node2 = new Node(50);
      node2.isSetterDef();
      try { 
        node0.setDouble(31);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Seo9'#c:H^gEb [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(103, 103, 103);
      node0.isAdd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isFor();
      Node node1 = new Node(55, node0);
      node0.srcref(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.getJSType();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node_SideEffectFlags1.areAllFlagsSet();
      node1.getInputId();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = ";\"{/.Cp}";
      Node node0 = Node.newString(23, ";\"{/.Cp}", 1, 23);
      Node node1 = new Node(32, node0, node0, node0, node0, 56, 4095);
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = node1.getLastSibling();
      node0.isEquivalentTo(node3, false, false, true);
      node3.isHook();
      Node node4 = null;
      try {
        node4 = new Node(47, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(103, 103, 103);
      node0.isAdd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      node0.isExprResult();
      node0.isLabel();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.toString(false, false, true);
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.isOr();
      int int0 = Node.VAR_ARGS_NAME;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = node0.cloneNode();
      Node node2 = node0.srcrefTree(node1);
      Node node3 = Node.newNumber((double) 1);
      node2.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node1.isNE();
      node3.isLocalResultCall();
      node2.checkTreeEqualsImpl(node0);
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newString("unexpected prop id ");
      node0.isOnlyModifiesArgumentsCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node2 = new Node(42, node1);
      Node node3 = Node.newString(": ", 57, 4);
      node0.getDirectives();
      Node node4 = node2.copyInformationFrom(node3);
      node2.getLength();
      jSTypeRegistry0.getType(": ");
      Node.newString((-566), "Object#Key");
      Node node5 = new Node(49);
      node2.copyInformationFromForTree(node4);
      Node.newNumber((double) 53, 32, 12);
      node4.checkTreeEqualsImpl(node3);
      node1.isStringKey();
      Node.newString("Object#Key");
      node4.isDebugger();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isWhile();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      Node node1 = new Node(3674, node0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(".Sr0MVSI!hW}cZ", node1, jSType0);
      jSTypeRegistry0.resetImplicitPrototype(jSType0, enumType0);
      Node node2 = Node.newString("ON1", 2553, 2251);
      Node node3 = node0.useSourceInfoFrom(node2);
      Node node4 = Node.newNumber(1881.896254285659);
      node4.isGetElem();
      node3.getSourceFileName();
      node3.isScript();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(46, 47, 52);
      Node node2 = Node.newNumber(Double.POSITIVE_INFINITY, 102, 102);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = new Node(54, node2, node0, node0, node1, 1488, 12);
      Node node4 = node2.clonePropsFrom(node3);
      Node node5 = node2.getLastSibling();
      node4.isEquivalentTo(node2, false, true, true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node6 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node6.isHook();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node6;
      nodeArray0[2] = node0;
      nodeArray0[3] = node5;
      nodeArray0[4] = node2;
      nodeArray0[5] = node3;
      nodeArray0[6] = node2;
      nodeArray0[7] = node6;
      Node node7 = null;
      try {
        node7 = new Node(1, nodeArray0, 584, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString("Object#Key", (-294), (-4391));
      Node node1 = Node.newString(46, "Object#Key", 42, 56);
      node0.isCatch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
      Node node2 = new Node(30);
      node2.wasEmptyNode();
      node_SideEffectFlags1.setMutatesGlobalState();
      node2.isQualifiedName();
      node1.isTypeOf();
      node2.setSideEffectFlags(node_SideEffectFlags4);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newString("Seo9'#c:H^gEb");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node1.replaceChild(node0, node1);
      node0.isFromExterns();
      Node node2 = new Node(2, 55, 48);
      Node.newString((-1085), "Seo9'#c:H^gEb", 30, 31);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getDirectives();
      node0.isBreak();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(38, nodeArray0);
      Node node2 = node0.copyInformationFrom(node1);
      node1.getLength();
      node2.getJSType();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("Named type with empty name component", node2, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      Node node1 = new Node(3051, node0, node0);
      node0.mayMutateGlobalStateOrThrow();
      node1.putIntProp(16, 0);
      Node node2 = new Node(43);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("com.google.javascript.rhino.SimpleErrorReporter", node2, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Node node1 = new Node(47, node0, node0, 63, 30);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = node0.cloneNode();
      node2.srcrefTree(node0);
      Node node3 = Node.newNumber((double) 55);
      node2.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.isNE();
      node3.isLocalResultCall();
      node2.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = node0.getAncestor(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2657);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      node1.isObjectLit();
      Node node2 = node0.cloneNode();
      // Undeclared exception!
      try { 
        node2.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = new Node(38);
      node0.isName();
      Node node1 = new Node(43);
      node0.addChildToBack(node1);
      node1.toString(true, true, true);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Seo9'#c:H^gEb");
      Node.extractLineno(521);
      Node node0 = new Node(120, 120, 0);
      node0.cloneTree();
      node0.toString();
      Node node1 = Node.newString(50, "CATCH 120");
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(115);
      node0.addChildToBack(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(120, nodeArray0);
      Node node1 = new Node(120, node0, 63, 101);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.isNoSideEffectsCall();
      node1.getLastChild();
      Node node3 = new Node(31);
      node3.isInc();
      node0.isHook();
      node0.isDec();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node2.isAnd();
      node0.detachFromParent();
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0);
      Node node2 = new Node(103, node1, node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getDirectives();
      node0.isBreak();
      Node node3 = node2.copyInformationFrom(node1);
      node2.getLength();
      node3.getJSType();
      Node node4 = node1.srcrefTree(node3);
      node1.copyInformationFromForTree(node3);
      Node node5 = Node.newNumber((double) 32, 29, (-356));
      node4.checkTreeEqualsImpl(node1);
      Node node6 = Node.newString("9!5qCqyhl<.j", 101, 84);
      node6.getQualifiedName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node7 = node4.setJSDocInfo(jSDocInfo0);
      node2.addChildrenToBack(node6);
      node6.checkTreeTypeAwareEqualsImpl(node2);
      Node node8 = node5.clonePropsFrom(node7);
      node0.getAncestors();
      node5.mayMutateGlobalStateOrThrow();
      node8.isGetElem();
      node4.getAncestors();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(103, 103, 10);
      node0.isAnd();
      Node node1 = Node.newString("StringNode: str is null", 55, (-1109));
      node0.clonePropsFrom(node1);
      node0.setWasEmptyNode(true);
      node0.isNumber();
      Node node2 = new Node(40, node0, node0, 833, 36);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      Node node3 = node0.cloneNode();
      node3.isEquivalentTo(node2, true, false, false);
      node2.isEquivalentToShallow(node3);
      node2.isCast();
      node3.addSuppression("|h1i44bl'g]j3M?l{");
      node3.getLength();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isFor();
      Node node1 = Node.newString("c!SlD-G,QPQT;Bkz");
      Node node2 = new Node(1080);
      Node node3 = new Node(43, node2, node1, 16, 36);
      node0.checkTreeEqualsImpl(node3);
      node0.getQualifiedName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node4 = node0.setJSDocInfo(jSDocInfo0);
      node2.addChildrenToBack(node0);
      node4.checkTreeTypeAwareEqualsImpl(node3);
      // Undeclared exception!
      try { 
        node4.clonePropsFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, (-408), 121);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node0.isThis();
      node_SideEffectFlags1.setMutatesArguments();
      node0.wasEmptyNode();
      node0.isVar();
      node0.isNew();
      // Undeclared exception!
      try { 
        node0.addChildrenToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newNumber((-2361.381122374454));
      node0.getIntProp(1304);
      Node node1 = new Node(119, (-2813), (-942));
      Node node2 = node0.srcrefTree(node1);
      node1.isWith();
      node1.isTrue();
      node2.toStringTree();
      Node node3 = node0.cloneNode();
      node3.isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        node0.addChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(120, nodeArray0);
      Node node1 = new Node(120, node0, 63, 101);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.isNoSideEffectsCall();
      Node node3 = node1.getLastChild();
      Node node4 = node1.useSourceInfoFrom(node2);
      Node node5 = new Node(31);
      node5.isInc();
      node0.isHook();
      node0.isDec();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node3.isFor();
      node4.isRegExp();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(119, node0);
      node0.hasMoreThanOneChild();
      node0.getIntProp(57);
      node1.isContinue();
      node1.removeChild(node0);
      Node node2 = new Node(38, node0);
      node1.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node2.isQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-271));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags(124);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newNumber((double) (-271));
      node_SideEffectFlags5.setThrows();
      node0.isStringKey();
      Node node1 = Node.newString("9!5qCqyhl<.j");
      Node node2 = new Node(2321, node0, node1);
      Node.newNumber((double) 49);
      node2.isTry();
      Node node3 = new Node(53, nodeArray0, 0, 4095);
      node2.addChildBefore(node3, node1);
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newNumber((double) 42);
      node0.isOr();
      int int0 = Node.VAR_ARGS_NAME;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node0.isFor();
      Node node1 = new Node(86, node0);
      Node node2 = node1.srcref(node0);
      node2.isExprResult();
      node2.getJSType();
      Node node3 = Node.newNumber(983.2794563, 2023, 51);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node3.checkTreeTypeAwareEqualsImpl(node4);
      node_SideEffectFlags4.areAllFlagsSet();
      node2.getInputId();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = new Node(33, 37, 4146);
      int int0 = 1796;
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags5.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags6.setMutatesArguments();
      Node node0 = Node.newNumber((-1.0), 3000, 3000);
      node0.isTrue();
      node_SideEffectFlags1.setThrows();
      node0.isLabel();
      Node node1 = new Node(38, node0);
      node1.removeFirstChild();
      node1.isReturn();
      node1.cloneNode();
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(8388608);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      Node node1 = node0.cloneNode();
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = node1.srcrefTree(node2);
      Node.newNumber((double) 4095);
      // Undeclared exception!
      try { 
        node3.checkTreeEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.isNE();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isTrue();
      node_SideEffectFlags1.setThrows();
      node0.isLabel();
      Node node1 = new Node(21, node0);
      node1.isReturn();
      node1.cloneNode();
      node1.getChildAtIndex(1);
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(117);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isFor();
      Node node1 = new Node(117, node0);
      Node node2 = node1.srcref(node0);
      node2.isExprResult();
      node0.getJSType();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node_SideEffectFlags2.areAllFlagsSet();
      node0.getInputId();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isOr();
      int int0 = Node.VAR_ARGS_NAME;
      Node node1 = new Node((-632), node0);
      node0.srcref(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      node0.isVar();
      node0.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node0.isStringKey();
      Node node2 = null;
      try {
        node2 = new Node(1934, node0, 4095, 4095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, 1048576, 4077);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node0.isFor();
      Node node1 = new Node(40, node0);
      Node node2 = node0.srcref(node1);
      node1.isExprResult();
      node1.getJSType();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node_SideEffectFlags3.areAllFlagsSet();
      node2.getInputId();
      node2.isSwitch();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = new Node(4146, 37, 3910);
      Node node1 = Node.newNumber(1299.8041885746, 64, 64);
      Node node2 = new Node((-3052), node1, node1, 7, 46);
      node2.addChildrenAfter(node0, node1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(46, 47, 52);
      Node node2 = Node.newNumber(Double.POSITIVE_INFINITY, 102, 102);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.newNumber(0.0);
      node0.getQualifiedName();
      Node node3 = new Node(1293, node2, 29, 54);
      node0.isUnscopedQualifiedName();
      node3.isQualifiedName();
      node3.addChildToBack(node0);
      node1.getChangeTime();
      node3.replaceChildAfter(node2, node1);
      node0.getBooleanProp(32);
      node2.isWhile();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(46);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesArguments();
      node0.isFor();
      Node node1 = Node.newString("pHzEPm[=us+xg-Pt");
      node0.isExprResult();
      node1.isLabel();
      node0.getJSType();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.toString(true, false, true);
      node0.isComma();
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(120, nodeArray0);
      Node node1 = new Node(120, node0, 63, 101);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.isNoSideEffectsCall();
      node1.getLastChild();
      node1.toString();
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node3.isInc();
      node0.isHook();
      node0.isDec();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node4 = Node.newString("Swik8t\"AniElK%%8>nt");
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("CATCH 63", node4, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-14));
      Node node1 = new Node(43, node0, node0, node0, 46, 1);
      node0.getProp(38);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.mayMutateArguments();
      node1.mayMutateArguments();
      node1.getJsDocBuilderForNode();
      Node node2 = Node.newString(37, "9!5qCqyh<.j");
      node2.setSideEffectFlags(node_SideEffectFlags0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node2.isQuotedString();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("3sZ'QGdIU^1", true);
      node2.putProp(38, simpleSourceFile0);
      // Undeclared exception!
      try { 
        node1.replaceChild(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, (-408), 4077);
      Node node1 = node0.cloneNode();
      node1.isQualifiedName();
      Object object0 = new Object();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Node node2 = node1.copyInformationFrom(node0);
      node2.isOptionalArg();
      Node node3 = new Node(39);
      // Undeclared exception!
      try { 
        node3.setDouble(57);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "Object#Key";
      Node node0 = Node.newString("Object#Key", (-294), (-4391));
      Node node1 = Node.newString(46, "Object#Key", 42, 56);
      node0.isCatch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      // Undeclared exception!
      try { 
        node1.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = Node.newNumber(0.0, 56, 54);
      node1.isFor();
      node1.setIsSyntheticBlock(false);
      Node node2 = node1.getLastSibling();
      node0.getJSType();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("Not declared as a constructor", node2, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.hasMoreThanOneChild();
      node0.getIntProp(4);
      node0.isContinue();
      node1.removeChild(node0);
      Node node2 = new Node(0, node1, node0);
      node1.isTry();
      // Undeclared exception!
      try { 
        node2.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString("Object#Element");
      node0.setWasEmptyNode(true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.isFor();
      Node node1 = Node.newString("Object#Key");
      node0.isOnlyModifiesArgumentsCall();
      node1.checkTreeEquals(node0);
      node0.isFromExterns();
      node1.isTry();
      Node node2 = new Node(51, 53, 43);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
      node_FileLevelJsDocBuilder0.append("Node tree inequality:\nTree1:\nSTRING Object#Key\n\n\nTree2:\nSTRING Object#Element [empty_block: com.google.javascript.rhino.Node$IntPropListItem@0000000336]\n\n\nSubtree1: STRING Object#Key\n\n\nSubtree2: STRING Object#Element [empty_block: com.google.javascript.rhino.Node$IntPropListItem@0000000336]\n");
      node2.toStringTree();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = 31;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(31, 31, 91);
      Node node1 = Node.newNumber((double) 40, 3, 31);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node2 = Node.newNumber((double) 32);
      node0.getQualifiedName();
      Node node3 = new Node(37, node0, 8, 1320);
      node3.removeFirstChild();
      node1.isUnscopedQualifiedName();
      node2.addChildToBack(node1);
      node1.getChangeTime();
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node3, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(0, 32, (-1109));
      node0.isWhile();
      node0.setWasEmptyNode(true);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-3150));
      node_SideEffectFlags1.setMutatesThis();
      Node node1 = new Node(33, nodeArray0, 1, 16);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node0.isContinue();
      Node node2 = new Node(40, node0);
      node2.isOr();
      // Undeclared exception!
      try { 
        node2.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, (-408), 121);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node1 = Node.newNumber((double) 29);
      node0.getQualifiedName();
      Node node2 = new Node(8, node0, 2, 37);
      node2.isUnscopedQualifiedName();
      node0.addChildToBack(node2);
      node1.getChangeTime();
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node2, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getCharno();
      Node node1 = node0.getLastSibling();
      node0.isEquivalentToShallow(node1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      node0.isAdd();
      Node node1 = new Node(52, node0, 37, 32);
      node0.putIntProp(2, 39);
      Node node2 = node1.srcref(node0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node0.getProp(37);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.mayMutateArguments();
      node1.mayMutateArguments();
      node0.getJsDocBuilderForNode();
      Node node3 = Node.newString(15, "9!5qCqyh<.j");
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      Node node0 = Node.newString("", 2505, 77);
      Node node1 = new Node(40, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, (-408), 121);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      node0.isWhile();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(55);
      node_SideEffectFlags1.setMutatesThis();
      Node node1 = new Node(33, nodeArray0, 53, 2);
      node0.wasEmptyNode();
      node1.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(0);
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setMutatesArguments();
      node1.mayMutateGlobalStateOrThrow();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesArguments();
      node1.isCall();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-14));
      Node node1 = new Node(54, node0, node0, node0, node0, 54, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node0.isTrue();
      node_SideEffectFlags0.setThrows();
      node0.isLabel();
      Node node2 = new Node(39, node1);
      node0.removeFirstChild();
      node2.isReturn();
      node2.cloneNode();
      // Undeclared exception!
      try { 
        node2.getChildAtIndex(531);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(37, node0, (-1109), 30);
      node1.isNumber();
      Node node2 = new Node(16, node1, node1, 4095, 50);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.setSideEffectFlags(105);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node0.isThis();
      node_SideEffectFlags2.setMutatesArguments();
      node1.wasEmptyNode();
      node0.isVar();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, (-408), 121);
      node0.isDefaultCase();
      Node node1 = new Node(39, 117, (-161));
      node1.isTry();
      Node node2 = Node.newNumber((-1129.2107427452286));
      node2.getQualifiedName();
      node2.isGetProp();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node1.isEquivalentTo(node2);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setReturnsTainted();
      node0.isGetProp();
      int int0 = Node.LAST_PROP;
      Node node1 = Node.newNumber(0.0, 57, 229);
      node0.isThrow();
      Node node2 = Node.newString(12, "no next sibling.");
      Node node3 = new Node(86, node2);
      Node node4 = new Node(43, node1, node0, node3, 36, 3755);
      node4.isFalse();
      node4.isOnlyModifiesArgumentsCall();
      node0.getJSDocInfo();
      node1.isStringKey();
      node2.isHook();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = Node.newNumber((double) 29, (-2397), 1826);
      Node node1 = new Node(42, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.srcrefTree(node1);
      Node.newNumber((double) 1);
      node0.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.setChangeTime(25);
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString("Object#Element", 53, 39);
      Node node2 = new Node(12, node0, node0, node1, node0, 1791, 46);
      Node node3 = node0.clonePropsFrom(node2);
      Node node4 = node0.getLastSibling();
      node0.isEquivalentTo(node4, true, true, true);
      node0.isHook();
      node0.checkTreeEquals(node4);
      node0.isIf();
      Node node5 = Node.newNumber((-3937.88), 779, 53);
      node0.addChildToBack(node5);
      node4.isOptionalArg();
      node3.isEquivalentToTyped(node4);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(53, node0);
      node1.removeProp(50);
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-4731));
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node1.isGetProp();
      int int0 = Node.LAST_PROP;
      Node node2 = Node.newNumber((double) 2, 97, 51);
      node1.isThrow();
      Node node3 = node0.getChildAtIndex((-3267));
      node2.getIndexOfChild(node3);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-894), 2492);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2492);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isThis();
      node_SideEffectFlags0.setMutatesArguments();
      node0.wasEmptyNode();
      node0.isVar();
      node0.getSourceFileName();
      node0.isScript();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node0.isContinue();
      node0.isGetterDef();
      Node node1 = new Node(751, nodeArray0, 1951, 1951);
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(47);
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isFor();
      Node node1 = new Node(39, node0);
      Node node2 = node1.srcref(node0);
      node1.isExprResult();
      node1.getJSType();
      node1.isOnlyModifiesArgumentsCall();
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node_SideEffectFlags0.areAllFlagsSet();
      node1.clonePropsFrom(node0);
      node2.getProp((-4729));
      node1.getInputId();
      node2.isSwitch();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 447, 447, 29);
      Node node1 = new Node(2, node0, node0, node0, node0, 12, 48);
      node0.srcrefTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node node2 = Node.newString("");
      node2.isNull();
      node1.isOnlyModifiesArgumentsCall();
      node2.checkTreeEquals(node0);
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags2.areAllFlagsSet();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isWhile();
      Node node1 = new Node((-282), 32, 16);
      Node node2 = node0.srcrefTree(node1);
      node0.setIsSyntheticBlock(false);
      Node node3 = node1.getLastSibling();
      node3.setCharno(1);
      node3.isEquivalentToShallow(node1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node4 = new Node((-2302));
      node2.setLineno(49);
      node4.isQualifiedName();
      node2.copyInformationFrom(node4);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) (-14), (-14), (-1104));
      Node node1 = new Node(48, node0, node0);
      node0.isQualifiedName();
      Node node2 = node1.useSourceInfoFrom(node0);
      // Undeclared exception!
      try { 
        node2.appendStringTree((Appendable) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 48
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node0 = new Node(93);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = node0.getAncestor(0);
      node1.getProp(2);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isOr();
      int int0 = Node.VAR_ARGS_NAME;
      node0.isBreak();
      node0.isOnlyModifiesThisCall();
      Object object0 = new Object();
      node0.isParamList();
      Node node1 = new Node(967, node0, node0, node0, node0, 2, (-1218));
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DO is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isFor();
      Node node1 = new Node(39, node0);
      Node node2 = node1.srcref(node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "node is not a child");
      node1.copyInformationFrom(node0);
      node2.isEquivalentToShallow(node0);
      node1.isCast();
      node1.addSuppression("node is not a child");
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString(64, "com.google.common.collect.AbstractMapEntry", 64, 96);
      Node node1 = new Node(1003);
      node1.hasChild(node0);
      Node node2 = new Node(0, node0, node1, node0, node1);
      node1.isInc();
      node0.isObjectLit();
      node2.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(31, 31, 91);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node1 = Node.newNumber((double) 32);
      node1.getProp((-2636));
      node0.getQualifiedName();
      Node node2 = new Node(2, node0, node0, node0, node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.mergeLineCharNo((-15), (-1585));
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(101);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, (-408), 121);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      node0.isWhile();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(55);
      node_SideEffectFlags1.setMutatesThis();
      Node node1 = new Node(33, nodeArray0, 53, 2);
      node1.isOr();
      node0.getProp(50);
      node0.isTry();
      node1.getAncestors();
      Node node2 = new Node(20, nodeArray0, 997, (-2615));
      node2.isAssignAdd();
      node0.isVoid();
      // Undeclared exception!
      try { 
        node1.isQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "\n\nSubtree2: ";
      Node node0 = Node.newString("\n\nSubtree2: ");
      // Undeclared exception!
      try { 
        node0.addChildAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isWhile();
      Node node1 = node0.cloneNode();
      node0.setCharno(302);
      Node node2 = new Node((-1472), node1, node1, node1, 40, (-1373));
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      node2.putIntProp(115, 31);
      node3.isGetProp();
      node0.isFalse();
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      node0.isAdd();
      Node node1 = new Node(37, node0, node0);
      node0.putIntProp(2, 39);
      node1.srcref(node0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node2 = null;
      try {
        node2 = new Node(64, nodeArray0, 1254, 47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = new Node(38);
      node0.type = 15;
      node0.isAdd();
      Node node1 = new Node(36, node0, node0);
      node1.putIntProp((-352), 161);
      Node node2 = node1.srcref(node0);
      node0.checkTreeEqualsImpl(node1);
      node0.isNE();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
      Node node3 = new Node(284);
      node0.isGetElem();
      node_SideEffectFlags3.setMutatesGlobalState();
      node0.setLineno(53);
      node3.isQualifiedName();
      node2.isTrue();
      node3.isOnlyModifiesArgumentsCall();
      node1.getChildAtIndex((-1477));
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), (-894));
      Node node1 = new Node(124, node0, 2, 1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = Node.newNumber((double) 1, (-1837), 36);
      node1.isFor();
      node2.setIsSyntheticBlock(false);
      Node node3 = node0.getLastSibling();
      node0.isEquivalentToShallow(node3);
      node1.setLineno(36);
      node0.isIf();
      node3.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(113);
      node0.isFor();
      Node node1 = Node.newString("Not declared as a constructor");
      node1.isOnlyModifiesArgumentsCall();
      node0.checkTreeEquals(node1);
      node0.isTry();
      Node node2 = new Node(1, 37, 54);
      Node node3 = new Node(1673, 1466, 29);
      node0.isArrayLit();
      node1.isAnd();
      node2.isNew();
      Node.newNumber((-2471.0));
      node2.isCast();
      Node node4 = new Node(49, (-1051), (-1));
      node4.addSuppression((String) null);
      node4.isQualifiedName();
      node4.cloneTree();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = Node.newNumber(2364.2466974, 14, 14);
      Node node1 = new Node(51, node0, node0, node0, node0);
      node1.setCharno(1);
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node_SideEffectFlags0.setMutatesArguments();
      node1.wasEmptyNode();
      node0.isVar();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      nodeArray0[1] = null;
      Node node2 = null;
      try {
        node2 = new Node(30, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString("direct_eval", 49, 54);
      Node node2 = new Node(43, node1, node0, node1, node0, 2, 1499);
      Node node3 = node1.clonePropsFrom(node0);
      node2.getLastSibling();
      node2.isEquivalentTo(node3, true, true, true);
      Node node4 = null;
      try {
        node4 = new Node(0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString("Object#Element", 53, 39);
      Node node2 = new Node(12, node0, node0, node1, node0, 1791, 46);
      node0.clonePropsFrom(node2);
      Node node3 = node0.getLastSibling();
      node0.isEquivalentTo(node3, true, true, true);
      node0.isHook();
      node0.checkTreeEquals(node3);
      node0.isIf();
      node3.isLabel();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newString((-718), "$rOr`Nh+Gg0v]-TiQ", (-718), 152);
      Node node1 = new Node((-718), node0, node0, node0, 152, 1);
      node1.getBooleanProp(32);
      node1.isOnlyModifiesArgumentsCall();
      node1.isOptionalArg();
      node1.cloneTree();
      node0.setCharno((-1));
      node1.setLength(114);
      node0.isRegExp();
      node0.getProp(29);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node node0 = new Node(31, 11, 98);
      node0.toStringTree();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.toStringTree();
      node_SideEffectFlags0.setMutatesGlobalState();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = new Node(51, node0, node0, node0, node0);
      node1.isIn();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.isVar();
      node0.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isStringKey();
      Node node1 = new Node(4095, node0, 124, 57);
      node1.getJSDocInfo();
      node1.setChangeTime(49);
      node0.isSetterDef();
      Node node2 = new Node(43, nodeArray0);
      node0.useSourceInfoFromForTree(node2);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node2);
      node_NodeMismatch0.equals((Object) null);
      node1.isOr();
      node1.setSourceEncodedPositionForTree(37);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.getSideEffectFlags();
      node0.mayMutateGlobalStateOrThrow();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node node0 = new Node(33, nodeArray0, 5313, 5313);
      node0.isFor();
      Node node1 = node0.srcref(node0);
      node0.isExprResult();
      node1.isLabel();
      Node node2 = new Node(38, node1, node1, node1, 1, 2);
      node2.getJSType();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node_SideEffectFlags0.areAllFlagsSet();
      node2.getInputId();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, (-408), 121);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      node0.isWhile();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(55);
      node_SideEffectFlags1.setMutatesThis();
      Node node1 = new Node(33, nodeArray0, 53, 2);
      node0.wasEmptyNode();
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node0.isContinue();
      node0.isGetterDef();
      // Undeclared exception!
      try { 
        node1.isUnscopedQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(4076, nodeArray0, 4076, 121);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(83);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.clearSideEffectFlags();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setMutatesArguments();
      node0.isFor();
      node0.isIf();
      node0.isCast();
      node0.addSuppression("p2oq)l?pcqE");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = Node.newString(23, ";\"{/.Cp}", 4, 23);
      Node node1 = new Node(2);
      node0.isNot();
      Node node2 = new Node(110, node0, node0, node0, node0);
      node2.isNoSideEffectsCall();
      node2.isFunction();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0), 29, 29);
      Node node1 = node0.cloneNode();
      node1.isQualifiedName();
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.setIsSyntheticBlock(false);
      Node node3 = node0.getLastSibling();
      node1.getDouble();
      node0.isEquivalentToShallow(node3);
      Node node4 = Node.newString(55, "EK&#IX", 57, 31);
      node4.isNew();
      node2.isThrow();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isOr();
      int int0 = Node.VAR_ARGS_NAME;
      node0.isBreak();
      Node node1 = Node.newString("yziwel(");
      node0.putIntProp(8, (-16));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isWith();
      Node node2 = new Node(30);
      node1.isLabel();
      Node.newString("yziwel(", (-16), 110);
      node2.isIf();
      node0.isDo();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int int0 = (-2917);
      Node.extractCharno((-2917));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[7];
      JSType jSType0 = null;
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithNewThisType((FunctionType) null, (ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = Node.newString(1839, "Q;x85M%~9*!f", 2, 2064);
      node0.isWhile();
      node0.setWasEmptyNode(false);
      Node.newNumber((double) 1839, 79, 2064);
      node0.isThis();
      node0.isUnscopedQualifiedName();
      node0.isObjectLit();
      node0.getSourceFileName();
      node0.isAssign();
      node0.isInc();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2144);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node0.isThis();
      node_SideEffectFlags5.setMutatesArguments();
      node0.wasEmptyNode();
      Node node1 = new Node(2097152, node0, node0, node0, 57, 73);
      node1.isVar();
      node0.getSourceFileName();
      node1.isScript();
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(128);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 128
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node(4854, 1140, (-1620));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<TemplateType> stack0 = new Stack<TemplateType>();
      LinkedList<TemplateType> linkedList0 = new LinkedList<TemplateType>(stack0);
      stack0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) linkedList0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = node0.srcrefTree(node1);
      node2.setLineno(40);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.getStaticSourceFile();
      node1.isLocalResultCall();
      jSTypeRegistry0.hasNamespace("Z&IPj<4I3)%");
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node0.isNull();
      try { 
        node3.setString("Object#Element");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST 40 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      Node node1 = new Node(39, node0);
      Node node2 = node1.srcref(node0);
      node0.isEquivalentToShallow(node1);
      // Undeclared exception!
      try { 
        node2.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      Node node1 = Node.newString(124, ";\"{/.Cp}", (-1101), 7);
      Node node2 = new Node(37);
      node0.hasChild(node2);
      Node node3 = new Node(4095, node0, node0, node1, node0);
      node0.isDebugger();
      node2.isCall();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(31, (-1795), 31);
      Node node1 = new Node(0, node0, node0, node0);
      node1.useSourceInfoIfMissingFromForTree(node0);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isWhile();
      node0.putIntProp(161, (-352));
      Node node1 = Node.newString("Seo9'#c:H^gEb");
      Node node2 = node0.srcref(node1);
      node1.checkTreeEqualsImpl(node0);
      node0.isNE();
      node2.isEquivalentToShallow(node0);
      node1.getString();
      node1.setLineno(32);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags3.setThrows();
      Node node1 = new Node(4, node0, node0, node0, node0);
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node1.isFor();
      Node node2 = Node.newString("jsdoc_info");
      node0.isExprResult();
      node1.isLabel();
      node2.getJSType();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node2);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Unknown class name");
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.addChildAfter(node0, (Node) null);
      node0.isLabel();
      node0.getCharno();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isAssign();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.isStringKey();
      node0.isCast();
      node0.addSuppression("STAR");
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-408), nodeArray0, 121, (-408));
      Node node1 = new Node(55, node0, 57, 56);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node0.detachFromParent();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags5.setMutatesArguments();
      node0.isFor();
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString("Not declared as a constructor", 38, 38);
      Node node1 = new Node(38, node0);
      node0.getQualifiedName();
      node0.getStaticSourceFile();
      node1.isGetProp();
      node1.getLength();
      Node node2 = node1.useSourceInfoFrom(node0);
      // Undeclared exception!
      try { 
        node2.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-14));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(29);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node0.isFor();
      node_SideEffectFlags1.setThrows();
      node0.isArrayLit();
      Node node1 = new Node(47, node0, 934, 1073741823);
      Node node2 = new Node(43, node1);
      Node node3 = node2.removeFirstChild();
      node2.isReturn();
      node0.cloneNode();
      node2.getChildAtIndex((-170));
      node3.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.isWhile();
      node0.setWasEmptyNode(false);
      node0.isThis();
      node0.isSyntheticBlock();
      node0.setSourceEncodedPositionForTree(43);
      node0.isObjectLit();
      node0.getSourceFileName();
      node0.isAssign();
      Node node1 = new Node(158, node0, node0, 158, 91);
      node0.srcrefTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 158
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(127);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.setReturnsTainted();
      node0.isThis();
      node_SideEffectFlags1.setMutatesArguments();
      Node node1 = new Node((-1018), node0, node0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-14));
      Node node1 = Node.newNumber((double) 37, 817, 4854);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(46);
      node1.getDouble();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Seo9'#c:H^gEb");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = new Node(118936);
      node0.addChildToBack(node0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      Node node1 = new Node(38, 57, 2811);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        node1.getQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 57 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-14));
      Node node1 = new Node(57, node0, node0, node0, node0, 0, 55);
      Node node2 = Node.newNumber(1.0, 124, 38);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(222);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.newNumber((double) 37);
      node1.getQualifiedName();
      node1.useSourceInfoFromForTree(node2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node4 = null;
      try {
        node4 = new Node(29, node1, node3, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = new Node(38);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(4095, nodeArray0, 56, 1);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.type = 15;
      node0.isAdd();
      Node node2 = null;
      try {
        node2 = new Node(36, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      Node node1 = new Node(38, 57, 2811);
      Node node2 = Node.newString("...[");
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.isLabel();
      node2.getJSType();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node2.toString(true, false, true);
      node0.isComma();
      node1.isArrayLit();
      node1.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      int int0 = 29;
      Node node0 = Node.newNumber((double) 29, (-2375), 1826);
      Node node1 = node0.cloneNode();
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = new Node(40, node2, 37, 54);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node3.getLastSibling();
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 29.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = Node.newString("Seo9'#c:H^gEb", 25, 25);
      Node node1 = Node.newString(98, "Object#Element", 49, 33);
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = Node.newNumber((double) 36, 128, 0);
      Node node3 = new Node(42, node2, node0, node1);
      node3.isNumber();
      node0.setLength(57);
      node2.getJsDocBuilderForNode();
      node2.getCharno();
      node1.isInstanceOf();
      node2.isCase();
      node2.hasChildren();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node((-408), 124, 124);
      Node node1 = new Node(124, node0, 2, 1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node1.isFor();
      Node node2 = new Node(31, node1);
      Node node3 = node0.srcref(node1);
      node3.isExprResult();
      node1.isLabel();
      node1.getJSType();
      node3.checkTreeTypeAwareEqualsImpl(node1);
      node_SideEffectFlags2.areAllFlagsSet();
      node3.getInputId();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(31, 31, 137);
      Node node1 = Node.newNumber(29.0, 3, 31);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node2 = Node.newNumber((double) 32);
      node0.getQualifiedName();
      node1.isQualifiedName();
      // Undeclared exception!
      try { 
        node2.addChildBefore(node0, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(307, nodeArray0, 307, 124);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node0.isWhile();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(50);
      node_SideEffectFlags1.setMutatesThis();
      Node node1 = new Node((-1712), nodeArray0, 51, 30);
      node0.wasEmptyNode();
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node1.isContinue();
      Node node2 = new Node(1379, node1, 36, 19);
      node2.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isContinue();
      node0.isBlock();
      Node node1 = Node.newString(39, "H%*aX|`\u0003", (-3418), (-1526));
      node1.getInputId();
      node0.setInputId((InputId) null);
      node1.setIsSyntheticBlock(true);
      node0.addChildToFront(node1);
      try { 
        node0.setString("Z;g2Q9/");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node1.isWhile();
      node1.setWasEmptyNode(false);
      node1.isThis();
      node1.isContinue();
      node1.getJsDocBuilderForNode();
      node1.setSourceEncodedPositionForTree(43);
      node1.isObjectLit();
      Node node2 = Node.newNumber((-2201.301));
      node2.getSourceFileName();
      node0.isAssign();
      Node node3 = new Node((-876), node1, node2, (-2242), 38);
      Node node4 = node3.srcrefTree(node0);
      node4.isNew();
      // Undeclared exception!
      try { 
        node2.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isOnlyModifiesThisCall();
      Node node1 = Node.newNumber((double) 53, 24, 43);
      node0.isFor();
      Node node2 = Node.newString("+}Da0l");
      node1.isExprResult();
      node2.isLabel();
      Node node3 = new Node(29, node1, node0);
      node2.getJSType();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isBlock();
      node3.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = new Node((-627));
      node0.isOr();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isFor();
      Node node1 = new Node(38, node0);
      Node node2 = node1.srcref(node0);
      node0.isExprResult();
      node0.isLabel();
      node1.getJSType();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node_SideEffectFlags1.areAllFlagsSet();
      node0.getInputId();
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = Node.newString((-1541), "jh", (-1541), (-1541));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(1384, node0);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node2 = node1.removeFirstChild();
      node0.getIndexOfChild(node1);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node1);
      node3.setSourceFileForTesting("node is not a child");
      node2.useSourceInfoIfMissingFrom(node1);
      // Undeclared exception!
      try { 
        node3.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      Node node1 = new Node(39, node0);
      node1.srcref(node0);
      node1.isExprResult();
      node1.isLabel();
      node1.getJSType();
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node_SideEffectFlags1.areAllFlagsSet();
      node1.getInputId();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.getJSDocInfo();
      node0.setChangeTime((-443));
      node0.isSetterDef();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node2 = new Node(2, nodeArray0);
      // Undeclared exception!
      try { 
        node0.useSourceInfoFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(147);
      Node node0 = new Node(147);
      node0.isNumber();
      Node node1 = new Node(49, 4095, (-1));
      Node node2 = node1.cloneNode();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      node2.cloneNode();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node1.wasEmptyNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node2.isObjectLit();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = new Node(31, 11, 98);
      node0.toStringTree();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.toStringTree();
      node0.getCharno();
      Node node1 = new Node(759, node0);
      node1.isExprResult();
      node0.isLabel();
      node1.getJSType();
      Node node2 = new Node(110, node1, node1);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      Node.extractCharno(38);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, (-1598), 132);
      Node node1 = new Node(42, node0, 38, 4095);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node1.isGetProp();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags0.areAllFlagsSet();
      node1.isWith();
      node0.isLabel();
      Node node2 = Node.newString("empty_block", 31, 240);
      node2.isIf();
      node1.isDo();
      node1.isFunction();
      node1.isTry();
      node0.copyInformationFrom(node2);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = new Node((-1114));
      node0.type = 15;
      node0.isAdd();
      Node node1 = new Node(4, node0);
      node1.getIntProp(117);
      node1.isReturn();
      node1.removeChild(node0);
      node1.isReturn();
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0);
      node0.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node1.hasMoreThanOneChild();
      node1.putIntProp(1, 36);
      Node node2 = node1.srcref(node0);
      node1.checkTreeEqualsImpl(node0);
      node0.isQualifiedName();
      node0.isEquivalentToShallow(node1);
      // Undeclared exception!
      try { 
        node2.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 1
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.isWhile();
      node0.setWasEmptyNode(true);
      node1.isThis();
      node0.isContinue();
      node0.setSourceEncodedPositionForTree(43);
      node1.isObjectLit();
      node0.getSourceFileName();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node2 = jSTypeRegistry1.createParameters((List<JSType>) arrayList0);
      node2.isAssign();
      Node node3 = new Node(4, node0, node0, 51, 64);
      Node node4 = node3.srcrefTree(node1);
      node2.removeProp(47);
      node4.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-14));
      Node node1 = new Node(54, node0, node0, node0, node0, 54, 0);
      node0.getProp(38);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      node0.mayMutateArguments();
      node1.mayMutateArguments();
      node1.getJsDocBuilderForNode();
      Node node2 = Node.newString(37, "9!5qCqyhl<.j");
      // Undeclared exception!
      try { 
        node1.replaceChild(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = Node.newString("c)+c~\"_w:", 31, 31);
      Node node1 = new Node(31, node0, node0);
      Node node2 = node1.cloneNode();
      node0.setIsSyntheticBlock(false);
      node1.getLastSibling();
      node2.setCharno(39);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      node3.putIntProp(37, 103);
      node2.getSideEffectFlags();
      Node node4 = Node.newString(36, "c)+c~\"_w:");
      node4.isThrow();
      node2.isFalse();
      Node node5 = new Node(814, node4, 51, 3113);
      node5.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-14));
      Node node1 = new Node((-14));
      Node node2 = new Node(54, node1, node0, node0, node0, 54, 0);
      node0.getProp(38);
      Node node3 = node2.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags2.areAllFlagsSet();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node3.isArrayLit();
      node0.isAnd();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      node0.isVar();
      node0.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isStringKey();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isFor();
      node0.isStringKey();
      node0.isCast();
      node0.addSuppression("");
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, (-408), 4077);
      Node node1 = node0.cloneNode();
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = node0.srcrefTree(node1);
      node3.isOnlyModifiesArgumentsCall();
      node1.checkTreeEquals(node0);
      Node node4 = new Node(57, node3, node2, node0, node0);
      node2.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node2.isCall();
      node0.detachFromParent();
      // Undeclared exception!
      try { 
        node3.getChildAtIndex(31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 25);
      node0.isAdd();
      Node node1 = Node.newNumber((double) 25, 154, 13);
      Node node2 = new Node(29, node0, node1);
      Node node3 = new Node((-1837));
      node3.hasMoreThanOneChild();
      ImmutableList.of();
      node3.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node.extractLineno((-294));
      Node node0 = new Node(1399, (-294), 1399);
      Node node1 = new Node(101, node0, node0, node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, (-408), 121);
      node0.addChildrenToBack(node0);
      node0.isDefaultCase();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isOnlyModifiesThisCall();
      node0.isObjectLit();
      node0.getChildCount();
      node0.setInputId((InputId) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node1 = new Node(2374);
      node1.hasChild(node0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(48);
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags6.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 25);
      node0.isAdd();
      node_SideEffectFlags1.setThrows();
      node0.isStringKey();
      Node.newString("9!5qCqyhl<.j");
      Node node1 = new Node(15, node0, node0);
      Node node2 = Node.newNumber((double) 53);
      node0.isTry();
      node1.addChildBefore(node2, node0);
      Node.extractLineno(122);
      node2.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node(38);
      node0.type = 15;
      node0.isAdd();
      Node node1 = new Node(36, node0, node0);
      node1.putIntProp((-352), 148);
      Node node2 = node1.srcref(node0);
      node0.checkTreeEqualsImpl(node1);
      node0.isNE();
      // Undeclared exception!
      try { 
        node2.isEquivalentToShallow((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newString(128, "Not declared as a constructor", 128, 30);
      // Undeclared exception!
      try { 
        node0.isEquivalentTo((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(447);
      Node node1 = new Node(148, node0, 16, 118);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J0L,@oRQ!]yIVObHED/");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node node2 = Node.newNumber(1.0, (-3451), 4095);
      node0.isFunction();
      Node node3 = Node.newString("+}Da0l");
      node2.isExprResult();
      node3.isLabel();
      Node node4 = Node.newString("+}Da0l", 16, 49);
      node3.getJSType();
      node3.checkTreeTypeAwareEqualsImpl(node4);
      node0.isBlock();
      node4.getLastChild();
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        node1.addChildToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = Node.newString(" : ", (-294), 76);
      Node node1 = Node.newString(46, " : ", 42, 128);
      node1.setLength(40);
      node1.putIntProp(2, 119);
      node0.mayMutateGlobalStateOrThrow();
      node0.isNumber();
      node1.setLength(733);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newNumber((double) 63, 63, (-846));
      Node node1 = new Node(63, node0, node0);
      node1.detachChildren();
      node0.removeProp(55);
      node1.isRegExp();
      node0.isNoSideEffectsCall();
      node1.toString();
      try { 
        node1.setDouble(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ARRAYLIT is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = new Node((-1114));
      node0.type = 15;
      node0.isAdd();
      Node node1 = new Node(4, node0);
      node1.putIntProp((-352), 148);
      Node node2 = node1.srcref(node0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.areAllFlagsSet();
      node2.isWith();
      node1.isLabel();
      node2.getIndexOfChild(node1);
      node0.checkTreeEqualsImpl(node1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      node_NodeMismatch0.equals(node_SideEffectFlags1);
      node2.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), (-894));
      Node node1 = new Node(124, node0, 2, 1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.newNumber((double) 1, (-1837), 36);
      node1.isFor();
      Node node2 = Node.newString("+}Da0l");
      node2.isExprResult();
      node1.isLabel();
      Node.newString("+}Da0l", 46, 21);
      node2.getJSType();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("Should not happen\n");
      node0.isOr();
      int int0 = Node.VAR_ARGS_NAME;
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, 124, 4077);
      Node node1 = new Node(56, node0, node0, node0, node0, 124, 2);
      Node node2 = node0.srcrefTree(node1);
      node0.setIsSyntheticBlock(false);
      Node node3 = node0.getLastSibling();
      node2.setCharno(56);
      node3.useSourceInfoIfMissingFromForTree(node1);
      node3.putIntProp(35, (-156));
      node3.getSideEffectFlags();
      node2.isThrow();
      node3.isFalse();
      node1.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), (-894));
      Node node1 = new Node(124, node0, 2, 1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node0.detachFromParent();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node_SideEffectFlags7.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node0.isGetProp();
      node_SideEffectFlags6.areAllFlagsSet();
      node0.isWith();
      node1.isLabel();
      Node node2 = new Node(57, nodeArray0, (-1371), (-2229));
      node0.setLength((-1619));
      node1.isNew();
      node0.isEquivalentTo(node1, true, false, false);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList.of();
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isBlock();
      String string0 = "9!5qCqyhl<.j";
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) jSTypeRegistry0;
      node0.isParamList();
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(126);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), (-894));
      Node node1 = new Node(124, node0, 2, 1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      node_SideEffectFlags6.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node0.isGetProp();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags5.areAllFlagsSet();
      node0.isWith();
      node1.isLabel();
      node1.getIndexOfChild(node0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      node_NodeMismatch0.equals(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = Node.newString(54, "UNKNOWN_TYPE");
      node1.isOptionalArg();
      int int0 = Node.INPUT_ID;
      Node node2 = new Node(132, node1, 54, (-400));
      node2.isUnscopedQualifiedName();
      node2.addChildToBack(node0);
      node0.getChangeTime();
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-14));
      Node node1 = new Node(54, node0, node0, node0, node0, 54, 0);
      node0.getProp(38);
      Node node2 = node1.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags2.areAllFlagsSet();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node2.isArrayLit();
      node0.isAnd();
      node0.isNew();
      node2.isUnscopedQualifiedName();
      node0.clonePropsFrom(node2);
      node2.isDo();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newNumber(3406.0, 911, 14);
      Node node1 = node0.cloneNode();
      node0.srcrefTree(node1);
      node1.setIsSyntheticBlock(false);
      Node node2 = node0.getLastSibling();
      node0.setCharno(55);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node4 = new Node(154, node2, node0, 31, 54);
      Node node5 = node3.useSourceInfoIfMissingFromForTree(node4);
      node0.putIntProp((-1), 301);
      Node node6 = new Node(53, node3, node5);
      node6.getSideEffectFlags();
      node6.isThrow();
      node0.isFalse();
      node5.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(31, 31, 91);
      Node node1 = Node.newNumber(29.0, 3, 31);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node2 = Node.newNumber((double) 32);
      node0.getQualifiedName();
      Node node3 = new Node(2, node1, node1, node0, node1);
      node2.isEquivalentToShallow(node1);
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 29.0 3 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = Node.newString(4161, "");
      Node node1 = new Node(53, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Class<TemplateType> class0 = TemplateType.class;
      ServiceLoader<TemplateType> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<TemplateType> iterator0 = serviceLoader0.iterator();
      ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      node1.getProp(43);
      node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(39);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags((-149));
      node_SideEffectFlags3.areAllFlagsSet();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter2, false);
      node1.isArrayLit();
      node0.isAnd();
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node0.isFor();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isContinue();
      // Undeclared exception!
      try { 
        node0.isEquivalentTo((Node) null, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), (-894));
      Node node1 = new Node(124, node0, 2, 1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node0.getProp(2202);
      node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(33);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags6.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags7.areAllFlagsSet();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = null;
      try {
        node2 = new Node(1571, node1, node0, node0, node0, 1177, 2105);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      Node node1 = Node.newString("");
      node0.toString();
      node0.isBreak();
      Node node2 = Node.newString("");
      node1.putIntProp(47, 53);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node3 = new Node(1014, node1, node2, node1, node0);
      Node node4 = new Node(12, nodeArray0);
      node1.hasChild(node2);
      node3.isLabelName();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = new Node(1, nodeArray0);
      node0.hasChild(node1);
      node0.isLabelName();
      node0.isTypeOf();
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isQualifiedName();
      Node node1 = node0.useSourceInfoFrom(node0);
      Node node2 = new Node(2, node1, 1103, 1610612736);
      Node node3 = node0.srcrefTree(node1);
      node2.setIsSyntheticBlock(true);
      Node node4 = node2.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-4499));
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node3.isFor();
      Node node5 = Node.newString("");
      node4.isNull();
      Node.newNumber((-2471.0));
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.setJSDocInfo(jSDocInfo0);
      node3.getString();
      Node node6 = new Node(36, node4, node2, node5, node4);
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-14));
      Node node1 = new Node(54, node0, node0, node0, node0, 54, 0);
      node0.getProp(38);
      Node node2 = node1.cloneTree();
      Node node3 = Node.newString("BITAND");
      node0.isNull();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.newNumber((double) 37);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node4 = new Node((-1113), node3, node1, node1, node2);
      node4.setJSDocInfo(jSDocInfo0);
      Node node5 = null;
      try {
        node5 = new Node(53, node1, node3, node1, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) 447, 447, 29);
      Node node1 = new Node(16, node0, 11, 30);
      Node node2 = node0.srcrefTree(node1);
      node0.setIsSyntheticBlock(true);
      node1.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isFor();
      Node node3 = Node.newString("");
      node3.isNull();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node4 = Node.newNumber(4160.1);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.setConstructor(false);
      Node node5 = node2.setJSDocInfo(jSDocInfo0);
      node0.putIntProp(38, 49);
      Node node6 = null;
      try {
        node6 = new Node(4095, node4, node1, node4, node5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(132, 132, 132);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node0.removeProp(132);
      node0.isScript();
      node0.setLineno(26);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isWhile();
      node0.setWasEmptyNode(true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.toStringTree();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.isWhile();
      node0.isScript();
      node0.isUnscopedQualifiedName();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node0.isNumber();
      Node node1 = node0.cloneNode();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Element");
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node1.wasEmptyNode();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      node1.isObjectLit();
      node0.getSourceFileName();
      node1.isIf();
      node1.getQualifiedName();
      node1.isGetterDef();
      node0.removeFirstChild();
      node1.isWhile();
      node0.isScript();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = new Node(318);
      node0.isAdd();
      Node node1 = new Node(57, node0);
      node1.putIntProp((-2676), 55);
      Node node2 = node0.srcref(node1);
      node2.checkTreeEqualsImpl(node0);
      node0.isQualifiedName();
      node1.isEquivalentToShallow(node0);
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Key");
      node0.isSwitch();
      node0.setWasEmptyNode(true);
      node0.toStringTree();
      node0.setCharno(30);
      Node node1 = Node.newNumber((double) 47, 39, 462);
      Node node2 = new Node(42);
      Node node3 = new Node(56, node1, node2, node0, 32, 5697);
      Node node4 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.putIntProp(54, 51);
      node0.getSideEffectFlags();
      Node.newNumber((double) 37, 388, 63);
      node4.isFalse();
      node0.isAssign();
      node2.isVoid();
      node2.isEquivalentTo(node4, true, false, true);
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), (-894));
      Node node1 = new Node(124, node0, 2, 1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      node_SideEffectFlags6.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node0.isGetProp();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags5.areAllFlagsSet();
      node0.isWith();
      node1.isLabel();
      node1.getIndexOfChild(node0);
      Node node2 = new Node(49, node1);
      node2.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      node_SideEffectFlags1.setThrows();
      node0.isArrayLit();
      Node node1 = new Node(21, node0);
      Node node2 = node1.removeFirstChild();
      node2.isReturn();
      node1.cloneNode();
      // Undeclared exception!
      try { 
        node2.getChildAtIndex(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(91, 91, 91);
      node0.toStringTree();
      Node node1 = Node.newNumber(1.0, 56, 2781);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(46);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node2 = Node.newNumber((-1.0));
      node2.getQualifiedName();
      Node node3 = new Node(32, (-1506), 4695);
      Node node4 = new Node(46, node0, node1, node3, node0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got ASSIGN_RSH
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isWhile();
      node0.setWasEmptyNode(true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node0.isThis();
      node_SideEffectFlags2.setMutatesArguments();
      node0.wasEmptyNode();
      node0.isObjectLit();
      node0.getSourceFileName();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = new Node((-1114));
      node0.type = 15;
      node0.isAdd();
      Node node1 = new Node(4, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node2.getProp(148);
      node1.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(115);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.wasEmptyNode();
      node0.isObjectLit();
      node2.getSourceFileName();
      node2.isAssign();
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-14));
      node0.putIntProp(3350, (-1044));
      Node node1 = node0.srcref(node0);
      node0.checkTreeEqualsImpl(node1);
      node0.isQualifiedName();
      node0.isEquivalentToShallow(node1);
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -14
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node0.isFor();
      node0.setIsSyntheticBlock(false);
      Node node1 = node0.getLastSibling();
      node0.setCharno(1564);
      Node node2 = Node.newNumber((double) 0, 11, (-127));
      node1.isEquivalentToShallow(node2);
      node1.setLineno(47);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      Node node0 = new Node(31, 11, 98);
      node0.toStringTree();
      Node node1 = Node.newNumber((double) 2, (-1186), 48);
      node0.useSourceInfoFromForTree(node1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.toStringTree();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesArguments();
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = new Node((-135));
      Node node1 = Node.newString((-1854), "x1`^@^tDC+D");
      node0.copyInformationFrom(node1);
      node1.copyInformationFrom(node0);
      node1.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) 29, 447, 29);
      Node node1 = new Node(42, node0, node0);
      node1.isQualifiedName();
      node0.useSourceInfoFrom(node1);
      Node node2 = null;
      try {
        node2 = new Node(149, node0, 1016, (-1506));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) 447, 447, 29);
      Node node1 = new Node(16, node0, 11, 30);
      Node node2 = node0.srcrefTree(node1);
      node0.setIsSyntheticBlock(true);
      node1.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isFor();
      Node node3 = Node.newString("");
      node3.isNull();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node4 = Node.newNumber(4160.1);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node5 = node2.setJSDocInfo(jSDocInfo0);
      Node node6 = null;
      try {
        node6 = new Node((-2544), node4, node1, node4, node5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0);
      node0.setWasEmptyNode(true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(47);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags4.areAllFlagsSet();
      Node node2 = Node.newNumber(0.0);
      node2.isAdd();
      node0.getJSType();
      node1.clonePropsFrom(node0);
      node2.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0);
      node0.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.createTemplateTypeMap((ImmutableList<TemplateType>) null, (ImmutableList<JSType>) null);
      node0.getString();
      node1.hasMoreThanOneChild();
      node0.getIntProp(4);
      node0.isContinue();
      node1.isReturn();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = new Node((-627));
      node0.isOr();
      int int0 = Node.VAR_ARGS_NAME;
      node0.checkTreeEquals(node0);
      Node node1 = new Node(55, node0, node0);
      node0.getSourceFileName();
      node1.isString();
      node0.isNumber();
      Node node2 = new Node(115, node1, node1, node1);
      Node node3 = node0.cloneNode();
      Node node4 = new Node(8);
      node4.isQualifiedName();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      node1.isThis();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node node5 = Node.newString(29, "d*Ky*cX_%q", 37, 2);
      node5.wasEmptyNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.hasChild(node0);
      node3.isLabelName();
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(true);
      node0.toStringTree();
      node0.setCharno(30);
      Node node1 = Node.newNumber((double) 47, 39, 462);
      Node node2 = new Node(42);
      Node node3 = new Node(56, node1, node2, node0, 32, 5697);
      Node node4 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.putIntProp(54, 51);
      node0.getSideEffectFlags();
      Node.newNumber((double) 37, 352, 63);
      node4.isFalse();
      // Undeclared exception!
      try { 
        node1.clonePropsFrom(node4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-14));
      node0.getProp(38);
      Node node1 = node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.isArrayLit();
      node0.removeFirstChild();
      node0.isCatch();
      node1.hasChild(node0);
      node1.isLabelName();
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(4077, nodeArray0, (-408), (-408));
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags6.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 105, 1501);
      node0.setLineno(105);
      node0.getChangeTime();
      node0.setSourceFileForTesting("null");
      node0.isWhile();
      Node node1 = new Node(47);
      node1.isSyntheticBlock();
      Node node2 = node0.copyInformationFrom(node1);
      node2.setChangeTime(47);
      Node node3 = Node.newString(25, ": ");
      node3.isOnlyModifiesThisCall();
      Node.newNumber((-3813.75727), 36, (-489));
      node3.getAncestor(429);
      node3.isUnscopedQualifiedName();
      Node node4 = Node.newString("R`&%", 120, 46);
      // Undeclared exception!
      try { 
        node4.addChildBefore(node3, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isBlock();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(42);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node1 = Node.newNumber((double) 2);
      node0.isAdd();
      node1.getJSType();
      node0.clonePropsFrom(node1);
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-14));
      Node node1 = new Node(54, node0, node0, node0, node0, 54, 0);
      node1.removeChildren();
      node0.getProp(38);
      Node node2 = node1.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.isArrayLit();
      node1.removeFirstChild();
      node1.isCatch();
      node2.hasChild(node1);
      node2.isLabelName();
      node2.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newNumber((-0.24167052543726214));
      Node.newString(53, "&&/]", 55, 8);
      node0.putBooleanProp(38, true);
      try { 
        node0.setString("node is not a child");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -0.24167052543726214 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(112);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Class<TemplateType> class0 = TemplateType.class;
      ServiceLoader<TemplateType> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<TemplateType> iterator0 = serviceLoader0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      node0.setLength(112);
      Node node1 = new Node(44, (-1289), (-3147));
      node1.removeChildren();
      Node node2 = Node.newNumber((double) 4095);
      node1.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.isIn();
      node2.getProp((-550));
      node2.isTry();
      node0.getAncestors();
      node2.isDelProp();
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node0.isFor();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags4.setMutatesArguments();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-14));
      Node node1 = new Node(54, node0, node0, node0, node0, 54, 0);
      Node node2 = Node.newNumber((-856.8), 817, 4854);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(46);
      Node node3 = Node.newNumber((double) 50);
      node2.getQualifiedName();
      Node node4 = new Node(55, node2, node1, node1, node3);
      node1.setType(36);
      node4.isDec();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node node0 = Node.newNumber((-2479.181706302394));
      Node node1 = node0.srcrefTree(node0);
      Object object0 = new Object();
      node1.isQualifiedName();
      node0.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      // Undeclared exception!
      try { 
        node1.appendStringTree((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(31, 31, 91);
      node0.toStringTree();
      Node node1 = Node.newNumber(29.0, 3, 31);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node2 = Node.newNumber((double) 32);
      node0.getQualifiedName();
      Node node3 = new Node(2, node1, node1, node0, node1);
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags((Node.SideEffectFlags) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), (-894));
      Node node1 = new Node(124, node0, 2, 1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node_SideEffectFlags7.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node0.isGetProp();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags6.areAllFlagsSet();
      node0.isWith();
      node1.isLabel();
      Node node2 = Node.newString("$,WI.+vtZjQ_^Z,", 42, (-1691));
      node2.isIf();
      node0.isDo();
      node2.isFunction();
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      node0.removeProp(50);
      node0.addChildrenToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags3.areAllFlagsSet();
      node0.hasOneChild();
      node0.setLineno(52);
      Node node1 = node0.removeFirstChild();
      node1.isReturn();
      node1.cloneNode();
      // Undeclared exception!
      try { 
        node1.getChildAtIndex(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(25);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.areAllFlagsSet();
      Node node0 = new Node(25);
      node0.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      node_SideEffectFlags5.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags8 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      Node node1 = new Node(124, node0, 2, 1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[5];
      node0.isVoid();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      ObjectType objectType0 = null;
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      node0.setJSType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = Node.newString("JXf|GHkq}X");
      node0.detachChildren();
      node0.setIsSyntheticBlock(false);
      node0.mayMutateArguments();
      node0.isVarArgs();
      node0.getString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isOnlyModifiesThisCall();
      node0.getSourceFileName();
      node0.isObjectLit();
      node0.getChildCount();
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2915));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node0.isStringKey();
      Node node1 = new Node(1533, node0, node0);
      node1.isCase();
      node1.children();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(true);
      node0.toStringTree();
      node0.setCharno(30);
      Node node1 = Node.newNumber((double) 47, 39, 462);
      Node node2 = new Node(42);
      Node node3 = new Node(56, node1, node2, node0, 32, 5697);
      Node node4 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.putIntProp(54, 51);
      node0.getSideEffectFlags();
      Node.newNumber((double) 37, 352, 63);
      node4.isFalse();
      Node.newString("PARAM_LIST [empty_block: com.google.javascript.rhino.Node$IntPropListItem@0000000337]\n", 51, 3143);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(31, 31, 98);
      node0.toStringTree();
      Node node1 = Node.newNumber(29.0, 3, 31);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node.newNumber((double) 32);
      node0.getQualifiedName();
      Node node2 = new Node(2, node1, node1, node0, node1);
      node2.getQualifiedName();
      node2.isGetterDef();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, (-408), 4077);
      Node node1 = node0.cloneNode();
      node1.useSourceInfoFrom(node0);
      Node node2 = node0.srcrefTree(node1);
      node2.isOnlyModifiesArgumentsCall();
      node1.checkTreeEquals(node0);
      node0.isTry();
      // Undeclared exception!
      try { 
        node2.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      Node node0 = new Node(31, 11, 98);
      node0.toStringTree();
      node0.setCharno(30);
      Node node1 = Node.newNumber(29.0, 31, 11);
      Node node2 = new Node(47, node1, node1, node0, 40, 133);
      node0.useSourceInfoIfMissingFromForTree(node2);
      node2.putIntProp(54, 32);
      node0.toString(false, false, false);
      node2.getSideEffectFlags();
      Node node3 = Node.newNumber((double) 31, 46, 40);
      node3.isThrow();
      node3.isFalse();
      node3.isOnlyModifiesArgumentsCall();
      node0.copyInformationFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = Node.newString("JXf|GHkq}X");
      node0.detachChildren();
      node0.setIsSyntheticBlock(false);
      node0.mayMutateArguments();
      node0.isVarArgs();
      node0.isNot();
      node0.getString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags5.setMutatesArguments();
      node0.isFor();
      Node node1 = Node.newString("LUh2qK");
      node1.isExprResult();
      node1.isLabel();
      Node node2 = Node.newString("JXf|GHkq}X", 30, 52);
      node2.getJSType();
      node0.checkTreeEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      Node node1 = Node.newString("node is not a child");
      node1.isLabel();
      Node.newString("9!5qCqyhl<.j", 32, 32768);
      node0.isIf();
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) 29, 447, 29);
      node0.isFor();
      Node node1 = Node.newString("Seo9'#c:H^gEb");
      node1.isExprResult();
      node0.isLabel();
      Node node2 = Node.newString("node is not a child", 8, 1615);
      node0.getJSType();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) 29, 447, 29);
      Node node1 = node0.cloneNode();
      node1.isQualifiedName();
      Node node2 = new Node(149, node0, 1014, (-1506));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node node3 = Node.newNumber((-1405.378978182196));
      node0.getQualifiedName();
      Node node4 = new Node(54, node1, node3, node1, node3);
      node0.removeProp((-3715));
      node0.getQualifiedName();
      node4.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, (-408), 4077);
      Node node1 = node0.cloneNode();
      node1.useSourceInfoFrom(node0);
      Node node2 = node0.srcrefTree(node1);
      node0.setIsSyntheticBlock(false);
      Node node3 = node0.getLastSibling();
      node2.setCharno(53);
      node0.isEquivalentToShallow(node3);
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 121
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, (-408), 4077);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2856));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      node0.isStringKey();
      node0.isCast();
      node0.addSuppression("Q(:ip@c{^|q]|");
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.newString(53, "&w/]", 55, 8);
      try { 
        node0.setString("node is not a child");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(53, node0);
      node1.removeProp(50);
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-4731));
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node1.isGetProp();
      node1.getSideEffectFlags();
      Node node2 = Node.newNumber((double) 2, 97, 2506);
      node1.isThrow();
      Node node3 = Node.newString(4095, "");
      node1.isFalse();
      node3.isOnlyModifiesArgumentsCall();
      node2.isStringKey();
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(2691, nodeArray0, (-408), 4077);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2856));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      node0.isStringKey();
      Node node1 = new Node(29, node0, node0);
      node0.isTry();
      node1.isEquivalentTo(node0, false, false, false);
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, 124, 4077);
      Node node1 = Node.newString("");
      node0.isFor();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      node1.isVar();
      node0.toString();
      node1.isGetElem();
      Node node2 = Node.newString("already specified useForNull");
      node1.isExprResult();
      node2.isLabel();
      Node node3 = Node.newString("EMPTY 124");
      node3.getJSType();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node3.toString(false, true, true);
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(31, 11, 98);
      node0.toStringTree();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Key");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.toStringTree();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      JSType[] jSTypeArray0 = new JSType[2];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType.toMaybeTemplateType((JSType) null);
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, "Named type with empty name component");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(53, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Class<TemplateType> class0 = TemplateType.class;
      ServiceLoader<TemplateType> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<TemplateType> iterator0 = serviceLoader0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      node0.setLength(12);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isFor();
      Node node2 = Node.newString("");
      node1.isNull();
      Node.newNumber((-951.9998942183987));
      node2.getInputId();
      node0.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node0.setLineno(53);
      node2.isQualifiedName();
      node0.putIntProp(1071, 47);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      Node node1 = Node.newString("");
      node0.isVar();
      node0.toString();
      node0.isGetElem();
      Node node2 = Node.newString("");
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node1);
      node1.putIntProp(47, 53);
      node2.getSideEffectFlags();
      Node.newNumber((double) 42, 1, 31);
      node2.isThrow();
      node3.isFalse();
      node3.isOnlyModifiesArgumentsCall();
      node1.isStringKey();
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = Node.newString("", 1103, 1103);
      Node node1 = new Node(1, node0);
      node0.isSwitch();
      node0.setWasEmptyNode(true);
      node1.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.setQuotedString();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node node0 = Node.newString(0, "DEBUGGER", 237, (-415));
      node0.setString("DEBUGGER");
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Node node0 = Node.newString("node is not a child");
      Node node1 = Node.newNumber(0.0, 1251, 131088);
      node1.setIsSyntheticBlock(false);
      node1.mayMutateArguments();
      node1.isNot();
      node0.getString();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isOnlyModifiesThisCall();
      node0.isObjectLit();
      node0.getChildCount();
      node1.getInputId();
      node0.setInputId((InputId) null);
      Node node2 = new Node(1, node1, node0);
      node2.getSourceFileName();
      node1.isString();
      node0.isNumber();
      Node node3 = null;
      try {
        node3 = new Node(115, node0, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Key");
      node0.isWhile();
      node0.setWasEmptyNode(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      node0.isVar();
      node0.isGetElem();
      Node node1 = Node.newNumber((double) 30);
      node1.isStringKey();
      Node node2 = new Node(124, node1, 43, 1);
      node0.isEquivalentTo(node2, true, true, false);
      node2.getSourcePosition();
      node2.setChangeTime(85);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isWhile();
      Node node1 = new Node((-282), 32, 16);
      node0.srcrefTree(node1);
      node0.setIsSyntheticBlock(false);
      Node node2 = node1.getLastSibling();
      node2.setCharno(116);
      node2.isEquivalentToShallow(node1);
      Node node3 = new Node((-2302));
      // Undeclared exception!
      try { 
        node3.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2302
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(25);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 25);
      node0.isAdd();
      node0.getJSType();
      Node node1 = Node.newNumber((double) 25, 154, 13);
      Node node2 = new Node(29, node0, node1);
      node2.isNew();
      node1.getCharno();
      node2.children();
      node2.isTypeOf();
      node2.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0), 14, 14);
      Node node1 = node0.cloneNode();
      Node node2 = node0.srcrefTree(node0);
      node1.setIsSyntheticBlock(false);
      node0.getLastSibling();
      node0.getSourceOffset();
      node2.useSourceInfoFromForTree(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        node2.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node.mergeLineCharNo(13, 8);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isString();
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isWhile();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node0.isNumber();
      Node node1 = node0.cloneNode();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Element");
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node1.wasEmptyNode();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      node1.isObjectLit();
      node0.getSourceFileName();
      node1.isIf();
      node1.isQuotedString();
      node1.getProp(56);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(50);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node1 = Node.newNumber((double) 32);
      node1.isAdd();
      node1.getJSType();
      Node node2 = new Node(130, node0, node1, node0, node1, 4, 42);
      node2.clonePropsFrom(node1);
      node2.isNew();
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(332);
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9!5qCqyhl<.j");
      Node node0 = Node.newString(332, "node is not a child", 31, 98);
      node0.isFor();
      Node node1 = Node.newString("node is not a child");
      node0.isExprResult();
      node1.isLabel();
      Node.newString("yE$a5g+jl't+.dAK?", 684, 43);
      node0.getJSType();
      // Undeclared exception!
      try { 
        node1.checkTreeTypeAwareEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = Node.newString(23, ";\"{/.Cp}", 4, 23);
      Node node1 = new Node(2);
      node0.hasChild(node1);
      Node node2 = new Node(110, node0, node0, node0, node0);
      node2.isFunction();
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node node0 = Node.newString(230, "");
      Node node1 = new Node(40, node0);
      node1.removeProp((-1347));
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node0.hasChildren();
      node1.isObjectLit();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      Node node1 = Node.newString("c!SlD-G,QPQT;Bkz");
      node1.isExprResult();
      node1.isLabel();
      node1.getJSType();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.toString(false, false, false);
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      int int0 = 118813;
      Node node0 = Node.newString(118813, "second new child has existing parent");
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isUnscopedQualifiedName();
      node0.putIntProp(29, 118813);
      node0.isWhile();
      // Undeclared exception!
      try { 
        node0.toString(false, false, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 118813
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = "aN]";
      Node node0 = Node.newString(155, "aN]");
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      Node node1 = new Node(39, node0);
      node1.isExprResult();
      node1.isLabel();
      node1.getJSType();
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node_SideEffectFlags1.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(53, node0);
      node1.removeProp(50);
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node1.isGetProp();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags3.areAllFlagsSet();
      node0.isWith();
      node1.setLineno(52);
      node0.isArrayLit();
      Node node2 = node0.removeFirstChild();
      node2.isReturn();
      node2.cloneNode();
      // Undeclared exception!
      try { 
        node2.getChildAtIndex(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(53, node0);
      node1.removeProp(50);
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-4731));
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.areAllFlagsSet();
      node1.putIntProp((-14), 57);
      node1.getSideEffectFlags();
      Node node2 = Node.newNumber((double) 4095, 49, (-876));
      node2.isThrow();
      node0.isFalse();
      node1.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^YoZ]UQsv:!k_F,2[W(");
      Node node0 = Node.newString(613, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Node node1 = Node.newNumber((double) 51);
      Node node2 = Node.newNumber((-1635.63645919462));
      node2.getAncestor(57);
      node0.setCharno(8202);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node3 = node0.srcrefTree(node1);
      node0.setSourceEncodedPositionForTree(57);
      node1.removeFirstChild();
      node3.isNE();
      node1.isExprResult();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = null;
      nodeArray0[1] = null;
      node1.getProp(613);
      Node node4 = Node.newString("", 53, 1);
      Node node5 = null;
      try {
        node5 = new Node(29, node4, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-14));
      Node node1 = new Node(54, node0, node0, node0, node0, 54, 0);
      node0.getProp(38);
      Node node2 = node1.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node0.isArrayLit();
      node1.removeFirstChild();
      node1.isCatch();
      node2.hasChild(node1);
      node2.isLabelName();
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RO7dy5c/L2C");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(112);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString((int) (byte)0, "RO7dy5c/L2C", (int) (byte)48, (int) (byte)93);
      node0.getQualifiedName();
      Node node1 = new Node(112, node0, node0, node0, node0);
      node0.isSyntheticBlock();
      node1.removeProp(31);
      node1.isIn();
      node0.getQualifiedName();
      node0.hasOneChild();
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node node1 = new Node((-5135), node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-643));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      Node node2 = new Node(1);
      // Undeclared exception!
      try { 
        node2.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = "com.google.common.base.CharMatcher$NegatedFastMatcher";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.common.base.CharMatcher$NegatedFastMatcher");
      Node node0 = Node.newString(4022, "o", 110, 119);
      Node node1 = new Node(2, node0, node0);
      node0.getSourceOffset();
      Node node2 = node0.useSourceInfoFromForTree(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getLength();
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createUnionType(jSTypeArray0);
      node2.isTrue();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = Node.newString((-1114), "a+sCc@d`<hAAF!A", (-1114), (-1114));
      node0.type = 15;
      node0.isAdd();
      Node node1 = new Node(4, node0);
      node1.putIntProp((-352), 148);
      Node node2 = node1.srcref(node0);
      node0.checkTreeEqualsImpl(node1);
      node0.isQualifiedName();
      node2.isEquivalentToShallow(node1);
      // Undeclared exception!
      try { 
        node2.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id -352
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RO7dy5c/L2C");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(112);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString((int) (byte)0, "RO7dy5c/L2C", (int) (byte)48, (int) (byte)93);
      node0.getQualifiedName();
      Node node1 = new Node(112, node0, node0, node0, node0);
      node1.removeProp(31);
      node1.isIn();
      node0.getQualifiedName();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(53, node0);
      node1.removeProp(50);
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-4731));
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node1.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node1.wasEmptyNode();
      node1.isObjectLit();
      Node node2 = Node.newString("");
      node1.addChildrenToFront(node2);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node node0 = new Node(1);
      node0.removeFirstChild();
      Node node1 = Node.newString(21, "X1gRB:6p", 47, 102);
      node1.getSourceOffset();
      Node node2 = new Node(39, node0, node1, node1, node1, (-1197), 115);
      Node node3 = node0.clonePropsFrom(node2);
      // Undeclared exception!
      try { 
        node3.replaceChild(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(31, 11, 98);
      node0.toStringTree();
      node0.setCharno(30);
      Node node1 = Node.newNumber(29.0, 3, 11);
      Node node2 = new Node(47, node1, node1, node0, 40, 133);
      node0.useSourceInfoIfMissingFromForTree(node2);
      node2.putIntProp(54, 32);
      node2.getSideEffectFlags();
      Node node3 = Node.newNumber((double) 31, 46, 40);
      node3.isThrow();
      node3.isFalse();
      node3.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = Node.newString("JXf|GHkq}X");
      node0.setIsSyntheticBlock(false);
      node0.mayMutateArguments();
      node0.isNot();
      node0.getString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isOnlyModifiesThisCall();
      node0.isObjectLit();
      node0.getChildCount();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.getSourceFileName();
      node0.isString();
      node0.isNumber();
      Node node1 = node0.cloneNode();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9!5qCqyhl<.j");
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node1.wasEmptyNode();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.isObjectLit();
      node0.getSourceFileName();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = new Node(2005);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = node0.getAncestor(0);
      node1.getProp(55);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(53, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Class<TemplateType> class0 = TemplateType.class;
      ServiceLoader<TemplateType> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<TemplateType> iterator0 = serviceLoader0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      node0.setLength(12);
      Node node2 = new Node((-745), 51, (-1219));
      Node node3 = new Node(56, node1, node1, 36, 2);
      node3.removeChildren();
      node3.removeFirstChild();
      Node.newString(36, "Ga@_lcV xI", 49, (-1497));
      node3.isLabel();
      Node.newString("node is not a child", 2, (-339));
      Node.newString("9!5qCqyhl<.j", 1212, 1995);
      node2.getJSType();
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node3);
      node_NodeMismatch0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) 29, 447, 29);
      Node node1 = node0.cloneNode();
      node1.isQualifiedName();
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = new Node(149, node0, 1014, (-1506));
      Node node4 = node0.srcrefTree(node3);
      node2.setIsSyntheticBlock(true);
      Node node5 = node0.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node3.isFor();
      Node.newString("");
      node2.isNull();
      Node node6 = Node.newNumber((double) 447);
      node3.getInputId();
      node3.getStaticSourceFile();
      node4.setStaticSourceFile((StaticSourceFile) null);
      node5.isIn();
      node0.getProp(36);
      node2.isTry();
      node6.getAncestors();
      node3.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Object object0 = new Object();
      node0.isQualifiedName();
      node0.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(86);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(47);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags4.areAllFlagsSet();
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      node0.isArrayLit();
      Node node1 = Node.newString(38, "");
      node1.isAnd();
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(25);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 25);
      node0.isAdd();
      node0.getJSType();
      Node node1 = Node.newNumber((double) 25, 154, 13);
      Node node2 = new Node(29, node0, node1);
      node2.isNew();
      node1.getCharno();
      node2.children();
      node2.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RO7dy5c/L2C");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(112);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 112);
      node0.getQualifiedName();
      Node node1 = new Node(112, node0, node0, node0, node0);
      node1.removeProp(31);
      node1.isIn();
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0));
      Node node1 = node0.srcrefTree(node0);
      node0.getProp(55);
      node0.addSuppression("ORDINARY");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
      node0.mayMutateGlobalStateOrThrow();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      node1.isNumber();
      node_SideEffectFlags1.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.setMutatesArguments();
      node0.isFor();
      node0.isFor();
      Node node1 = Node.newString("Object#Key");
      Node node2 = new Node(47, node1, node0);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node2;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node2;
      nodeArray0[4] = node2;
      nodeArray0[5] = node2;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      nodeArray0[8] = node2;
      node2.isAdd();
      node2.getJSType();
      node2.clonePropsFrom(node2);
      node2.isNew();
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Node node0 = null;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(332);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.areAllFlagsSet();
      Node.newNumber(1.0);
      Node node1 = new Node(30);
      node1.putIntProp((-3435), (-2998));
      // Undeclared exception!
      try { 
        node1.getAncestor((-5014));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      int int0 = (-1946);
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(25, "node is not a child");
      Node node1 = new Node((-5135), node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = Node.newNumber((double) 36);
      nodeArray0[1] = node2;
      Node node3 = new Node((-443), 43, 57);
      nodeArray0[2] = node3;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node3.isVarArgs();
      node3.cloneNode();
      Node node4 = new Node((-5135), nodeArray0, 56, 262144);
      Node node5 = null;
      try {
        node5 = new Node((-5135), node4, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Node node0 = Node.newString((-1114), "a+sCc@]`<hAAF!A", (-1114), (-1114));
      node0.type = 15;
      node0.isWhile();
      Node node1 = new Node(4, node0);
      node1.putIntProp((-352), 148);
      Node node2 = node1.srcref(node0);
      node0.checkTreeEqualsImpl(node1);
      node0.isQualifiedName();
      node2.isEquivalentToShallow(node1);
      // Undeclared exception!
      try { 
        node2.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id -352
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      int int0 = 25;
      Node node0 = Node.newString(25, "node is not a child");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node1 = new Node(38, node0, node0, node0);
      node0.checkTreeEqualsImpl(node1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      node0.isCall();
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(53, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Class<TemplateType> class0 = TemplateType.class;
      ServiceLoader<TemplateType> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<TemplateType> iterator0 = serviceLoader0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      node0.setLength(12);
      Node node3 = new Node(56, node1, node1, 36, 2);
      Node node4 = node3.removeChildren();
      Node node5 = Node.newNumber((-82.6));
      node2.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node3.isIn();
      node4.getProp(15);
      node5.isTry();
      node0.getAncestors();
      StringWriter stringWriter0 = new StringWriter();
      node5.appendStringTree(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node0.isFor();
      node0.isFor();
      Node node1 = Node.newString("Object#Key");
      Node node2 = new Node(47, node1, node0);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags4.setReturnsTainted();
      node2.isGetProp();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.areAllFlagsSet();
      node2.isWith();
      node1.setLineno(31);
      node2.isArrayLit();
      node2.removeFirstChild();
      node1.isReturn();
      // Undeclared exception!
      try { 
        node1.getChildAtIndex(30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = Node.newString((-1114), "a+sCc@]`<hAAF!A", (-1114), (-1114));
      node0.type = 15;
      node0.isWhile();
      Node node1 = new Node(4, node0);
      node1.putIntProp((-352), 148);
      Node node2 = node1.srcref(node0);
      node0.checkTreeEqualsImpl(node1);
      node0.isQualifiedName();
      node2.useSourceInfoIfMissingFromForTree(node0);
      node0.putIntProp((-770), 153);
      node0.getSideEffectFlags();
      node0.isThrow();
      node2.isFalse();
      node1.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = "^YoZ]UQsv:!k_F,2[W(";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^YoZ]UQsv:!k_F,2[W(");
      Node node0 = Node.newString(613, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Node node1 = Node.newNumber((double) 51);
      Node node2 = Node.newNumber((-1635.63645919462));
      node2.getAncestor(57);
      node0.setCharno(8202);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.srcrefTree(node1);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      node0.removeProp(50);
      node0.addChildrenToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-4731));
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isCall();
      node0.isBreak();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(16);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4146
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0));
      Node node1 = node0.srcrefTree(node0);
      Object object0 = new Object();
      node1.isQualifiedName();
      node0.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags3.areAllFlagsSet();
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isArrayLit();
      Node node2 = new Node(4095, node0, node1);
      node2.isAnd();
      node1.isRegExp();
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) 29, 447, 29);
      Node node1 = node0.cloneNode();
      node1.isQualifiedName();
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = new Node(149, node0, 1014, (-1506));
      node0.srcrefTree(node3);
      node2.setIsSyntheticBlock(true);
      Node node4 = node0.getLastSibling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node3.isFor();
      Node.newString("");
      node2.isNull();
      Node node5 = Node.newString(53, "UuM0smW26wSi&CQic40", 52, 1);
      node5.isLabel();
      Node.newString("9!5qCqyhl<.j", 30, 2060);
      Node node6 = Node.newString("UuM0smW26wSi&CQic40", 1, 106);
      node6.getJSType();
      node4.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node node1 = new Node((-5135), node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node1.isGetProp();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.areAllFlagsSet();
      node0.isWith();
      node1.setLineno((-963));
      node0.isArrayLit();
      node1.removeFirstChild();
      node1.isReturn();
      Node node2 = new Node(55, 46, 8);
      node2.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^YoZ]UQsv:!k_F,2[W(");
      Node node0 = Node.newString(613, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Node node1 = Node.newNumber((double) 51);
      Node node2 = Node.newNumber((-1635.63645919462));
      node2.getAncestor(57);
      node0.setCharno(8202);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node3 = node0.srcrefTree(node1);
      node0.setSourceEncodedPositionForTree(57);
      node1.removeFirstChild();
      node3.isNE();
      node1.isExprResult();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node3.getString();
      node0.isLabel();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOnlyModifiesThisCall();
      node3.isQualifiedName();
      node0.getNext();
      node0.mayMutateArguments();
      Node.newString("");
      node3.setSourceFileForTesting("^YoZ]UQsv:!k_F,2[W(");
      node3.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node node0 = Node.newString((-1114), "a+sCc@]`<hAAF!A", (-1114), (-1114));
      node0.type = (-1114);
      node0.isWhile();
      Node node1 = new Node(4, node0);
      node1.putIntProp((-352), 148);
      Node node2 = node1.srcref(node0);
      node0.checkTreeEqualsImpl(node1);
      node0.isQualifiedName();
      node0.putIntProp((-770), 153);
      node0.getSideEffectFlags();
      node0.isThrow();
      node2.isFalse();
      node1.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      node0.isVarArgs();
      node0.setWasEmptyNode(false);
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node0.isArrayLit();
      node0.removeFirstChild();
      node0.isReturn();
      node0.hasChild((Node) null);
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = Node.newString("JXf|GHkq}X");
      node0.detachChildren();
      node0.setIsSyntheticBlock(false);
      node0.mayMutateArguments();
      node0.isVarArgs();
      node0.isNot();
      node0.getString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isOnlyModifiesThisCall();
      node0.getSourceFileName();
      node0.isObjectLit();
      node0.getChildCount();
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2915));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node0.isStringKey();
      Node node1 = new Node(13, node0, node0);
      node0.isEquivalentTo(node1, true, false, true);
      node1.isTry();
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) 29, 447, 29);
      Node node1 = node0.cloneNode();
      node1.isQualifiedName();
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = new Node(149, node0, 1016, (-1506));
      Node node4 = node0.srcrefTree(node3);
      node2.setIsSyntheticBlock(true);
      node0.getLastSibling();
      node0.setCharno((-1919));
      node2.isEquivalentToShallow(node0);
      node3.setLineno(8);
      // Undeclared exception!
      try { 
        node4.addChildBefore(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(30, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Class<TemplateType> class0 = TemplateType.class;
      ServiceLoader<TemplateType> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<TemplateType> iterator0 = serviceLoader0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      node0.setLength(12);
      Node node3 = new Node((-745), 51, (-1219));
      Node node4 = new Node(56, node1, node1, 36, 2);
      Node node5 = node4.removeChildren();
      Node node6 = Node.newNumber((-82.6));
      node2.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      simpleErrorReporter0.warning("", "", 154, 2);
      node4.isIn();
      node5.getProp(15);
      node6.isTry();
      node0.getAncestors();
      node2.isAssignAdd();
      // Undeclared exception!
      try { 
        node1.checkTreeEquals(node6);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4146
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4080);
      node0.getSourceFileName();
      Node node1 = new Node(124, nodeArray0, (-408), 4080);
      Node node2 = new Node(124, node1, 2, 54);
      node0.addChildToFront(node2);
      node0.setLength(44);
      node2.toStringTree();
      node2.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.isFor();
      node0.isFor();
      Node node1 = Node.newString("Object#Key");
      Node node2 = new Node(47, node1, node0);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node2;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node2;
      nodeArray0[4] = node2;
      nodeArray0[5] = node2;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      nodeArray0[8] = node2;
      node1.putIntProp(51, 37);
      node1.getAncestor(50);
      Node node3 = null;
      try {
        node3 = new Node(40, nodeArray0, 15, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(31, 11, 98);
      node0.toStringTree();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Key");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node0.isFor();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setMutatesGlobalState();
      node0.isContinue();
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) 29, 447, 29);
      Node node1 = node0.cloneNode();
      node1.isQualifiedName();
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = new Node(149, node0, 1016, (-1506));
      node0.srcrefTree(node3);
      node2.setIsSyntheticBlock(true);
      node0.getLastSibling();
      node0.setCharno((-1924));
      node2.isEquivalentToShallow(node0);
      node3.setLineno(8);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      node0.removeProp(50);
      node0.addChildrenToFront(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-4731));
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.isArrayLit();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(53, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags4.areAllFlagsSet();
      Node node2 = Node.newNumber(462.649198);
      node2.isAdd();
      node2.getJSType();
      node1.clonePropsFrom(node2);
      node2.isNew();
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.wasEmptyNode();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      node0.isVar();
      node0.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isStringKey();
      Node node1 = new Node(4095, node0, 124, 57);
      node0.isEquivalentTo(node1, true, false, false);
      node0.getSourcePosition();
      node1.setChangeTime(49);
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RO7dy5c/L2C");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(112);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 112);
      Node node1 = new Node(112, node0, node0, node0, node0);
      node1.removeProp(31);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(53, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Class<TemplateType> class0 = TemplateType.class;
      ServiceLoader<TemplateType> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<TemplateType> iterator0 = serviceLoader0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      node0.setLength(12);
      Node node3 = new Node((-745), 51, (-1219));
      Node node4 = new Node(56, node1, node1, 36, 2);
      Node node5 = node4.removeChildren();
      Node node6 = Node.newNumber((-82.6));
      node2.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node4.isIn();
      node5.getProp(15);
      node6.isTry();
      node0.getAncestors();
      node2.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0), 29, 29);
      Node node1 = new Node(4095, node0);
      node1.isQualifiedName();
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.srcrefTree(node0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.isCall();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.getBooleanProp(305);
      node0.isName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      simpleErrorReporter0.error("Object#Key", "Object#Element", 256, 108);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags5.valueOf();
      Node node1 = new Node(49, node0, node0, node0, (-636), 36);
      node0.srcrefTree(node1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "Object#Element", 15, 91);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(31, 11, 98);
      node0.toStringTree();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Key");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.toStringTree();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node0.isCatch();
      node0.getSourceFileName();
      node0.getJSType();
      Node node1 = new Node(42, node0, node0, node0, node0, 15, (-1414));
      Node node2 = node0.srcref(node1);
      // Undeclared exception!
      try { 
        node2.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node node1 = new Node((-5135), node0, node0, node0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      node1.isVar();
      node0.toString();
      node0.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node1.isStringKey();
      node0.isEquivalentTo(node1, true, false, false);
      node0.setCharno(2426);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(53, node0);
      node1.removeProp(50);
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.setAllFlags();
      node1.getChangeTime();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags3.areAllFlagsSet();
      node1.isWith();
      node1.setLineno((-862048943));
      node0.isArrayLit();
      node1.removeFirstChild();
      Node node2 = new Node(92);
      node2.isReturn();
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(53, node0);
      node1.removeProp(50);
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node1.isGetProp();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags3.areAllFlagsSet();
      node0.isWith();
      node1.setLineno(52);
      node0.isArrayLit();
      Node node2 = node0.removeFirstChild();
      node2.isReturn();
      // Undeclared exception!
      try { 
        node2.getChildAtIndex(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Node node0 = Node.newString("JXf|GHkq}X");
      node0.detachChildren();
      node0.setIsSyntheticBlock(false);
      node0.mayMutateArguments();
      node0.isVarArgs();
      node0.isNot();
      node0.getString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isOnlyModifiesThisCall();
      node0.getSourceFileName();
      node0.isObjectLit();
      node0.getChildCount();
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2915));
      Node node1 = new Node(32, node0, 55, 16);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.toString();
      Node.newString(42, "Kms\"U,4V%:");
      // Undeclared exception!
      try { 
        node1.replaceChild(node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node.extractLineno(521);
      Node node0 = new Node(120, 120, 0);
      Node node1 = new Node(20, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2050));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node1.isThis();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setMutatesArguments();
      node0.wasEmptyNode();
      node1.isObjectLit();
      node0.isCatch();
      node1.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Node node0 = Node.newString(4146, "3,sB/ [P-A<", 1538, 1538);
      node0.isLabel();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isAssign();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0, templateType0);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry2.createParameters((List<JSType>) immutableList1);
      node0.addChildToBack(node1);
      node0.isDebugger();
      node1.isHook();
      node0.getSourceOffset();
      Node node2 = Node.newString("Named type with empty name component");
      node2.isOptionalArg();
      Node node3 = new Node(86, 1, 46);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Node node0 = new Node((-24));
      Node node1 = new Node(54, node0, node0, node0, node0, 54, 0);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(122, "N}Z6");
      int int0 = (-14);
      Node node1 = new Node(16, node0, node0, node0, node0, 57, 43);
      Node node2 = null;
      try {
        node2 = new Node(55, node1, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(84, nodeArray0, (-408), 4077);
      node0.getSourceFileName();
      Node node1 = new Node(84, node0, 2, 1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[5];
      node0.isVoid();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType[] jSTypeArray1 = new JSType[1];
      jSTypeArray1[0] = (JSType) null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithVarArgs(jSTypeArray0[0], jSTypeArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(53, node0);
      node1.removeProp(50);
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-4731));
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      node1.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node1.getJsDocBuilderForNode();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(15);
      node1.wasEmptyNode();
      node0.isGetProp();
      node0.isCatch();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = Node.newString("JXf|GHkq}X");
      node0.detachChildren();
      node0.setIsSyntheticBlock(false);
      node0.mayMutateArguments();
      node0.isVarArgs();
      node0.isNot();
      node0.getString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isOnlyModifiesThisCall();
      node0.getSourceFileName();
      node0.isObjectLit();
      node0.getChildCount();
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2915));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags4.setReturnsTainted();
      node0.isThis();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags3.setMutatesArguments();
      node0.wasEmptyNode();
      node0.isObjectLit();
      node0.isCatch();
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, (-408), 4077);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2856));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node0.isThis();
      node_SideEffectFlags1.setMutatesArguments();
      node0.wasEmptyNode();
      node0.isObjectLit();
      node0.getSourceFileName();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Node node0 = Node.newString("JXf|GHkq}X");
      node0.detachChildren();
      node0.setIsSyntheticBlock(false);
      node0.mayMutateArguments();
      node0.isVarArgs();
      node0.isNot();
      node0.getString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isOnlyModifiesThisCall();
      node0.getSourceFileName();
      node0.isObjectLit();
      node0.getChildCount();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.getSourceFileName();
      node0.isString();
      node0.isNumber();
      Node node1 = node0.cloneNode();
      Node node2 = null;
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable((Node) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9!5qCqyhl<.j");
      node_AncestorIterable0.iterator();
      node1.addChildrenToBack(node0);
      node1.isDefaultCase();
      node1.isTry();
      node1.getIntProp(43);
      node1.isParamList();
      node0.isExprResult();
      // Undeclared exception!
      try { 
        node0.copyInformationFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0));
      Node node1 = node0.srcrefTree(node0);
      Object object0 = new Object();
      node1.isQualifiedName();
      node0.isWhile();
      node0.isCall();
      node0.isBreak();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      Node node1 = Node.newString("");
      node1.wasEmptyNode();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      node0.isVar();
      node0.isLocalResultCall();
      node0.toString();
      node0.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.isStringKey();
      node1.isEquivalentTo(node0, true, false, true);
      node0.getSourcePosition();
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2856));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node0.isThis();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags4.setMutatesArguments();
      node0.wasEmptyNode();
      node0.isObjectLit();
      node0.isCatch();
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isFor();
      node0.isFor();
      Node node1 = Node.newString("UNKNOWN_TYPE");
      node1.mayMutateGlobalStateOrThrow();
      node1.isCatch();
      Node node2 = new Node(43);
      node2.getJsDocBuilderForNode();
      int int0 = Node.DIRECTIVES;
      node0.isInstanceOf();
      Node.newString((-615), "UNKNOWN_TYPE", 44, 708);
      node1.isNew();
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isWhile();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isFor();
      node_SideEffectFlags2.setThrows();
      node0.isStringKey();
      Node node1 = new Node((-854), node0, node0);
      node0.isEquivalentTo(node1, false, false, true);
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      node0.isFor();
      Node node1 = Node.newString("com.google.javascript.rhino.Node$NodeMismatch");
      Node node2 = new Node(1499, node0, node0);
      node2.isExprResult();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node3 = new Node(29, node1, node2, node1, node1);
      node3.setWasEmptyNode(false);
      node1.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags4.setMutatesArguments();
      node3.isCall();
      Node node4 = null;
      try {
        node4 = new Node(4029, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = Node.newString(4022, "o", 110, 119);
      Node node1 = node0.cloneNode();
      node0.getSourceOffset();
      Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node1.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Element");
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags2.setMutatesGlobalState();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, 124, 4077);
      Node node1 = Node.newString("");
      node0.isFor();
      Node node2 = Node.newNumber(1.0, (-282), 30);
      node2.isFor();
      Node node3 = Node.newString("");
      Node node4 = new Node(53, node2, node1);
      node0.isExprResult();
      Node.newNumber((double) 42);
      node0.getJSType();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(15);
      node3.toString();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.areAllFlagsSet();
      node2.isWith();
      node0.setLineno(64);
      node4.isArrayLit();
      node0.removeFirstChild();
      node2.isReturn();
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Object object0 = new Object();
      node0.addSuppression("jsdoc_info");
      node0.isStringKey();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node0.isCall();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setMutatesArguments();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(11);
      node0.toStringTree();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Key");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.toStringTree();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.setWasEmptyNode(false);
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags((-298));
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node node0 = Node.newString(1203, "p/");
      node0.isDefaultCase();
      node0.getProp(1203);
      node0.putBooleanProp(1203, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Object[] objectArray0 = new Object[5];
      simpleErrorReporter0.error("p/", (String) null, 32, (-326));
      objectArray0[0] = null;
      objectArray0[1] = (Object) jSTypeRegistry0;
      objectArray0[2] = (Object) node0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "p/";
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage("+?8yIgf/fj.):ic.Ad", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property +?8yIgf/fj.):ic.Ad
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-24));
      Node node1 = new Node(54, node0, node0, node0, node0, 54, 0);
      node0.getProp(38);
      node1.cloneTree();
      node0.addSuppression((String) null);
      node0.putProp(9, (Object) null);
      Node node2 = null;
      try {
        node2 = new Node((-24), node0, node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node.extractLineno(521);
      Node node0 = Node.newNumber((-2819.7));
      node0.isArrayLit();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node0.removeChildAfter((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node[] nodeArray0 = new Node[1];
      jSDocInfo0.getAssociatedNode();
      Node node0 = null;
      try {
        node0 = new Node(1314, (Node) null, (Node) null, (Node) null, (Node) null, 46, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getProp((-1128));
      node0.addSuppression("jsdoc_info");
      node0.isStringKey();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.isEquivalentTo(node0, false, false, true);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      Node node1 = Node.newString("");
      node1.wasEmptyNode();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      node0.isVar();
      node0.toString();
      node0.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.isStringKey();
      node1.isEquivalentTo(node0, true, false, true);
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = jSTypeRegistry2.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node0.isFor();
      Node.newString(",pr;{,`Cx_Y{:2>cUFu");
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray0);
      node1.isExprResult();
      Node node2 = Node.newNumber((double) 49);
      node1.isSetterDef();
      node1.getJSType();
      node_SideEffectFlags2.areAllFlagsSet();
      node2.isGetProp();
      node1.isInc();
      node0.setLineno(2);
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0));
      Node node1 = new Node(4095, node0, 1, 47);
      node1.getProp(3050);
      node0.isGetProp();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(48);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node0.getInputId();
      node_SideEffectFlags3.areAllFlagsSet();
      node0.isObjectLit();
      Node node1 = Node.newString(4095, "Object#Key", 31, 102);
      node1.isNoSideEffectsCall();
      Node node2 = node0.cloneTree();
      Node node3 = node2.useSourceInfoIfMissingFrom(node1);
      Node node4 = Node.newString((-1164), "Object#Element", 10, 29);
      node4.isQualifiedName();
      node3.copyInformationFromForTree(node0);
      node4.isEquivalentToShallow(node3);
      node1.wasEmptyNode();
      node0.addChildToFront(node4);
      node3.wasEmptyNode();
      node1.isVar();
      Node node5 = Node.newString(8, "Object#Element", 262144, 15);
      node5.getNext();
      node4.isTrue();
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      Node node1 = Node.newString("");
      node1.wasEmptyNode();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      node0.isVar();
      node0.toString();
      node0.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.hasChild(node1);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, 124, 4077);
      Node node1 = Node.newString("");
      node0.isFor();
      Node node2 = Node.newNumber(1.0, (-282), 30);
      node2.isFor();
      Node node3 = Node.newString("");
      Node node4 = new Node(53, node2, node1);
      node0.isExprResult();
      Node.newNumber((double) 42);
      node0.getJSType();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(15);
      node3.toString();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.areAllFlagsSet();
      node1.isGetProp();
      node0.setLineno(64);
      node4.isArrayLit();
      node0.removeFirstChild();
      node2.isReturn();
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.getSourceFileName();
      Node node1 = new Node(124, node0, 2, 1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[5];
      node0.isVoid();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      ObjectType objectType0 = null;
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTemplatizedType((ObjectType) null, (Map<TemplateType, JSType>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.isFor();
      node0.isFor();
      Node node1 = Node.newString("Object#Key");
      Node node2 = new Node(47, node1, node0);
      node2.isExprResult();
      Node node3 = Node.newNumber((double) 56);
      node0.getJSType();
      node3.getAncestor(31);
      node_SideEffectFlags0.areAllFlagsSet();
      node3.isGetProp();
      node2.setLineno(130);
      node1.isArrayLit();
      node2.isAnd();
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      Node node1 = Node.newString("");
      node1.mayMutateGlobalStateOrThrow();
      node0.isCatch();
      node1.getJsDocBuilderForNode();
      int int0 = Node.DIRECTIVES;
      node0.isInstanceOf();
      Node node2 = Node.newString(29, "", 125, 50);
      node2.isNew();
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      Node node1 = Node.newString("node is not a child");
      node1.isExprResult();
      node1.isLabel();
      Node node2 = Node.newString("9!5qCqyhl<.j", 32, 32768);
      node2.getJSType();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node1.addSuppression("");
      node2.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString((-651), "ASSIGN_MOD", 83, (-6090));
      node0.setVarArgs(false);
      Node node1 = new Node((-1016), node0, node0, node0, (-4080), 4095);
      node0.isEquivalentTo(node1, false, false, false);
      node0.wasEmptyNode();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      node0.isVar();
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -651
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Node node0 = Node.newString(39, "M..LT");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(55, node0, 262144, 53);
      node0.isEquivalentToTyped(node1);
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Node node0 = Node.newString("JXf|GHkq}X");
      node0.detachChildren();
      node0.setIsSyntheticBlock(false);
      node0.mayMutateArguments();
      node0.isVarArgs();
      node0.isNot();
      node0.getString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isOnlyModifiesThisCall();
      node0.getSourceFileName();
      node0.isObjectLit();
      node0.getChildCount();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.getSourceFileName();
      node0.isString();
      node0.isNumber();
      Node node1 = node0.cloneNode();
      Node node2 = null;
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable((Node) null);
      node_AncestorIterable0.iterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9!5qCqyhl<.j");
      node_AncestorIterable0.iterator();
      node1.addChildrenToBack(node0);
      node1.isDefaultCase();
      node1.isTry();
      node1.getIntProp(43);
      node1.isParamList();
      node0.isExprResult();
      // Undeclared exception!
      try { 
        node0.copyInformationFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0));
      Node node1 = node0.srcrefTree(node0);
      node1.getProp(3050);
      node0.addSuppression("ORDINARY");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)44;
      node0.isStringKey();
      node0.isEquivalentTo(node1, true, false, true);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0));
      Node node1 = node0.srcrefTree(node0);
      node1.getProp(3050);
      node0.addSuppression("ORDINARY");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.setWasEmptyNode(false);
      node1.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node0.mayMutateGlobalStateOrThrow();
      node_SideEffectFlags1.setMutatesArguments();
      node1.isCall();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(304);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newNumber(1.0);
      node0.isAdd();
      node0.getJSType();
      Node node1 = Node.newNumber((double) 54, 46, 53);
      node1.isNew();
      node1.getCharno();
      node1.children();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.getJSDocInfo();
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.getChildAtIndex((-408));
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0));
      Node node1 = node0.srcrefTree(node0);
      node1.getProp(3050);
      String string0 = "ORDINARY";
      node0.addSuppression("ORDINARY");
      byte[] byteArray0 = new byte[9];
      Node node2 = new Node(2, node0, node0, node1, 47, 32);
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)21;
      Node.newNumber((double) 55);
      Node.newString(15, "E;A:t/-J_Du11|7kuao");
      Node node3 = Node.newString("&N7a-wF{j=~j#EZj", 15, 39);
      node3.isLabel();
      // Undeclared exception!
      try { 
        node3.setSideEffectFlags(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isString();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node0.isFor();
      node0.isFor();
      Node.newString("com.google.javascript.rhino.Node$NodeMismatch");
      Node node1 = new Node(1499, node0, node0);
      node1.isExprResult();
      Node node2 = Node.newNumber(0.0);
      Node node3 = Node.newString(1595, "*j\"fT|j");
      node0.isLabel();
      node3.isTry();
      node1.isGetProp();
      node2.isReturn();
      node2.setLineno(3026);
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = Node.newNumber(0.0);
      Node.newString(1148, "Object#Key");
      Node node2 = Node.newString("hXK}t6*3/pZ{", 2108, 3090);
      node1.isLabel();
      node2.isTry();
      node2.isGetProp();
      Node node3 = Node.newString(37, "Object#Element");
      node2.isReturn();
      node3.isDefaultCase();
      node3.isArrayLit();
      node1.children();
      node2.isCatch();
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0));
      Node node1 = node0.srcrefTree(node0);
      node1.getProp(3050);
      node0.addSuppression("ORDINARY");
      Node.newString(300, "t");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesArguments();
      node0.isFor();
      node1.isFor();
      Node node2 = Node.newString("t");
      Node node3 = new Node(0, node2, node2);
      node1.isExprResult();
      Node node4 = Node.newNumber((-834.84432772387));
      node3.getJSType();
      node_SideEffectFlags4.areAllFlagsSet();
      node4.isGetProp();
      node0.setLineno(25);
      node4.isArrayLit();
      node3.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node0.getInputId();
      node_SideEffectFlags3.areAllFlagsSet();
      node0.isObjectLit();
      Node node1 = Node.newString(4095, "Object#Key", 31, 102);
      node1.isNoSideEffectsCall();
      Node node2 = node0.cloneTree();
      Node node3 = node2.useSourceInfoIfMissingFrom(node1);
      Node node4 = Node.newString((-1164), "Object#Element", 10, 29);
      node4.isQualifiedName();
      node4.isEquivalentToShallow(node3);
      node1.wasEmptyNode();
      node0.addChildToFront(node4);
      node3.wasEmptyNode();
      node1.isVar();
      Node node5 = Node.newString(8, "Object#Element", 262144, 15);
      node5.getNext();
      node4.isTrue();
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      int int0 = 25;
      Node node0 = Node.newString(25, "node is not a child");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      node0.setWasEmptyNode(false);
      node0.isGetProp();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(25);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got MOD
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Node node0 = new Node(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = node0.getAncestor(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node1.getAncestor(42);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.isObjectLit();
      node1.isNoSideEffectsCall();
      Node node2 = node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesThis();
      node1.isCall();
      node2.getChildAtIndex((-589));
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = node0.getAncestor(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node1.getAncestor(42);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      node1.isIn();
      node1.isNoSideEffectsCall();
      Node node2 = node0.cloneTree();
      Node node3 = Node.newString("0");
      node2.useSourceInfoIfMissingFrom(node3);
      node3.isQualifiedName();
      node1.isEquivalentToShallow(node3);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesArguments();
      Node node4 = null;
      try {
        node4 = new Node(8, (Node) null, node3, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      node0.isFor();
      Node node1 = Node.newString("Object#Key");
      Node node2 = new Node(47, node1, node0);
      node2.isExprResult();
      Node node3 = Node.newNumber((double) 56);
      Node node4 = Node.newString(37, "Object#Element");
      node2.copyInformationFromForTree(node4);
      node4.isLabel();
      node4.getJSType();
      node3.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      node_SideEffectFlags2.clearAllFlags();
      Node node1 = Node.newString("c!SlD-G,QPQT;Bkz");
      node_SideEffectFlags3.clearAllFlags();
      node1.isExprResult();
      Node.newNumber((double) 1);
      node1.isLabel();
      Node node2 = Node.newString(2402, "Object#Element");
      node2.isLabel();
      node0.getJSType();
      // Undeclared exception!
      try { 
        node2.getExistingIntProp(956);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 956
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0));
      Node node1 = node0.srcrefTree(node0);
      node1.getProp(3050);
      node0.addSuppression("ORDINARY");
      byte[] byteArray0 = new byte[9];
      Node.newString(300, "t");
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)21;
      Node node2 = Node.newNumber((double) 55);
      Node.newString(15, "E;A:t/-J_Du11|7kuao");
      Node node3 = Node.newString("&N7a-wF{j=~j#EZj", 15, 39);
      node3.isLabel();
      node3.isTry();
      node3.isGetProp();
      Node.newString(733, "ORDINARY");
      node3.isReturn();
      node2.isDefaultCase();
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node0.isFor();
      node0.isFor();
      Node node1 = Node.newString("com.google.javascript.rhino.Node$NodeMismatch");
      Node node2 = new Node(1499, node0, node0);
      node2.isExprResult();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node3 = new Node(29, node1, node2, node1, node1);
      node3.setWasEmptyNode(false);
      node1.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags5.setMutatesArguments();
      node3.isCall();
      // Undeclared exception!
      try { 
        node2.detachFromParent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node0.getInputId();
      node_SideEffectFlags3.areAllFlagsSet();
      node0.isObjectLit();
      Node node1 = Node.newString(4095, "Object#Key", 31, 102);
      node1.isNoSideEffectsCall();
      Node node2 = node0.cloneTree();
      node2.useSourceInfoIfMissingFrom(node1);
      Node node3 = Node.newString((-1164), "Object#Element", 10, 29);
      node3.isQualifiedName();
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node1.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      Node node1 = Node.newString("c!SlD-G,QPQT;Bkz");
      node1.isExprResult();
      Node node2 = Node.newNumber(0.0);
      node1.isLabel();
      node1.getJSType();
      node_SideEffectFlags3.areAllFlagsSet();
      node1.isGetProp();
      node0.isInc();
      node2.setLineno(38);
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isLabel();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isAssign();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0, templateType0);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      Node node1 = jSTypeRegistry1.createParameters((List<JSType>) immutableList1);
      node1.addChildToBack(node0);
      node1.isDebugger();
      node1.isHook();
      node1.getSourceOffset();
      Node node2 = Node.newString("Unknown class name");
      node2.isOptionalArg();
      Node node3 = new Node(1, 57, 165);
      Node node4 = Node.newString(113, " is not a number node", (-2380), (-757));
      node0.isQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node4.checkTreeTypeAwareEqualsImpl(node1);
      node4.addChildrenToFront(node1);
      node2.getLastChild();
      // Undeclared exception!
      try { 
        node1.removeChild(node4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node(13, (Node) null, (Node) null, (Node) null, 1311, 1311);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      node0.setWasEmptyNode(false);
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node0.isCall();
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      node_SideEffectFlags2.clearAllFlags();
      Node node1 = Node.newString("c!SlD-G,QPQT;Bkz");
      node_SideEffectFlags3.clearAllFlags();
      node1.isExprResult();
      Node node2 = Node.newNumber((double) 1);
      node1.isLabel();
      node1.getJSType();
      node_SideEffectFlags3.areAllFlagsSet();
      node1.isGetProp();
      node2.setLineno(38);
      node0.isArrayLit();
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher", (-3252), (-294));
      Node node1 = new Node(29, node0);
      node0.isSwitch();
      node1.setWasEmptyNode(false);
      node1.getChildBefore(node0);
      // Undeclared exception!
      try { 
        Node.newString(1381, (String) null, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setMutatesThis();
      node0.getInputId();
      node_SideEffectFlags3.areAllFlagsSet();
      node0.isObjectLit();
      Node node1 = Node.newString(4095, "Object#Key", 31, 102);
      node1.isNoSideEffectsCall();
      Node node2 = node0.cloneTree();
      Node node3 = node2.useSourceInfoIfMissingFrom(node1);
      Node node4 = Node.newString((-1164), "Object#Element", 10, 29);
      node4.isQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags5.setThrows();
      node4.checkTreeTypeAwareEqualsImpl(node3);
      node1.addChildrenToFront(node3);
      node1.getLastChild();
      node1.removeChild(node2);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node0.isFor();
      node0.isFor();
      Node.newString("com.google.javascript.rhino.Node$NodeMismatch");
      Node node1 = new Node(1499, node0, node0);
      node1.isExprResult();
      Node node2 = Node.newNumber(0.0);
      Node node3 = Node.newString(1595, "*j\"fT|j");
      node0.isLabel();
      node3.isTry();
      node1.isGetProp();
      node2.isReturn();
      node2.setLineno(3026);
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      Node node1 = new Node(48, node0);
      JSType[] jSTypeArray0 = new JSType[0];
      node0.checkTreeTypeAwareEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = new Node(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = node0.getAncestor(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node1.getAncestor(42);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.isObjectLit();
      node1.isNoSideEffectsCall();
      Node node2 = node0.cloneTree();
      Node node3 = Node.newString("0");
      Node node4 = node2.useSourceInfoIfMissingFrom(node3);
      node3.isQualifiedName();
      node1.isEquivalentToShallow(node3);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesArguments();
      // Undeclared exception!
      try { 
        node4.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      String string0 = "x=s.Tkh{wvLe}pu*XI";
      Node node0 = Node.newString(29, "x=s.Tkh{wvLe}pu*XI");
      Node node1 = new Node(29, node0, node0, node0);
      Node node2 = Node.newNumber(0.0);
      Node node3 = new Node(39, 40, 33);
      int int0 = 262144;
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      nodeArray0[1] = node2;
      nodeArray0[2] = node3;
      Node node4 = new Node((-592), nodeArray0, 9, 54);
      Node node5 = null;
      try {
        node5 = new Node((-960), node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Node node0 = Node.newString((-1946), "node is not a child");
      Node node1 = new Node(31, node0, node0, node0);
      Node.newNumber((double) 43);
      Node node2 = new Node(15, 39, 47);
      int int0 = (-106);
      Node[] nodeArray0 = new Node[1];
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[1];
      String string0 = "";
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "node is not a child");
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeExpression0.evaluate((StaticScope<JSType>) null, jSTypeRegistry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1946
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isAssign();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0, templateType0);
      ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      Node node1 = Node.newString("Unknown class name");
      node1.isOptionalArg();
      Node node2 = new Node(1, 57, 165);
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Unknown class name is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      Node node1 = Node.newString("c!SlD-G,QPQT;Bkz");
      node1.isExprResult();
      Node node2 = Node.newNumber(0.0);
      node1.isLabel();
      node1.getJSType();
      node1.isTry();
      node2.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher", (-3252), (-294));
      node0.setSourceEncodedPosition((-1));
      node0.isOnlyModifiesThisCall();
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher", (-3252), (-294));
      Node node1 = new Node(29, node0);
      node0.isSwitch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(134);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.setMutatesThis();
      node0.getInputId();
      node_SideEffectFlags4.areAllFlagsSet();
      node1.isObjectLit();
      node0.isNoSideEffectsCall();
      Node node2 = node1.cloneTree();
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node0.isQualifiedName();
      node3.isEquivalentToShallow(node1);
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setMutatesArguments();
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      String string0 = "com.google.javascript.rhino.Node$NumberNode";
      Node node0 = Node.newString("com.google.javascript.rhino.Node$NumberNode");
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Node node1 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$NumberNode");
      // Undeclared exception!
      try { 
        node0.srcref((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      int int0 = 130;
      Node node0 = Node.newString(100, "", (-452), 2492);
      Node node1 = new Node((-934), node0, node0, 8, 57);
      node1.getProp(102);
      Node node2 = new Node(2492, node1, 15, 39);
      Node node3 = null;
      try {
        node3 = new Node(102, node2, node1, node1, 36, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0));
      node0.isParamList();
      Node node1 = new Node(154, node0, 56, 37);
      try { 
        node1.setDouble(57);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING_KEY 56 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher", (-3252), (-294));
      Node node1 = new Node(29, node0);
      node0.isSwitch();
      node1.setWasEmptyNode(false);
      node1.checkTreeEquals(node0);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(113);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 113
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(112);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Class<TemplateType> class0 = TemplateType.class;
      ServiceLoader<TemplateType> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<TemplateType> iterator0 = serviceLoader0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry1.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      jSTypeRegistry1.createFunctionType((JSType) objectType0, (List<JSType>) immutableList0);
      Node node1 = new Node(51, 51, 39);
      node1.checkTreeEquals(node0);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(950);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 950
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0));
      Node node1 = node0.srcrefTree(node0);
      node1.getProp(3050);
      node0.addSuppression("ORDINARY");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.setWasEmptyNode(false);
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(53, node0);
      node1.removeProp(50);
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      Node node2 = Node.newNumber((double) 12, 3, 47);
      node2.isFor();
      Node node3 = Node.newString("");
      node3.isExprResult();
      Node node4 = Node.newNumber((-1142.884264));
      node3.isLabel();
      node2.getJSType();
      node0.isTry();
      node4.isInc();
      node0.setLineno(29);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isLabel();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isAssign();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0, templateType0);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      Node node1 = jSTypeRegistry1.createParameters((List<JSType>) immutableList1);
      node1.addChildToBack(node0);
      node1.isDebugger();
      node1.isHook();
      node1.getSourceOffset();
      Node node2 = Node.newString("Unknown class name");
      node2.isOptionalArg();
      Node node3 = new Node(1, 57, 165);
      // Undeclared exception!
      try { 
        node3.addChildrenAfter(node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList.of();
      String string0 = "";
      Node node0 = new Node((-3927));
      Node node1 = new Node(98, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node((-3927), node0, node1, node0, 29, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Node node0 = new Node((-1956), 3, (-1956));
      node0.isLocalResultCall();
      node0.isIf();
      node0.isName();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AOUFq&uamn");
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1956
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      String string0 = "com.google.common.base.CharMatcher$NegatedFastMatcher";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.common.base.CharMatcher$NegatedFastMatcher");
      Node node0 = Node.newString(4022, "o", 110, 119);
      node0.cloneNode();
      node0.getSourceOffset();
      Node node1 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node1.getLength();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0));
      Node node1 = node0.srcrefTree(node0);
      node1.getProp(3050);
      node0.addSuppression("ORDINARY");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("'", true);
      node1.putProp((-408), simpleSourceFile0);
      Node node2 = new Node(152, node0, node0, node0, node1);
      node0.copyInformationFrom(node1);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(31, 11, 98);
      ObjectType.cast((JSType) null);
      JSType.toMaybeFunctionType((JSType) null);
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = Node.newString("qESwC+F!v}'R\"uw");
      node_SideEffectFlags1.clearAllFlags();
      Node node2 = Node.newNumber(1.0);
      node1.isLabel();
      node2.getJSType();
      node_SideEffectFlags0.areAllFlagsSet();
      node2.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(112);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Class<TemplateType> class0 = TemplateType.class;
      ServiceLoader.load(class0);
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString(": ");
      node0.mayMutateGlobalStateOrThrow();
      node0.isCatch();
      node0.setLength(0);
      node0.getJsDocBuilderForNode();
      int int0 = Node.DIRECTIVES;
      node0.isInstanceOf();
      Node node1 = Node.newString(0, ": ", 52, 29);
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(25, "node is not a child");
      Node node1 = new Node((-5135), node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = Node.newNumber((double) 36);
      nodeArray0[1] = node2;
      Node node3 = new Node((-443), 43, 57);
      nodeArray0[2] = node3;
      Node node4 = new Node(570, node1, node2, 4095, 51);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node4.new FileLevelJsDocBuilder();
      node0.getCharno();
      node2.isInstanceOf();
      node1.isCase();
      // Undeclared exception!
      try { 
        node2.getExistingIntProp(154);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 154
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Node node0 = new Node(8);
      Node node1 = new Node(132, node0);
      Node node2 = null;
      try {
        node2 = new Node(8, node1, node1, node0, 37, 615);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      int int0 = 3057;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(1373, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString(2198, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString((String) null, 126, 130);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isWhile();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      Node node1 = Node.newString("c!SlD-G,QPQT;Bkz");
      node1.isExprResult();
      Node node2 = Node.newNumber(0.0);
      node1.isLabel();
      node1.getJSType();
      node_SideEffectFlags3.areAllFlagsSet();
      node2.isFromExterns();
      node0.isInc();
      node2.setLineno(38);
      node1.getInputId();
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher", (-3252), (-294));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node1 = Node.newNumber((-1.0));
      node1.isAdd();
      node0.getJSType();
      Node node2 = node1.clonePropsFrom(node0);
      Node node3 = new Node((-226), node1, node1, node2, node0, 252, 31);
      Node node4 = null;
      try {
        node4 = new Node(25, node3, node2, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node1.replaceChild(node0, node1);
      node0.isFromExterns();
      Node node2 = new Node(2, 55, 48);
      node1.toString();
      Node node3 = null;
      try {
        node3 = new Node(31, node0, node2, node1, node0, 57, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      node_SideEffectFlags2.clearAllFlags();
      Node node1 = Node.newString("c!SlD-G,QPQT;Bkz");
      node_SideEffectFlags3.clearAllFlags();
      node1.isExprResult();
      Node node2 = Node.newNumber((double) 1);
      node1.isLabel();
      node1.getJSType();
      node_SideEffectFlags3.areAllFlagsSet();
      node1.isGetProp();
      node0.isInc();
      node2.setLineno(38);
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher", (-3252), (-294));
      Node node1 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher");
      node1.setType(3031);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.common.base.CharMatcher$NegatedFastMatcher", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.isHook();
      node0.siblings();
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("@V?MFZz-uas}/A>", false);
      simpleSourceFile1.getLineOffset(57);
      node0.setStaticSourceFile(simpleSourceFile0);
      node1.getBooleanProp((-1566));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.getDirectives();
      node0.setDirectives((Set<String>) null);
      node1.hasChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node.extractLineno(30);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isLabel();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isAssign();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0, templateType0);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      Node node1 = jSTypeRegistry1.createParameters((List<JSType>) immutableList1);
      node1.addChildToBack(node0);
      node1.isDebugger();
      node1.isHook();
      node1.siblings();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Not declared as a constructor", true);
      // Undeclared exception!
      try { 
        simpleSourceFile0.getLineOffset(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Should not call getLineOffset with line number 0
         //
         verifyException("com.google.javascript.rhino.jstype.SimpleSourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0));
      Node node1 = Node.newString("'");
      node0.srcrefTree(node1);
      Node.newNumber((double) 38);
      Node.newString("'", 32, 43);
      Node node2 = null;
      try {
        node2 = new Node(47, (Node[]) null, 1907, (-4428));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Node node0 = Node.newString(25, "node is not a child");
      Node node1 = new Node((-5135), node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesGlobalState();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Node node0 = Node.newString((-627), "If0Xw\"CrySDO7GBsz");
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -627
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Node node0 = new Node((-1956), 3, (-1956));
      node0.isLocalResultCall();
      node0.mayMutateGlobalStateOrThrow();
      node0.isName();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AOUFq&uamn");
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1956
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString((-269), "D[", 0, 16);
      Node.newNumber((double) 4095);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node0.isFor();
      Node node1 = Node.newString("c!SlD-G,QPQT;Bkz");
      node1.isExprResult();
      Node node2 = Node.newNumber(0.0);
      node1.isLabel();
      node1.getJSType();
      node_SideEffectFlags3.areAllFlagsSet();
      node1.isGetProp();
      node0.isInc();
      node2.setLineno(38);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      String string0 = "com.google.common.base.CharMatcher$NegatedFastMatcher";
      Node node0 = Node.newString(4022, "o", 110, 119);
      node0.cloneNode();
      String string1 = "";
      node0.getSourceOffset();
      Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0);
      node0.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.createTemplateTypeMap((ImmutableList<TemplateType>) null, (ImmutableList<JSType>) null);
      node0.getString();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher", (-3252), (-294));
      Node node1 = Node.newString(3057, "y^AVCEqs&+](\"TXaO]", 881, 4095);
      node0.mayMutateGlobalStateOrThrow();
      node1.isNumber();
      node0.setLength(31);
      node0.setLength((-340));
      node1.getJsDocBuilderForNode();
      node1.getCharno();
      node0.isInstanceOf();
      node0.isCase();
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(144);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 144
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0);
      node1.setInputId((InputId) null);
      node0.getNext();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      String string0 = "node is not a child";
      Node node0 = Node.newNumber((-1549.5141353820002));
      node0.isParamList();
      Node node1 = new Node(37, node0, 31, 46);
      node0.setDouble(15);
      try { 
        node1.setDouble(54);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CALL 31 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      int int0 = (-294);
      Node node0 = Node.newString("tc)LrY#3cno", (-3252), (-294));
      Node node1 = new Node(29, node0);
      node0.getSourceFileName();
      node1.isEquivalentTo(node0);
      Node node2 = null;
      try {
        node2 = new Node(30, node0, (-1882), (-5135));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher", (-3252), (-294));
      Node node1 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher");
      node1.setType(3031);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.common.base.CharMatcher$NegatedFastMatcher", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      node1.getBooleanProp(2);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      node1.hasChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Node node0 = new Node((-627));
      node0.isOr();
      Node node1 = new Node(30, node0, 63, 1);
      int int0 = Node.INCRDECR_PROP;
      // Undeclared exception!
      try { 
        node0.setString("OBJECT_NUMBER_STRING");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -627
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Class<TemplateType> class0 = TemplateType.class;
      ServiceLoader<TemplateType> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<TemplateType> iterator0 = serviceLoader0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      ImmutableList<JSType> immutableList1 = null;
      jSTypeRegistry0.createTemplateTypeMap((ImmutableList<TemplateType>) null, (ImmutableList<JSType>) null);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      Node node0 = Node.newString("");
      Node.newString(92, ",M)y`BiGXce[>wc-1J?");
      Node node1 = new Node(9, node0, node0, node0);
      Node.newNumber((double) 50);
      Node node2 = new Node(49, 30, 0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      Node node3 = new Node(51, 38, 31);
      nodeArray0[1] = node3;
      nodeArray0[2] = node1;
      Node node4 = null;
      try {
        node4 = new Node((-3252), nodeArray0, 8388608, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      String string0 = "node is not a child";
      Node node0 = Node.newNumber((-1549.3857));
      Node node1 = new Node((-5135), node0, node0);
      node1.isParamList();
      Node node2 = new Node(37, node1, 31, 46);
      // Undeclared exception!
      try { 
        node1.setDouble(15);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -5135
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-408), nodeArray0, 124, 4077);
      node0.getSourceFileName();
      Node node1 = new Node(688, node0, 57, (-1189));
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(4077, nodeArray0, 124, 4077);
      node0.getSourceFileName();
      Node node1 = new Node(15, node0, 935, 29);
      node0.addChildToFront(node1);
      node1.setLength(103);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4077
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher", (-3252), (-294));
      Node node1 = Node.newString(3057, "y^AVCEqs&+](\"TXaO]", 881, 4095);
      node0.mayMutateGlobalStateOrThrow();
      node1.isNumber();
      node0.setLength((-340));
      node1.getJsDocBuilderForNode();
      node1.getCharno();
      node0.isInstanceOf();
      node0.isCase();
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(144);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 144
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Node.extractLineno(521);
      Node node0 = new Node(120, 120, 0);
      Node node1 = new Node(20, node0, node0, node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = new Node(1, node0, node0, node0, 31, 54);
      node1.removeProp(50);
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-4731));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.jstype.JSTypeNative");
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node2 = Node.newString("com.google.common.base.Predicates$AssignableFromPredicate");
      node2.isExprResult();
      Node node3 = new Node(2);
      node2.isAdd();
      node2.getJSType();
      node_SideEffectFlags4.areAllFlagsSet();
      node2.isGetProp();
      node0.isInc();
      node0.setLineno(103);
      node3.removeProp(52);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      String string0 = "If0Xw\"CrySDO7GBsz";
      Node node0 = Node.newString(2195, "If0Xw\"CrySDO7GBsz");
      node0.isExprResult();
      node0.isAssign();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      Node node1 = null;
      try {
        node1 = new Node(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher", (-3252), (-294));
      Node node1 = new Node(29, node0);
      node0.isSwitch();
      node1.setWasEmptyNode(false);
      node1.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Node.extractLineno(521);
      Node node0 = new Node(120, 120, 0);
      Node node1 = new Node(20, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.toString();
      node2.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = node0.getAncestor(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2657);
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.setLength(48);
      Node node2 = Node.newString(38, "");
      node2.getJsDocBuilderForNode();
      node1.getCharno();
      node2.isInstanceOf();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setThrows();
      Node node0 = Node.newString(0, "y^AVCEqs&+](\"TXaO]", 0, 29);
      node0.mayMutateGlobalStateOrThrow();
      node0.isNumber();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node1 = Node.newNumber((double) 50);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isSwitch();
      node0.setWasEmptyNode(false);
      node0.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.wasEmptyNode();
      node0.putBooleanProp(461845907, false);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Node node0 = Node.newNumber(74.00396135, 74, 74);
      node0.isOnlyModifiesThisCall();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.cloneTree();
      Node node2 = null;
      node1.setVarArgs(false);
      // Undeclared exception!
      try { 
        node0.srcrefTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Node node0 = Node.newString("kRW~Kv|2jhpV", 29, 29);
      node0.isSyntheticBlock();
      node0.siblings();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kRW~Kv|2jhpV");
      node0.removeProp(29);
      node0.setVarArgs(false);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      int int0 = (-1946);
      int int1 = (-5135);
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(25, "node is not a child");
      Node node1 = new Node((-5135), node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = Node.newNumber((double) 36);
      nodeArray0[1] = node2;
      Node node3 = new Node((-443), 43, 57);
      nodeArray0[2] = node3;
      // Undeclared exception!
      try { 
        node3.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -443
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher", (-3252), (-294));
      Node node1 = Node.newNumber((-1392.0));
      node0.isEquivalentToShallow(node1);
      Node node2 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher");
      node2.toStringTree();
      node0.isEquivalentTo(node2, true, true, false);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-24));
      Node node1 = new Node(54, node0, node0, node0, node0, 54, 0);
      node0.getProp(38);
      node0.addSuppression((String) null);
      node0.putProp(9, (Object) null);
      Node node2 = null;
      try {
        node2 = new Node((-24), node0, node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher", (-3252), (-294));
      Node node1 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher");
      node1.setType(3031);
      node1.getNext();
      node0.isStringKey();
      Node.newString(38, "com.google.common.base.CharMatcher$NegatedFastMatcher", 1, 2);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(112);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Class<TemplateType> class0 = TemplateType.class;
      ServiceLoader<TemplateType> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<TemplateType> iterator0 = serviceLoader0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      node0.setLength(112);
      Node node1 = new Node(44, (-1289), (-3147));
      node1.removeChildren();
      Node node2 = Node.newNumber((double) 4095);
      node1.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.isIn();
      node2.getProp((-582));
      node2.isTry();
      node0.getAncestors();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isQuotedString();
      Node node1 = new Node(51, node0);
      node0.checkTreeEqualsImpl(node1);
      Node node2 = Node.newString("UNKNOWN_TYPE");
      node1.replaceChild(node0, node2);
      node0.isQualifiedName();
      node0.setQuotedString();
      node0.isInstanceOf();
      int int0 = (-72);
      ImmutableList<TemplateType> immutableList0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.getJSType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createEnumType("Named type with empty name component", node2, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Node node0 = new Node((-24));
      Node node1 = new Node(54, node0, node0, node0, node0, 54, 0);
      Object object0 = new Object();
      node0.putProp(1, object0);
      Node node2 = null;
      try {
        node2 = new Node((-24), node0, node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Node node0 = Node.newString(4146, "");
      Node node1 = Node.newString(55, "com.google.javascript.rhino.jstype.JSTypeNative", 0, (-713));
      node1.removeProp(50);
      node0.addChildrenToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-4731));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node2 = Node.newString("com.google.common.base.Predicates$AssignableFromPredicate");
      node2.isExprResult();
      Node.newNumber((double) 37);
      node2.isAdd();
      node2.getJSType();
      node_SideEffectFlags4.areAllFlagsSet();
      node2.isGetProp();
      node0.isInc();
      node0.setLineno(103);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isLabel();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2563));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags3.areAllFlagsSet();
      Node node1 = Node.newNumber((double) 47);
      node1.isAdd();
      node1.getJSType();
      Node node2 = node1.clonePropsFrom(node0);
      node0.isNew();
      node2.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      int int0 = (-6);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = null;
      nodeArray0[1] = null;
      nodeArray0[2] = null;
      nodeArray0[3] = null;
      nodeArray0[4] = null;
      nodeArray0[5] = null;
      Node node1 = null;
      try {
        node1 = new Node(1937, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      Node node0 = new Node(301);
      Node node1 = Node.newString(2, "", (-2045), 40);
      node1.removeChildren();
      Node.newNumber(1090.700181223, 54, 52);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Pt.=N]", true);
      node1.setLength(57);
      node1.setStaticSourceFile(simpleSourceFile0);
      // Undeclared exception!
      try { 
        node1.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(332);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 332);
      node0.toStringTree();
      // Undeclared exception!
      try { 
        node0.useSourceInfoFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Node.extractLineno(521);
      Node node0 = new Node(120, 120, 0);
      Node node1 = new Node(20, node0, node0, node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.toString();
      Node node2 = Node.newString(50, "CATCH");
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(51, node0);
      node0.checkTreeEqualsImpl(node1);
      Node node2 = Node.newString("UNKNOWN_TYPE");
      node1.replaceChild(node0, node2);
      node0.isQualifiedName();
      Node node3 = new Node(2, 55, 48);
      node1.toString();
      Node node4 = Node.newString(31, "");
      // Undeclared exception!
      try { 
        node2.replaceChild(node4, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Node.extractLineno(1689);
      Node node0 = Node.newString(0, "<%6dz:@~0?U");
      node0.getInputId();
      boolean boolean0 = false;
      Node node1 = Node.newString("<%6dz:@~0?U");
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Node.extractLineno(521);
      Node node0 = new Node(120, 120, 0);
      node0.toString();
      Node node1 = Node.newString(50, "CATCH 120");
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Node node0 = new Node((-24));
      Node node1 = new Node(54, node0, node0, node0, node0, 54, 0);
      node0.getProp(38);
      node0.putProp(9, (Object) null);
      Node node2 = null;
      try {
        node2 = new Node((-24), node0, node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.setLineno(53);
      assertEquals(53, node0.getLineno());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Set<String> set0 = jSDocInfo0.getSuppressions();
      node0.setDirectives(set0);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      Node node0 = Node.newString(0, "y^AVCEqs&+](\"TXaO]", 0, 29);
      node0.mayMutateGlobalStateOrThrow();
      node0.isNumber();
      node0.setLength(0);
      node0.getJsDocBuilderForNode();
      node0.getCharno();
      node0.isInstanceOf();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher", (-3252), (-294));
      Node node1 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher");
      node0.isEquivalentTo(node1, true, true, false);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Node node0 = new Node(0);
      node0.setOptionalArg(false);
      Node node1 = Node.newString("");
      Node node2 = new Node(54, node0, node0, node1, node1, 54, 0);
      Node node3 = null;
      try {
        node3 = new Node(0, node0, node2, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.getSourceFileName();
      Node node1 = new Node((-408), node0, node0, node0, node0, (-408), 30);
      node0.addChildToFront(node1);
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Node node0 = Node.newString("", (-294), 38);
      Node node1 = Node.newString(617, "DATA_FLOW", (-699), 107);
      node0.isEquivalentTo(node1, false, false, true);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Node node0 = new Node((-627));
      node0.isOr();
      Node node1 = new Node(30, node0, 63, 1);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(52);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 52
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      int int0 = (-1946);
      int int1 = (-5135);
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(25, "node is not a child");
      Node node1 = new Node((-5135), node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = Node.newNumber((double) 36);
      nodeArray0[1] = node2;
      Node node3 = new Node(8, node2);
      nodeArray0[2] = node3;
      Node node4 = null;
      try {
        node4 = new Node((-5135), nodeArray0, 56, 262144);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(332);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newNumber(1.0);
      node0.isAdd();
      node0.getJSType();
      // Undeclared exception!
      try { 
        node0.clonePropsFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isAssign();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      int int0 = 939;
      int int1 = 1048576;
      Node node1 = null;
      try {
        node1 = new Node((-1546), nodeArray0, 55, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Node node0 = Node.newString("d`.#F");
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      int int0 = 52;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(52, (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      int int0 = 0;
      Node[] nodeArray0 = new Node[1];
      int int1 = 42;
      String string0 = " is not a string node";
      Node node0 = Node.newString(" is not a string node", 0, 48);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(42, node0, node0, node0, node0, 53, 0);
      Node node2 = null;
      try {
        node2 = new Node(1073741823, node1, node0, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(1546, "", 2048, 31);
      Node node1 = node0.cloneTree();
      node1.getJSDocInfo();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      Node node1 = node0.cloneTree();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(4146, "");
      File file0 = MockFile.createTempFile("}iwk", "com.google.javascript.rhino.jstype.JSTypeNative");
      Node node1 = new Node(476, node0, node0, (-3147), 108);
      node0.clonePropsFrom(node1);
      node0.siblings();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      int int0 = (-1946);
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(25, "node is not a child");
      Node node1 = new Node((-5135), node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = Node.newNumber((double) 36);
      nodeArray0[1] = node2;
      Node node3 = new Node((-443), 43, 57);
      nodeArray0[2] = node3;
      Node node4 = new Node((-5135), nodeArray0, 56, 262144);
      Node node5 = null;
      try {
        node5 = new Node((-5135), node4, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString("");
      Node node2 = new Node(54, node0, node0, node1, node1, 54, 0);
      Node node3 = null;
      try {
        node3 = new Node(0, node0, node2, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      String string0 = "If0Xw\"CrySDO7GBsz";
      Node node0 = Node.newString(2195, "If0Xw\"CrySDO7GBsz");
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2195
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isLabel();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("com.google.javascript.rhino.jstype.InstanceObjectType", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Node node0 = new Node(15, 15, 15);
      node0.setLength(15);
      try { 
        node0.setDouble(15);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LE 15 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(112);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Class<TemplateType> class0 = TemplateType.class;
      ServiceLoader<TemplateType> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<TemplateType> iterator0 = serviceLoader0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isObjectLit();
      jSTypeRegistry0.createTemplateTypeMap((ImmutableList<TemplateType>) null, immutableList0);
      Node node1 = new Node((-72), 15, 26);
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -72
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      int int0 = 2481;
      Node node0 = null;
      // Undeclared exception!
      try { 
        Node.newString(2481, (String) null, 536870912, 536870912);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Node node0 = Node.newNumber((-1977.69162511652));
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Node node0 = Node.newString(881, "", 4, 1937);
      node0.removeProp(4);
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.addChildrenToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      Node node0 = Node.newString(2120, "", 2120, 3306);
      Node node1 = new Node((-1550), node0, node0, node0);
      node0.checkTreeEqualsImpl(node1);
      node0.isOnlyModifiesThisCall();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getAncestor(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2657);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.clearSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      int int0 = 1825;
      Node[] nodeArray0 = new Node[6];
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node0 = jSDocInfo0.getAssociatedNode();
      nodeArray0[0] = null;
      Node node1 = null;
      try {
        node1 = new Node(1, node0, 83, 33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$NegatedFastMatcher", (-3252), (-294));
      Node node1 = Node.newString(31, "com.google.common.base.CharMatcher$NegatedFastMatcher", 50, 42);
      node0.isEquivalentTo(node1, true, true, false);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isLocalResultCall();
      node0.mayMutateGlobalStateOrThrow();
      int int0 = (-503);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      Node node0 = Node.newString("");
      node0.isParamList();
      Node node1 = new Node(15, node0, 39, 1);
      try { 
        node1.setDouble((-63.72));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LE 39 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Node node0 = new Node(301);
      String string0 = "";
      Node node1 = Node.newString(2, "", (-2045), 40);
      node1.removeChildren();
      Node.newNumber(1090.700181223, 54, 52);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Pt.=N]", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      // Undeclared exception!
      try { 
        node1.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      Node node0 = new Node(5726, 5726, 5726);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType.toMaybeFunctionType((JSType) null);
      ObjectType.cast((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createEnumType("Object#Key", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(124, nodeArray0, (-408), 4077);
      node0.getSourceFileName();
      Node node1 = new Node(124, node0, 0, 1);
      node0.addChildToFront(node1);
      // Undeclared exception!
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Node node0 = Node.newString("-:", (-2012), (-2012));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.getProp(887);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        node1.getChildBefore(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      Node node0 = Node.newString("ZR", 835, 835);
      node0.getParent();
      // Undeclared exception!
      try { 
        node0.clonePropsFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      Node node0 = Node.newString(0, "y^AVCEqs&+](\"TXaO]", 0, 29);
      node0.mayMutateGlobalStateOrThrow();
      node0.isCatch();
      node0.setLength(0);
      node0.getJsDocBuilderForNode();
      node0.getCharno();
      node0.isInstanceOf();
      node0.isParamList();
      assertEquals(29, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      Node node0 = new Node((-627));
      node0.isGetElem();
      Node node1 = new Node(30, node0, 63, 1);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(52);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 52
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "";
      Node.newString("rkZvTrv+/", 40, (-1353));
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = null;
      jSTypeArray0[1] = null;
      jSTypeArray0[2] = null;
      jSTypeArray0[3] = null;
      jSTypeArray0[4] = null;
      jSTypeArray0[5] = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType((JSType) null, true, jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<TemplateType> vector0 = new Vector<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) vector0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getAncestors();
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      Node node0 = Node.newNumber((-2471.0));
      Node node1 = Node.newString("'");
      Node node2 = node0.srcrefTree(node1);
      assertEquals((-1), node2.getLineno());
      assertTrue(node1.isString());
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1408);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setMutatesGlobalState();
      assertEquals(1408, node_SideEffectFlags4.valueOf());
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "";
      int int0 = 0;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(0, (Node) null, (Node) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }
}
