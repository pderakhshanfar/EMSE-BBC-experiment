* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 6743
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2425515898
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:42:04.560 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:42:06.660 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 2435: com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;:764 - ReplaceComparisonOperator == -> <=
[MASTER] 17:42:08.075 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;
[MASTER] 17:42:08.077 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true
[MASTER] 17:42:08.078 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - false
[MASTER] 17:44:54.144 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 605s and 491 generations, 221393 statements, best individual has fitness: 2843.0
* Minimizing test suite
[MASTER] 17:53:30.740 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 797
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 613
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 105
* Number of covered goals: 105
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 467
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 4536
* Number of covered goals: 2228
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 575
* Generated 766 tests with total length 10880
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:54:51.721 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7034333333333334% of time used, but only 36/766 tests minimized), falling back to using all assertions
[MASTER] 17:55:09.761 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 17:55:23.199 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 13 seconds more than allowed.
[MASTER] 17:55:29.747 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_53_1629222929460/com/google/javascript/rhino/Node_53_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_53_1629222929460/com/google/javascript/rhino/Node_53_tmp__ESTest_scaffolding.java]]
[MASTER] 17:55:29.747 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:29.747 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:29.751 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 445
[MASTER] 17:55:29.753 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_53_1629222929460/com/google/javascript/rhino/Node_53_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:55:29 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_53_tmp__ESTest extends Node_53_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString((-598), "", (-598), 108);
23:       assertNotNull(node0);
24:       assertFalse(node0.isAnd());
25:       assertFalse(node0.isObjectLit());
26:       assertEquals((-598), node0.getType());
27:       assertFalse(node0.isComma());
28:       assertFalse(node0.isExprResult());
29:       assertFalse(node0.isThis());
30:       assertFalse(node0.isInstanceOf());
31:       assertFalse(node0.isFalse());
32:       assertFalse(node0.isWith());
33:       assertFalse(node0.isCast());
34:       assertFalse(node0.isHook());
35:       assertFalse(node0.hasOneChild());
36:       assertFalse(node0.isLabelName());
37:       assertFalse(node0.isGetProp());
38:       assertEquals((-1), node0.getCharno());
39:       assertFalse(node0.isScript());
40:       assertEquals((-1), node0.getSourcePosition());
41:       assertFalse(node0.isString());
42:       assertFalse(node0.isNot());
43:       assertFalse(node0.isNumber());
44:       assertFalse(node0.isContinue());
45:       assertFalse(node0.isCase());
46:       assertEquals((-1), node0.getLineno());
47:       assertFalse(node0.isBlock());
48:       assertFalse(node0.hasMoreThanOneChild());
49:       assertFalse(node0.isThrow());
50:       assertFalse(node0.isIf());
51:       assertFalse(node0.isNE());
52:       assertFalse(node0.isInc());
53:       assertFalse(node0.isSetterDef());
54:       assertFalse(node0.isIn());
55:       assertFalse(node0.isCatch());
56:       assertFalse(node0.isDefaultCase());
57:       assertFalse(node0.isVoid());
58:       assertEquals(0, node0.getChildCount());
59:       assertFalse(node0.isRegExp());
60:       assertFalse(node0.isFunction());
61:       assertFalse(node0.isStringKey());
62:       assertFalse(node0.isArrayLit());
63:       assertFalse(node0.isFor());
64:       assertFalse(node0.isTry());
65:       assertFalse(node0.isDebugger());
66:       assertFalse(node0.isParamList());
67:       assertFalse(node0.isGetterDef());
68:       assertFalse(node0.isWhile());
69:       assertFalse(node0.isAssignAdd());
70:       assertFalse(node0.isDo());
71:       assertFalse(node0.isSwitch());
72:       assertFalse(node0.isLabel());
73:       assertFalse(node0.isReturn());
74:       assertFalse(node0.hasChildren());
75:       assertFalse(node0.isDec());
76:       assertFalse(node0.isAssign());
77:       assertFalse(node0.isTypeOf());
78:       assertFalse(node0.isVar());
79:       assertFalse(node0.isEmpty());
80:       assertFalse(node0.isCall());
81:       assertFalse(node0.isGetElem());
82:       assertFalse(node0.isBreak());
83:       assertFalse(node0.isDelProp());
84:       assertFalse(node0.isName());
85:       assertFalse(node0.isNew());
86:       assertFalse(node0.isAdd());
87:       assertFalse(node0.isNull());
88:       assertFalse(node0.isTrue());
89:       assertFalse(node0.isOr());
90:       assertEquals(53, Node.INPUT_ID);
91:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
92:       assertEquals(43, Node.IS_CONSTANT_NAME);
93:       assertEquals(29, Node.JSDOC_INFO_PROP);
94:       assertEquals(36, Node.QUOTED_PROP);
95:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
96:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
97:       assertEquals(55, Node.INFERRED_FUNCTION);
98:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
99:       assertEquals(51, Node.STATIC_SOURCE_FILE);
100:       assertEquals(47, Node.IS_DISPATCHER);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
103:       assertEquals(30, Node.VAR_ARGS_NAME);
104:       assertEquals(2, Node.POST_FLAG);
105:       assertEquals(40, Node.ORIGINALNAME_PROP);
106:       assertEquals(52, Node.LENGTH);
107:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
108:       assertEquals(57, Node.REFLECTED_OBJECT);
109:       assertEquals(57, Node.LAST_PROP);
110:       assertEquals(54, Node.SLASH_V);
111:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
112:       assertEquals(50, Node.FREE_CALL);
113:       assertEquals(1, Node.DECR_FLAG);
114:       assertEquals(15, Node.NO_SIDE_EFFECTS);
115:       assertEquals(8, Node.FLAG_NO_THROWS);
116:       assertEquals(39, Node.EMPTY_BLOCK);
117:       assertEquals(37, Node.OPT_ARG_NAME);
118:       assertEquals(48, Node.DIRECTIVES);
119:       assertEquals(32, Node.INCRDECR_PROP);
120:       assertEquals(12, Node.COLUMN_BITS);
121:       assertEquals(56, Node.CHANGE_TIME);
122:       assertEquals(49, Node.DIRECT_EVAL);
123:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
124:       assertEquals(4095, Node.COLUMN_MASK);
125:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
126:       
127:       boolean boolean0 = node0.mayMutateArguments();
128:       assertTrue(boolean0);
129:       assertFalse(node0.isAnd());
130:       assertFalse(node0.isObjectLit());
131:       assertEquals((-598), node0.getType());
132:       assertFalse(node0.isComma());
133:       assertFalse(node0.isExprResult());
134:       assertFalse(node0.isThis());
135:       assertFalse(node0.isInstanceOf());
136:       assertFalse(node0.isFalse());
137:       assertFalse(node0.isWith());
138:       assertFalse(node0.isCast());
139:       assertFalse(node0.isHook());
140:       assertFalse(node0.hasOneChild());
141:       assertFalse(node0.isLabelName());
142:       assertFalse(node0.isGetProp());
143:       assertEquals((-1), node0.getCharno());
144:       assertFalse(node0.isScript());
145:       assertEquals((-1), node0.getSourcePosition());
146:       assertFalse(node0.isString());
147:       assertFalse(node0.isNot());
148:       assertFalse(node0.isNumber());
149:       assertFalse(node0.isContinue());
150:       assertFalse(node0.isCase());
151:       assertEquals((-1), node0.getLineno());
152:       assertFalse(node0.isBlock());
153:       assertFalse(node0.hasMoreThanOneChild());
154:       assertFalse(node0.isThrow());
155:       assertFalse(node0.isIf());
156:       assertFalse(node0.isNE());
157:       assertFalse(node0.isInc());
158:       assertFalse(node0.isSetterDef());
159:       assertFalse(node0.isIn());
160:       assertFalse(node0.isCatch());
161:       assertFalse(node0.isDefaultCase());
162:       assertFalse(node0.isVoid());
163:       assertEquals(0, node0.getChildCount());
164:       assertFalse(node0.isRegExp());
165:       assertFalse(node0.isFunction());
166:       assertFalse(node0.isStringKey());
167:       assertFalse(node0.isArrayLit());
168:       assertFalse(node0.isFor());
169:       assertFalse(node0.isTry());
170:       assertFalse(node0.isDebugger());
171:       assertFalse(node0.isParamList());
172:       assertFalse(node0.isGetterDef());
173:       assertFalse(node0.isWhile());
174:       assertFalse(node0.isAssignAdd());
175:       assertFalse(node0.isDo());
176:       assertFalse(node0.isSwitch());
177:       assertFalse(node0.isLabel());
178:       assertFalse(node0.isReturn());
179:       assertFalse(node0.hasChildren());
180:       assertFalse(node0.isDec());
181:       assertFalse(node0.isAssign());
182:       assertFalse(node0.isTypeOf());
183:       assertFalse(node0.isVar());
184:       assertFalse(node0.isEmpty());
185:       assertFalse(node0.isCall());
186:       assertFalse(node0.isGetElem());
187:       assertFalse(node0.isBreak());
188:       assertFalse(node0.isDelProp());
189:       assertFalse(node0.isName());
190:       assertFalse(node0.isNew());
191:       assertFalse(node0.isAdd());
192:       assertFalse(node0.isNull());
193:       assertFalse(node0.isTrue());
194:       assertFalse(node0.isOr());
195:       assertEquals(53, Node.INPUT_ID);
196:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
197:       assertEquals(43, Node.IS_CONSTANT_NAME);
198:       assertEquals(29, Node.JSDOC_INFO_PROP);
199:       assertEquals(36, Node.QUOTED_PROP);
200:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
201:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
202:       assertEquals(55, Node.INFERRED_FUNCTION);
203:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
204:       assertEquals(51, Node.STATIC_SOURCE_FILE);
205:       assertEquals(47, Node.IS_DISPATCHER);
206:       assertEquals(46, Node.IS_NAMESPACE);
207:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
208:       assertEquals(30, Node.VAR_ARGS_NAME);
209:       assertEquals(2, Node.POST_FLAG);
210:       assertEquals(40, Node.ORIGINALNAME_PROP);
211:       assertEquals(52, Node.LENGTH);
212:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
213:       assertEquals(57, Node.REFLECTED_OBJECT);
214:       assertEquals(57, Node.LAST_PROP);
215:       assertEquals(54, Node.SLASH_V);
216:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
217:       assertEquals(50, Node.FREE_CALL);
218:       assertEquals(1, Node.DECR_FLAG);
219:       assertEquals(15, Node.NO_SIDE_EFFECTS);
220:       assertEquals(8, Node.FLAG_NO_THROWS);
221:       assertEquals(39, Node.EMPTY_BLOCK);
222:       assertEquals(37, Node.OPT_ARG_NAME);
223:       assertEquals(48, Node.DIRECTIVES);
224:       assertEquals(32, Node.INCRDECR_PROP);
225:       assertEquals(12, Node.COLUMN_BITS);
226:       assertEquals(56, Node.CHANGE_TIME);
227:       assertEquals(49, Node.DIRECT_EVAL);
228:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
229:       assertEquals(4095, Node.COLUMN_MASK);
230:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
231:       
232:       boolean boolean1 = node0.isNoSideEffectsCall();
233:       assertFalse(boolean1);
234:       assertFalse(boolean1 == boolean0);
235:       assertFalse(node0.isAnd());
236:       assertFalse(node0.isObjectLit());
237:       assertEquals((-598), node0.getType());
238:       assertFalse(node0.isComma());
239:       assertFalse(node0.isExprResult());
240:       assertFalse(node0.isThis());
241:       assertFalse(node0.isInstanceOf());
242:       assertFalse(node0.isFalse());
243:       assertFalse(node0.isWith());
244:       assertFalse(node0.isCast());
245:       assertFalse(node0.isHook());
246:       assertFalse(node0.hasOneChild());
247:       assertFalse(node0.isLabelName());
248:       assertFalse(node0.isGetProp());
249:       assertEquals((-1), node0.getCharno());
250:       assertFalse(node0.isScript());
251:       assertEquals((-1), node0.getSourcePosition());
252:       assertFalse(node0.isString());
253:       assertFalse(node0.isNot());
254:       assertFalse(node0.isNumber());
255:       assertFalse(node0.isContinue());
256:       assertFalse(node0.isCase());
257:       assertEquals((-1), node0.getLineno());
258:       assertFalse(node0.isBlock());
259:       assertFalse(node0.hasMoreThanOneChild());
260:       assertFalse(node0.isThrow());
261:       assertFalse(node0.isIf());
262:       assertFalse(node0.isNE());
263:       assertFalse(node0.isInc());
264:       assertFalse(node0.isSetterDef());
265:       assertFalse(node0.isIn());
266:       assertFalse(node0.isCatch());
267:       assertFalse(node0.isDefaultCase());
268:       assertFalse(node0.isVoid());
269:       assertEquals(0, node0.getChildCount());
270:       assertFalse(node0.isRegExp());
271:       assertFalse(node0.isFunction());
272:       assertFalse(node0.isStringKey());
273:       assertFalse(node0.isArrayLit());
274:       assertFalse(node0.isFor());
275:       assertFalse(node0.isTry());
276:       assertFalse(node0.isDebugger());
277:       assertFalse(node0.isParamList());
278:       assertFalse(node0.isGetterDef());
279:       assertFalse(node0.isWhile());
280:       assertFalse(node0.isAssignAdd());
281:       assertFalse(node0.isDo());
282:       assertFalse(node0.isSwitch());
283:       assertFalse(node0.isLabel());
284:       assertFalse(node0.isReturn());
285:       assertFalse(node0.hasChildren());
286:       assertFalse(node0.isDec());
287:       assertFalse(node0.isAssign());
288:       assertFalse(node0.isTypeOf());
289:       assertFalse(node0.isVar());
290:       assertFalse(node0.isEmpty());
291:       assertFalse(node0.isCall());
292:       assertFalse(node0.isGetElem());
293:       assertFalse(node0.isBreak());
294:       assertFalse(node0.isDelProp());
295:       assertFalse(node0.isName());
296:       assertFalse(node0.isNew());
297:       assertFalse(node0.isAdd());
298:       assertFalse(node0.isNull());
299:       assertFalse(node0.isTrue());
300:       assertFalse(node0.isOr());
301:       assertEquals(53, Node.INPUT_ID);
302:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
303:       assertEquals(43, Node.IS_CONSTANT_NAME);
304:       assertEquals(29, Node.JSDOC_INFO_PROP);
305:       assertEquals(36, Node.QUOTED_PROP);
306:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
307:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
308:       assertEquals(55, Node.INFERRED_FUNCTION);
309:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
310:       assertEquals(51, Node.STATIC_SOURCE_FILE);
311:       assertEquals(47, Node.IS_DISPATCHER);
312:       assertEquals(46, Node.IS_NAMESPACE);
313:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
314:       assertEquals(30, Node.VAR_ARGS_NAME);
315:       assertEquals(2, Node.POST_FLAG);
316:       assertEquals(40, Node.ORIGINALNAME_PROP);
317:       assertEquals(52, Node.LENGTH);
318:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
319:       assertEquals(57, Node.REFLECTED_OBJECT);
320:       assertEquals(57, Node.LAST_PROP);
321:       assertEquals(54, Node.SLASH_V);
322:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
323:       assertEquals(50, Node.FREE_CALL);
324:       assertEquals(1, Node.DECR_FLAG);
325:       assertEquals(15, Node.NO_SIDE_EFFECTS);
326:       assertEquals(8, Node.FLAG_NO_THROWS);
327:       assertEquals(39, Node.EMPTY_BLOCK);
328:       assertEquals(37, Node.OPT_ARG_NAME);
329:       assertEquals(48, Node.DIRECTIVES);
330:       assertEquals(32, Node.INCRDECR_PROP);
331:       assertEquals(12, Node.COLUMN_BITS);
332:       assertEquals(56, Node.CHANGE_TIME);
333:       assertEquals(49, Node.DIRECT_EVAL);
334:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
335:       assertEquals(4095, Node.COLUMN_MASK);
336:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
337:       
338:       int int0 = node0.getLineno();
339:       assertEquals((-1), int0);
340:       assertFalse(node0.isAnd());
341:       assertFalse(node0.isObjectLit());
342:       assertEquals((-598), node0.getType());
343:       assertFalse(node0.isComma());
344:       assertFalse(node0.isExprResult());
345:       assertFalse(node0.isThis());
346:       assertFalse(node0.isInstanceOf());
347:       assertFalse(node0.isFalse());
348:       assertFalse(node0.isWith());
349:       assertFalse(node0.isCast());
350:       assertFalse(node0.isHook());
351:       assertFalse(node0.hasOneChild());
352:       assertFalse(node0.isLabelName());
353:       assertFalse(node0.isGetProp());
354:       assertEquals((-1), node0.getCharno());
355:       assertFalse(node0.isScript());
356:       assertEquals((-1), node0.getSourcePosition());
357:       assertFalse(node0.isString());
358:       assertFalse(node0.isNot());
359:       assertFalse(node0.isNumber());
360:       assertFalse(node0.isContinue());
361:       assertFalse(node0.isCase());
362:       assertEquals((-1), node0.getLineno());
363:       assertFalse(node0.isBlock());
364:       assertFalse(node0.hasMoreThanOneChild());
365:       assertFalse(node0.isThrow());
366:       assertFalse(node0.isIf());
367:       assertFalse(node0.isNE());
368:       assertFalse(node0.isInc());
369:       assertFalse(node0.isSetterDef());
370:       assertFalse(node0.isIn());
371:       assertFalse(node0.isCatch());
372:       assertFalse(node0.isDefaultCase());
373:       assertFalse(node0.isVoid());
374:       assertEquals(0, node0.getChildCount());
375:       assertFalse(node0.isRegExp());
376:       assertFalse(node0.isFunction());
377:       assertFalse(node0.isStringKey());
378:       assertFalse(node0.isArrayLit());
379:       assertFalse(node0.isFor());
380:       assertFalse(node0.isTry());
381:       assertFalse(node0.isDebugger());
382:       assertFalse(node0.isParamList());
383:       assertFalse(node0.isGetterDef());
384:       assertFalse(node0.isWhile());
385:       assertFalse(node0.isAssignAdd());
386:       assertFalse(node0.isDo());
387:       assertFalse(node0.isSwitch());
388:       assertFalse(node0.isLabel());
389:       assertFalse(node0.isReturn());
390:       assertFalse(node0.hasChildren());
391:       assertFalse(node0.isDec());
392:       assertFalse(node0.isAssign());
393:       assertFalse(node0.isTypeOf());
394:       assertFalse(node0.isVar());
395:       assertFalse(node0.isEmpty());
396:       assertFalse(node0.isCall());
397:       assertFalse(node0.isGetElem());
398:       assertFalse(node0.isBreak());
399:       assertFalse(node0.isDelProp());
400:       assertFalse(node0.isName());
401:       assertFalse(node0.isNew());
402:       assertFalse(node0.isAdd());
403:       assertFalse(node0.isNull());
404:       assertFalse(node0.isTrue());
405:       assertFalse(node0.isOr());
406:       assertEquals(53, Node.INPUT_ID);
407:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
408:       assertEquals(43, Node.IS_CONSTANT_NAME);
409:       assertEquals(29, Node.JSDOC_INFO_PROP);
410:       assertEquals(36, Node.QUOTED_PROP);
411:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
412:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
413:       assertEquals(55, Node.INFERRED_FUNCTION);
414:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
415:       assertEquals(51, Node.STATIC_SOURCE_FILE);
416:       assertEquals(47, Node.IS_DISPATCHER);
417:       assertEquals(46, Node.IS_NAMESPACE);
418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
419:       assertEquals(30, Node.VAR_ARGS_NAME);
420:       assertEquals(2, Node.POST_FLAG);
421:       assertEquals(40, Node.ORIGINALNAME_PROP);
422:       assertEquals(52, Node.LENGTH);
423:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
424:       assertEquals(57, Node.REFLECTED_OBJECT);
425:       assertEquals(57, Node.LAST_PROP);
426:       assertEquals(54, Node.SLASH_V);
427:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
428:       assertEquals(50, Node.FREE_CALL);
429:       assertEquals(1, Node.DECR_FLAG);
430:       assertEquals(15, Node.NO_SIDE_EFFECTS);
431:       assertEquals(8, Node.FLAG_NO_THROWS);
432:       assertEquals(39, Node.EMPTY_BLOCK);
433:       assertEquals(37, Node.OPT_ARG_NAME);
434:       assertEquals(48, Node.DIRECTIVES);
435:       assertEquals(32, Node.INCRDECR_PROP);
436:       assertEquals(12, Node.COLUMN_BITS);
437:       assertEquals(56, Node.CHANGE_TIME);
438:       assertEquals(49, Node.DIRECT_EVAL);
439:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
440:       assertEquals(4095, Node.COLUMN_MASK);
441:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
442:       
443:       Iterable<Node> iterable0 = node0.children();
444:       assertNotNull(iterable0);
445:       assertFalse(iterable0.contains(node0));
446:       assertFalse(node0.isAnd());
447:       assertFalse(node0.isObjectLit());
448:       assertEquals((-598), node0.getType());
449:       assertFalse(node0.isComma());
450:       assertFalse(node0.isExprResult());
451:       assertFalse(node0.isThis());
452:       assertFalse(node0.isInstanceOf());
453:       assertFalse(node0.isFalse());
454:       assertFalse(node0.isWith());
455:       assertFalse(node0.isCast());
456:       assertFalse(node0.isHook());
457:       assertFalse(node0.hasOneChild());
458:       assertFalse(node0.isLabelName());
459:       assertFalse(node0.isGetProp());
460:       assertEquals((-1), node0.getCharno());
461:       assertFalse(node0.isScript());
462:       assertEquals((-1), node0.getSourcePosition());
463:       assertFalse(node0.isString());
464:       assertFalse(node0.isNot());
465:       assertFalse(node0.isNumber());
466:       assertFalse(node0.isContinue());
467:       assertFalse(node0.isCase());
468:       assertEquals((-1), node0.getLineno());
469:       assertFalse(node0.isBlock());
470:       assertFalse(node0.hasMoreThanOneChild());
471:       assertFalse(node0.isThrow());
472:       assertFalse(node0.isIf());
473:       assertFalse(node0.isNE());
474:       assertFalse(node0.isInc());
475:       assertFalse(node0.isSetterDef());
476:       assertFalse(node0.isIn());
477:       assertFalse(node0.isCatch());
478:       assertFalse(node0.isDefaultCase());
479:       assertFalse(node0.isVoid());
480:       assertEquals(0, node0.getChildCount());
481:       assertFalse(node0.isRegExp());
482:       assertFalse(node0.isFunction());
483:       assertFalse(node0.isStringKey());
484:       assertFalse(node0.isArrayLit());
485:       assertFalse(node0.isFor());
486:       assertFalse(node0.isTry());
487:       assertFalse(node0.isDebugger());
488:       assertFalse(node0.isParamList());
489:       assertFalse(node0.isGetterDef());
490:       assertFalse(node0.isWhile());
491:       assertFalse(node0.isAssignAdd());
492:       assertFalse(node0.isDo());
493:       assertFalse(node0.isSwitch());
494:       assertFalse(node0.isLabel());
495:       assertFalse(node0.isReturn());
496:       assertFalse(node0.hasChildren());
497:       assertFalse(node0.isDec());
498:       assertFalse(node0.isAssign());
499:       assertFalse(node0.isTypeOf());
500:       assertFalse(node0.isVar());
501:       assertFalse(node0.isEmpty());
502:       assertFalse(node0.isCall());
503:       assertFalse(node0.isGetElem());
504:       assertFalse(node0.isBreak());
505:       assertFalse(node0.isDelProp());
506:       assertFalse(node0.isName());
507:       assertFalse(node0.isNew());
508:       assertFalse(node0.isAdd());
509:       assertFalse(node0.isNull());
510:       assertFalse(node0.isTrue());
511:       assertFalse(node0.isOr());
512:       assertEquals(53, Node.INPUT_ID);
513:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
514:       assertEquals(43, Node.IS_CONSTANT_NAME);
515:       assertEquals(29, Node.JSDOC_INFO_PROP);
516:       assertEquals(36, Node.QUOTED_PROP);
517:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
518:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
519:       assertEquals(55, Node.INFERRED_FUNCTION);
520:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
521:       assertEquals(51, Node.STATIC_SOURCE_FILE);
522:       assertEquals(47, Node.IS_DISPATCHER);
523:       assertEquals(46, Node.IS_NAMESPACE);
524:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
525:       assertEquals(30, Node.VAR_ARGS_NAME);
526:       assertEquals(2, Node.POST_FLAG);
527:       assertEquals(40, Node.ORIGINALNAME_PROP);
528:       assertEquals(52, Node.LENGTH);
529:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
530:       assertEquals(57, Node.REFLECTED_OBJECT);
531:       assertEquals(57, Node.LAST_PROP);
532:       assertEquals(54, Node.SLASH_V);
533:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
534:       assertEquals(50, Node.FREE_CALL);
535:       assertEquals(1, Node.DECR_FLAG);
536:       assertEquals(15, Node.NO_SIDE_EFFECTS);
537:       assertEquals(8, Node.FLAG_NO_THROWS);
538:       assertEquals(39, Node.EMPTY_BLOCK);
539:       assertEquals(37, Node.OPT_ARG_NAME);
540:       assertEquals(48, Node.DIRECTIVES);
541:       assertEquals(32, Node.INCRDECR_PROP);
542:       assertEquals(12, Node.COLUMN_BITS);
543:       assertEquals(56, Node.CHANGE_TIME);
544:       assertEquals(49, Node.DIRECT_EVAL);
545:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
546:       assertEquals(4095, Node.COLUMN_MASK);
547:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
548:       
549:       boolean boolean2 = node0.isOptionalArg();
550:       assertFalse(boolean2);
551:       assertTrue(boolean2 == boolean1);
552:       assertFalse(boolean2 == boolean0);
553:       assertFalse(node0.isAnd());
554:       assertFalse(node0.isObjectLit());
555:       assertEquals((-598), node0.getType());
556:       assertFalse(node0.isComma());
557:       assertFalse(node0.isExprResult());
558:       assertFalse(node0.isThis());
559:       assertFalse(node0.isInstanceOf());
560:       assertFalse(node0.isFalse());
561:       assertFalse(node0.isWith());
562:       assertFalse(node0.isCast());
563:       assertFalse(node0.isHook());
564:       assertFalse(node0.hasOneChild());
565:       assertFalse(node0.isLabelName());
566:       assertFalse(node0.isGetProp());
567:       assertEquals((-1), node0.getCharno());
568:       assertFalse(node0.isScript());
569:       assertEquals((-1), node0.getSourcePosition());
570:       assertFalse(node0.isString());
571:       assertFalse(node0.isNot());
572:       assertFalse(node0.isNumber());
573:       assertFalse(node0.isContinue());
574:       assertFalse(node0.isCase());
575:       assertEquals((-1), node0.getLineno());
576:       assertFalse(node0.isBlock());
577:       assertFalse(node0.hasMoreThanOneChild());
578:       assertFalse(node0.isThrow());
579:       assertFalse(node0.isIf());
580:       assertFalse(node0.isNE());
581:       assertFalse(node0.isInc());
582:       assertFalse(node0.isSetterDef());
583:       assertFalse(node0.isIn());
584:       assertFalse(node0.isCatch());
585:       assertFalse(node0.isDefaultCase());
586:       assertFalse(node0.isVoid());
587:       assertEquals(0, node0.getChildCount());
588:       assertFalse(node0.isRegExp());
589:       assertFalse(node0.isFunction());
590:       assertFalse(node0.isStringKey());
591:       assertFalse(node0.isArrayLit());
592:       assertFalse(node0.isFor());
593:       assertFalse(node0.isTry());
594:       assertFalse(node0.isDebugger());
595:       assertFalse(node0.isParamList());
596:       assertFalse(node0.isGetterDef());
597:       assertFalse(node0.isWhile());
598:       assertFalse(node0.isAssignAdd());
599:       assertFalse(node0.isDo());
600:       assertFalse(node0.isSwitch());
601:       assertFalse(node0.isLabel());
602:       assertFalse(node0.isReturn());
603:       assertFalse(node0.hasChildren());
604:       assertFalse(node0.isDec());
605:       assertFalse(node0.isAssign());
606:       assertFalse(node0.isTypeOf());
607:       assertFalse(node0.isVar());
608:       assertFalse(node0.isEmpty());
609:       assertFalse(node0.isCall());
610:       assertFalse(node0.isGetElem());
611:       assertFalse(node0.isBreak());
612:       assertFalse(node0.isDelProp());
613:       assertFalse(node0.isName());
614:       assertFalse(node0.isNew());
615:       assertFalse(node0.isAdd());
616:       assertFalse(node0.isNull());
617:       assertFalse(node0.isTrue());
618:       assertFalse(node0.isOr());
619:       assertEquals(53, Node.INPUT_ID);
620:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
621:       assertEquals(43, Node.IS_CONSTANT_NAME);
622:       assertEquals(29, Node.JSDOC_INFO_PROP);
623:       assertEquals(36, Node.QUOTED_PROP);
624:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
625:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
626:       assertEquals(55, Node.INFERRED_FUNCTION);
627:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
628:       assertEquals(51, Node.STATIC_SOURCE_FILE);
629:       assertEquals(47, Node.IS_DISPATCHER);
630:       assertEquals(46, Node.IS_NAMESPACE);
631:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
632:       assertEquals(30, Node.VAR_ARGS_NAME);
633:       assertEquals(2, Node.POST_FLAG);
634:       assertEquals(40, Node.ORIGINALNAME_PROP);
635:       assertEquals(52, Node.LENGTH);
636:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
637:       assertEquals(57, Node.REFLECTED_OBJECT);
638:       assertEquals(57, Node.LAST_PROP);
639:       assertEquals(54, Node.SLASH_V);
640:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
641:       assertEquals(50, Node.FREE_CALL);
642:       assertEquals(1, Node.DECR_FLAG);
643:       assertEquals(15, Node.NO_SIDE_EFFECTS);
644:       assertEquals(8, Node.FLAG_NO_THROWS);
645:       assertEquals(39, Node.EMPTY_BLOCK);
646:       assertEquals(37, Node.OPT_ARG_NAME);
647:       assertEquals(48, Node.DIRECTIVES);
648:       assertEquals(32, Node.INCRDECR_PROP);
649:       assertEquals(12, Node.COLUMN_BITS);
650:       assertEquals(56, Node.CHANGE_TIME);
651:       assertEquals(49, Node.DIRECT_EVAL);
652:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
653:       assertEquals(4095, Node.COLUMN_MASK);
654:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
655:       
656:       String string0 = node0.getQualifiedName();
657:       assertNull(string0);
658:       assertFalse(node0.isAnd());
659:       assertFalse(node0.isObjectLit());
660:       assertEquals((-598), node0.getType());
661:       assertFalse(node0.isComma());
662:       assertFalse(node0.isExprResult());
663:       assertFalse(node0.isThis());
664:       assertFalse(node0.isInstanceOf());
665:       assertFalse(node0.isFalse());
666:       assertFalse(node0.isWith());
667:       assertFalse(node0.isCast());
668:       assertFalse(node0.isHook());
669:       assertFalse(node0.hasOneChild());
670:       assertFalse(node0.isLabelName());
671:       assertFalse(node0.isGetProp());
672:       assertEquals((-1), node0.getCharno());
673:       assertFalse(node0.isScript());
674:       assertEquals((-1), node0.getSourcePosition());
675:       assertFalse(node0.isString());
676:       assertFalse(node0.isNot());
677:       assertFalse(node0.isNumber());
678:       assertFalse(node0.isContinue());
679:       assertFalse(node0.isCase());
680:       assertEquals((-1), node0.getLineno());
681:       assertFalse(node0.isBlock());
682:       assertFalse(node0.hasMoreThanOneChild());
683:       assertFalse(node0.isThrow());
684:       assertFalse(node0.isIf());
685:       assertFalse(node0.isNE());
686:       assertFalse(node0.isInc());
687:       assertFalse(node0.isSetterDef());
688:       assertFalse(node0.isIn());
689:       assertFalse(node0.isCatch());
690:       assertFalse(node0.isDefaultCase());
691:       assertFalse(node0.isVoid());
692:       assertEquals(0, node0.getChildCount());
693:       assertFalse(node0.isRegExp());
694:       assertFalse(node0.isFunction());
695:       assertFalse(node0.isStringKey());
696:       assertFalse(node0.isArrayLit());
697:       assertFalse(node0.isFor());
698:       assertFalse(node0.isTry());
699:       assertFalse(node0.isDebugger());
700:       assertFalse(node0.isParamList());
701:       assertFalse(node0.isGetterDef());
702:       assertFalse(node0.isWhile());
703:       assertFalse(node0.isAssignAdd());
704:       assertFalse(node0.isDo());
705:       assertFalse(node0.isSwitch());
706:       assertFalse(node0.isLabel());
707:       assertFalse(node0.isReturn());
708:       assertFalse(node0.hasChildren());
709:       assertFalse(node0.isDec());
710:       assertFalse(node0.isAssign());
711:       assertFalse(node0.isTypeOf());
712:       assertFalse(node0.isVar());
713:       assertFalse(node0.isEmpty());
714:       assertFalse(node0.isCall());
715:       assertFalse(node0.isGetElem());
716:       assertFalse(node0.isBreak());
717:       assertFalse(node0.isDelProp());
718:       assertFalse(node0.isName());
719:       assertFalse(node0.isNew());
720:       assertFalse(node0.isAdd());
721:       assertFalse(node0.isNull());
722:       assertFalse(node0.isTrue());
723:       assertFalse(node0.isOr());
724:       assertEquals(53, Node.INPUT_ID);
725:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
726:       assertEquals(43, Node.IS_CONSTANT_NAME);
727:       assertEquals(29, Node.JSDOC_INFO_PROP);
728:       assertEquals(36, Node.QUOTED_PROP);
729:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
730:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
731:       assertEquals(55, Node.INFERRED_FUNCTION);
732:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
733:       assertEquals(51, Node.STATIC_SOURCE_FILE);
734:       assertEquals(47, Node.IS_DISPATCHER);
735:       assertEquals(46, Node.IS_NAMESPACE);
736:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
737:       assertEquals(30, Node.VAR_ARGS_NAME);
738:       assertEquals(2, Node.POST_FLAG);
739:       assertEquals(40, Node.ORIGINALNAME_PROP);
740:       assertEquals(52, Node.LENGTH);
741:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
742:       assertEquals(57, Node.REFLECTED_OBJECT);
743:       assertEquals(57, Node.LAST_PROP);
744:       assertEquals(54, Node.SLASH_V);
745:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
746:       assertEquals(50, Node.FREE_CALL);
747:       assertEquals(1, Node.DECR_FLAG);
748:       assertEquals(15, Node.NO_SIDE_EFFECTS);
749:       assertEquals(8, Node.FLAG_NO_THROWS);
750:       assertEquals(39, Node.EMPTY_BLOCK);
751:       assertEquals(37, Node.OPT_ARG_NAME);
752:       assertEquals(48, Node.DIRECTIVES);
753:       assertEquals(32, Node.INCRDECR_PROP);
754:       assertEquals(12, Node.COLUMN_BITS);
755:       assertEquals(56, Node.CHANGE_TIME);
756:       assertEquals(49, Node.DIRECT_EVAL);
757:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
758:       assertEquals(4095, Node.COLUMN_MASK);
759:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
760:       
761:       int int1 = node0.getIntProp((-239));
762:       assertEquals(0, int1);
763:       assertFalse(int1 == int0);
764:       assertFalse(node0.isAnd());
765:       assertFalse(node0.isObjectLit());
766:       assertEquals((-598), node0.getType());
767:       assertFalse(node0.isComma());
768:       assertFalse(node0.isExprResult());
769:       assertFalse(node0.isThis());
770:       assertFalse(node0.isInstanceOf());
771:       assertFalse(node0.isFalse());
772:       assertFalse(node0.isWith());
773:       assertFalse(node0.isCast());
774:       assertFalse(node0.isHook());
775:       assertFalse(node0.hasOneChild());
776:       assertFalse(node0.isLabelName());
777:       assertFalse(node0.isGetProp());
778:       assertEquals((-1), node0.getCharno());
779:       assertFalse(node0.isScript());
780:       assertEquals((-1), node0.getSourcePosition());
781:       assertFalse(node0.isString());
782:       assertFalse(node0.isNot());
783:       assertFalse(node0.isNumber());
784:       assertFalse(node0.isContinue());
785:       assertFalse(node0.isCase());
786:       assertEquals((-1), node0.getLineno());
787:       assertFalse(node0.isBlock());
788:       assertFalse(node0.hasMoreThanOneChild());
789:       assertFalse(node0.isThrow());
790:       assertFalse(node0.isIf());
791:       assertFalse(node0.isNE());
792:       assertFalse(node0.isInc());
793:       assertFalse(node0.isSetterDef());
794:       assertFalse(node0.isIn());
795:       assertFalse(node0.isCatch());
796:       assertFalse(node0.isDefaultCase());
797:       assertFalse(node0.isVoid());
798:       assertEquals(0, node0.getChildCount());
799:       assertFalse(node0.isRegExp());
800:       assertFalse(node0.isFunction());
801:       assertFalse(node0.isStringKey());
802:       assertFalse(node0.isArrayLit());
803:       assertFalse(node0.isFor());
804:       assertFalse(node0.isTry());
805:       assertFalse(node0.isDebugger());
806:       assertFalse(node0.isParamList());
807:       assertFalse(node0.isGetterDef());
808:       assertFalse(node0.isWhile());
809:       assertFalse(node0.isAssignAdd());
810:       assertFalse(node0.isDo());
811:       assertFalse(node0.isSwitch());
812:       assertFalse(node0.isLabel());
813:       assertFalse(node0.isReturn());
814:       assertFalse(node0.hasChildren());
815:       assertFalse(node0.isDec());
816:       assertFalse(node0.isAssign());
817:       assertFalse(node0.isTypeOf());
818:       assertFalse(node0.isVar());
819:       assertFalse(node0.isEmpty());
820:       assertFalse(node0.isCall());
821:       assertFalse(node0.isGetElem());
822:       assertFalse(node0.isBreak());
823:       assertFalse(node0.isDelProp());
824:       assertFalse(node0.isName());
825:       assertFalse(node0.isNew());
826:       assertFalse(node0.isAdd());
827:       assertFalse(node0.isNull());
828:       assertFalse(node0.isTrue());
829:       assertFalse(node0.isOr());
830:       assertEquals(53, Node.INPUT_ID);
831:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
832:       assertEquals(43, Node.IS_CONSTANT_NAME);
833:       assertEquals(29, Node.JSDOC_INFO_PROP);
834:       assertEquals(36, Node.QUOTED_PROP);
835:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
836:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
837:       assertEquals(55, Node.INFERRED_FUNCTION);
838:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
839:       assertEquals(51, Node.STATIC_SOURCE_FILE);
840:       assertEquals(47, Node.IS_DISPATCHER);
841:       assertEquals(46, Node.IS_NAMESPACE);
842:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
843:       assertEquals(30, Node.VAR_ARGS_NAME);
844:       assertEquals(2, Node.POST_FLAG);
845:       assertEquals(40, Node.ORIGINALNAME_PROP);
846:       assertEquals(52, Node.LENGTH);
847:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
848:       assertEquals(57, Node.REFLECTED_OBJECT);
849:       assertEquals(57, Node.LAST_PROP);
850:       assertEquals(54, Node.SLASH_V);
851:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
852:       assertEquals(50, Node.FREE_CALL);
853:       assertEquals(1, Node.DECR_FLAG);
854:       assertEquals(15, Node.NO_SIDE_EFFECTS);
855:       assertEquals(8, Node.FLAG_NO_THROWS);
856:       assertEquals(39, Node.EMPTY_BLOCK);
857:       assertEquals(37, Node.OPT_ARG_NAME);
858:       assertEquals(48, Node.DIRECTIVES);
859:       assertEquals(32, Node.INCRDECR_PROP);
860:       assertEquals(12, Node.COLUMN_BITS);
861:       assertEquals(56, Node.CHANGE_TIME);
862:       assertEquals(49, Node.DIRECT_EVAL);
863:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
864:       assertEquals(4095, Node.COLUMN_MASK);
865:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
866:       
867:       JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
868:       assertNull(jSDocInfo0);
869:       assertFalse(node0.isAnd());
870:       assertFalse(node0.isObjectLit());
871:       assertEquals((-598), node0.getType());
872:       assertFalse(node0.isComma());
873:       assertFalse(node0.isExprResult());
874:       assertFalse(node0.isThis());
875:       assertFalse(node0.isInstanceOf());
876:       assertFalse(node0.isFalse());
877:       assertFalse(node0.isWith());
878:       assertFalse(node0.isCast());
879:       assertFalse(node0.isHook());
880:       assertFalse(node0.hasOneChild());
881:       assertFalse(node0.isLabelName());
882:       assertFalse(node0.isGetProp());
883:       assertEquals((-1), node0.getCharno());
884:       assertFalse(node0.isScript());
885:       assertEquals((-1), node0.getSourcePosition());
886:       assertFalse(node0.isString());
887:       assertFalse(node0.isNot());
888:       assertFalse(node0.isNumber());
889:       assertFalse(node0.isContinue());
890:       assertFalse(node0.isCase());
891:       assertEquals((-1), node0.getLineno());
892:       assertFalse(node0.isBlock());
893:       assertFalse(node0.hasMoreThanOneChild());
894:       assertFalse(node0.isThrow());
895:       assertFalse(node0.isIf());
896:       assertFalse(node0.isNE());
897:       assertFalse(node0.isInc());
898:       assertFalse(node0.isSetterDef());
899:       assertFalse(node0.isIn());
900:       assertFalse(node0.isCatch());
901:       assertFalse(node0.isDefaultCase());
902:       assertFalse(node0.isVoid());
903:       assertEquals(0, node0.getChildCount());
904:       assertFalse(node0.isRegExp());
905:       assertFalse(node0.isFunction());
906:       assertFalse(node0.isStringKey());
907:       assertFalse(node0.isArrayLit());
908:       assertFalse(node0.isFor());
909:       assertFalse(node0.isTry());
910:       assertFalse(node0.isDebugger());
911:       assertFalse(node0.isParamList());
912:       assertFalse(node0.isGetterDef());
913:       assertFalse(node0.isWhile());
914:       assertFalse(node0.isAssignAdd());
915:       assertFalse(node0.isDo());
916:       assertFalse(node0.isSwitch());
917:       assertFalse(node0.isLabel());
918:       assertFalse(node0.isReturn());
919:       assertFalse(node0.hasChildren());
920:       assertFalse(node0.isDec());
921:       assertFalse(node0.isAssign());
922:       assertFalse(node0.isTypeOf());
923:       assertFalse(node0.isVar());
924:       assertFalse(node0.isEmpty());
925:       assertFalse(node0.isCall());
926:       assertFalse(node0.isGetElem());
927:       assertFalse(node0.isBreak());
928:       assertFalse(node0.isDelProp());
929:       assertFalse(node0.isName());
930:       assertFalse(node0.isNew());
931:       assertFalse(node0.isAdd());
932:       assertFalse(node0.isNull());
933:       assertFalse(node0.isTrue());
934:       assertFalse(node0.isOr());
935:       assertEquals(53, Node.INPUT_ID);
936:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
937:       assertEquals(43, Node.IS_CONSTANT_NAME);
938:       assertEquals(29, Node.JSDOC_INFO_PROP);
939:       assertEquals(36, Node.QUOTED_PROP);
940:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
941:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
942:       assertEquals(55, Node.INFERRED_FUNCTION);
943:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
944:       assertEquals(51, Node.STATIC_SOURCE_FILE);
945:       assertEquals(47, Node.IS_DISPATCHER);
946:       assertEquals(46, Node.IS_NAMESPACE);
947:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
948:       assertEquals(30, Node.VAR_ARGS_NAME);
949:       assertEquals(2, Node.POST_FLAG);
950:       assertEquals(40, Node.ORIGINALNAME_PROP);
951:       assertEquals(52, Node.LENGTH);
952:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
953:       assertEquals(57, Node.REFLECTED_OBJECT);
954:       assertEquals(57, Node.LAST_PROP);
955:       assertEquals(54, Node.SLASH_V);
956:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
957:       assertEquals(50, Node.FREE_CALL);
958:       assertEquals(1, Node.DECR_FLAG);
959:       assertEquals(15, Node.NO_SIDE_EFFECTS);
960:       assertEquals(8, Node.FLAG_NO_THROWS);
961:       assertEquals(39, Node.EMPTY_BLOCK);
962:       assertEquals(37, Node.OPT_ARG_NAME);
963:       assertEquals(48, Node.DIRECTIVES);
964:       assertEquals(32, Node.INCRDECR_PROP);
965:       assertEquals(12, Node.COLUMN_BITS);
966:       assertEquals(56, Node.CHANGE_TIME);
967:       assertEquals(49, Node.DIRECT_EVAL);
968:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
969:       assertEquals(4095, Node.COLUMN_MASK);
970:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
971:       
972:       Node node1 = new Node((-4096), node0, (-3028), 37);
973:       assertNotNull(node1);
974:       assertFalse(node1.equals((Object)node0));
975:       assertFalse(node0.isAnd());
976:       assertFalse(node0.isObjectLit());
977:       assertEquals((-598), node0.getType());
978:       assertFalse(node0.isComma());
979:       assertFalse(node0.isExprResult());
980:       assertFalse(node0.isThis());
981:       assertFalse(node0.isInstanceOf());
982:       assertFalse(node0.isFalse());
983:       assertFalse(node0.isWith());
984:       assertFalse(node0.isCast());
985:       assertFalse(node0.isHook());
986:       assertFalse(node0.hasOneChild());
987:       assertFalse(node0.isLabelName());
988:       assertFalse(node0.isGetProp());
989:       assertEquals((-1), node0.getCharno());
990:       assertFalse(node0.isScript());
991:       assertEquals((-1), node0.getSourcePosition());
992:       assertFalse(node0.isString());
993:       assertFalse(node0.isNot());
994:       assertFalse(node0.isNumber());
995:       assertFalse(node0.isContinue());
996:       assertFalse(node0.isCase());
997:       assertEquals((-1), node0.getLineno());
998:       assertFalse(node0.isBlock());
999:       assertFalse(node0.hasMoreThanOneChild());
1000:       assertFalse(node0.isThrow());
1001:       assertFalse(node0.isIf());
1002:       assertFalse(node0.isNE());
1003:       assertFalse(node0.isInc());
1004:       assertFalse(node0.isSetterDef());
1005:       assertFalse(node0.isIn());
1006:       assertFalse(node0.isCatch());
1007:       assertFalse(node0.isDefaultCase());
1008:       assertFalse(node0.isVoid());
1009:       assertEquals(0, node0.getChildCount());
1010:       assertFalse(node0.isRegExp());
1011:       assertFalse(node0.isFunction());
1012:       assertFalse(node0.isStringKey());
1013:       assertFalse(node0.isArrayLit());
1014:       assertFalse(node0.isFor());
1015:       assertFalse(node0.isTry());
1016:       assertFalse(node0.isDebugger());
1017:       assertFalse(node0.isParamList());
1018:       assertFalse(node0.isGetterDef());
1019:       assertFalse(node0.isWhile());
1020:       assertFalse(node0.isAssignAdd());
1021:       assertFalse(node0.isDo());
1022:       assertFalse(node0.isSwitch());
1023:       assertFalse(node0.isLabel());
1024:       assertFalse(node0.isReturn());
1025:       assertFalse(node0.hasChildren());
1026:       assertFalse(node0.isDec());
1027:       assertFalse(node0.isAssign());
1028:       assertFalse(node0.isTypeOf());
1029:       assertFalse(node0.isVar());
1030:       assertFalse(node0.isEmpty());
1031:       assertFalse(node0.isCall());
1032:       assertFalse(node0.isGetElem());
1033:       assertFalse(node0.isBreak());
1034:       assertFalse(node0.isDelProp());
1035:       assertFalse(node0.isName());
1036:       assertFalse(node0.isNew());
1037:       assertFalse(node0.isAdd());
1038:       assertFalse(node0.isNull());
1039:       assertFalse(node0.isTrue());
1040:       assertFalse(node0.isOr());
1041:       assertFalse(node1.isAnd());
1042:       assertFalse(node1.isWith());
1043:       assertFalse(node1.isObjectLit());
1044:       assertFalse(node1.isNot());
1045:       assertFalse(node1.isComma());
1046:       assertFalse(node1.isInstanceOf());
1047:       assertFalse(node1.isBreak());
1048:       assertFalse(node1.isExprResult());
1049:       assertFalse(node1.isCast());
1050:       assertFalse(node1.isLabelName());
1051:       assertFalse(node1.isAssign());
1052:       assertEquals((-1), node1.getSourcePosition());
1053:       assertFalse(node1.isDec());
1054:       assertFalse(node1.isHook());
1055:       assertFalse(node1.isThis());
1056:       assertFalse(node1.isGetProp());
1057:       assertEquals((-1), node1.getCharno());
1058:       assertFalse(node1.isNumber());
1059:       assertFalse(node1.isString());
1060:       assertFalse(node1.isScript());
1061:       assertFalse(node1.isDo());
1062:       assertFalse(node1.isSwitch());
1063:       assertFalse(node1.isWhile());
1064:       assertFalse(node1.isReturn());
1065:       assertFalse(node1.isLabel());
1066:       assertFalse(node1.isTypeOf());
1067:       assertFalse(node1.isCall());
1068:       assertEquals((-4096), node1.getType());
1069:       assertFalse(node1.isName());
1070:       assertFalse(node1.isGetElem());
1071:       assertFalse(node1.isDelProp());
1072:       assertFalse(node1.isNull());
1073:       assertFalse(node1.isVar());
1074:       assertFalse(node1.isAdd());
1075:       assertFalse(node1.isNew());
1076:       assertFalse(node1.isAssignAdd());
1077:       assertFalse(node1.isOr());
1078:       assertFalse(node1.isEmpty());
1079:       assertFalse(node1.isDefaultCase());
1080:       assertFalse(node1.isTrue());
1081:       assertFalse(node1.isFunction());
1082:       assertFalse(node1.isVoid());
1083:       assertFalse(node1.isArrayLit());
1084:       assertFalse(node1.isRegExp());
1085:       assertFalse(node1.isCatch());
1086:       assertFalse(node1.isStringKey());
1087:       assertFalse(node1.isGetterDef());
1088:       assertFalse(node1.isParamList());
1089:       assertTrue(node1.hasOneChild());
1090:       assertFalse(node1.isFor());
1091:       assertFalse(node1.isDebugger());
1092:       assertFalse(node1.isTry());
1093:       assertFalse(node1.isCase());
1094:       assertFalse(node1.isContinue());
1095:       assertFalse(node1.isBlock());
1096:       assertEquals(1, node1.getChildCount());
1097:       assertEquals((-1), node1.getLineno());
1098:       assertFalse(node1.hasMoreThanOneChild());
1099:       assertTrue(node1.hasChildren());
1100:       assertFalse(node1.isFalse());
1101:       assertFalse(node1.isIf());
1102:       assertFalse(node1.isNE());
1103:       assertFalse(node1.isThrow());
1104:       assertFalse(node1.isIn());
1105:       assertFalse(node1.isInc());
1106:       assertFalse(node1.isSetterDef());
1107:       assertEquals(53, Node.INPUT_ID);
1108:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1109:       assertEquals(43, Node.IS_CONSTANT_NAME);
1110:       assertEquals(29, Node.JSDOC_INFO_PROP);
1111:       assertEquals(36, Node.QUOTED_PROP);
1112:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1113:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1114:       assertEquals(55, Node.INFERRED_FUNCTION);
1115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1116:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1117:       assertEquals(47, Node.IS_DISPATCHER);
1118:       assertEquals(46, Node.IS_NAMESPACE);
1119:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1120:       assertEquals(30, Node.VAR_ARGS_NAME);
1121:       assertEquals(2, Node.POST_FLAG);
1122:       assertEquals(40, Node.ORIGINALNAME_PROP);
1123:       assertEquals(52, Node.LENGTH);
1124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1125:       assertEquals(57, Node.REFLECTED_OBJECT);
1126:       assertEquals(57, Node.LAST_PROP);
1127:       assertEquals(54, Node.SLASH_V);
1128:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1129:       assertEquals(50, Node.FREE_CALL);
1130:       assertEquals(1, Node.DECR_FLAG);
1131:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1132:       assertEquals(8, Node.FLAG_NO_THROWS);
1133:       assertEquals(39, Node.EMPTY_BLOCK);
1134:       assertEquals(37, Node.OPT_ARG_NAME);
1135:       assertEquals(48, Node.DIRECTIVES);
1136:       assertEquals(32, Node.INCRDECR_PROP);
1137:       assertEquals(12, Node.COLUMN_BITS);
1138:       assertEquals(56, Node.CHANGE_TIME);
1139:       assertEquals(49, Node.DIRECT_EVAL);
1140:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1141:       assertEquals(4095, Node.COLUMN_MASK);
1142:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1143:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1144:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1145:       assertEquals(36, Node.QUOTED_PROP);
1146:       assertEquals(29, Node.JSDOC_INFO_PROP);
1147:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1148:       assertEquals(55, Node.INFERRED_FUNCTION);
1149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1150:       assertEquals(53, Node.INPUT_ID);
1151:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1152:       assertEquals(46, Node.IS_NAMESPACE);
1153:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1154:       assertEquals(2, Node.POST_FLAG);
1155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1156:       assertEquals(47, Node.IS_DISPATCHER);
1157:       assertEquals(30, Node.VAR_ARGS_NAME);
1158:       assertEquals(43, Node.IS_CONSTANT_NAME);
1159:       assertEquals(40, Node.ORIGINALNAME_PROP);
1160:       assertEquals(52, Node.LENGTH);
1161:       assertEquals(54, Node.SLASH_V);
1162:       assertEquals(57, Node.REFLECTED_OBJECT);
1163:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1164:       assertEquals(50, Node.FREE_CALL);
1165:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1166:       assertEquals(57, Node.LAST_PROP);
1167:       assertEquals(39, Node.EMPTY_BLOCK);
1168:       assertEquals(1, Node.DECR_FLAG);
1169:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1170:       assertEquals(32, Node.INCRDECR_PROP);
1171:       assertEquals(4095, Node.COLUMN_MASK);
1172:       assertEquals(8, Node.FLAG_NO_THROWS);
1173:       assertEquals(12, Node.COLUMN_BITS);
1174:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1175:       assertEquals(49, Node.DIRECT_EVAL);
1176:       assertEquals(56, Node.CHANGE_TIME);
1177:       assertEquals(37, Node.OPT_ARG_NAME);
1178:       assertEquals(48, Node.DIRECTIVES);
1179:       
1180:       Node node2 = node0.useSourceInfoFromForTree(node1);
1181:       assertNotNull(node2);
1182:       assertFalse(node0.equals((Object)node1));
1183:       assertFalse(node1.equals((Object)node0));
1184:       assertFalse(node2.equals((Object)node1));
1185:       assertFalse(node0.isAnd());
1186:       assertFalse(node0.isObjectLit());
1187:       assertEquals((-598), node0.getType());
1188:       assertFalse(node0.isComma());
1189:       assertFalse(node0.isExprResult());
1190:       assertFalse(node0.isThis());
1191:       assertFalse(node0.isInstanceOf());
1192:       assertFalse(node0.isFalse());
1193:       assertFalse(node0.isWith());
1194:       assertFalse(node0.isCast());
1195:       assertFalse(node0.isHook());
1196:       assertFalse(node0.hasOneChild());
1197:       assertFalse(node0.isLabelName());
1198:       assertFalse(node0.isGetProp());
1199:       assertEquals((-1), node0.getCharno());
1200:       assertFalse(node0.isScript());
1201:       assertEquals((-1), node0.getSourcePosition());
1202:       assertFalse(node0.isString());
1203:       assertFalse(node0.isNot());
1204:       assertFalse(node0.isNumber());
1205:       assertFalse(node0.isContinue());
1206:       assertFalse(node0.isCase());
1207:       assertEquals((-1), node0.getLineno());
1208:       assertFalse(node0.isBlock());
1209:       assertFalse(node0.hasMoreThanOneChild());
1210:       assertFalse(node0.isThrow());
1211:       assertFalse(node0.isIf());
1212:       assertFalse(node0.isNE());
1213:       assertFalse(node0.isInc());
1214:       assertFalse(node0.isSetterDef());
1215:       assertFalse(node0.isIn());
1216:       assertFalse(node0.isCatch());
1217:       assertFalse(node0.isDefaultCase());
1218:       assertFalse(node0.isVoid());
1219:       assertEquals(0, node0.getChildCount());
1220:       assertFalse(node0.isRegExp());
1221:       assertFalse(node0.isFunction());
1222:       assertFalse(node0.isStringKey());
1223:       assertFalse(node0.isArrayLit());
1224:       assertFalse(node0.isFor());
1225:       assertFalse(node0.isTry());
1226:       assertFalse(node0.isDebugger());
1227:       assertFalse(node0.isParamList());
1228:       assertFalse(node0.isGetterDef());
1229:       assertFalse(node0.isWhile());
1230:       assertFalse(node0.isAssignAdd());
1231:       assertFalse(node0.isDo());
1232:       assertFalse(node0.isSwitch());
1233:       assertFalse(node0.isLabel());
1234:       assertFalse(node0.isReturn());
1235:       assertFalse(node0.hasChildren());
1236:       assertFalse(node0.isDec());
1237:       assertFalse(node0.isAssign());
1238:       assertFalse(node0.isTypeOf());
1239:       assertFalse(node0.isVar());
1240:       assertFalse(node0.isEmpty());
1241:       assertFalse(node0.isCall());
1242:       assertFalse(node0.isGetElem());
1243:       assertFalse(node0.isBreak());
1244:       assertFalse(node0.isDelProp());
1245:       assertFalse(node0.isName());
1246:       assertFalse(node0.isNew());
1247:       assertFalse(node0.isAdd());
1248:       assertFalse(node0.isNull());
1249:       assertFalse(node0.isTrue());
1250:       assertFalse(node0.isOr());
1251:       assertFalse(node1.isAnd());
1252:       assertFalse(node1.isWith());
1253:       assertFalse(node1.isObjectLit());
1254:       assertFalse(node1.isNot());
1255:       assertFalse(node1.isComma());
1256:       assertFalse(node1.isInstanceOf());
1257:       assertFalse(node1.isBreak());
1258:       assertFalse(node1.isExprResult());
1259:       assertFalse(node1.isCast());
1260:       assertFalse(node1.isLabelName());
1261:       assertFalse(node1.isAssign());
1262:       assertEquals((-1), node1.getSourcePosition());
1263:       assertFalse(node1.isDec());
1264:       assertFalse(node1.isHook());
1265:       assertFalse(node1.isThis());
1266:       assertFalse(node1.isGetProp());
1267:       assertEquals((-1), node1.getCharno());
1268:       assertFalse(node1.isNumber());
1269:       assertFalse(node1.isString());
1270:       assertFalse(node1.isScript());
1271:       assertFalse(node1.isDo());
1272:       assertFalse(node1.isSwitch());
1273:       assertFalse(node1.isWhile());
1274:       assertFalse(node1.isReturn());
1275:       assertFalse(node1.isLabel());
1276:       assertFalse(node1.isTypeOf());
1277:       assertFalse(node1.isCall());
1278:       assertEquals((-4096), node1.getType());
1279:       assertFalse(node1.isName());
1280:       assertFalse(node1.isGetElem());
1281:       assertFalse(node1.isDelProp());
1282:       assertFalse(node1.isNull());
1283:       assertFalse(node1.isVar());
1284:       assertFalse(node1.isAdd());
1285:       assertFalse(node1.isNew());
1286:       assertFalse(node1.isAssignAdd());
1287:       assertFalse(node1.isOr());
1288:       assertFalse(node1.isEmpty());
1289:       assertFalse(node1.isDefaultCase());
1290:       assertFalse(node1.isTrue());
1291:       assertFalse(node1.isFunction());
1292:       assertFalse(node1.isVoid());
1293:       assertFalse(node1.isArrayLit());
1294:       assertFalse(node1.isRegExp());
1295:       assertFalse(node1.isCatch());
1296:       assertFalse(node1.isStringKey());
1297:       assertFalse(node1.isGetterDef());
1298:       assertFalse(node1.isParamList());
1299:       assertTrue(node1.hasOneChild());
1300:       assertFalse(node1.isFor());
1301:       assertFalse(node1.isDebugger());
1302:       assertFalse(node1.isTry());
1303:       assertFalse(node1.isCase());
1304:       assertFalse(node1.isContinue());
1305:       assertFalse(node1.isBlock());
1306:       assertEquals(1, node1.getChildCount());
1307:       assertEquals((-1), node1.getLineno());
1308:       assertFalse(node1.hasMoreThanOneChild());
1309:       assertTrue(node1.hasChildren());
1310:       assertFalse(node1.isFalse());
1311:       assertFalse(node1.isIf());
1312:       assertFalse(node1.isNE());
1313:       assertFalse(node1.isThrow());
1314:       assertFalse(node1.isIn());
1315:       assertFalse(node1.isInc());
1316:       assertFalse(node1.isSetterDef());
1317:       assertFalse(node2.isExprResult());
1318:       assertFalse(node2.isScript());
1319:       assertFalse(node2.isWith());
1320:       assertFalse(node2.isObjectLit());
1321:       assertFalse(node2.isNot());
1322:       assertEquals((-598), node2.getType());
1323:       assertFalse(node2.hasOneChild());
1324:       assertFalse(node2.isComma());
1325:       assertFalse(node2.isThis());
1326:       assertFalse(node2.isReturn());
1327:       assertFalse(node2.hasChildren());
1328:       assertFalse(node2.isTypeOf());
1329:       assertFalse(node2.isDec());
1330:       assertFalse(node2.isOr());
1331:       assertFalse(node2.isAssign());
1332:       assertFalse(node2.hasMoreThanOneChild());
1333:       assertFalse(node2.isGetElem());
1334:       assertFalse(node2.isInstanceOf());
1335:       assertEquals((-1), node2.getLineno());
1336:       assertFalse(node2.isBreak());
1337:       assertFalse(node2.isInc());
1338:       assertFalse(node2.isString());
1339:       assertFalse(node2.isThrow());
1340:       assertFalse(node2.isWhile());
1341:       assertFalse(node2.isGetProp());
1342:       assertEquals((-1), node2.getSourcePosition());
1343:       assertFalse(node2.isFalse());
1344:       assertFalse(node2.isContinue());
1345:       assertFalse(node2.isAnd());
1346:       assertFalse(node2.isCast());
1347:       assertFalse(node2.isTrue());
1348:       assertFalse(node2.isFunction());
1349:       assertFalse(node2.isDebugger());
1350:       assertFalse(node2.isRegExp());
1351:       assertFalse(node2.isEmpty());
1352:       assertFalse(node2.isFor());
1353:       assertFalse(node2.isDefaultCase());
1354:       assertFalse(node2.isTry());
1355:       assertFalse(node2.isSetterDef());
1356:       assertFalse(node2.isNull());
1357:       assertFalse(node2.isNE());
1358:       assertFalse(node2.isIn());
1359:       assertFalse(node2.isCall());
1360:       assertFalse(node2.isCatch());
1361:       assertFalse(node2.isIf());
1362:       assertFalse(node2.isName());
1363:       assertFalse(node2.isVoid());
1364:       assertFalse(node2.isDelProp());
1365:       assertEquals((-1), node2.getCharno());
1366:       assertFalse(node2.isSwitch());
1367:       assertFalse(node2.isBlock());
1368:       assertFalse(node2.isAdd());
1369:       assertFalse(node2.isHook());
1370:       assertFalse(node2.isVar());
1371:       assertFalse(node2.isAssignAdd());
1372:       assertFalse(node2.isNew());
1373:       assertFalse(node2.isCase());
1374:       assertFalse(node2.isDo());
1375:       assertFalse(node2.isParamList());
1376:       assertFalse(node2.isLabel());
1377:       assertFalse(node2.isNumber());
1378:       assertEquals(0, node2.getChildCount());
1379:       assertFalse(node2.isGetterDef());
1380:       assertFalse(node2.isArrayLit());
1381:       assertFalse(node2.isStringKey());
1382:       assertFalse(node2.isLabelName());
1383:       assertSame(node0, node2);
1384:       assertSame(node2, node0);
1385:       assertEquals(53, Node.INPUT_ID);
1386:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1387:       assertEquals(43, Node.IS_CONSTANT_NAME);
1388:       assertEquals(29, Node.JSDOC_INFO_PROP);
1389:       assertEquals(36, Node.QUOTED_PROP);
1390:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1391:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1392:       assertEquals(55, Node.INFERRED_FUNCTION);
1393:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1394:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1395:       assertEquals(47, Node.IS_DISPATCHER);
1396:       assertEquals(46, Node.IS_NAMESPACE);
1397:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1398:       assertEquals(30, Node.VAR_ARGS_NAME);
1399:       assertEquals(2, Node.POST_FLAG);
1400:       assertEquals(40, Node.ORIGINALNAME_PROP);
1401:       assertEquals(52, Node.LENGTH);
1402:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1403:       assertEquals(57, Node.REFLECTED_OBJECT);
1404:       assertEquals(57, Node.LAST_PROP);
1405:       assertEquals(54, Node.SLASH_V);
1406:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1407:       assertEquals(50, Node.FREE_CALL);
1408:       assertEquals(1, Node.DECR_FLAG);
1409:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1410:       assertEquals(8, Node.FLAG_NO_THROWS);
1411:       assertEquals(39, Node.EMPTY_BLOCK);
1412:       assertEquals(37, Node.OPT_ARG_NAME);
1413:       assertEquals(48, Node.DIRECTIVES);
1414:       assertEquals(32, Node.INCRDECR_PROP);
1415:       assertEquals(12, Node.COLUMN_BITS);
1416:       assertEquals(56, Node.CHANGE_TIME);
1417:       assertEquals(49, Node.DIRECT_EVAL);
1418:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1419:       assertEquals(4095, Node.COLUMN_MASK);
1420:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1421:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1422:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1423:       assertEquals(36, Node.QUOTED_PROP);
1424:       assertEquals(29, Node.JSDOC_INFO_PROP);
1425:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1426:       assertEquals(55, Node.INFERRED_FUNCTION);
1427:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1428:       assertEquals(53, Node.INPUT_ID);
1429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1430:       assertEquals(46, Node.IS_NAMESPACE);
1431:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1432:       assertEquals(2, Node.POST_FLAG);
1433:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1434:       assertEquals(47, Node.IS_DISPATCHER);
1435:       assertEquals(30, Node.VAR_ARGS_NAME);
1436:       assertEquals(43, Node.IS_CONSTANT_NAME);
1437:       assertEquals(40, Node.ORIGINALNAME_PROP);
1438:       assertEquals(52, Node.LENGTH);
1439:       assertEquals(54, Node.SLASH_V);
1440:       assertEquals(57, Node.REFLECTED_OBJECT);
1441:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1442:       assertEquals(50, Node.FREE_CALL);
1443:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1444:       assertEquals(57, Node.LAST_PROP);
1445:       assertEquals(39, Node.EMPTY_BLOCK);
1446:       assertEquals(1, Node.DECR_FLAG);
1447:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1448:       assertEquals(32, Node.INCRDECR_PROP);
1449:       assertEquals(4095, Node.COLUMN_MASK);
1450:       assertEquals(8, Node.FLAG_NO_THROWS);
1451:       assertEquals(12, Node.COLUMN_BITS);
1452:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1453:       assertEquals(49, Node.DIRECT_EVAL);
1454:       assertEquals(56, Node.CHANGE_TIME);
1455:       assertEquals(37, Node.OPT_ARG_NAME);
1456:       assertEquals(48, Node.DIRECTIVES);
1457:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1458:       assertEquals(29, Node.JSDOC_INFO_PROP);
1459:       assertEquals(2, Node.POST_FLAG);
1460:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1461:       assertEquals(37, Node.OPT_ARG_NAME);
1462:       assertEquals(43, Node.IS_CONSTANT_NAME);
1463:       assertEquals(56, Node.CHANGE_TIME);
1464:       assertEquals(46, Node.IS_NAMESPACE);
1465:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1466:       assertEquals(1, Node.DECR_FLAG);
1467:       assertEquals(49, Node.DIRECT_EVAL);
1468:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1469:       assertEquals(4095, Node.COLUMN_MASK);
1470:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1471:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1472:       assertEquals(12, Node.COLUMN_BITS);
1473:       assertEquals(32, Node.INCRDECR_PROP);
1474:       assertEquals(50, Node.FREE_CALL);
1475:       assertEquals(40, Node.ORIGINALNAME_PROP);
1476:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1477:       assertEquals(52, Node.LENGTH);
1478:       assertEquals(8, Node.FLAG_NO_THROWS);
1479:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1480:       assertEquals(48, Node.DIRECTIVES);
1481:       assertEquals(54, Node.SLASH_V);
1482:       assertEquals(57, Node.REFLECTED_OBJECT);
1483:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1484:       assertEquals(30, Node.VAR_ARGS_NAME);
1485:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1486:       assertEquals(36, Node.QUOTED_PROP);
1487:       assertEquals(55, Node.INFERRED_FUNCTION);
1488:       assertEquals(53, Node.INPUT_ID);
1489:       assertEquals(39, Node.EMPTY_BLOCK);
1490:       assertEquals(47, Node.IS_DISPATCHER);
1491:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1492:       assertEquals(57, Node.LAST_PROP);
1493:       
1494:       Node node3 = Node.newNumber((double) 2);
1495:       assertNotNull(node3);
1496:       assertFalse(node3.equals((Object)node1));
1497:       assertFalse(node3.equals((Object)node0));
1498:       assertFalse(node3.equals((Object)node2));
1499:       assertFalse(node3.isGetProp());
1500:       assertFalse(node3.isComma());
1501:       assertFalse(node3.isObjectLit());
1502:       assertFalse(node3.isInstanceOf());
1503:       assertFalse(node3.isNot());
1504:       assertFalse(node3.isBreak());
1505:       assertFalse(node3.isAnd());
1506:       assertEquals((-1), node3.getCharno());
1507:       assertFalse(node3.hasOneChild());
1508:       assertFalse(node3.isScript());
1509:       assertFalse(node3.isExprResult());
1510:       assertFalse(node3.isString());
1511:       assertFalse(node3.isAssign());
1512:       assertFalse(node3.isWith());
1513:       assertFalse(node3.hasChildren());
1514:       assertFalse(node3.isDec());
1515:       assertFalse(node3.isCase());
1516:       assertFalse(node3.isThis());
1517:       assertFalse(node3.isHook());
1518:       assertFalse(node3.isAssignAdd());
1519:       assertFalse(node3.isOr());
1520:       assertFalse(node3.isLabel());
1521:       assertFalse(node3.isReturn());
1522:       assertFalse(node3.isTypeOf());
1523:       assertFalse(node3.isLabelName());
1524:       assertFalse(node3.isGetElem());
1525:       assertFalse(node3.isDelProp());
1526:       assertFalse(node3.isGetterDef());
1527:       assertFalse(node3.isSwitch());
1528:       assertFalse(node3.isAdd());
1529:       assertFalse(node3.isNew());
1530:       assertFalse(node3.isArrayLit());
1531:       assertFalse(node3.isDo());
1532:       assertFalse(node3.isEmpty());
1533:       assertFalse(node3.isVar());
1534:       assertFalse(node3.isDefaultCase());
1535:       assertEquals(0, node3.getChildCount());
1536:       assertFalse(node3.isCatch());
1537:       assertFalse(node3.isSetterDef());
1538:       assertFalse(node3.isName());
1539:       assertFalse(node3.isNull());
1540:       assertFalse(node3.isTrue());
1541:       assertFalse(node3.isParamList());
1542:       assertFalse(node3.isStringKey());
1543:       assertFalse(node3.isTry());
1544:       assertFalse(node3.isBlock());
1545:       assertFalse(node3.isVoid());
1546:       assertFalse(node3.isDebugger());
1547:       assertFalse(node3.isCall());
1548:       assertFalse(node3.isRegExp());
1549:       assertEquals(39, node3.getType());
1550:       assertFalse(node3.isFor());
1551:       assertFalse(node3.isWhile());
1552:       assertTrue(node3.isNumber());
1553:       assertEquals((-1), node3.getLineno());
1554:       assertFalse(node3.hasMoreThanOneChild());
1555:       assertFalse(node3.isContinue());
1556:       assertFalse(node3.isIn());
1557:       assertEquals((-1), node3.getSourcePosition());
1558:       assertFalse(node3.isNE());
1559:       assertFalse(node3.isIf());
1560:       assertFalse(node3.isCast());
1561:       assertFalse(node3.isFunction());
1562:       assertFalse(node3.isInc());
1563:       assertFalse(node3.isFalse());
1564:       assertFalse(node3.isThrow());
1565:       assertEquals(43, Node.IS_CONSTANT_NAME);
1566:       assertEquals(36, Node.QUOTED_PROP);
1567:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1568:       assertEquals(55, Node.INFERRED_FUNCTION);
1569:       assertEquals(53, Node.INPUT_ID);
1570:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1571:       assertEquals(4095, Node.COLUMN_MASK);
1572:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1573:       assertEquals(47, Node.IS_DISPATCHER);
1574:       assertEquals(2, Node.POST_FLAG);
1575:       assertEquals(50, Node.FREE_CALL);
1576:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1577:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1578:       assertEquals(40, Node.ORIGINALNAME_PROP);
1579:       assertEquals(46, Node.IS_NAMESPACE);
1580:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1581:       assertEquals(54, Node.SLASH_V);
1582:       assertEquals(57, Node.LAST_PROP);
1583:       assertEquals(30, Node.VAR_ARGS_NAME);
1584:       assertEquals(49, Node.DIRECT_EVAL);
1585:       assertEquals(1, Node.DECR_FLAG);
1586:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1587:       assertEquals(32, Node.INCRDECR_PROP);
1588:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1589:       assertEquals(12, Node.COLUMN_BITS);
1590:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1591:       assertEquals(56, Node.CHANGE_TIME);
1592:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1593:       assertEquals(8, Node.FLAG_NO_THROWS);
1594:       assertEquals(48, Node.DIRECTIVES);
1595:       assertEquals(37, Node.OPT_ARG_NAME);
1596:       assertEquals(29, Node.JSDOC_INFO_PROP);
1597:       assertEquals(39, Node.EMPTY_BLOCK);
1598:       assertEquals(52, Node.LENGTH);
1599:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1600:       assertEquals(57, Node.REFLECTED_OBJECT);
1601:       
1602:       // Undeclared exception!
1603:       try { 
1604:         node3.addChildrenToBack(node0);
1605:         fail("Expecting exception: IllegalArgumentException");
1606:       
1607:       } catch(IllegalArgumentException e) {
1608:          //
1609:          // no message in exception (getMessage() returned null)
1610:          //
1611:          verifyException("com.google.common.base.Preconditions", e);
1612:       }
1613:   }
1614: }
RegularFileObject[/tmp/EvoSuite_53_1629222929460/com/google/javascript/rhino/Node_53_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:55:29 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_53_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_53_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_53_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.jstype.TemplatizedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.collect.AbstractIndexedListIterator",
335:       "com.google.common.collect.Iterators$11",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.common.base.Objects",
339:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.Iterators$12",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
354:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.JSType$TypePair",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
366:       "com.google.javascript.rhino.jstype.NamespaceType"
367:     );
368:   }
369: }

[MASTER] 17:55:29.814 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-598), "", (-598), 108);
assertNotNull(node0);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-598), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean0 = node0.mayMutateArguments();
assertTrue(boolean0);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-598), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean1 = node0.isNoSideEffectsCall();
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-598), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

int int0 = node0.getLineno();
assertEquals((-1), int0);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-598), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-598), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean2 = node0.isOptionalArg();
assertFalse(boolean2);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-598), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

String string0 = node0.getQualifiedName();
assertNull(string0);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-598), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

int int1 = node0.getIntProp((-239));
assertEquals(0, int1);
assertFalse(int1 == int0);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-598), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
assertNull(jSDocInfo0);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-598), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Node node1 = new Node((-4096), node0, (-3028), 37);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-598), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertEquals((-4096), node1.getType());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

Node node2 = node0.useSourceInfoFromForTree(node1);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-598), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertEquals((-4096), node1.getType());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-598), node2.getType());
assertFalse(node2.hasOneChild());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBreak());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isThrow());
assertFalse(node2.isWhile());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.isParamList());
assertFalse(node2.isLabel());
assertFalse(node2.isNumber());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertSame(node0, node2);
assertSame(node2, node0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);

Node node3 = Node.newNumber((double) 2);
assertNotNull(node3);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isObjectLit());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isNot());
assertFalse(node3.isBreak());
assertFalse(node3.isAnd());
assertEquals((-1), node3.getCharno());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isString());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isCase());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isSwitch());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDo());
assertFalse(node3.isEmpty());
assertFalse(node3.isVar());
assertFalse(node3.isDefaultCase());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isSetterDef());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isTry());
assertFalse(node3.isBlock());
assertFalse(node3.isVoid());
assertFalse(node3.isDebugger());
assertFalse(node3.isCall());
assertFalse(node3.isRegExp());
assertEquals(39, node3.getType());
assertFalse(node3.isFor());
assertFalse(node3.isWhile());
assertTrue(node3.isNumber());
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isIn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isCast());
assertFalse(node3.isFunction());
assertFalse(node3.isInc());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);

node3.addChildrenToBack(node0);

[MASTER] 17:55:34.146 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_69_1629222933830/com/google/javascript/rhino/Node_69_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_69_1629222933830/com/google/javascript/rhino/Node_69_tmp__ESTest_scaffolding.java]]
[MASTER] 17:55:34.147 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:34.150 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:34.152 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 445
[MASTER] 17:55:34.155 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_69_1629222933830/com/google/javascript/rhino/Node_69_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:55:33 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_69_tmp__ESTest extends Node_69_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString((-598), "", (-598), 108);
23:       assertNotNull(node0);
24:       assertFalse(node0.isHook());
25:       assertFalse(node0.isFalse());
26:       assertFalse(node0.isComma());
27:       assertFalse(node0.isInc());
28:       assertFalse(node0.isThis());
29:       assertFalse(node0.isGetProp());
30:       assertFalse(node0.isThrow());
31:       assertFalse(node0.isObjectLit());
32:       assertFalse(node0.isCase());
33:       assertFalse(node0.isNot());
34:       assertFalse(node0.isString());
35:       assertFalse(node0.isSwitch());
36:       assertEquals((-1), node0.getCharno());
37:       assertFalse(node0.isAnd());
38:       assertFalse(node0.isCast());
39:       assertFalse(node0.hasOneChild());
40:       assertFalse(node0.isGetterDef());
41:       assertFalse(node0.isNumber());
42:       assertFalse(node0.isFunction());
43:       assertFalse(node0.isScript());
44:       assertFalse(node0.isRegExp());
45:       assertFalse(node0.isTry());
46:       assertFalse(node0.isFor());
47:       assertFalse(node0.hasMoreThanOneChild());
48:       assertFalse(node0.isCatch());
49:       assertFalse(node0.isWith());
50:       assertFalse(node0.isIn());
51:       assertFalse(node0.isInstanceOf());
52:       assertFalse(node0.isNE());
53:       assertEquals((-1), node0.getLineno());
54:       assertFalse(node0.isIf());
55:       assertFalse(node0.isVar());
56:       assertFalse(node0.isCall());
57:       assertFalse(node0.isAdd());
58:       assertFalse(node0.isSetterDef());
59:       assertFalse(node0.isNew());
60:       assertFalse(node0.isDo());
61:       assertFalse(node0.isBlock());
62:       assertFalse(node0.isWhile());
63:       assertEquals(0, node0.getChildCount());
64:       assertFalse(node0.isContinue());
65:       assertEquals((-1), node0.getSourcePosition());
66:       assertFalse(node0.isDebugger());
67:       assertFalse(node0.isLabelName());
68:       assertFalse(node0.isStringKey());
69:       assertFalse(node0.isParamList());
70:       assertFalse(node0.isGetElem());
71:       assertFalse(node0.isArrayLit());
72:       assertFalse(node0.isAssign());
73:       assertFalse(node0.isEmpty());
74:       assertFalse(node0.isTypeOf());
75:       assertFalse(node0.hasChildren());
76:       assertFalse(node0.isDec());
77:       assertFalse(node0.isLabel());
78:       assertFalse(node0.isAssignAdd());
79:       assertFalse(node0.isReturn());
80:       assertFalse(node0.isDefaultCase());
81:       assertEquals((-598), node0.getType());
82:       assertFalse(node0.isOr());
83:       assertFalse(node0.isNull());
84:       assertFalse(node0.isExprResult());
85:       assertFalse(node0.isVoid());
86:       assertFalse(node0.isTrue());
87:       assertFalse(node0.isBreak());
88:       assertFalse(node0.isName());
89:       assertFalse(node0.isDelProp());
90:       assertEquals(48, Node.DIRECTIVES);
91:       assertEquals(8, Node.FLAG_NO_THROWS);
92:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
93:       assertEquals(4095, Node.COLUMN_MASK);
94:       assertEquals(55, Node.INFERRED_FUNCTION);
95:       assertEquals(39, Node.EMPTY_BLOCK);
96:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
97:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
98:       assertEquals(50, Node.FREE_CALL);
99:       assertEquals(43, Node.IS_CONSTANT_NAME);
100:       assertEquals(36, Node.QUOTED_PROP);
101:       assertEquals(57, Node.REFLECTED_OBJECT);
102:       assertEquals(52, Node.LENGTH);
103:       assertEquals(15, Node.NO_SIDE_EFFECTS);
104:       assertEquals(40, Node.ORIGINALNAME_PROP);
105:       assertEquals(53, Node.INPUT_ID);
106:       assertEquals(30, Node.VAR_ARGS_NAME);
107:       assertEquals(57, Node.LAST_PROP);
108:       assertEquals(47, Node.IS_DISPATCHER);
109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
110:       assertEquals(37, Node.OPT_ARG_NAME);
111:       assertEquals(2, Node.POST_FLAG);
112:       assertEquals(32, Node.INCRDECR_PROP);
113:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
114:       assertEquals(29, Node.JSDOC_INFO_PROP);
115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
116:       assertEquals(49, Node.DIRECT_EVAL);
117:       assertEquals(56, Node.CHANGE_TIME);
118:       assertEquals(51, Node.STATIC_SOURCE_FILE);
119:       assertEquals(46, Node.IS_NAMESPACE);
120:       assertEquals(54, Node.SLASH_V);
121:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
122:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
123:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
124:       assertEquals(1, Node.DECR_FLAG);
125:       assertEquals(12, Node.COLUMN_BITS);
126:       
127:       boolean boolean0 = node0.mayMutateArguments();
128:       assertTrue(boolean0);
129:       assertFalse(node0.isHook());
130:       assertFalse(node0.isFalse());
131:       assertFalse(node0.isComma());
132:       assertFalse(node0.isInc());
133:       assertFalse(node0.isThis());
134:       assertFalse(node0.isGetProp());
135:       assertFalse(node0.isThrow());
136:       assertFalse(node0.isObjectLit());
137:       assertFalse(node0.isCase());
138:       assertFalse(node0.isNot());
139:       assertFalse(node0.isString());
140:       assertFalse(node0.isSwitch());
141:       assertEquals((-1), node0.getCharno());
142:       assertFalse(node0.isAnd());
143:       assertFalse(node0.isCast());
144:       assertFalse(node0.hasOneChild());
145:       assertFalse(node0.isGetterDef());
146:       assertFalse(node0.isNumber());
147:       assertFalse(node0.isFunction());
148:       assertFalse(node0.isScript());
149:       assertFalse(node0.isRegExp());
150:       assertFalse(node0.isTry());
151:       assertFalse(node0.isFor());
152:       assertFalse(node0.hasMoreThanOneChild());
153:       assertFalse(node0.isCatch());
154:       assertFalse(node0.isWith());
155:       assertFalse(node0.isIn());
156:       assertFalse(node0.isInstanceOf());
157:       assertFalse(node0.isNE());
158:       assertEquals((-1), node0.getLineno());
159:       assertFalse(node0.isIf());
160:       assertFalse(node0.isVar());
161:       assertFalse(node0.isCall());
162:       assertFalse(node0.isAdd());
163:       assertFalse(node0.isSetterDef());
164:       assertFalse(node0.isNew());
165:       assertFalse(node0.isDo());
166:       assertFalse(node0.isBlock());
167:       assertFalse(node0.isWhile());
168:       assertEquals(0, node0.getChildCount());
169:       assertFalse(node0.isContinue());
170:       assertEquals((-1), node0.getSourcePosition());
171:       assertFalse(node0.isDebugger());
172:       assertFalse(node0.isLabelName());
173:       assertFalse(node0.isStringKey());
174:       assertFalse(node0.isParamList());
175:       assertFalse(node0.isGetElem());
176:       assertFalse(node0.isArrayLit());
177:       assertFalse(node0.isAssign());
178:       assertFalse(node0.isEmpty());
179:       assertFalse(node0.isTypeOf());
180:       assertFalse(node0.hasChildren());
181:       assertFalse(node0.isDec());
182:       assertFalse(node0.isLabel());
183:       assertFalse(node0.isAssignAdd());
184:       assertFalse(node0.isReturn());
185:       assertFalse(node0.isDefaultCase());
186:       assertEquals((-598), node0.getType());
187:       assertFalse(node0.isOr());
188:       assertFalse(node0.isNull());
189:       assertFalse(node0.isExprResult());
190:       assertFalse(node0.isVoid());
191:       assertFalse(node0.isTrue());
192:       assertFalse(node0.isBreak());
193:       assertFalse(node0.isName());
194:       assertFalse(node0.isDelProp());
195:       assertEquals(48, Node.DIRECTIVES);
196:       assertEquals(8, Node.FLAG_NO_THROWS);
197:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
198:       assertEquals(4095, Node.COLUMN_MASK);
199:       assertEquals(55, Node.INFERRED_FUNCTION);
200:       assertEquals(39, Node.EMPTY_BLOCK);
201:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
203:       assertEquals(50, Node.FREE_CALL);
204:       assertEquals(43, Node.IS_CONSTANT_NAME);
205:       assertEquals(36, Node.QUOTED_PROP);
206:       assertEquals(57, Node.REFLECTED_OBJECT);
207:       assertEquals(52, Node.LENGTH);
208:       assertEquals(15, Node.NO_SIDE_EFFECTS);
209:       assertEquals(40, Node.ORIGINALNAME_PROP);
210:       assertEquals(53, Node.INPUT_ID);
211:       assertEquals(30, Node.VAR_ARGS_NAME);
212:       assertEquals(57, Node.LAST_PROP);
213:       assertEquals(47, Node.IS_DISPATCHER);
214:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
215:       assertEquals(37, Node.OPT_ARG_NAME);
216:       assertEquals(2, Node.POST_FLAG);
217:       assertEquals(32, Node.INCRDECR_PROP);
218:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
219:       assertEquals(29, Node.JSDOC_INFO_PROP);
220:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
221:       assertEquals(49, Node.DIRECT_EVAL);
222:       assertEquals(56, Node.CHANGE_TIME);
223:       assertEquals(51, Node.STATIC_SOURCE_FILE);
224:       assertEquals(46, Node.IS_NAMESPACE);
225:       assertEquals(54, Node.SLASH_V);
226:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
227:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
228:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
229:       assertEquals(1, Node.DECR_FLAG);
230:       assertEquals(12, Node.COLUMN_BITS);
231:       
232:       boolean boolean1 = node0.isNoSideEffectsCall();
233:       assertFalse(boolean1);
234:       assertFalse(boolean1 == boolean0);
235:       assertFalse(node0.isHook());
236:       assertFalse(node0.isFalse());
237:       assertFalse(node0.isComma());
238:       assertFalse(node0.isInc());
239:       assertFalse(node0.isThis());
240:       assertFalse(node0.isGetProp());
241:       assertFalse(node0.isThrow());
242:       assertFalse(node0.isObjectLit());
243:       assertFalse(node0.isCase());
244:       assertFalse(node0.isNot());
245:       assertFalse(node0.isString());
246:       assertFalse(node0.isSwitch());
247:       assertEquals((-1), node0.getCharno());
248:       assertFalse(node0.isAnd());
249:       assertFalse(node0.isCast());
250:       assertFalse(node0.hasOneChild());
251:       assertFalse(node0.isGetterDef());
252:       assertFalse(node0.isNumber());
253:       assertFalse(node0.isFunction());
254:       assertFalse(node0.isScript());
255:       assertFalse(node0.isRegExp());
256:       assertFalse(node0.isTry());
257:       assertFalse(node0.isFor());
258:       assertFalse(node0.hasMoreThanOneChild());
259:       assertFalse(node0.isCatch());
260:       assertFalse(node0.isWith());
261:       assertFalse(node0.isIn());
262:       assertFalse(node0.isInstanceOf());
263:       assertFalse(node0.isNE());
264:       assertEquals((-1), node0.getLineno());
265:       assertFalse(node0.isIf());
266:       assertFalse(node0.isVar());
267:       assertFalse(node0.isCall());
268:       assertFalse(node0.isAdd());
269:       assertFalse(node0.isSetterDef());
270:       assertFalse(node0.isNew());
271:       assertFalse(node0.isDo());
272:       assertFalse(node0.isBlock());
273:       assertFalse(node0.isWhile());
274:       assertEquals(0, node0.getChildCount());
275:       assertFalse(node0.isContinue());
276:       assertEquals((-1), node0.getSourcePosition());
277:       assertFalse(node0.isDebugger());
278:       assertFalse(node0.isLabelName());
279:       assertFalse(node0.isStringKey());
280:       assertFalse(node0.isParamList());
281:       assertFalse(node0.isGetElem());
282:       assertFalse(node0.isArrayLit());
283:       assertFalse(node0.isAssign());
284:       assertFalse(node0.isEmpty());
285:       assertFalse(node0.isTypeOf());
286:       assertFalse(node0.hasChildren());
287:       assertFalse(node0.isDec());
288:       assertFalse(node0.isLabel());
289:       assertFalse(node0.isAssignAdd());
290:       assertFalse(node0.isReturn());
291:       assertFalse(node0.isDefaultCase());
292:       assertEquals((-598), node0.getType());
293:       assertFalse(node0.isOr());
294:       assertFalse(node0.isNull());
295:       assertFalse(node0.isExprResult());
296:       assertFalse(node0.isVoid());
297:       assertFalse(node0.isTrue());
298:       assertFalse(node0.isBreak());
299:       assertFalse(node0.isName());
300:       assertFalse(node0.isDelProp());
301:       assertEquals(48, Node.DIRECTIVES);
302:       assertEquals(8, Node.FLAG_NO_THROWS);
303:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
304:       assertEquals(4095, Node.COLUMN_MASK);
305:       assertEquals(55, Node.INFERRED_FUNCTION);
306:       assertEquals(39, Node.EMPTY_BLOCK);
307:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
308:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
309:       assertEquals(50, Node.FREE_CALL);
310:       assertEquals(43, Node.IS_CONSTANT_NAME);
311:       assertEquals(36, Node.QUOTED_PROP);
312:       assertEquals(57, Node.REFLECTED_OBJECT);
313:       assertEquals(52, Node.LENGTH);
314:       assertEquals(15, Node.NO_SIDE_EFFECTS);
315:       assertEquals(40, Node.ORIGINALNAME_PROP);
316:       assertEquals(53, Node.INPUT_ID);
317:       assertEquals(30, Node.VAR_ARGS_NAME);
318:       assertEquals(57, Node.LAST_PROP);
319:       assertEquals(47, Node.IS_DISPATCHER);
320:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
321:       assertEquals(37, Node.OPT_ARG_NAME);
322:       assertEquals(2, Node.POST_FLAG);
323:       assertEquals(32, Node.INCRDECR_PROP);
324:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
325:       assertEquals(29, Node.JSDOC_INFO_PROP);
326:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
327:       assertEquals(49, Node.DIRECT_EVAL);
328:       assertEquals(56, Node.CHANGE_TIME);
329:       assertEquals(51, Node.STATIC_SOURCE_FILE);
330:       assertEquals(46, Node.IS_NAMESPACE);
331:       assertEquals(54, Node.SLASH_V);
332:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
333:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
334:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
335:       assertEquals(1, Node.DECR_FLAG);
336:       assertEquals(12, Node.COLUMN_BITS);
337:       
338:       int int0 = node0.getLineno();
339:       assertEquals((-1), int0);
340:       assertFalse(node0.isHook());
341:       assertFalse(node0.isFalse());
342:       assertFalse(node0.isComma());
343:       assertFalse(node0.isInc());
344:       assertFalse(node0.isThis());
345:       assertFalse(node0.isGetProp());
346:       assertFalse(node0.isThrow());
347:       assertFalse(node0.isObjectLit());
348:       assertFalse(node0.isCase());
349:       assertFalse(node0.isNot());
350:       assertFalse(node0.isString());
351:       assertFalse(node0.isSwitch());
352:       assertEquals((-1), node0.getCharno());
353:       assertFalse(node0.isAnd());
354:       assertFalse(node0.isCast());
355:       assertFalse(node0.hasOneChild());
356:       assertFalse(node0.isGetterDef());
357:       assertFalse(node0.isNumber());
358:       assertFalse(node0.isFunction());
359:       assertFalse(node0.isScript());
360:       assertFalse(node0.isRegExp());
361:       assertFalse(node0.isTry());
362:       assertFalse(node0.isFor());
363:       assertFalse(node0.hasMoreThanOneChild());
364:       assertFalse(node0.isCatch());
365:       assertFalse(node0.isWith());
366:       assertFalse(node0.isIn());
367:       assertFalse(node0.isInstanceOf());
368:       assertFalse(node0.isNE());
369:       assertEquals((-1), node0.getLineno());
370:       assertFalse(node0.isIf());
371:       assertFalse(node0.isVar());
372:       assertFalse(node0.isCall());
373:       assertFalse(node0.isAdd());
374:       assertFalse(node0.isSetterDef());
375:       assertFalse(node0.isNew());
376:       assertFalse(node0.isDo());
377:       assertFalse(node0.isBlock());
378:       assertFalse(node0.isWhile());
379:       assertEquals(0, node0.getChildCount());
380:       assertFalse(node0.isContinue());
381:       assertEquals((-1), node0.getSourcePosition());
382:       assertFalse(node0.isDebugger());
383:       assertFalse(node0.isLabelName());
384:       assertFalse(node0.isStringKey());
385:       assertFalse(node0.isParamList());
386:       assertFalse(node0.isGetElem());
387:       assertFalse(node0.isArrayLit());
388:       assertFalse(node0.isAssign());
389:       assertFalse(node0.isEmpty());
390:       assertFalse(node0.isTypeOf());
391:       assertFalse(node0.hasChildren());
392:       assertFalse(node0.isDec());
393:       assertFalse(node0.isLabel());
394:       assertFalse(node0.isAssignAdd());
395:       assertFalse(node0.isReturn());
396:       assertFalse(node0.isDefaultCase());
397:       assertEquals((-598), node0.getType());
398:       assertFalse(node0.isOr());
399:       assertFalse(node0.isNull());
400:       assertFalse(node0.isExprResult());
401:       assertFalse(node0.isVoid());
402:       assertFalse(node0.isTrue());
403:       assertFalse(node0.isBreak());
404:       assertFalse(node0.isName());
405:       assertFalse(node0.isDelProp());
406:       assertEquals(48, Node.DIRECTIVES);
407:       assertEquals(8, Node.FLAG_NO_THROWS);
408:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
409:       assertEquals(4095, Node.COLUMN_MASK);
410:       assertEquals(55, Node.INFERRED_FUNCTION);
411:       assertEquals(39, Node.EMPTY_BLOCK);
412:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
413:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
414:       assertEquals(50, Node.FREE_CALL);
415:       assertEquals(43, Node.IS_CONSTANT_NAME);
416:       assertEquals(36, Node.QUOTED_PROP);
417:       assertEquals(57, Node.REFLECTED_OBJECT);
418:       assertEquals(52, Node.LENGTH);
419:       assertEquals(15, Node.NO_SIDE_EFFECTS);
420:       assertEquals(40, Node.ORIGINALNAME_PROP);
421:       assertEquals(53, Node.INPUT_ID);
422:       assertEquals(30, Node.VAR_ARGS_NAME);
423:       assertEquals(57, Node.LAST_PROP);
424:       assertEquals(47, Node.IS_DISPATCHER);
425:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
426:       assertEquals(37, Node.OPT_ARG_NAME);
427:       assertEquals(2, Node.POST_FLAG);
428:       assertEquals(32, Node.INCRDECR_PROP);
429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
430:       assertEquals(29, Node.JSDOC_INFO_PROP);
431:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
432:       assertEquals(49, Node.DIRECT_EVAL);
433:       assertEquals(56, Node.CHANGE_TIME);
434:       assertEquals(51, Node.STATIC_SOURCE_FILE);
435:       assertEquals(46, Node.IS_NAMESPACE);
436:       assertEquals(54, Node.SLASH_V);
437:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
438:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
439:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
440:       assertEquals(1, Node.DECR_FLAG);
441:       assertEquals(12, Node.COLUMN_BITS);
442:       
443:       Iterable<Node> iterable0 = node0.children();
444:       assertNotNull(iterable0);
445:       assertFalse(iterable0.contains(node0));
446:       assertFalse(node0.isHook());
447:       assertFalse(node0.isFalse());
448:       assertFalse(node0.isComma());
449:       assertFalse(node0.isInc());
450:       assertFalse(node0.isThis());
451:       assertFalse(node0.isGetProp());
452:       assertFalse(node0.isThrow());
453:       assertFalse(node0.isObjectLit());
454:       assertFalse(node0.isCase());
455:       assertFalse(node0.isNot());
456:       assertFalse(node0.isString());
457:       assertFalse(node0.isSwitch());
458:       assertEquals((-1), node0.getCharno());
459:       assertFalse(node0.isAnd());
460:       assertFalse(node0.isCast());
461:       assertFalse(node0.hasOneChild());
462:       assertFalse(node0.isGetterDef());
463:       assertFalse(node0.isNumber());
464:       assertFalse(node0.isFunction());
465:       assertFalse(node0.isScript());
466:       assertFalse(node0.isRegExp());
467:       assertFalse(node0.isTry());
468:       assertFalse(node0.isFor());
469:       assertFalse(node0.hasMoreThanOneChild());
470:       assertFalse(node0.isCatch());
471:       assertFalse(node0.isWith());
472:       assertFalse(node0.isIn());
473:       assertFalse(node0.isInstanceOf());
474:       assertFalse(node0.isNE());
475:       assertEquals((-1), node0.getLineno());
476:       assertFalse(node0.isIf());
477:       assertFalse(node0.isVar());
478:       assertFalse(node0.isCall());
479:       assertFalse(node0.isAdd());
480:       assertFalse(node0.isSetterDef());
481:       assertFalse(node0.isNew());
482:       assertFalse(node0.isDo());
483:       assertFalse(node0.isBlock());
484:       assertFalse(node0.isWhile());
485:       assertEquals(0, node0.getChildCount());
486:       assertFalse(node0.isContinue());
487:       assertEquals((-1), node0.getSourcePosition());
488:       assertFalse(node0.isDebugger());
489:       assertFalse(node0.isLabelName());
490:       assertFalse(node0.isStringKey());
491:       assertFalse(node0.isParamList());
492:       assertFalse(node0.isGetElem());
493:       assertFalse(node0.isArrayLit());
494:       assertFalse(node0.isAssign());
495:       assertFalse(node0.isEmpty());
496:       assertFalse(node0.isTypeOf());
497:       assertFalse(node0.hasChildren());
498:       assertFalse(node0.isDec());
499:       assertFalse(node0.isLabel());
500:       assertFalse(node0.isAssignAdd());
501:       assertFalse(node0.isReturn());
502:       assertFalse(node0.isDefaultCase());
503:       assertEquals((-598), node0.getType());
504:       assertFalse(node0.isOr());
505:       assertFalse(node0.isNull());
506:       assertFalse(node0.isExprResult());
507:       assertFalse(node0.isVoid());
508:       assertFalse(node0.isTrue());
509:       assertFalse(node0.isBreak());
510:       assertFalse(node0.isName());
511:       assertFalse(node0.isDelProp());
512:       assertEquals(48, Node.DIRECTIVES);
513:       assertEquals(8, Node.FLAG_NO_THROWS);
514:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
515:       assertEquals(4095, Node.COLUMN_MASK);
516:       assertEquals(55, Node.INFERRED_FUNCTION);
517:       assertEquals(39, Node.EMPTY_BLOCK);
518:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
519:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
520:       assertEquals(50, Node.FREE_CALL);
521:       assertEquals(43, Node.IS_CONSTANT_NAME);
522:       assertEquals(36, Node.QUOTED_PROP);
523:       assertEquals(57, Node.REFLECTED_OBJECT);
524:       assertEquals(52, Node.LENGTH);
525:       assertEquals(15, Node.NO_SIDE_EFFECTS);
526:       assertEquals(40, Node.ORIGINALNAME_PROP);
527:       assertEquals(53, Node.INPUT_ID);
528:       assertEquals(30, Node.VAR_ARGS_NAME);
529:       assertEquals(57, Node.LAST_PROP);
530:       assertEquals(47, Node.IS_DISPATCHER);
531:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
532:       assertEquals(37, Node.OPT_ARG_NAME);
533:       assertEquals(2, Node.POST_FLAG);
534:       assertEquals(32, Node.INCRDECR_PROP);
535:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
536:       assertEquals(29, Node.JSDOC_INFO_PROP);
537:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
538:       assertEquals(49, Node.DIRECT_EVAL);
539:       assertEquals(56, Node.CHANGE_TIME);
540:       assertEquals(51, Node.STATIC_SOURCE_FILE);
541:       assertEquals(46, Node.IS_NAMESPACE);
542:       assertEquals(54, Node.SLASH_V);
543:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
544:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
545:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
546:       assertEquals(1, Node.DECR_FLAG);
547:       assertEquals(12, Node.COLUMN_BITS);
548:       
549:       boolean boolean2 = node0.isOptionalArg();
550:       assertFalse(boolean2);
551:       assertTrue(boolean2 == boolean1);
552:       assertFalse(boolean2 == boolean0);
553:       assertFalse(node0.isHook());
554:       assertFalse(node0.isFalse());
555:       assertFalse(node0.isComma());
556:       assertFalse(node0.isInc());
557:       assertFalse(node0.isThis());
558:       assertFalse(node0.isGetProp());
559:       assertFalse(node0.isThrow());
560:       assertFalse(node0.isObjectLit());
561:       assertFalse(node0.isCase());
562:       assertFalse(node0.isNot());
563:       assertFalse(node0.isString());
564:       assertFalse(node0.isSwitch());
565:       assertEquals((-1), node0.getCharno());
566:       assertFalse(node0.isAnd());
567:       assertFalse(node0.isCast());
568:       assertFalse(node0.hasOneChild());
569:       assertFalse(node0.isGetterDef());
570:       assertFalse(node0.isNumber());
571:       assertFalse(node0.isFunction());
572:       assertFalse(node0.isScript());
573:       assertFalse(node0.isRegExp());
574:       assertFalse(node0.isTry());
575:       assertFalse(node0.isFor());
576:       assertFalse(node0.hasMoreThanOneChild());
577:       assertFalse(node0.isCatch());
578:       assertFalse(node0.isWith());
579:       assertFalse(node0.isIn());
580:       assertFalse(node0.isInstanceOf());
581:       assertFalse(node0.isNE());
582:       assertEquals((-1), node0.getLineno());
583:       assertFalse(node0.isIf());
584:       assertFalse(node0.isVar());
585:       assertFalse(node0.isCall());
586:       assertFalse(node0.isAdd());
587:       assertFalse(node0.isSetterDef());
588:       assertFalse(node0.isNew());
589:       assertFalse(node0.isDo());
590:       assertFalse(node0.isBlock());
591:       assertFalse(node0.isWhile());
592:       assertEquals(0, node0.getChildCount());
593:       assertFalse(node0.isContinue());
594:       assertEquals((-1), node0.getSourcePosition());
595:       assertFalse(node0.isDebugger());
596:       assertFalse(node0.isLabelName());
597:       assertFalse(node0.isStringKey());
598:       assertFalse(node0.isParamList());
599:       assertFalse(node0.isGetElem());
600:       assertFalse(node0.isArrayLit());
601:       assertFalse(node0.isAssign());
602:       assertFalse(node0.isEmpty());
603:       assertFalse(node0.isTypeOf());
604:       assertFalse(node0.hasChildren());
605:       assertFalse(node0.isDec());
606:       assertFalse(node0.isLabel());
607:       assertFalse(node0.isAssignAdd());
608:       assertFalse(node0.isReturn());
609:       assertFalse(node0.isDefaultCase());
610:       assertEquals((-598), node0.getType());
611:       assertFalse(node0.isOr());
612:       assertFalse(node0.isNull());
613:       assertFalse(node0.isExprResult());
614:       assertFalse(node0.isVoid());
615:       assertFalse(node0.isTrue());
616:       assertFalse(node0.isBreak());
617:       assertFalse(node0.isName());
618:       assertFalse(node0.isDelProp());
619:       assertEquals(48, Node.DIRECTIVES);
620:       assertEquals(8, Node.FLAG_NO_THROWS);
621:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
622:       assertEquals(4095, Node.COLUMN_MASK);
623:       assertEquals(55, Node.INFERRED_FUNCTION);
624:       assertEquals(39, Node.EMPTY_BLOCK);
625:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
626:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
627:       assertEquals(50, Node.FREE_CALL);
628:       assertEquals(43, Node.IS_CONSTANT_NAME);
629:       assertEquals(36, Node.QUOTED_PROP);
630:       assertEquals(57, Node.REFLECTED_OBJECT);
631:       assertEquals(52, Node.LENGTH);
632:       assertEquals(15, Node.NO_SIDE_EFFECTS);
633:       assertEquals(40, Node.ORIGINALNAME_PROP);
634:       assertEquals(53, Node.INPUT_ID);
635:       assertEquals(30, Node.VAR_ARGS_NAME);
636:       assertEquals(57, Node.LAST_PROP);
637:       assertEquals(47, Node.IS_DISPATCHER);
638:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
639:       assertEquals(37, Node.OPT_ARG_NAME);
640:       assertEquals(2, Node.POST_FLAG);
641:       assertEquals(32, Node.INCRDECR_PROP);
642:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
643:       assertEquals(29, Node.JSDOC_INFO_PROP);
644:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
645:       assertEquals(49, Node.DIRECT_EVAL);
646:       assertEquals(56, Node.CHANGE_TIME);
647:       assertEquals(51, Node.STATIC_SOURCE_FILE);
648:       assertEquals(46, Node.IS_NAMESPACE);
649:       assertEquals(54, Node.SLASH_V);
650:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
651:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
652:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
653:       assertEquals(1, Node.DECR_FLAG);
654:       assertEquals(12, Node.COLUMN_BITS);
655:       
656:       String string0 = node0.getQualifiedName();
657:       assertNull(string0);
658:       assertFalse(node0.isHook());
659:       assertFalse(node0.isFalse());
660:       assertFalse(node0.isComma());
661:       assertFalse(node0.isInc());
662:       assertFalse(node0.isThis());
663:       assertFalse(node0.isGetProp());
664:       assertFalse(node0.isThrow());
665:       assertFalse(node0.isObjectLit());
666:       assertFalse(node0.isCase());
667:       assertFalse(node0.isNot());
668:       assertFalse(node0.isString());
669:       assertFalse(node0.isSwitch());
670:       assertEquals((-1), node0.getCharno());
671:       assertFalse(node0.isAnd());
672:       assertFalse(node0.isCast());
673:       assertFalse(node0.hasOneChild());
674:       assertFalse(node0.isGetterDef());
675:       assertFalse(node0.isNumber());
676:       assertFalse(node0.isFunction());
677:       assertFalse(node0.isScript());
678:       assertFalse(node0.isRegExp());
679:       assertFalse(node0.isTry());
680:       assertFalse(node0.isFor());
681:       assertFalse(node0.hasMoreThanOneChild());
682:       assertFalse(node0.isCatch());
683:       assertFalse(node0.isWith());
684:       assertFalse(node0.isIn());
685:       assertFalse(node0.isInstanceOf());
686:       assertFalse(node0.isNE());
687:       assertEquals((-1), node0.getLineno());
688:       assertFalse(node0.isIf());
689:       assertFalse(node0.isVar());
690:       assertFalse(node0.isCall());
691:       assertFalse(node0.isAdd());
692:       assertFalse(node0.isSetterDef());
693:       assertFalse(node0.isNew());
694:       assertFalse(node0.isDo());
695:       assertFalse(node0.isBlock());
696:       assertFalse(node0.isWhile());
697:       assertEquals(0, node0.getChildCount());
698:       assertFalse(node0.isContinue());
699:       assertEquals((-1), node0.getSourcePosition());
700:       assertFalse(node0.isDebugger());
701:       assertFalse(node0.isLabelName());
702:       assertFalse(node0.isStringKey());
703:       assertFalse(node0.isParamList());
704:       assertFalse(node0.isGetElem());
705:       assertFalse(node0.isArrayLit());
706:       assertFalse(node0.isAssign());
707:       assertFalse(node0.isEmpty());
708:       assertFalse(node0.isTypeOf());
709:       assertFalse(node0.hasChildren());
710:       assertFalse(node0.isDec());
711:       assertFalse(node0.isLabel());
712:       assertFalse(node0.isAssignAdd());
713:       assertFalse(node0.isReturn());
714:       assertFalse(node0.isDefaultCase());
715:       assertEquals((-598), node0.getType());
716:       assertFalse(node0.isOr());
717:       assertFalse(node0.isNull());
718:       assertFalse(node0.isExprResult());
719:       assertFalse(node0.isVoid());
720:       assertFalse(node0.isTrue());
721:       assertFalse(node0.isBreak());
722:       assertFalse(node0.isName());
723:       assertFalse(node0.isDelProp());
724:       assertEquals(48, Node.DIRECTIVES);
725:       assertEquals(8, Node.FLAG_NO_THROWS);
726:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
727:       assertEquals(4095, Node.COLUMN_MASK);
728:       assertEquals(55, Node.INFERRED_FUNCTION);
729:       assertEquals(39, Node.EMPTY_BLOCK);
730:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
731:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
732:       assertEquals(50, Node.FREE_CALL);
733:       assertEquals(43, Node.IS_CONSTANT_NAME);
734:       assertEquals(36, Node.QUOTED_PROP);
735:       assertEquals(57, Node.REFLECTED_OBJECT);
736:       assertEquals(52, Node.LENGTH);
737:       assertEquals(15, Node.NO_SIDE_EFFECTS);
738:       assertEquals(40, Node.ORIGINALNAME_PROP);
739:       assertEquals(53, Node.INPUT_ID);
740:       assertEquals(30, Node.VAR_ARGS_NAME);
741:       assertEquals(57, Node.LAST_PROP);
742:       assertEquals(47, Node.IS_DISPATCHER);
743:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
744:       assertEquals(37, Node.OPT_ARG_NAME);
745:       assertEquals(2, Node.POST_FLAG);
746:       assertEquals(32, Node.INCRDECR_PROP);
747:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
748:       assertEquals(29, Node.JSDOC_INFO_PROP);
749:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
750:       assertEquals(49, Node.DIRECT_EVAL);
751:       assertEquals(56, Node.CHANGE_TIME);
752:       assertEquals(51, Node.STATIC_SOURCE_FILE);
753:       assertEquals(46, Node.IS_NAMESPACE);
754:       assertEquals(54, Node.SLASH_V);
755:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
756:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
757:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
758:       assertEquals(1, Node.DECR_FLAG);
759:       assertEquals(12, Node.COLUMN_BITS);
760:       
761:       int int1 = node0.getIntProp((-239));
762:       assertEquals(0, int1);
763:       assertFalse(int1 == int0);
764:       assertFalse(node0.isHook());
765:       assertFalse(node0.isFalse());
766:       assertFalse(node0.isComma());
767:       assertFalse(node0.isInc());
768:       assertFalse(node0.isThis());
769:       assertFalse(node0.isGetProp());
770:       assertFalse(node0.isThrow());
771:       assertFalse(node0.isObjectLit());
772:       assertFalse(node0.isCase());
773:       assertFalse(node0.isNot());
774:       assertFalse(node0.isString());
775:       assertFalse(node0.isSwitch());
776:       assertEquals((-1), node0.getCharno());
777:       assertFalse(node0.isAnd());
778:       assertFalse(node0.isCast());
779:       assertFalse(node0.hasOneChild());
780:       assertFalse(node0.isGetterDef());
781:       assertFalse(node0.isNumber());
782:       assertFalse(node0.isFunction());
783:       assertFalse(node0.isScript());
784:       assertFalse(node0.isRegExp());
785:       assertFalse(node0.isTry());
786:       assertFalse(node0.isFor());
787:       assertFalse(node0.hasMoreThanOneChild());
788:       assertFalse(node0.isCatch());
789:       assertFalse(node0.isWith());
790:       assertFalse(node0.isIn());
791:       assertFalse(node0.isInstanceOf());
792:       assertFalse(node0.isNE());
793:       assertEquals((-1), node0.getLineno());
794:       assertFalse(node0.isIf());
795:       assertFalse(node0.isVar());
796:       assertFalse(node0.isCall());
797:       assertFalse(node0.isAdd());
798:       assertFalse(node0.isSetterDef());
799:       assertFalse(node0.isNew());
800:       assertFalse(node0.isDo());
801:       assertFalse(node0.isBlock());
802:       assertFalse(node0.isWhile());
803:       assertEquals(0, node0.getChildCount());
804:       assertFalse(node0.isContinue());
805:       assertEquals((-1), node0.getSourcePosition());
806:       assertFalse(node0.isDebugger());
807:       assertFalse(node0.isLabelName());
808:       assertFalse(node0.isStringKey());
809:       assertFalse(node0.isParamList());
810:       assertFalse(node0.isGetElem());
811:       assertFalse(node0.isArrayLit());
812:       assertFalse(node0.isAssign());
813:       assertFalse(node0.isEmpty());
814:       assertFalse(node0.isTypeOf());
815:       assertFalse(node0.hasChildren());
816:       assertFalse(node0.isDec());
817:       assertFalse(node0.isLabel());
818:       assertFalse(node0.isAssignAdd());
819:       assertFalse(node0.isReturn());
820:       assertFalse(node0.isDefaultCase());
821:       assertEquals((-598), node0.getType());
822:       assertFalse(node0.isOr());
823:       assertFalse(node0.isNull());
824:       assertFalse(node0.isExprResult());
825:       assertFalse(node0.isVoid());
826:       assertFalse(node0.isTrue());
827:       assertFalse(node0.isBreak());
828:       assertFalse(node0.isName());
829:       assertFalse(node0.isDelProp());
830:       assertEquals(48, Node.DIRECTIVES);
831:       assertEquals(8, Node.FLAG_NO_THROWS);
832:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
833:       assertEquals(4095, Node.COLUMN_MASK);
834:       assertEquals(55, Node.INFERRED_FUNCTION);
835:       assertEquals(39, Node.EMPTY_BLOCK);
836:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
837:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
838:       assertEquals(50, Node.FREE_CALL);
839:       assertEquals(43, Node.IS_CONSTANT_NAME);
840:       assertEquals(36, Node.QUOTED_PROP);
841:       assertEquals(57, Node.REFLECTED_OBJECT);
842:       assertEquals(52, Node.LENGTH);
843:       assertEquals(15, Node.NO_SIDE_EFFECTS);
844:       assertEquals(40, Node.ORIGINALNAME_PROP);
845:       assertEquals(53, Node.INPUT_ID);
846:       assertEquals(30, Node.VAR_ARGS_NAME);
847:       assertEquals(57, Node.LAST_PROP);
848:       assertEquals(47, Node.IS_DISPATCHER);
849:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
850:       assertEquals(37, Node.OPT_ARG_NAME);
851:       assertEquals(2, Node.POST_FLAG);
852:       assertEquals(32, Node.INCRDECR_PROP);
853:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
854:       assertEquals(29, Node.JSDOC_INFO_PROP);
855:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
856:       assertEquals(49, Node.DIRECT_EVAL);
857:       assertEquals(56, Node.CHANGE_TIME);
858:       assertEquals(51, Node.STATIC_SOURCE_FILE);
859:       assertEquals(46, Node.IS_NAMESPACE);
860:       assertEquals(54, Node.SLASH_V);
861:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
862:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
863:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
864:       assertEquals(1, Node.DECR_FLAG);
865:       assertEquals(12, Node.COLUMN_BITS);
866:       
867:       JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
868:       assertNull(jSDocInfo0);
869:       assertFalse(node0.isHook());
870:       assertFalse(node0.isFalse());
871:       assertFalse(node0.isComma());
872:       assertFalse(node0.isInc());
873:       assertFalse(node0.isThis());
874:       assertFalse(node0.isGetProp());
875:       assertFalse(node0.isThrow());
876:       assertFalse(node0.isObjectLit());
877:       assertFalse(node0.isCase());
878:       assertFalse(node0.isNot());
879:       assertFalse(node0.isString());
880:       assertFalse(node0.isSwitch());
881:       assertEquals((-1), node0.getCharno());
882:       assertFalse(node0.isAnd());
883:       assertFalse(node0.isCast());
884:       assertFalse(node0.hasOneChild());
885:       assertFalse(node0.isGetterDef());
886:       assertFalse(node0.isNumber());
887:       assertFalse(node0.isFunction());
888:       assertFalse(node0.isScript());
889:       assertFalse(node0.isRegExp());
890:       assertFalse(node0.isTry());
891:       assertFalse(node0.isFor());
892:       assertFalse(node0.hasMoreThanOneChild());
893:       assertFalse(node0.isCatch());
894:       assertFalse(node0.isWith());
895:       assertFalse(node0.isIn());
896:       assertFalse(node0.isInstanceOf());
897:       assertFalse(node0.isNE());
898:       assertEquals((-1), node0.getLineno());
899:       assertFalse(node0.isIf());
900:       assertFalse(node0.isVar());
901:       assertFalse(node0.isCall());
902:       assertFalse(node0.isAdd());
903:       assertFalse(node0.isSetterDef());
904:       assertFalse(node0.isNew());
905:       assertFalse(node0.isDo());
906:       assertFalse(node0.isBlock());
907:       assertFalse(node0.isWhile());
908:       assertEquals(0, node0.getChildCount());
909:       assertFalse(node0.isContinue());
910:       assertEquals((-1), node0.getSourcePosition());
911:       assertFalse(node0.isDebugger());
912:       assertFalse(node0.isLabelName());
913:       assertFalse(node0.isStringKey());
914:       assertFalse(node0.isParamList());
915:       assertFalse(node0.isGetElem());
916:       assertFalse(node0.isArrayLit());
917:       assertFalse(node0.isAssign());
918:       assertFalse(node0.isEmpty());
919:       assertFalse(node0.isTypeOf());
920:       assertFalse(node0.hasChildren());
921:       assertFalse(node0.isDec());
922:       assertFalse(node0.isLabel());
923:       assertFalse(node0.isAssignAdd());
924:       assertFalse(node0.isReturn());
925:       assertFalse(node0.isDefaultCase());
926:       assertEquals((-598), node0.getType());
927:       assertFalse(node0.isOr());
928:       assertFalse(node0.isNull());
929:       assertFalse(node0.isExprResult());
930:       assertFalse(node0.isVoid());
931:       assertFalse(node0.isTrue());
932:       assertFalse(node0.isBreak());
933:       assertFalse(node0.isName());
934:       assertFalse(node0.isDelProp());
935:       assertEquals(48, Node.DIRECTIVES);
936:       assertEquals(8, Node.FLAG_NO_THROWS);
937:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
938:       assertEquals(4095, Node.COLUMN_MASK);
939:       assertEquals(55, Node.INFERRED_FUNCTION);
940:       assertEquals(39, Node.EMPTY_BLOCK);
941:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
942:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
943:       assertEquals(50, Node.FREE_CALL);
944:       assertEquals(43, Node.IS_CONSTANT_NAME);
945:       assertEquals(36, Node.QUOTED_PROP);
946:       assertEquals(57, Node.REFLECTED_OBJECT);
947:       assertEquals(52, Node.LENGTH);
948:       assertEquals(15, Node.NO_SIDE_EFFECTS);
949:       assertEquals(40, Node.ORIGINALNAME_PROP);
950:       assertEquals(53, Node.INPUT_ID);
951:       assertEquals(30, Node.VAR_ARGS_NAME);
952:       assertEquals(57, Node.LAST_PROP);
953:       assertEquals(47, Node.IS_DISPATCHER);
954:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
955:       assertEquals(37, Node.OPT_ARG_NAME);
956:       assertEquals(2, Node.POST_FLAG);
957:       assertEquals(32, Node.INCRDECR_PROP);
958:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
959:       assertEquals(29, Node.JSDOC_INFO_PROP);
960:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
961:       assertEquals(49, Node.DIRECT_EVAL);
962:       assertEquals(56, Node.CHANGE_TIME);
963:       assertEquals(51, Node.STATIC_SOURCE_FILE);
964:       assertEquals(46, Node.IS_NAMESPACE);
965:       assertEquals(54, Node.SLASH_V);
966:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
967:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
968:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
969:       assertEquals(1, Node.DECR_FLAG);
970:       assertEquals(12, Node.COLUMN_BITS);
971:       
972:       Node node1 = new Node(36, node0, 108, 0);
973:       assertNotNull(node1);
974:       assertFalse(node1.equals((Object)node0));
975:       assertFalse(node0.isHook());
976:       assertFalse(node0.isFalse());
977:       assertFalse(node0.isComma());
978:       assertFalse(node0.isInc());
979:       assertFalse(node0.isThis());
980:       assertFalse(node0.isGetProp());
981:       assertFalse(node0.isThrow());
982:       assertFalse(node0.isObjectLit());
983:       assertFalse(node0.isCase());
984:       assertFalse(node0.isNot());
985:       assertFalse(node0.isString());
986:       assertFalse(node0.isSwitch());
987:       assertEquals((-1), node0.getCharno());
988:       assertFalse(node0.isAnd());
989:       assertFalse(node0.isCast());
990:       assertFalse(node0.hasOneChild());
991:       assertFalse(node0.isGetterDef());
992:       assertFalse(node0.isNumber());
993:       assertFalse(node0.isFunction());
994:       assertFalse(node0.isScript());
995:       assertFalse(node0.isRegExp());
996:       assertFalse(node0.isTry());
997:       assertFalse(node0.isFor());
998:       assertFalse(node0.hasMoreThanOneChild());
999:       assertFalse(node0.isCatch());
1000:       assertFalse(node0.isWith());
1001:       assertFalse(node0.isIn());
1002:       assertFalse(node0.isInstanceOf());
1003:       assertFalse(node0.isNE());
1004:       assertEquals((-1), node0.getLineno());
1005:       assertFalse(node0.isIf());
1006:       assertFalse(node0.isVar());
1007:       assertFalse(node0.isCall());
1008:       assertFalse(node0.isAdd());
1009:       assertFalse(node0.isSetterDef());
1010:       assertFalse(node0.isNew());
1011:       assertFalse(node0.isDo());
1012:       assertFalse(node0.isBlock());
1013:       assertFalse(node0.isWhile());
1014:       assertEquals(0, node0.getChildCount());
1015:       assertFalse(node0.isContinue());
1016:       assertEquals((-1), node0.getSourcePosition());
1017:       assertFalse(node0.isDebugger());
1018:       assertFalse(node0.isLabelName());
1019:       assertFalse(node0.isStringKey());
1020:       assertFalse(node0.isParamList());
1021:       assertFalse(node0.isGetElem());
1022:       assertFalse(node0.isArrayLit());
1023:       assertFalse(node0.isAssign());
1024:       assertFalse(node0.isEmpty());
1025:       assertFalse(node0.isTypeOf());
1026:       assertFalse(node0.hasChildren());
1027:       assertFalse(node0.isDec());
1028:       assertFalse(node0.isLabel());
1029:       assertFalse(node0.isAssignAdd());
1030:       assertFalse(node0.isReturn());
1031:       assertFalse(node0.isDefaultCase());
1032:       assertEquals((-598), node0.getType());
1033:       assertFalse(node0.isOr());
1034:       assertFalse(node0.isNull());
1035:       assertFalse(node0.isExprResult());
1036:       assertFalse(node0.isVoid());
1037:       assertFalse(node0.isTrue());
1038:       assertFalse(node0.isBreak());
1039:       assertFalse(node0.isName());
1040:       assertFalse(node0.isDelProp());
1041:       assertTrue(node1.hasChildren());
1042:       assertEquals(1, node1.getChildCount());
1043:       assertFalse(node1.isGetterDef());
1044:       assertFalse(node1.isIn());
1045:       assertFalse(node1.isEmpty());
1046:       assertFalse(node1.isCase());
1047:       assertFalse(node1.isFor());
1048:       assertEquals(442368, node1.getSourcePosition());
1049:       assertTrue(node1.hasOneChild());
1050:       assertEquals(108, node1.getLineno());
1051:       assertFalse(node1.isTrue());
1052:       assertFalse(node1.isInc());
1053:       assertFalse(node1.isHook());
1054:       assertFalse(node1.isRegExp());
1055:       assertFalse(node1.isBreak());
1056:       assertFalse(node1.isNE());
1057:       assertFalse(node1.isVoid());
1058:       assertFalse(node1.isDelProp());
1059:       assertFalse(node1.isIf());
1060:       assertFalse(node1.isGetProp());
1061:       assertFalse(node1.isSetterDef());
1062:       assertFalse(node1.isComma());
1063:       assertFalse(node1.isObjectLit());
1064:       assertFalse(node1.isThrow());
1065:       assertFalse(node1.isDebugger());
1066:       assertFalse(node1.isCast());
1067:       assertFalse(node1.isString());
1068:       assertFalse(node1.isFunction());
1069:       assertFalse(node1.isFalse());
1070:       assertEquals(36, node1.getType());
1071:       assertFalse(node1.isNot());
1072:       assertFalse(node1.isAnd());
1073:       assertFalse(node1.isAssignAdd());
1074:       assertFalse(node1.isOr());
1075:       assertFalse(node1.isLabel());
1076:       assertFalse(node1.isReturn());
1077:       assertFalse(node1.isTypeOf());
1078:       assertFalse(node1.isDec());
1079:       assertFalse(node1.isContinue());
1080:       assertFalse(node1.isNumber());
1081:       assertFalse(node1.hasMoreThanOneChild());
1082:       assertFalse(node1.isDo());
1083:       assertFalse(node1.isAssign());
1084:       assertFalse(node1.isWhile());
1085:       assertFalse(node1.isAdd());
1086:       assertFalse(node1.isNew());
1087:       assertFalse(node1.isExprResult());
1088:       assertEquals(0, node1.getCharno());
1089:       assertFalse(node1.isBlock());
1090:       assertFalse(node1.isWith());
1091:       assertFalse(node1.isName());
1092:       assertFalse(node1.isCall());
1093:       assertFalse(node1.isGetElem());
1094:       assertFalse(node1.isNull());
1095:       assertFalse(node1.isThis());
1096:       assertFalse(node1.isCatch());
1097:       assertFalse(node1.isInstanceOf());
1098:       assertFalse(node1.isVar());
1099:       assertFalse(node1.isDefaultCase());
1100:       assertFalse(node1.isTry());
1101:       assertFalse(node1.isScript());
1102:       assertFalse(node1.isLabelName());
1103:       assertFalse(node1.isStringKey());
1104:       assertFalse(node1.isArrayLit());
1105:       assertFalse(node1.isParamList());
1106:       assertFalse(node1.isSwitch());
1107:       assertEquals(48, Node.DIRECTIVES);
1108:       assertEquals(8, Node.FLAG_NO_THROWS);
1109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1110:       assertEquals(4095, Node.COLUMN_MASK);
1111:       assertEquals(55, Node.INFERRED_FUNCTION);
1112:       assertEquals(39, Node.EMPTY_BLOCK);
1113:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1115:       assertEquals(50, Node.FREE_CALL);
1116:       assertEquals(43, Node.IS_CONSTANT_NAME);
1117:       assertEquals(36, Node.QUOTED_PROP);
1118:       assertEquals(57, Node.REFLECTED_OBJECT);
1119:       assertEquals(52, Node.LENGTH);
1120:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1121:       assertEquals(40, Node.ORIGINALNAME_PROP);
1122:       assertEquals(53, Node.INPUT_ID);
1123:       assertEquals(30, Node.VAR_ARGS_NAME);
1124:       assertEquals(57, Node.LAST_PROP);
1125:       assertEquals(47, Node.IS_DISPATCHER);
1126:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1127:       assertEquals(37, Node.OPT_ARG_NAME);
1128:       assertEquals(2, Node.POST_FLAG);
1129:       assertEquals(32, Node.INCRDECR_PROP);
1130:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1131:       assertEquals(29, Node.JSDOC_INFO_PROP);
1132:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1133:       assertEquals(49, Node.DIRECT_EVAL);
1134:       assertEquals(56, Node.CHANGE_TIME);
1135:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1136:       assertEquals(46, Node.IS_NAMESPACE);
1137:       assertEquals(54, Node.SLASH_V);
1138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1139:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1140:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1141:       assertEquals(1, Node.DECR_FLAG);
1142:       assertEquals(12, Node.COLUMN_BITS);
1143:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1144:       assertEquals(57, Node.LAST_PROP);
1145:       assertEquals(49, Node.DIRECT_EVAL);
1146:       assertEquals(30, Node.VAR_ARGS_NAME);
1147:       assertEquals(1, Node.DECR_FLAG);
1148:       assertEquals(46, Node.IS_NAMESPACE);
1149:       assertEquals(52, Node.LENGTH);
1150:       assertEquals(57, Node.REFLECTED_OBJECT);
1151:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1152:       assertEquals(54, Node.SLASH_V);
1153:       assertEquals(56, Node.CHANGE_TIME);
1154:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1156:       assertEquals(50, Node.FREE_CALL);
1157:       assertEquals(37, Node.OPT_ARG_NAME);
1158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1160:       assertEquals(32, Node.INCRDECR_PROP);
1161:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1162:       assertEquals(12, Node.COLUMN_BITS);
1163:       assertEquals(36, Node.QUOTED_PROP);
1164:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1165:       assertEquals(4095, Node.COLUMN_MASK);
1166:       assertEquals(53, Node.INPUT_ID);
1167:       assertEquals(55, Node.INFERRED_FUNCTION);
1168:       assertEquals(48, Node.DIRECTIVES);
1169:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1170:       assertEquals(43, Node.IS_CONSTANT_NAME);
1171:       assertEquals(47, Node.IS_DISPATCHER);
1172:       assertEquals(2, Node.POST_FLAG);
1173:       assertEquals(40, Node.ORIGINALNAME_PROP);
1174:       assertEquals(8, Node.FLAG_NO_THROWS);
1175:       assertEquals(39, Node.EMPTY_BLOCK);
1176:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1177:       assertEquals(29, Node.JSDOC_INFO_PROP);
1178:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1179:       
1180:       Node node2 = node1.useSourceInfoFromForTree(node0);
1181:       assertNotNull(node2);
1182:       assertFalse(node0.equals((Object)node1));
1183:       assertFalse(node1.equals((Object)node0));
1184:       assertFalse(node2.equals((Object)node0));
1185:       assertFalse(node0.isHook());
1186:       assertFalse(node0.isFalse());
1187:       assertFalse(node0.isComma());
1188:       assertFalse(node0.isInc());
1189:       assertFalse(node0.isThis());
1190:       assertFalse(node0.isGetProp());
1191:       assertFalse(node0.isThrow());
1192:       assertFalse(node0.isObjectLit());
1193:       assertFalse(node0.isCase());
1194:       assertFalse(node0.isNot());
1195:       assertFalse(node0.isString());
1196:       assertFalse(node0.isSwitch());
1197:       assertEquals((-1), node0.getCharno());
1198:       assertFalse(node0.isAnd());
1199:       assertFalse(node0.isCast());
1200:       assertFalse(node0.hasOneChild());
1201:       assertFalse(node0.isGetterDef());
1202:       assertFalse(node0.isNumber());
1203:       assertFalse(node0.isFunction());
1204:       assertFalse(node0.isScript());
1205:       assertFalse(node0.isRegExp());
1206:       assertFalse(node0.isTry());
1207:       assertFalse(node0.isFor());
1208:       assertFalse(node0.hasMoreThanOneChild());
1209:       assertFalse(node0.isCatch());
1210:       assertFalse(node0.isWith());
1211:       assertFalse(node0.isIn());
1212:       assertFalse(node0.isInstanceOf());
1213:       assertFalse(node0.isNE());
1214:       assertEquals((-1), node0.getLineno());
1215:       assertFalse(node0.isIf());
1216:       assertFalse(node0.isVar());
1217:       assertFalse(node0.isCall());
1218:       assertFalse(node0.isAdd());
1219:       assertFalse(node0.isSetterDef());
1220:       assertFalse(node0.isNew());
1221:       assertFalse(node0.isDo());
1222:       assertFalse(node0.isBlock());
1223:       assertFalse(node0.isWhile());
1224:       assertEquals(0, node0.getChildCount());
1225:       assertFalse(node0.isContinue());
1226:       assertEquals((-1), node0.getSourcePosition());
1227:       assertFalse(node0.isDebugger());
1228:       assertFalse(node0.isLabelName());
1229:       assertFalse(node0.isStringKey());
1230:       assertFalse(node0.isParamList());
1231:       assertFalse(node0.isGetElem());
1232:       assertFalse(node0.isArrayLit());
1233:       assertFalse(node0.isAssign());
1234:       assertFalse(node0.isEmpty());
1235:       assertFalse(node0.isTypeOf());
1236:       assertFalse(node0.hasChildren());
1237:       assertFalse(node0.isDec());
1238:       assertFalse(node0.isLabel());
1239:       assertFalse(node0.isAssignAdd());
1240:       assertFalse(node0.isReturn());
1241:       assertFalse(node0.isDefaultCase());
1242:       assertEquals((-598), node0.getType());
1243:       assertFalse(node0.isOr());
1244:       assertFalse(node0.isNull());
1245:       assertFalse(node0.isExprResult());
1246:       assertFalse(node0.isVoid());
1247:       assertFalse(node0.isTrue());
1248:       assertFalse(node0.isBreak());
1249:       assertFalse(node0.isName());
1250:       assertFalse(node0.isDelProp());
1251:       assertTrue(node1.hasChildren());
1252:       assertEquals(1, node1.getChildCount());
1253:       assertFalse(node1.isGetterDef());
1254:       assertFalse(node1.isIn());
1255:       assertFalse(node1.isEmpty());
1256:       assertFalse(node1.isCase());
1257:       assertFalse(node1.isFor());
1258:       assertTrue(node1.hasOneChild());
1259:       assertFalse(node1.isTrue());
1260:       assertFalse(node1.isInc());
1261:       assertFalse(node1.isHook());
1262:       assertFalse(node1.isRegExp());
1263:       assertFalse(node1.isBreak());
1264:       assertFalse(node1.isNE());
1265:       assertFalse(node1.isVoid());
1266:       assertFalse(node1.isDelProp());
1267:       assertFalse(node1.isIf());
1268:       assertFalse(node1.isGetProp());
1269:       assertFalse(node1.isSetterDef());
1270:       assertFalse(node1.isComma());
1271:       assertFalse(node1.isObjectLit());
1272:       assertFalse(node1.isThrow());
1273:       assertFalse(node1.isDebugger());
1274:       assertFalse(node1.isCast());
1275:       assertFalse(node1.isString());
1276:       assertFalse(node1.isFunction());
1277:       assertFalse(node1.isFalse());
1278:       assertEquals(36, node1.getType());
1279:       assertFalse(node1.isNot());
1280:       assertFalse(node1.isAnd());
1281:       assertFalse(node1.isAssignAdd());
1282:       assertFalse(node1.isOr());
1283:       assertFalse(node1.isLabel());
1284:       assertEquals((-1), node1.getLineno());
1285:       assertFalse(node1.isReturn());
1286:       assertFalse(node1.isTypeOf());
1287:       assertEquals((-1), node1.getSourcePosition());
1288:       assertFalse(node1.isDec());
1289:       assertFalse(node1.isContinue());
1290:       assertFalse(node1.isNumber());
1291:       assertFalse(node1.hasMoreThanOneChild());
1292:       assertFalse(node1.isDo());
1293:       assertFalse(node1.isAssign());
1294:       assertFalse(node1.isWhile());
1295:       assertFalse(node1.isAdd());
1296:       assertFalse(node1.isNew());
1297:       assertFalse(node1.isExprResult());
1298:       assertFalse(node1.isBlock());
1299:       assertFalse(node1.isWith());
1300:       assertFalse(node1.isName());
1301:       assertFalse(node1.isCall());
1302:       assertFalse(node1.isGetElem());
1303:       assertFalse(node1.isNull());
1304:       assertFalse(node1.isThis());
1305:       assertFalse(node1.isCatch());
1306:       assertFalse(node1.isInstanceOf());
1307:       assertFalse(node1.isVar());
1308:       assertFalse(node1.isDefaultCase());
1309:       assertFalse(node1.isTry());
1310:       assertEquals((-1), node1.getCharno());
1311:       assertFalse(node1.isScript());
1312:       assertFalse(node1.isLabelName());
1313:       assertFalse(node1.isStringKey());
1314:       assertFalse(node1.isArrayLit());
1315:       assertFalse(node1.isParamList());
1316:       assertFalse(node1.isSwitch());
1317:       assertFalse(node2.isHook());
1318:       assertEquals((-1), node2.getCharno());
1319:       assertFalse(node2.isThrow());
1320:       assertFalse(node2.isSwitch());
1321:       assertFalse(node2.isBreak());
1322:       assertFalse(node2.isComma());
1323:       assertFalse(node2.isFalse());
1324:       assertEquals(1, node2.getChildCount());
1325:       assertFalse(node2.isAnd());
1326:       assertFalse(node2.isThis());
1327:       assertFalse(node2.isGetterDef());
1328:       assertFalse(node2.isNot());
1329:       assertFalse(node2.isCase());
1330:       assertFalse(node2.isGetProp());
1331:       assertFalse(node2.isObjectLit());
1332:       assertFalse(node2.isScript());
1333:       assertFalse(node2.isString());
1334:       assertFalse(node2.isArrayLit());
1335:       assertFalse(node2.isVoid());
1336:       assertFalse(node2.isTrue());
1337:       assertFalse(node2.isDelProp());
1338:       assertTrue(node2.hasOneChild());
1339:       assertFalse(node2.isLabelName());
1340:       assertFalse(node2.isTypeOf());
1341:       assertFalse(node2.isAssign());
1342:       assertFalse(node2.isDec());
1343:       assertFalse(node2.isExprResult());
1344:       assertFalse(node2.isGetElem());
1345:       assertFalse(node2.isOr());
1346:       assertFalse(node2.isLabel());
1347:       assertFalse(node2.isAssignAdd());
1348:       assertFalse(node2.isDefaultCase());
1349:       assertFalse(node2.isNull());
1350:       assertFalse(node2.isDo());
1351:       assertFalse(node2.isAdd());
1352:       assertFalse(node2.isEmpty());
1353:       assertFalse(node2.isNew());
1354:       assertFalse(node2.isName());
1355:       assertFalse(node2.isBlock());
1356:       assertFalse(node2.isVar());
1357:       assertFalse(node2.isStringKey());
1358:       assertFalse(node2.isContinue());
1359:       assertFalse(node2.isCall());
1360:       assertFalse(node2.hasMoreThanOneChild());
1361:       assertFalse(node2.isReturn());
1362:       assertFalse(node2.isWhile());
1363:       assertFalse(node2.isParamList());
1364:       assertFalse(node2.isNumber());
1365:       assertEquals((-1), node2.getSourcePosition());
1366:       assertFalse(node2.isTry());
1367:       assertFalse(node2.isDebugger());
1368:       assertFalse(node2.isFor());
1369:       assertFalse(node2.isIf());
1370:       assertEquals(36, node2.getType());
1371:       assertFalse(node2.isWith());
1372:       assertFalse(node2.isRegExp());
1373:       assertFalse(node2.isFunction());
1374:       assertFalse(node2.isCast());
1375:       assertTrue(node2.hasChildren());
1376:       assertFalse(node2.isCatch());
1377:       assertFalse(node2.isInstanceOf());
1378:       assertFalse(node2.isIn());
1379:       assertEquals((-1), node2.getLineno());
1380:       assertFalse(node2.isNE());
1381:       assertFalse(node2.isInc());
1382:       assertFalse(node2.isSetterDef());
1383:       assertSame(node1, node2);
1384:       assertSame(node2, node1);
1385:       assertEquals(48, Node.DIRECTIVES);
1386:       assertEquals(8, Node.FLAG_NO_THROWS);
1387:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1388:       assertEquals(4095, Node.COLUMN_MASK);
1389:       assertEquals(55, Node.INFERRED_FUNCTION);
1390:       assertEquals(39, Node.EMPTY_BLOCK);
1391:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1392:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1393:       assertEquals(50, Node.FREE_CALL);
1394:       assertEquals(43, Node.IS_CONSTANT_NAME);
1395:       assertEquals(36, Node.QUOTED_PROP);
1396:       assertEquals(57, Node.REFLECTED_OBJECT);
1397:       assertEquals(52, Node.LENGTH);
1398:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1399:       assertEquals(40, Node.ORIGINALNAME_PROP);
1400:       assertEquals(53, Node.INPUT_ID);
1401:       assertEquals(30, Node.VAR_ARGS_NAME);
1402:       assertEquals(57, Node.LAST_PROP);
1403:       assertEquals(47, Node.IS_DISPATCHER);
1404:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1405:       assertEquals(37, Node.OPT_ARG_NAME);
1406:       assertEquals(2, Node.POST_FLAG);
1407:       assertEquals(32, Node.INCRDECR_PROP);
1408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1409:       assertEquals(29, Node.JSDOC_INFO_PROP);
1410:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1411:       assertEquals(49, Node.DIRECT_EVAL);
1412:       assertEquals(56, Node.CHANGE_TIME);
1413:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1414:       assertEquals(46, Node.IS_NAMESPACE);
1415:       assertEquals(54, Node.SLASH_V);
1416:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1417:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1418:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1419:       assertEquals(1, Node.DECR_FLAG);
1420:       assertEquals(12, Node.COLUMN_BITS);
1421:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1422:       assertEquals(57, Node.LAST_PROP);
1423:       assertEquals(49, Node.DIRECT_EVAL);
1424:       assertEquals(30, Node.VAR_ARGS_NAME);
1425:       assertEquals(1, Node.DECR_FLAG);
1426:       assertEquals(46, Node.IS_NAMESPACE);
1427:       assertEquals(52, Node.LENGTH);
1428:       assertEquals(57, Node.REFLECTED_OBJECT);
1429:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1430:       assertEquals(54, Node.SLASH_V);
1431:       assertEquals(56, Node.CHANGE_TIME);
1432:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1433:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1434:       assertEquals(50, Node.FREE_CALL);
1435:       assertEquals(37, Node.OPT_ARG_NAME);
1436:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1437:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1438:       assertEquals(32, Node.INCRDECR_PROP);
1439:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1440:       assertEquals(12, Node.COLUMN_BITS);
1441:       assertEquals(36, Node.QUOTED_PROP);
1442:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1443:       assertEquals(4095, Node.COLUMN_MASK);
1444:       assertEquals(53, Node.INPUT_ID);
1445:       assertEquals(55, Node.INFERRED_FUNCTION);
1446:       assertEquals(48, Node.DIRECTIVES);
1447:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1448:       assertEquals(43, Node.IS_CONSTANT_NAME);
1449:       assertEquals(47, Node.IS_DISPATCHER);
1450:       assertEquals(2, Node.POST_FLAG);
1451:       assertEquals(40, Node.ORIGINALNAME_PROP);
1452:       assertEquals(8, Node.FLAG_NO_THROWS);
1453:       assertEquals(39, Node.EMPTY_BLOCK);
1454:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1455:       assertEquals(29, Node.JSDOC_INFO_PROP);
1456:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1458:       assertEquals(48, Node.DIRECTIVES);
1459:       assertEquals(8, Node.FLAG_NO_THROWS);
1460:       assertEquals(50, Node.FREE_CALL);
1461:       assertEquals(55, Node.INFERRED_FUNCTION);
1462:       assertEquals(52, Node.LENGTH);
1463:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1464:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1465:       assertEquals(39, Node.EMPTY_BLOCK);
1466:       assertEquals(43, Node.IS_CONSTANT_NAME);
1467:       assertEquals(57, Node.LAST_PROP);
1468:       assertEquals(30, Node.VAR_ARGS_NAME);
1469:       assertEquals(54, Node.SLASH_V);
1470:       assertEquals(40, Node.ORIGINALNAME_PROP);
1471:       assertEquals(2, Node.POST_FLAG);
1472:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1473:       assertEquals(56, Node.CHANGE_TIME);
1474:       assertEquals(46, Node.IS_NAMESPACE);
1475:       assertEquals(47, Node.IS_DISPATCHER);
1476:       assertEquals(12, Node.COLUMN_BITS);
1477:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1478:       assertEquals(32, Node.INCRDECR_PROP);
1479:       assertEquals(29, Node.JSDOC_INFO_PROP);
1480:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1481:       assertEquals(1, Node.DECR_FLAG);
1482:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1483:       assertEquals(53, Node.INPUT_ID);
1484:       assertEquals(36, Node.QUOTED_PROP);
1485:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1486:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1487:       assertEquals(57, Node.REFLECTED_OBJECT);
1488:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1489:       assertEquals(4095, Node.COLUMN_MASK);
1490:       assertEquals(49, Node.DIRECT_EVAL);
1491:       assertEquals(37, Node.OPT_ARG_NAME);
1492:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1493:       
1494:       Node node3 = Node.newNumber((double) 12);
1495:       assertNotNull(node3);
1496:       assertFalse(node3.equals((Object)node1));
1497:       assertFalse(node3.equals((Object)node2));
1498:       assertFalse(node3.equals((Object)node0));
1499:       assertFalse(node3.isAnd());
1500:       assertFalse(node3.isObjectLit());
1501:       assertFalse(node3.isNot());
1502:       assertFalse(node3.isWith());
1503:       assertFalse(node3.isGetProp());
1504:       assertFalse(node3.hasOneChild());
1505:       assertFalse(node3.isScript());
1506:       assertFalse(node3.isAssign());
1507:       assertFalse(node3.hasChildren());
1508:       assertFalse(node3.isDec());
1509:       assertFalse(node3.isThis());
1510:       assertFalse(node3.isHook());
1511:       assertFalse(node3.isComma());
1512:       assertFalse(node3.isTypeOf());
1513:       assertFalse(node3.isBreak());
1514:       assertEquals((-1), node3.getLineno());
1515:       assertFalse(node3.isInstanceOf());
1516:       assertFalse(node3.isExprResult());
1517:       assertFalse(node3.isGetElem());
1518:       assertFalse(node3.isContinue());
1519:       assertFalse(node3.isWhile());
1520:       assertFalse(node3.isReturn());
1521:       assertFalse(node3.isIn());
1522:       assertTrue(node3.isNumber());
1523:       assertFalse(node3.isString());
1524:       assertFalse(node3.isInc());
1525:       assertFalse(node3.isThrow());
1526:       assertFalse(node3.isFalse());
1527:       assertEquals((-1), node3.getSourcePosition());
1528:       assertFalse(node3.isFunction());
1529:       assertFalse(node3.isCast());
1530:       assertFalse(node3.isCatch());
1531:       assertEquals(0, node3.getChildCount());
1532:       assertFalse(node3.isDefaultCase());
1533:       assertFalse(node3.isTrue());
1534:       assertFalse(node3.isDebugger());
1535:       assertFalse(node3.isTry());
1536:       assertFalse(node3.isSetterDef());
1537:       assertFalse(node3.isName());
1538:       assertFalse(node3.isIf());
1539:       assertFalse(node3.isNE());
1540:       assertFalse(node3.isFor());
1541:       assertFalse(node3.isNull());
1542:       assertFalse(node3.isBlock());
1543:       assertFalse(node3.isVoid());
1544:       assertFalse(node3.isRegExp());
1545:       assertFalse(node3.isDelProp());
1546:       assertFalse(node3.isCall());
1547:       assertFalse(node3.isCase());
1548:       assertFalse(node3.isDo());
1549:       assertFalse(node3.hasMoreThanOneChild());
1550:       assertFalse(node3.isLabel());
1551:       assertEquals(39, node3.getType());
1552:       assertEquals((-1), node3.getCharno());
1553:       assertFalse(node3.isNew());
1554:       assertFalse(node3.isAssignAdd());
1555:       assertFalse(node3.isOr());
1556:       assertFalse(node3.isAdd());
1557:       assertFalse(node3.isEmpty());
1558:       assertFalse(node3.isStringKey());
1559:       assertFalse(node3.isLabelName());
1560:       assertFalse(node3.isGetterDef());
1561:       assertFalse(node3.isVar());
1562:       assertFalse(node3.isParamList());
1563:       assertFalse(node3.isSwitch());
1564:       assertFalse(node3.isArrayLit());
1565:       assertEquals(53, Node.INPUT_ID);
1566:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1567:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1568:       assertEquals(36, Node.QUOTED_PROP);
1569:       assertEquals(43, Node.IS_CONSTANT_NAME);
1570:       assertEquals(56, Node.CHANGE_TIME);
1571:       assertEquals(37, Node.OPT_ARG_NAME);
1572:       assertEquals(46, Node.IS_NAMESPACE);
1573:       assertEquals(12, Node.COLUMN_BITS);
1574:       assertEquals(4095, Node.COLUMN_MASK);
1575:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1576:       assertEquals(50, Node.FREE_CALL);
1577:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1578:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1579:       assertEquals(32, Node.INCRDECR_PROP);
1580:       assertEquals(1, Node.DECR_FLAG);
1581:       assertEquals(52, Node.LENGTH);
1582:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1583:       assertEquals(54, Node.SLASH_V);
1584:       assertEquals(57, Node.REFLECTED_OBJECT);
1585:       assertEquals(30, Node.VAR_ARGS_NAME);
1586:       assertEquals(49, Node.DIRECT_EVAL);
1587:       assertEquals(40, Node.ORIGINALNAME_PROP);
1588:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1589:       assertEquals(48, Node.DIRECTIVES);
1590:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1591:       assertEquals(2, Node.POST_FLAG);
1592:       assertEquals(8, Node.FLAG_NO_THROWS);
1593:       assertEquals(47, Node.IS_DISPATCHER);
1594:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1595:       assertEquals(29, Node.JSDOC_INFO_PROP);
1596:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1597:       assertEquals(57, Node.LAST_PROP);
1598:       assertEquals(55, Node.INFERRED_FUNCTION);
1599:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1600:       assertEquals(39, Node.EMPTY_BLOCK);
1601:       
1602:       node0.addChildrenToBack(node3);
1603:       assertFalse(node0.equals((Object)node1));
1604:       assertFalse(node0.equals((Object)node3));
1605:       assertFalse(node0.equals((Object)node2));
1606:       assertFalse(node3.equals((Object)node1));
1607:       assertFalse(node3.equals((Object)node2));
1608:       assertFalse(node3.equals((Object)node0));
1609:       assertFalse(node0.isHook());
1610:       assertFalse(node0.isFalse());
1611:       assertFalse(node0.isComma());
1612:       assertFalse(node0.isInc());
1613:       assertFalse(node0.isThis());
1614:       assertFalse(node0.isGetProp());
1615:       assertFalse(node0.isThrow());
1616:       assertFalse(node0.isObjectLit());
1617:       assertFalse(node0.isCase());
1618:       assertFalse(node0.isNot());
1619:       assertFalse(node0.isString());
1620:       assertFalse(node0.isSwitch());
1621:       assertEquals((-1), node0.getCharno());
1622:       assertFalse(node0.isAnd());
1623:       assertFalse(node0.isCast());
1624:       assertFalse(node0.isGetterDef());
1625:       assertFalse(node0.isNumber());
1626:       assertFalse(node0.isFunction());
1627:       assertFalse(node0.isScript());
1628:       assertFalse(node0.isRegExp());
1629:       assertFalse(node0.isTry());
1630:       assertFalse(node0.isFor());
1631:       assertFalse(node0.hasMoreThanOneChild());
1632:       assertFalse(node0.isCatch());
1633:       assertEquals(1, node0.getChildCount());
1634:       assertTrue(node0.hasChildren());
1635:       assertFalse(node0.isWith());
1636:       assertFalse(node0.isIn());
1637:       assertFalse(node0.isInstanceOf());
1638:       assertFalse(node0.isNE());
1639:       assertEquals((-1), node0.getLineno());
1640:       assertFalse(node0.isIf());
1641:       assertFalse(node0.isVar());
1642:       assertFalse(node0.isCall());
1643:       assertFalse(node0.isAdd());
1644:       assertFalse(node0.isSetterDef());
1645:       assertFalse(node0.isNew());
1646:       assertFalse(node0.isDo());
1647:       assertFalse(node0.isBlock());
1648:       assertFalse(node0.isWhile());
1649:       assertFalse(node0.isContinue());
1650:       assertEquals((-1), node0.getSourcePosition());
1651:       assertFalse(node0.isDebugger());
1652:       assertFalse(node0.isLabelName());
1653:       assertFalse(node0.isStringKey());
1654:       assertFalse(node0.isParamList());
1655:       assertFalse(node0.isGetElem());
1656:       assertFalse(node0.isArrayLit());
1657:       assertFalse(node0.isAssign());
1658:       assertFalse(node0.isEmpty());
1659:       assertFalse(node0.isTypeOf());
1660:       assertFalse(node0.isDec());
1661:       assertFalse(node0.isLabel());
1662:       assertFalse(node0.isAssignAdd());
1663:       assertFalse(node0.isReturn());
1664:       assertTrue(node0.hasOneChild());
1665:       assertFalse(node0.isDefaultCase());
1666:       assertEquals((-598), node0.getType());
1667:       assertFalse(node0.isOr());
1668:       assertFalse(node0.isNull());
1669:       assertFalse(node0.isExprResult());
1670:       assertFalse(node0.isVoid());
1671:       assertFalse(node0.isTrue());
1672:       assertFalse(node0.isBreak());
1673:       assertFalse(node0.isName());
1674:       assertFalse(node0.isDelProp());
1675:       assertFalse(node3.isAnd());
1676:       assertFalse(node3.isObjectLit());
1677:       assertFalse(node3.isNot());
1678:       assertFalse(node3.isWith());
1679:       assertFalse(node3.isGetProp());
1680:       assertFalse(node3.hasOneChild());
1681:       assertFalse(node3.isScript());
1682:       assertFalse(node3.isAssign());
1683:       assertFalse(node3.hasChildren());
1684:       assertFalse(node3.isDec());
1685:       assertFalse(node3.isThis());
1686:       assertFalse(node3.isHook());
1687:       assertFalse(node3.isComma());
1688:       assertFalse(node3.isTypeOf());
1689:       assertFalse(node3.isBreak());
1690:       assertEquals((-1), node3.getLineno());
1691:       assertFalse(node3.isInstanceOf());
1692:       assertFalse(node3.isExprResult());
1693:       assertFalse(node3.isGetElem());
1694:       assertFalse(node3.isContinue());
1695:       assertFalse(node3.isWhile());
1696:       assertFalse(node3.isReturn());
1697:       assertFalse(node3.isIn());
1698:       assertTrue(node3.isNumber());
1699:       assertFalse(node3.isString());
1700:       assertFalse(node3.isInc());
1701:       assertFalse(node3.isThrow());
1702:       assertFalse(node3.isFalse());
1703:       assertEquals((-1), node3.getSourcePosition());
1704:       assertFalse(node3.isFunction());
1705:       assertFalse(node3.isCast());
1706:       assertFalse(node3.isCatch());
1707:       assertEquals(0, node3.getChildCount());
1708:       assertFalse(node3.isDefaultCase());
1709:       assertFalse(node3.isTrue());
1710:       assertFalse(node3.isDebugger());
1711:       assertFalse(node3.isTry());
1712:       assertFalse(node3.isSetterDef());
1713:       assertFalse(node3.isName());
1714:       assertFalse(node3.isIf());
1715:       assertFalse(node3.isNE());
1716:       assertFalse(node3.isFor());
1717:       assertFalse(node3.isNull());
1718:       assertFalse(node3.isBlock());
1719:       assertFalse(node3.isVoid());
1720:       assertFalse(node3.isRegExp());
1721:       assertFalse(node3.isDelProp());
1722:       assertFalse(node3.isCall());
1723:       assertFalse(node3.isCase());
1724:       assertFalse(node3.isDo());
1725:       assertFalse(node3.hasMoreThanOneChild());
1726:       assertFalse(node3.isLabel());
1727:       assertEquals(39, node3.getType());
1728:       assertEquals((-1), node3.getCharno());
1729:       assertFalse(node3.isNew());
1730:       assertFalse(node3.isAssignAdd());
1731:       assertFalse(node3.isOr());
1732:       assertFalse(node3.isAdd());
1733:       assertFalse(node3.isEmpty());
1734:       assertFalse(node3.isStringKey());
1735:       assertFalse(node3.isLabelName());
1736:       assertFalse(node3.isGetterDef());
1737:       assertFalse(node3.isVar());
1738:       assertFalse(node3.isParamList());
1739:       assertFalse(node3.isSwitch());
1740:       assertFalse(node3.isArrayLit());
1741:       assertEquals(48, Node.DIRECTIVES);
1742:       assertEquals(8, Node.FLAG_NO_THROWS);
1743:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1744:       assertEquals(4095, Node.COLUMN_MASK);
1745:       assertEquals(55, Node.INFERRED_FUNCTION);
1746:       assertEquals(39, Node.EMPTY_BLOCK);
1747:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1748:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1749:       assertEquals(50, Node.FREE_CALL);
1750:       assertEquals(43, Node.IS_CONSTANT_NAME);
1751:       assertEquals(36, Node.QUOTED_PROP);
1752:       assertEquals(57, Node.REFLECTED_OBJECT);
1753:       assertEquals(52, Node.LENGTH);
1754:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1755:       assertEquals(40, Node.ORIGINALNAME_PROP);
1756:       assertEquals(53, Node.INPUT_ID);
1757:       assertEquals(30, Node.VAR_ARGS_NAME);
1758:       assertEquals(57, Node.LAST_PROP);
1759:       assertEquals(47, Node.IS_DISPATCHER);
1760:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1761:       assertEquals(37, Node.OPT_ARG_NAME);
1762:       assertEquals(2, Node.POST_FLAG);
1763:       assertEquals(32, Node.INCRDECR_PROP);
1764:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1765:       assertEquals(29, Node.JSDOC_INFO_PROP);
1766:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1767:       assertEquals(49, Node.DIRECT_EVAL);
1768:       assertEquals(56, Node.CHANGE_TIME);
1769:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1770:       assertEquals(46, Node.IS_NAMESPACE);
1771:       assertEquals(54, Node.SLASH_V);
1772:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1773:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1774:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1775:       assertEquals(1, Node.DECR_FLAG);
1776:       assertEquals(12, Node.COLUMN_BITS);
1777:       assertEquals(53, Node.INPUT_ID);
1778:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1779:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1780:       assertEquals(36, Node.QUOTED_PROP);
1781:       assertEquals(43, Node.IS_CONSTANT_NAME);
1782:       assertEquals(56, Node.CHANGE_TIME);
1783:       assertEquals(37, Node.OPT_ARG_NAME);
1784:       assertEquals(46, Node.IS_NAMESPACE);
1785:       assertEquals(12, Node.COLUMN_BITS);
1786:       assertEquals(4095, Node.COLUMN_MASK);
1787:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1788:       assertEquals(50, Node.FREE_CALL);
1789:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1790:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1791:       assertEquals(32, Node.INCRDECR_PROP);
1792:       assertEquals(1, Node.DECR_FLAG);
1793:       assertEquals(52, Node.LENGTH);
1794:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1795:       assertEquals(54, Node.SLASH_V);
1796:       assertEquals(57, Node.REFLECTED_OBJECT);
1797:       assertEquals(30, Node.VAR_ARGS_NAME);
1798:       assertEquals(49, Node.DIRECT_EVAL);
1799:       assertEquals(40, Node.ORIGINALNAME_PROP);
1800:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1801:       assertEquals(48, Node.DIRECTIVES);
1802:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1803:       assertEquals(2, Node.POST_FLAG);
1804:       assertEquals(8, Node.FLAG_NO_THROWS);
1805:       assertEquals(47, Node.IS_DISPATCHER);
1806:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1807:       assertEquals(29, Node.JSDOC_INFO_PROP);
1808:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1809:       assertEquals(57, Node.LAST_PROP);
1810:       assertEquals(55, Node.INFERRED_FUNCTION);
1811:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1812:       assertEquals(39, Node.EMPTY_BLOCK);
1813:       
1814:       node1.setWasEmptyNode(true);
1815:       assertFalse(node0.equals((Object)node1));
1816:       assertFalse(node0.equals((Object)node3));
1817:       assertFalse(node0.equals((Object)node2));
1818:       assertFalse(node1.equals((Object)node0));
1819:       assertFalse(node1.equals((Object)node3));
1820:       assertFalse(node0.isHook());
1821:       assertFalse(node0.isFalse());
1822:       assertFalse(node0.isComma());
1823:       assertFalse(node0.isInc());
1824:       assertFalse(node0.isThis());
1825:       assertFalse(node0.isGetProp());
1826:       assertFalse(node0.isThrow());
1827:       assertFalse(node0.isObjectLit());
1828:       assertFalse(node0.isCase());
1829:       assertFalse(node0.isNot());
1830:       assertFalse(node0.isString());
1831:       assertFalse(node0.isSwitch());
1832:       assertEquals((-1), node0.getCharno());
1833:       assertFalse(node0.isAnd());
1834:       assertFalse(node0.isCast());
1835:       assertFalse(node0.isGetterDef());
1836:       assertFalse(node0.isNumber());
1837:       assertFalse(node0.isFunction());
1838:       assertFalse(node0.isScript());
1839:       assertFalse(node0.isRegExp());
1840:       assertFalse(node0.isTry());
1841:       assertFalse(node0.isFor());
1842:       assertFalse(node0.hasMoreThanOneChild());
1843:       assertFalse(node0.isCatch());
1844:       assertEquals(1, node0.getChildCount());
1845:       assertTrue(node0.hasChildren());
1846:       assertFalse(node0.isWith());
1847:       assertFalse(node0.isIn());
1848:       assertFalse(node0.isInstanceOf());
1849:       assertFalse(node0.isNE());
1850:       assertEquals((-1), node0.getLineno());
1851:       assertFalse(node0.isIf());
1852:       assertFalse(node0.isVar());
1853:       assertFalse(node0.isCall());
1854:       assertFalse(node0.isAdd());
1855:       assertFalse(node0.isSetterDef());
1856:       assertFalse(node0.isNew());
1857:       assertFalse(node0.isDo());
1858:       assertFalse(node0.isBlock());
1859:       assertFalse(node0.isWhile());
1860:       assertFalse(node0.isContinue());
1861:       assertEquals((-1), node0.getSourcePosition());
1862:       assertFalse(node0.isDebugger());
1863:       assertFalse(node0.isLabelName());
1864:       assertFalse(node0.isStringKey());
1865:       assertFalse(node0.isParamList());
1866:       assertFalse(node0.isGetElem());
1867:       assertFalse(node0.isArrayLit());
1868:       assertFalse(node0.isAssign());
1869:       assertFalse(node0.isEmpty());
1870:       assertFalse(node0.isTypeOf());
1871:       assertFalse(node0.isDec());
1872:       assertFalse(node0.isLabel());
1873:       assertFalse(node0.isAssignAdd());
1874:       assertFalse(node0.isReturn());
1875:       assertTrue(node0.hasOneChild());
1876:       assertFalse(node0.isDefaultCase());
1877:       assertEquals((-598), node0.getType());
1878:       assertFalse(node0.isOr());
1879:       assertFalse(node0.isNull());
1880:       assertFalse(node0.isExprResult());
1881:       assertFalse(node0.isVoid());
1882:       assertFalse(node0.isTrue());
1883:       assertFalse(node0.isBreak());
1884:       assertFalse(node0.isName());
1885:       assertFalse(node0.isDelProp());
1886:       assertTrue(node1.hasChildren());
1887:       assertEquals(1, node1.getChildCount());
1888:       assertFalse(node1.isGetterDef());
1889:       assertFalse(node1.isIn());
1890:       assertFalse(node1.isEmpty());
1891:       assertFalse(node1.isCase());
1892:       assertFalse(node1.isFor());
1893:       assertTrue(node1.hasOneChild());
1894:       assertFalse(node1.isTrue());
1895:       assertFalse(node1.isInc());
1896:       assertFalse(node1.isHook());
1897:       assertFalse(node1.isRegExp());
1898:       assertFalse(node1.isBreak());
1899:       assertFalse(node1.isNE());
1900:       assertFalse(node1.isVoid());
1901:       assertFalse(node1.isDelProp());
1902:       assertFalse(node1.isIf());
1903:       assertFalse(node1.isGetProp());
1904:       assertFalse(node1.isSetterDef());
1905:       assertFalse(node1.isComma());
1906:       assertFalse(node1.isObjectLit());
1907:       assertFalse(node1.isThrow());
1908:       assertFalse(node1.isDebugger());
1909:       assertFalse(node1.isCast());
1910:       assertFalse(node1.isString());
1911:       assertFalse(node1.isFunction());
1912:       assertFalse(node1.isFalse());
1913:       assertEquals(36, node1.getType());
1914:       assertFalse(node1.isNot());
1915:       assertFalse(node1.isAnd());
1916:       assertFalse(node1.isAssignAdd());
1917:       assertFalse(node1.isOr());
1918:       assertFalse(node1.isLabel());
1919:       assertEquals((-1), node1.getLineno());
1920:       assertFalse(node1.isReturn());
1921:       assertFalse(node1.isTypeOf());
1922:       assertEquals((-1), node1.getSourcePosition());
1923:       assertFalse(node1.isDec());
1924:       assertFalse(node1.isContinue());
1925:       assertFalse(node1.isNumber());
1926:       assertFalse(node1.hasMoreThanOneChild());
1927:       assertFalse(node1.isDo());
1928:       assertFalse(node1.isAssign());
1929:       assertFalse(node1.isWhile());
1930:       assertFalse(node1.isAdd());
1931:       assertFalse(node1.isNew());
1932:       assertFalse(node1.isExprResult());
1933:       assertFalse(node1.isBlock());
1934:       assertFalse(node1.isWith());
1935:       assertFalse(node1.isName());
1936:       assertFalse(node1.isCall());
1937:       assertFalse(node1.isGetElem());
1938:       assertFalse(node1.isNull());
1939:       assertFalse(node1.isThis());
1940:       assertFalse(node1.isCatch());
1941:       assertFalse(node1.isInstanceOf());
1942:       assertFalse(node1.isVar());
1943:       assertFalse(node1.isDefaultCase());
1944:       assertFalse(node1.isTry());
1945:       assertEquals((-1), node1.getCharno());
1946:       assertFalse(node1.isScript());
1947:       assertFalse(node1.isLabelName());
1948:       assertFalse(node1.isStringKey());
1949:       assertFalse(node1.isArrayLit());
1950:       assertFalse(node1.isParamList());
1951:       assertFalse(node1.isSwitch());
1952:       assertSame(node1, node2);
1953:       assertEquals(48, Node.DIRECTIVES);
1954:       assertEquals(8, Node.FLAG_NO_THROWS);
1955:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1956:       assertEquals(4095, Node.COLUMN_MASK);
1957:       assertEquals(55, Node.INFERRED_FUNCTION);
1958:       assertEquals(39, Node.EMPTY_BLOCK);
1959:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1960:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1961:       assertEquals(50, Node.FREE_CALL);
1962:       assertEquals(43, Node.IS_CONSTANT_NAME);
1963:       assertEquals(36, Node.QUOTED_PROP);
1964:       assertEquals(57, Node.REFLECTED_OBJECT);
1965:       assertEquals(52, Node.LENGTH);
1966:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1967:       assertEquals(40, Node.ORIGINALNAME_PROP);
1968:       assertEquals(53, Node.INPUT_ID);
1969:       assertEquals(30, Node.VAR_ARGS_NAME);
1970:       assertEquals(57, Node.LAST_PROP);
1971:       assertEquals(47, Node.IS_DISPATCHER);
1972:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1973:       assertEquals(37, Node.OPT_ARG_NAME);
1974:       assertEquals(2, Node.POST_FLAG);
1975:       assertEquals(32, Node.INCRDECR_PROP);
1976:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1977:       assertEquals(29, Node.JSDOC_INFO_PROP);
1978:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1979:       assertEquals(49, Node.DIRECT_EVAL);
1980:       assertEquals(56, Node.CHANGE_TIME);
1981:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1982:       assertEquals(46, Node.IS_NAMESPACE);
1983:       assertEquals(54, Node.SLASH_V);
1984:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1985:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1986:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1987:       assertEquals(1, Node.DECR_FLAG);
1988:       assertEquals(12, Node.COLUMN_BITS);
1989:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1990:       assertEquals(57, Node.LAST_PROP);
1991:       assertEquals(49, Node.DIRECT_EVAL);
1992:       assertEquals(30, Node.VAR_ARGS_NAME);
1993:       assertEquals(1, Node.DECR_FLAG);
1994:       assertEquals(46, Node.IS_NAMESPACE);
1995:       assertEquals(52, Node.LENGTH);
1996:       assertEquals(57, Node.REFLECTED_OBJECT);
1997:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1998:       assertEquals(54, Node.SLASH_V);
1999:       assertEquals(56, Node.CHANGE_TIME);
2000:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2001:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2002:       assertEquals(50, Node.FREE_CALL);
2003:       assertEquals(37, Node.OPT_ARG_NAME);
2004:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2005:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2006:       assertEquals(32, Node.INCRDECR_PROP);
2007:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2008:       assertEquals(12, Node.COLUMN_BITS);
2009:       assertEquals(36, Node.QUOTED_PROP);
2010:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2011:       assertEquals(4095, Node.COLUMN_MASK);
2012:       assertEquals(53, Node.INPUT_ID);
2013:       assertEquals(55, Node.INFERRED_FUNCTION);
2014:       assertEquals(48, Node.DIRECTIVES);
2015:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2016:       assertEquals(43, Node.IS_CONSTANT_NAME);
2017:       assertEquals(47, Node.IS_DISPATCHER);
2018:       assertEquals(2, Node.POST_FLAG);
2019:       assertEquals(40, Node.ORIGINALNAME_PROP);
2020:       assertEquals(8, Node.FLAG_NO_THROWS);
2021:       assertEquals(39, Node.EMPTY_BLOCK);
2022:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2023:       assertEquals(29, Node.JSDOC_INFO_PROP);
2024:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2025:       
2026:       JSDocInfo jSDocInfo1 = node3.getJSDocInfo();
2027:       assertNull(jSDocInfo1);
2028:       assertFalse(node3.equals((Object)node1));
2029:       assertFalse(node3.equals((Object)node2));
2030:       assertFalse(node3.equals((Object)node0));
2031:       assertFalse(node3.isAnd());
2032:       assertFalse(node3.isObjectLit());
2033:       assertFalse(node3.isNot());
2034:       assertFalse(node3.isWith());
2035:       assertFalse(node3.isGetProp());
2036:       assertFalse(node3.hasOneChild());
2037:       assertFalse(node3.isScript());
2038:       assertFalse(node3.isAssign());
2039:       assertFalse(node3.hasChildren());
2040:       assertFalse(node3.isDec());
2041:       assertFalse(node3.isThis());
2042:       assertFalse(node3.isHook());
2043:       assertFalse(node3.isComma());
2044:       assertFalse(node3.isTypeOf());
2045:       assertFalse(node3.isBreak());
2046:       assertEquals((-1), node3.getLineno());
2047:       assertFalse(node3.isInstanceOf());
2048:       assertFalse(node3.isExprResult());
2049:       assertFalse(node3.isGetElem());
2050:       assertFalse(node3.isContinue());
2051:       assertFalse(node3.isWhile());
2052:       assertFalse(node3.isReturn());
2053:       assertFalse(node3.isIn());
2054:       assertTrue(node3.isNumber());
2055:       assertFalse(node3.isString());
2056:       assertFalse(node3.isInc());
2057:       assertFalse(node3.isThrow());
2058:       assertFalse(node3.isFalse());
2059:       assertEquals((-1), node3.getSourcePosition());
2060:       assertFalse(node3.isFunction());
2061:       assertFalse(node3.isCast());
2062:       assertFalse(node3.isCatch());
2063:       assertEquals(0, node3.getChildCount());
2064:       assertFalse(node3.isDefaultCase());
2065:       assertFalse(node3.isTrue());
2066:       assertFalse(node3.isDebugger());
2067:       assertFalse(node3.isTry());
2068:       assertFalse(node3.isSetterDef());
2069:       assertFalse(node3.isName());
2070:       assertFalse(node3.isIf());
2071:       assertFalse(node3.isNE());
2072:       assertFalse(node3.isFor());
2073:       assertFalse(node3.isNull());
2074:       assertFalse(node3.isBlock());
2075:       assertFalse(node3.isVoid());
2076:       assertFalse(node3.isRegExp());
2077:       assertFalse(node3.isDelProp());
2078:       assertFalse(node3.isCall());
2079:       assertFalse(node3.isCase());
2080:       assertFalse(node3.isDo());
2081:       assertFalse(node3.hasMoreThanOneChild());
2082:       assertFalse(node3.isLabel());
2083:       assertEquals(39, node3.getType());
2084:       assertEquals((-1), node3.getCharno());
2085:       assertFalse(node3.isNew());
2086:       assertFalse(node3.isAssignAdd());
2087:       assertFalse(node3.isOr());
2088:       assertFalse(node3.isAdd());
2089:       assertFalse(node3.isEmpty());
2090:       assertFalse(node3.isStringKey());
2091:       assertFalse(node3.isLabelName());
2092:       assertFalse(node3.isGetterDef());
2093:       assertFalse(node3.isVar());
2094:       assertFalse(node3.isParamList());
2095:       assertFalse(node3.isSwitch());
2096:       assertFalse(node3.isArrayLit());
2097:       assertEquals(53, Node.INPUT_ID);
2098:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2099:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2100:       assertEquals(36, Node.QUOTED_PROP);
2101:       assertEquals(43, Node.IS_CONSTANT_NAME);
2102:       assertEquals(56, Node.CHANGE_TIME);
2103:       assertEquals(37, Node.OPT_ARG_NAME);
2104:       assertEquals(46, Node.IS_NAMESPACE);
2105:       assertEquals(12, Node.COLUMN_BITS);
2106:       assertEquals(4095, Node.COLUMN_MASK);
2107:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2108:       assertEquals(50, Node.FREE_CALL);
2109:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2110:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2111:       assertEquals(32, Node.INCRDECR_PROP);
2112:       assertEquals(1, Node.DECR_FLAG);
2113:       assertEquals(52, Node.LENGTH);
2114:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2115:       assertEquals(54, Node.SLASH_V);
2116:       assertEquals(57, Node.REFLECTED_OBJECT);
2117:       assertEquals(30, Node.VAR_ARGS_NAME);
2118:       assertEquals(49, Node.DIRECT_EVAL);
2119:       assertEquals(40, Node.ORIGINALNAME_PROP);
2120:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2121:       assertEquals(48, Node.DIRECTIVES);
2122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2123:       assertEquals(2, Node.POST_FLAG);
2124:       assertEquals(8, Node.FLAG_NO_THROWS);
2125:       assertEquals(47, Node.IS_DISPATCHER);
2126:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2127:       assertEquals(29, Node.JSDOC_INFO_PROP);
2128:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2129:       assertEquals(57, Node.LAST_PROP);
2130:       assertEquals(55, Node.INFERRED_FUNCTION);
2131:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2132:       assertEquals(39, Node.EMPTY_BLOCK);
2133:       
2134:       // Undeclared exception!
2135:       try { 
2136:         node3.setQuotedString();
2137:         fail("Expecting exception: IllegalStateException");
2138:       
2139:       } catch(IllegalStateException e) {
2140:          //
2141:          // not a StringNode
2142:          //
2143:          verifyException("com.google.javascript.rhino.Node", e);
2144:       }
2145:   }
2146: }
RegularFileObject[/tmp/EvoSuite_69_1629222933830/com/google/javascript/rhino/Node_69_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:55:34 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_69_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_69_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_69_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.jstype.TemplatizedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.collect.AbstractIndexedListIterator",
335:       "com.google.common.collect.Iterators$11",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.common.base.Objects",
339:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.Iterators$12",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
354:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.JSType$TypePair",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
366:       "com.google.javascript.rhino.jstype.NamespaceType"
367:     );
368:   }
369: }

[MASTER] 17:55:34.387 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-598), "", (-598), 108);
assertNotNull(node0);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean0 = node0.mayMutateArguments();
assertTrue(boolean0);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean1 = node0.isNoSideEffectsCall();
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);

int int0 = node0.getLineno();
assertEquals((-1), int0);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean2 = node0.isOptionalArg();
assertFalse(boolean2);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);

String string0 = node0.getQualifiedName();
assertNull(string0);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);

int int1 = node0.getIntProp((-239));
assertEquals(0, int1);
assertFalse(int1 == int0);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);

JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
assertNull(jSDocInfo0);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);

Node node1 = new Node(36, node0, 108, 0);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertEquals(442368, node1.getSourcePosition());
assertTrue(node1.hasOneChild());
assertEquals(108, node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertEquals(36, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isNull());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Node node2 = node1.useSourceInfoFromForTree(node0);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isTrue());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertEquals(36, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isNull());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isAnd());
assertFalse(node2.isThis());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNot());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isScript());
assertFalse(node2.isString());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNull());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isParamList());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertEquals(36, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Node node3 = Node.newNumber((double) 12);
assertNotNull(node3);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isGetProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBreak());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertTrue(node3.isNumber());
assertFalse(node3.isString());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isTry());
assertFalse(node3.isSetterDef());
assertFalse(node3.isName());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isNull());
assertFalse(node3.isBlock());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isDelProp());
assertFalse(node3.isCall());
assertFalse(node3.isCase());
assertFalse(node3.isDo());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isLabel());
assertEquals(39, node3.getType());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetterDef());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

node0.addChildrenToBack(node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(1, node0.getChildCount());
assertTrue(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertTrue(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isGetProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBreak());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertTrue(node3.isNumber());
assertFalse(node3.isString());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isTry());
assertFalse(node3.isSetterDef());
assertFalse(node3.isName());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isNull());
assertFalse(node3.isBlock());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isDelProp());
assertFalse(node3.isCall());
assertFalse(node3.isCase());
assertFalse(node3.isDo());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isLabel());
assertEquals(39, node3.getType());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetterDef());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

node1.setWasEmptyNode(true);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(1, node0.getChildCount());
assertTrue(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertTrue(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isTrue());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertEquals(36, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isNull());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertSame(node1, node2);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

JSDocInfo jSDocInfo1 = node3.getJSDocInfo();
assertNull(jSDocInfo1);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isGetProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBreak());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertTrue(node3.isNumber());
assertFalse(node3.isString());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isTry());
assertFalse(node3.isSetterDef());
assertFalse(node3.isName());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isNull());
assertFalse(node3.isBlock());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isDelProp());
assertFalse(node3.isCall());
assertFalse(node3.isCase());
assertFalse(node3.isDo());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isLabel());
assertEquals(39, node3.getType());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetterDef());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

node3.setQuotedString();

[MASTER] 17:55:34.657 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_70_1629222934388/com/google/javascript/rhino/Node_70_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_70_1629222934388/com/google/javascript/rhino/Node_70_tmp__ESTest_scaffolding.java]]
[MASTER] 17:55:34.695 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:34.695 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:34.696 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 445
[MASTER] 17:55:34.698 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_70_1629222934388/com/google/javascript/rhino/Node_70_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:55:34 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_70_tmp__ESTest extends Node_70_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString((-598), "", (-598), 108);
23:       assertNotNull(node0);
24:       assertFalse(node0.isHook());
25:       assertEquals((-1), node0.getCharno());
26:       assertFalse(node0.isInc());
27:       assertFalse(node0.isFalse());
28:       assertFalse(node0.isString());
29:       assertFalse(node0.isCase());
30:       assertFalse(node0.isThis());
31:       assertFalse(node0.isThrow());
32:       assertFalse(node0.isComma());
33:       assertFalse(node0.isInstanceOf());
34:       assertFalse(node0.isIn());
35:       assertFalse(node0.isWith());
36:       assertFalse(node0.isDelProp());
37:       assertFalse(node0.isBreak());
38:       assertFalse(node0.isNE());
39:       assertFalse(node0.isIf());
40:       assertFalse(node0.isDebugger());
41:       assertFalse(node0.isExprResult());
42:       assertFalse(node0.isFunction());
43:       assertFalse(node0.isCast());
44:       assertFalse(node0.isAssign());
45:       assertFalse(node0.isDec());
46:       assertFalse(node0.hasChildren());
47:       assertFalse(node0.isGetProp());
48:       assertFalse(node0.isObjectLit());
49:       assertFalse(node0.isContinue());
50:       assertFalse(node0.isNot());
51:       assertEquals((-1), node0.getSourcePosition());
52:       assertFalse(node0.isAnd());
53:       assertFalse(node0.isAdd());
54:       assertFalse(node0.isNew());
55:       assertFalse(node0.isBlock());
56:       assertFalse(node0.isCall());
57:       assertFalse(node0.isWhile());
58:       assertFalse(node0.isDo());
59:       assertFalse(node0.isVar());
60:       assertFalse(node0.isReturn());
61:       assertEquals((-1), node0.getLineno());
62:       assertFalse(node0.isOr());
63:       assertFalse(node0.isSetterDef());
64:       assertFalse(node0.isCatch());
65:       assertFalse(node0.isTypeOf());
66:       assertFalse(node0.hasMoreThanOneChild());
67:       assertFalse(node0.isNull());
68:       assertFalse(node0.isGetElem());
69:       assertFalse(node0.isTrue());
70:       assertFalse(node0.isVoid());
71:       assertFalse(node0.isName());
72:       assertFalse(node0.isTry());
73:       assertFalse(node0.hasOneChild());
74:       assertFalse(node0.isArrayLit());
75:       assertFalse(node0.isScript());
76:       assertFalse(node0.isRegExp());
77:       assertFalse(node0.isEmpty());
78:       assertFalse(node0.isFor());
79:       assertFalse(node0.isAssignAdd());
80:       assertFalse(node0.isDefaultCase());
81:       assertEquals((-598), node0.getType());
82:       assertEquals(0, node0.getChildCount());
83:       assertFalse(node0.isLabel());
84:       assertFalse(node0.isNumber());
85:       assertFalse(node0.isLabelName());
86:       assertFalse(node0.isGetterDef());
87:       assertFalse(node0.isParamList());
88:       assertFalse(node0.isStringKey());
89:       assertFalse(node0.isSwitch());
90:       assertEquals(8, Node.FLAG_NO_THROWS);
91:       assertEquals(48, Node.DIRECTIVES);
92:       assertEquals(50, Node.FREE_CALL);
93:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
94:       assertEquals(40, Node.ORIGINALNAME_PROP);
95:       assertEquals(39, Node.EMPTY_BLOCK);
96:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
97:       assertEquals(57, Node.REFLECTED_OBJECT);
98:       assertEquals(52, Node.LENGTH);
99:       assertEquals(54, Node.SLASH_V);
100:       assertEquals(49, Node.DIRECT_EVAL);
101:       assertEquals(1, Node.DECR_FLAG);
102:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
103:       assertEquals(4095, Node.COLUMN_MASK);
104:       assertEquals(32, Node.INCRDECR_PROP);
105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
106:       assertEquals(12, Node.COLUMN_BITS);
107:       assertEquals(56, Node.CHANGE_TIME);
108:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
109:       assertEquals(47, Node.IS_DISPATCHER);
110:       assertEquals(37, Node.OPT_ARG_NAME);
111:       assertEquals(2, Node.POST_FLAG);
112:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
113:       assertEquals(29, Node.JSDOC_INFO_PROP);
114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
115:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
116:       assertEquals(46, Node.IS_NAMESPACE);
117:       assertEquals(43, Node.IS_CONSTANT_NAME);
118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
119:       assertEquals(36, Node.QUOTED_PROP);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(30, Node.VAR_ARGS_NAME);
122:       assertEquals(53, Node.INPUT_ID);
123:       assertEquals(55, Node.INFERRED_FUNCTION);
124:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
125:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
126:       
127:       boolean boolean0 = node0.isBlock();
128:       assertFalse(boolean0);
129:       assertFalse(node0.isHook());
130:       assertEquals((-1), node0.getCharno());
131:       assertFalse(node0.isInc());
132:       assertFalse(node0.isFalse());
133:       assertFalse(node0.isString());
134:       assertFalse(node0.isCase());
135:       assertFalse(node0.isThis());
136:       assertFalse(node0.isThrow());
137:       assertFalse(node0.isComma());
138:       assertFalse(node0.isInstanceOf());
139:       assertFalse(node0.isIn());
140:       assertFalse(node0.isWith());
141:       assertFalse(node0.isDelProp());
142:       assertFalse(node0.isBreak());
143:       assertFalse(node0.isNE());
144:       assertFalse(node0.isIf());
145:       assertFalse(node0.isDebugger());
146:       assertFalse(node0.isExprResult());
147:       assertFalse(node0.isFunction());
148:       assertFalse(node0.isCast());
149:       assertFalse(node0.isAssign());
150:       assertFalse(node0.isDec());
151:       assertFalse(node0.hasChildren());
152:       assertFalse(node0.isGetProp());
153:       assertFalse(node0.isObjectLit());
154:       assertFalse(node0.isContinue());
155:       assertFalse(node0.isNot());
156:       assertEquals((-1), node0.getSourcePosition());
157:       assertFalse(node0.isAnd());
158:       assertFalse(node0.isAdd());
159:       assertFalse(node0.isNew());
160:       assertFalse(node0.isBlock());
161:       assertFalse(node0.isCall());
162:       assertFalse(node0.isWhile());
163:       assertFalse(node0.isDo());
164:       assertFalse(node0.isVar());
165:       assertFalse(node0.isReturn());
166:       assertEquals((-1), node0.getLineno());
167:       assertFalse(node0.isOr());
168:       assertFalse(node0.isSetterDef());
169:       assertFalse(node0.isCatch());
170:       assertFalse(node0.isTypeOf());
171:       assertFalse(node0.hasMoreThanOneChild());
172:       assertFalse(node0.isNull());
173:       assertFalse(node0.isGetElem());
174:       assertFalse(node0.isTrue());
175:       assertFalse(node0.isVoid());
176:       assertFalse(node0.isName());
177:       assertFalse(node0.isTry());
178:       assertFalse(node0.hasOneChild());
179:       assertFalse(node0.isArrayLit());
180:       assertFalse(node0.isScript());
181:       assertFalse(node0.isRegExp());
182:       assertFalse(node0.isEmpty());
183:       assertFalse(node0.isFor());
184:       assertFalse(node0.isAssignAdd());
185:       assertFalse(node0.isDefaultCase());
186:       assertEquals((-598), node0.getType());
187:       assertEquals(0, node0.getChildCount());
188:       assertFalse(node0.isLabel());
189:       assertFalse(node0.isNumber());
190:       assertFalse(node0.isLabelName());
191:       assertFalse(node0.isGetterDef());
192:       assertFalse(node0.isParamList());
193:       assertFalse(node0.isStringKey());
194:       assertFalse(node0.isSwitch());
195:       assertEquals(8, Node.FLAG_NO_THROWS);
196:       assertEquals(48, Node.DIRECTIVES);
197:       assertEquals(50, Node.FREE_CALL);
198:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
199:       assertEquals(40, Node.ORIGINALNAME_PROP);
200:       assertEquals(39, Node.EMPTY_BLOCK);
201:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
202:       assertEquals(57, Node.REFLECTED_OBJECT);
203:       assertEquals(52, Node.LENGTH);
204:       assertEquals(54, Node.SLASH_V);
205:       assertEquals(49, Node.DIRECT_EVAL);
206:       assertEquals(1, Node.DECR_FLAG);
207:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
208:       assertEquals(4095, Node.COLUMN_MASK);
209:       assertEquals(32, Node.INCRDECR_PROP);
210:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
211:       assertEquals(12, Node.COLUMN_BITS);
212:       assertEquals(56, Node.CHANGE_TIME);
213:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
214:       assertEquals(47, Node.IS_DISPATCHER);
215:       assertEquals(37, Node.OPT_ARG_NAME);
216:       assertEquals(2, Node.POST_FLAG);
217:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
218:       assertEquals(29, Node.JSDOC_INFO_PROP);
219:       assertEquals(51, Node.STATIC_SOURCE_FILE);
220:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
221:       assertEquals(46, Node.IS_NAMESPACE);
222:       assertEquals(43, Node.IS_CONSTANT_NAME);
223:       assertEquals(15, Node.NO_SIDE_EFFECTS);
224:       assertEquals(36, Node.QUOTED_PROP);
225:       assertEquals(57, Node.LAST_PROP);
226:       assertEquals(30, Node.VAR_ARGS_NAME);
227:       assertEquals(53, Node.INPUT_ID);
228:       assertEquals(55, Node.INFERRED_FUNCTION);
229:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
230:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
231:       
232:       boolean boolean1 = node0.isNoSideEffectsCall();
233:       assertFalse(boolean1);
234:       assertTrue(boolean1 == boolean0);
235:       assertFalse(node0.isHook());
236:       assertEquals((-1), node0.getCharno());
237:       assertFalse(node0.isInc());
238:       assertFalse(node0.isFalse());
239:       assertFalse(node0.isString());
240:       assertFalse(node0.isCase());
241:       assertFalse(node0.isThis());
242:       assertFalse(node0.isThrow());
243:       assertFalse(node0.isComma());
244:       assertFalse(node0.isInstanceOf());
245:       assertFalse(node0.isIn());
246:       assertFalse(node0.isWith());
247:       assertFalse(node0.isDelProp());
248:       assertFalse(node0.isBreak());
249:       assertFalse(node0.isNE());
250:       assertFalse(node0.isIf());
251:       assertFalse(node0.isDebugger());
252:       assertFalse(node0.isExprResult());
253:       assertFalse(node0.isFunction());
254:       assertFalse(node0.isCast());
255:       assertFalse(node0.isAssign());
256:       assertFalse(node0.isDec());
257:       assertFalse(node0.hasChildren());
258:       assertFalse(node0.isGetProp());
259:       assertFalse(node0.isObjectLit());
260:       assertFalse(node0.isContinue());
261:       assertFalse(node0.isNot());
262:       assertEquals((-1), node0.getSourcePosition());
263:       assertFalse(node0.isAnd());
264:       assertFalse(node0.isAdd());
265:       assertFalse(node0.isNew());
266:       assertFalse(node0.isBlock());
267:       assertFalse(node0.isCall());
268:       assertFalse(node0.isWhile());
269:       assertFalse(node0.isDo());
270:       assertFalse(node0.isVar());
271:       assertFalse(node0.isReturn());
272:       assertEquals((-1), node0.getLineno());
273:       assertFalse(node0.isOr());
274:       assertFalse(node0.isSetterDef());
275:       assertFalse(node0.isCatch());
276:       assertFalse(node0.isTypeOf());
277:       assertFalse(node0.hasMoreThanOneChild());
278:       assertFalse(node0.isNull());
279:       assertFalse(node0.isGetElem());
280:       assertFalse(node0.isTrue());
281:       assertFalse(node0.isVoid());
282:       assertFalse(node0.isName());
283:       assertFalse(node0.isTry());
284:       assertFalse(node0.hasOneChild());
285:       assertFalse(node0.isArrayLit());
286:       assertFalse(node0.isScript());
287:       assertFalse(node0.isRegExp());
288:       assertFalse(node0.isEmpty());
289:       assertFalse(node0.isFor());
290:       assertFalse(node0.isAssignAdd());
291:       assertFalse(node0.isDefaultCase());
292:       assertEquals((-598), node0.getType());
293:       assertEquals(0, node0.getChildCount());
294:       assertFalse(node0.isLabel());
295:       assertFalse(node0.isNumber());
296:       assertFalse(node0.isLabelName());
297:       assertFalse(node0.isGetterDef());
298:       assertFalse(node0.isParamList());
299:       assertFalse(node0.isStringKey());
300:       assertFalse(node0.isSwitch());
301:       assertEquals(8, Node.FLAG_NO_THROWS);
302:       assertEquals(48, Node.DIRECTIVES);
303:       assertEquals(50, Node.FREE_CALL);
304:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
305:       assertEquals(40, Node.ORIGINALNAME_PROP);
306:       assertEquals(39, Node.EMPTY_BLOCK);
307:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
308:       assertEquals(57, Node.REFLECTED_OBJECT);
309:       assertEquals(52, Node.LENGTH);
310:       assertEquals(54, Node.SLASH_V);
311:       assertEquals(49, Node.DIRECT_EVAL);
312:       assertEquals(1, Node.DECR_FLAG);
313:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
314:       assertEquals(4095, Node.COLUMN_MASK);
315:       assertEquals(32, Node.INCRDECR_PROP);
316:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
317:       assertEquals(12, Node.COLUMN_BITS);
318:       assertEquals(56, Node.CHANGE_TIME);
319:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
320:       assertEquals(47, Node.IS_DISPATCHER);
321:       assertEquals(37, Node.OPT_ARG_NAME);
322:       assertEquals(2, Node.POST_FLAG);
323:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
324:       assertEquals(29, Node.JSDOC_INFO_PROP);
325:       assertEquals(51, Node.STATIC_SOURCE_FILE);
326:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
327:       assertEquals(46, Node.IS_NAMESPACE);
328:       assertEquals(43, Node.IS_CONSTANT_NAME);
329:       assertEquals(15, Node.NO_SIDE_EFFECTS);
330:       assertEquals(36, Node.QUOTED_PROP);
331:       assertEquals(57, Node.LAST_PROP);
332:       assertEquals(30, Node.VAR_ARGS_NAME);
333:       assertEquals(53, Node.INPUT_ID);
334:       assertEquals(55, Node.INFERRED_FUNCTION);
335:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
336:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
337:       
338:       int int0 = node0.getLineno();
339:       assertEquals((-1), int0);
340:       assertFalse(node0.isHook());
341:       assertEquals((-1), node0.getCharno());
342:       assertFalse(node0.isInc());
343:       assertFalse(node0.isFalse());
344:       assertFalse(node0.isString());
345:       assertFalse(node0.isCase());
346:       assertFalse(node0.isThis());
347:       assertFalse(node0.isThrow());
348:       assertFalse(node0.isComma());
349:       assertFalse(node0.isInstanceOf());
350:       assertFalse(node0.isIn());
351:       assertFalse(node0.isWith());
352:       assertFalse(node0.isDelProp());
353:       assertFalse(node0.isBreak());
354:       assertFalse(node0.isNE());
355:       assertFalse(node0.isIf());
356:       assertFalse(node0.isDebugger());
357:       assertFalse(node0.isExprResult());
358:       assertFalse(node0.isFunction());
359:       assertFalse(node0.isCast());
360:       assertFalse(node0.isAssign());
361:       assertFalse(node0.isDec());
362:       assertFalse(node0.hasChildren());
363:       assertFalse(node0.isGetProp());
364:       assertFalse(node0.isObjectLit());
365:       assertFalse(node0.isContinue());
366:       assertFalse(node0.isNot());
367:       assertEquals((-1), node0.getSourcePosition());
368:       assertFalse(node0.isAnd());
369:       assertFalse(node0.isAdd());
370:       assertFalse(node0.isNew());
371:       assertFalse(node0.isBlock());
372:       assertFalse(node0.isCall());
373:       assertFalse(node0.isWhile());
374:       assertFalse(node0.isDo());
375:       assertFalse(node0.isVar());
376:       assertFalse(node0.isReturn());
377:       assertEquals((-1), node0.getLineno());
378:       assertFalse(node0.isOr());
379:       assertFalse(node0.isSetterDef());
380:       assertFalse(node0.isCatch());
381:       assertFalse(node0.isTypeOf());
382:       assertFalse(node0.hasMoreThanOneChild());
383:       assertFalse(node0.isNull());
384:       assertFalse(node0.isGetElem());
385:       assertFalse(node0.isTrue());
386:       assertFalse(node0.isVoid());
387:       assertFalse(node0.isName());
388:       assertFalse(node0.isTry());
389:       assertFalse(node0.hasOneChild());
390:       assertFalse(node0.isArrayLit());
391:       assertFalse(node0.isScript());
392:       assertFalse(node0.isRegExp());
393:       assertFalse(node0.isEmpty());
394:       assertFalse(node0.isFor());
395:       assertFalse(node0.isAssignAdd());
396:       assertFalse(node0.isDefaultCase());
397:       assertEquals((-598), node0.getType());
398:       assertEquals(0, node0.getChildCount());
399:       assertFalse(node0.isLabel());
400:       assertFalse(node0.isNumber());
401:       assertFalse(node0.isLabelName());
402:       assertFalse(node0.isGetterDef());
403:       assertFalse(node0.isParamList());
404:       assertFalse(node0.isStringKey());
405:       assertFalse(node0.isSwitch());
406:       assertEquals(8, Node.FLAG_NO_THROWS);
407:       assertEquals(48, Node.DIRECTIVES);
408:       assertEquals(50, Node.FREE_CALL);
409:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
410:       assertEquals(40, Node.ORIGINALNAME_PROP);
411:       assertEquals(39, Node.EMPTY_BLOCK);
412:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
413:       assertEquals(57, Node.REFLECTED_OBJECT);
414:       assertEquals(52, Node.LENGTH);
415:       assertEquals(54, Node.SLASH_V);
416:       assertEquals(49, Node.DIRECT_EVAL);
417:       assertEquals(1, Node.DECR_FLAG);
418:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
419:       assertEquals(4095, Node.COLUMN_MASK);
420:       assertEquals(32, Node.INCRDECR_PROP);
421:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
422:       assertEquals(12, Node.COLUMN_BITS);
423:       assertEquals(56, Node.CHANGE_TIME);
424:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
425:       assertEquals(47, Node.IS_DISPATCHER);
426:       assertEquals(37, Node.OPT_ARG_NAME);
427:       assertEquals(2, Node.POST_FLAG);
428:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
429:       assertEquals(29, Node.JSDOC_INFO_PROP);
430:       assertEquals(51, Node.STATIC_SOURCE_FILE);
431:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
432:       assertEquals(46, Node.IS_NAMESPACE);
433:       assertEquals(43, Node.IS_CONSTANT_NAME);
434:       assertEquals(15, Node.NO_SIDE_EFFECTS);
435:       assertEquals(36, Node.QUOTED_PROP);
436:       assertEquals(57, Node.LAST_PROP);
437:       assertEquals(30, Node.VAR_ARGS_NAME);
438:       assertEquals(53, Node.INPUT_ID);
439:       assertEquals(55, Node.INFERRED_FUNCTION);
440:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
441:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
442:       
443:       Iterable<Node> iterable0 = node0.children();
444:       assertNotNull(iterable0);
445:       assertFalse(iterable0.contains(node0));
446:       assertFalse(node0.isHook());
447:       assertEquals((-1), node0.getCharno());
448:       assertFalse(node0.isInc());
449:       assertFalse(node0.isFalse());
450:       assertFalse(node0.isString());
451:       assertFalse(node0.isCase());
452:       assertFalse(node0.isThis());
453:       assertFalse(node0.isThrow());
454:       assertFalse(node0.isComma());
455:       assertFalse(node0.isInstanceOf());
456:       assertFalse(node0.isIn());
457:       assertFalse(node0.isWith());
458:       assertFalse(node0.isDelProp());
459:       assertFalse(node0.isBreak());
460:       assertFalse(node0.isNE());
461:       assertFalse(node0.isIf());
462:       assertFalse(node0.isDebugger());
463:       assertFalse(node0.isExprResult());
464:       assertFalse(node0.isFunction());
465:       assertFalse(node0.isCast());
466:       assertFalse(node0.isAssign());
467:       assertFalse(node0.isDec());
468:       assertFalse(node0.hasChildren());
469:       assertFalse(node0.isGetProp());
470:       assertFalse(node0.isObjectLit());
471:       assertFalse(node0.isContinue());
472:       assertFalse(node0.isNot());
473:       assertEquals((-1), node0.getSourcePosition());
474:       assertFalse(node0.isAnd());
475:       assertFalse(node0.isAdd());
476:       assertFalse(node0.isNew());
477:       assertFalse(node0.isBlock());
478:       assertFalse(node0.isCall());
479:       assertFalse(node0.isWhile());
480:       assertFalse(node0.isDo());
481:       assertFalse(node0.isVar());
482:       assertFalse(node0.isReturn());
483:       assertEquals((-1), node0.getLineno());
484:       assertFalse(node0.isOr());
485:       assertFalse(node0.isSetterDef());
486:       assertFalse(node0.isCatch());
487:       assertFalse(node0.isTypeOf());
488:       assertFalse(node0.hasMoreThanOneChild());
489:       assertFalse(node0.isNull());
490:       assertFalse(node0.isGetElem());
491:       assertFalse(node0.isTrue());
492:       assertFalse(node0.isVoid());
493:       assertFalse(node0.isName());
494:       assertFalse(node0.isTry());
495:       assertFalse(node0.hasOneChild());
496:       assertFalse(node0.isArrayLit());
497:       assertFalse(node0.isScript());
498:       assertFalse(node0.isRegExp());
499:       assertFalse(node0.isEmpty());
500:       assertFalse(node0.isFor());
501:       assertFalse(node0.isAssignAdd());
502:       assertFalse(node0.isDefaultCase());
503:       assertEquals((-598), node0.getType());
504:       assertEquals(0, node0.getChildCount());
505:       assertFalse(node0.isLabel());
506:       assertFalse(node0.isNumber());
507:       assertFalse(node0.isLabelName());
508:       assertFalse(node0.isGetterDef());
509:       assertFalse(node0.isParamList());
510:       assertFalse(node0.isStringKey());
511:       assertFalse(node0.isSwitch());
512:       assertEquals(8, Node.FLAG_NO_THROWS);
513:       assertEquals(48, Node.DIRECTIVES);
514:       assertEquals(50, Node.FREE_CALL);
515:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
516:       assertEquals(40, Node.ORIGINALNAME_PROP);
517:       assertEquals(39, Node.EMPTY_BLOCK);
518:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
519:       assertEquals(57, Node.REFLECTED_OBJECT);
520:       assertEquals(52, Node.LENGTH);
521:       assertEquals(54, Node.SLASH_V);
522:       assertEquals(49, Node.DIRECT_EVAL);
523:       assertEquals(1, Node.DECR_FLAG);
524:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
525:       assertEquals(4095, Node.COLUMN_MASK);
526:       assertEquals(32, Node.INCRDECR_PROP);
527:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
528:       assertEquals(12, Node.COLUMN_BITS);
529:       assertEquals(56, Node.CHANGE_TIME);
530:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
531:       assertEquals(47, Node.IS_DISPATCHER);
532:       assertEquals(37, Node.OPT_ARG_NAME);
533:       assertEquals(2, Node.POST_FLAG);
534:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
535:       assertEquals(29, Node.JSDOC_INFO_PROP);
536:       assertEquals(51, Node.STATIC_SOURCE_FILE);
537:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
538:       assertEquals(46, Node.IS_NAMESPACE);
539:       assertEquals(43, Node.IS_CONSTANT_NAME);
540:       assertEquals(15, Node.NO_SIDE_EFFECTS);
541:       assertEquals(36, Node.QUOTED_PROP);
542:       assertEquals(57, Node.LAST_PROP);
543:       assertEquals(30, Node.VAR_ARGS_NAME);
544:       assertEquals(53, Node.INPUT_ID);
545:       assertEquals(55, Node.INFERRED_FUNCTION);
546:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
547:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
548:       
549:       boolean boolean2 = node0.isOptionalArg();
550:       assertFalse(boolean2);
551:       assertTrue(boolean2 == boolean1);
552:       assertTrue(boolean2 == boolean0);
553:       assertFalse(node0.isHook());
554:       assertEquals((-1), node0.getCharno());
555:       assertFalse(node0.isInc());
556:       assertFalse(node0.isFalse());
557:       assertFalse(node0.isString());
558:       assertFalse(node0.isCase());
559:       assertFalse(node0.isThis());
560:       assertFalse(node0.isThrow());
561:       assertFalse(node0.isComma());
562:       assertFalse(node0.isInstanceOf());
563:       assertFalse(node0.isIn());
564:       assertFalse(node0.isWith());
565:       assertFalse(node0.isDelProp());
566:       assertFalse(node0.isBreak());
567:       assertFalse(node0.isNE());
568:       assertFalse(node0.isIf());
569:       assertFalse(node0.isDebugger());
570:       assertFalse(node0.isExprResult());
571:       assertFalse(node0.isFunction());
572:       assertFalse(node0.isCast());
573:       assertFalse(node0.isAssign());
574:       assertFalse(node0.isDec());
575:       assertFalse(node0.hasChildren());
576:       assertFalse(node0.isGetProp());
577:       assertFalse(node0.isObjectLit());
578:       assertFalse(node0.isContinue());
579:       assertFalse(node0.isNot());
580:       assertEquals((-1), node0.getSourcePosition());
581:       assertFalse(node0.isAnd());
582:       assertFalse(node0.isAdd());
583:       assertFalse(node0.isNew());
584:       assertFalse(node0.isBlock());
585:       assertFalse(node0.isCall());
586:       assertFalse(node0.isWhile());
587:       assertFalse(node0.isDo());
588:       assertFalse(node0.isVar());
589:       assertFalse(node0.isReturn());
590:       assertEquals((-1), node0.getLineno());
591:       assertFalse(node0.isOr());
592:       assertFalse(node0.isSetterDef());
593:       assertFalse(node0.isCatch());
594:       assertFalse(node0.isTypeOf());
595:       assertFalse(node0.hasMoreThanOneChild());
596:       assertFalse(node0.isNull());
597:       assertFalse(node0.isGetElem());
598:       assertFalse(node0.isTrue());
599:       assertFalse(node0.isVoid());
600:       assertFalse(node0.isName());
601:       assertFalse(node0.isTry());
602:       assertFalse(node0.hasOneChild());
603:       assertFalse(node0.isArrayLit());
604:       assertFalse(node0.isScript());
605:       assertFalse(node0.isRegExp());
606:       assertFalse(node0.isEmpty());
607:       assertFalse(node0.isFor());
608:       assertFalse(node0.isAssignAdd());
609:       assertFalse(node0.isDefaultCase());
610:       assertEquals((-598), node0.getType());
611:       assertEquals(0, node0.getChildCount());
612:       assertFalse(node0.isLabel());
613:       assertFalse(node0.isNumber());
614:       assertFalse(node0.isLabelName());
615:       assertFalse(node0.isGetterDef());
616:       assertFalse(node0.isParamList());
617:       assertFalse(node0.isStringKey());
618:       assertFalse(node0.isSwitch());
619:       assertEquals(8, Node.FLAG_NO_THROWS);
620:       assertEquals(48, Node.DIRECTIVES);
621:       assertEquals(50, Node.FREE_CALL);
622:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
623:       assertEquals(40, Node.ORIGINALNAME_PROP);
624:       assertEquals(39, Node.EMPTY_BLOCK);
625:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
626:       assertEquals(57, Node.REFLECTED_OBJECT);
627:       assertEquals(52, Node.LENGTH);
628:       assertEquals(54, Node.SLASH_V);
629:       assertEquals(49, Node.DIRECT_EVAL);
630:       assertEquals(1, Node.DECR_FLAG);
631:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
632:       assertEquals(4095, Node.COLUMN_MASK);
633:       assertEquals(32, Node.INCRDECR_PROP);
634:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
635:       assertEquals(12, Node.COLUMN_BITS);
636:       assertEquals(56, Node.CHANGE_TIME);
637:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
638:       assertEquals(47, Node.IS_DISPATCHER);
639:       assertEquals(37, Node.OPT_ARG_NAME);
640:       assertEquals(2, Node.POST_FLAG);
641:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
642:       assertEquals(29, Node.JSDOC_INFO_PROP);
643:       assertEquals(51, Node.STATIC_SOURCE_FILE);
644:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
645:       assertEquals(46, Node.IS_NAMESPACE);
646:       assertEquals(43, Node.IS_CONSTANT_NAME);
647:       assertEquals(15, Node.NO_SIDE_EFFECTS);
648:       assertEquals(36, Node.QUOTED_PROP);
649:       assertEquals(57, Node.LAST_PROP);
650:       assertEquals(30, Node.VAR_ARGS_NAME);
651:       assertEquals(53, Node.INPUT_ID);
652:       assertEquals(55, Node.INFERRED_FUNCTION);
653:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
654:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
655:       
656:       String string0 = node0.getQualifiedName();
657:       assertNull(string0);
658:       assertFalse(node0.isHook());
659:       assertEquals((-1), node0.getCharno());
660:       assertFalse(node0.isInc());
661:       assertFalse(node0.isFalse());
662:       assertFalse(node0.isString());
663:       assertFalse(node0.isCase());
664:       assertFalse(node0.isThis());
665:       assertFalse(node0.isThrow());
666:       assertFalse(node0.isComma());
667:       assertFalse(node0.isInstanceOf());
668:       assertFalse(node0.isIn());
669:       assertFalse(node0.isWith());
670:       assertFalse(node0.isDelProp());
671:       assertFalse(node0.isBreak());
672:       assertFalse(node0.isNE());
673:       assertFalse(node0.isIf());
674:       assertFalse(node0.isDebugger());
675:       assertFalse(node0.isExprResult());
676:       assertFalse(node0.isFunction());
677:       assertFalse(node0.isCast());
678:       assertFalse(node0.isAssign());
679:       assertFalse(node0.isDec());
680:       assertFalse(node0.hasChildren());
681:       assertFalse(node0.isGetProp());
682:       assertFalse(node0.isObjectLit());
683:       assertFalse(node0.isContinue());
684:       assertFalse(node0.isNot());
685:       assertEquals((-1), node0.getSourcePosition());
686:       assertFalse(node0.isAnd());
687:       assertFalse(node0.isAdd());
688:       assertFalse(node0.isNew());
689:       assertFalse(node0.isBlock());
690:       assertFalse(node0.isCall());
691:       assertFalse(node0.isWhile());
692:       assertFalse(node0.isDo());
693:       assertFalse(node0.isVar());
694:       assertFalse(node0.isReturn());
695:       assertEquals((-1), node0.getLineno());
696:       assertFalse(node0.isOr());
697:       assertFalse(node0.isSetterDef());
698:       assertFalse(node0.isCatch());
699:       assertFalse(node0.isTypeOf());
700:       assertFalse(node0.hasMoreThanOneChild());
701:       assertFalse(node0.isNull());
702:       assertFalse(node0.isGetElem());
703:       assertFalse(node0.isTrue());
704:       assertFalse(node0.isVoid());
705:       assertFalse(node0.isName());
706:       assertFalse(node0.isTry());
707:       assertFalse(node0.hasOneChild());
708:       assertFalse(node0.isArrayLit());
709:       assertFalse(node0.isScript());
710:       assertFalse(node0.isRegExp());
711:       assertFalse(node0.isEmpty());
712:       assertFalse(node0.isFor());
713:       assertFalse(node0.isAssignAdd());
714:       assertFalse(node0.isDefaultCase());
715:       assertEquals((-598), node0.getType());
716:       assertEquals(0, node0.getChildCount());
717:       assertFalse(node0.isLabel());
718:       assertFalse(node0.isNumber());
719:       assertFalse(node0.isLabelName());
720:       assertFalse(node0.isGetterDef());
721:       assertFalse(node0.isParamList());
722:       assertFalse(node0.isStringKey());
723:       assertFalse(node0.isSwitch());
724:       assertEquals(8, Node.FLAG_NO_THROWS);
725:       assertEquals(48, Node.DIRECTIVES);
726:       assertEquals(50, Node.FREE_CALL);
727:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
728:       assertEquals(40, Node.ORIGINALNAME_PROP);
729:       assertEquals(39, Node.EMPTY_BLOCK);
730:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
731:       assertEquals(57, Node.REFLECTED_OBJECT);
732:       assertEquals(52, Node.LENGTH);
733:       assertEquals(54, Node.SLASH_V);
734:       assertEquals(49, Node.DIRECT_EVAL);
735:       assertEquals(1, Node.DECR_FLAG);
736:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
737:       assertEquals(4095, Node.COLUMN_MASK);
738:       assertEquals(32, Node.INCRDECR_PROP);
739:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
740:       assertEquals(12, Node.COLUMN_BITS);
741:       assertEquals(56, Node.CHANGE_TIME);
742:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
743:       assertEquals(47, Node.IS_DISPATCHER);
744:       assertEquals(37, Node.OPT_ARG_NAME);
745:       assertEquals(2, Node.POST_FLAG);
746:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
747:       assertEquals(29, Node.JSDOC_INFO_PROP);
748:       assertEquals(51, Node.STATIC_SOURCE_FILE);
749:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
750:       assertEquals(46, Node.IS_NAMESPACE);
751:       assertEquals(43, Node.IS_CONSTANT_NAME);
752:       assertEquals(15, Node.NO_SIDE_EFFECTS);
753:       assertEquals(36, Node.QUOTED_PROP);
754:       assertEquals(57, Node.LAST_PROP);
755:       assertEquals(30, Node.VAR_ARGS_NAME);
756:       assertEquals(53, Node.INPUT_ID);
757:       assertEquals(55, Node.INFERRED_FUNCTION);
758:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
759:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
760:       
761:       int int1 = node0.getIntProp((-239));
762:       assertEquals(0, int1);
763:       assertFalse(int1 == int0);
764:       assertFalse(node0.isHook());
765:       assertEquals((-1), node0.getCharno());
766:       assertFalse(node0.isInc());
767:       assertFalse(node0.isFalse());
768:       assertFalse(node0.isString());
769:       assertFalse(node0.isCase());
770:       assertFalse(node0.isThis());
771:       assertFalse(node0.isThrow());
772:       assertFalse(node0.isComma());
773:       assertFalse(node0.isInstanceOf());
774:       assertFalse(node0.isIn());
775:       assertFalse(node0.isWith());
776:       assertFalse(node0.isDelProp());
777:       assertFalse(node0.isBreak());
778:       assertFalse(node0.isNE());
779:       assertFalse(node0.isIf());
780:       assertFalse(node0.isDebugger());
781:       assertFalse(node0.isExprResult());
782:       assertFalse(node0.isFunction());
783:       assertFalse(node0.isCast());
784:       assertFalse(node0.isAssign());
785:       assertFalse(node0.isDec());
786:       assertFalse(node0.hasChildren());
787:       assertFalse(node0.isGetProp());
788:       assertFalse(node0.isObjectLit());
789:       assertFalse(node0.isContinue());
790:       assertFalse(node0.isNot());
791:       assertEquals((-1), node0.getSourcePosition());
792:       assertFalse(node0.isAnd());
793:       assertFalse(node0.isAdd());
794:       assertFalse(node0.isNew());
795:       assertFalse(node0.isBlock());
796:       assertFalse(node0.isCall());
797:       assertFalse(node0.isWhile());
798:       assertFalse(node0.isDo());
799:       assertFalse(node0.isVar());
800:       assertFalse(node0.isReturn());
801:       assertEquals((-1), node0.getLineno());
802:       assertFalse(node0.isOr());
803:       assertFalse(node0.isSetterDef());
804:       assertFalse(node0.isCatch());
805:       assertFalse(node0.isTypeOf());
806:       assertFalse(node0.hasMoreThanOneChild());
807:       assertFalse(node0.isNull());
808:       assertFalse(node0.isGetElem());
809:       assertFalse(node0.isTrue());
810:       assertFalse(node0.isVoid());
811:       assertFalse(node0.isName());
812:       assertFalse(node0.isTry());
813:       assertFalse(node0.hasOneChild());
814:       assertFalse(node0.isArrayLit());
815:       assertFalse(node0.isScript());
816:       assertFalse(node0.isRegExp());
817:       assertFalse(node0.isEmpty());
818:       assertFalse(node0.isFor());
819:       assertFalse(node0.isAssignAdd());
820:       assertFalse(node0.isDefaultCase());
821:       assertEquals((-598), node0.getType());
822:       assertEquals(0, node0.getChildCount());
823:       assertFalse(node0.isLabel());
824:       assertFalse(node0.isNumber());
825:       assertFalse(node0.isLabelName());
826:       assertFalse(node0.isGetterDef());
827:       assertFalse(node0.isParamList());
828:       assertFalse(node0.isStringKey());
829:       assertFalse(node0.isSwitch());
830:       assertEquals(8, Node.FLAG_NO_THROWS);
831:       assertEquals(48, Node.DIRECTIVES);
832:       assertEquals(50, Node.FREE_CALL);
833:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
834:       assertEquals(40, Node.ORIGINALNAME_PROP);
835:       assertEquals(39, Node.EMPTY_BLOCK);
836:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
837:       assertEquals(57, Node.REFLECTED_OBJECT);
838:       assertEquals(52, Node.LENGTH);
839:       assertEquals(54, Node.SLASH_V);
840:       assertEquals(49, Node.DIRECT_EVAL);
841:       assertEquals(1, Node.DECR_FLAG);
842:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
843:       assertEquals(4095, Node.COLUMN_MASK);
844:       assertEquals(32, Node.INCRDECR_PROP);
845:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
846:       assertEquals(12, Node.COLUMN_BITS);
847:       assertEquals(56, Node.CHANGE_TIME);
848:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
849:       assertEquals(47, Node.IS_DISPATCHER);
850:       assertEquals(37, Node.OPT_ARG_NAME);
851:       assertEquals(2, Node.POST_FLAG);
852:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
853:       assertEquals(29, Node.JSDOC_INFO_PROP);
854:       assertEquals(51, Node.STATIC_SOURCE_FILE);
855:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
856:       assertEquals(46, Node.IS_NAMESPACE);
857:       assertEquals(43, Node.IS_CONSTANT_NAME);
858:       assertEquals(15, Node.NO_SIDE_EFFECTS);
859:       assertEquals(36, Node.QUOTED_PROP);
860:       assertEquals(57, Node.LAST_PROP);
861:       assertEquals(30, Node.VAR_ARGS_NAME);
862:       assertEquals(53, Node.INPUT_ID);
863:       assertEquals(55, Node.INFERRED_FUNCTION);
864:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
865:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
866:       
867:       JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
868:       assertNull(jSDocInfo0);
869:       assertFalse(node0.isHook());
870:       assertEquals((-1), node0.getCharno());
871:       assertFalse(node0.isInc());
872:       assertFalse(node0.isFalse());
873:       assertFalse(node0.isString());
874:       assertFalse(node0.isCase());
875:       assertFalse(node0.isThis());
876:       assertFalse(node0.isThrow());
877:       assertFalse(node0.isComma());
878:       assertFalse(node0.isInstanceOf());
879:       assertFalse(node0.isIn());
880:       assertFalse(node0.isWith());
881:       assertFalse(node0.isDelProp());
882:       assertFalse(node0.isBreak());
883:       assertFalse(node0.isNE());
884:       assertFalse(node0.isIf());
885:       assertFalse(node0.isDebugger());
886:       assertFalse(node0.isExprResult());
887:       assertFalse(node0.isFunction());
888:       assertFalse(node0.isCast());
889:       assertFalse(node0.isAssign());
890:       assertFalse(node0.isDec());
891:       assertFalse(node0.hasChildren());
892:       assertFalse(node0.isGetProp());
893:       assertFalse(node0.isObjectLit());
894:       assertFalse(node0.isContinue());
895:       assertFalse(node0.isNot());
896:       assertEquals((-1), node0.getSourcePosition());
897:       assertFalse(node0.isAnd());
898:       assertFalse(node0.isAdd());
899:       assertFalse(node0.isNew());
900:       assertFalse(node0.isBlock());
901:       assertFalse(node0.isCall());
902:       assertFalse(node0.isWhile());
903:       assertFalse(node0.isDo());
904:       assertFalse(node0.isVar());
905:       assertFalse(node0.isReturn());
906:       assertEquals((-1), node0.getLineno());
907:       assertFalse(node0.isOr());
908:       assertFalse(node0.isSetterDef());
909:       assertFalse(node0.isCatch());
910:       assertFalse(node0.isTypeOf());
911:       assertFalse(node0.hasMoreThanOneChild());
912:       assertFalse(node0.isNull());
913:       assertFalse(node0.isGetElem());
914:       assertFalse(node0.isTrue());
915:       assertFalse(node0.isVoid());
916:       assertFalse(node0.isName());
917:       assertFalse(node0.isTry());
918:       assertFalse(node0.hasOneChild());
919:       assertFalse(node0.isArrayLit());
920:       assertFalse(node0.isScript());
921:       assertFalse(node0.isRegExp());
922:       assertFalse(node0.isEmpty());
923:       assertFalse(node0.isFor());
924:       assertFalse(node0.isAssignAdd());
925:       assertFalse(node0.isDefaultCase());
926:       assertEquals((-598), node0.getType());
927:       assertEquals(0, node0.getChildCount());
928:       assertFalse(node0.isLabel());
929:       assertFalse(node0.isNumber());
930:       assertFalse(node0.isLabelName());
931:       assertFalse(node0.isGetterDef());
932:       assertFalse(node0.isParamList());
933:       assertFalse(node0.isStringKey());
934:       assertFalse(node0.isSwitch());
935:       assertEquals(8, Node.FLAG_NO_THROWS);
936:       assertEquals(48, Node.DIRECTIVES);
937:       assertEquals(50, Node.FREE_CALL);
938:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
939:       assertEquals(40, Node.ORIGINALNAME_PROP);
940:       assertEquals(39, Node.EMPTY_BLOCK);
941:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
942:       assertEquals(57, Node.REFLECTED_OBJECT);
943:       assertEquals(52, Node.LENGTH);
944:       assertEquals(54, Node.SLASH_V);
945:       assertEquals(49, Node.DIRECT_EVAL);
946:       assertEquals(1, Node.DECR_FLAG);
947:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
948:       assertEquals(4095, Node.COLUMN_MASK);
949:       assertEquals(32, Node.INCRDECR_PROP);
950:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
951:       assertEquals(12, Node.COLUMN_BITS);
952:       assertEquals(56, Node.CHANGE_TIME);
953:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
954:       assertEquals(47, Node.IS_DISPATCHER);
955:       assertEquals(37, Node.OPT_ARG_NAME);
956:       assertEquals(2, Node.POST_FLAG);
957:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
958:       assertEquals(29, Node.JSDOC_INFO_PROP);
959:       assertEquals(51, Node.STATIC_SOURCE_FILE);
960:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
961:       assertEquals(46, Node.IS_NAMESPACE);
962:       assertEquals(43, Node.IS_CONSTANT_NAME);
963:       assertEquals(15, Node.NO_SIDE_EFFECTS);
964:       assertEquals(36, Node.QUOTED_PROP);
965:       assertEquals(57, Node.LAST_PROP);
966:       assertEquals(30, Node.VAR_ARGS_NAME);
967:       assertEquals(53, Node.INPUT_ID);
968:       assertEquals(55, Node.INFERRED_FUNCTION);
969:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
970:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
971:       
972:       Node node1 = new Node(1, node0, (-3028), 2);
973:       assertNotNull(node1);
974:       assertFalse(node1.equals((Object)node0));
975:       assertFalse(node0.isHook());
976:       assertEquals((-1), node0.getCharno());
977:       assertFalse(node0.isInc());
978:       assertFalse(node0.isFalse());
979:       assertFalse(node0.isString());
980:       assertFalse(node0.isCase());
981:       assertFalse(node0.isThis());
982:       assertFalse(node0.isThrow());
983:       assertFalse(node0.isComma());
984:       assertFalse(node0.isInstanceOf());
985:       assertFalse(node0.isIn());
986:       assertFalse(node0.isWith());
987:       assertFalse(node0.isDelProp());
988:       assertFalse(node0.isBreak());
989:       assertFalse(node0.isNE());
990:       assertFalse(node0.isIf());
991:       assertFalse(node0.isDebugger());
992:       assertFalse(node0.isExprResult());
993:       assertFalse(node0.isFunction());
994:       assertFalse(node0.isCast());
995:       assertFalse(node0.isAssign());
996:       assertFalse(node0.isDec());
997:       assertFalse(node0.hasChildren());
998:       assertFalse(node0.isGetProp());
999:       assertFalse(node0.isObjectLit());
1000:       assertFalse(node0.isContinue());
1001:       assertFalse(node0.isNot());
1002:       assertEquals((-1), node0.getSourcePosition());
1003:       assertFalse(node0.isAnd());
1004:       assertFalse(node0.isAdd());
1005:       assertFalse(node0.isNew());
1006:       assertFalse(node0.isBlock());
1007:       assertFalse(node0.isCall());
1008:       assertFalse(node0.isWhile());
1009:       assertFalse(node0.isDo());
1010:       assertFalse(node0.isVar());
1011:       assertFalse(node0.isReturn());
1012:       assertEquals((-1), node0.getLineno());
1013:       assertFalse(node0.isOr());
1014:       assertFalse(node0.isSetterDef());
1015:       assertFalse(node0.isCatch());
1016:       assertFalse(node0.isTypeOf());
1017:       assertFalse(node0.hasMoreThanOneChild());
1018:       assertFalse(node0.isNull());
1019:       assertFalse(node0.isGetElem());
1020:       assertFalse(node0.isTrue());
1021:       assertFalse(node0.isVoid());
1022:       assertFalse(node0.isName());
1023:       assertFalse(node0.isTry());
1024:       assertFalse(node0.hasOneChild());
1025:       assertFalse(node0.isArrayLit());
1026:       assertFalse(node0.isScript());
1027:       assertFalse(node0.isRegExp());
1028:       assertFalse(node0.isEmpty());
1029:       assertFalse(node0.isFor());
1030:       assertFalse(node0.isAssignAdd());
1031:       assertFalse(node0.isDefaultCase());
1032:       assertEquals((-598), node0.getType());
1033:       assertEquals(0, node0.getChildCount());
1034:       assertFalse(node0.isLabel());
1035:       assertFalse(node0.isNumber());
1036:       assertFalse(node0.isLabelName());
1037:       assertFalse(node0.isGetterDef());
1038:       assertFalse(node0.isParamList());
1039:       assertFalse(node0.isStringKey());
1040:       assertFalse(node0.isSwitch());
1041:       assertFalse(node1.isParamList());
1042:       assertFalse(node1.isSetterDef());
1043:       assertFalse(node1.isStringKey());
1044:       assertFalse(node1.isNull());
1045:       assertFalse(node1.isTrue());
1046:       assertFalse(node1.isDebugger());
1047:       assertFalse(node1.isBlock());
1048:       assertFalse(node1.isCall());
1049:       assertFalse(node1.isName());
1050:       assertFalse(node1.isVoid());
1051:       assertFalse(node1.isTry());
1052:       assertFalse(node1.isWhile());
1053:       assertTrue(node1.hasOneChild());
1054:       assertFalse(node1.isFor());
1055:       assertFalse(node1.hasMoreThanOneChild());
1056:       assertFalse(node1.isCatch());
1057:       assertFalse(node1.isRegExp());
1058:       assertEquals(1, node1.getChildCount());
1059:       assertFalse(node1.isAssignAdd());
1060:       assertFalse(node1.isLabel());
1061:       assertFalse(node1.isCase());
1062:       assertFalse(node1.isDo());
1063:       assertFalse(node1.isDelProp());
1064:       assertFalse(node1.isEmpty());
1065:       assertEquals((-1), node1.getCharno());
1066:       assertFalse(node1.isNumber());
1067:       assertFalse(node1.isOr());
1068:       assertFalse(node1.isGetterDef());
1069:       assertFalse(node1.isAdd());
1070:       assertFalse(node1.isVar());
1071:       assertEquals(1, node1.getType());
1072:       assertFalse(node1.isSwitch());
1073:       assertFalse(node1.isArrayLit());
1074:       assertFalse(node1.isNew());
1075:       assertFalse(node1.isLabelName());
1076:       assertFalse(node1.isDefaultCase());
1077:       assertFalse(node1.isInstanceOf());
1078:       assertFalse(node1.isGetProp());
1079:       assertFalse(node1.isAnd());
1080:       assertFalse(node1.isScript());
1081:       assertFalse(node1.isObjectLit());
1082:       assertFalse(node1.isNot());
1083:       assertFalse(node1.isHook());
1084:       assertFalse(node1.isExprResult());
1085:       assertFalse(node1.isWith());
1086:       assertFalse(node1.isBreak());
1087:       assertFalse(node1.isGetElem());
1088:       assertFalse(node1.isComma());
1089:       assertFalse(node1.isThis());
1090:       assertFalse(node1.isDec());
1091:       assertFalse(node1.isTypeOf());
1092:       assertFalse(node1.isAssign());
1093:       assertFalse(node1.isReturn());
1094:       assertEquals((-1), node1.getLineno());
1095:       assertFalse(node1.isIn());
1096:       assertTrue(node1.hasChildren());
1097:       assertFalse(node1.isString());
1098:       assertFalse(node1.isIf());
1099:       assertFalse(node1.isNE());
1100:       assertEquals((-1), node1.getSourcePosition());
1101:       assertFalse(node1.isCast());
1102:       assertFalse(node1.isInc());
1103:       assertFalse(node1.isThrow());
1104:       assertFalse(node1.isFunction());
1105:       assertFalse(node1.isContinue());
1106:       assertFalse(node1.isFalse());
1107:       assertEquals(8, Node.FLAG_NO_THROWS);
1108:       assertEquals(48, Node.DIRECTIVES);
1109:       assertEquals(50, Node.FREE_CALL);
1110:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1111:       assertEquals(40, Node.ORIGINALNAME_PROP);
1112:       assertEquals(39, Node.EMPTY_BLOCK);
1113:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1114:       assertEquals(57, Node.REFLECTED_OBJECT);
1115:       assertEquals(52, Node.LENGTH);
1116:       assertEquals(54, Node.SLASH_V);
1117:       assertEquals(49, Node.DIRECT_EVAL);
1118:       assertEquals(1, Node.DECR_FLAG);
1119:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1120:       assertEquals(4095, Node.COLUMN_MASK);
1121:       assertEquals(32, Node.INCRDECR_PROP);
1122:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1123:       assertEquals(12, Node.COLUMN_BITS);
1124:       assertEquals(56, Node.CHANGE_TIME);
1125:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1126:       assertEquals(47, Node.IS_DISPATCHER);
1127:       assertEquals(37, Node.OPT_ARG_NAME);
1128:       assertEquals(2, Node.POST_FLAG);
1129:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1130:       assertEquals(29, Node.JSDOC_INFO_PROP);
1131:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1132:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1133:       assertEquals(46, Node.IS_NAMESPACE);
1134:       assertEquals(43, Node.IS_CONSTANT_NAME);
1135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1136:       assertEquals(36, Node.QUOTED_PROP);
1137:       assertEquals(57, Node.LAST_PROP);
1138:       assertEquals(30, Node.VAR_ARGS_NAME);
1139:       assertEquals(53, Node.INPUT_ID);
1140:       assertEquals(55, Node.INFERRED_FUNCTION);
1141:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1142:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1143:       assertEquals(43, Node.IS_CONSTANT_NAME);
1144:       assertEquals(36, Node.QUOTED_PROP);
1145:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1146:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1147:       assertEquals(4095, Node.COLUMN_MASK);
1148:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1149:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1150:       assertEquals(32, Node.INCRDECR_PROP);
1151:       assertEquals(46, Node.IS_NAMESPACE);
1152:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1153:       assertEquals(50, Node.FREE_CALL);
1154:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1155:       assertEquals(57, Node.LAST_PROP);
1156:       assertEquals(30, Node.VAR_ARGS_NAME);
1157:       assertEquals(1, Node.DECR_FLAG);
1158:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1159:       assertEquals(49, Node.DIRECT_EVAL);
1160:       assertEquals(54, Node.SLASH_V);
1161:       assertEquals(12, Node.COLUMN_BITS);
1162:       assertEquals(40, Node.ORIGINALNAME_PROP);
1163:       assertEquals(56, Node.CHANGE_TIME);
1164:       assertEquals(47, Node.IS_DISPATCHER);
1165:       assertEquals(2, Node.POST_FLAG);
1166:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1167:       assertEquals(39, Node.EMPTY_BLOCK);
1168:       assertEquals(37, Node.OPT_ARG_NAME);
1169:       assertEquals(48, Node.DIRECTIVES);
1170:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1171:       assertEquals(57, Node.REFLECTED_OBJECT);
1172:       assertEquals(29, Node.JSDOC_INFO_PROP);
1173:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1174:       assertEquals(53, Node.INPUT_ID);
1175:       assertEquals(55, Node.INFERRED_FUNCTION);
1176:       assertEquals(52, Node.LENGTH);
1177:       assertEquals(8, Node.FLAG_NO_THROWS);
1178:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1179:       
1180:       Node node2 = node0.useSourceInfoFromForTree(node1);
1181:       assertNotNull(node2);
1182:       assertFalse(node0.equals((Object)node1));
1183:       assertFalse(node1.equals((Object)node0));
1184:       assertFalse(node2.equals((Object)node1));
1185:       assertFalse(node0.isHook());
1186:       assertEquals((-1), node0.getCharno());
1187:       assertFalse(node0.isInc());
1188:       assertFalse(node0.isFalse());
1189:       assertFalse(node0.isString());
1190:       assertFalse(node0.isCase());
1191:       assertFalse(node0.isThis());
1192:       assertFalse(node0.isThrow());
1193:       assertFalse(node0.isComma());
1194:       assertFalse(node0.isInstanceOf());
1195:       assertFalse(node0.isIn());
1196:       assertFalse(node0.isWith());
1197:       assertFalse(node0.isDelProp());
1198:       assertFalse(node0.isBreak());
1199:       assertFalse(node0.isNE());
1200:       assertFalse(node0.isIf());
1201:       assertFalse(node0.isDebugger());
1202:       assertFalse(node0.isExprResult());
1203:       assertFalse(node0.isFunction());
1204:       assertFalse(node0.isCast());
1205:       assertFalse(node0.isAssign());
1206:       assertFalse(node0.isDec());
1207:       assertFalse(node0.hasChildren());
1208:       assertFalse(node0.isGetProp());
1209:       assertFalse(node0.isObjectLit());
1210:       assertFalse(node0.isContinue());
1211:       assertFalse(node0.isNot());
1212:       assertEquals((-1), node0.getSourcePosition());
1213:       assertFalse(node0.isAnd());
1214:       assertFalse(node0.isAdd());
1215:       assertFalse(node0.isNew());
1216:       assertFalse(node0.isBlock());
1217:       assertFalse(node0.isCall());
1218:       assertFalse(node0.isWhile());
1219:       assertFalse(node0.isDo());
1220:       assertFalse(node0.isVar());
1221:       assertFalse(node0.isReturn());
1222:       assertEquals((-1), node0.getLineno());
1223:       assertFalse(node0.isOr());
1224:       assertFalse(node0.isSetterDef());
1225:       assertFalse(node0.isCatch());
1226:       assertFalse(node0.isTypeOf());
1227:       assertFalse(node0.hasMoreThanOneChild());
1228:       assertFalse(node0.isNull());
1229:       assertFalse(node0.isGetElem());
1230:       assertFalse(node0.isTrue());
1231:       assertFalse(node0.isVoid());
1232:       assertFalse(node0.isName());
1233:       assertFalse(node0.isTry());
1234:       assertFalse(node0.hasOneChild());
1235:       assertFalse(node0.isArrayLit());
1236:       assertFalse(node0.isScript());
1237:       assertFalse(node0.isRegExp());
1238:       assertFalse(node0.isEmpty());
1239:       assertFalse(node0.isFor());
1240:       assertFalse(node0.isAssignAdd());
1241:       assertFalse(node0.isDefaultCase());
1242:       assertEquals((-598), node0.getType());
1243:       assertEquals(0, node0.getChildCount());
1244:       assertFalse(node0.isLabel());
1245:       assertFalse(node0.isNumber());
1246:       assertFalse(node0.isLabelName());
1247:       assertFalse(node0.isGetterDef());
1248:       assertFalse(node0.isParamList());
1249:       assertFalse(node0.isStringKey());
1250:       assertFalse(node0.isSwitch());
1251:       assertFalse(node1.isParamList());
1252:       assertFalse(node1.isSetterDef());
1253:       assertFalse(node1.isStringKey());
1254:       assertFalse(node1.isNull());
1255:       assertFalse(node1.isTrue());
1256:       assertFalse(node1.isDebugger());
1257:       assertFalse(node1.isBlock());
1258:       assertFalse(node1.isCall());
1259:       assertFalse(node1.isName());
1260:       assertFalse(node1.isVoid());
1261:       assertFalse(node1.isTry());
1262:       assertFalse(node1.isWhile());
1263:       assertTrue(node1.hasOneChild());
1264:       assertFalse(node1.isFor());
1265:       assertFalse(node1.hasMoreThanOneChild());
1266:       assertFalse(node1.isCatch());
1267:       assertFalse(node1.isRegExp());
1268:       assertEquals(1, node1.getChildCount());
1269:       assertFalse(node1.isAssignAdd());
1270:       assertFalse(node1.isLabel());
1271:       assertFalse(node1.isCase());
1272:       assertFalse(node1.isDo());
1273:       assertFalse(node1.isDelProp());
1274:       assertFalse(node1.isEmpty());
1275:       assertEquals((-1), node1.getCharno());
1276:       assertFalse(node1.isNumber());
1277:       assertFalse(node1.isOr());
1278:       assertFalse(node1.isGetterDef());
1279:       assertFalse(node1.isAdd());
1280:       assertFalse(node1.isVar());
1281:       assertEquals(1, node1.getType());
1282:       assertFalse(node1.isSwitch());
1283:       assertFalse(node1.isArrayLit());
1284:       assertFalse(node1.isNew());
1285:       assertFalse(node1.isLabelName());
1286:       assertFalse(node1.isDefaultCase());
1287:       assertFalse(node1.isInstanceOf());
1288:       assertFalse(node1.isGetProp());
1289:       assertFalse(node1.isAnd());
1290:       assertFalse(node1.isScript());
1291:       assertFalse(node1.isObjectLit());
1292:       assertFalse(node1.isNot());
1293:       assertFalse(node1.isHook());
1294:       assertFalse(node1.isExprResult());
1295:       assertFalse(node1.isWith());
1296:       assertFalse(node1.isBreak());
1297:       assertFalse(node1.isGetElem());
1298:       assertFalse(node1.isComma());
1299:       assertFalse(node1.isThis());
1300:       assertFalse(node1.isDec());
1301:       assertFalse(node1.isTypeOf());
1302:       assertFalse(node1.isAssign());
1303:       assertFalse(node1.isReturn());
1304:       assertEquals((-1), node1.getLineno());
1305:       assertFalse(node1.isIn());
1306:       assertTrue(node1.hasChildren());
1307:       assertFalse(node1.isString());
1308:       assertFalse(node1.isIf());
1309:       assertFalse(node1.isNE());
1310:       assertEquals((-1), node1.getSourcePosition());
1311:       assertFalse(node1.isCast());
1312:       assertFalse(node1.isInc());
1313:       assertFalse(node1.isThrow());
1314:       assertFalse(node1.isFunction());
1315:       assertFalse(node1.isContinue());
1316:       assertFalse(node1.isFalse());
1317:       assertFalse(node2.isHook());
1318:       assertEquals((-1), node2.getCharno());
1319:       assertFalse(node2.isFalse());
1320:       assertFalse(node2.isBreak());
1321:       assertFalse(node2.isSwitch());
1322:       assertFalse(node2.isInstanceOf());
1323:       assertFalse(node2.isComma());
1324:       assertFalse(node2.isThis());
1325:       assertFalse(node2.isObjectLit());
1326:       assertFalse(node2.isNot());
1327:       assertFalse(node2.isGetterDef());
1328:       assertFalse(node2.isString());
1329:       assertFalse(node2.isScript());
1330:       assertFalse(node2.isFor());
1331:       assertFalse(node2.isGetProp());
1332:       assertFalse(node2.isCase());
1333:       assertFalse(node2.isCast());
1334:       assertFalse(node2.isFunction());
1335:       assertFalse(node2.isDebugger());
1336:       assertFalse(node2.isRegExp());
1337:       assertFalse(node2.isWith());
1338:       assertFalse(node2.isIf());
1339:       assertFalse(node2.isNE());
1340:       assertFalse(node2.isAnd());
1341:       assertFalse(node2.isIn());
1342:       assertFalse(node2.isContinue());
1343:       assertFalse(node2.isThrow());
1344:       assertFalse(node2.isInc());
1345:       assertFalse(node2.isSetterDef());
1346:       assertFalse(node2.isBlock());
1347:       assertFalse(node2.isAdd());
1348:       assertFalse(node2.isVar());
1349:       assertFalse(node2.isStringKey());
1350:       assertFalse(node2.isNull());
1351:       assertFalse(node2.isCall());
1352:       assertFalse(node2.isParamList());
1353:       assertFalse(node2.isName());
1354:       assertFalse(node2.isReturn());
1355:       assertEquals((-1), node2.getLineno());
1356:       assertFalse(node2.hasMoreThanOneChild());
1357:       assertFalse(node2.isCatch());
1358:       assertFalse(node2.isNumber());
1359:       assertEquals((-1), node2.getSourcePosition());
1360:       assertFalse(node2.isDec());
1361:       assertFalse(node2.isTypeOf());
1362:       assertFalse(node2.isWhile());
1363:       assertFalse(node2.hasChildren());
1364:       assertFalse(node2.hasOneChild());
1365:       assertFalse(node2.isTry());
1366:       assertFalse(node2.isTrue());
1367:       assertFalse(node2.isAssign());
1368:       assertFalse(node2.isGetElem());
1369:       assertFalse(node2.isExprResult());
1370:       assertFalse(node2.isArrayLit());
1371:       assertFalse(node2.isLabelName());
1372:       assertFalse(node2.isVoid());
1373:       assertFalse(node2.isDelProp());
1374:       assertFalse(node2.isAssignAdd());
1375:       assertFalse(node2.isLabel());
1376:       assertFalse(node2.isOr());
1377:       assertEquals(0, node2.getChildCount());
1378:       assertFalse(node2.isDefaultCase());
1379:       assertFalse(node2.isEmpty());
1380:       assertEquals((-598), node2.getType());
1381:       assertFalse(node2.isNew());
1382:       assertFalse(node2.isDo());
1383:       assertSame(node0, node2);
1384:       assertSame(node2, node0);
1385:       assertEquals(8, Node.FLAG_NO_THROWS);
1386:       assertEquals(48, Node.DIRECTIVES);
1387:       assertEquals(50, Node.FREE_CALL);
1388:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1389:       assertEquals(40, Node.ORIGINALNAME_PROP);
1390:       assertEquals(39, Node.EMPTY_BLOCK);
1391:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1392:       assertEquals(57, Node.REFLECTED_OBJECT);
1393:       assertEquals(52, Node.LENGTH);
1394:       assertEquals(54, Node.SLASH_V);
1395:       assertEquals(49, Node.DIRECT_EVAL);
1396:       assertEquals(1, Node.DECR_FLAG);
1397:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1398:       assertEquals(4095, Node.COLUMN_MASK);
1399:       assertEquals(32, Node.INCRDECR_PROP);
1400:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1401:       assertEquals(12, Node.COLUMN_BITS);
1402:       assertEquals(56, Node.CHANGE_TIME);
1403:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1404:       assertEquals(47, Node.IS_DISPATCHER);
1405:       assertEquals(37, Node.OPT_ARG_NAME);
1406:       assertEquals(2, Node.POST_FLAG);
1407:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1408:       assertEquals(29, Node.JSDOC_INFO_PROP);
1409:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1410:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1411:       assertEquals(46, Node.IS_NAMESPACE);
1412:       assertEquals(43, Node.IS_CONSTANT_NAME);
1413:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1414:       assertEquals(36, Node.QUOTED_PROP);
1415:       assertEquals(57, Node.LAST_PROP);
1416:       assertEquals(30, Node.VAR_ARGS_NAME);
1417:       assertEquals(53, Node.INPUT_ID);
1418:       assertEquals(55, Node.INFERRED_FUNCTION);
1419:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1420:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1421:       assertEquals(43, Node.IS_CONSTANT_NAME);
1422:       assertEquals(36, Node.QUOTED_PROP);
1423:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1424:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1425:       assertEquals(4095, Node.COLUMN_MASK);
1426:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1427:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1428:       assertEquals(32, Node.INCRDECR_PROP);
1429:       assertEquals(46, Node.IS_NAMESPACE);
1430:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1431:       assertEquals(50, Node.FREE_CALL);
1432:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1433:       assertEquals(57, Node.LAST_PROP);
1434:       assertEquals(30, Node.VAR_ARGS_NAME);
1435:       assertEquals(1, Node.DECR_FLAG);
1436:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1437:       assertEquals(49, Node.DIRECT_EVAL);
1438:       assertEquals(54, Node.SLASH_V);
1439:       assertEquals(12, Node.COLUMN_BITS);
1440:       assertEquals(40, Node.ORIGINALNAME_PROP);
1441:       assertEquals(56, Node.CHANGE_TIME);
1442:       assertEquals(47, Node.IS_DISPATCHER);
1443:       assertEquals(2, Node.POST_FLAG);
1444:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1445:       assertEquals(39, Node.EMPTY_BLOCK);
1446:       assertEquals(37, Node.OPT_ARG_NAME);
1447:       assertEquals(48, Node.DIRECTIVES);
1448:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1449:       assertEquals(57, Node.REFLECTED_OBJECT);
1450:       assertEquals(29, Node.JSDOC_INFO_PROP);
1451:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1452:       assertEquals(53, Node.INPUT_ID);
1453:       assertEquals(55, Node.INFERRED_FUNCTION);
1454:       assertEquals(52, Node.LENGTH);
1455:       assertEquals(8, Node.FLAG_NO_THROWS);
1456:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1457:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1458:       assertEquals(39, Node.EMPTY_BLOCK);
1459:       assertEquals(40, Node.ORIGINALNAME_PROP);
1460:       assertEquals(50, Node.FREE_CALL);
1461:       assertEquals(8, Node.FLAG_NO_THROWS);
1462:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1463:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1464:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1465:       assertEquals(43, Node.IS_CONSTANT_NAME);
1466:       assertEquals(30, Node.VAR_ARGS_NAME);
1467:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1468:       assertEquals(46, Node.IS_NAMESPACE);
1469:       assertEquals(54, Node.SLASH_V);
1470:       assertEquals(56, Node.CHANGE_TIME);
1471:       assertEquals(47, Node.IS_DISPATCHER);
1472:       assertEquals(2, Node.POST_FLAG);
1473:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1474:       assertEquals(37, Node.OPT_ARG_NAME);
1475:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1476:       assertEquals(29, Node.JSDOC_INFO_PROP);
1477:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1478:       assertEquals(12, Node.COLUMN_BITS);
1479:       assertEquals(32, Node.INCRDECR_PROP);
1480:       assertEquals(1, Node.DECR_FLAG);
1481:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1482:       assertEquals(57, Node.LAST_PROP);
1483:       assertEquals(36, Node.QUOTED_PROP);
1484:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1485:       assertEquals(53, Node.INPUT_ID);
1486:       assertEquals(55, Node.INFERRED_FUNCTION);
1487:       assertEquals(52, Node.LENGTH);
1488:       assertEquals(4095, Node.COLUMN_MASK);
1489:       assertEquals(57, Node.REFLECTED_OBJECT);
1490:       assertEquals(48, Node.DIRECTIVES);
1491:       assertEquals(49, Node.DIRECT_EVAL);
1492:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1493:       
1494:       Node node3 = Node.newNumber((double) 4095);
1495:       assertNotNull(node3);
1496:       assertFalse(node3.equals((Object)node0));
1497:       assertFalse(node3.equals((Object)node1));
1498:       assertFalse(node3.equals((Object)node2));
1499:       assertFalse(node3.isCatch());
1500:       assertFalse(node3.isRegExp());
1501:       assertEquals(0, node3.getChildCount());
1502:       assertFalse(node3.isSetterDef());
1503:       assertFalse(node3.isDefaultCase());
1504:       assertFalse(node3.isTry());
1505:       assertFalse(node3.isVar());
1506:       assertFalse(node3.isStringKey());
1507:       assertFalse(node3.isGetterDef());
1508:       assertFalse(node3.isDebugger());
1509:       assertFalse(node3.isFunction());
1510:       assertFalse(node3.isParamList());
1511:       assertFalse(node3.isArrayLit());
1512:       assertFalse(node3.isContinue());
1513:       assertFalse(node3.hasMoreThanOneChild());
1514:       assertFalse(node3.isIn());
1515:       assertEquals(39, node3.getType());
1516:       assertFalse(node3.isInc());
1517:       assertFalse(node3.isBlock());
1518:       assertFalse(node3.isCase());
1519:       assertFalse(node3.isFor());
1520:       assertFalse(node3.isHook());
1521:       assertFalse(node3.isNE());
1522:       assertFalse(node3.isIf());
1523:       assertEquals((-1), node3.getLineno());
1524:       assertFalse(node3.isAnd());
1525:       assertFalse(node3.isObjectLit());
1526:       assertFalse(node3.isInstanceOf());
1527:       assertFalse(node3.isWith());
1528:       assertFalse(node3.isNot());
1529:       assertFalse(node3.isGetProp());
1530:       assertFalse(node3.isThis());
1531:       assertFalse(node3.isScript());
1532:       assertFalse(node3.hasOneChild());
1533:       assertFalse(node3.isFalse());
1534:       assertFalse(node3.isCast());
1535:       assertFalse(node3.isThrow());
1536:       assertEquals((-1), node3.getSourcePosition());
1537:       assertEquals((-1), node3.getCharno());
1538:       assertFalse(node3.isSwitch());
1539:       assertFalse(node3.isLabelName());
1540:       assertFalse(node3.isWhile());
1541:       assertFalse(node3.isString());
1542:       assertFalse(node3.isReturn());
1543:       assertFalse(node3.isOr());
1544:       assertFalse(node3.isLabel());
1545:       assertFalse(node3.isAssignAdd());
1546:       assertFalse(node3.isAdd());
1547:       assertFalse(node3.isDo());
1548:       assertTrue(node3.isNumber());
1549:       assertFalse(node3.isNew());
1550:       assertFalse(node3.isCall());
1551:       assertFalse(node3.isGetElem());
1552:       assertFalse(node3.isEmpty());
1553:       assertFalse(node3.hasChildren());
1554:       assertFalse(node3.isTypeOf());
1555:       assertFalse(node3.isAssign());
1556:       assertFalse(node3.isComma());
1557:       assertFalse(node3.isDec());
1558:       assertFalse(node3.isExprResult());
1559:       assertFalse(node3.isVoid());
1560:       assertFalse(node3.isTrue());
1561:       assertFalse(node3.isNull());
1562:       assertFalse(node3.isBreak());
1563:       assertFalse(node3.isDelProp());
1564:       assertFalse(node3.isName());
1565:       assertEquals(53, Node.INPUT_ID);
1566:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1567:       assertEquals(36, Node.QUOTED_PROP);
1568:       assertEquals(43, Node.IS_CONSTANT_NAME);
1569:       assertEquals(56, Node.CHANGE_TIME);
1570:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1571:       assertEquals(39, Node.EMPTY_BLOCK);
1572:       assertEquals(2, Node.POST_FLAG);
1573:       assertEquals(55, Node.INFERRED_FUNCTION);
1574:       assertEquals(8, Node.FLAG_NO_THROWS);
1575:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1576:       assertEquals(29, Node.JSDOC_INFO_PROP);
1577:       assertEquals(30, Node.VAR_ARGS_NAME);
1578:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1579:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1580:       assertEquals(47, Node.IS_DISPATCHER);
1581:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1582:       assertEquals(57, Node.LAST_PROP);
1583:       assertEquals(54, Node.SLASH_V);
1584:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1585:       assertEquals(57, Node.REFLECTED_OBJECT);
1586:       assertEquals(52, Node.LENGTH);
1587:       assertEquals(49, Node.DIRECT_EVAL);
1588:       assertEquals(50, Node.FREE_CALL);
1589:       assertEquals(40, Node.ORIGINALNAME_PROP);
1590:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1591:       assertEquals(48, Node.DIRECTIVES);
1592:       assertEquals(37, Node.OPT_ARG_NAME);
1593:       assertEquals(46, Node.IS_NAMESPACE);
1594:       assertEquals(4095, Node.COLUMN_MASK);
1595:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1596:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1597:       assertEquals(1, Node.DECR_FLAG);
1598:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1599:       assertEquals(12, Node.COLUMN_BITS);
1600:       assertEquals(32, Node.INCRDECR_PROP);
1601:       
1602:       // Undeclared exception!
1603:       try { 
1604:         node3.addChildrenToBack(node0);
1605:         fail("Expecting exception: IllegalArgumentException");
1606:       
1607:       } catch(IllegalArgumentException e) {
1608:          //
1609:          // no message in exception (getMessage() returned null)
1610:          //
1611:          verifyException("com.google.common.base.Preconditions", e);
1612:       }
1613:   }
1614: }
RegularFileObject[/tmp/EvoSuite_70_1629222934388/com/google/javascript/rhino/Node_70_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:55:34 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_70_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_70_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_70_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.jstype.TemplatizedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.collect.AbstractIndexedListIterator",
335:       "com.google.common.collect.Iterators$11",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.common.base.Objects",
339:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.Iterators$12",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
354:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.JSType$TypePair",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
366:       "com.google.javascript.rhino.jstype.NamespaceType"
367:     );
368:   }
369: }

[MASTER] 17:55:34.823 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-598), "", (-598), 108);
assertNotNull(node0);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean0 = node0.isBlock();
assertFalse(boolean0);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean1 = node0.isNoSideEffectsCall();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

int int0 = node0.getLineno();
assertEquals((-1), int0);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean2 = node0.isOptionalArg();
assertFalse(boolean2);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

String string0 = node0.getQualifiedName();
assertNull(string0);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

int int1 = node0.getIntProp((-239));
assertEquals(0, int1);
assertFalse(int1 == int0);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
assertNull(jSDocInfo0);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Node node1 = new Node(1, node0, (-3028), 2);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertEquals(1, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isHook());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isString());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);

Node node2 = node0.useSourceInfoFromForTree(node1);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals((-598), node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertEquals(1, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isHook());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isString());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isGetterDef());
assertFalse(node2.isString());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertEquals((-598), node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertSame(node0, node2);
assertSame(node2, node0);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Node node3 = Node.newNumber((double) 4095);
assertNotNull(node3);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isIn());
assertEquals(39, node3.getType());
assertFalse(node3.isInc());
assertFalse(node3.isBlock());
assertFalse(node3.isCase());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertEquals((-1), node3.getSourcePosition());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabelName());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isReturn());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isAdd());
assertFalse(node3.isDo());
assertTrue(node3.isNumber());
assertFalse(node3.isNew());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.isEmpty());
assertFalse(node3.hasChildren());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

node3.addChildrenToBack(node0);

[MASTER] 17:55:47.624 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_114_1629222947574/com/google/javascript/rhino/Node_114_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_114_1629222947574/com/google/javascript/rhino/Node_114_tmp__ESTest_scaffolding.java]]
[MASTER] 17:55:47.624 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:47.624 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:47.628 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 445
[MASTER] 17:55:47.629 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_114_1629222947574/com/google/javascript/rhino/Node_114_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:55:47 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_114_tmp__ESTest extends Node_114_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString((-598), "", (-598), 108);
23:       assertNotNull(node0);
24:       assertFalse(node0.isNumber());
25:       assertFalse(node0.hasChildren());
26:       assertFalse(node0.isDec());
27:       assertEquals((-1), node0.getSourcePosition());
28:       assertFalse(node0.isLabelName());
29:       assertFalse(node0.isAssign());
30:       assertFalse(node0.isTypeOf());
31:       assertFalse(node0.isGetElem());
32:       assertFalse(node0.isCast());
33:       assertFalse(node0.hasOneChild());
34:       assertFalse(node0.isAssignAdd());
35:       assertFalse(node0.hasMoreThanOneChild());
36:       assertFalse(node0.isLabel());
37:       assertFalse(node0.isReturn());
38:       assertFalse(node0.isDo());
39:       assertFalse(node0.isWith());
40:       assertFalse(node0.isNew());
41:       assertFalse(node0.isAdd());
42:       assertFalse(node0.isExprResult());
43:       assertFalse(node0.isOr());
44:       assertEquals((-1), node0.getLineno());
45:       assertFalse(node0.isBreak());
46:       assertFalse(node0.isComma());
47:       assertFalse(node0.isName());
48:       assertFalse(node0.isGetProp());
49:       assertFalse(node0.isFalse());
50:       assertFalse(node0.isSetterDef());
51:       assertFalse(node0.isCall());
52:       assertFalse(node0.isThrow());
53:       assertFalse(node0.isWhile());
54:       assertFalse(node0.isString());
55:       assertFalse(node0.isNot());
56:       assertFalse(node0.isFunction());
57:       assertFalse(node0.isContinue());
58:       assertFalse(node0.isObjectLit());
59:       assertFalse(node0.isAnd());
60:       assertFalse(node0.isDebugger());
61:       assertFalse(node0.isIf());
62:       assertFalse(node0.isDelProp());
63:       assertFalse(node0.isGetterDef());
64:       assertFalse(node0.isEmpty());
65:       assertFalse(node0.isTry());
66:       assertFalse(node0.isFor());
67:       assertFalse(node0.isDefaultCase());
68:       assertFalse(node0.isVoid());
69:       assertFalse(node0.isRegExp());
70:       assertFalse(node0.isInc());
71:       assertFalse(node0.isCatch());
72:       assertFalse(node0.isIn());
73:       assertFalse(node0.isNE());
74:       assertFalse(node0.isNull());
75:       assertFalse(node0.isTrue());
76:       assertEquals(0, node0.getChildCount());
77:       assertFalse(node0.isInstanceOf());
78:       assertFalse(node0.isHook());
79:       assertEquals((-598), node0.getType());
80:       assertFalse(node0.isThis());
81:       assertFalse(node0.isVar());
82:       assertFalse(node0.isBlock());
83:       assertFalse(node0.isSwitch());
84:       assertFalse(node0.isCase());
85:       assertFalse(node0.isScript());
86:       assertFalse(node0.isArrayLit());
87:       assertFalse(node0.isStringKey());
88:       assertEquals((-1), node0.getCharno());
89:       assertFalse(node0.isParamList());
90:       assertEquals(12, Node.COLUMN_BITS);
91:       assertEquals(49, Node.DIRECT_EVAL);
92:       assertEquals(32, Node.INCRDECR_PROP);
93:       assertEquals(15, Node.NO_SIDE_EFFECTS);
94:       assertEquals(1, Node.DECR_FLAG);
95:       assertEquals(37, Node.OPT_ARG_NAME);
96:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
97:       assertEquals(54, Node.SLASH_V);
98:       assertEquals(56, Node.CHANGE_TIME);
99:       assertEquals(52, Node.LENGTH);
100:       assertEquals(46, Node.IS_NAMESPACE);
101:       assertEquals(51, Node.STATIC_SOURCE_FILE);
102:       assertEquals(57, Node.REFLECTED_OBJECT);
103:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
104:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
105:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
106:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
107:       assertEquals(55, Node.INFERRED_FUNCTION);
108:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
109:       assertEquals(4095, Node.COLUMN_MASK);
110:       assertEquals(48, Node.DIRECTIVES);
111:       assertEquals(8, Node.FLAG_NO_THROWS);
112:       assertEquals(39, Node.EMPTY_BLOCK);
113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
114:       assertEquals(43, Node.IS_CONSTANT_NAME);
115:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
116:       assertEquals(50, Node.FREE_CALL);
117:       assertEquals(36, Node.QUOTED_PROP);
118:       assertEquals(40, Node.ORIGINALNAME_PROP);
119:       assertEquals(29, Node.JSDOC_INFO_PROP);
120:       assertEquals(53, Node.INPUT_ID);
121:       assertEquals(2, Node.POST_FLAG);
122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
123:       assertEquals(57, Node.LAST_PROP);
124:       assertEquals(30, Node.VAR_ARGS_NAME);
125:       assertEquals(47, Node.IS_DISPATCHER);
126:       
127:       boolean boolean0 = node0.isBlock();
128:       assertFalse(boolean0);
129:       assertFalse(node0.isNumber());
130:       assertFalse(node0.hasChildren());
131:       assertFalse(node0.isDec());
132:       assertEquals((-1), node0.getSourcePosition());
133:       assertFalse(node0.isLabelName());
134:       assertFalse(node0.isAssign());
135:       assertFalse(node0.isTypeOf());
136:       assertFalse(node0.isGetElem());
137:       assertFalse(node0.isCast());
138:       assertFalse(node0.hasOneChild());
139:       assertFalse(node0.isAssignAdd());
140:       assertFalse(node0.hasMoreThanOneChild());
141:       assertFalse(node0.isLabel());
142:       assertFalse(node0.isReturn());
143:       assertFalse(node0.isDo());
144:       assertFalse(node0.isWith());
145:       assertFalse(node0.isNew());
146:       assertFalse(node0.isAdd());
147:       assertFalse(node0.isExprResult());
148:       assertFalse(node0.isOr());
149:       assertEquals((-1), node0.getLineno());
150:       assertFalse(node0.isBreak());
151:       assertFalse(node0.isComma());
152:       assertFalse(node0.isName());
153:       assertFalse(node0.isGetProp());
154:       assertFalse(node0.isFalse());
155:       assertFalse(node0.isSetterDef());
156:       assertFalse(node0.isCall());
157:       assertFalse(node0.isThrow());
158:       assertFalse(node0.isWhile());
159:       assertFalse(node0.isString());
160:       assertFalse(node0.isNot());
161:       assertFalse(node0.isFunction());
162:       assertFalse(node0.isContinue());
163:       assertFalse(node0.isObjectLit());
164:       assertFalse(node0.isAnd());
165:       assertFalse(node0.isDebugger());
166:       assertFalse(node0.isIf());
167:       assertFalse(node0.isDelProp());
168:       assertFalse(node0.isGetterDef());
169:       assertFalse(node0.isEmpty());
170:       assertFalse(node0.isTry());
171:       assertFalse(node0.isFor());
172:       assertFalse(node0.isDefaultCase());
173:       assertFalse(node0.isVoid());
174:       assertFalse(node0.isRegExp());
175:       assertFalse(node0.isInc());
176:       assertFalse(node0.isCatch());
177:       assertFalse(node0.isIn());
178:       assertFalse(node0.isNE());
179:       assertFalse(node0.isNull());
180:       assertFalse(node0.isTrue());
181:       assertEquals(0, node0.getChildCount());
182:       assertFalse(node0.isInstanceOf());
183:       assertFalse(node0.isHook());
184:       assertEquals((-598), node0.getType());
185:       assertFalse(node0.isThis());
186:       assertFalse(node0.isVar());
187:       assertFalse(node0.isBlock());
188:       assertFalse(node0.isSwitch());
189:       assertFalse(node0.isCase());
190:       assertFalse(node0.isScript());
191:       assertFalse(node0.isArrayLit());
192:       assertFalse(node0.isStringKey());
193:       assertEquals((-1), node0.getCharno());
194:       assertFalse(node0.isParamList());
195:       assertEquals(12, Node.COLUMN_BITS);
196:       assertEquals(49, Node.DIRECT_EVAL);
197:       assertEquals(32, Node.INCRDECR_PROP);
198:       assertEquals(15, Node.NO_SIDE_EFFECTS);
199:       assertEquals(1, Node.DECR_FLAG);
200:       assertEquals(37, Node.OPT_ARG_NAME);
201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
202:       assertEquals(54, Node.SLASH_V);
203:       assertEquals(56, Node.CHANGE_TIME);
204:       assertEquals(52, Node.LENGTH);
205:       assertEquals(46, Node.IS_NAMESPACE);
206:       assertEquals(51, Node.STATIC_SOURCE_FILE);
207:       assertEquals(57, Node.REFLECTED_OBJECT);
208:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
209:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
210:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
211:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
212:       assertEquals(55, Node.INFERRED_FUNCTION);
213:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
214:       assertEquals(4095, Node.COLUMN_MASK);
215:       assertEquals(48, Node.DIRECTIVES);
216:       assertEquals(8, Node.FLAG_NO_THROWS);
217:       assertEquals(39, Node.EMPTY_BLOCK);
218:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
219:       assertEquals(43, Node.IS_CONSTANT_NAME);
220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
221:       assertEquals(50, Node.FREE_CALL);
222:       assertEquals(36, Node.QUOTED_PROP);
223:       assertEquals(40, Node.ORIGINALNAME_PROP);
224:       assertEquals(29, Node.JSDOC_INFO_PROP);
225:       assertEquals(53, Node.INPUT_ID);
226:       assertEquals(2, Node.POST_FLAG);
227:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
228:       assertEquals(57, Node.LAST_PROP);
229:       assertEquals(30, Node.VAR_ARGS_NAME);
230:       assertEquals(47, Node.IS_DISPATCHER);
231:       
232:       boolean boolean1 = node0.isNoSideEffectsCall();
233:       assertFalse(boolean1);
234:       assertTrue(boolean1 == boolean0);
235:       assertFalse(node0.isNumber());
236:       assertFalse(node0.hasChildren());
237:       assertFalse(node0.isDec());
238:       assertEquals((-1), node0.getSourcePosition());
239:       assertFalse(node0.isLabelName());
240:       assertFalse(node0.isAssign());
241:       assertFalse(node0.isTypeOf());
242:       assertFalse(node0.isGetElem());
243:       assertFalse(node0.isCast());
244:       assertFalse(node0.hasOneChild());
245:       assertFalse(node0.isAssignAdd());
246:       assertFalse(node0.hasMoreThanOneChild());
247:       assertFalse(node0.isLabel());
248:       assertFalse(node0.isReturn());
249:       assertFalse(node0.isDo());
250:       assertFalse(node0.isWith());
251:       assertFalse(node0.isNew());
252:       assertFalse(node0.isAdd());
253:       assertFalse(node0.isExprResult());
254:       assertFalse(node0.isOr());
255:       assertEquals((-1), node0.getLineno());
256:       assertFalse(node0.isBreak());
257:       assertFalse(node0.isComma());
258:       assertFalse(node0.isName());
259:       assertFalse(node0.isGetProp());
260:       assertFalse(node0.isFalse());
261:       assertFalse(node0.isSetterDef());
262:       assertFalse(node0.isCall());
263:       assertFalse(node0.isThrow());
264:       assertFalse(node0.isWhile());
265:       assertFalse(node0.isString());
266:       assertFalse(node0.isNot());
267:       assertFalse(node0.isFunction());
268:       assertFalse(node0.isContinue());
269:       assertFalse(node0.isObjectLit());
270:       assertFalse(node0.isAnd());
271:       assertFalse(node0.isDebugger());
272:       assertFalse(node0.isIf());
273:       assertFalse(node0.isDelProp());
274:       assertFalse(node0.isGetterDef());
275:       assertFalse(node0.isEmpty());
276:       assertFalse(node0.isTry());
277:       assertFalse(node0.isFor());
278:       assertFalse(node0.isDefaultCase());
279:       assertFalse(node0.isVoid());
280:       assertFalse(node0.isRegExp());
281:       assertFalse(node0.isInc());
282:       assertFalse(node0.isCatch());
283:       assertFalse(node0.isIn());
284:       assertFalse(node0.isNE());
285:       assertFalse(node0.isNull());
286:       assertFalse(node0.isTrue());
287:       assertEquals(0, node0.getChildCount());
288:       assertFalse(node0.isInstanceOf());
289:       assertFalse(node0.isHook());
290:       assertEquals((-598), node0.getType());
291:       assertFalse(node0.isThis());
292:       assertFalse(node0.isVar());
293:       assertFalse(node0.isBlock());
294:       assertFalse(node0.isSwitch());
295:       assertFalse(node0.isCase());
296:       assertFalse(node0.isScript());
297:       assertFalse(node0.isArrayLit());
298:       assertFalse(node0.isStringKey());
299:       assertEquals((-1), node0.getCharno());
300:       assertFalse(node0.isParamList());
301:       assertEquals(12, Node.COLUMN_BITS);
302:       assertEquals(49, Node.DIRECT_EVAL);
303:       assertEquals(32, Node.INCRDECR_PROP);
304:       assertEquals(15, Node.NO_SIDE_EFFECTS);
305:       assertEquals(1, Node.DECR_FLAG);
306:       assertEquals(37, Node.OPT_ARG_NAME);
307:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
308:       assertEquals(54, Node.SLASH_V);
309:       assertEquals(56, Node.CHANGE_TIME);
310:       assertEquals(52, Node.LENGTH);
311:       assertEquals(46, Node.IS_NAMESPACE);
312:       assertEquals(51, Node.STATIC_SOURCE_FILE);
313:       assertEquals(57, Node.REFLECTED_OBJECT);
314:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
315:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
316:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
317:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
318:       assertEquals(55, Node.INFERRED_FUNCTION);
319:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
320:       assertEquals(4095, Node.COLUMN_MASK);
321:       assertEquals(48, Node.DIRECTIVES);
322:       assertEquals(8, Node.FLAG_NO_THROWS);
323:       assertEquals(39, Node.EMPTY_BLOCK);
324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
325:       assertEquals(43, Node.IS_CONSTANT_NAME);
326:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
327:       assertEquals(50, Node.FREE_CALL);
328:       assertEquals(36, Node.QUOTED_PROP);
329:       assertEquals(40, Node.ORIGINALNAME_PROP);
330:       assertEquals(29, Node.JSDOC_INFO_PROP);
331:       assertEquals(53, Node.INPUT_ID);
332:       assertEquals(2, Node.POST_FLAG);
333:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
334:       assertEquals(57, Node.LAST_PROP);
335:       assertEquals(30, Node.VAR_ARGS_NAME);
336:       assertEquals(47, Node.IS_DISPATCHER);
337:       
338:       int int0 = node0.getLineno();
339:       assertEquals((-1), int0);
340:       assertFalse(node0.isNumber());
341:       assertFalse(node0.hasChildren());
342:       assertFalse(node0.isDec());
343:       assertEquals((-1), node0.getSourcePosition());
344:       assertFalse(node0.isLabelName());
345:       assertFalse(node0.isAssign());
346:       assertFalse(node0.isTypeOf());
347:       assertFalse(node0.isGetElem());
348:       assertFalse(node0.isCast());
349:       assertFalse(node0.hasOneChild());
350:       assertFalse(node0.isAssignAdd());
351:       assertFalse(node0.hasMoreThanOneChild());
352:       assertFalse(node0.isLabel());
353:       assertFalse(node0.isReturn());
354:       assertFalse(node0.isDo());
355:       assertFalse(node0.isWith());
356:       assertFalse(node0.isNew());
357:       assertFalse(node0.isAdd());
358:       assertFalse(node0.isExprResult());
359:       assertFalse(node0.isOr());
360:       assertEquals((-1), node0.getLineno());
361:       assertFalse(node0.isBreak());
362:       assertFalse(node0.isComma());
363:       assertFalse(node0.isName());
364:       assertFalse(node0.isGetProp());
365:       assertFalse(node0.isFalse());
366:       assertFalse(node0.isSetterDef());
367:       assertFalse(node0.isCall());
368:       assertFalse(node0.isThrow());
369:       assertFalse(node0.isWhile());
370:       assertFalse(node0.isString());
371:       assertFalse(node0.isNot());
372:       assertFalse(node0.isFunction());
373:       assertFalse(node0.isContinue());
374:       assertFalse(node0.isObjectLit());
375:       assertFalse(node0.isAnd());
376:       assertFalse(node0.isDebugger());
377:       assertFalse(node0.isIf());
378:       assertFalse(node0.isDelProp());
379:       assertFalse(node0.isGetterDef());
380:       assertFalse(node0.isEmpty());
381:       assertFalse(node0.isTry());
382:       assertFalse(node0.isFor());
383:       assertFalse(node0.isDefaultCase());
384:       assertFalse(node0.isVoid());
385:       assertFalse(node0.isRegExp());
386:       assertFalse(node0.isInc());
387:       assertFalse(node0.isCatch());
388:       assertFalse(node0.isIn());
389:       assertFalse(node0.isNE());
390:       assertFalse(node0.isNull());
391:       assertFalse(node0.isTrue());
392:       assertEquals(0, node0.getChildCount());
393:       assertFalse(node0.isInstanceOf());
394:       assertFalse(node0.isHook());
395:       assertEquals((-598), node0.getType());
396:       assertFalse(node0.isThis());
397:       assertFalse(node0.isVar());
398:       assertFalse(node0.isBlock());
399:       assertFalse(node0.isSwitch());
400:       assertFalse(node0.isCase());
401:       assertFalse(node0.isScript());
402:       assertFalse(node0.isArrayLit());
403:       assertFalse(node0.isStringKey());
404:       assertEquals((-1), node0.getCharno());
405:       assertFalse(node0.isParamList());
406:       assertEquals(12, Node.COLUMN_BITS);
407:       assertEquals(49, Node.DIRECT_EVAL);
408:       assertEquals(32, Node.INCRDECR_PROP);
409:       assertEquals(15, Node.NO_SIDE_EFFECTS);
410:       assertEquals(1, Node.DECR_FLAG);
411:       assertEquals(37, Node.OPT_ARG_NAME);
412:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
413:       assertEquals(54, Node.SLASH_V);
414:       assertEquals(56, Node.CHANGE_TIME);
415:       assertEquals(52, Node.LENGTH);
416:       assertEquals(46, Node.IS_NAMESPACE);
417:       assertEquals(51, Node.STATIC_SOURCE_FILE);
418:       assertEquals(57, Node.REFLECTED_OBJECT);
419:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
420:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
421:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
422:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
423:       assertEquals(55, Node.INFERRED_FUNCTION);
424:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
425:       assertEquals(4095, Node.COLUMN_MASK);
426:       assertEquals(48, Node.DIRECTIVES);
427:       assertEquals(8, Node.FLAG_NO_THROWS);
428:       assertEquals(39, Node.EMPTY_BLOCK);
429:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
430:       assertEquals(43, Node.IS_CONSTANT_NAME);
431:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
432:       assertEquals(50, Node.FREE_CALL);
433:       assertEquals(36, Node.QUOTED_PROP);
434:       assertEquals(40, Node.ORIGINALNAME_PROP);
435:       assertEquals(29, Node.JSDOC_INFO_PROP);
436:       assertEquals(53, Node.INPUT_ID);
437:       assertEquals(2, Node.POST_FLAG);
438:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
439:       assertEquals(57, Node.LAST_PROP);
440:       assertEquals(30, Node.VAR_ARGS_NAME);
441:       assertEquals(47, Node.IS_DISPATCHER);
442:       
443:       Iterable<Node> iterable0 = node0.children();
444:       assertNotNull(iterable0);
445:       assertFalse(iterable0.contains(node0));
446:       assertFalse(node0.isNumber());
447:       assertFalse(node0.hasChildren());
448:       assertFalse(node0.isDec());
449:       assertEquals((-1), node0.getSourcePosition());
450:       assertFalse(node0.isLabelName());
451:       assertFalse(node0.isAssign());
452:       assertFalse(node0.isTypeOf());
453:       assertFalse(node0.isGetElem());
454:       assertFalse(node0.isCast());
455:       assertFalse(node0.hasOneChild());
456:       assertFalse(node0.isAssignAdd());
457:       assertFalse(node0.hasMoreThanOneChild());
458:       assertFalse(node0.isLabel());
459:       assertFalse(node0.isReturn());
460:       assertFalse(node0.isDo());
461:       assertFalse(node0.isWith());
462:       assertFalse(node0.isNew());
463:       assertFalse(node0.isAdd());
464:       assertFalse(node0.isExprResult());
465:       assertFalse(node0.isOr());
466:       assertEquals((-1), node0.getLineno());
467:       assertFalse(node0.isBreak());
468:       assertFalse(node0.isComma());
469:       assertFalse(node0.isName());
470:       assertFalse(node0.isGetProp());
471:       assertFalse(node0.isFalse());
472:       assertFalse(node0.isSetterDef());
473:       assertFalse(node0.isCall());
474:       assertFalse(node0.isThrow());
475:       assertFalse(node0.isWhile());
476:       assertFalse(node0.isString());
477:       assertFalse(node0.isNot());
478:       assertFalse(node0.isFunction());
479:       assertFalse(node0.isContinue());
480:       assertFalse(node0.isObjectLit());
481:       assertFalse(node0.isAnd());
482:       assertFalse(node0.isDebugger());
483:       assertFalse(node0.isIf());
484:       assertFalse(node0.isDelProp());
485:       assertFalse(node0.isGetterDef());
486:       assertFalse(node0.isEmpty());
487:       assertFalse(node0.isTry());
488:       assertFalse(node0.isFor());
489:       assertFalse(node0.isDefaultCase());
490:       assertFalse(node0.isVoid());
491:       assertFalse(node0.isRegExp());
492:       assertFalse(node0.isInc());
493:       assertFalse(node0.isCatch());
494:       assertFalse(node0.isIn());
495:       assertFalse(node0.isNE());
496:       assertFalse(node0.isNull());
497:       assertFalse(node0.isTrue());
498:       assertEquals(0, node0.getChildCount());
499:       assertFalse(node0.isInstanceOf());
500:       assertFalse(node0.isHook());
501:       assertEquals((-598), node0.getType());
502:       assertFalse(node0.isThis());
503:       assertFalse(node0.isVar());
504:       assertFalse(node0.isBlock());
505:       assertFalse(node0.isSwitch());
506:       assertFalse(node0.isCase());
507:       assertFalse(node0.isScript());
508:       assertFalse(node0.isArrayLit());
509:       assertFalse(node0.isStringKey());
510:       assertEquals((-1), node0.getCharno());
511:       assertFalse(node0.isParamList());
512:       assertEquals(12, Node.COLUMN_BITS);
513:       assertEquals(49, Node.DIRECT_EVAL);
514:       assertEquals(32, Node.INCRDECR_PROP);
515:       assertEquals(15, Node.NO_SIDE_EFFECTS);
516:       assertEquals(1, Node.DECR_FLAG);
517:       assertEquals(37, Node.OPT_ARG_NAME);
518:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
519:       assertEquals(54, Node.SLASH_V);
520:       assertEquals(56, Node.CHANGE_TIME);
521:       assertEquals(52, Node.LENGTH);
522:       assertEquals(46, Node.IS_NAMESPACE);
523:       assertEquals(51, Node.STATIC_SOURCE_FILE);
524:       assertEquals(57, Node.REFLECTED_OBJECT);
525:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
526:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
527:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
528:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
529:       assertEquals(55, Node.INFERRED_FUNCTION);
530:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
531:       assertEquals(4095, Node.COLUMN_MASK);
532:       assertEquals(48, Node.DIRECTIVES);
533:       assertEquals(8, Node.FLAG_NO_THROWS);
534:       assertEquals(39, Node.EMPTY_BLOCK);
535:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
536:       assertEquals(43, Node.IS_CONSTANT_NAME);
537:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
538:       assertEquals(50, Node.FREE_CALL);
539:       assertEquals(36, Node.QUOTED_PROP);
540:       assertEquals(40, Node.ORIGINALNAME_PROP);
541:       assertEquals(29, Node.JSDOC_INFO_PROP);
542:       assertEquals(53, Node.INPUT_ID);
543:       assertEquals(2, Node.POST_FLAG);
544:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
545:       assertEquals(57, Node.LAST_PROP);
546:       assertEquals(30, Node.VAR_ARGS_NAME);
547:       assertEquals(47, Node.IS_DISPATCHER);
548:       
549:       boolean boolean2 = node0.isOptionalArg();
550:       assertFalse(boolean2);
551:       assertTrue(boolean2 == boolean0);
552:       assertTrue(boolean2 == boolean1);
553:       assertFalse(node0.isNumber());
554:       assertFalse(node0.hasChildren());
555:       assertFalse(node0.isDec());
556:       assertEquals((-1), node0.getSourcePosition());
557:       assertFalse(node0.isLabelName());
558:       assertFalse(node0.isAssign());
559:       assertFalse(node0.isTypeOf());
560:       assertFalse(node0.isGetElem());
561:       assertFalse(node0.isCast());
562:       assertFalse(node0.hasOneChild());
563:       assertFalse(node0.isAssignAdd());
564:       assertFalse(node0.hasMoreThanOneChild());
565:       assertFalse(node0.isLabel());
566:       assertFalse(node0.isReturn());
567:       assertFalse(node0.isDo());
568:       assertFalse(node0.isWith());
569:       assertFalse(node0.isNew());
570:       assertFalse(node0.isAdd());
571:       assertFalse(node0.isExprResult());
572:       assertFalse(node0.isOr());
573:       assertEquals((-1), node0.getLineno());
574:       assertFalse(node0.isBreak());
575:       assertFalse(node0.isComma());
576:       assertFalse(node0.isName());
577:       assertFalse(node0.isGetProp());
578:       assertFalse(node0.isFalse());
579:       assertFalse(node0.isSetterDef());
580:       assertFalse(node0.isCall());
581:       assertFalse(node0.isThrow());
582:       assertFalse(node0.isWhile());
583:       assertFalse(node0.isString());
584:       assertFalse(node0.isNot());
585:       assertFalse(node0.isFunction());
586:       assertFalse(node0.isContinue());
587:       assertFalse(node0.isObjectLit());
588:       assertFalse(node0.isAnd());
589:       assertFalse(node0.isDebugger());
590:       assertFalse(node0.isIf());
591:       assertFalse(node0.isDelProp());
592:       assertFalse(node0.isGetterDef());
593:       assertFalse(node0.isEmpty());
594:       assertFalse(node0.isTry());
595:       assertFalse(node0.isFor());
596:       assertFalse(node0.isDefaultCase());
597:       assertFalse(node0.isVoid());
598:       assertFalse(node0.isRegExp());
599:       assertFalse(node0.isInc());
600:       assertFalse(node0.isCatch());
601:       assertFalse(node0.isIn());
602:       assertFalse(node0.isNE());
603:       assertFalse(node0.isNull());
604:       assertFalse(node0.isTrue());
605:       assertEquals(0, node0.getChildCount());
606:       assertFalse(node0.isInstanceOf());
607:       assertFalse(node0.isHook());
608:       assertEquals((-598), node0.getType());
609:       assertFalse(node0.isThis());
610:       assertFalse(node0.isVar());
611:       assertFalse(node0.isBlock());
612:       assertFalse(node0.isSwitch());
613:       assertFalse(node0.isCase());
614:       assertFalse(node0.isScript());
615:       assertFalse(node0.isArrayLit());
616:       assertFalse(node0.isStringKey());
617:       assertEquals((-1), node0.getCharno());
618:       assertFalse(node0.isParamList());
619:       assertEquals(12, Node.COLUMN_BITS);
620:       assertEquals(49, Node.DIRECT_EVAL);
621:       assertEquals(32, Node.INCRDECR_PROP);
622:       assertEquals(15, Node.NO_SIDE_EFFECTS);
623:       assertEquals(1, Node.DECR_FLAG);
624:       assertEquals(37, Node.OPT_ARG_NAME);
625:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
626:       assertEquals(54, Node.SLASH_V);
627:       assertEquals(56, Node.CHANGE_TIME);
628:       assertEquals(52, Node.LENGTH);
629:       assertEquals(46, Node.IS_NAMESPACE);
630:       assertEquals(51, Node.STATIC_SOURCE_FILE);
631:       assertEquals(57, Node.REFLECTED_OBJECT);
632:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
633:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
634:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
635:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
636:       assertEquals(55, Node.INFERRED_FUNCTION);
637:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
638:       assertEquals(4095, Node.COLUMN_MASK);
639:       assertEquals(48, Node.DIRECTIVES);
640:       assertEquals(8, Node.FLAG_NO_THROWS);
641:       assertEquals(39, Node.EMPTY_BLOCK);
642:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
643:       assertEquals(43, Node.IS_CONSTANT_NAME);
644:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
645:       assertEquals(50, Node.FREE_CALL);
646:       assertEquals(36, Node.QUOTED_PROP);
647:       assertEquals(40, Node.ORIGINALNAME_PROP);
648:       assertEquals(29, Node.JSDOC_INFO_PROP);
649:       assertEquals(53, Node.INPUT_ID);
650:       assertEquals(2, Node.POST_FLAG);
651:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
652:       assertEquals(57, Node.LAST_PROP);
653:       assertEquals(30, Node.VAR_ARGS_NAME);
654:       assertEquals(47, Node.IS_DISPATCHER);
655:       
656:       // Undeclared exception!
657:       try { 
658:         node0.setSideEffectFlags((-1));
659:         fail("Expecting exception: IllegalStateException");
660:       
661:       } catch(IllegalStateException e) {
662:          //
663:          // -598
664:          //
665:          verifyException("com.google.javascript.rhino.Token", e);
666:       }
667:   }
668: }
RegularFileObject[/tmp/EvoSuite_114_1629222947574/com/google/javascript/rhino/Node_114_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:55:47 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_114_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_114_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_114_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.jstype.TemplatizedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.collect.AbstractIndexedListIterator",
335:       "com.google.common.collect.Iterators$11",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.common.base.Objects",
339:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.Iterators$12",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
354:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.JSType$TypePair",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
366:       "com.google.javascript.rhino.jstype.NamespaceType"
367:     );
368:   }
369: }

[MASTER] 17:55:47.649 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-598), "", (-598), 108);
assertNotNull(node0);
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals((-598), node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean0 = node0.isBlock();
assertFalse(boolean0);
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals((-598), node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean1 = node0.isNoSideEffectsCall();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals((-598), node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

int int0 = node0.getLineno();
assertEquals((-1), int0);
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals((-598), node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals((-598), node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean2 = node0.isOptionalArg();
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals((-598), node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

node0.setSideEffectFlags((-1));

[MASTER] 17:55:54.223 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_132_1629222954166/com/google/javascript/rhino/Node_132_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_132_1629222954166/com/google/javascript/rhino/Node_132_tmp__ESTest_scaffolding.java]]
[MASTER] 17:55:54.223 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:54.223 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:54.225 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 339
[MASTER] 17:55:54.230 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_132_1629222954166/com/google/javascript/rhino/Node_132_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:55:54 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_132_tmp__ESTest extends Node_132_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(0.0, 0, 0);
23:       assertNotNull(node0);
24:       assertFalse(node0.isNE());
25:       assertFalse(node0.isDelProp());
26:       assertFalse(node0.isGetterDef());
27:       assertFalse(node0.isEmpty());
28:       assertFalse(node0.isIn());
29:       assertFalse(node0.isArrayLit());
30:       assertFalse(node0.isIf());
31:       assertFalse(node0.isSwitch());
32:       assertFalse(node0.isTrue());
33:       assertFalse(node0.isFunction());
34:       assertFalse(node0.isInc());
35:       assertEquals(0, node0.getChildCount());
36:       assertFalse(node0.isDefaultCase());
37:       assertFalse(node0.isThrow());
38:       assertFalse(node0.isSetterDef());
39:       assertFalse(node0.isThis());
40:       assertFalse(node0.isInstanceOf());
41:       assertFalse(node0.isCatch());
42:       assertFalse(node0.isParamList());
43:       assertFalse(node0.isStringKey());
44:       assertFalse(node0.isScript());
45:       assertFalse(node0.isRegExp());
46:       assertFalse(node0.isWith());
47:       assertFalse(node0.hasMoreThanOneChild());
48:       assertFalse(node0.isHook());
49:       assertFalse(node0.isCase());
50:       assertFalse(node0.hasOneChild());
51:       assertEquals(39, node0.getType());
52:       assertFalse(node0.isTry());
53:       assertFalse(node0.isFor());
54:       assertFalse(node0.isBlock());
55:       assertFalse(node0.isTypeOf());
56:       assertFalse(node0.hasChildren());
57:       assertFalse(node0.isDec());
58:       assertFalse(node0.isOr());
59:       assertFalse(node0.isAssign());
60:       assertFalse(node0.isGetElem());
61:       assertFalse(node0.isCast());
62:       assertFalse(node0.isLabelName());
63:       assertEquals(0, node0.getCharno());
64:       assertFalse(node0.isNew());
65:       assertFalse(node0.isAdd());
66:       assertFalse(node0.isContinue());
67:       assertFalse(node0.isVar());
68:       assertFalse(node0.isAssignAdd());
69:       assertFalse(node0.isDo());
70:       assertFalse(node0.isLabel());
71:       assertFalse(node0.isNull());
72:       assertEquals(0, node0.getSourcePosition());
73:       assertFalse(node0.isGetProp());
74:       assertFalse(node0.isBreak());
75:       assertFalse(node0.isComma());
76:       assertEquals(0, node0.getLineno());
77:       assertFalse(node0.isFalse());
78:       assertFalse(node0.isObjectLit());
79:       assertFalse(node0.isCall());
80:       assertFalse(node0.isName());
81:       assertFalse(node0.isAnd());
82:       assertFalse(node0.isExprResult());
83:       assertFalse(node0.isVoid());
84:       assertFalse(node0.isDebugger());
85:       assertFalse(node0.isNot());
86:       assertFalse(node0.isString());
87:       assertTrue(node0.isNumber());
88:       assertFalse(node0.isReturn());
89:       assertFalse(node0.isWhile());
90:       assertEquals(1, Node.DECR_FLAG);
91:       assertEquals(30, Node.VAR_ARGS_NAME);
92:       assertEquals(49, Node.DIRECT_EVAL);
93:       assertEquals(32, Node.INCRDECR_PROP);
94:       assertEquals(15, Node.NO_SIDE_EFFECTS);
95:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
96:       assertEquals(2, Node.POST_FLAG);
97:       assertEquals(57, Node.LAST_PROP);
98:       assertEquals(47, Node.IS_DISPATCHER);
99:       assertEquals(12, Node.COLUMN_BITS);
100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
101:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
102:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
103:       assertEquals(29, Node.JSDOC_INFO_PROP);
104:       assertEquals(39, Node.EMPTY_BLOCK);
105:       assertEquals(53, Node.INPUT_ID);
106:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
107:       assertEquals(48, Node.DIRECTIVES);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(52, Node.LENGTH);
110:       assertEquals(8, Node.FLAG_NO_THROWS);
111:       assertEquals(56, Node.CHANGE_TIME);
112:       assertEquals(36, Node.QUOTED_PROP);
113:       assertEquals(57, Node.REFLECTED_OBJECT);
114:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
115:       assertEquals(4095, Node.COLUMN_MASK);
116:       assertEquals(55, Node.INFERRED_FUNCTION);
117:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
118:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
119:       assertEquals(50, Node.FREE_CALL);
120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
121:       assertEquals(40, Node.ORIGINALNAME_PROP);
122:       assertEquals(54, Node.SLASH_V);
123:       assertEquals(46, Node.IS_NAMESPACE);
124:       assertEquals(43, Node.IS_CONSTANT_NAME);
125:       assertEquals(51, Node.STATIC_SOURCE_FILE);
126:       
127:       boolean boolean0 = node0.isNoSideEffectsCall();
128:       assertFalse(boolean0);
129:       assertFalse(node0.isNE());
130:       assertFalse(node0.isDelProp());
131:       assertFalse(node0.isGetterDef());
132:       assertFalse(node0.isEmpty());
133:       assertFalse(node0.isIn());
134:       assertFalse(node0.isArrayLit());
135:       assertFalse(node0.isIf());
136:       assertFalse(node0.isSwitch());
137:       assertFalse(node0.isTrue());
138:       assertFalse(node0.isFunction());
139:       assertFalse(node0.isInc());
140:       assertEquals(0, node0.getChildCount());
141:       assertFalse(node0.isDefaultCase());
142:       assertFalse(node0.isThrow());
143:       assertFalse(node0.isSetterDef());
144:       assertFalse(node0.isThis());
145:       assertFalse(node0.isInstanceOf());
146:       assertFalse(node0.isCatch());
147:       assertFalse(node0.isParamList());
148:       assertFalse(node0.isStringKey());
149:       assertFalse(node0.isScript());
150:       assertFalse(node0.isRegExp());
151:       assertFalse(node0.isWith());
152:       assertFalse(node0.hasMoreThanOneChild());
153:       assertFalse(node0.isHook());
154:       assertFalse(node0.isCase());
155:       assertFalse(node0.hasOneChild());
156:       assertEquals(39, node0.getType());
157:       assertFalse(node0.isTry());
158:       assertFalse(node0.isFor());
159:       assertFalse(node0.isBlock());
160:       assertFalse(node0.isTypeOf());
161:       assertFalse(node0.hasChildren());
162:       assertFalse(node0.isDec());
163:       assertFalse(node0.isOr());
164:       assertFalse(node0.isAssign());
165:       assertFalse(node0.isGetElem());
166:       assertFalse(node0.isCast());
167:       assertFalse(node0.isLabelName());
168:       assertEquals(0, node0.getCharno());
169:       assertFalse(node0.isNew());
170:       assertFalse(node0.isAdd());
171:       assertFalse(node0.isContinue());
172:       assertFalse(node0.isVar());
173:       assertFalse(node0.isAssignAdd());
174:       assertFalse(node0.isDo());
175:       assertFalse(node0.isLabel());
176:       assertFalse(node0.isNull());
177:       assertEquals(0, node0.getSourcePosition());
178:       assertFalse(node0.isGetProp());
179:       assertFalse(node0.isBreak());
180:       assertFalse(node0.isComma());
181:       assertEquals(0, node0.getLineno());
182:       assertFalse(node0.isFalse());
183:       assertFalse(node0.isObjectLit());
184:       assertFalse(node0.isCall());
185:       assertFalse(node0.isName());
186:       assertFalse(node0.isAnd());
187:       assertFalse(node0.isExprResult());
188:       assertFalse(node0.isVoid());
189:       assertFalse(node0.isDebugger());
190:       assertFalse(node0.isNot());
191:       assertFalse(node0.isString());
192:       assertTrue(node0.isNumber());
193:       assertFalse(node0.isReturn());
194:       assertFalse(node0.isWhile());
195:       assertEquals(1, Node.DECR_FLAG);
196:       assertEquals(30, Node.VAR_ARGS_NAME);
197:       assertEquals(49, Node.DIRECT_EVAL);
198:       assertEquals(32, Node.INCRDECR_PROP);
199:       assertEquals(15, Node.NO_SIDE_EFFECTS);
200:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
201:       assertEquals(2, Node.POST_FLAG);
202:       assertEquals(57, Node.LAST_PROP);
203:       assertEquals(47, Node.IS_DISPATCHER);
204:       assertEquals(12, Node.COLUMN_BITS);
205:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
206:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
207:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
208:       assertEquals(29, Node.JSDOC_INFO_PROP);
209:       assertEquals(39, Node.EMPTY_BLOCK);
210:       assertEquals(53, Node.INPUT_ID);
211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
212:       assertEquals(48, Node.DIRECTIVES);
213:       assertEquals(37, Node.OPT_ARG_NAME);
214:       assertEquals(52, Node.LENGTH);
215:       assertEquals(8, Node.FLAG_NO_THROWS);
216:       assertEquals(56, Node.CHANGE_TIME);
217:       assertEquals(36, Node.QUOTED_PROP);
218:       assertEquals(57, Node.REFLECTED_OBJECT);
219:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
220:       assertEquals(4095, Node.COLUMN_MASK);
221:       assertEquals(55, Node.INFERRED_FUNCTION);
222:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
223:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
224:       assertEquals(50, Node.FREE_CALL);
225:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
226:       assertEquals(40, Node.ORIGINALNAME_PROP);
227:       assertEquals(54, Node.SLASH_V);
228:       assertEquals(46, Node.IS_NAMESPACE);
229:       assertEquals(43, Node.IS_CONSTANT_NAME);
230:       assertEquals(51, Node.STATIC_SOURCE_FILE);
231:       
232:       int int0 = node0.getLineno();
233:       assertEquals(0, int0);
234:       assertFalse(node0.isNE());
235:       assertFalse(node0.isDelProp());
236:       assertFalse(node0.isGetterDef());
237:       assertFalse(node0.isEmpty());
238:       assertFalse(node0.isIn());
239:       assertFalse(node0.isArrayLit());
240:       assertFalse(node0.isIf());
241:       assertFalse(node0.isSwitch());
242:       assertFalse(node0.isTrue());
243:       assertFalse(node0.isFunction());
244:       assertFalse(node0.isInc());
245:       assertEquals(0, node0.getChildCount());
246:       assertFalse(node0.isDefaultCase());
247:       assertFalse(node0.isThrow());
248:       assertFalse(node0.isSetterDef());
249:       assertFalse(node0.isThis());
250:       assertFalse(node0.isInstanceOf());
251:       assertFalse(node0.isCatch());
252:       assertFalse(node0.isParamList());
253:       assertFalse(node0.isStringKey());
254:       assertFalse(node0.isScript());
255:       assertFalse(node0.isRegExp());
256:       assertFalse(node0.isWith());
257:       assertFalse(node0.hasMoreThanOneChild());
258:       assertFalse(node0.isHook());
259:       assertFalse(node0.isCase());
260:       assertFalse(node0.hasOneChild());
261:       assertEquals(39, node0.getType());
262:       assertFalse(node0.isTry());
263:       assertFalse(node0.isFor());
264:       assertFalse(node0.isBlock());
265:       assertFalse(node0.isTypeOf());
266:       assertFalse(node0.hasChildren());
267:       assertFalse(node0.isDec());
268:       assertFalse(node0.isOr());
269:       assertFalse(node0.isAssign());
270:       assertFalse(node0.isGetElem());
271:       assertFalse(node0.isCast());
272:       assertFalse(node0.isLabelName());
273:       assertEquals(0, node0.getCharno());
274:       assertFalse(node0.isNew());
275:       assertFalse(node0.isAdd());
276:       assertFalse(node0.isContinue());
277:       assertFalse(node0.isVar());
278:       assertFalse(node0.isAssignAdd());
279:       assertFalse(node0.isDo());
280:       assertFalse(node0.isLabel());
281:       assertFalse(node0.isNull());
282:       assertEquals(0, node0.getSourcePosition());
283:       assertFalse(node0.isGetProp());
284:       assertFalse(node0.isBreak());
285:       assertFalse(node0.isComma());
286:       assertEquals(0, node0.getLineno());
287:       assertFalse(node0.isFalse());
288:       assertFalse(node0.isObjectLit());
289:       assertFalse(node0.isCall());
290:       assertFalse(node0.isName());
291:       assertFalse(node0.isAnd());
292:       assertFalse(node0.isExprResult());
293:       assertFalse(node0.isVoid());
294:       assertFalse(node0.isDebugger());
295:       assertFalse(node0.isNot());
296:       assertFalse(node0.isString());
297:       assertTrue(node0.isNumber());
298:       assertFalse(node0.isReturn());
299:       assertFalse(node0.isWhile());
300:       assertEquals(1, Node.DECR_FLAG);
301:       assertEquals(30, Node.VAR_ARGS_NAME);
302:       assertEquals(49, Node.DIRECT_EVAL);
303:       assertEquals(32, Node.INCRDECR_PROP);
304:       assertEquals(15, Node.NO_SIDE_EFFECTS);
305:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
306:       assertEquals(2, Node.POST_FLAG);
307:       assertEquals(57, Node.LAST_PROP);
308:       assertEquals(47, Node.IS_DISPATCHER);
309:       assertEquals(12, Node.COLUMN_BITS);
310:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
311:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
312:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
313:       assertEquals(29, Node.JSDOC_INFO_PROP);
314:       assertEquals(39, Node.EMPTY_BLOCK);
315:       assertEquals(53, Node.INPUT_ID);
316:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
317:       assertEquals(48, Node.DIRECTIVES);
318:       assertEquals(37, Node.OPT_ARG_NAME);
319:       assertEquals(52, Node.LENGTH);
320:       assertEquals(8, Node.FLAG_NO_THROWS);
321:       assertEquals(56, Node.CHANGE_TIME);
322:       assertEquals(36, Node.QUOTED_PROP);
323:       assertEquals(57, Node.REFLECTED_OBJECT);
324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
325:       assertEquals(4095, Node.COLUMN_MASK);
326:       assertEquals(55, Node.INFERRED_FUNCTION);
327:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
328:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
329:       assertEquals(50, Node.FREE_CALL);
330:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
331:       assertEquals(40, Node.ORIGINALNAME_PROP);
332:       assertEquals(54, Node.SLASH_V);
333:       assertEquals(46, Node.IS_NAMESPACE);
334:       assertEquals(43, Node.IS_CONSTANT_NAME);
335:       assertEquals(51, Node.STATIC_SOURCE_FILE);
336:       
337:       Iterable<Node> iterable0 = node0.children();
338:       assertNotNull(iterable0);
339:       assertFalse(iterable0.contains(node0));
340:       assertFalse(node0.isNE());
341:       assertFalse(node0.isDelProp());
342:       assertFalse(node0.isGetterDef());
343:       assertFalse(node0.isEmpty());
344:       assertFalse(node0.isIn());
345:       assertFalse(node0.isArrayLit());
346:       assertFalse(node0.isIf());
347:       assertFalse(node0.isSwitch());
348:       assertFalse(node0.isTrue());
349:       assertFalse(node0.isFunction());
350:       assertFalse(node0.isInc());
351:       assertEquals(0, node0.getChildCount());
352:       assertFalse(node0.isDefaultCase());
353:       assertFalse(node0.isThrow());
354:       assertFalse(node0.isSetterDef());
355:       assertFalse(node0.isThis());
356:       assertFalse(node0.isInstanceOf());
357:       assertFalse(node0.isCatch());
358:       assertFalse(node0.isParamList());
359:       assertFalse(node0.isStringKey());
360:       assertFalse(node0.isScript());
361:       assertFalse(node0.isRegExp());
362:       assertFalse(node0.isWith());
363:       assertFalse(node0.hasMoreThanOneChild());
364:       assertFalse(node0.isHook());
365:       assertFalse(node0.isCase());
366:       assertFalse(node0.hasOneChild());
367:       assertEquals(39, node0.getType());
368:       assertFalse(node0.isTry());
369:       assertFalse(node0.isFor());
370:       assertFalse(node0.isBlock());
371:       assertFalse(node0.isTypeOf());
372:       assertFalse(node0.hasChildren());
373:       assertFalse(node0.isDec());
374:       assertFalse(node0.isOr());
375:       assertFalse(node0.isAssign());
376:       assertFalse(node0.isGetElem());
377:       assertFalse(node0.isCast());
378:       assertFalse(node0.isLabelName());
379:       assertEquals(0, node0.getCharno());
380:       assertFalse(node0.isNew());
381:       assertFalse(node0.isAdd());
382:       assertFalse(node0.isContinue());
383:       assertFalse(node0.isVar());
384:       assertFalse(node0.isAssignAdd());
385:       assertFalse(node0.isDo());
386:       assertFalse(node0.isLabel());
387:       assertFalse(node0.isNull());
388:       assertEquals(0, node0.getSourcePosition());
389:       assertFalse(node0.isGetProp());
390:       assertFalse(node0.isBreak());
391:       assertFalse(node0.isComma());
392:       assertEquals(0, node0.getLineno());
393:       assertFalse(node0.isFalse());
394:       assertFalse(node0.isObjectLit());
395:       assertFalse(node0.isCall());
396:       assertFalse(node0.isName());
397:       assertFalse(node0.isAnd());
398:       assertFalse(node0.isExprResult());
399:       assertFalse(node0.isVoid());
400:       assertFalse(node0.isDebugger());
401:       assertFalse(node0.isNot());
402:       assertFalse(node0.isString());
403:       assertTrue(node0.isNumber());
404:       assertFalse(node0.isReturn());
405:       assertFalse(node0.isWhile());
406:       assertEquals(1, Node.DECR_FLAG);
407:       assertEquals(30, Node.VAR_ARGS_NAME);
408:       assertEquals(49, Node.DIRECT_EVAL);
409:       assertEquals(32, Node.INCRDECR_PROP);
410:       assertEquals(15, Node.NO_SIDE_EFFECTS);
411:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
412:       assertEquals(2, Node.POST_FLAG);
413:       assertEquals(57, Node.LAST_PROP);
414:       assertEquals(47, Node.IS_DISPATCHER);
415:       assertEquals(12, Node.COLUMN_BITS);
416:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
417:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
418:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
419:       assertEquals(29, Node.JSDOC_INFO_PROP);
420:       assertEquals(39, Node.EMPTY_BLOCK);
421:       assertEquals(53, Node.INPUT_ID);
422:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
423:       assertEquals(48, Node.DIRECTIVES);
424:       assertEquals(37, Node.OPT_ARG_NAME);
425:       assertEquals(52, Node.LENGTH);
426:       assertEquals(8, Node.FLAG_NO_THROWS);
427:       assertEquals(56, Node.CHANGE_TIME);
428:       assertEquals(36, Node.QUOTED_PROP);
429:       assertEquals(57, Node.REFLECTED_OBJECT);
430:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
431:       assertEquals(4095, Node.COLUMN_MASK);
432:       assertEquals(55, Node.INFERRED_FUNCTION);
433:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
434:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
435:       assertEquals(50, Node.FREE_CALL);
436:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
437:       assertEquals(40, Node.ORIGINALNAME_PROP);
438:       assertEquals(54, Node.SLASH_V);
439:       assertEquals(46, Node.IS_NAMESPACE);
440:       assertEquals(43, Node.IS_CONSTANT_NAME);
441:       assertEquals(51, Node.STATIC_SOURCE_FILE);
442:       
443:       boolean boolean1 = node0.isOptionalArg();
444:       assertFalse(boolean1);
445:       assertTrue(boolean1 == boolean0);
446:       assertFalse(node0.isNE());
447:       assertFalse(node0.isDelProp());
448:       assertFalse(node0.isGetterDef());
449:       assertFalse(node0.isEmpty());
450:       assertFalse(node0.isIn());
451:       assertFalse(node0.isArrayLit());
452:       assertFalse(node0.isIf());
453:       assertFalse(node0.isSwitch());
454:       assertFalse(node0.isTrue());
455:       assertFalse(node0.isFunction());
456:       assertFalse(node0.isInc());
457:       assertEquals(0, node0.getChildCount());
458:       assertFalse(node0.isDefaultCase());
459:       assertFalse(node0.isThrow());
460:       assertFalse(node0.isSetterDef());
461:       assertFalse(node0.isThis());
462:       assertFalse(node0.isInstanceOf());
463:       assertFalse(node0.isCatch());
464:       assertFalse(node0.isParamList());
465:       assertFalse(node0.isStringKey());
466:       assertFalse(node0.isScript());
467:       assertFalse(node0.isRegExp());
468:       assertFalse(node0.isWith());
469:       assertFalse(node0.hasMoreThanOneChild());
470:       assertFalse(node0.isHook());
471:       assertFalse(node0.isCase());
472:       assertFalse(node0.hasOneChild());
473:       assertEquals(39, node0.getType());
474:       assertFalse(node0.isTry());
475:       assertFalse(node0.isFor());
476:       assertFalse(node0.isBlock());
477:       assertFalse(node0.isTypeOf());
478:       assertFalse(node0.hasChildren());
479:       assertFalse(node0.isDec());
480:       assertFalse(node0.isOr());
481:       assertFalse(node0.isAssign());
482:       assertFalse(node0.isGetElem());
483:       assertFalse(node0.isCast());
484:       assertFalse(node0.isLabelName());
485:       assertEquals(0, node0.getCharno());
486:       assertFalse(node0.isNew());
487:       assertFalse(node0.isAdd());
488:       assertFalse(node0.isContinue());
489:       assertFalse(node0.isVar());
490:       assertFalse(node0.isAssignAdd());
491:       assertFalse(node0.isDo());
492:       assertFalse(node0.isLabel());
493:       assertFalse(node0.isNull());
494:       assertEquals(0, node0.getSourcePosition());
495:       assertFalse(node0.isGetProp());
496:       assertFalse(node0.isBreak());
497:       assertFalse(node0.isComma());
498:       assertEquals(0, node0.getLineno());
499:       assertFalse(node0.isFalse());
500:       assertFalse(node0.isObjectLit());
501:       assertFalse(node0.isCall());
502:       assertFalse(node0.isName());
503:       assertFalse(node0.isAnd());
504:       assertFalse(node0.isExprResult());
505:       assertFalse(node0.isVoid());
506:       assertFalse(node0.isDebugger());
507:       assertFalse(node0.isNot());
508:       assertFalse(node0.isString());
509:       assertTrue(node0.isNumber());
510:       assertFalse(node0.isReturn());
511:       assertFalse(node0.isWhile());
512:       assertEquals(1, Node.DECR_FLAG);
513:       assertEquals(30, Node.VAR_ARGS_NAME);
514:       assertEquals(49, Node.DIRECT_EVAL);
515:       assertEquals(32, Node.INCRDECR_PROP);
516:       assertEquals(15, Node.NO_SIDE_EFFECTS);
517:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
518:       assertEquals(2, Node.POST_FLAG);
519:       assertEquals(57, Node.LAST_PROP);
520:       assertEquals(47, Node.IS_DISPATCHER);
521:       assertEquals(12, Node.COLUMN_BITS);
522:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
523:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
524:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
525:       assertEquals(29, Node.JSDOC_INFO_PROP);
526:       assertEquals(39, Node.EMPTY_BLOCK);
527:       assertEquals(53, Node.INPUT_ID);
528:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
529:       assertEquals(48, Node.DIRECTIVES);
530:       assertEquals(37, Node.OPT_ARG_NAME);
531:       assertEquals(52, Node.LENGTH);
532:       assertEquals(8, Node.FLAG_NO_THROWS);
533:       assertEquals(56, Node.CHANGE_TIME);
534:       assertEquals(36, Node.QUOTED_PROP);
535:       assertEquals(57, Node.REFLECTED_OBJECT);
536:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
537:       assertEquals(4095, Node.COLUMN_MASK);
538:       assertEquals(55, Node.INFERRED_FUNCTION);
539:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
540:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
541:       assertEquals(50, Node.FREE_CALL);
542:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
543:       assertEquals(40, Node.ORIGINALNAME_PROP);
544:       assertEquals(54, Node.SLASH_V);
545:       assertEquals(46, Node.IS_NAMESPACE);
546:       assertEquals(43, Node.IS_CONSTANT_NAME);
547:       assertEquals(51, Node.STATIC_SOURCE_FILE);
548:       
549:       // Undeclared exception!
550:       try { 
551:         node0.setSideEffectFlags(0);
552:         fail("Expecting exception: IllegalArgumentException");
553:       
554:       } catch(IllegalArgumentException e) {
555:          //
556:          // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
557:          //
558:          verifyException("com.google.common.base.Preconditions", e);
559:       }
560:   }
561: }
RegularFileObject[/tmp/EvoSuite_132_1629222954166/com/google/javascript/rhino/Node_132_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:55:54 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_132_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_132_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_132_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.jstype.TemplatizedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.collect.AbstractIndexedListIterator",
335:       "com.google.common.collect.Iterators$11",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.common.base.Objects",
339:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.Iterators$12",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
354:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.javascript.rhino.jstype.JSType$TypePair",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
366:       "com.google.javascript.rhino.jstype.NamespaceType"
367:     );
368:   }
369: }

[MASTER] 17:55:54.239 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0, 0, 0);
assertNotNull(node0);
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean0 = node0.isNoSideEffectsCall();
assertFalse(boolean0);
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

int int0 = node0.getLineno();
assertEquals(0, int0);
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean1 = node0.isOptionalArg();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

node0.setSideEffectFlags(0);

[MASTER] 17:56:16.392 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:56:16.758 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:56:17.079 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:56:17.475 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:56:17.750 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:56:18.985 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:56:19.258 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:56:19.562 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:56:20.000 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:56:20.280 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/9
* Done!

* Computation finished
