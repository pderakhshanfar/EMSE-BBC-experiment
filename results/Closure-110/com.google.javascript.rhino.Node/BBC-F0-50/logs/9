* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 6743
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2425515898
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:00:19.580 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:00:21.791 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 2435: com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;:764 - ReplaceComparisonOperator == -> <=
[MASTER] 10:00:23.122 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;
[MASTER] 10:00:23.125 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true
[MASTER] 10:00:23.126 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - false
[MASTER] 10:03:27.030 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 1695
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 46
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 2502
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 991
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 8720
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 46
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 134
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 6453
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 1270
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 18249
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - false: 3
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 1879
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 931
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 2150
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 12724
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 6605
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 507
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 681
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 131
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 17316
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 403
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 307
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 507
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 2422
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 307
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 2386
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 1249
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 979
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 491
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 3327
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 307
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 79
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 15127
Number of times BBC is called for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: Line 1123: 626
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 1728
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 2233
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 937
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 6797
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 1839
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 3256
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 307
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 4464
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 680
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 111
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 1505
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 1249
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 4860
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 1252
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1168: 219
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 887
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1169: 219
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 14537
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 103
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 2606
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 1120
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 1729
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 27
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 307
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1164: 219
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 1866
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1165: 219
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 11248
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 744
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 3477
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 20
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 3368
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 8
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 2606
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 626
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 4070
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 598
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 2150
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 70
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 46
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 46
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 497
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 307
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 7632
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 10810
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 2606
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 331
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 102
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 1393
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 102
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 18173
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 307
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.getDouble()D: Line 162: 403
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 35
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 21431
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 35
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 3663
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 35
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 991
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 10846
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 654: 38505
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 7867
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 996
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 653: 38505
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 507
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 5821
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 219
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 74648
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 9495
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 403
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 639
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 1697
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 3012
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 6714
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 1052
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 64
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 2351
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 286
Number of times BBC is called for com.google.javascript.rhino.Node.getLineno()I: Line 1140: 46
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 20601
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 2828
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 537
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 79
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 6361
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 5729
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 1544
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 4520
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 991
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - true: 27
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 507
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 7303
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 219
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 329
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 6531
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 2485
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: root-Branch: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 399
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 6385
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 834
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 979
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 28564
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 626
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 151
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 9618
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 112
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 403
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 107
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 46
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 219
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 219
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 219
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 5490
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 219
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 219
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 219
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 35
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 1248
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 219
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 6993
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 4391
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 4816
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 872: 46
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 5308
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 12666
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 867
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 219
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 1249
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 37
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 4083
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 5971
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 3740
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 2573
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 884: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 35
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 883: 46
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 878: 46
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 877: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 507
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 35
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 873: 46
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2026: 131
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 219
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 1249
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 1991
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 744
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 74648
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 4611
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 19469
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 4
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 11701
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 1249
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 1249
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 507
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 403
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 580
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 4611
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 991
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 1599
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 4689
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 1839
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 2326
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 403
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 910
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 867
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 367
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 626
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 3368
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 203
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 1695
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 15089
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 2320
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 4816
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 16843
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 1892
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 2150
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 4085
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 2150
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.getDouble()D: root-Branch: 403
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - true: 13
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 568
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 403
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 991
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 322
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 25
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 6561
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 6627
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 25
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 46
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 25
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 1078
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 403
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - false: 3
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 222
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 403
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 5926
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 2019
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 72
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 137
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 960
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 507
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 1120
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 4334
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 19393
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 6029
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 12147
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 100
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 507
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 4334
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 507
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 2432
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 233
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 2333
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 4642
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 507
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 5926
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 834
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 198
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 307
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 1181
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 307
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 580
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1752: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 580
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 507
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 307
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 4185
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 131
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1747: 46
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 307
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 507
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 307
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 307
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1743: 46
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 219
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 514
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 219
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 403
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 403
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 2351
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 5885
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 580
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 744
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 6061
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 580
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 580
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 1839
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 580
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 6061
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 43474
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - true: 13
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 6061
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 1454
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 6061
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 11324
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 1835
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 1544
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 38
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 219
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 6500
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 6640
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 4
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 3
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 219
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 15081
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 991
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 1223
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 918
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 1529
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 219
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 507
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 219
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 744
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 46
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 403
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 4464
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 1695
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 1574
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 3035
Number of times BBC is called for com.google.javascript.rhino.Node.putBooleanProp(IZ)V: I5 Branch 109 IFEQ L852 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 626
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 6298
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 1249
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 2648
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 17660
Number of times BBC is called for com.google.javascript.rhino.Node.toString(ZZZ)Ljava/lang/String;: Line 944: 3
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 626
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 1053
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 9077
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 2496
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 111
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 333
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 3641
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 1695
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 507
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 507
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 2242
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 13849
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 226
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 507
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 219
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 403
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 14341
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 403
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 21431
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 2320
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 13314
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 403
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 4288
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 144
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 15
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 403
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 2697
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 1292
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 2616
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 5077
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 2150
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 15235
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 68
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true: 17
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 2381
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 11752
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 723
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 2381
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 1374
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 21431
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 507
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 307
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 5308
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 991
Number of times BBC is called for com.google.javascript.rhino.Node.extractLineno(I)I: I4 Branch 142 IF_ICMPNE L1209 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.extractLineno(I)I: I4 Branch 142 IF_ICMPNE L1209 - true: 119
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 219
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 5308
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 10
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - false: 17
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 5308
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 497
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 507
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 1015
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 5308
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 24610
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 219
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 5308
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 5308
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 2150
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 2150
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 152
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 20
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 626
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 108
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 1249
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 8239
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 8239
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 219
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 1991
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 25
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 13071
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 49
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 25
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 507
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 5077
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 5299
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 43474
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 208
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 403
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 4566
Number of times BBC is called for com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;: I12 Branch 98 IF_ICMPEQ L764 - false: 7
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 307
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 1514
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 307
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 2488
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 626
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 1701
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 2218
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 507
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 18429
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 219
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 307
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 219
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 307
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 307
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 867
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 307
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 507
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 1695
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 976
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 1249
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 131
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 204
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 4484
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 331
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 136
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 16518
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 1101
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 13607
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 131
Number of times BBC is called for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: root-Branch: 626
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 420
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 5064
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 393
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 219
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 307
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 1695
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 307
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - false: 27
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 15181
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 19630
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 3346
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 867
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: Line 214: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 329
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 3371
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 980
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 933
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 1861
Number of times BBC is called for com.google.javascript.rhino.Node.getLineno()I: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 32164
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 403
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 466
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 113
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 2320
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 18843
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 2150
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 18843
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 6502
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 2381
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 19007
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - true: 16
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 14440
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: root-Branch: 507
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 403
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 626
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 2020
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 531: 403
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 530: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 867
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 22755
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 20667
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 219
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 403
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 5926
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 752
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 556
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 46
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 46
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 293
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 507
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 1101
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 46
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 184
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 1201
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 1927
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 507
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 14958
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 1569
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - false: 3
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 3223
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 403
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 403
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 2333
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 403
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 959
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 70
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 403
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 141
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 997: 3
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 18843
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 507
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 2194
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 18843
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 219
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 18843
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 18843
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 5188
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 1273
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 2606
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 18843
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 18843
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 403
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 2606
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 2606
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 38695
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1706: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 1839
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 2606
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1703: 131
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 2606
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 11143
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1709: 131
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 1006: 3
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1708: 131
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1707: 131
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1713: 131
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1712: 131
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: Line 1132: 507
Number of times BBC is called for com.google.javascript.rhino.Node.putIntProp(II)V: I8 Branch 110 IFEQ L857 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 11143
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 11792
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 11886
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 219
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 219
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 131
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 953: 3
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 337
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 2737
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 5926
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 131
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 978: 3
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 10912
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 507
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 970: 3
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 219
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 507
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 7980
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 9495
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 507
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 1024
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 13881
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 14523
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 2828
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 12991
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 102
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 833
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 2150
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 131
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 6061
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 219
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 333
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 991
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 1020
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 219
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 626
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - true: 14
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 6240
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 853
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 2151
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 3012
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 103
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 7
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 507
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 4278
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 507
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 867
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 4543
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 18648
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 403
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 131
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 20539
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 6061
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 626
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 18881
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 403
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 20539
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 219
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 23850
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 1393
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 507
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 1024
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 507
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 7888
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 2170
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 580
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 507
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 2320
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 576
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 514
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 2320
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 5926
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 403
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 23975
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 507
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 5926
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 507
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 403
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1818: 46
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 2485
Number of times BBC is called for com.google.javascript.rhino.Node.extractLineno(I)I: Line 1209: 46
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 2485
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1813: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 10213
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 1978
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1809: 46
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 4277
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 307
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 23975
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 5851
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 74648
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 17
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 9382
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - false: 13
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 307
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 101
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 2150
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 2150
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 1249
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 1249
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 2648
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 111
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 1249
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 120
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 10780
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 46
Number of times BBC is called in total: 4323307
* Search finished after 604s and 444 generations, 213033 statements, best individual has fitness: 2917.0
* Minimizing test suite
[MASTER] 10:11:47.749 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 853
* Number of covered goals: 784
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 714
* Number of covered goals: 609
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 110
* Number of covered goals: 110
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 85%
* Total number of goals: 530
* Number of covered goals: 450
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 4536
* Number of covered goals: 2200
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 90%
* Total number of goals: 233
* Number of covered goals: 210
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 714
* Number of covered goals: 569
* Generated 781 tests with total length 10950
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:13:03.343 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7748666666666667% of time used, but only 50/781 tests minimized), falling back to using all assertions
[MASTER] 10:13:16.889 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 10:13:24.510 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 7 seconds more than allowed.
[MASTER] 10:13:27.530 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_53_1628158407271/com/google/javascript/rhino/Node_53_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_53_1628158407271/com/google/javascript/rhino/Node_53_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:27.530 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:27.530 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:27.534 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 547
[MASTER] 10:13:27.535 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_53_1628158407271/com/google/javascript/rhino/Node_53_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:27 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_53_tmp__ESTest extends Node_53_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString((-598), "", (-598), 108);
23:       assertEquals(8, Node.FLAG_NO_THROWS);
24:       assertEquals(48, Node.DIRECTIVES);
25:       assertEquals(4095, Node.COLUMN_MASK);
26:       assertEquals(39, Node.EMPTY_BLOCK);
27:       assertEquals(55, Node.INFERRED_FUNCTION);
28:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
29:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
30:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
31:       assertEquals(50, Node.FREE_CALL);
32:       assertEquals(43, Node.IS_CONSTANT_NAME);
33:       assertEquals(36, Node.QUOTED_PROP);
34:       assertEquals(57, Node.REFLECTED_OBJECT);
35:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
36:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
37:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
38:       assertEquals(1, Node.DECR_FLAG);
39:       assertEquals(12, Node.COLUMN_BITS);
40:       assertEquals(37, Node.OPT_ARG_NAME);
41:       assertEquals(32, Node.INCRDECR_PROP);
42:       assertEquals(2, Node.POST_FLAG);
43:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
44:       assertEquals(29, Node.JSDOC_INFO_PROP);
45:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
46:       assertEquals(49, Node.DIRECT_EVAL);
47:       assertEquals(56, Node.CHANGE_TIME);
48:       assertEquals(51, Node.STATIC_SOURCE_FILE);
49:       assertEquals(46, Node.IS_NAMESPACE);
50:       assertEquals(54, Node.SLASH_V);
51:       assertEquals(53, Node.INPUT_ID);
52:       assertEquals(52, Node.LENGTH);
53:       assertEquals(15, Node.NO_SIDE_EFFECTS);
54:       assertEquals(40, Node.ORIGINALNAME_PROP);
55:       assertEquals(30, Node.VAR_ARGS_NAME);
56:       assertEquals(57, Node.LAST_PROP);
57:       assertEquals(47, Node.IS_DISPATCHER);
58:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
59:       assertNotNull(node0);
60:       assertFalse(node0.isInstanceOf());
61:       assertFalse(node0.isObjectLit());
62:       assertFalse(node0.isThis());
63:       assertFalse(node0.isComma());
64:       assertFalse(node0.isWith());
65:       assertFalse(node0.isFalse());
66:       assertFalse(node0.isAnd());
67:       assertFalse(node0.isExprResult());
68:       assertFalse(node0.isBreak());
69:       assertFalse(node0.isThrow());
70:       assertEquals((-598), node0.getType());
71:       assertFalse(node0.isInc());
72:       assertFalse(node0.isOr());
73:       assertFalse(node0.isReturn());
74:       assertFalse(node0.isTypeOf());
75:       assertFalse(node0.hasChildren());
76:       assertFalse(node0.isDec());
77:       assertEquals((-1), node0.getSourcePosition());
78:       assertFalse(node0.isAssign());
79:       assertFalse(node0.isDelProp());
80:       assertFalse(node0.isGetElem());
81:       assertFalse(node0.isContinue());
82:       assertFalse(node0.isCast());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isNot());
85:       assertFalse(node0.isWhile());
86:       assertFalse(node0.isString());
87:       assertFalse(node0.isGetProp());
88:       assertFalse(node0.isParamList());
89:       assertFalse(node0.isNull());
90:       assertEquals(0, node0.getChildCount());
91:       assertFalse(node0.isName());
92:       assertFalse(node0.isStringKey());
93:       assertFalse(node0.isCatch());
94:       assertFalse(node0.isCall());
95:       assertFalse(node0.isVoid());
96:       assertFalse(node0.isAdd());
97:       assertFalse(node0.isVar());
98:       assertFalse(node0.isTrue());
99:       assertFalse(node0.isFunction());
100:       assertFalse(node0.isDo());
101:       assertFalse(node0.isEmpty());
102:       assertFalse(node0.isDefaultCase());
103:       assertFalse(node0.isSetterDef());
104:       assertFalse(node0.isNew());
105:       assertFalse(node0.isAssignAdd());
106:       assertFalse(node0.isLabel());
107:       assertFalse(node0.isIn());
108:       assertFalse(node0.hasMoreThanOneChild());
109:       assertFalse(node0.isNE());
110:       assertFalse(node0.isNumber());
111:       assertFalse(node0.isLabelName());
112:       assertFalse(node0.isIf());
113:       assertFalse(node0.isSwitch());
114:       assertFalse(node0.isArrayLit());
115:       assertEquals((-1), node0.getLineno());
116:       assertFalse(node0.isTry());
117:       assertFalse(node0.isBlock());
118:       assertFalse(node0.isHook());
119:       assertFalse(node0.isRegExp());
120:       assertEquals((-1), node0.getCharno());
121:       assertFalse(node0.isGetterDef());
122:       assertFalse(node0.isFor());
123:       assertFalse(node0.isScript());
124:       assertFalse(node0.isCase());
125:       assertFalse(node0.hasOneChild());
126:       
127:       boolean boolean0 = node0.mayMutateArguments();
128:       assertEquals(8, Node.FLAG_NO_THROWS);
129:       assertEquals(48, Node.DIRECTIVES);
130:       assertEquals(4095, Node.COLUMN_MASK);
131:       assertEquals(39, Node.EMPTY_BLOCK);
132:       assertEquals(55, Node.INFERRED_FUNCTION);
133:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
134:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
135:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
136:       assertEquals(50, Node.FREE_CALL);
137:       assertEquals(43, Node.IS_CONSTANT_NAME);
138:       assertEquals(36, Node.QUOTED_PROP);
139:       assertEquals(57, Node.REFLECTED_OBJECT);
140:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
141:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
142:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
143:       assertEquals(1, Node.DECR_FLAG);
144:       assertEquals(12, Node.COLUMN_BITS);
145:       assertEquals(37, Node.OPT_ARG_NAME);
146:       assertEquals(32, Node.INCRDECR_PROP);
147:       assertEquals(2, Node.POST_FLAG);
148:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
149:       assertEquals(29, Node.JSDOC_INFO_PROP);
150:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
151:       assertEquals(49, Node.DIRECT_EVAL);
152:       assertEquals(56, Node.CHANGE_TIME);
153:       assertEquals(51, Node.STATIC_SOURCE_FILE);
154:       assertEquals(46, Node.IS_NAMESPACE);
155:       assertEquals(54, Node.SLASH_V);
156:       assertEquals(53, Node.INPUT_ID);
157:       assertEquals(52, Node.LENGTH);
158:       assertEquals(15, Node.NO_SIDE_EFFECTS);
159:       assertEquals(40, Node.ORIGINALNAME_PROP);
160:       assertEquals(30, Node.VAR_ARGS_NAME);
161:       assertEquals(57, Node.LAST_PROP);
162:       assertEquals(47, Node.IS_DISPATCHER);
163:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
164:       assertTrue(boolean0);
165:       assertFalse(node0.isInstanceOf());
166:       assertFalse(node0.isObjectLit());
167:       assertFalse(node0.isThis());
168:       assertFalse(node0.isComma());
169:       assertFalse(node0.isWith());
170:       assertFalse(node0.isFalse());
171:       assertFalse(node0.isAnd());
172:       assertFalse(node0.isExprResult());
173:       assertFalse(node0.isBreak());
174:       assertFalse(node0.isThrow());
175:       assertEquals((-598), node0.getType());
176:       assertFalse(node0.isInc());
177:       assertFalse(node0.isOr());
178:       assertFalse(node0.isReturn());
179:       assertFalse(node0.isTypeOf());
180:       assertFalse(node0.hasChildren());
181:       assertFalse(node0.isDec());
182:       assertEquals((-1), node0.getSourcePosition());
183:       assertFalse(node0.isAssign());
184:       assertFalse(node0.isDelProp());
185:       assertFalse(node0.isGetElem());
186:       assertFalse(node0.isContinue());
187:       assertFalse(node0.isCast());
188:       assertFalse(node0.isDebugger());
189:       assertFalse(node0.isNot());
190:       assertFalse(node0.isWhile());
191:       assertFalse(node0.isString());
192:       assertFalse(node0.isGetProp());
193:       assertFalse(node0.isParamList());
194:       assertFalse(node0.isNull());
195:       assertEquals(0, node0.getChildCount());
196:       assertFalse(node0.isName());
197:       assertFalse(node0.isStringKey());
198:       assertFalse(node0.isCatch());
199:       assertFalse(node0.isCall());
200:       assertFalse(node0.isVoid());
201:       assertFalse(node0.isAdd());
202:       assertFalse(node0.isVar());
203:       assertFalse(node0.isTrue());
204:       assertFalse(node0.isFunction());
205:       assertFalse(node0.isDo());
206:       assertFalse(node0.isEmpty());
207:       assertFalse(node0.isDefaultCase());
208:       assertFalse(node0.isSetterDef());
209:       assertFalse(node0.isNew());
210:       assertFalse(node0.isAssignAdd());
211:       assertFalse(node0.isLabel());
212:       assertFalse(node0.isIn());
213:       assertFalse(node0.hasMoreThanOneChild());
214:       assertFalse(node0.isNE());
215:       assertFalse(node0.isNumber());
216:       assertFalse(node0.isLabelName());
217:       assertFalse(node0.isIf());
218:       assertFalse(node0.isSwitch());
219:       assertFalse(node0.isArrayLit());
220:       assertEquals((-1), node0.getLineno());
221:       assertFalse(node0.isTry());
222:       assertFalse(node0.isBlock());
223:       assertFalse(node0.isHook());
224:       assertFalse(node0.isRegExp());
225:       assertEquals((-1), node0.getCharno());
226:       assertFalse(node0.isGetterDef());
227:       assertFalse(node0.isFor());
228:       assertFalse(node0.isScript());
229:       assertFalse(node0.isCase());
230:       assertFalse(node0.hasOneChild());
231:       
232:       boolean boolean1 = node0.isNoSideEffectsCall();
233:       assertEquals(8, Node.FLAG_NO_THROWS);
234:       assertEquals(48, Node.DIRECTIVES);
235:       assertEquals(4095, Node.COLUMN_MASK);
236:       assertEquals(39, Node.EMPTY_BLOCK);
237:       assertEquals(55, Node.INFERRED_FUNCTION);
238:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
239:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
240:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
241:       assertEquals(50, Node.FREE_CALL);
242:       assertEquals(43, Node.IS_CONSTANT_NAME);
243:       assertEquals(36, Node.QUOTED_PROP);
244:       assertEquals(57, Node.REFLECTED_OBJECT);
245:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
246:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
247:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
248:       assertEquals(1, Node.DECR_FLAG);
249:       assertEquals(12, Node.COLUMN_BITS);
250:       assertEquals(37, Node.OPT_ARG_NAME);
251:       assertEquals(32, Node.INCRDECR_PROP);
252:       assertEquals(2, Node.POST_FLAG);
253:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
254:       assertEquals(29, Node.JSDOC_INFO_PROP);
255:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
256:       assertEquals(49, Node.DIRECT_EVAL);
257:       assertEquals(56, Node.CHANGE_TIME);
258:       assertEquals(51, Node.STATIC_SOURCE_FILE);
259:       assertEquals(46, Node.IS_NAMESPACE);
260:       assertEquals(54, Node.SLASH_V);
261:       assertEquals(53, Node.INPUT_ID);
262:       assertEquals(52, Node.LENGTH);
263:       assertEquals(15, Node.NO_SIDE_EFFECTS);
264:       assertEquals(40, Node.ORIGINALNAME_PROP);
265:       assertEquals(30, Node.VAR_ARGS_NAME);
266:       assertEquals(57, Node.LAST_PROP);
267:       assertEquals(47, Node.IS_DISPATCHER);
268:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
269:       assertFalse(boolean1 == boolean0);
270:       assertFalse(boolean1);
271:       assertFalse(node0.isInstanceOf());
272:       assertFalse(node0.isObjectLit());
273:       assertFalse(node0.isThis());
274:       assertFalse(node0.isComma());
275:       assertFalse(node0.isWith());
276:       assertFalse(node0.isFalse());
277:       assertFalse(node0.isAnd());
278:       assertFalse(node0.isExprResult());
279:       assertFalse(node0.isBreak());
280:       assertFalse(node0.isThrow());
281:       assertEquals((-598), node0.getType());
282:       assertFalse(node0.isInc());
283:       assertFalse(node0.isOr());
284:       assertFalse(node0.isReturn());
285:       assertFalse(node0.isTypeOf());
286:       assertFalse(node0.hasChildren());
287:       assertFalse(node0.isDec());
288:       assertEquals((-1), node0.getSourcePosition());
289:       assertFalse(node0.isAssign());
290:       assertFalse(node0.isDelProp());
291:       assertFalse(node0.isGetElem());
292:       assertFalse(node0.isContinue());
293:       assertFalse(node0.isCast());
294:       assertFalse(node0.isDebugger());
295:       assertFalse(node0.isNot());
296:       assertFalse(node0.isWhile());
297:       assertFalse(node0.isString());
298:       assertFalse(node0.isGetProp());
299:       assertFalse(node0.isParamList());
300:       assertFalse(node0.isNull());
301:       assertEquals(0, node0.getChildCount());
302:       assertFalse(node0.isName());
303:       assertFalse(node0.isStringKey());
304:       assertFalse(node0.isCatch());
305:       assertFalse(node0.isCall());
306:       assertFalse(node0.isVoid());
307:       assertFalse(node0.isAdd());
308:       assertFalse(node0.isVar());
309:       assertFalse(node0.isTrue());
310:       assertFalse(node0.isFunction());
311:       assertFalse(node0.isDo());
312:       assertFalse(node0.isEmpty());
313:       assertFalse(node0.isDefaultCase());
314:       assertFalse(node0.isSetterDef());
315:       assertFalse(node0.isNew());
316:       assertFalse(node0.isAssignAdd());
317:       assertFalse(node0.isLabel());
318:       assertFalse(node0.isIn());
319:       assertFalse(node0.hasMoreThanOneChild());
320:       assertFalse(node0.isNE());
321:       assertFalse(node0.isNumber());
322:       assertFalse(node0.isLabelName());
323:       assertFalse(node0.isIf());
324:       assertFalse(node0.isSwitch());
325:       assertFalse(node0.isArrayLit());
326:       assertEquals((-1), node0.getLineno());
327:       assertFalse(node0.isTry());
328:       assertFalse(node0.isBlock());
329:       assertFalse(node0.isHook());
330:       assertFalse(node0.isRegExp());
331:       assertEquals((-1), node0.getCharno());
332:       assertFalse(node0.isGetterDef());
333:       assertFalse(node0.isFor());
334:       assertFalse(node0.isScript());
335:       assertFalse(node0.isCase());
336:       assertFalse(node0.hasOneChild());
337:       
338:       int int0 = node0.getLineno();
339:       assertEquals(8, Node.FLAG_NO_THROWS);
340:       assertEquals(48, Node.DIRECTIVES);
341:       assertEquals(4095, Node.COLUMN_MASK);
342:       assertEquals(39, Node.EMPTY_BLOCK);
343:       assertEquals(55, Node.INFERRED_FUNCTION);
344:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
345:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
346:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
347:       assertEquals(50, Node.FREE_CALL);
348:       assertEquals(43, Node.IS_CONSTANT_NAME);
349:       assertEquals(36, Node.QUOTED_PROP);
350:       assertEquals(57, Node.REFLECTED_OBJECT);
351:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
352:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
353:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
354:       assertEquals(1, Node.DECR_FLAG);
355:       assertEquals(12, Node.COLUMN_BITS);
356:       assertEquals(37, Node.OPT_ARG_NAME);
357:       assertEquals(32, Node.INCRDECR_PROP);
358:       assertEquals(2, Node.POST_FLAG);
359:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
360:       assertEquals(29, Node.JSDOC_INFO_PROP);
361:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
362:       assertEquals(49, Node.DIRECT_EVAL);
363:       assertEquals(56, Node.CHANGE_TIME);
364:       assertEquals(51, Node.STATIC_SOURCE_FILE);
365:       assertEquals(46, Node.IS_NAMESPACE);
366:       assertEquals(54, Node.SLASH_V);
367:       assertEquals(53, Node.INPUT_ID);
368:       assertEquals(52, Node.LENGTH);
369:       assertEquals(15, Node.NO_SIDE_EFFECTS);
370:       assertEquals(40, Node.ORIGINALNAME_PROP);
371:       assertEquals(30, Node.VAR_ARGS_NAME);
372:       assertEquals(57, Node.LAST_PROP);
373:       assertEquals(47, Node.IS_DISPATCHER);
374:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
375:       assertEquals((-1), int0);
376:       assertFalse(node0.isInstanceOf());
377:       assertFalse(node0.isObjectLit());
378:       assertFalse(node0.isThis());
379:       assertFalse(node0.isComma());
380:       assertFalse(node0.isWith());
381:       assertFalse(node0.isFalse());
382:       assertFalse(node0.isAnd());
383:       assertFalse(node0.isExprResult());
384:       assertFalse(node0.isBreak());
385:       assertFalse(node0.isThrow());
386:       assertEquals((-598), node0.getType());
387:       assertFalse(node0.isInc());
388:       assertFalse(node0.isOr());
389:       assertFalse(node0.isReturn());
390:       assertFalse(node0.isTypeOf());
391:       assertFalse(node0.hasChildren());
392:       assertFalse(node0.isDec());
393:       assertEquals((-1), node0.getSourcePosition());
394:       assertFalse(node0.isAssign());
395:       assertFalse(node0.isDelProp());
396:       assertFalse(node0.isGetElem());
397:       assertFalse(node0.isContinue());
398:       assertFalse(node0.isCast());
399:       assertFalse(node0.isDebugger());
400:       assertFalse(node0.isNot());
401:       assertFalse(node0.isWhile());
402:       assertFalse(node0.isString());
403:       assertFalse(node0.isGetProp());
404:       assertFalse(node0.isParamList());
405:       assertFalse(node0.isNull());
406:       assertEquals(0, node0.getChildCount());
407:       assertFalse(node0.isName());
408:       assertFalse(node0.isStringKey());
409:       assertFalse(node0.isCatch());
410:       assertFalse(node0.isCall());
411:       assertFalse(node0.isVoid());
412:       assertFalse(node0.isAdd());
413:       assertFalse(node0.isVar());
414:       assertFalse(node0.isTrue());
415:       assertFalse(node0.isFunction());
416:       assertFalse(node0.isDo());
417:       assertFalse(node0.isEmpty());
418:       assertFalse(node0.isDefaultCase());
419:       assertFalse(node0.isSetterDef());
420:       assertFalse(node0.isNew());
421:       assertFalse(node0.isAssignAdd());
422:       assertFalse(node0.isLabel());
423:       assertFalse(node0.isIn());
424:       assertFalse(node0.hasMoreThanOneChild());
425:       assertFalse(node0.isNE());
426:       assertFalse(node0.isNumber());
427:       assertFalse(node0.isLabelName());
428:       assertFalse(node0.isIf());
429:       assertFalse(node0.isSwitch());
430:       assertFalse(node0.isArrayLit());
431:       assertEquals((-1), node0.getLineno());
432:       assertFalse(node0.isTry());
433:       assertFalse(node0.isBlock());
434:       assertFalse(node0.isHook());
435:       assertFalse(node0.isRegExp());
436:       assertEquals((-1), node0.getCharno());
437:       assertFalse(node0.isGetterDef());
438:       assertFalse(node0.isFor());
439:       assertFalse(node0.isScript());
440:       assertFalse(node0.isCase());
441:       assertFalse(node0.hasOneChild());
442:       
443:       Iterable<Node> iterable0 = node0.children();
444:       assertEquals(8, Node.FLAG_NO_THROWS);
445:       assertEquals(48, Node.DIRECTIVES);
446:       assertEquals(4095, Node.COLUMN_MASK);
447:       assertEquals(39, Node.EMPTY_BLOCK);
448:       assertEquals(55, Node.INFERRED_FUNCTION);
449:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
450:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
451:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
452:       assertEquals(50, Node.FREE_CALL);
453:       assertEquals(43, Node.IS_CONSTANT_NAME);
454:       assertEquals(36, Node.QUOTED_PROP);
455:       assertEquals(57, Node.REFLECTED_OBJECT);
456:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
457:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
458:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
459:       assertEquals(1, Node.DECR_FLAG);
460:       assertEquals(12, Node.COLUMN_BITS);
461:       assertEquals(37, Node.OPT_ARG_NAME);
462:       assertEquals(32, Node.INCRDECR_PROP);
463:       assertEquals(2, Node.POST_FLAG);
464:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
465:       assertEquals(29, Node.JSDOC_INFO_PROP);
466:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
467:       assertEquals(49, Node.DIRECT_EVAL);
468:       assertEquals(56, Node.CHANGE_TIME);
469:       assertEquals(51, Node.STATIC_SOURCE_FILE);
470:       assertEquals(46, Node.IS_NAMESPACE);
471:       assertEquals(54, Node.SLASH_V);
472:       assertEquals(53, Node.INPUT_ID);
473:       assertEquals(52, Node.LENGTH);
474:       assertEquals(15, Node.NO_SIDE_EFFECTS);
475:       assertEquals(40, Node.ORIGINALNAME_PROP);
476:       assertEquals(30, Node.VAR_ARGS_NAME);
477:       assertEquals(57, Node.LAST_PROP);
478:       assertEquals(47, Node.IS_DISPATCHER);
479:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
480:       assertNotNull(iterable0);
481:       assertFalse(node0.isInstanceOf());
482:       assertFalse(node0.isObjectLit());
483:       assertFalse(node0.isThis());
484:       assertFalse(node0.isComma());
485:       assertFalse(node0.isWith());
486:       assertFalse(node0.isFalse());
487:       assertFalse(node0.isAnd());
488:       assertFalse(node0.isExprResult());
489:       assertFalse(node0.isBreak());
490:       assertFalse(node0.isThrow());
491:       assertEquals((-598), node0.getType());
492:       assertFalse(node0.isInc());
493:       assertFalse(node0.isOr());
494:       assertFalse(node0.isReturn());
495:       assertFalse(node0.isTypeOf());
496:       assertFalse(node0.hasChildren());
497:       assertFalse(node0.isDec());
498:       assertEquals((-1), node0.getSourcePosition());
499:       assertFalse(node0.isAssign());
500:       assertFalse(node0.isDelProp());
501:       assertFalse(node0.isGetElem());
502:       assertFalse(node0.isContinue());
503:       assertFalse(node0.isCast());
504:       assertFalse(node0.isDebugger());
505:       assertFalse(node0.isNot());
506:       assertFalse(node0.isWhile());
507:       assertFalse(node0.isString());
508:       assertFalse(node0.isGetProp());
509:       assertFalse(node0.isParamList());
510:       assertFalse(node0.isNull());
511:       assertEquals(0, node0.getChildCount());
512:       assertFalse(node0.isName());
513:       assertFalse(node0.isStringKey());
514:       assertFalse(node0.isCatch());
515:       assertFalse(node0.isCall());
516:       assertFalse(node0.isVoid());
517:       assertFalse(node0.isAdd());
518:       assertFalse(node0.isVar());
519:       assertFalse(node0.isTrue());
520:       assertFalse(node0.isFunction());
521:       assertFalse(node0.isDo());
522:       assertFalse(node0.isEmpty());
523:       assertFalse(node0.isDefaultCase());
524:       assertFalse(node0.isSetterDef());
525:       assertFalse(node0.isNew());
526:       assertFalse(node0.isAssignAdd());
527:       assertFalse(node0.isLabel());
528:       assertFalse(node0.isIn());
529:       assertFalse(node0.hasMoreThanOneChild());
530:       assertFalse(node0.isNE());
531:       assertFalse(node0.isNumber());
532:       assertFalse(node0.isLabelName());
533:       assertFalse(node0.isIf());
534:       assertFalse(node0.isSwitch());
535:       assertFalse(node0.isArrayLit());
536:       assertEquals((-1), node0.getLineno());
537:       assertFalse(node0.isTry());
538:       assertFalse(node0.isBlock());
539:       assertFalse(node0.isHook());
540:       assertFalse(node0.isRegExp());
541:       assertEquals((-1), node0.getCharno());
542:       assertFalse(node0.isGetterDef());
543:       assertFalse(node0.isFor());
544:       assertFalse(node0.isScript());
545:       assertFalse(node0.isCase());
546:       assertFalse(node0.hasOneChild());
547:       assertFalse(iterable0.contains(node0));
548:       
549:       boolean boolean2 = node0.isOptionalArg();
550:       assertEquals(8, Node.FLAG_NO_THROWS);
551:       assertEquals(48, Node.DIRECTIVES);
552:       assertEquals(4095, Node.COLUMN_MASK);
553:       assertEquals(39, Node.EMPTY_BLOCK);
554:       assertEquals(55, Node.INFERRED_FUNCTION);
555:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
556:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
557:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
558:       assertEquals(50, Node.FREE_CALL);
559:       assertEquals(43, Node.IS_CONSTANT_NAME);
560:       assertEquals(36, Node.QUOTED_PROP);
561:       assertEquals(57, Node.REFLECTED_OBJECT);
562:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
563:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
564:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
565:       assertEquals(1, Node.DECR_FLAG);
566:       assertEquals(12, Node.COLUMN_BITS);
567:       assertEquals(37, Node.OPT_ARG_NAME);
568:       assertEquals(32, Node.INCRDECR_PROP);
569:       assertEquals(2, Node.POST_FLAG);
570:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
571:       assertEquals(29, Node.JSDOC_INFO_PROP);
572:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
573:       assertEquals(49, Node.DIRECT_EVAL);
574:       assertEquals(56, Node.CHANGE_TIME);
575:       assertEquals(51, Node.STATIC_SOURCE_FILE);
576:       assertEquals(46, Node.IS_NAMESPACE);
577:       assertEquals(54, Node.SLASH_V);
578:       assertEquals(53, Node.INPUT_ID);
579:       assertEquals(52, Node.LENGTH);
580:       assertEquals(15, Node.NO_SIDE_EFFECTS);
581:       assertEquals(40, Node.ORIGINALNAME_PROP);
582:       assertEquals(30, Node.VAR_ARGS_NAME);
583:       assertEquals(57, Node.LAST_PROP);
584:       assertEquals(47, Node.IS_DISPATCHER);
585:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
586:       assertFalse(boolean2 == boolean0);
587:       assertTrue(boolean2 == boolean1);
588:       assertFalse(boolean2);
589:       assertFalse(node0.isInstanceOf());
590:       assertFalse(node0.isObjectLit());
591:       assertFalse(node0.isThis());
592:       assertFalse(node0.isComma());
593:       assertFalse(node0.isWith());
594:       assertFalse(node0.isFalse());
595:       assertFalse(node0.isAnd());
596:       assertFalse(node0.isExprResult());
597:       assertFalse(node0.isBreak());
598:       assertFalse(node0.isThrow());
599:       assertEquals((-598), node0.getType());
600:       assertFalse(node0.isInc());
601:       assertFalse(node0.isOr());
602:       assertFalse(node0.isReturn());
603:       assertFalse(node0.isTypeOf());
604:       assertFalse(node0.hasChildren());
605:       assertFalse(node0.isDec());
606:       assertEquals((-1), node0.getSourcePosition());
607:       assertFalse(node0.isAssign());
608:       assertFalse(node0.isDelProp());
609:       assertFalse(node0.isGetElem());
610:       assertFalse(node0.isContinue());
611:       assertFalse(node0.isCast());
612:       assertFalse(node0.isDebugger());
613:       assertFalse(node0.isNot());
614:       assertFalse(node0.isWhile());
615:       assertFalse(node0.isString());
616:       assertFalse(node0.isGetProp());
617:       assertFalse(node0.isParamList());
618:       assertFalse(node0.isNull());
619:       assertEquals(0, node0.getChildCount());
620:       assertFalse(node0.isName());
621:       assertFalse(node0.isStringKey());
622:       assertFalse(node0.isCatch());
623:       assertFalse(node0.isCall());
624:       assertFalse(node0.isVoid());
625:       assertFalse(node0.isAdd());
626:       assertFalse(node0.isVar());
627:       assertFalse(node0.isTrue());
628:       assertFalse(node0.isFunction());
629:       assertFalse(node0.isDo());
630:       assertFalse(node0.isEmpty());
631:       assertFalse(node0.isDefaultCase());
632:       assertFalse(node0.isSetterDef());
633:       assertFalse(node0.isNew());
634:       assertFalse(node0.isAssignAdd());
635:       assertFalse(node0.isLabel());
636:       assertFalse(node0.isIn());
637:       assertFalse(node0.hasMoreThanOneChild());
638:       assertFalse(node0.isNE());
639:       assertFalse(node0.isNumber());
640:       assertFalse(node0.isLabelName());
641:       assertFalse(node0.isIf());
642:       assertFalse(node0.isSwitch());
643:       assertFalse(node0.isArrayLit());
644:       assertEquals((-1), node0.getLineno());
645:       assertFalse(node0.isTry());
646:       assertFalse(node0.isBlock());
647:       assertFalse(node0.isHook());
648:       assertFalse(node0.isRegExp());
649:       assertEquals((-1), node0.getCharno());
650:       assertFalse(node0.isGetterDef());
651:       assertFalse(node0.isFor());
652:       assertFalse(node0.isScript());
653:       assertFalse(node0.isCase());
654:       assertFalse(node0.hasOneChild());
655:       
656:       String string0 = node0.getQualifiedName();
657:       assertEquals(8, Node.FLAG_NO_THROWS);
658:       assertEquals(48, Node.DIRECTIVES);
659:       assertEquals(4095, Node.COLUMN_MASK);
660:       assertEquals(39, Node.EMPTY_BLOCK);
661:       assertEquals(55, Node.INFERRED_FUNCTION);
662:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
663:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
664:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
665:       assertEquals(50, Node.FREE_CALL);
666:       assertEquals(43, Node.IS_CONSTANT_NAME);
667:       assertEquals(36, Node.QUOTED_PROP);
668:       assertEquals(57, Node.REFLECTED_OBJECT);
669:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
670:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
671:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
672:       assertEquals(1, Node.DECR_FLAG);
673:       assertEquals(12, Node.COLUMN_BITS);
674:       assertEquals(37, Node.OPT_ARG_NAME);
675:       assertEquals(32, Node.INCRDECR_PROP);
676:       assertEquals(2, Node.POST_FLAG);
677:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
678:       assertEquals(29, Node.JSDOC_INFO_PROP);
679:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
680:       assertEquals(49, Node.DIRECT_EVAL);
681:       assertEquals(56, Node.CHANGE_TIME);
682:       assertEquals(51, Node.STATIC_SOURCE_FILE);
683:       assertEquals(46, Node.IS_NAMESPACE);
684:       assertEquals(54, Node.SLASH_V);
685:       assertEquals(53, Node.INPUT_ID);
686:       assertEquals(52, Node.LENGTH);
687:       assertEquals(15, Node.NO_SIDE_EFFECTS);
688:       assertEquals(40, Node.ORIGINALNAME_PROP);
689:       assertEquals(30, Node.VAR_ARGS_NAME);
690:       assertEquals(57, Node.LAST_PROP);
691:       assertEquals(47, Node.IS_DISPATCHER);
692:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
693:       assertNull(string0);
694:       assertFalse(node0.isInstanceOf());
695:       assertFalse(node0.isObjectLit());
696:       assertFalse(node0.isThis());
697:       assertFalse(node0.isComma());
698:       assertFalse(node0.isWith());
699:       assertFalse(node0.isFalse());
700:       assertFalse(node0.isAnd());
701:       assertFalse(node0.isExprResult());
702:       assertFalse(node0.isBreak());
703:       assertFalse(node0.isThrow());
704:       assertEquals((-598), node0.getType());
705:       assertFalse(node0.isInc());
706:       assertFalse(node0.isOr());
707:       assertFalse(node0.isReturn());
708:       assertFalse(node0.isTypeOf());
709:       assertFalse(node0.hasChildren());
710:       assertFalse(node0.isDec());
711:       assertEquals((-1), node0.getSourcePosition());
712:       assertFalse(node0.isAssign());
713:       assertFalse(node0.isDelProp());
714:       assertFalse(node0.isGetElem());
715:       assertFalse(node0.isContinue());
716:       assertFalse(node0.isCast());
717:       assertFalse(node0.isDebugger());
718:       assertFalse(node0.isNot());
719:       assertFalse(node0.isWhile());
720:       assertFalse(node0.isString());
721:       assertFalse(node0.isGetProp());
722:       assertFalse(node0.isParamList());
723:       assertFalse(node0.isNull());
724:       assertEquals(0, node0.getChildCount());
725:       assertFalse(node0.isName());
726:       assertFalse(node0.isStringKey());
727:       assertFalse(node0.isCatch());
728:       assertFalse(node0.isCall());
729:       assertFalse(node0.isVoid());
730:       assertFalse(node0.isAdd());
731:       assertFalse(node0.isVar());
732:       assertFalse(node0.isTrue());
733:       assertFalse(node0.isFunction());
734:       assertFalse(node0.isDo());
735:       assertFalse(node0.isEmpty());
736:       assertFalse(node0.isDefaultCase());
737:       assertFalse(node0.isSetterDef());
738:       assertFalse(node0.isNew());
739:       assertFalse(node0.isAssignAdd());
740:       assertFalse(node0.isLabel());
741:       assertFalse(node0.isIn());
742:       assertFalse(node0.hasMoreThanOneChild());
743:       assertFalse(node0.isNE());
744:       assertFalse(node0.isNumber());
745:       assertFalse(node0.isLabelName());
746:       assertFalse(node0.isIf());
747:       assertFalse(node0.isSwitch());
748:       assertFalse(node0.isArrayLit());
749:       assertEquals((-1), node0.getLineno());
750:       assertFalse(node0.isTry());
751:       assertFalse(node0.isBlock());
752:       assertFalse(node0.isHook());
753:       assertFalse(node0.isRegExp());
754:       assertEquals((-1), node0.getCharno());
755:       assertFalse(node0.isGetterDef());
756:       assertFalse(node0.isFor());
757:       assertFalse(node0.isScript());
758:       assertFalse(node0.isCase());
759:       assertFalse(node0.hasOneChild());
760:       
761:       int int1 = node0.getIntProp((-239));
762:       assertEquals(8, Node.FLAG_NO_THROWS);
763:       assertEquals(48, Node.DIRECTIVES);
764:       assertEquals(4095, Node.COLUMN_MASK);
765:       assertEquals(39, Node.EMPTY_BLOCK);
766:       assertEquals(55, Node.INFERRED_FUNCTION);
767:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
768:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
769:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
770:       assertEquals(50, Node.FREE_CALL);
771:       assertEquals(43, Node.IS_CONSTANT_NAME);
772:       assertEquals(36, Node.QUOTED_PROP);
773:       assertEquals(57, Node.REFLECTED_OBJECT);
774:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
775:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
776:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
777:       assertEquals(1, Node.DECR_FLAG);
778:       assertEquals(12, Node.COLUMN_BITS);
779:       assertEquals(37, Node.OPT_ARG_NAME);
780:       assertEquals(32, Node.INCRDECR_PROP);
781:       assertEquals(2, Node.POST_FLAG);
782:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
783:       assertEquals(29, Node.JSDOC_INFO_PROP);
784:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
785:       assertEquals(49, Node.DIRECT_EVAL);
786:       assertEquals(56, Node.CHANGE_TIME);
787:       assertEquals(51, Node.STATIC_SOURCE_FILE);
788:       assertEquals(46, Node.IS_NAMESPACE);
789:       assertEquals(54, Node.SLASH_V);
790:       assertEquals(53, Node.INPUT_ID);
791:       assertEquals(52, Node.LENGTH);
792:       assertEquals(15, Node.NO_SIDE_EFFECTS);
793:       assertEquals(40, Node.ORIGINALNAME_PROP);
794:       assertEquals(30, Node.VAR_ARGS_NAME);
795:       assertEquals(57, Node.LAST_PROP);
796:       assertEquals(47, Node.IS_DISPATCHER);
797:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
798:       assertFalse(int1 == int0);
799:       assertEquals(0, int1);
800:       assertFalse(node0.isInstanceOf());
801:       assertFalse(node0.isObjectLit());
802:       assertFalse(node0.isThis());
803:       assertFalse(node0.isComma());
804:       assertFalse(node0.isWith());
805:       assertFalse(node0.isFalse());
806:       assertFalse(node0.isAnd());
807:       assertFalse(node0.isExprResult());
808:       assertFalse(node0.isBreak());
809:       assertFalse(node0.isThrow());
810:       assertEquals((-598), node0.getType());
811:       assertFalse(node0.isInc());
812:       assertFalse(node0.isOr());
813:       assertFalse(node0.isReturn());
814:       assertFalse(node0.isTypeOf());
815:       assertFalse(node0.hasChildren());
816:       assertFalse(node0.isDec());
817:       assertEquals((-1), node0.getSourcePosition());
818:       assertFalse(node0.isAssign());
819:       assertFalse(node0.isDelProp());
820:       assertFalse(node0.isGetElem());
821:       assertFalse(node0.isContinue());
822:       assertFalse(node0.isCast());
823:       assertFalse(node0.isDebugger());
824:       assertFalse(node0.isNot());
825:       assertFalse(node0.isWhile());
826:       assertFalse(node0.isString());
827:       assertFalse(node0.isGetProp());
828:       assertFalse(node0.isParamList());
829:       assertFalse(node0.isNull());
830:       assertEquals(0, node0.getChildCount());
831:       assertFalse(node0.isName());
832:       assertFalse(node0.isStringKey());
833:       assertFalse(node0.isCatch());
834:       assertFalse(node0.isCall());
835:       assertFalse(node0.isVoid());
836:       assertFalse(node0.isAdd());
837:       assertFalse(node0.isVar());
838:       assertFalse(node0.isTrue());
839:       assertFalse(node0.isFunction());
840:       assertFalse(node0.isDo());
841:       assertFalse(node0.isEmpty());
842:       assertFalse(node0.isDefaultCase());
843:       assertFalse(node0.isSetterDef());
844:       assertFalse(node0.isNew());
845:       assertFalse(node0.isAssignAdd());
846:       assertFalse(node0.isLabel());
847:       assertFalse(node0.isIn());
848:       assertFalse(node0.hasMoreThanOneChild());
849:       assertFalse(node0.isNE());
850:       assertFalse(node0.isNumber());
851:       assertFalse(node0.isLabelName());
852:       assertFalse(node0.isIf());
853:       assertFalse(node0.isSwitch());
854:       assertFalse(node0.isArrayLit());
855:       assertEquals((-1), node0.getLineno());
856:       assertFalse(node0.isTry());
857:       assertFalse(node0.isBlock());
858:       assertFalse(node0.isHook());
859:       assertFalse(node0.isRegExp());
860:       assertEquals((-1), node0.getCharno());
861:       assertFalse(node0.isGetterDef());
862:       assertFalse(node0.isFor());
863:       assertFalse(node0.isScript());
864:       assertFalse(node0.isCase());
865:       assertFalse(node0.hasOneChild());
866:       
867:       JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
868:       assertEquals(8, Node.FLAG_NO_THROWS);
869:       assertEquals(48, Node.DIRECTIVES);
870:       assertEquals(4095, Node.COLUMN_MASK);
871:       assertEquals(39, Node.EMPTY_BLOCK);
872:       assertEquals(55, Node.INFERRED_FUNCTION);
873:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
874:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
875:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
876:       assertEquals(50, Node.FREE_CALL);
877:       assertEquals(43, Node.IS_CONSTANT_NAME);
878:       assertEquals(36, Node.QUOTED_PROP);
879:       assertEquals(57, Node.REFLECTED_OBJECT);
880:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
881:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
882:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
883:       assertEquals(1, Node.DECR_FLAG);
884:       assertEquals(12, Node.COLUMN_BITS);
885:       assertEquals(37, Node.OPT_ARG_NAME);
886:       assertEquals(32, Node.INCRDECR_PROP);
887:       assertEquals(2, Node.POST_FLAG);
888:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
889:       assertEquals(29, Node.JSDOC_INFO_PROP);
890:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
891:       assertEquals(49, Node.DIRECT_EVAL);
892:       assertEquals(56, Node.CHANGE_TIME);
893:       assertEquals(51, Node.STATIC_SOURCE_FILE);
894:       assertEquals(46, Node.IS_NAMESPACE);
895:       assertEquals(54, Node.SLASH_V);
896:       assertEquals(53, Node.INPUT_ID);
897:       assertEquals(52, Node.LENGTH);
898:       assertEquals(15, Node.NO_SIDE_EFFECTS);
899:       assertEquals(40, Node.ORIGINALNAME_PROP);
900:       assertEquals(30, Node.VAR_ARGS_NAME);
901:       assertEquals(57, Node.LAST_PROP);
902:       assertEquals(47, Node.IS_DISPATCHER);
903:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
904:       assertNull(jSDocInfo0);
905:       assertFalse(node0.isInstanceOf());
906:       assertFalse(node0.isObjectLit());
907:       assertFalse(node0.isThis());
908:       assertFalse(node0.isComma());
909:       assertFalse(node0.isWith());
910:       assertFalse(node0.isFalse());
911:       assertFalse(node0.isAnd());
912:       assertFalse(node0.isExprResult());
913:       assertFalse(node0.isBreak());
914:       assertFalse(node0.isThrow());
915:       assertEquals((-598), node0.getType());
916:       assertFalse(node0.isInc());
917:       assertFalse(node0.isOr());
918:       assertFalse(node0.isReturn());
919:       assertFalse(node0.isTypeOf());
920:       assertFalse(node0.hasChildren());
921:       assertFalse(node0.isDec());
922:       assertEquals((-1), node0.getSourcePosition());
923:       assertFalse(node0.isAssign());
924:       assertFalse(node0.isDelProp());
925:       assertFalse(node0.isGetElem());
926:       assertFalse(node0.isContinue());
927:       assertFalse(node0.isCast());
928:       assertFalse(node0.isDebugger());
929:       assertFalse(node0.isNot());
930:       assertFalse(node0.isWhile());
931:       assertFalse(node0.isString());
932:       assertFalse(node0.isGetProp());
933:       assertFalse(node0.isParamList());
934:       assertFalse(node0.isNull());
935:       assertEquals(0, node0.getChildCount());
936:       assertFalse(node0.isName());
937:       assertFalse(node0.isStringKey());
938:       assertFalse(node0.isCatch());
939:       assertFalse(node0.isCall());
940:       assertFalse(node0.isVoid());
941:       assertFalse(node0.isAdd());
942:       assertFalse(node0.isVar());
943:       assertFalse(node0.isTrue());
944:       assertFalse(node0.isFunction());
945:       assertFalse(node0.isDo());
946:       assertFalse(node0.isEmpty());
947:       assertFalse(node0.isDefaultCase());
948:       assertFalse(node0.isSetterDef());
949:       assertFalse(node0.isNew());
950:       assertFalse(node0.isAssignAdd());
951:       assertFalse(node0.isLabel());
952:       assertFalse(node0.isIn());
953:       assertFalse(node0.hasMoreThanOneChild());
954:       assertFalse(node0.isNE());
955:       assertFalse(node0.isNumber());
956:       assertFalse(node0.isLabelName());
957:       assertFalse(node0.isIf());
958:       assertFalse(node0.isSwitch());
959:       assertFalse(node0.isArrayLit());
960:       assertEquals((-1), node0.getLineno());
961:       assertFalse(node0.isTry());
962:       assertFalse(node0.isBlock());
963:       assertFalse(node0.isHook());
964:       assertFalse(node0.isRegExp());
965:       assertEquals((-1), node0.getCharno());
966:       assertFalse(node0.isGetterDef());
967:       assertFalse(node0.isFor());
968:       assertFalse(node0.isScript());
969:       assertFalse(node0.isCase());
970:       assertFalse(node0.hasOneChild());
971:       
972:       Node node1 = new Node((-4096), node0, (-3028), 37);
973:       assertEquals(8, Node.FLAG_NO_THROWS);
974:       assertEquals(48, Node.DIRECTIVES);
975:       assertEquals(4095, Node.COLUMN_MASK);
976:       assertEquals(39, Node.EMPTY_BLOCK);
977:       assertEquals(55, Node.INFERRED_FUNCTION);
978:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
979:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
980:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
981:       assertEquals(50, Node.FREE_CALL);
982:       assertEquals(43, Node.IS_CONSTANT_NAME);
983:       assertEquals(36, Node.QUOTED_PROP);
984:       assertEquals(57, Node.REFLECTED_OBJECT);
985:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
986:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
987:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
988:       assertEquals(1, Node.DECR_FLAG);
989:       assertEquals(12, Node.COLUMN_BITS);
990:       assertEquals(37, Node.OPT_ARG_NAME);
991:       assertEquals(32, Node.INCRDECR_PROP);
992:       assertEquals(2, Node.POST_FLAG);
993:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
994:       assertEquals(29, Node.JSDOC_INFO_PROP);
995:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
996:       assertEquals(49, Node.DIRECT_EVAL);
997:       assertEquals(56, Node.CHANGE_TIME);
998:       assertEquals(51, Node.STATIC_SOURCE_FILE);
999:       assertEquals(46, Node.IS_NAMESPACE);
1000:       assertEquals(54, Node.SLASH_V);
1001:       assertEquals(53, Node.INPUT_ID);
1002:       assertEquals(52, Node.LENGTH);
1003:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1004:       assertEquals(40, Node.ORIGINALNAME_PROP);
1005:       assertEquals(30, Node.VAR_ARGS_NAME);
1006:       assertEquals(57, Node.LAST_PROP);
1007:       assertEquals(47, Node.IS_DISPATCHER);
1008:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1009:       assertEquals(30, Node.VAR_ARGS_NAME);
1010:       assertEquals(49, Node.DIRECT_EVAL);
1011:       assertEquals(57, Node.LAST_PROP);
1012:       assertEquals(12, Node.COLUMN_BITS);
1013:       assertEquals(54, Node.SLASH_V);
1014:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1015:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1016:       assertEquals(52, Node.LENGTH);
1017:       assertEquals(32, Node.INCRDECR_PROP);
1018:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1019:       assertEquals(1, Node.DECR_FLAG);
1020:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1021:       assertEquals(50, Node.FREE_CALL);
1022:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1023:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1024:       assertEquals(2, Node.POST_FLAG);
1025:       assertEquals(47, Node.IS_DISPATCHER);
1026:       assertEquals(46, Node.IS_NAMESPACE);
1027:       assertEquals(40, Node.ORIGINALNAME_PROP);
1028:       assertEquals(43, Node.IS_CONSTANT_NAME);
1029:       assertEquals(36, Node.QUOTED_PROP);
1030:       assertEquals(55, Node.INFERRED_FUNCTION);
1031:       assertEquals(39, Node.EMPTY_BLOCK);
1032:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1033:       assertEquals(53, Node.INPUT_ID);
1034:       assertEquals(29, Node.JSDOC_INFO_PROP);
1035:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1036:       assertEquals(56, Node.CHANGE_TIME);
1037:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1038:       assertEquals(8, Node.FLAG_NO_THROWS);
1039:       assertEquals(57, Node.REFLECTED_OBJECT);
1040:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1041:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1042:       assertEquals(4095, Node.COLUMN_MASK);
1043:       assertEquals(48, Node.DIRECTIVES);
1044:       assertEquals(37, Node.OPT_ARG_NAME);
1045:       assertFalse(node1.equals((Object)node0));
1046:       assertNotNull(node1);
1047:       assertFalse(node0.isInstanceOf());
1048:       assertFalse(node0.isObjectLit());
1049:       assertFalse(node0.isThis());
1050:       assertFalse(node0.isComma());
1051:       assertFalse(node0.isWith());
1052:       assertFalse(node0.isFalse());
1053:       assertFalse(node0.isAnd());
1054:       assertFalse(node0.isExprResult());
1055:       assertFalse(node0.isBreak());
1056:       assertFalse(node0.isThrow());
1057:       assertEquals((-598), node0.getType());
1058:       assertFalse(node0.isInc());
1059:       assertFalse(node0.isOr());
1060:       assertFalse(node0.isReturn());
1061:       assertFalse(node0.isTypeOf());
1062:       assertFalse(node0.hasChildren());
1063:       assertFalse(node0.isDec());
1064:       assertEquals((-1), node0.getSourcePosition());
1065:       assertFalse(node0.isAssign());
1066:       assertFalse(node0.isDelProp());
1067:       assertFalse(node0.isGetElem());
1068:       assertFalse(node0.isContinue());
1069:       assertFalse(node0.isCast());
1070:       assertFalse(node0.isDebugger());
1071:       assertFalse(node0.isNot());
1072:       assertFalse(node0.isWhile());
1073:       assertFalse(node0.isString());
1074:       assertFalse(node0.isGetProp());
1075:       assertFalse(node0.isParamList());
1076:       assertFalse(node0.isNull());
1077:       assertEquals(0, node0.getChildCount());
1078:       assertFalse(node0.isName());
1079:       assertFalse(node0.isStringKey());
1080:       assertFalse(node0.isCatch());
1081:       assertFalse(node0.isCall());
1082:       assertFalse(node0.isVoid());
1083:       assertFalse(node0.isAdd());
1084:       assertFalse(node0.isVar());
1085:       assertFalse(node0.isTrue());
1086:       assertFalse(node0.isFunction());
1087:       assertFalse(node0.isDo());
1088:       assertFalse(node0.isEmpty());
1089:       assertFalse(node0.isDefaultCase());
1090:       assertFalse(node0.isSetterDef());
1091:       assertFalse(node0.isNew());
1092:       assertFalse(node0.isAssignAdd());
1093:       assertFalse(node0.isLabel());
1094:       assertFalse(node0.isIn());
1095:       assertFalse(node0.hasMoreThanOneChild());
1096:       assertFalse(node0.isNE());
1097:       assertFalse(node0.isNumber());
1098:       assertFalse(node0.isLabelName());
1099:       assertFalse(node0.isIf());
1100:       assertFalse(node0.isSwitch());
1101:       assertFalse(node0.isArrayLit());
1102:       assertEquals((-1), node0.getLineno());
1103:       assertFalse(node0.isTry());
1104:       assertFalse(node0.isBlock());
1105:       assertFalse(node0.isHook());
1106:       assertFalse(node0.isRegExp());
1107:       assertEquals((-1), node0.getCharno());
1108:       assertFalse(node0.isGetterDef());
1109:       assertFalse(node0.isFor());
1110:       assertFalse(node0.isScript());
1111:       assertFalse(node0.isCase());
1112:       assertFalse(node0.hasOneChild());
1113:       assertFalse(node1.isWhile());
1114:       assertFalse(node1.isNew());
1115:       assertFalse(node1.isDo());
1116:       assertFalse(node1.isAdd());
1117:       assertFalse(node1.isOr());
1118:       assertFalse(node1.isNumber());
1119:       assertFalse(node1.isDec());
1120:       assertFalse(node1.isGetElem());
1121:       assertFalse(node1.isNull());
1122:       assertFalse(node1.isName());
1123:       assertEquals((-1), node1.getLineno());
1124:       assertFalse(node1.isReturn());
1125:       assertFalse(node1.isBlock());
1126:       assertFalse(node1.isCall());
1127:       assertFalse(node1.isCatch());
1128:       assertFalse(node1.isAssign());
1129:       assertFalse(node1.hasMoreThanOneChild());
1130:       assertFalse(node1.isTypeOf());
1131:       assertFalse(node1.isAnd());
1132:       assertFalse(node1.isObjectLit());
1133:       assertFalse(node1.isDebugger());
1134:       assertFalse(node1.isNot());
1135:       assertEquals((-1), node1.getSourcePosition());
1136:       assertFalse(node1.isSetterDef());
1137:       assertFalse(node1.isThrow());
1138:       assertFalse(node1.isCast());
1139:       assertFalse(node1.isContinue());
1140:       assertFalse(node1.isFalse());
1141:       assertFalse(node1.isFunction());
1142:       assertFalse(node1.isString());
1143:       assertFalse(node1.isInc());
1144:       assertFalse(node1.isCase());
1145:       assertFalse(node1.isSwitch());
1146:       assertFalse(node1.isIn());
1147:       assertEquals((-1), node1.getCharno());
1148:       assertFalse(node1.isBreak());
1149:       assertFalse(node1.isDelProp());
1150:       assertFalse(node1.isIf());
1151:       assertFalse(node1.isFor());
1152:       assertFalse(node1.isNE());
1153:       assertTrue(node1.hasOneChild());
1154:       assertFalse(node1.isThis());
1155:       assertFalse(node1.isGetProp());
1156:       assertEquals(1, node1.getChildCount());
1157:       assertFalse(node1.isInstanceOf());
1158:       assertEquals((-4096), node1.getType());
1159:       assertTrue(node1.hasChildren());
1160:       assertFalse(node1.isHook());
1161:       assertFalse(node1.isComma());
1162:       assertFalse(node1.isRegExp());
1163:       assertFalse(node1.isWith());
1164:       assertFalse(node1.isDefaultCase());
1165:       assertFalse(node1.isScript());
1166:       assertFalse(node1.isExprResult());
1167:       assertFalse(node1.isTrue());
1168:       assertFalse(node1.isVoid());
1169:       assertFalse(node1.isTry());
1170:       assertFalse(node1.isGetterDef());
1171:       assertFalse(node1.isEmpty());
1172:       assertFalse(node1.isParamList());
1173:       assertFalse(node1.isStringKey());
1174:       assertFalse(node1.isAssignAdd());
1175:       assertFalse(node1.isLabelName());
1176:       assertFalse(node1.isLabel());
1177:       assertFalse(node1.isVar());
1178:       assertFalse(node1.isArrayLit());
1179:       
1180:       Node node2 = node0.useSourceInfoFromForTree(node1);
1181:       assertEquals(8, Node.FLAG_NO_THROWS);
1182:       assertEquals(48, Node.DIRECTIVES);
1183:       assertEquals(4095, Node.COLUMN_MASK);
1184:       assertEquals(39, Node.EMPTY_BLOCK);
1185:       assertEquals(55, Node.INFERRED_FUNCTION);
1186:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1187:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1188:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1189:       assertEquals(50, Node.FREE_CALL);
1190:       assertEquals(43, Node.IS_CONSTANT_NAME);
1191:       assertEquals(36, Node.QUOTED_PROP);
1192:       assertEquals(57, Node.REFLECTED_OBJECT);
1193:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1194:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1195:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1196:       assertEquals(1, Node.DECR_FLAG);
1197:       assertEquals(12, Node.COLUMN_BITS);
1198:       assertEquals(37, Node.OPT_ARG_NAME);
1199:       assertEquals(32, Node.INCRDECR_PROP);
1200:       assertEquals(2, Node.POST_FLAG);
1201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1202:       assertEquals(29, Node.JSDOC_INFO_PROP);
1203:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1204:       assertEquals(49, Node.DIRECT_EVAL);
1205:       assertEquals(56, Node.CHANGE_TIME);
1206:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1207:       assertEquals(46, Node.IS_NAMESPACE);
1208:       assertEquals(54, Node.SLASH_V);
1209:       assertEquals(53, Node.INPUT_ID);
1210:       assertEquals(52, Node.LENGTH);
1211:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1212:       assertEquals(40, Node.ORIGINALNAME_PROP);
1213:       assertEquals(30, Node.VAR_ARGS_NAME);
1214:       assertEquals(57, Node.LAST_PROP);
1215:       assertEquals(47, Node.IS_DISPATCHER);
1216:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1217:       assertEquals(30, Node.VAR_ARGS_NAME);
1218:       assertEquals(49, Node.DIRECT_EVAL);
1219:       assertEquals(57, Node.LAST_PROP);
1220:       assertEquals(12, Node.COLUMN_BITS);
1221:       assertEquals(54, Node.SLASH_V);
1222:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1223:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1224:       assertEquals(52, Node.LENGTH);
1225:       assertEquals(32, Node.INCRDECR_PROP);
1226:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1227:       assertEquals(1, Node.DECR_FLAG);
1228:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1229:       assertEquals(50, Node.FREE_CALL);
1230:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1231:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1232:       assertEquals(2, Node.POST_FLAG);
1233:       assertEquals(47, Node.IS_DISPATCHER);
1234:       assertEquals(46, Node.IS_NAMESPACE);
1235:       assertEquals(40, Node.ORIGINALNAME_PROP);
1236:       assertEquals(43, Node.IS_CONSTANT_NAME);
1237:       assertEquals(36, Node.QUOTED_PROP);
1238:       assertEquals(55, Node.INFERRED_FUNCTION);
1239:       assertEquals(39, Node.EMPTY_BLOCK);
1240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1241:       assertEquals(53, Node.INPUT_ID);
1242:       assertEquals(29, Node.JSDOC_INFO_PROP);
1243:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1244:       assertEquals(56, Node.CHANGE_TIME);
1245:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1246:       assertEquals(8, Node.FLAG_NO_THROWS);
1247:       assertEquals(57, Node.REFLECTED_OBJECT);
1248:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1249:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1250:       assertEquals(4095, Node.COLUMN_MASK);
1251:       assertEquals(48, Node.DIRECTIVES);
1252:       assertEquals(37, Node.OPT_ARG_NAME);
1253:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1254:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1255:       assertEquals(36, Node.QUOTED_PROP);
1256:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1257:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1258:       assertEquals(53, Node.INPUT_ID);
1259:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1260:       assertEquals(55, Node.INFERRED_FUNCTION);
1261:       assertEquals(29, Node.JSDOC_INFO_PROP);
1262:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1263:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1264:       assertEquals(46, Node.IS_NAMESPACE);
1265:       assertEquals(43, Node.IS_CONSTANT_NAME);
1266:       assertEquals(47, Node.IS_DISPATCHER);
1267:       assertEquals(2, Node.POST_FLAG);
1268:       assertEquals(30, Node.VAR_ARGS_NAME);
1269:       assertEquals(40, Node.ORIGINALNAME_PROP);
1270:       assertEquals(57, Node.REFLECTED_OBJECT);
1271:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1272:       assertEquals(54, Node.SLASH_V);
1273:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1274:       assertEquals(39, Node.EMPTY_BLOCK);
1275:       assertEquals(57, Node.LAST_PROP);
1276:       assertEquals(8, Node.FLAG_NO_THROWS);
1277:       assertEquals(50, Node.FREE_CALL);
1278:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1279:       assertEquals(52, Node.LENGTH);
1280:       assertEquals(12, Node.COLUMN_BITS);
1281:       assertEquals(4095, Node.COLUMN_MASK);
1282:       assertEquals(32, Node.INCRDECR_PROP);
1283:       assertEquals(1, Node.DECR_FLAG);
1284:       assertEquals(56, Node.CHANGE_TIME);
1285:       assertEquals(37, Node.OPT_ARG_NAME);
1286:       assertEquals(48, Node.DIRECTIVES);
1287:       assertEquals(49, Node.DIRECT_EVAL);
1288:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1289:       assertFalse(node0.equals((Object)node1));
1290:       assertFalse(node1.equals((Object)node0));
1291:       assertFalse(node2.equals((Object)node1));
1292:       assertNotNull(node2);
1293:       assertSame(node0, node2);
1294:       assertSame(node2, node0);
1295:       assertFalse(node0.isInstanceOf());
1296:       assertFalse(node0.isObjectLit());
1297:       assertFalse(node0.isThis());
1298:       assertFalse(node0.isComma());
1299:       assertFalse(node0.isWith());
1300:       assertFalse(node0.isFalse());
1301:       assertFalse(node0.isAnd());
1302:       assertFalse(node0.isExprResult());
1303:       assertFalse(node0.isBreak());
1304:       assertFalse(node0.isThrow());
1305:       assertEquals((-598), node0.getType());
1306:       assertFalse(node0.isInc());
1307:       assertFalse(node0.isOr());
1308:       assertFalse(node0.isReturn());
1309:       assertFalse(node0.isTypeOf());
1310:       assertFalse(node0.hasChildren());
1311:       assertFalse(node0.isDec());
1312:       assertEquals((-1), node0.getSourcePosition());
1313:       assertFalse(node0.isAssign());
1314:       assertFalse(node0.isDelProp());
1315:       assertFalse(node0.isGetElem());
1316:       assertFalse(node0.isContinue());
1317:       assertFalse(node0.isCast());
1318:       assertFalse(node0.isDebugger());
1319:       assertFalse(node0.isNot());
1320:       assertFalse(node0.isWhile());
1321:       assertFalse(node0.isString());
1322:       assertFalse(node0.isGetProp());
1323:       assertFalse(node0.isParamList());
1324:       assertFalse(node0.isNull());
1325:       assertEquals(0, node0.getChildCount());
1326:       assertFalse(node0.isName());
1327:       assertFalse(node0.isStringKey());
1328:       assertFalse(node0.isCatch());
1329:       assertFalse(node0.isCall());
1330:       assertFalse(node0.isVoid());
1331:       assertFalse(node0.isAdd());
1332:       assertFalse(node0.isVar());
1333:       assertFalse(node0.isTrue());
1334:       assertFalse(node0.isFunction());
1335:       assertFalse(node0.isDo());
1336:       assertFalse(node0.isEmpty());
1337:       assertFalse(node0.isDefaultCase());
1338:       assertFalse(node0.isSetterDef());
1339:       assertFalse(node0.isNew());
1340:       assertFalse(node0.isAssignAdd());
1341:       assertFalse(node0.isLabel());
1342:       assertFalse(node0.isIn());
1343:       assertFalse(node0.hasMoreThanOneChild());
1344:       assertFalse(node0.isNE());
1345:       assertFalse(node0.isNumber());
1346:       assertFalse(node0.isLabelName());
1347:       assertFalse(node0.isIf());
1348:       assertFalse(node0.isSwitch());
1349:       assertFalse(node0.isArrayLit());
1350:       assertEquals((-1), node0.getLineno());
1351:       assertFalse(node0.isTry());
1352:       assertFalse(node0.isBlock());
1353:       assertFalse(node0.isHook());
1354:       assertFalse(node0.isRegExp());
1355:       assertEquals((-1), node0.getCharno());
1356:       assertFalse(node0.isGetterDef());
1357:       assertFalse(node0.isFor());
1358:       assertFalse(node0.isScript());
1359:       assertFalse(node0.isCase());
1360:       assertFalse(node0.hasOneChild());
1361:       assertFalse(node1.isWhile());
1362:       assertFalse(node1.isNew());
1363:       assertFalse(node1.isDo());
1364:       assertFalse(node1.isAdd());
1365:       assertFalse(node1.isOr());
1366:       assertFalse(node1.isNumber());
1367:       assertFalse(node1.isDec());
1368:       assertFalse(node1.isGetElem());
1369:       assertFalse(node1.isNull());
1370:       assertFalse(node1.isName());
1371:       assertEquals((-1), node1.getLineno());
1372:       assertFalse(node1.isReturn());
1373:       assertFalse(node1.isBlock());
1374:       assertFalse(node1.isCall());
1375:       assertFalse(node1.isCatch());
1376:       assertFalse(node1.isAssign());
1377:       assertFalse(node1.hasMoreThanOneChild());
1378:       assertFalse(node1.isTypeOf());
1379:       assertFalse(node1.isAnd());
1380:       assertFalse(node1.isObjectLit());
1381:       assertFalse(node1.isDebugger());
1382:       assertFalse(node1.isNot());
1383:       assertEquals((-1), node1.getSourcePosition());
1384:       assertFalse(node1.isSetterDef());
1385:       assertFalse(node1.isThrow());
1386:       assertFalse(node1.isCast());
1387:       assertFalse(node1.isContinue());
1388:       assertFalse(node1.isFalse());
1389:       assertFalse(node1.isFunction());
1390:       assertFalse(node1.isString());
1391:       assertFalse(node1.isInc());
1392:       assertFalse(node1.isCase());
1393:       assertFalse(node1.isSwitch());
1394:       assertFalse(node1.isIn());
1395:       assertEquals((-1), node1.getCharno());
1396:       assertFalse(node1.isBreak());
1397:       assertFalse(node1.isDelProp());
1398:       assertFalse(node1.isIf());
1399:       assertFalse(node1.isFor());
1400:       assertFalse(node1.isNE());
1401:       assertTrue(node1.hasOneChild());
1402:       assertFalse(node1.isThis());
1403:       assertFalse(node1.isGetProp());
1404:       assertEquals(1, node1.getChildCount());
1405:       assertFalse(node1.isInstanceOf());
1406:       assertEquals((-4096), node1.getType());
1407:       assertTrue(node1.hasChildren());
1408:       assertFalse(node1.isHook());
1409:       assertFalse(node1.isComma());
1410:       assertFalse(node1.isRegExp());
1411:       assertFalse(node1.isWith());
1412:       assertFalse(node1.isDefaultCase());
1413:       assertFalse(node1.isScript());
1414:       assertFalse(node1.isExprResult());
1415:       assertFalse(node1.isTrue());
1416:       assertFalse(node1.isVoid());
1417:       assertFalse(node1.isTry());
1418:       assertFalse(node1.isGetterDef());
1419:       assertFalse(node1.isEmpty());
1420:       assertFalse(node1.isParamList());
1421:       assertFalse(node1.isStringKey());
1422:       assertFalse(node1.isAssignAdd());
1423:       assertFalse(node1.isLabelName());
1424:       assertFalse(node1.isLabel());
1425:       assertFalse(node1.isVar());
1426:       assertFalse(node1.isArrayLit());
1427:       assertFalse(node2.isEmpty());
1428:       assertFalse(node2.isTry());
1429:       assertFalse(node2.isDelProp());
1430:       assertFalse(node2.isVoid());
1431:       assertFalse(node2.isArrayLit());
1432:       assertFalse(node2.isNE());
1433:       assertFalse(node2.isTrue());
1434:       assertFalse(node2.isIf());
1435:       assertFalse(node2.isGetterDef());
1436:       assertFalse(node2.isDebugger());
1437:       assertFalse(node2.isCatch());
1438:       assertFalse(node2.isCase());
1439:       assertFalse(node2.isRegExp());
1440:       assertFalse(node2.isFor());
1441:       assertFalse(node2.isHook());
1442:       assertFalse(node2.isVar());
1443:       assertFalse(node2.isCall());
1444:       assertFalse(node2.isStringKey());
1445:       assertFalse(node2.isAdd());
1446:       assertFalse(node2.isName());
1447:       assertFalse(node2.isBreak());
1448:       assertFalse(node2.isNew());
1449:       assertFalse(node2.isSwitch());
1450:       assertFalse(node2.isNull());
1451:       assertFalse(node2.isParamList());
1452:       assertEquals((-1), node2.getCharno());
1453:       assertEquals((-598), node2.getType());
1454:       assertFalse(node2.isDo());
1455:       assertFalse(node2.isAssignAdd());
1456:       assertFalse(node2.isDefaultCase());
1457:       assertFalse(node2.isLabel());
1458:       assertEquals(0, node2.getChildCount());
1459:       assertFalse(node2.isCast());
1460:       assertFalse(node2.isLabelName());
1461:       assertFalse(node2.isGetElem());
1462:       assertFalse(node2.hasOneChild());
1463:       assertFalse(node2.isScript());
1464:       assertFalse(node2.isNumber());
1465:       assertFalse(node2.isNot());
1466:       assertFalse(node2.isOr());
1467:       assertEquals((-1), node2.getSourcePosition());
1468:       assertFalse(node2.hasMoreThanOneChild());
1469:       assertFalse(node2.isObjectLit());
1470:       assertFalse(node2.isInstanceOf());
1471:       assertFalse(node2.isGetProp());
1472:       assertEquals((-1), node2.getLineno());
1473:       assertFalse(node2.isComma());
1474:       assertFalse(node2.isExprResult());
1475:       assertFalse(node2.isTypeOf());
1476:       assertFalse(node2.isThis());
1477:       assertFalse(node2.isWhile());
1478:       assertFalse(node2.isAssign());
1479:       assertFalse(node2.isWith());
1480:       assertFalse(node2.isReturn());
1481:       assertFalse(node2.isBlock());
1482:       assertFalse(node2.hasChildren());
1483:       assertFalse(node2.isDec());
1484:       assertFalse(node2.isThrow());
1485:       assertFalse(node2.isFalse());
1486:       assertFalse(node2.isSetterDef());
1487:       assertFalse(node2.isInc());
1488:       assertFalse(node2.isString());
1489:       assertFalse(node2.isIn());
1490:       assertFalse(node2.isContinue());
1491:       assertFalse(node2.isAnd());
1492:       assertFalse(node2.isFunction());
1493:       
1494:       Node node3 = Node.newNumber((double) 2);
1495:       assertEquals(48, Node.DIRECTIVES);
1496:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1497:       assertEquals(8, Node.FLAG_NO_THROWS);
1498:       assertEquals(39, Node.EMPTY_BLOCK);
1499:       assertEquals(4095, Node.COLUMN_MASK);
1500:       assertEquals(55, Node.INFERRED_FUNCTION);
1501:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1502:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1503:       assertEquals(52, Node.LENGTH);
1504:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1505:       assertEquals(53, Node.INPUT_ID);
1506:       assertEquals(29, Node.JSDOC_INFO_PROP);
1507:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1508:       assertEquals(36, Node.QUOTED_PROP);
1509:       assertEquals(49, Node.DIRECT_EVAL);
1510:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1511:       assertEquals(56, Node.CHANGE_TIME);
1512:       assertEquals(57, Node.REFLECTED_OBJECT);
1513:       assertEquals(32, Node.INCRDECR_PROP);
1514:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1515:       assertEquals(37, Node.OPT_ARG_NAME);
1516:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1517:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1518:       assertEquals(57, Node.LAST_PROP);
1519:       assertEquals(47, Node.IS_DISPATCHER);
1520:       assertEquals(2, Node.POST_FLAG);
1521:       assertEquals(30, Node.VAR_ARGS_NAME);
1522:       assertEquals(1, Node.DECR_FLAG);
1523:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1524:       assertEquals(12, Node.COLUMN_BITS);
1525:       assertEquals(40, Node.ORIGINALNAME_PROP);
1526:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1527:       assertEquals(50, Node.FREE_CALL);
1528:       assertEquals(43, Node.IS_CONSTANT_NAME);
1529:       assertEquals(46, Node.IS_NAMESPACE);
1530:       assertEquals(54, Node.SLASH_V);
1531:       assertFalse(node3.equals((Object)node1));
1532:       assertFalse(node3.equals((Object)node2));
1533:       assertFalse(node3.equals((Object)node0));
1534:       assertNotNull(node3);
1535:       assertFalse(node3.isInstanceOf());
1536:       assertFalse(node3.isAnd());
1537:       assertFalse(node3.isObjectLit());
1538:       assertFalse(node3.isNot());
1539:       assertFalse(node3.isComma());
1540:       assertFalse(node3.isThis());
1541:       assertFalse(node3.isScript());
1542:       assertFalse(node3.isGetProp());
1543:       assertFalse(node3.isCast());
1544:       assertFalse(node3.isThrow());
1545:       assertFalse(node3.isFalse());
1546:       assertEquals((-1), node3.getCharno());
1547:       assertFalse(node3.isSwitch());
1548:       assertFalse(node3.isLabelName());
1549:       assertFalse(node3.isReturn());
1550:       assertFalse(node3.isAssignAdd());
1551:       assertFalse(node3.isOr());
1552:       assertFalse(node3.isLabel());
1553:       assertEquals((-1), node3.getSourcePosition());
1554:       assertFalse(node3.hasChildren());
1555:       assertFalse(node3.isEmpty());
1556:       assertFalse(node3.isWhile());
1557:       assertFalse(node3.isString());
1558:       assertFalse(node3.isAdd());
1559:       assertFalse(node3.isDo());
1560:       assertTrue(node3.isNumber());
1561:       assertFalse(node3.isNew());
1562:       assertFalse(node3.isTrue());
1563:       assertFalse(node3.isAssign());
1564:       assertFalse(node3.isBreak());
1565:       assertFalse(node3.isDec());
1566:       assertFalse(node3.isDelProp());
1567:       assertFalse(node3.isTypeOf());
1568:       assertFalse(node3.isNull());
1569:       assertFalse(node3.isVoid());
1570:       assertFalse(node3.isExprResult());
1571:       assertFalse(node3.isName());
1572:       assertFalse(node3.isGetElem());
1573:       assertFalse(node3.isCall());
1574:       assertEquals(0, node3.getChildCount());
1575:       assertFalse(node3.isCatch());
1576:       assertFalse(node3.isDefaultCase());
1577:       assertFalse(node3.isTry());
1578:       assertFalse(node3.isSetterDef());
1579:       assertFalse(node3.isVar());
1580:       assertFalse(node3.isStringKey());
1581:       assertFalse(node3.isFunction());
1582:       assertFalse(node3.isDebugger());
1583:       assertFalse(node3.isParamList());
1584:       assertFalse(node3.isArrayLit());
1585:       assertFalse(node3.isIn());
1586:       assertFalse(node3.hasMoreThanOneChild());
1587:       assertFalse(node3.isContinue());
1588:       assertEquals(39, node3.getType());
1589:       assertFalse(node3.isGetterDef());
1590:       assertFalse(node3.isInc());
1591:       assertFalse(node3.isCase());
1592:       assertFalse(node3.isHook());
1593:       assertFalse(node3.hasOneChild());
1594:       assertFalse(node3.isBlock());
1595:       assertFalse(node3.isFor());
1596:       assertFalse(node3.isIf());
1597:       assertFalse(node3.isRegExp());
1598:       assertFalse(node3.isWith());
1599:       assertFalse(node3.isNE());
1600:       assertEquals((-1), node3.getLineno());
1601:       
1602:       // Undeclared exception!
1603:       try { 
1604:         node3.addChildrenToBack(node0);
1605:         fail("Expecting exception: IllegalArgumentException");
1606:       
1607:       } catch(IllegalArgumentException e) {
1608:          //
1609:          // no message in exception (getMessage() returned null)
1610:          //
1611:          verifyException("com.google.common.base.Preconditions", e);
1612:       }
1613:   }
1614: }
RegularFileObject[/tmp/EvoSuite_53_1628158407271/com/google/javascript/rhino/Node_53_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:27 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_53_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_53_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_53_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.jstype.TemplatizedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.collect.AbstractIndexedListIterator",
335:       "com.google.common.collect.Iterators$11",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.common.base.Objects",
339:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
349:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSTypeExpression",
352:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
353:       "com.google.javascript.rhino.jstype.JSType$TypePair",
354:       "com.google.common.collect.Platform",
355:       "com.google.common.collect.Iterators$12",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.JSType$2",
358:       "com.google.common.collect.AbstractMultimap$Values",
359:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
360:       "com.google.common.collect.AbstractMapBasedMultimap$1",
361:       "com.google.common.collect.Multimaps$Entries",
362:       "com.google.common.collect.AbstractMultimap$Entries",
363:       "com.google.common.collect.AbstractMapBasedMultimap$2"
364:     );
365:   }
366: }

[MASTER] 10:13:27.615 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-598), "", (-598), 108);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertEquals((-598), node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());

boolean boolean0 = node0.mayMutateArguments();
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertTrue(boolean0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertEquals((-598), node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());

boolean boolean1 = node0.isNoSideEffectsCall();
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertEquals((-598), node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());

int int0 = node0.getLineno();
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals((-1), int0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertEquals((-598), node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());

Iterable<Node> iterable0 = node0.children();
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(iterable0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertEquals((-598), node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(iterable0.contains(node0));

boolean boolean2 = node0.isOptionalArg();
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertEquals((-598), node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());

String string0 = node0.getQualifiedName();
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNull(string0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertEquals((-598), node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());

int int1 = node0.getIntProp((-239));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(int1 == int0);
assertEquals(0, int1);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertEquals((-598), node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());

JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNull(jSDocInfo0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertEquals((-598), node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());

Node node1 = new Node((-4096), node0, (-3028), 37);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertEquals((-598), node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertEquals((-4096), node1.getType());
assertTrue(node1.hasChildren());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());

Node node2 = node0.useSourceInfoFromForTree(node1);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertEquals((-598), node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertEquals((-4096), node1.getType());
assertTrue(node1.hasChildren());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isNew());
assertFalse(node2.isSwitch());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertEquals((-598), node2.getType());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isNot());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isComma());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertFalse(node2.isThis());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isFunction());

Node node3 = Node.newNumber((double) 2);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertNotNull(node3);
assertFalse(node3.isInstanceOf());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.isGetProp());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabelName());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.hasChildren());
assertFalse(node3.isEmpty());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isDo());
assertTrue(node3.isNumber());
assertFalse(node3.isNew());
assertFalse(node3.isTrue());
assertFalse(node3.isAssign());
assertFalse(node3.isBreak());
assertFalse(node3.isDec());
assertFalse(node3.isDelProp());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isSetterDef());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertEquals(39, node3.getType());
assertFalse(node3.isGetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isCase());
assertFalse(node3.isHook());
assertFalse(node3.hasOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isRegExp());
assertFalse(node3.isWith());
assertFalse(node3.isNE());
assertEquals((-1), node3.getLineno());

node3.addChildrenToBack(node0);

[MASTER] 10:13:30.444 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_69_1628158410127/com/google/javascript/rhino/Node_69_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_69_1628158410127/com/google/javascript/rhino/Node_69_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:30.444 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:30.444 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:30.445 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 547
[MASTER] 10:13:30.447 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_69_1628158410127/com/google/javascript/rhino/Node_69_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:30 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_69_tmp__ESTest extends Node_69_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString((-598), "", (-598), 108);
23:       assertEquals(55, Node.INFERRED_FUNCTION);
24:       assertEquals(4095, Node.COLUMN_MASK);
25:       assertEquals(43, Node.IS_CONSTANT_NAME);
26:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
27:       assertEquals(48, Node.DIRECTIVES);
28:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
29:       assertEquals(40, Node.ORIGINALNAME_PROP);
30:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
31:       assertEquals(50, Node.FREE_CALL);
32:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
33:       assertEquals(54, Node.SLASH_V);
34:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
35:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
36:       assertEquals(51, Node.STATIC_SOURCE_FILE);
37:       assertEquals(1, Node.DECR_FLAG);
38:       assertEquals(49, Node.DIRECT_EVAL);
39:       assertEquals(32, Node.INCRDECR_PROP);
40:       assertEquals(30, Node.VAR_ARGS_NAME);
41:       assertEquals(57, Node.LAST_PROP);
42:       assertEquals(12, Node.COLUMN_BITS);
43:       assertEquals(46, Node.IS_NAMESPACE);
44:       assertEquals(37, Node.OPT_ARG_NAME);
45:       assertEquals(2, Node.POST_FLAG);
46:       assertEquals(56, Node.CHANGE_TIME);
47:       assertEquals(47, Node.IS_DISPATCHER);
48:       assertEquals(57, Node.REFLECTED_OBJECT);
49:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
50:       assertEquals(8, Node.FLAG_NO_THROWS);
51:       assertEquals(39, Node.EMPTY_BLOCK);
52:       assertEquals(36, Node.QUOTED_PROP);
53:       assertEquals(52, Node.LENGTH);
54:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
55:       assertEquals(15, Node.NO_SIDE_EFFECTS);
56:       assertEquals(53, Node.INPUT_ID);
57:       assertEquals(29, Node.JSDOC_INFO_PROP);
58:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
59:       assertNotNull(node0);
60:       assertFalse(node0.isCatch());
61:       assertFalse(node0.isDefaultCase());
62:       assertFalse(node0.isFunction());
63:       assertEquals(0, node0.getChildCount());
64:       assertFalse(node0.isRegExp());
65:       assertFalse(node0.isName());
66:       assertFalse(node0.isCall());
67:       assertFalse(node0.isVar());
68:       assertFalse(node0.isEmpty());
69:       assertFalse(node0.isDelProp());
70:       assertFalse(node0.isIf());
71:       assertFalse(node0.isNew());
72:       assertFalse(node0.isVoid());
73:       assertFalse(node0.isTrue());
74:       assertFalse(node0.isSetterDef());
75:       assertFalse(node0.isAdd());
76:       assertFalse(node0.isNE());
77:       assertFalse(node0.isIn());
78:       assertFalse(node0.isNull());
79:       assertFalse(node0.isContinue());
80:       assertFalse(node0.isWhile());
81:       assertFalse(node0.isString());
82:       assertFalse(node0.hasChildren());
83:       assertFalse(node0.isReturn());
84:       assertFalse(node0.isTypeOf());
85:       assertFalse(node0.isAssign());
86:       assertFalse(node0.isDec());
87:       assertFalse(node0.isFalse());
88:       assertFalse(node0.isCast());
89:       assertFalse(node0.isGetProp());
90:       assertFalse(node0.isDebugger());
91:       assertFalse(node0.isNot());
92:       assertEquals((-1), node0.getSourcePosition());
93:       assertFalse(node0.isObjectLit());
94:       assertFalse(node0.isAnd());
95:       assertEquals((-598), node0.getType());
96:       assertFalse(node0.isInstanceOf());
97:       assertFalse(node0.isExprResult());
98:       assertFalse(node0.isThis());
99:       assertFalse(node0.isWith());
100:       assertFalse(node0.isComma());
101:       assertFalse(node0.isThrow());
102:       assertFalse(node0.isGetElem());
103:       assertFalse(node0.isBreak());
104:       assertFalse(node0.isInc());
105:       assertFalse(node0.isOr());
106:       assertFalse(node0.hasMoreThanOneChild());
107:       assertFalse(node0.isDo());
108:       assertFalse(node0.isCase());
109:       assertEquals((-1), node0.getLineno());
110:       assertFalse(node0.isBlock());
111:       assertFalse(node0.isAssignAdd());
112:       assertFalse(node0.isHook());
113:       assertFalse(node0.isLabel());
114:       assertFalse(node0.isFor());
115:       assertFalse(node0.isStringKey());
116:       assertFalse(node0.isLabelName());
117:       assertFalse(node0.isArrayLit());
118:       assertFalse(node0.isTry());
119:       assertFalse(node0.hasOneChild());
120:       assertEquals((-1), node0.getCharno());
121:       assertFalse(node0.isSwitch());
122:       assertFalse(node0.isScript());
123:       assertFalse(node0.isParamList());
124:       assertFalse(node0.isGetterDef());
125:       assertFalse(node0.isNumber());
126:       
127:       boolean boolean0 = node0.mayMutateArguments();
128:       assertEquals(55, Node.INFERRED_FUNCTION);
129:       assertEquals(4095, Node.COLUMN_MASK);
130:       assertEquals(43, Node.IS_CONSTANT_NAME);
131:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
132:       assertEquals(48, Node.DIRECTIVES);
133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
134:       assertEquals(40, Node.ORIGINALNAME_PROP);
135:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
136:       assertEquals(50, Node.FREE_CALL);
137:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
138:       assertEquals(54, Node.SLASH_V);
139:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
140:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
141:       assertEquals(51, Node.STATIC_SOURCE_FILE);
142:       assertEquals(1, Node.DECR_FLAG);
143:       assertEquals(49, Node.DIRECT_EVAL);
144:       assertEquals(32, Node.INCRDECR_PROP);
145:       assertEquals(30, Node.VAR_ARGS_NAME);
146:       assertEquals(57, Node.LAST_PROP);
147:       assertEquals(12, Node.COLUMN_BITS);
148:       assertEquals(46, Node.IS_NAMESPACE);
149:       assertEquals(37, Node.OPT_ARG_NAME);
150:       assertEquals(2, Node.POST_FLAG);
151:       assertEquals(56, Node.CHANGE_TIME);
152:       assertEquals(47, Node.IS_DISPATCHER);
153:       assertEquals(57, Node.REFLECTED_OBJECT);
154:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
155:       assertEquals(8, Node.FLAG_NO_THROWS);
156:       assertEquals(39, Node.EMPTY_BLOCK);
157:       assertEquals(36, Node.QUOTED_PROP);
158:       assertEquals(52, Node.LENGTH);
159:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
160:       assertEquals(15, Node.NO_SIDE_EFFECTS);
161:       assertEquals(53, Node.INPUT_ID);
162:       assertEquals(29, Node.JSDOC_INFO_PROP);
163:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
164:       assertTrue(boolean0);
165:       assertFalse(node0.isCatch());
166:       assertFalse(node0.isDefaultCase());
167:       assertFalse(node0.isFunction());
168:       assertEquals(0, node0.getChildCount());
169:       assertFalse(node0.isRegExp());
170:       assertFalse(node0.isName());
171:       assertFalse(node0.isCall());
172:       assertFalse(node0.isVar());
173:       assertFalse(node0.isEmpty());
174:       assertFalse(node0.isDelProp());
175:       assertFalse(node0.isIf());
176:       assertFalse(node0.isNew());
177:       assertFalse(node0.isVoid());
178:       assertFalse(node0.isTrue());
179:       assertFalse(node0.isSetterDef());
180:       assertFalse(node0.isAdd());
181:       assertFalse(node0.isNE());
182:       assertFalse(node0.isIn());
183:       assertFalse(node0.isNull());
184:       assertFalse(node0.isContinue());
185:       assertFalse(node0.isWhile());
186:       assertFalse(node0.isString());
187:       assertFalse(node0.hasChildren());
188:       assertFalse(node0.isReturn());
189:       assertFalse(node0.isTypeOf());
190:       assertFalse(node0.isAssign());
191:       assertFalse(node0.isDec());
192:       assertFalse(node0.isFalse());
193:       assertFalse(node0.isCast());
194:       assertFalse(node0.isGetProp());
195:       assertFalse(node0.isDebugger());
196:       assertFalse(node0.isNot());
197:       assertEquals((-1), node0.getSourcePosition());
198:       assertFalse(node0.isObjectLit());
199:       assertFalse(node0.isAnd());
200:       assertEquals((-598), node0.getType());
201:       assertFalse(node0.isInstanceOf());
202:       assertFalse(node0.isExprResult());
203:       assertFalse(node0.isThis());
204:       assertFalse(node0.isWith());
205:       assertFalse(node0.isComma());
206:       assertFalse(node0.isThrow());
207:       assertFalse(node0.isGetElem());
208:       assertFalse(node0.isBreak());
209:       assertFalse(node0.isInc());
210:       assertFalse(node0.isOr());
211:       assertFalse(node0.hasMoreThanOneChild());
212:       assertFalse(node0.isDo());
213:       assertFalse(node0.isCase());
214:       assertEquals((-1), node0.getLineno());
215:       assertFalse(node0.isBlock());
216:       assertFalse(node0.isAssignAdd());
217:       assertFalse(node0.isHook());
218:       assertFalse(node0.isLabel());
219:       assertFalse(node0.isFor());
220:       assertFalse(node0.isStringKey());
221:       assertFalse(node0.isLabelName());
222:       assertFalse(node0.isArrayLit());
223:       assertFalse(node0.isTry());
224:       assertFalse(node0.hasOneChild());
225:       assertEquals((-1), node0.getCharno());
226:       assertFalse(node0.isSwitch());
227:       assertFalse(node0.isScript());
228:       assertFalse(node0.isParamList());
229:       assertFalse(node0.isGetterDef());
230:       assertFalse(node0.isNumber());
231:       
232:       boolean boolean1 = node0.isNoSideEffectsCall();
233:       assertEquals(55, Node.INFERRED_FUNCTION);
234:       assertEquals(4095, Node.COLUMN_MASK);
235:       assertEquals(43, Node.IS_CONSTANT_NAME);
236:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
237:       assertEquals(48, Node.DIRECTIVES);
238:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
239:       assertEquals(40, Node.ORIGINALNAME_PROP);
240:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
241:       assertEquals(50, Node.FREE_CALL);
242:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
243:       assertEquals(54, Node.SLASH_V);
244:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
245:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
246:       assertEquals(51, Node.STATIC_SOURCE_FILE);
247:       assertEquals(1, Node.DECR_FLAG);
248:       assertEquals(49, Node.DIRECT_EVAL);
249:       assertEquals(32, Node.INCRDECR_PROP);
250:       assertEquals(30, Node.VAR_ARGS_NAME);
251:       assertEquals(57, Node.LAST_PROP);
252:       assertEquals(12, Node.COLUMN_BITS);
253:       assertEquals(46, Node.IS_NAMESPACE);
254:       assertEquals(37, Node.OPT_ARG_NAME);
255:       assertEquals(2, Node.POST_FLAG);
256:       assertEquals(56, Node.CHANGE_TIME);
257:       assertEquals(47, Node.IS_DISPATCHER);
258:       assertEquals(57, Node.REFLECTED_OBJECT);
259:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
260:       assertEquals(8, Node.FLAG_NO_THROWS);
261:       assertEquals(39, Node.EMPTY_BLOCK);
262:       assertEquals(36, Node.QUOTED_PROP);
263:       assertEquals(52, Node.LENGTH);
264:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
265:       assertEquals(15, Node.NO_SIDE_EFFECTS);
266:       assertEquals(53, Node.INPUT_ID);
267:       assertEquals(29, Node.JSDOC_INFO_PROP);
268:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
269:       assertFalse(boolean1 == boolean0);
270:       assertFalse(boolean1);
271:       assertFalse(node0.isCatch());
272:       assertFalse(node0.isDefaultCase());
273:       assertFalse(node0.isFunction());
274:       assertEquals(0, node0.getChildCount());
275:       assertFalse(node0.isRegExp());
276:       assertFalse(node0.isName());
277:       assertFalse(node0.isCall());
278:       assertFalse(node0.isVar());
279:       assertFalse(node0.isEmpty());
280:       assertFalse(node0.isDelProp());
281:       assertFalse(node0.isIf());
282:       assertFalse(node0.isNew());
283:       assertFalse(node0.isVoid());
284:       assertFalse(node0.isTrue());
285:       assertFalse(node0.isSetterDef());
286:       assertFalse(node0.isAdd());
287:       assertFalse(node0.isNE());
288:       assertFalse(node0.isIn());
289:       assertFalse(node0.isNull());
290:       assertFalse(node0.isContinue());
291:       assertFalse(node0.isWhile());
292:       assertFalse(node0.isString());
293:       assertFalse(node0.hasChildren());
294:       assertFalse(node0.isReturn());
295:       assertFalse(node0.isTypeOf());
296:       assertFalse(node0.isAssign());
297:       assertFalse(node0.isDec());
298:       assertFalse(node0.isFalse());
299:       assertFalse(node0.isCast());
300:       assertFalse(node0.isGetProp());
301:       assertFalse(node0.isDebugger());
302:       assertFalse(node0.isNot());
303:       assertEquals((-1), node0.getSourcePosition());
304:       assertFalse(node0.isObjectLit());
305:       assertFalse(node0.isAnd());
306:       assertEquals((-598), node0.getType());
307:       assertFalse(node0.isInstanceOf());
308:       assertFalse(node0.isExprResult());
309:       assertFalse(node0.isThis());
310:       assertFalse(node0.isWith());
311:       assertFalse(node0.isComma());
312:       assertFalse(node0.isThrow());
313:       assertFalse(node0.isGetElem());
314:       assertFalse(node0.isBreak());
315:       assertFalse(node0.isInc());
316:       assertFalse(node0.isOr());
317:       assertFalse(node0.hasMoreThanOneChild());
318:       assertFalse(node0.isDo());
319:       assertFalse(node0.isCase());
320:       assertEquals((-1), node0.getLineno());
321:       assertFalse(node0.isBlock());
322:       assertFalse(node0.isAssignAdd());
323:       assertFalse(node0.isHook());
324:       assertFalse(node0.isLabel());
325:       assertFalse(node0.isFor());
326:       assertFalse(node0.isStringKey());
327:       assertFalse(node0.isLabelName());
328:       assertFalse(node0.isArrayLit());
329:       assertFalse(node0.isTry());
330:       assertFalse(node0.hasOneChild());
331:       assertEquals((-1), node0.getCharno());
332:       assertFalse(node0.isSwitch());
333:       assertFalse(node0.isScript());
334:       assertFalse(node0.isParamList());
335:       assertFalse(node0.isGetterDef());
336:       assertFalse(node0.isNumber());
337:       
338:       int int0 = node0.getLineno();
339:       assertEquals(55, Node.INFERRED_FUNCTION);
340:       assertEquals(4095, Node.COLUMN_MASK);
341:       assertEquals(43, Node.IS_CONSTANT_NAME);
342:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
343:       assertEquals(48, Node.DIRECTIVES);
344:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
345:       assertEquals(40, Node.ORIGINALNAME_PROP);
346:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
347:       assertEquals(50, Node.FREE_CALL);
348:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
349:       assertEquals(54, Node.SLASH_V);
350:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
351:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
352:       assertEquals(51, Node.STATIC_SOURCE_FILE);
353:       assertEquals(1, Node.DECR_FLAG);
354:       assertEquals(49, Node.DIRECT_EVAL);
355:       assertEquals(32, Node.INCRDECR_PROP);
356:       assertEquals(30, Node.VAR_ARGS_NAME);
357:       assertEquals(57, Node.LAST_PROP);
358:       assertEquals(12, Node.COLUMN_BITS);
359:       assertEquals(46, Node.IS_NAMESPACE);
360:       assertEquals(37, Node.OPT_ARG_NAME);
361:       assertEquals(2, Node.POST_FLAG);
362:       assertEquals(56, Node.CHANGE_TIME);
363:       assertEquals(47, Node.IS_DISPATCHER);
364:       assertEquals(57, Node.REFLECTED_OBJECT);
365:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
366:       assertEquals(8, Node.FLAG_NO_THROWS);
367:       assertEquals(39, Node.EMPTY_BLOCK);
368:       assertEquals(36, Node.QUOTED_PROP);
369:       assertEquals(52, Node.LENGTH);
370:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
371:       assertEquals(15, Node.NO_SIDE_EFFECTS);
372:       assertEquals(53, Node.INPUT_ID);
373:       assertEquals(29, Node.JSDOC_INFO_PROP);
374:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
375:       assertEquals((-1), int0);
376:       assertFalse(node0.isCatch());
377:       assertFalse(node0.isDefaultCase());
378:       assertFalse(node0.isFunction());
379:       assertEquals(0, node0.getChildCount());
380:       assertFalse(node0.isRegExp());
381:       assertFalse(node0.isName());
382:       assertFalse(node0.isCall());
383:       assertFalse(node0.isVar());
384:       assertFalse(node0.isEmpty());
385:       assertFalse(node0.isDelProp());
386:       assertFalse(node0.isIf());
387:       assertFalse(node0.isNew());
388:       assertFalse(node0.isVoid());
389:       assertFalse(node0.isTrue());
390:       assertFalse(node0.isSetterDef());
391:       assertFalse(node0.isAdd());
392:       assertFalse(node0.isNE());
393:       assertFalse(node0.isIn());
394:       assertFalse(node0.isNull());
395:       assertFalse(node0.isContinue());
396:       assertFalse(node0.isWhile());
397:       assertFalse(node0.isString());
398:       assertFalse(node0.hasChildren());
399:       assertFalse(node0.isReturn());
400:       assertFalse(node0.isTypeOf());
401:       assertFalse(node0.isAssign());
402:       assertFalse(node0.isDec());
403:       assertFalse(node0.isFalse());
404:       assertFalse(node0.isCast());
405:       assertFalse(node0.isGetProp());
406:       assertFalse(node0.isDebugger());
407:       assertFalse(node0.isNot());
408:       assertEquals((-1), node0.getSourcePosition());
409:       assertFalse(node0.isObjectLit());
410:       assertFalse(node0.isAnd());
411:       assertEquals((-598), node0.getType());
412:       assertFalse(node0.isInstanceOf());
413:       assertFalse(node0.isExprResult());
414:       assertFalse(node0.isThis());
415:       assertFalse(node0.isWith());
416:       assertFalse(node0.isComma());
417:       assertFalse(node0.isThrow());
418:       assertFalse(node0.isGetElem());
419:       assertFalse(node0.isBreak());
420:       assertFalse(node0.isInc());
421:       assertFalse(node0.isOr());
422:       assertFalse(node0.hasMoreThanOneChild());
423:       assertFalse(node0.isDo());
424:       assertFalse(node0.isCase());
425:       assertEquals((-1), node0.getLineno());
426:       assertFalse(node0.isBlock());
427:       assertFalse(node0.isAssignAdd());
428:       assertFalse(node0.isHook());
429:       assertFalse(node0.isLabel());
430:       assertFalse(node0.isFor());
431:       assertFalse(node0.isStringKey());
432:       assertFalse(node0.isLabelName());
433:       assertFalse(node0.isArrayLit());
434:       assertFalse(node0.isTry());
435:       assertFalse(node0.hasOneChild());
436:       assertEquals((-1), node0.getCharno());
437:       assertFalse(node0.isSwitch());
438:       assertFalse(node0.isScript());
439:       assertFalse(node0.isParamList());
440:       assertFalse(node0.isGetterDef());
441:       assertFalse(node0.isNumber());
442:       
443:       Iterable<Node> iterable0 = node0.children();
444:       assertEquals(55, Node.INFERRED_FUNCTION);
445:       assertEquals(4095, Node.COLUMN_MASK);
446:       assertEquals(43, Node.IS_CONSTANT_NAME);
447:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
448:       assertEquals(48, Node.DIRECTIVES);
449:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
450:       assertEquals(40, Node.ORIGINALNAME_PROP);
451:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
452:       assertEquals(50, Node.FREE_CALL);
453:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
454:       assertEquals(54, Node.SLASH_V);
455:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
456:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
457:       assertEquals(51, Node.STATIC_SOURCE_FILE);
458:       assertEquals(1, Node.DECR_FLAG);
459:       assertEquals(49, Node.DIRECT_EVAL);
460:       assertEquals(32, Node.INCRDECR_PROP);
461:       assertEquals(30, Node.VAR_ARGS_NAME);
462:       assertEquals(57, Node.LAST_PROP);
463:       assertEquals(12, Node.COLUMN_BITS);
464:       assertEquals(46, Node.IS_NAMESPACE);
465:       assertEquals(37, Node.OPT_ARG_NAME);
466:       assertEquals(2, Node.POST_FLAG);
467:       assertEquals(56, Node.CHANGE_TIME);
468:       assertEquals(47, Node.IS_DISPATCHER);
469:       assertEquals(57, Node.REFLECTED_OBJECT);
470:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
471:       assertEquals(8, Node.FLAG_NO_THROWS);
472:       assertEquals(39, Node.EMPTY_BLOCK);
473:       assertEquals(36, Node.QUOTED_PROP);
474:       assertEquals(52, Node.LENGTH);
475:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
476:       assertEquals(15, Node.NO_SIDE_EFFECTS);
477:       assertEquals(53, Node.INPUT_ID);
478:       assertEquals(29, Node.JSDOC_INFO_PROP);
479:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
480:       assertNotNull(iterable0);
481:       assertFalse(node0.isCatch());
482:       assertFalse(node0.isDefaultCase());
483:       assertFalse(node0.isFunction());
484:       assertEquals(0, node0.getChildCount());
485:       assertFalse(node0.isRegExp());
486:       assertFalse(node0.isName());
487:       assertFalse(node0.isCall());
488:       assertFalse(node0.isVar());
489:       assertFalse(node0.isEmpty());
490:       assertFalse(node0.isDelProp());
491:       assertFalse(node0.isIf());
492:       assertFalse(node0.isNew());
493:       assertFalse(node0.isVoid());
494:       assertFalse(node0.isTrue());
495:       assertFalse(node0.isSetterDef());
496:       assertFalse(node0.isAdd());
497:       assertFalse(node0.isNE());
498:       assertFalse(node0.isIn());
499:       assertFalse(node0.isNull());
500:       assertFalse(node0.isContinue());
501:       assertFalse(node0.isWhile());
502:       assertFalse(node0.isString());
503:       assertFalse(node0.hasChildren());
504:       assertFalse(node0.isReturn());
505:       assertFalse(node0.isTypeOf());
506:       assertFalse(node0.isAssign());
507:       assertFalse(node0.isDec());
508:       assertFalse(node0.isFalse());
509:       assertFalse(node0.isCast());
510:       assertFalse(node0.isGetProp());
511:       assertFalse(node0.isDebugger());
512:       assertFalse(node0.isNot());
513:       assertEquals((-1), node0.getSourcePosition());
514:       assertFalse(node0.isObjectLit());
515:       assertFalse(node0.isAnd());
516:       assertEquals((-598), node0.getType());
517:       assertFalse(node0.isInstanceOf());
518:       assertFalse(node0.isExprResult());
519:       assertFalse(node0.isThis());
520:       assertFalse(node0.isWith());
521:       assertFalse(node0.isComma());
522:       assertFalse(node0.isThrow());
523:       assertFalse(node0.isGetElem());
524:       assertFalse(node0.isBreak());
525:       assertFalse(node0.isInc());
526:       assertFalse(node0.isOr());
527:       assertFalse(node0.hasMoreThanOneChild());
528:       assertFalse(node0.isDo());
529:       assertFalse(node0.isCase());
530:       assertEquals((-1), node0.getLineno());
531:       assertFalse(node0.isBlock());
532:       assertFalse(node0.isAssignAdd());
533:       assertFalse(node0.isHook());
534:       assertFalse(node0.isLabel());
535:       assertFalse(node0.isFor());
536:       assertFalse(node0.isStringKey());
537:       assertFalse(node0.isLabelName());
538:       assertFalse(node0.isArrayLit());
539:       assertFalse(node0.isTry());
540:       assertFalse(node0.hasOneChild());
541:       assertEquals((-1), node0.getCharno());
542:       assertFalse(node0.isSwitch());
543:       assertFalse(node0.isScript());
544:       assertFalse(node0.isParamList());
545:       assertFalse(node0.isGetterDef());
546:       assertFalse(node0.isNumber());
547:       assertFalse(iterable0.contains(node0));
548:       
549:       boolean boolean2 = node0.isOptionalArg();
550:       assertEquals(55, Node.INFERRED_FUNCTION);
551:       assertEquals(4095, Node.COLUMN_MASK);
552:       assertEquals(43, Node.IS_CONSTANT_NAME);
553:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
554:       assertEquals(48, Node.DIRECTIVES);
555:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
556:       assertEquals(40, Node.ORIGINALNAME_PROP);
557:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
558:       assertEquals(50, Node.FREE_CALL);
559:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
560:       assertEquals(54, Node.SLASH_V);
561:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
562:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
563:       assertEquals(51, Node.STATIC_SOURCE_FILE);
564:       assertEquals(1, Node.DECR_FLAG);
565:       assertEquals(49, Node.DIRECT_EVAL);
566:       assertEquals(32, Node.INCRDECR_PROP);
567:       assertEquals(30, Node.VAR_ARGS_NAME);
568:       assertEquals(57, Node.LAST_PROP);
569:       assertEquals(12, Node.COLUMN_BITS);
570:       assertEquals(46, Node.IS_NAMESPACE);
571:       assertEquals(37, Node.OPT_ARG_NAME);
572:       assertEquals(2, Node.POST_FLAG);
573:       assertEquals(56, Node.CHANGE_TIME);
574:       assertEquals(47, Node.IS_DISPATCHER);
575:       assertEquals(57, Node.REFLECTED_OBJECT);
576:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
577:       assertEquals(8, Node.FLAG_NO_THROWS);
578:       assertEquals(39, Node.EMPTY_BLOCK);
579:       assertEquals(36, Node.QUOTED_PROP);
580:       assertEquals(52, Node.LENGTH);
581:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
582:       assertEquals(15, Node.NO_SIDE_EFFECTS);
583:       assertEquals(53, Node.INPUT_ID);
584:       assertEquals(29, Node.JSDOC_INFO_PROP);
585:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
586:       assertTrue(boolean2 == boolean1);
587:       assertFalse(boolean2 == boolean0);
588:       assertFalse(boolean2);
589:       assertFalse(node0.isCatch());
590:       assertFalse(node0.isDefaultCase());
591:       assertFalse(node0.isFunction());
592:       assertEquals(0, node0.getChildCount());
593:       assertFalse(node0.isRegExp());
594:       assertFalse(node0.isName());
595:       assertFalse(node0.isCall());
596:       assertFalse(node0.isVar());
597:       assertFalse(node0.isEmpty());
598:       assertFalse(node0.isDelProp());
599:       assertFalse(node0.isIf());
600:       assertFalse(node0.isNew());
601:       assertFalse(node0.isVoid());
602:       assertFalse(node0.isTrue());
603:       assertFalse(node0.isSetterDef());
604:       assertFalse(node0.isAdd());
605:       assertFalse(node0.isNE());
606:       assertFalse(node0.isIn());
607:       assertFalse(node0.isNull());
608:       assertFalse(node0.isContinue());
609:       assertFalse(node0.isWhile());
610:       assertFalse(node0.isString());
611:       assertFalse(node0.hasChildren());
612:       assertFalse(node0.isReturn());
613:       assertFalse(node0.isTypeOf());
614:       assertFalse(node0.isAssign());
615:       assertFalse(node0.isDec());
616:       assertFalse(node0.isFalse());
617:       assertFalse(node0.isCast());
618:       assertFalse(node0.isGetProp());
619:       assertFalse(node0.isDebugger());
620:       assertFalse(node0.isNot());
621:       assertEquals((-1), node0.getSourcePosition());
622:       assertFalse(node0.isObjectLit());
623:       assertFalse(node0.isAnd());
624:       assertEquals((-598), node0.getType());
625:       assertFalse(node0.isInstanceOf());
626:       assertFalse(node0.isExprResult());
627:       assertFalse(node0.isThis());
628:       assertFalse(node0.isWith());
629:       assertFalse(node0.isComma());
630:       assertFalse(node0.isThrow());
631:       assertFalse(node0.isGetElem());
632:       assertFalse(node0.isBreak());
633:       assertFalse(node0.isInc());
634:       assertFalse(node0.isOr());
635:       assertFalse(node0.hasMoreThanOneChild());
636:       assertFalse(node0.isDo());
637:       assertFalse(node0.isCase());
638:       assertEquals((-1), node0.getLineno());
639:       assertFalse(node0.isBlock());
640:       assertFalse(node0.isAssignAdd());
641:       assertFalse(node0.isHook());
642:       assertFalse(node0.isLabel());
643:       assertFalse(node0.isFor());
644:       assertFalse(node0.isStringKey());
645:       assertFalse(node0.isLabelName());
646:       assertFalse(node0.isArrayLit());
647:       assertFalse(node0.isTry());
648:       assertFalse(node0.hasOneChild());
649:       assertEquals((-1), node0.getCharno());
650:       assertFalse(node0.isSwitch());
651:       assertFalse(node0.isScript());
652:       assertFalse(node0.isParamList());
653:       assertFalse(node0.isGetterDef());
654:       assertFalse(node0.isNumber());
655:       
656:       String string0 = node0.getQualifiedName();
657:       assertEquals(55, Node.INFERRED_FUNCTION);
658:       assertEquals(4095, Node.COLUMN_MASK);
659:       assertEquals(43, Node.IS_CONSTANT_NAME);
660:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
661:       assertEquals(48, Node.DIRECTIVES);
662:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
663:       assertEquals(40, Node.ORIGINALNAME_PROP);
664:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
665:       assertEquals(50, Node.FREE_CALL);
666:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
667:       assertEquals(54, Node.SLASH_V);
668:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
669:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
670:       assertEquals(51, Node.STATIC_SOURCE_FILE);
671:       assertEquals(1, Node.DECR_FLAG);
672:       assertEquals(49, Node.DIRECT_EVAL);
673:       assertEquals(32, Node.INCRDECR_PROP);
674:       assertEquals(30, Node.VAR_ARGS_NAME);
675:       assertEquals(57, Node.LAST_PROP);
676:       assertEquals(12, Node.COLUMN_BITS);
677:       assertEquals(46, Node.IS_NAMESPACE);
678:       assertEquals(37, Node.OPT_ARG_NAME);
679:       assertEquals(2, Node.POST_FLAG);
680:       assertEquals(56, Node.CHANGE_TIME);
681:       assertEquals(47, Node.IS_DISPATCHER);
682:       assertEquals(57, Node.REFLECTED_OBJECT);
683:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
684:       assertEquals(8, Node.FLAG_NO_THROWS);
685:       assertEquals(39, Node.EMPTY_BLOCK);
686:       assertEquals(36, Node.QUOTED_PROP);
687:       assertEquals(52, Node.LENGTH);
688:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
689:       assertEquals(15, Node.NO_SIDE_EFFECTS);
690:       assertEquals(53, Node.INPUT_ID);
691:       assertEquals(29, Node.JSDOC_INFO_PROP);
692:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
693:       assertNull(string0);
694:       assertFalse(node0.isCatch());
695:       assertFalse(node0.isDefaultCase());
696:       assertFalse(node0.isFunction());
697:       assertEquals(0, node0.getChildCount());
698:       assertFalse(node0.isRegExp());
699:       assertFalse(node0.isName());
700:       assertFalse(node0.isCall());
701:       assertFalse(node0.isVar());
702:       assertFalse(node0.isEmpty());
703:       assertFalse(node0.isDelProp());
704:       assertFalse(node0.isIf());
705:       assertFalse(node0.isNew());
706:       assertFalse(node0.isVoid());
707:       assertFalse(node0.isTrue());
708:       assertFalse(node0.isSetterDef());
709:       assertFalse(node0.isAdd());
710:       assertFalse(node0.isNE());
711:       assertFalse(node0.isIn());
712:       assertFalse(node0.isNull());
713:       assertFalse(node0.isContinue());
714:       assertFalse(node0.isWhile());
715:       assertFalse(node0.isString());
716:       assertFalse(node0.hasChildren());
717:       assertFalse(node0.isReturn());
718:       assertFalse(node0.isTypeOf());
719:       assertFalse(node0.isAssign());
720:       assertFalse(node0.isDec());
721:       assertFalse(node0.isFalse());
722:       assertFalse(node0.isCast());
723:       assertFalse(node0.isGetProp());
724:       assertFalse(node0.isDebugger());
725:       assertFalse(node0.isNot());
726:       assertEquals((-1), node0.getSourcePosition());
727:       assertFalse(node0.isObjectLit());
728:       assertFalse(node0.isAnd());
729:       assertEquals((-598), node0.getType());
730:       assertFalse(node0.isInstanceOf());
731:       assertFalse(node0.isExprResult());
732:       assertFalse(node0.isThis());
733:       assertFalse(node0.isWith());
734:       assertFalse(node0.isComma());
735:       assertFalse(node0.isThrow());
736:       assertFalse(node0.isGetElem());
737:       assertFalse(node0.isBreak());
738:       assertFalse(node0.isInc());
739:       assertFalse(node0.isOr());
740:       assertFalse(node0.hasMoreThanOneChild());
741:       assertFalse(node0.isDo());
742:       assertFalse(node0.isCase());
743:       assertEquals((-1), node0.getLineno());
744:       assertFalse(node0.isBlock());
745:       assertFalse(node0.isAssignAdd());
746:       assertFalse(node0.isHook());
747:       assertFalse(node0.isLabel());
748:       assertFalse(node0.isFor());
749:       assertFalse(node0.isStringKey());
750:       assertFalse(node0.isLabelName());
751:       assertFalse(node0.isArrayLit());
752:       assertFalse(node0.isTry());
753:       assertFalse(node0.hasOneChild());
754:       assertEquals((-1), node0.getCharno());
755:       assertFalse(node0.isSwitch());
756:       assertFalse(node0.isScript());
757:       assertFalse(node0.isParamList());
758:       assertFalse(node0.isGetterDef());
759:       assertFalse(node0.isNumber());
760:       
761:       int int1 = node0.getIntProp((-239));
762:       assertEquals(55, Node.INFERRED_FUNCTION);
763:       assertEquals(4095, Node.COLUMN_MASK);
764:       assertEquals(43, Node.IS_CONSTANT_NAME);
765:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
766:       assertEquals(48, Node.DIRECTIVES);
767:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
768:       assertEquals(40, Node.ORIGINALNAME_PROP);
769:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
770:       assertEquals(50, Node.FREE_CALL);
771:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
772:       assertEquals(54, Node.SLASH_V);
773:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
774:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
775:       assertEquals(51, Node.STATIC_SOURCE_FILE);
776:       assertEquals(1, Node.DECR_FLAG);
777:       assertEquals(49, Node.DIRECT_EVAL);
778:       assertEquals(32, Node.INCRDECR_PROP);
779:       assertEquals(30, Node.VAR_ARGS_NAME);
780:       assertEquals(57, Node.LAST_PROP);
781:       assertEquals(12, Node.COLUMN_BITS);
782:       assertEquals(46, Node.IS_NAMESPACE);
783:       assertEquals(37, Node.OPT_ARG_NAME);
784:       assertEquals(2, Node.POST_FLAG);
785:       assertEquals(56, Node.CHANGE_TIME);
786:       assertEquals(47, Node.IS_DISPATCHER);
787:       assertEquals(57, Node.REFLECTED_OBJECT);
788:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
789:       assertEquals(8, Node.FLAG_NO_THROWS);
790:       assertEquals(39, Node.EMPTY_BLOCK);
791:       assertEquals(36, Node.QUOTED_PROP);
792:       assertEquals(52, Node.LENGTH);
793:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
794:       assertEquals(15, Node.NO_SIDE_EFFECTS);
795:       assertEquals(53, Node.INPUT_ID);
796:       assertEquals(29, Node.JSDOC_INFO_PROP);
797:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
798:       assertFalse(int1 == int0);
799:       assertEquals(0, int1);
800:       assertFalse(node0.isCatch());
801:       assertFalse(node0.isDefaultCase());
802:       assertFalse(node0.isFunction());
803:       assertEquals(0, node0.getChildCount());
804:       assertFalse(node0.isRegExp());
805:       assertFalse(node0.isName());
806:       assertFalse(node0.isCall());
807:       assertFalse(node0.isVar());
808:       assertFalse(node0.isEmpty());
809:       assertFalse(node0.isDelProp());
810:       assertFalse(node0.isIf());
811:       assertFalse(node0.isNew());
812:       assertFalse(node0.isVoid());
813:       assertFalse(node0.isTrue());
814:       assertFalse(node0.isSetterDef());
815:       assertFalse(node0.isAdd());
816:       assertFalse(node0.isNE());
817:       assertFalse(node0.isIn());
818:       assertFalse(node0.isNull());
819:       assertFalse(node0.isContinue());
820:       assertFalse(node0.isWhile());
821:       assertFalse(node0.isString());
822:       assertFalse(node0.hasChildren());
823:       assertFalse(node0.isReturn());
824:       assertFalse(node0.isTypeOf());
825:       assertFalse(node0.isAssign());
826:       assertFalse(node0.isDec());
827:       assertFalse(node0.isFalse());
828:       assertFalse(node0.isCast());
829:       assertFalse(node0.isGetProp());
830:       assertFalse(node0.isDebugger());
831:       assertFalse(node0.isNot());
832:       assertEquals((-1), node0.getSourcePosition());
833:       assertFalse(node0.isObjectLit());
834:       assertFalse(node0.isAnd());
835:       assertEquals((-598), node0.getType());
836:       assertFalse(node0.isInstanceOf());
837:       assertFalse(node0.isExprResult());
838:       assertFalse(node0.isThis());
839:       assertFalse(node0.isWith());
840:       assertFalse(node0.isComma());
841:       assertFalse(node0.isThrow());
842:       assertFalse(node0.isGetElem());
843:       assertFalse(node0.isBreak());
844:       assertFalse(node0.isInc());
845:       assertFalse(node0.isOr());
846:       assertFalse(node0.hasMoreThanOneChild());
847:       assertFalse(node0.isDo());
848:       assertFalse(node0.isCase());
849:       assertEquals((-1), node0.getLineno());
850:       assertFalse(node0.isBlock());
851:       assertFalse(node0.isAssignAdd());
852:       assertFalse(node0.isHook());
853:       assertFalse(node0.isLabel());
854:       assertFalse(node0.isFor());
855:       assertFalse(node0.isStringKey());
856:       assertFalse(node0.isLabelName());
857:       assertFalse(node0.isArrayLit());
858:       assertFalse(node0.isTry());
859:       assertFalse(node0.hasOneChild());
860:       assertEquals((-1), node0.getCharno());
861:       assertFalse(node0.isSwitch());
862:       assertFalse(node0.isScript());
863:       assertFalse(node0.isParamList());
864:       assertFalse(node0.isGetterDef());
865:       assertFalse(node0.isNumber());
866:       
867:       JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
868:       assertEquals(55, Node.INFERRED_FUNCTION);
869:       assertEquals(4095, Node.COLUMN_MASK);
870:       assertEquals(43, Node.IS_CONSTANT_NAME);
871:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
872:       assertEquals(48, Node.DIRECTIVES);
873:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
874:       assertEquals(40, Node.ORIGINALNAME_PROP);
875:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
876:       assertEquals(50, Node.FREE_CALL);
877:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
878:       assertEquals(54, Node.SLASH_V);
879:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
880:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
881:       assertEquals(51, Node.STATIC_SOURCE_FILE);
882:       assertEquals(1, Node.DECR_FLAG);
883:       assertEquals(49, Node.DIRECT_EVAL);
884:       assertEquals(32, Node.INCRDECR_PROP);
885:       assertEquals(30, Node.VAR_ARGS_NAME);
886:       assertEquals(57, Node.LAST_PROP);
887:       assertEquals(12, Node.COLUMN_BITS);
888:       assertEquals(46, Node.IS_NAMESPACE);
889:       assertEquals(37, Node.OPT_ARG_NAME);
890:       assertEquals(2, Node.POST_FLAG);
891:       assertEquals(56, Node.CHANGE_TIME);
892:       assertEquals(47, Node.IS_DISPATCHER);
893:       assertEquals(57, Node.REFLECTED_OBJECT);
894:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
895:       assertEquals(8, Node.FLAG_NO_THROWS);
896:       assertEquals(39, Node.EMPTY_BLOCK);
897:       assertEquals(36, Node.QUOTED_PROP);
898:       assertEquals(52, Node.LENGTH);
899:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
900:       assertEquals(15, Node.NO_SIDE_EFFECTS);
901:       assertEquals(53, Node.INPUT_ID);
902:       assertEquals(29, Node.JSDOC_INFO_PROP);
903:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
904:       assertNull(jSDocInfo0);
905:       assertFalse(node0.isCatch());
906:       assertFalse(node0.isDefaultCase());
907:       assertFalse(node0.isFunction());
908:       assertEquals(0, node0.getChildCount());
909:       assertFalse(node0.isRegExp());
910:       assertFalse(node0.isName());
911:       assertFalse(node0.isCall());
912:       assertFalse(node0.isVar());
913:       assertFalse(node0.isEmpty());
914:       assertFalse(node0.isDelProp());
915:       assertFalse(node0.isIf());
916:       assertFalse(node0.isNew());
917:       assertFalse(node0.isVoid());
918:       assertFalse(node0.isTrue());
919:       assertFalse(node0.isSetterDef());
920:       assertFalse(node0.isAdd());
921:       assertFalse(node0.isNE());
922:       assertFalse(node0.isIn());
923:       assertFalse(node0.isNull());
924:       assertFalse(node0.isContinue());
925:       assertFalse(node0.isWhile());
926:       assertFalse(node0.isString());
927:       assertFalse(node0.hasChildren());
928:       assertFalse(node0.isReturn());
929:       assertFalse(node0.isTypeOf());
930:       assertFalse(node0.isAssign());
931:       assertFalse(node0.isDec());
932:       assertFalse(node0.isFalse());
933:       assertFalse(node0.isCast());
934:       assertFalse(node0.isGetProp());
935:       assertFalse(node0.isDebugger());
936:       assertFalse(node0.isNot());
937:       assertEquals((-1), node0.getSourcePosition());
938:       assertFalse(node0.isObjectLit());
939:       assertFalse(node0.isAnd());
940:       assertEquals((-598), node0.getType());
941:       assertFalse(node0.isInstanceOf());
942:       assertFalse(node0.isExprResult());
943:       assertFalse(node0.isThis());
944:       assertFalse(node0.isWith());
945:       assertFalse(node0.isComma());
946:       assertFalse(node0.isThrow());
947:       assertFalse(node0.isGetElem());
948:       assertFalse(node0.isBreak());
949:       assertFalse(node0.isInc());
950:       assertFalse(node0.isOr());
951:       assertFalse(node0.hasMoreThanOneChild());
952:       assertFalse(node0.isDo());
953:       assertFalse(node0.isCase());
954:       assertEquals((-1), node0.getLineno());
955:       assertFalse(node0.isBlock());
956:       assertFalse(node0.isAssignAdd());
957:       assertFalse(node0.isHook());
958:       assertFalse(node0.isLabel());
959:       assertFalse(node0.isFor());
960:       assertFalse(node0.isStringKey());
961:       assertFalse(node0.isLabelName());
962:       assertFalse(node0.isArrayLit());
963:       assertFalse(node0.isTry());
964:       assertFalse(node0.hasOneChild());
965:       assertEquals((-1), node0.getCharno());
966:       assertFalse(node0.isSwitch());
967:       assertFalse(node0.isScript());
968:       assertFalse(node0.isParamList());
969:       assertFalse(node0.isGetterDef());
970:       assertFalse(node0.isNumber());
971:       
972:       Node node1 = new Node(36, node0, 108, 0);
973:       assertEquals(55, Node.INFERRED_FUNCTION);
974:       assertEquals(4095, Node.COLUMN_MASK);
975:       assertEquals(43, Node.IS_CONSTANT_NAME);
976:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
977:       assertEquals(48, Node.DIRECTIVES);
978:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
979:       assertEquals(40, Node.ORIGINALNAME_PROP);
980:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
981:       assertEquals(50, Node.FREE_CALL);
982:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
983:       assertEquals(54, Node.SLASH_V);
984:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
985:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
986:       assertEquals(51, Node.STATIC_SOURCE_FILE);
987:       assertEquals(1, Node.DECR_FLAG);
988:       assertEquals(49, Node.DIRECT_EVAL);
989:       assertEquals(32, Node.INCRDECR_PROP);
990:       assertEquals(30, Node.VAR_ARGS_NAME);
991:       assertEquals(57, Node.LAST_PROP);
992:       assertEquals(12, Node.COLUMN_BITS);
993:       assertEquals(46, Node.IS_NAMESPACE);
994:       assertEquals(37, Node.OPT_ARG_NAME);
995:       assertEquals(2, Node.POST_FLAG);
996:       assertEquals(56, Node.CHANGE_TIME);
997:       assertEquals(47, Node.IS_DISPATCHER);
998:       assertEquals(57, Node.REFLECTED_OBJECT);
999:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1000:       assertEquals(8, Node.FLAG_NO_THROWS);
1001:       assertEquals(39, Node.EMPTY_BLOCK);
1002:       assertEquals(36, Node.QUOTED_PROP);
1003:       assertEquals(52, Node.LENGTH);
1004:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1005:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1006:       assertEquals(53, Node.INPUT_ID);
1007:       assertEquals(29, Node.JSDOC_INFO_PROP);
1008:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1009:       assertEquals(52, Node.LENGTH);
1010:       assertEquals(40, Node.ORIGINALNAME_PROP);
1011:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1012:       assertEquals(49, Node.DIRECT_EVAL);
1013:       assertEquals(50, Node.FREE_CALL);
1014:       assertEquals(57, Node.REFLECTED_OBJECT);
1015:       assertEquals(46, Node.IS_NAMESPACE);
1016:       assertEquals(54, Node.SLASH_V);
1017:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1018:       assertEquals(8, Node.FLAG_NO_THROWS);
1019:       assertEquals(39, Node.EMPTY_BLOCK);
1020:       assertEquals(55, Node.INFERRED_FUNCTION);
1021:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1022:       assertEquals(57, Node.LAST_PROP);
1023:       assertEquals(47, Node.IS_DISPATCHER);
1024:       assertEquals(2, Node.POST_FLAG);
1025:       assertEquals(30, Node.VAR_ARGS_NAME);
1026:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1027:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1028:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1029:       assertEquals(53, Node.INPUT_ID);
1030:       assertEquals(29, Node.JSDOC_INFO_PROP);
1031:       assertEquals(36, Node.QUOTED_PROP);
1032:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1033:       assertEquals(43, Node.IS_CONSTANT_NAME);
1034:       assertEquals(56, Node.CHANGE_TIME);
1035:       assertEquals(32, Node.INCRDECR_PROP);
1036:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1037:       assertEquals(48, Node.DIRECTIVES);
1038:       assertEquals(37, Node.OPT_ARG_NAME);
1039:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1040:       assertEquals(4095, Node.COLUMN_MASK);
1041:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1042:       assertEquals(1, Node.DECR_FLAG);
1043:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1044:       assertEquals(12, Node.COLUMN_BITS);
1045:       assertFalse(node1.equals((Object)node0));
1046:       assertNotNull(node1);
1047:       assertFalse(node0.isCatch());
1048:       assertFalse(node0.isDefaultCase());
1049:       assertFalse(node0.isFunction());
1050:       assertEquals(0, node0.getChildCount());
1051:       assertFalse(node0.isRegExp());
1052:       assertFalse(node0.isName());
1053:       assertFalse(node0.isCall());
1054:       assertFalse(node0.isVar());
1055:       assertFalse(node0.isEmpty());
1056:       assertFalse(node0.isDelProp());
1057:       assertFalse(node0.isIf());
1058:       assertFalse(node0.isNew());
1059:       assertFalse(node0.isVoid());
1060:       assertFalse(node0.isTrue());
1061:       assertFalse(node0.isSetterDef());
1062:       assertFalse(node0.isAdd());
1063:       assertFalse(node0.isNE());
1064:       assertFalse(node0.isIn());
1065:       assertFalse(node0.isNull());
1066:       assertFalse(node0.isContinue());
1067:       assertFalse(node0.isWhile());
1068:       assertFalse(node0.isString());
1069:       assertFalse(node0.hasChildren());
1070:       assertFalse(node0.isReturn());
1071:       assertFalse(node0.isTypeOf());
1072:       assertFalse(node0.isAssign());
1073:       assertFalse(node0.isDec());
1074:       assertFalse(node0.isFalse());
1075:       assertFalse(node0.isCast());
1076:       assertFalse(node0.isGetProp());
1077:       assertFalse(node0.isDebugger());
1078:       assertFalse(node0.isNot());
1079:       assertEquals((-1), node0.getSourcePosition());
1080:       assertFalse(node0.isObjectLit());
1081:       assertFalse(node0.isAnd());
1082:       assertEquals((-598), node0.getType());
1083:       assertFalse(node0.isInstanceOf());
1084:       assertFalse(node0.isExprResult());
1085:       assertFalse(node0.isThis());
1086:       assertFalse(node0.isWith());
1087:       assertFalse(node0.isComma());
1088:       assertFalse(node0.isThrow());
1089:       assertFalse(node0.isGetElem());
1090:       assertFalse(node0.isBreak());
1091:       assertFalse(node0.isInc());
1092:       assertFalse(node0.isOr());
1093:       assertFalse(node0.hasMoreThanOneChild());
1094:       assertFalse(node0.isDo());
1095:       assertFalse(node0.isCase());
1096:       assertEquals((-1), node0.getLineno());
1097:       assertFalse(node0.isBlock());
1098:       assertFalse(node0.isAssignAdd());
1099:       assertFalse(node0.isHook());
1100:       assertFalse(node0.isLabel());
1101:       assertFalse(node0.isFor());
1102:       assertFalse(node0.isStringKey());
1103:       assertFalse(node0.isLabelName());
1104:       assertFalse(node0.isArrayLit());
1105:       assertFalse(node0.isTry());
1106:       assertFalse(node0.hasOneChild());
1107:       assertEquals((-1), node0.getCharno());
1108:       assertFalse(node0.isSwitch());
1109:       assertFalse(node0.isScript());
1110:       assertFalse(node0.isParamList());
1111:       assertFalse(node0.isGetterDef());
1112:       assertFalse(node0.isNumber());
1113:       assertFalse(node1.isVar());
1114:       assertFalse(node1.isStringKey());
1115:       assertFalse(node1.isBlock());
1116:       assertFalse(node1.isNull());
1117:       assertFalse(node1.isParamList());
1118:       assertFalse(node1.isName());
1119:       assertFalse(node1.isCall());
1120:       assertFalse(node1.isReturn());
1121:       assertFalse(node1.hasMoreThanOneChild());
1122:       assertFalse(node1.isCatch());
1123:       assertFalse(node1.isNumber());
1124:       assertFalse(node1.isWhile());
1125:       assertFalse(node1.isTry());
1126:       assertEquals(108, node1.getLineno());
1127:       assertFalse(node1.isTrue());
1128:       assertFalse(node1.isAssign());
1129:       assertFalse(node1.isDec());
1130:       assertFalse(node1.isDelProp());
1131:       assertFalse(node1.isTypeOf());
1132:       assertFalse(node1.isVoid());
1133:       assertFalse(node1.isExprResult());
1134:       assertFalse(node1.isGetElem());
1135:       assertFalse(node1.isLabelName());
1136:       assertFalse(node1.isArrayLit());
1137:       assertFalse(node1.isAssignAdd());
1138:       assertFalse(node1.isLabel());
1139:       assertFalse(node1.isOr());
1140:       assertFalse(node1.isDefaultCase());
1141:       assertFalse(node1.isEmpty());
1142:       assertFalse(node1.isAdd());
1143:       assertFalse(node1.isDo());
1144:       assertFalse(node1.isNew());
1145:       assertFalse(node1.isHook());
1146:       assertFalse(node1.isThrow());
1147:       assertFalse(node1.isFalse());
1148:       assertFalse(node1.isBreak());
1149:       assertFalse(node1.isSwitch());
1150:       assertFalse(node1.isInstanceOf());
1151:       assertTrue(node1.hasChildren());
1152:       assertFalse(node1.isAnd());
1153:       assertFalse(node1.isObjectLit());
1154:       assertFalse(node1.isThis());
1155:       assertFalse(node1.isNot());
1156:       assertEquals(1, node1.getChildCount());
1157:       assertFalse(node1.isComma());
1158:       assertFalse(node1.isGetterDef());
1159:       assertFalse(node1.isScript());
1160:       assertTrue(node1.hasOneChild());
1161:       assertFalse(node1.isString());
1162:       assertFalse(node1.isGetProp());
1163:       assertFalse(node1.isCase());
1164:       assertFalse(node1.isCast());
1165:       assertFalse(node1.isFunction());
1166:       assertFalse(node1.isFor());
1167:       assertEquals(0, node1.getCharno());
1168:       assertFalse(node1.isDebugger());
1169:       assertFalse(node1.isIf());
1170:       assertFalse(node1.isRegExp());
1171:       assertEquals(36, node1.getType());
1172:       assertFalse(node1.isWith());
1173:       assertFalse(node1.isNE());
1174:       assertFalse(node1.isIn());
1175:       assertFalse(node1.isContinue());
1176:       assertEquals(442368, node1.getSourcePosition());
1177:       assertFalse(node1.isInc());
1178:       assertFalse(node1.isSetterDef());
1179:       
1180:       Node node2 = node1.useSourceInfoFromForTree(node0);
1181:       assertEquals(55, Node.INFERRED_FUNCTION);
1182:       assertEquals(4095, Node.COLUMN_MASK);
1183:       assertEquals(43, Node.IS_CONSTANT_NAME);
1184:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1185:       assertEquals(48, Node.DIRECTIVES);
1186:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1187:       assertEquals(40, Node.ORIGINALNAME_PROP);
1188:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1189:       assertEquals(50, Node.FREE_CALL);
1190:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1191:       assertEquals(54, Node.SLASH_V);
1192:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1193:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1194:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1195:       assertEquals(1, Node.DECR_FLAG);
1196:       assertEquals(49, Node.DIRECT_EVAL);
1197:       assertEquals(32, Node.INCRDECR_PROP);
1198:       assertEquals(30, Node.VAR_ARGS_NAME);
1199:       assertEquals(57, Node.LAST_PROP);
1200:       assertEquals(12, Node.COLUMN_BITS);
1201:       assertEquals(46, Node.IS_NAMESPACE);
1202:       assertEquals(37, Node.OPT_ARG_NAME);
1203:       assertEquals(2, Node.POST_FLAG);
1204:       assertEquals(56, Node.CHANGE_TIME);
1205:       assertEquals(47, Node.IS_DISPATCHER);
1206:       assertEquals(57, Node.REFLECTED_OBJECT);
1207:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1208:       assertEquals(8, Node.FLAG_NO_THROWS);
1209:       assertEquals(39, Node.EMPTY_BLOCK);
1210:       assertEquals(36, Node.QUOTED_PROP);
1211:       assertEquals(52, Node.LENGTH);
1212:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1213:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1214:       assertEquals(53, Node.INPUT_ID);
1215:       assertEquals(29, Node.JSDOC_INFO_PROP);
1216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1217:       assertEquals(52, Node.LENGTH);
1218:       assertEquals(40, Node.ORIGINALNAME_PROP);
1219:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1220:       assertEquals(49, Node.DIRECT_EVAL);
1221:       assertEquals(50, Node.FREE_CALL);
1222:       assertEquals(57, Node.REFLECTED_OBJECT);
1223:       assertEquals(46, Node.IS_NAMESPACE);
1224:       assertEquals(54, Node.SLASH_V);
1225:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1226:       assertEquals(8, Node.FLAG_NO_THROWS);
1227:       assertEquals(39, Node.EMPTY_BLOCK);
1228:       assertEquals(55, Node.INFERRED_FUNCTION);
1229:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1230:       assertEquals(57, Node.LAST_PROP);
1231:       assertEquals(47, Node.IS_DISPATCHER);
1232:       assertEquals(2, Node.POST_FLAG);
1233:       assertEquals(30, Node.VAR_ARGS_NAME);
1234:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1235:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1236:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1237:       assertEquals(53, Node.INPUT_ID);
1238:       assertEquals(29, Node.JSDOC_INFO_PROP);
1239:       assertEquals(36, Node.QUOTED_PROP);
1240:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1241:       assertEquals(43, Node.IS_CONSTANT_NAME);
1242:       assertEquals(56, Node.CHANGE_TIME);
1243:       assertEquals(32, Node.INCRDECR_PROP);
1244:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1245:       assertEquals(48, Node.DIRECTIVES);
1246:       assertEquals(37, Node.OPT_ARG_NAME);
1247:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1248:       assertEquals(4095, Node.COLUMN_MASK);
1249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1250:       assertEquals(1, Node.DECR_FLAG);
1251:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1252:       assertEquals(12, Node.COLUMN_BITS);
1253:       assertEquals(56, Node.CHANGE_TIME);
1254:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1255:       assertEquals(36, Node.QUOTED_PROP);
1256:       assertEquals(53, Node.INPUT_ID);
1257:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1258:       assertEquals(29, Node.JSDOC_INFO_PROP);
1259:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1260:       assertEquals(1, Node.DECR_FLAG);
1261:       assertEquals(12, Node.COLUMN_BITS);
1262:       assertEquals(32, Node.INCRDECR_PROP);
1263:       assertEquals(49, Node.DIRECT_EVAL);
1264:       assertEquals(37, Node.OPT_ARG_NAME);
1265:       assertEquals(48, Node.DIRECTIVES);
1266:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1267:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1268:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1269:       assertEquals(4095, Node.COLUMN_MASK);
1270:       assertEquals(40, Node.ORIGINALNAME_PROP);
1271:       assertEquals(57, Node.REFLECTED_OBJECT);
1272:       assertEquals(54, Node.SLASH_V);
1273:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1274:       assertEquals(39, Node.EMPTY_BLOCK);
1275:       assertEquals(50, Node.FREE_CALL);
1276:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1277:       assertEquals(52, Node.LENGTH);
1278:       assertEquals(8, Node.FLAG_NO_THROWS);
1279:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1280:       assertEquals(55, Node.INFERRED_FUNCTION);
1281:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1282:       assertEquals(46, Node.IS_NAMESPACE);
1283:       assertEquals(43, Node.IS_CONSTANT_NAME);
1284:       assertEquals(57, Node.LAST_PROP);
1285:       assertEquals(2, Node.POST_FLAG);
1286:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1287:       assertEquals(47, Node.IS_DISPATCHER);
1288:       assertEquals(30, Node.VAR_ARGS_NAME);
1289:       assertFalse(node0.equals((Object)node1));
1290:       assertFalse(node1.equals((Object)node0));
1291:       assertFalse(node2.equals((Object)node0));
1292:       assertNotNull(node2);
1293:       assertSame(node1, node2);
1294:       assertSame(node2, node1);
1295:       assertFalse(node0.isCatch());
1296:       assertFalse(node0.isDefaultCase());
1297:       assertFalse(node0.isFunction());
1298:       assertEquals(0, node0.getChildCount());
1299:       assertFalse(node0.isRegExp());
1300:       assertFalse(node0.isName());
1301:       assertFalse(node0.isCall());
1302:       assertFalse(node0.isVar());
1303:       assertFalse(node0.isEmpty());
1304:       assertFalse(node0.isDelProp());
1305:       assertFalse(node0.isIf());
1306:       assertFalse(node0.isNew());
1307:       assertFalse(node0.isVoid());
1308:       assertFalse(node0.isTrue());
1309:       assertFalse(node0.isSetterDef());
1310:       assertFalse(node0.isAdd());
1311:       assertFalse(node0.isNE());
1312:       assertFalse(node0.isIn());
1313:       assertFalse(node0.isNull());
1314:       assertFalse(node0.isContinue());
1315:       assertFalse(node0.isWhile());
1316:       assertFalse(node0.isString());
1317:       assertFalse(node0.hasChildren());
1318:       assertFalse(node0.isReturn());
1319:       assertFalse(node0.isTypeOf());
1320:       assertFalse(node0.isAssign());
1321:       assertFalse(node0.isDec());
1322:       assertFalse(node0.isFalse());
1323:       assertFalse(node0.isCast());
1324:       assertFalse(node0.isGetProp());
1325:       assertFalse(node0.isDebugger());
1326:       assertFalse(node0.isNot());
1327:       assertEquals((-1), node0.getSourcePosition());
1328:       assertFalse(node0.isObjectLit());
1329:       assertFalse(node0.isAnd());
1330:       assertEquals((-598), node0.getType());
1331:       assertFalse(node0.isInstanceOf());
1332:       assertFalse(node0.isExprResult());
1333:       assertFalse(node0.isThis());
1334:       assertFalse(node0.isWith());
1335:       assertFalse(node0.isComma());
1336:       assertFalse(node0.isThrow());
1337:       assertFalse(node0.isGetElem());
1338:       assertFalse(node0.isBreak());
1339:       assertFalse(node0.isInc());
1340:       assertFalse(node0.isOr());
1341:       assertFalse(node0.hasMoreThanOneChild());
1342:       assertFalse(node0.isDo());
1343:       assertFalse(node0.isCase());
1344:       assertEquals((-1), node0.getLineno());
1345:       assertFalse(node0.isBlock());
1346:       assertFalse(node0.isAssignAdd());
1347:       assertFalse(node0.isHook());
1348:       assertFalse(node0.isLabel());
1349:       assertFalse(node0.isFor());
1350:       assertFalse(node0.isStringKey());
1351:       assertFalse(node0.isLabelName());
1352:       assertFalse(node0.isArrayLit());
1353:       assertFalse(node0.isTry());
1354:       assertFalse(node0.hasOneChild());
1355:       assertEquals((-1), node0.getCharno());
1356:       assertFalse(node0.isSwitch());
1357:       assertFalse(node0.isScript());
1358:       assertFalse(node0.isParamList());
1359:       assertFalse(node0.isGetterDef());
1360:       assertFalse(node0.isNumber());
1361:       assertFalse(node1.isVar());
1362:       assertFalse(node1.isStringKey());
1363:       assertFalse(node1.isBlock());
1364:       assertFalse(node1.isNull());
1365:       assertFalse(node1.isParamList());
1366:       assertFalse(node1.isName());
1367:       assertFalse(node1.isCall());
1368:       assertFalse(node1.isReturn());
1369:       assertFalse(node1.hasMoreThanOneChild());
1370:       assertFalse(node1.isCatch());
1371:       assertEquals((-1), node1.getSourcePosition());
1372:       assertFalse(node1.isNumber());
1373:       assertFalse(node1.isWhile());
1374:       assertFalse(node1.isTry());
1375:       assertFalse(node1.isTrue());
1376:       assertFalse(node1.isAssign());
1377:       assertFalse(node1.isDec());
1378:       assertFalse(node1.isDelProp());
1379:       assertFalse(node1.isTypeOf());
1380:       assertFalse(node1.isVoid());
1381:       assertFalse(node1.isExprResult());
1382:       assertFalse(node1.isGetElem());
1383:       assertFalse(node1.isLabelName());
1384:       assertFalse(node1.isArrayLit());
1385:       assertFalse(node1.isAssignAdd());
1386:       assertFalse(node1.isLabel());
1387:       assertFalse(node1.isOr());
1388:       assertFalse(node1.isDefaultCase());
1389:       assertFalse(node1.isEmpty());
1390:       assertFalse(node1.isAdd());
1391:       assertFalse(node1.isDo());
1392:       assertFalse(node1.isNew());
1393:       assertFalse(node1.isHook());
1394:       assertFalse(node1.isThrow());
1395:       assertFalse(node1.isFalse());
1396:       assertEquals((-1), node1.getCharno());
1397:       assertFalse(node1.isBreak());
1398:       assertFalse(node1.isSwitch());
1399:       assertFalse(node1.isInstanceOf());
1400:       assertTrue(node1.hasChildren());
1401:       assertFalse(node1.isAnd());
1402:       assertFalse(node1.isObjectLit());
1403:       assertFalse(node1.isThis());
1404:       assertFalse(node1.isNot());
1405:       assertEquals(1, node1.getChildCount());
1406:       assertFalse(node1.isComma());
1407:       assertFalse(node1.isGetterDef());
1408:       assertFalse(node1.isScript());
1409:       assertTrue(node1.hasOneChild());
1410:       assertFalse(node1.isString());
1411:       assertFalse(node1.isGetProp());
1412:       assertFalse(node1.isCase());
1413:       assertFalse(node1.isCast());
1414:       assertFalse(node1.isFunction());
1415:       assertFalse(node1.isFor());
1416:       assertFalse(node1.isDebugger());
1417:       assertFalse(node1.isIf());
1418:       assertFalse(node1.isRegExp());
1419:       assertEquals(36, node1.getType());
1420:       assertFalse(node1.isWith());
1421:       assertFalse(node1.isNE());
1422:       assertEquals((-1), node1.getLineno());
1423:       assertFalse(node1.isIn());
1424:       assertFalse(node1.isContinue());
1425:       assertFalse(node1.isInc());
1426:       assertFalse(node1.isSetterDef());
1427:       assertFalse(node2.isDelProp());
1428:       assertFalse(node2.isGetterDef());
1429:       assertFalse(node2.isArrayLit());
1430:       assertFalse(node2.isEmpty());
1431:       assertFalse(node2.isDebugger());
1432:       assertFalse(node2.isVoid());
1433:       assertFalse(node2.isIf());
1434:       assertFalse(node2.isNE());
1435:       assertFalse(node2.isTrue());
1436:       assertFalse(node2.isIn());
1437:       assertFalse(node2.isInc());
1438:       assertFalse(node2.isFunction());
1439:       assertEquals(36, node2.getType());
1440:       assertFalse(node2.isDefaultCase());
1441:       assertFalse(node2.isFalse());
1442:       assertFalse(node2.isName());
1443:       assertFalse(node2.isBreak());
1444:       assertFalse(node2.isAdd());
1445:       assertFalse(node2.isCall());
1446:       assertFalse(node2.isNull());
1447:       assertFalse(node2.isNot());
1448:       assertFalse(node2.isObjectLit());
1449:       assertFalse(node2.isString());
1450:       assertFalse(node2.isExprResult());
1451:       assertFalse(node2.isGetProp());
1452:       assertFalse(node2.isComma());
1453:       assertFalse(node2.isTypeOf());
1454:       assertFalse(node2.isDec());
1455:       assertFalse(node2.isWhile());
1456:       assertFalse(node2.isReturn());
1457:       assertTrue(node2.hasOneChild());
1458:       assertFalse(node2.isGetElem());
1459:       assertFalse(node2.isLabelName());
1460:       assertFalse(node2.isAssign());
1461:       assertFalse(node2.isNumber());
1462:       assertFalse(node2.isCast());
1463:       assertFalse(node2.isOr());
1464:       assertEquals((-1), node2.getSourcePosition());
1465:       assertFalse(node2.isContinue());
1466:       assertFalse(node2.isAnd());
1467:       assertFalse(node2.isDo());
1468:       assertFalse(node2.isLabel());
1469:       assertFalse(node2.isNew());
1470:       assertFalse(node2.isAssignAdd());
1471:       assertFalse(node2.isVar());
1472:       assertFalse(node2.isStringKey());
1473:       assertFalse(node2.isThrow());
1474:       assertFalse(node2.isSetterDef());
1475:       assertFalse(node2.isParamList());
1476:       assertEquals((-1), node2.getCharno());
1477:       assertFalse(node2.isSwitch());
1478:       assertFalse(node2.isCase());
1479:       assertFalse(node2.hasMoreThanOneChild());
1480:       assertFalse(node2.isWith());
1481:       assertFalse(node2.isInstanceOf());
1482:       assertEquals((-1), node2.getLineno());
1483:       assertTrue(node2.hasChildren());
1484:       assertFalse(node2.isCatch());
1485:       assertFalse(node2.isScript());
1486:       assertFalse(node2.isRegExp());
1487:       assertFalse(node2.isTry());
1488:       assertFalse(node2.isHook());
1489:       assertEquals(1, node2.getChildCount());
1490:       assertFalse(node2.isThis());
1491:       assertFalse(node2.isBlock());
1492:       assertFalse(node2.isFor());
1493:       
1494:       Node node3 = Node.newNumber((double) 12);
1495:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1496:       assertEquals(55, Node.INFERRED_FUNCTION);
1497:       assertEquals(4095, Node.COLUMN_MASK);
1498:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1499:       assertEquals(40, Node.ORIGINALNAME_PROP);
1500:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1501:       assertEquals(50, Node.FREE_CALL);
1502:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1503:       assertEquals(54, Node.SLASH_V);
1504:       assertEquals(43, Node.IS_CONSTANT_NAME);
1505:       assertEquals(46, Node.IS_NAMESPACE);
1506:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1507:       assertEquals(1, Node.DECR_FLAG);
1508:       assertEquals(49, Node.DIRECT_EVAL);
1509:       assertEquals(32, Node.INCRDECR_PROP);
1510:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1511:       assertEquals(2, Node.POST_FLAG);
1512:       assertEquals(57, Node.LAST_PROP);
1513:       assertEquals(30, Node.VAR_ARGS_NAME);
1514:       assertEquals(12, Node.COLUMN_BITS);
1515:       assertEquals(47, Node.IS_DISPATCHER);
1516:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1517:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1518:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1519:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1520:       assertEquals(29, Node.JSDOC_INFO_PROP);
1521:       assertEquals(53, Node.INPUT_ID);
1522:       assertEquals(39, Node.EMPTY_BLOCK);
1523:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1524:       assertEquals(37, Node.OPT_ARG_NAME);
1525:       assertEquals(48, Node.DIRECTIVES);
1526:       assertEquals(52, Node.LENGTH);
1527:       assertEquals(8, Node.FLAG_NO_THROWS);
1528:       assertEquals(56, Node.CHANGE_TIME);
1529:       assertEquals(36, Node.QUOTED_PROP);
1530:       assertEquals(57, Node.REFLECTED_OBJECT);
1531:       assertFalse(node3.equals((Object)node1));
1532:       assertFalse(node3.equals((Object)node0));
1533:       assertFalse(node3.equals((Object)node2));
1534:       assertNotNull(node3);
1535:       assertFalse(node3.isCatch());
1536:       assertEquals(0, node3.getChildCount());
1537:       assertFalse(node3.isFunction());
1538:       assertFalse(node3.isRegExp());
1539:       assertFalse(node3.isSetterDef());
1540:       assertFalse(node3.isDefaultCase());
1541:       assertFalse(node3.isTry());
1542:       assertFalse(node3.isCall());
1543:       assertFalse(node3.isEmpty());
1544:       assertFalse(node3.isFor());
1545:       assertFalse(node3.isNE());
1546:       assertFalse(node3.isNull());
1547:       assertFalse(node3.isTrue());
1548:       assertFalse(node3.isIf());
1549:       assertFalse(node3.isDelProp());
1550:       assertFalse(node3.isName());
1551:       assertFalse(node3.isVoid());
1552:       assertFalse(node3.isContinue());
1553:       assertFalse(node3.isIn());
1554:       assertFalse(node3.isString());
1555:       assertFalse(node3.isReturn());
1556:       assertFalse(node3.isInc());
1557:       assertFalse(node3.isWhile());
1558:       assertTrue(node3.isNumber());
1559:       assertFalse(node3.isThrow());
1560:       assertFalse(node3.isFalse());
1561:       assertFalse(node3.isCast());
1562:       assertEquals((-1), node3.getSourcePosition());
1563:       assertFalse(node3.isDebugger());
1564:       assertFalse(node3.isAnd());
1565:       assertFalse(node3.isInstanceOf());
1566:       assertFalse(node3.isWith());
1567:       assertFalse(node3.isNot());
1568:       assertFalse(node3.isObjectLit());
1569:       assertFalse(node3.isGetProp());
1570:       assertFalse(node3.isThis());
1571:       assertFalse(node3.isScript());
1572:       assertFalse(node3.hasOneChild());
1573:       assertFalse(node3.isGetElem());
1574:       assertFalse(node3.isDec());
1575:       assertFalse(node3.isHook());
1576:       assertFalse(node3.hasChildren());
1577:       assertFalse(node3.isComma());
1578:       assertFalse(node3.isAssign());
1579:       assertFalse(node3.isTypeOf());
1580:       assertFalse(node3.isExprResult());
1581:       assertFalse(node3.isBreak());
1582:       assertEquals((-1), node3.getLineno());
1583:       assertFalse(node3.isCase());
1584:       assertEquals(39, node3.getType());
1585:       assertFalse(node3.hasMoreThanOneChild());
1586:       assertFalse(node3.isOr());
1587:       assertFalse(node3.isNew());
1588:       assertFalse(node3.isAssignAdd());
1589:       assertFalse(node3.isLabel());
1590:       assertFalse(node3.isAdd());
1591:       assertFalse(node3.isBlock());
1592:       assertFalse(node3.isDo());
1593:       assertFalse(node3.isStringKey());
1594:       assertFalse(node3.isVar());
1595:       assertFalse(node3.isGetterDef());
1596:       assertFalse(node3.isParamList());
1597:       assertEquals((-1), node3.getCharno());
1598:       assertFalse(node3.isArrayLit());
1599:       assertFalse(node3.isSwitch());
1600:       assertFalse(node3.isLabelName());
1601:       
1602:       node0.addChildrenToBack(node3);
1603:       assertEquals(55, Node.INFERRED_FUNCTION);
1604:       assertEquals(4095, Node.COLUMN_MASK);
1605:       assertEquals(43, Node.IS_CONSTANT_NAME);
1606:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1607:       assertEquals(48, Node.DIRECTIVES);
1608:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1609:       assertEquals(40, Node.ORIGINALNAME_PROP);
1610:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1611:       assertEquals(50, Node.FREE_CALL);
1612:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1613:       assertEquals(54, Node.SLASH_V);
1614:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1615:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1616:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1617:       assertEquals(1, Node.DECR_FLAG);
1618:       assertEquals(49, Node.DIRECT_EVAL);
1619:       assertEquals(32, Node.INCRDECR_PROP);
1620:       assertEquals(30, Node.VAR_ARGS_NAME);
1621:       assertEquals(57, Node.LAST_PROP);
1622:       assertEquals(12, Node.COLUMN_BITS);
1623:       assertEquals(46, Node.IS_NAMESPACE);
1624:       assertEquals(37, Node.OPT_ARG_NAME);
1625:       assertEquals(2, Node.POST_FLAG);
1626:       assertEquals(56, Node.CHANGE_TIME);
1627:       assertEquals(47, Node.IS_DISPATCHER);
1628:       assertEquals(57, Node.REFLECTED_OBJECT);
1629:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1630:       assertEquals(8, Node.FLAG_NO_THROWS);
1631:       assertEquals(39, Node.EMPTY_BLOCK);
1632:       assertEquals(36, Node.QUOTED_PROP);
1633:       assertEquals(52, Node.LENGTH);
1634:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1635:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1636:       assertEquals(53, Node.INPUT_ID);
1637:       assertEquals(29, Node.JSDOC_INFO_PROP);
1638:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1639:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1640:       assertEquals(55, Node.INFERRED_FUNCTION);
1641:       assertEquals(4095, Node.COLUMN_MASK);
1642:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1643:       assertEquals(40, Node.ORIGINALNAME_PROP);
1644:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1645:       assertEquals(50, Node.FREE_CALL);
1646:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1647:       assertEquals(54, Node.SLASH_V);
1648:       assertEquals(43, Node.IS_CONSTANT_NAME);
1649:       assertEquals(46, Node.IS_NAMESPACE);
1650:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1651:       assertEquals(1, Node.DECR_FLAG);
1652:       assertEquals(49, Node.DIRECT_EVAL);
1653:       assertEquals(32, Node.INCRDECR_PROP);
1654:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1655:       assertEquals(2, Node.POST_FLAG);
1656:       assertEquals(57, Node.LAST_PROP);
1657:       assertEquals(30, Node.VAR_ARGS_NAME);
1658:       assertEquals(12, Node.COLUMN_BITS);
1659:       assertEquals(47, Node.IS_DISPATCHER);
1660:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1661:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1662:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1663:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1664:       assertEquals(29, Node.JSDOC_INFO_PROP);
1665:       assertEquals(53, Node.INPUT_ID);
1666:       assertEquals(39, Node.EMPTY_BLOCK);
1667:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1668:       assertEquals(37, Node.OPT_ARG_NAME);
1669:       assertEquals(48, Node.DIRECTIVES);
1670:       assertEquals(52, Node.LENGTH);
1671:       assertEquals(8, Node.FLAG_NO_THROWS);
1672:       assertEquals(56, Node.CHANGE_TIME);
1673:       assertEquals(36, Node.QUOTED_PROP);
1674:       assertEquals(57, Node.REFLECTED_OBJECT);
1675:       assertFalse(node0.equals((Object)node3));
1676:       assertFalse(node0.equals((Object)node1));
1677:       assertFalse(node0.equals((Object)node2));
1678:       assertFalse(node3.equals((Object)node1));
1679:       assertFalse(node3.equals((Object)node0));
1680:       assertFalse(node3.equals((Object)node2));
1681:       assertFalse(node0.isCatch());
1682:       assertFalse(node0.isDefaultCase());
1683:       assertFalse(node0.isFunction());
1684:       assertFalse(node0.isRegExp());
1685:       assertFalse(node0.isName());
1686:       assertFalse(node0.isCall());
1687:       assertFalse(node0.isVar());
1688:       assertFalse(node0.isEmpty());
1689:       assertFalse(node0.isDelProp());
1690:       assertFalse(node0.isIf());
1691:       assertFalse(node0.isNew());
1692:       assertFalse(node0.isVoid());
1693:       assertFalse(node0.isTrue());
1694:       assertFalse(node0.isSetterDef());
1695:       assertFalse(node0.isAdd());
1696:       assertFalse(node0.isNE());
1697:       assertFalse(node0.isIn());
1698:       assertFalse(node0.isNull());
1699:       assertFalse(node0.isContinue());
1700:       assertFalse(node0.isWhile());
1701:       assertFalse(node0.isString());
1702:       assertFalse(node0.isReturn());
1703:       assertFalse(node0.isTypeOf());
1704:       assertTrue(node0.hasOneChild());
1705:       assertFalse(node0.isAssign());
1706:       assertFalse(node0.isDec());
1707:       assertFalse(node0.isFalse());
1708:       assertFalse(node0.isCast());
1709:       assertFalse(node0.isGetProp());
1710:       assertFalse(node0.isDebugger());
1711:       assertFalse(node0.isNot());
1712:       assertEquals((-1), node0.getSourcePosition());
1713:       assertFalse(node0.isObjectLit());
1714:       assertFalse(node0.isAnd());
1715:       assertEquals((-598), node0.getType());
1716:       assertFalse(node0.isInstanceOf());
1717:       assertFalse(node0.isExprResult());
1718:       assertFalse(node0.isThis());
1719:       assertFalse(node0.isWith());
1720:       assertFalse(node0.isComma());
1721:       assertFalse(node0.isThrow());
1722:       assertFalse(node0.isGetElem());
1723:       assertFalse(node0.isBreak());
1724:       assertFalse(node0.isInc());
1725:       assertFalse(node0.isOr());
1726:       assertFalse(node0.hasMoreThanOneChild());
1727:       assertFalse(node0.isDo());
1728:       assertFalse(node0.isCase());
1729:       assertEquals((-1), node0.getLineno());
1730:       assertFalse(node0.isBlock());
1731:       assertFalse(node0.isAssignAdd());
1732:       assertTrue(node0.hasChildren());
1733:       assertFalse(node0.isHook());
1734:       assertFalse(node0.isLabel());
1735:       assertEquals(1, node0.getChildCount());
1736:       assertFalse(node0.isFor());
1737:       assertFalse(node0.isStringKey());
1738:       assertFalse(node0.isLabelName());
1739:       assertFalse(node0.isArrayLit());
1740:       assertFalse(node0.isTry());
1741:       assertEquals((-1), node0.getCharno());
1742:       assertFalse(node0.isSwitch());
1743:       assertFalse(node0.isScript());
1744:       assertFalse(node0.isParamList());
1745:       assertFalse(node0.isGetterDef());
1746:       assertFalse(node0.isNumber());
1747:       assertFalse(node3.isCatch());
1748:       assertEquals(0, node3.getChildCount());
1749:       assertFalse(node3.isFunction());
1750:       assertFalse(node3.isRegExp());
1751:       assertFalse(node3.isSetterDef());
1752:       assertFalse(node3.isDefaultCase());
1753:       assertFalse(node3.isTry());
1754:       assertFalse(node3.isCall());
1755:       assertFalse(node3.isEmpty());
1756:       assertFalse(node3.isFor());
1757:       assertFalse(node3.isNE());
1758:       assertFalse(node3.isNull());
1759:       assertFalse(node3.isTrue());
1760:       assertFalse(node3.isIf());
1761:       assertFalse(node3.isDelProp());
1762:       assertFalse(node3.isName());
1763:       assertFalse(node3.isVoid());
1764:       assertFalse(node3.isContinue());
1765:       assertFalse(node3.isIn());
1766:       assertFalse(node3.isString());
1767:       assertFalse(node3.isReturn());
1768:       assertFalse(node3.isInc());
1769:       assertFalse(node3.isWhile());
1770:       assertTrue(node3.isNumber());
1771:       assertFalse(node3.isThrow());
1772:       assertFalse(node3.isFalse());
1773:       assertFalse(node3.isCast());
1774:       assertEquals((-1), node3.getSourcePosition());
1775:       assertFalse(node3.isDebugger());
1776:       assertFalse(node3.isAnd());
1777:       assertFalse(node3.isInstanceOf());
1778:       assertFalse(node3.isWith());
1779:       assertFalse(node3.isNot());
1780:       assertFalse(node3.isObjectLit());
1781:       assertFalse(node3.isGetProp());
1782:       assertFalse(node3.isThis());
1783:       assertFalse(node3.isScript());
1784:       assertFalse(node3.hasOneChild());
1785:       assertFalse(node3.isGetElem());
1786:       assertFalse(node3.isDec());
1787:       assertFalse(node3.isHook());
1788:       assertFalse(node3.hasChildren());
1789:       assertFalse(node3.isComma());
1790:       assertFalse(node3.isAssign());
1791:       assertFalse(node3.isTypeOf());
1792:       assertFalse(node3.isExprResult());
1793:       assertFalse(node3.isBreak());
1794:       assertEquals((-1), node3.getLineno());
1795:       assertFalse(node3.isCase());
1796:       assertEquals(39, node3.getType());
1797:       assertFalse(node3.hasMoreThanOneChild());
1798:       assertFalse(node3.isOr());
1799:       assertFalse(node3.isNew());
1800:       assertFalse(node3.isAssignAdd());
1801:       assertFalse(node3.isLabel());
1802:       assertFalse(node3.isAdd());
1803:       assertFalse(node3.isBlock());
1804:       assertFalse(node3.isDo());
1805:       assertFalse(node3.isStringKey());
1806:       assertFalse(node3.isVar());
1807:       assertFalse(node3.isGetterDef());
1808:       assertFalse(node3.isParamList());
1809:       assertEquals((-1), node3.getCharno());
1810:       assertFalse(node3.isArrayLit());
1811:       assertFalse(node3.isSwitch());
1812:       assertFalse(node3.isLabelName());
1813:       
1814:       node1.setWasEmptyNode(true);
1815:       assertEquals(55, Node.INFERRED_FUNCTION);
1816:       assertEquals(4095, Node.COLUMN_MASK);
1817:       assertEquals(43, Node.IS_CONSTANT_NAME);
1818:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1819:       assertEquals(48, Node.DIRECTIVES);
1820:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1821:       assertEquals(40, Node.ORIGINALNAME_PROP);
1822:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1823:       assertEquals(50, Node.FREE_CALL);
1824:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1825:       assertEquals(54, Node.SLASH_V);
1826:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1827:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1828:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1829:       assertEquals(1, Node.DECR_FLAG);
1830:       assertEquals(49, Node.DIRECT_EVAL);
1831:       assertEquals(32, Node.INCRDECR_PROP);
1832:       assertEquals(30, Node.VAR_ARGS_NAME);
1833:       assertEquals(57, Node.LAST_PROP);
1834:       assertEquals(12, Node.COLUMN_BITS);
1835:       assertEquals(46, Node.IS_NAMESPACE);
1836:       assertEquals(37, Node.OPT_ARG_NAME);
1837:       assertEquals(2, Node.POST_FLAG);
1838:       assertEquals(56, Node.CHANGE_TIME);
1839:       assertEquals(47, Node.IS_DISPATCHER);
1840:       assertEquals(57, Node.REFLECTED_OBJECT);
1841:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1842:       assertEquals(8, Node.FLAG_NO_THROWS);
1843:       assertEquals(39, Node.EMPTY_BLOCK);
1844:       assertEquals(36, Node.QUOTED_PROP);
1845:       assertEquals(52, Node.LENGTH);
1846:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1847:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1848:       assertEquals(53, Node.INPUT_ID);
1849:       assertEquals(29, Node.JSDOC_INFO_PROP);
1850:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1851:       assertEquals(52, Node.LENGTH);
1852:       assertEquals(40, Node.ORIGINALNAME_PROP);
1853:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1854:       assertEquals(49, Node.DIRECT_EVAL);
1855:       assertEquals(50, Node.FREE_CALL);
1856:       assertEquals(57, Node.REFLECTED_OBJECT);
1857:       assertEquals(46, Node.IS_NAMESPACE);
1858:       assertEquals(54, Node.SLASH_V);
1859:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1860:       assertEquals(8, Node.FLAG_NO_THROWS);
1861:       assertEquals(39, Node.EMPTY_BLOCK);
1862:       assertEquals(55, Node.INFERRED_FUNCTION);
1863:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1864:       assertEquals(57, Node.LAST_PROP);
1865:       assertEquals(47, Node.IS_DISPATCHER);
1866:       assertEquals(2, Node.POST_FLAG);
1867:       assertEquals(30, Node.VAR_ARGS_NAME);
1868:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1869:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1870:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1871:       assertEquals(53, Node.INPUT_ID);
1872:       assertEquals(29, Node.JSDOC_INFO_PROP);
1873:       assertEquals(36, Node.QUOTED_PROP);
1874:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1875:       assertEquals(43, Node.IS_CONSTANT_NAME);
1876:       assertEquals(56, Node.CHANGE_TIME);
1877:       assertEquals(32, Node.INCRDECR_PROP);
1878:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1879:       assertEquals(48, Node.DIRECTIVES);
1880:       assertEquals(37, Node.OPT_ARG_NAME);
1881:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1882:       assertEquals(4095, Node.COLUMN_MASK);
1883:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1884:       assertEquals(1, Node.DECR_FLAG);
1885:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1886:       assertEquals(12, Node.COLUMN_BITS);
1887:       assertFalse(node0.equals((Object)node3));
1888:       assertFalse(node0.equals((Object)node1));
1889:       assertFalse(node0.equals((Object)node2));
1890:       assertFalse(node1.equals((Object)node0));
1891:       assertFalse(node1.equals((Object)node3));
1892:       assertSame(node1, node2);
1893:       assertFalse(node0.isCatch());
1894:       assertFalse(node0.isDefaultCase());
1895:       assertFalse(node0.isFunction());
1896:       assertFalse(node0.isRegExp());
1897:       assertFalse(node0.isName());
1898:       assertFalse(node0.isCall());
1899:       assertFalse(node0.isVar());
1900:       assertFalse(node0.isEmpty());
1901:       assertFalse(node0.isDelProp());
1902:       assertFalse(node0.isIf());
1903:       assertFalse(node0.isNew());
1904:       assertFalse(node0.isVoid());
1905:       assertFalse(node0.isTrue());
1906:       assertFalse(node0.isSetterDef());
1907:       assertFalse(node0.isAdd());
1908:       assertFalse(node0.isNE());
1909:       assertFalse(node0.isIn());
1910:       assertFalse(node0.isNull());
1911:       assertFalse(node0.isContinue());
1912:       assertFalse(node0.isWhile());
1913:       assertFalse(node0.isString());
1914:       assertFalse(node0.isReturn());
1915:       assertFalse(node0.isTypeOf());
1916:       assertTrue(node0.hasOneChild());
1917:       assertFalse(node0.isAssign());
1918:       assertFalse(node0.isDec());
1919:       assertFalse(node0.isFalse());
1920:       assertFalse(node0.isCast());
1921:       assertFalse(node0.isGetProp());
1922:       assertFalse(node0.isDebugger());
1923:       assertFalse(node0.isNot());
1924:       assertEquals((-1), node0.getSourcePosition());
1925:       assertFalse(node0.isObjectLit());
1926:       assertFalse(node0.isAnd());
1927:       assertEquals((-598), node0.getType());
1928:       assertFalse(node0.isInstanceOf());
1929:       assertFalse(node0.isExprResult());
1930:       assertFalse(node0.isThis());
1931:       assertFalse(node0.isWith());
1932:       assertFalse(node0.isComma());
1933:       assertFalse(node0.isThrow());
1934:       assertFalse(node0.isGetElem());
1935:       assertFalse(node0.isBreak());
1936:       assertFalse(node0.isInc());
1937:       assertFalse(node0.isOr());
1938:       assertFalse(node0.hasMoreThanOneChild());
1939:       assertFalse(node0.isDo());
1940:       assertFalse(node0.isCase());
1941:       assertEquals((-1), node0.getLineno());
1942:       assertFalse(node0.isBlock());
1943:       assertFalse(node0.isAssignAdd());
1944:       assertTrue(node0.hasChildren());
1945:       assertFalse(node0.isHook());
1946:       assertFalse(node0.isLabel());
1947:       assertEquals(1, node0.getChildCount());
1948:       assertFalse(node0.isFor());
1949:       assertFalse(node0.isStringKey());
1950:       assertFalse(node0.isLabelName());
1951:       assertFalse(node0.isArrayLit());
1952:       assertFalse(node0.isTry());
1953:       assertEquals((-1), node0.getCharno());
1954:       assertFalse(node0.isSwitch());
1955:       assertFalse(node0.isScript());
1956:       assertFalse(node0.isParamList());
1957:       assertFalse(node0.isGetterDef());
1958:       assertFalse(node0.isNumber());
1959:       assertFalse(node1.isVar());
1960:       assertFalse(node1.isStringKey());
1961:       assertFalse(node1.isBlock());
1962:       assertFalse(node1.isNull());
1963:       assertFalse(node1.isParamList());
1964:       assertFalse(node1.isName());
1965:       assertFalse(node1.isCall());
1966:       assertFalse(node1.isReturn());
1967:       assertFalse(node1.hasMoreThanOneChild());
1968:       assertFalse(node1.isCatch());
1969:       assertEquals((-1), node1.getSourcePosition());
1970:       assertFalse(node1.isNumber());
1971:       assertFalse(node1.isWhile());
1972:       assertFalse(node1.isTry());
1973:       assertFalse(node1.isTrue());
1974:       assertFalse(node1.isAssign());
1975:       assertFalse(node1.isDec());
1976:       assertFalse(node1.isDelProp());
1977:       assertFalse(node1.isTypeOf());
1978:       assertFalse(node1.isVoid());
1979:       assertFalse(node1.isExprResult());
1980:       assertFalse(node1.isGetElem());
1981:       assertFalse(node1.isLabelName());
1982:       assertFalse(node1.isArrayLit());
1983:       assertFalse(node1.isAssignAdd());
1984:       assertFalse(node1.isLabel());
1985:       assertFalse(node1.isOr());
1986:       assertFalse(node1.isDefaultCase());
1987:       assertFalse(node1.isEmpty());
1988:       assertFalse(node1.isAdd());
1989:       assertFalse(node1.isDo());
1990:       assertFalse(node1.isNew());
1991:       assertFalse(node1.isHook());
1992:       assertFalse(node1.isThrow());
1993:       assertFalse(node1.isFalse());
1994:       assertEquals((-1), node1.getCharno());
1995:       assertFalse(node1.isBreak());
1996:       assertFalse(node1.isSwitch());
1997:       assertFalse(node1.isInstanceOf());
1998:       assertTrue(node1.hasChildren());
1999:       assertFalse(node1.isAnd());
2000:       assertFalse(node1.isObjectLit());
2001:       assertFalse(node1.isThis());
2002:       assertFalse(node1.isNot());
2003:       assertEquals(1, node1.getChildCount());
2004:       assertFalse(node1.isComma());
2005:       assertFalse(node1.isGetterDef());
2006:       assertFalse(node1.isScript());
2007:       assertTrue(node1.hasOneChild());
2008:       assertFalse(node1.isString());
2009:       assertFalse(node1.isGetProp());
2010:       assertFalse(node1.isCase());
2011:       assertFalse(node1.isCast());
2012:       assertFalse(node1.isFunction());
2013:       assertFalse(node1.isFor());
2014:       assertFalse(node1.isDebugger());
2015:       assertFalse(node1.isIf());
2016:       assertFalse(node1.isRegExp());
2017:       assertEquals(36, node1.getType());
2018:       assertFalse(node1.isWith());
2019:       assertFalse(node1.isNE());
2020:       assertEquals((-1), node1.getLineno());
2021:       assertFalse(node1.isIn());
2022:       assertFalse(node1.isContinue());
2023:       assertFalse(node1.isInc());
2024:       assertFalse(node1.isSetterDef());
2025:       
2026:       JSDocInfo jSDocInfo1 = node3.getJSDocInfo();
2027:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2028:       assertEquals(55, Node.INFERRED_FUNCTION);
2029:       assertEquals(4095, Node.COLUMN_MASK);
2030:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2031:       assertEquals(40, Node.ORIGINALNAME_PROP);
2032:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2033:       assertEquals(50, Node.FREE_CALL);
2034:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2035:       assertEquals(54, Node.SLASH_V);
2036:       assertEquals(43, Node.IS_CONSTANT_NAME);
2037:       assertEquals(46, Node.IS_NAMESPACE);
2038:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2039:       assertEquals(1, Node.DECR_FLAG);
2040:       assertEquals(49, Node.DIRECT_EVAL);
2041:       assertEquals(32, Node.INCRDECR_PROP);
2042:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2043:       assertEquals(2, Node.POST_FLAG);
2044:       assertEquals(57, Node.LAST_PROP);
2045:       assertEquals(30, Node.VAR_ARGS_NAME);
2046:       assertEquals(12, Node.COLUMN_BITS);
2047:       assertEquals(47, Node.IS_DISPATCHER);
2048:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2049:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2050:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2051:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2052:       assertEquals(29, Node.JSDOC_INFO_PROP);
2053:       assertEquals(53, Node.INPUT_ID);
2054:       assertEquals(39, Node.EMPTY_BLOCK);
2055:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2056:       assertEquals(37, Node.OPT_ARG_NAME);
2057:       assertEquals(48, Node.DIRECTIVES);
2058:       assertEquals(52, Node.LENGTH);
2059:       assertEquals(8, Node.FLAG_NO_THROWS);
2060:       assertEquals(56, Node.CHANGE_TIME);
2061:       assertEquals(36, Node.QUOTED_PROP);
2062:       assertEquals(57, Node.REFLECTED_OBJECT);
2063:       assertFalse(node3.equals((Object)node1));
2064:       assertFalse(node3.equals((Object)node0));
2065:       assertFalse(node3.equals((Object)node2));
2066:       assertNull(jSDocInfo1);
2067:       assertFalse(node3.isCatch());
2068:       assertEquals(0, node3.getChildCount());
2069:       assertFalse(node3.isFunction());
2070:       assertFalse(node3.isRegExp());
2071:       assertFalse(node3.isSetterDef());
2072:       assertFalse(node3.isDefaultCase());
2073:       assertFalse(node3.isTry());
2074:       assertFalse(node3.isCall());
2075:       assertFalse(node3.isEmpty());
2076:       assertFalse(node3.isFor());
2077:       assertFalse(node3.isNE());
2078:       assertFalse(node3.isNull());
2079:       assertFalse(node3.isTrue());
2080:       assertFalse(node3.isIf());
2081:       assertFalse(node3.isDelProp());
2082:       assertFalse(node3.isName());
2083:       assertFalse(node3.isVoid());
2084:       assertFalse(node3.isContinue());
2085:       assertFalse(node3.isIn());
2086:       assertFalse(node3.isString());
2087:       assertFalse(node3.isReturn());
2088:       assertFalse(node3.isInc());
2089:       assertFalse(node3.isWhile());
2090:       assertTrue(node3.isNumber());
2091:       assertFalse(node3.isThrow());
2092:       assertFalse(node3.isFalse());
2093:       assertFalse(node3.isCast());
2094:       assertEquals((-1), node3.getSourcePosition());
2095:       assertFalse(node3.isDebugger());
2096:       assertFalse(node3.isAnd());
2097:       assertFalse(node3.isInstanceOf());
2098:       assertFalse(node3.isWith());
2099:       assertFalse(node3.isNot());
2100:       assertFalse(node3.isObjectLit());
2101:       assertFalse(node3.isGetProp());
2102:       assertFalse(node3.isThis());
2103:       assertFalse(node3.isScript());
2104:       assertFalse(node3.hasOneChild());
2105:       assertFalse(node3.isGetElem());
2106:       assertFalse(node3.isDec());
2107:       assertFalse(node3.isHook());
2108:       assertFalse(node3.hasChildren());
2109:       assertFalse(node3.isComma());
2110:       assertFalse(node3.isAssign());
2111:       assertFalse(node3.isTypeOf());
2112:       assertFalse(node3.isExprResult());
2113:       assertFalse(node3.isBreak());
2114:       assertEquals((-1), node3.getLineno());
2115:       assertFalse(node3.isCase());
2116:       assertEquals(39, node3.getType());
2117:       assertFalse(node3.hasMoreThanOneChild());
2118:       assertFalse(node3.isOr());
2119:       assertFalse(node3.isNew());
2120:       assertFalse(node3.isAssignAdd());
2121:       assertFalse(node3.isLabel());
2122:       assertFalse(node3.isAdd());
2123:       assertFalse(node3.isBlock());
2124:       assertFalse(node3.isDo());
2125:       assertFalse(node3.isStringKey());
2126:       assertFalse(node3.isVar());
2127:       assertFalse(node3.isGetterDef());
2128:       assertFalse(node3.isParamList());
2129:       assertEquals((-1), node3.getCharno());
2130:       assertFalse(node3.isArrayLit());
2131:       assertFalse(node3.isSwitch());
2132:       assertFalse(node3.isLabelName());
2133:       
2134:       // Undeclared exception!
2135:       try { 
2136:         node3.setQuotedString();
2137:         fail("Expecting exception: IllegalStateException");
2138:       
2139:       } catch(IllegalStateException e) {
2140:          //
2141:          // not a StringNode
2142:          //
2143:          verifyException("com.google.javascript.rhino.Node", e);
2144:       }
2145:   }
2146: }
RegularFileObject[/tmp/EvoSuite_69_1628158410127/com/google/javascript/rhino/Node_69_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:30 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_69_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_69_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_69_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.jstype.TemplatizedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.collect.AbstractIndexedListIterator",
335:       "com.google.common.collect.Iterators$11",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.common.base.Objects",
339:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
349:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSTypeExpression",
352:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
353:       "com.google.javascript.rhino.jstype.JSType$TypePair",
354:       "com.google.common.collect.Platform",
355:       "com.google.common.collect.Iterators$12",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.JSType$2",
358:       "com.google.common.collect.AbstractMultimap$Values",
359:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
360:       "com.google.common.collect.AbstractMapBasedMultimap$1",
361:       "com.google.common.collect.Multimaps$Entries",
362:       "com.google.common.collect.AbstractMultimap$Entries",
363:       "com.google.common.collect.AbstractMapBasedMultimap$2"
364:     );
365:   }
366: }

[MASTER] 10:13:30.575 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-598), "", (-598), 108);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(node0);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());

boolean boolean0 = node0.mayMutateArguments();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertTrue(boolean0);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());

boolean boolean1 = node0.isNoSideEffectsCall();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertFalse(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());

int int0 = node0.getLineno();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals((-1), int0);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());

Iterable<Node> iterable0 = node0.children();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(iterable0);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(iterable0.contains(node0));

boolean boolean2 = node0.isOptionalArg();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(boolean2);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());

String string0 = node0.getQualifiedName();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNull(string0);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());

int int1 = node0.getIntProp((-239));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertFalse(int1 == int0);
assertEquals(0, int1);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());

JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNull(jSDocInfo0);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());

Node node1 = new Node(36, node0, 108, 0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertEquals(108, node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isNot());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertTrue(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFor());
assertEquals(0, node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertEquals(36, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertEquals(442368, node1.getSourcePosition());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

Node node2 = node1.useSourceInfoFromForTree(node0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertSame(node1, node2);
assertSame(node2, node1);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isNot());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertTrue(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertEquals(36, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertEquals(36, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFalse());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isString());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isNumber());
assertFalse(node2.isCast());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());

Node node3 = Node.newNumber((double) 12);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertNotNull(node3);
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isCall());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isVoid());
assertFalse(node3.isContinue());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isReturn());
assertFalse(node3.isInc());
assertFalse(node3.isWhile());
assertTrue(node3.isNumber());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDebugger());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.isHook());
assertFalse(node3.hasChildren());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isBreak());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCase());
assertEquals(39, node3.getType());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isDo());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isGetterDef());
assertFalse(node3.isParamList());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isArrayLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabelName());

node0.addChildrenToBack(node3);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertTrue(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertTrue(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isCall());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isVoid());
assertFalse(node3.isContinue());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isReturn());
assertFalse(node3.isInc());
assertFalse(node3.isWhile());
assertTrue(node3.isNumber());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDebugger());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.isHook());
assertFalse(node3.hasChildren());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isBreak());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCase());
assertEquals(39, node3.getType());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isDo());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isGetterDef());
assertFalse(node3.isParamList());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isArrayLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabelName());

node1.setWasEmptyNode(true);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertSame(node1, node2);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertTrue(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertTrue(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isNot());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertTrue(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertEquals(36, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

JSDocInfo jSDocInfo1 = node3.getJSDocInfo();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertNull(jSDocInfo1);
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isCall());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isVoid());
assertFalse(node3.isContinue());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isReturn());
assertFalse(node3.isInc());
assertFalse(node3.isWhile());
assertTrue(node3.isNumber());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDebugger());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.isHook());
assertFalse(node3.hasChildren());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isBreak());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCase());
assertEquals(39, node3.getType());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isDo());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isGetterDef());
assertFalse(node3.isParamList());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isArrayLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabelName());

node3.setQuotedString();

[MASTER] 10:13:30.749 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_70_1628158410576/com/google/javascript/rhino/Node_70_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_70_1628158410576/com/google/javascript/rhino/Node_70_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:30.749 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:30.749 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:30.750 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 547
[MASTER] 10:13:30.751 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_70_1628158410576/com/google/javascript/rhino/Node_70_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:30 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_70_tmp__ESTest extends Node_70_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString((-598), "", (-598), 108);
23:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
24:       assertEquals(56, Node.CHANGE_TIME);
25:       assertEquals(47, Node.IS_DISPATCHER);
26:       assertEquals(29, Node.JSDOC_INFO_PROP);
27:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
28:       assertEquals(2, Node.POST_FLAG);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
31:       assertEquals(37, Node.OPT_ARG_NAME);
32:       assertEquals(49, Node.DIRECT_EVAL);
33:       assertEquals(30, Node.VAR_ARGS_NAME);
34:       assertEquals(57, Node.LAST_PROP);
35:       assertEquals(15, Node.NO_SIDE_EFFECTS);
36:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
37:       assertEquals(55, Node.INFERRED_FUNCTION);
38:       assertEquals(36, Node.QUOTED_PROP);
39:       assertEquals(52, Node.LENGTH);
40:       assertEquals(53, Node.INPUT_ID);
41:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
42:       assertEquals(39, Node.EMPTY_BLOCK);
43:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
44:       assertEquals(40, Node.ORIGINALNAME_PROP);
45:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(50, Node.FREE_CALL);
48:       assertEquals(57, Node.REFLECTED_OBJECT);
49:       assertEquals(54, Node.SLASH_V);
50:       assertEquals(48, Node.DIRECTIVES);
51:       assertEquals(43, Node.IS_CONSTANT_NAME);
52:       assertEquals(4095, Node.COLUMN_MASK);
53:       assertEquals(51, Node.STATIC_SOURCE_FILE);
54:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
55:       assertEquals(12, Node.COLUMN_BITS);
56:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
57:       assertEquals(1, Node.DECR_FLAG);
58:       assertEquals(32, Node.INCRDECR_PROP);
59:       assertNotNull(node0);
60:       assertFalse(node0.isDelProp());
61:       assertFalse(node0.isGetterDef());
62:       assertFalse(node0.isIf());
63:       assertFalse(node0.isFor());
64:       assertFalse(node0.isNE());
65:       assertFalse(node0.isArrayLit());
66:       assertFalse(node0.isFunction());
67:       assertFalse(node0.isRegExp());
68:       assertFalse(node0.isCase());
69:       assertEquals((-1), node0.getCharno());
70:       assertFalse(node0.isDebugger());
71:       assertFalse(node0.isSwitch());
72:       assertFalse(node0.isTry());
73:       assertFalse(node0.isString());
74:       assertFalse(node0.isBreak());
75:       assertFalse(node0.isNull());
76:       assertFalse(node0.isComma());
77:       assertFalse(node0.isName());
78:       assertFalse(node0.isVar());
79:       assertFalse(node0.isParamList());
80:       assertFalse(node0.isStringKey());
81:       assertEquals(0, node0.getChildCount());
82:       assertFalse(node0.isCall());
83:       assertFalse(node0.isDefaultCase());
84:       assertFalse(node0.isDo());
85:       assertFalse(node0.isVoid());
86:       assertEquals((-598), node0.getType());
87:       assertFalse(node0.isTrue());
88:       assertFalse(node0.isOr());
89:       assertFalse(node0.isNew());
90:       assertFalse(node0.isAdd());
91:       assertFalse(node0.isEmpty());
92:       assertFalse(node0.hasChildren());
93:       assertFalse(node0.isNumber());
94:       assertFalse(node0.isTypeOf());
95:       assertFalse(node0.isLabelName());
96:       assertFalse(node0.isAssign());
97:       assertFalse(node0.isDec());
98:       assertEquals((-1), node0.getSourcePosition());
99:       assertFalse(node0.isAssignAdd());
100:       assertFalse(node0.isReturn());
101:       assertFalse(node0.isLabel());
102:       assertEquals((-1), node0.getLineno());
103:       assertFalse(node0.isContinue());
104:       assertFalse(node0.hasMoreThanOneChild());
105:       assertFalse(node0.isExprResult());
106:       assertFalse(node0.isGetElem());
107:       assertFalse(node0.isCast());
108:       assertFalse(node0.isWith());
109:       assertFalse(node0.isNot());
110:       assertFalse(node0.isAnd());
111:       assertFalse(node0.isBlock());
112:       assertFalse(node0.isWhile());
113:       assertFalse(node0.hasOneChild());
114:       assertFalse(node0.isObjectLit());
115:       assertFalse(node0.isGetProp());
116:       assertFalse(node0.isScript());
117:       assertFalse(node0.isThrow());
118:       assertFalse(node0.isThis());
119:       assertFalse(node0.isHook());
120:       assertFalse(node0.isFalse());
121:       assertFalse(node0.isCatch());
122:       assertFalse(node0.isInstanceOf());
123:       assertFalse(node0.isIn());
124:       assertFalse(node0.isInc());
125:       assertFalse(node0.isSetterDef());
126:       
127:       boolean boolean0 = node0.isBlock();
128:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
129:       assertEquals(56, Node.CHANGE_TIME);
130:       assertEquals(47, Node.IS_DISPATCHER);
131:       assertEquals(29, Node.JSDOC_INFO_PROP);
132:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
133:       assertEquals(2, Node.POST_FLAG);
134:       assertEquals(46, Node.IS_NAMESPACE);
135:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
136:       assertEquals(37, Node.OPT_ARG_NAME);
137:       assertEquals(49, Node.DIRECT_EVAL);
138:       assertEquals(30, Node.VAR_ARGS_NAME);
139:       assertEquals(57, Node.LAST_PROP);
140:       assertEquals(15, Node.NO_SIDE_EFFECTS);
141:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
142:       assertEquals(55, Node.INFERRED_FUNCTION);
143:       assertEquals(36, Node.QUOTED_PROP);
144:       assertEquals(52, Node.LENGTH);
145:       assertEquals(53, Node.INPUT_ID);
146:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
147:       assertEquals(39, Node.EMPTY_BLOCK);
148:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
149:       assertEquals(40, Node.ORIGINALNAME_PROP);
150:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
151:       assertEquals(8, Node.FLAG_NO_THROWS);
152:       assertEquals(50, Node.FREE_CALL);
153:       assertEquals(57, Node.REFLECTED_OBJECT);
154:       assertEquals(54, Node.SLASH_V);
155:       assertEquals(48, Node.DIRECTIVES);
156:       assertEquals(43, Node.IS_CONSTANT_NAME);
157:       assertEquals(4095, Node.COLUMN_MASK);
158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
159:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
160:       assertEquals(12, Node.COLUMN_BITS);
161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
162:       assertEquals(1, Node.DECR_FLAG);
163:       assertEquals(32, Node.INCRDECR_PROP);
164:       assertFalse(boolean0);
165:       assertFalse(node0.isDelProp());
166:       assertFalse(node0.isGetterDef());
167:       assertFalse(node0.isIf());
168:       assertFalse(node0.isFor());
169:       assertFalse(node0.isNE());
170:       assertFalse(node0.isArrayLit());
171:       assertFalse(node0.isFunction());
172:       assertFalse(node0.isRegExp());
173:       assertFalse(node0.isCase());
174:       assertEquals((-1), node0.getCharno());
175:       assertFalse(node0.isDebugger());
176:       assertFalse(node0.isSwitch());
177:       assertFalse(node0.isTry());
178:       assertFalse(node0.isString());
179:       assertFalse(node0.isBreak());
180:       assertFalse(node0.isNull());
181:       assertFalse(node0.isComma());
182:       assertFalse(node0.isName());
183:       assertFalse(node0.isVar());
184:       assertFalse(node0.isParamList());
185:       assertFalse(node0.isStringKey());
186:       assertEquals(0, node0.getChildCount());
187:       assertFalse(node0.isCall());
188:       assertFalse(node0.isDefaultCase());
189:       assertFalse(node0.isDo());
190:       assertFalse(node0.isVoid());
191:       assertEquals((-598), node0.getType());
192:       assertFalse(node0.isTrue());
193:       assertFalse(node0.isOr());
194:       assertFalse(node0.isNew());
195:       assertFalse(node0.isAdd());
196:       assertFalse(node0.isEmpty());
197:       assertFalse(node0.hasChildren());
198:       assertFalse(node0.isNumber());
199:       assertFalse(node0.isTypeOf());
200:       assertFalse(node0.isLabelName());
201:       assertFalse(node0.isAssign());
202:       assertFalse(node0.isDec());
203:       assertEquals((-1), node0.getSourcePosition());
204:       assertFalse(node0.isAssignAdd());
205:       assertFalse(node0.isReturn());
206:       assertFalse(node0.isLabel());
207:       assertEquals((-1), node0.getLineno());
208:       assertFalse(node0.isContinue());
209:       assertFalse(node0.hasMoreThanOneChild());
210:       assertFalse(node0.isExprResult());
211:       assertFalse(node0.isGetElem());
212:       assertFalse(node0.isCast());
213:       assertFalse(node0.isWith());
214:       assertFalse(node0.isNot());
215:       assertFalse(node0.isAnd());
216:       assertFalse(node0.isBlock());
217:       assertFalse(node0.isWhile());
218:       assertFalse(node0.hasOneChild());
219:       assertFalse(node0.isObjectLit());
220:       assertFalse(node0.isGetProp());
221:       assertFalse(node0.isScript());
222:       assertFalse(node0.isThrow());
223:       assertFalse(node0.isThis());
224:       assertFalse(node0.isHook());
225:       assertFalse(node0.isFalse());
226:       assertFalse(node0.isCatch());
227:       assertFalse(node0.isInstanceOf());
228:       assertFalse(node0.isIn());
229:       assertFalse(node0.isInc());
230:       assertFalse(node0.isSetterDef());
231:       
232:       boolean boolean1 = node0.isNoSideEffectsCall();
233:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
234:       assertEquals(56, Node.CHANGE_TIME);
235:       assertEquals(47, Node.IS_DISPATCHER);
236:       assertEquals(29, Node.JSDOC_INFO_PROP);
237:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
238:       assertEquals(2, Node.POST_FLAG);
239:       assertEquals(46, Node.IS_NAMESPACE);
240:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
241:       assertEquals(37, Node.OPT_ARG_NAME);
242:       assertEquals(49, Node.DIRECT_EVAL);
243:       assertEquals(30, Node.VAR_ARGS_NAME);
244:       assertEquals(57, Node.LAST_PROP);
245:       assertEquals(15, Node.NO_SIDE_EFFECTS);
246:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
247:       assertEquals(55, Node.INFERRED_FUNCTION);
248:       assertEquals(36, Node.QUOTED_PROP);
249:       assertEquals(52, Node.LENGTH);
250:       assertEquals(53, Node.INPUT_ID);
251:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
252:       assertEquals(39, Node.EMPTY_BLOCK);
253:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
254:       assertEquals(40, Node.ORIGINALNAME_PROP);
255:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
256:       assertEquals(8, Node.FLAG_NO_THROWS);
257:       assertEquals(50, Node.FREE_CALL);
258:       assertEquals(57, Node.REFLECTED_OBJECT);
259:       assertEquals(54, Node.SLASH_V);
260:       assertEquals(48, Node.DIRECTIVES);
261:       assertEquals(43, Node.IS_CONSTANT_NAME);
262:       assertEquals(4095, Node.COLUMN_MASK);
263:       assertEquals(51, Node.STATIC_SOURCE_FILE);
264:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
265:       assertEquals(12, Node.COLUMN_BITS);
266:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
267:       assertEquals(1, Node.DECR_FLAG);
268:       assertEquals(32, Node.INCRDECR_PROP);
269:       assertTrue(boolean1 == boolean0);
270:       assertFalse(boolean1);
271:       assertFalse(node0.isDelProp());
272:       assertFalse(node0.isGetterDef());
273:       assertFalse(node0.isIf());
274:       assertFalse(node0.isFor());
275:       assertFalse(node0.isNE());
276:       assertFalse(node0.isArrayLit());
277:       assertFalse(node0.isFunction());
278:       assertFalse(node0.isRegExp());
279:       assertFalse(node0.isCase());
280:       assertEquals((-1), node0.getCharno());
281:       assertFalse(node0.isDebugger());
282:       assertFalse(node0.isSwitch());
283:       assertFalse(node0.isTry());
284:       assertFalse(node0.isString());
285:       assertFalse(node0.isBreak());
286:       assertFalse(node0.isNull());
287:       assertFalse(node0.isComma());
288:       assertFalse(node0.isName());
289:       assertFalse(node0.isVar());
290:       assertFalse(node0.isParamList());
291:       assertFalse(node0.isStringKey());
292:       assertEquals(0, node0.getChildCount());
293:       assertFalse(node0.isCall());
294:       assertFalse(node0.isDefaultCase());
295:       assertFalse(node0.isDo());
296:       assertFalse(node0.isVoid());
297:       assertEquals((-598), node0.getType());
298:       assertFalse(node0.isTrue());
299:       assertFalse(node0.isOr());
300:       assertFalse(node0.isNew());
301:       assertFalse(node0.isAdd());
302:       assertFalse(node0.isEmpty());
303:       assertFalse(node0.hasChildren());
304:       assertFalse(node0.isNumber());
305:       assertFalse(node0.isTypeOf());
306:       assertFalse(node0.isLabelName());
307:       assertFalse(node0.isAssign());
308:       assertFalse(node0.isDec());
309:       assertEquals((-1), node0.getSourcePosition());
310:       assertFalse(node0.isAssignAdd());
311:       assertFalse(node0.isReturn());
312:       assertFalse(node0.isLabel());
313:       assertEquals((-1), node0.getLineno());
314:       assertFalse(node0.isContinue());
315:       assertFalse(node0.hasMoreThanOneChild());
316:       assertFalse(node0.isExprResult());
317:       assertFalse(node0.isGetElem());
318:       assertFalse(node0.isCast());
319:       assertFalse(node0.isWith());
320:       assertFalse(node0.isNot());
321:       assertFalse(node0.isAnd());
322:       assertFalse(node0.isBlock());
323:       assertFalse(node0.isWhile());
324:       assertFalse(node0.hasOneChild());
325:       assertFalse(node0.isObjectLit());
326:       assertFalse(node0.isGetProp());
327:       assertFalse(node0.isScript());
328:       assertFalse(node0.isThrow());
329:       assertFalse(node0.isThis());
330:       assertFalse(node0.isHook());
331:       assertFalse(node0.isFalse());
332:       assertFalse(node0.isCatch());
333:       assertFalse(node0.isInstanceOf());
334:       assertFalse(node0.isIn());
335:       assertFalse(node0.isInc());
336:       assertFalse(node0.isSetterDef());
337:       
338:       int int0 = node0.getLineno();
339:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
340:       assertEquals(56, Node.CHANGE_TIME);
341:       assertEquals(47, Node.IS_DISPATCHER);
342:       assertEquals(29, Node.JSDOC_INFO_PROP);
343:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
344:       assertEquals(2, Node.POST_FLAG);
345:       assertEquals(46, Node.IS_NAMESPACE);
346:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
347:       assertEquals(37, Node.OPT_ARG_NAME);
348:       assertEquals(49, Node.DIRECT_EVAL);
349:       assertEquals(30, Node.VAR_ARGS_NAME);
350:       assertEquals(57, Node.LAST_PROP);
351:       assertEquals(15, Node.NO_SIDE_EFFECTS);
352:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
353:       assertEquals(55, Node.INFERRED_FUNCTION);
354:       assertEquals(36, Node.QUOTED_PROP);
355:       assertEquals(52, Node.LENGTH);
356:       assertEquals(53, Node.INPUT_ID);
357:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
358:       assertEquals(39, Node.EMPTY_BLOCK);
359:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
360:       assertEquals(40, Node.ORIGINALNAME_PROP);
361:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
362:       assertEquals(8, Node.FLAG_NO_THROWS);
363:       assertEquals(50, Node.FREE_CALL);
364:       assertEquals(57, Node.REFLECTED_OBJECT);
365:       assertEquals(54, Node.SLASH_V);
366:       assertEquals(48, Node.DIRECTIVES);
367:       assertEquals(43, Node.IS_CONSTANT_NAME);
368:       assertEquals(4095, Node.COLUMN_MASK);
369:       assertEquals(51, Node.STATIC_SOURCE_FILE);
370:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
371:       assertEquals(12, Node.COLUMN_BITS);
372:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
373:       assertEquals(1, Node.DECR_FLAG);
374:       assertEquals(32, Node.INCRDECR_PROP);
375:       assertEquals((-1), int0);
376:       assertFalse(node0.isDelProp());
377:       assertFalse(node0.isGetterDef());
378:       assertFalse(node0.isIf());
379:       assertFalse(node0.isFor());
380:       assertFalse(node0.isNE());
381:       assertFalse(node0.isArrayLit());
382:       assertFalse(node0.isFunction());
383:       assertFalse(node0.isRegExp());
384:       assertFalse(node0.isCase());
385:       assertEquals((-1), node0.getCharno());
386:       assertFalse(node0.isDebugger());
387:       assertFalse(node0.isSwitch());
388:       assertFalse(node0.isTry());
389:       assertFalse(node0.isString());
390:       assertFalse(node0.isBreak());
391:       assertFalse(node0.isNull());
392:       assertFalse(node0.isComma());
393:       assertFalse(node0.isName());
394:       assertFalse(node0.isVar());
395:       assertFalse(node0.isParamList());
396:       assertFalse(node0.isStringKey());
397:       assertEquals(0, node0.getChildCount());
398:       assertFalse(node0.isCall());
399:       assertFalse(node0.isDefaultCase());
400:       assertFalse(node0.isDo());
401:       assertFalse(node0.isVoid());
402:       assertEquals((-598), node0.getType());
403:       assertFalse(node0.isTrue());
404:       assertFalse(node0.isOr());
405:       assertFalse(node0.isNew());
406:       assertFalse(node0.isAdd());
407:       assertFalse(node0.isEmpty());
408:       assertFalse(node0.hasChildren());
409:       assertFalse(node0.isNumber());
410:       assertFalse(node0.isTypeOf());
411:       assertFalse(node0.isLabelName());
412:       assertFalse(node0.isAssign());
413:       assertFalse(node0.isDec());
414:       assertEquals((-1), node0.getSourcePosition());
415:       assertFalse(node0.isAssignAdd());
416:       assertFalse(node0.isReturn());
417:       assertFalse(node0.isLabel());
418:       assertEquals((-1), node0.getLineno());
419:       assertFalse(node0.isContinue());
420:       assertFalse(node0.hasMoreThanOneChild());
421:       assertFalse(node0.isExprResult());
422:       assertFalse(node0.isGetElem());
423:       assertFalse(node0.isCast());
424:       assertFalse(node0.isWith());
425:       assertFalse(node0.isNot());
426:       assertFalse(node0.isAnd());
427:       assertFalse(node0.isBlock());
428:       assertFalse(node0.isWhile());
429:       assertFalse(node0.hasOneChild());
430:       assertFalse(node0.isObjectLit());
431:       assertFalse(node0.isGetProp());
432:       assertFalse(node0.isScript());
433:       assertFalse(node0.isThrow());
434:       assertFalse(node0.isThis());
435:       assertFalse(node0.isHook());
436:       assertFalse(node0.isFalse());
437:       assertFalse(node0.isCatch());
438:       assertFalse(node0.isInstanceOf());
439:       assertFalse(node0.isIn());
440:       assertFalse(node0.isInc());
441:       assertFalse(node0.isSetterDef());
442:       
443:       Iterable<Node> iterable0 = node0.children();
444:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
445:       assertEquals(56, Node.CHANGE_TIME);
446:       assertEquals(47, Node.IS_DISPATCHER);
447:       assertEquals(29, Node.JSDOC_INFO_PROP);
448:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
449:       assertEquals(2, Node.POST_FLAG);
450:       assertEquals(46, Node.IS_NAMESPACE);
451:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
452:       assertEquals(37, Node.OPT_ARG_NAME);
453:       assertEquals(49, Node.DIRECT_EVAL);
454:       assertEquals(30, Node.VAR_ARGS_NAME);
455:       assertEquals(57, Node.LAST_PROP);
456:       assertEquals(15, Node.NO_SIDE_EFFECTS);
457:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
458:       assertEquals(55, Node.INFERRED_FUNCTION);
459:       assertEquals(36, Node.QUOTED_PROP);
460:       assertEquals(52, Node.LENGTH);
461:       assertEquals(53, Node.INPUT_ID);
462:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
463:       assertEquals(39, Node.EMPTY_BLOCK);
464:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
465:       assertEquals(40, Node.ORIGINALNAME_PROP);
466:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
467:       assertEquals(8, Node.FLAG_NO_THROWS);
468:       assertEquals(50, Node.FREE_CALL);
469:       assertEquals(57, Node.REFLECTED_OBJECT);
470:       assertEquals(54, Node.SLASH_V);
471:       assertEquals(48, Node.DIRECTIVES);
472:       assertEquals(43, Node.IS_CONSTANT_NAME);
473:       assertEquals(4095, Node.COLUMN_MASK);
474:       assertEquals(51, Node.STATIC_SOURCE_FILE);
475:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
476:       assertEquals(12, Node.COLUMN_BITS);
477:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
478:       assertEquals(1, Node.DECR_FLAG);
479:       assertEquals(32, Node.INCRDECR_PROP);
480:       assertNotNull(iterable0);
481:       assertFalse(node0.isDelProp());
482:       assertFalse(node0.isGetterDef());
483:       assertFalse(node0.isIf());
484:       assertFalse(node0.isFor());
485:       assertFalse(node0.isNE());
486:       assertFalse(node0.isArrayLit());
487:       assertFalse(node0.isFunction());
488:       assertFalse(node0.isRegExp());
489:       assertFalse(node0.isCase());
490:       assertEquals((-1), node0.getCharno());
491:       assertFalse(node0.isDebugger());
492:       assertFalse(node0.isSwitch());
493:       assertFalse(node0.isTry());
494:       assertFalse(node0.isString());
495:       assertFalse(node0.isBreak());
496:       assertFalse(node0.isNull());
497:       assertFalse(node0.isComma());
498:       assertFalse(node0.isName());
499:       assertFalse(node0.isVar());
500:       assertFalse(node0.isParamList());
501:       assertFalse(node0.isStringKey());
502:       assertEquals(0, node0.getChildCount());
503:       assertFalse(node0.isCall());
504:       assertFalse(node0.isDefaultCase());
505:       assertFalse(node0.isDo());
506:       assertFalse(node0.isVoid());
507:       assertEquals((-598), node0.getType());
508:       assertFalse(node0.isTrue());
509:       assertFalse(node0.isOr());
510:       assertFalse(node0.isNew());
511:       assertFalse(node0.isAdd());
512:       assertFalse(node0.isEmpty());
513:       assertFalse(node0.hasChildren());
514:       assertFalse(node0.isNumber());
515:       assertFalse(node0.isTypeOf());
516:       assertFalse(node0.isLabelName());
517:       assertFalse(node0.isAssign());
518:       assertFalse(node0.isDec());
519:       assertEquals((-1), node0.getSourcePosition());
520:       assertFalse(node0.isAssignAdd());
521:       assertFalse(node0.isReturn());
522:       assertFalse(node0.isLabel());
523:       assertEquals((-1), node0.getLineno());
524:       assertFalse(node0.isContinue());
525:       assertFalse(node0.hasMoreThanOneChild());
526:       assertFalse(node0.isExprResult());
527:       assertFalse(node0.isGetElem());
528:       assertFalse(node0.isCast());
529:       assertFalse(node0.isWith());
530:       assertFalse(node0.isNot());
531:       assertFalse(node0.isAnd());
532:       assertFalse(node0.isBlock());
533:       assertFalse(node0.isWhile());
534:       assertFalse(node0.hasOneChild());
535:       assertFalse(node0.isObjectLit());
536:       assertFalse(node0.isGetProp());
537:       assertFalse(node0.isScript());
538:       assertFalse(node0.isThrow());
539:       assertFalse(node0.isThis());
540:       assertFalse(node0.isHook());
541:       assertFalse(node0.isFalse());
542:       assertFalse(node0.isCatch());
543:       assertFalse(node0.isInstanceOf());
544:       assertFalse(node0.isIn());
545:       assertFalse(node0.isInc());
546:       assertFalse(node0.isSetterDef());
547:       assertFalse(iterable0.contains(node0));
548:       
549:       boolean boolean2 = node0.isOptionalArg();
550:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
551:       assertEquals(56, Node.CHANGE_TIME);
552:       assertEquals(47, Node.IS_DISPATCHER);
553:       assertEquals(29, Node.JSDOC_INFO_PROP);
554:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
555:       assertEquals(2, Node.POST_FLAG);
556:       assertEquals(46, Node.IS_NAMESPACE);
557:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
558:       assertEquals(37, Node.OPT_ARG_NAME);
559:       assertEquals(49, Node.DIRECT_EVAL);
560:       assertEquals(30, Node.VAR_ARGS_NAME);
561:       assertEquals(57, Node.LAST_PROP);
562:       assertEquals(15, Node.NO_SIDE_EFFECTS);
563:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
564:       assertEquals(55, Node.INFERRED_FUNCTION);
565:       assertEquals(36, Node.QUOTED_PROP);
566:       assertEquals(52, Node.LENGTH);
567:       assertEquals(53, Node.INPUT_ID);
568:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
569:       assertEquals(39, Node.EMPTY_BLOCK);
570:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
571:       assertEquals(40, Node.ORIGINALNAME_PROP);
572:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
573:       assertEquals(8, Node.FLAG_NO_THROWS);
574:       assertEquals(50, Node.FREE_CALL);
575:       assertEquals(57, Node.REFLECTED_OBJECT);
576:       assertEquals(54, Node.SLASH_V);
577:       assertEquals(48, Node.DIRECTIVES);
578:       assertEquals(43, Node.IS_CONSTANT_NAME);
579:       assertEquals(4095, Node.COLUMN_MASK);
580:       assertEquals(51, Node.STATIC_SOURCE_FILE);
581:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
582:       assertEquals(12, Node.COLUMN_BITS);
583:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
584:       assertEquals(1, Node.DECR_FLAG);
585:       assertEquals(32, Node.INCRDECR_PROP);
586:       assertTrue(boolean2 == boolean0);
587:       assertTrue(boolean2 == boolean1);
588:       assertFalse(boolean2);
589:       assertFalse(node0.isDelProp());
590:       assertFalse(node0.isGetterDef());
591:       assertFalse(node0.isIf());
592:       assertFalse(node0.isFor());
593:       assertFalse(node0.isNE());
594:       assertFalse(node0.isArrayLit());
595:       assertFalse(node0.isFunction());
596:       assertFalse(node0.isRegExp());
597:       assertFalse(node0.isCase());
598:       assertEquals((-1), node0.getCharno());
599:       assertFalse(node0.isDebugger());
600:       assertFalse(node0.isSwitch());
601:       assertFalse(node0.isTry());
602:       assertFalse(node0.isString());
603:       assertFalse(node0.isBreak());
604:       assertFalse(node0.isNull());
605:       assertFalse(node0.isComma());
606:       assertFalse(node0.isName());
607:       assertFalse(node0.isVar());
608:       assertFalse(node0.isParamList());
609:       assertFalse(node0.isStringKey());
610:       assertEquals(0, node0.getChildCount());
611:       assertFalse(node0.isCall());
612:       assertFalse(node0.isDefaultCase());
613:       assertFalse(node0.isDo());
614:       assertFalse(node0.isVoid());
615:       assertEquals((-598), node0.getType());
616:       assertFalse(node0.isTrue());
617:       assertFalse(node0.isOr());
618:       assertFalse(node0.isNew());
619:       assertFalse(node0.isAdd());
620:       assertFalse(node0.isEmpty());
621:       assertFalse(node0.hasChildren());
622:       assertFalse(node0.isNumber());
623:       assertFalse(node0.isTypeOf());
624:       assertFalse(node0.isLabelName());
625:       assertFalse(node0.isAssign());
626:       assertFalse(node0.isDec());
627:       assertEquals((-1), node0.getSourcePosition());
628:       assertFalse(node0.isAssignAdd());
629:       assertFalse(node0.isReturn());
630:       assertFalse(node0.isLabel());
631:       assertEquals((-1), node0.getLineno());
632:       assertFalse(node0.isContinue());
633:       assertFalse(node0.hasMoreThanOneChild());
634:       assertFalse(node0.isExprResult());
635:       assertFalse(node0.isGetElem());
636:       assertFalse(node0.isCast());
637:       assertFalse(node0.isWith());
638:       assertFalse(node0.isNot());
639:       assertFalse(node0.isAnd());
640:       assertFalse(node0.isBlock());
641:       assertFalse(node0.isWhile());
642:       assertFalse(node0.hasOneChild());
643:       assertFalse(node0.isObjectLit());
644:       assertFalse(node0.isGetProp());
645:       assertFalse(node0.isScript());
646:       assertFalse(node0.isThrow());
647:       assertFalse(node0.isThis());
648:       assertFalse(node0.isHook());
649:       assertFalse(node0.isFalse());
650:       assertFalse(node0.isCatch());
651:       assertFalse(node0.isInstanceOf());
652:       assertFalse(node0.isIn());
653:       assertFalse(node0.isInc());
654:       assertFalse(node0.isSetterDef());
655:       
656:       String string0 = node0.getQualifiedName();
657:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
658:       assertEquals(56, Node.CHANGE_TIME);
659:       assertEquals(47, Node.IS_DISPATCHER);
660:       assertEquals(29, Node.JSDOC_INFO_PROP);
661:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
662:       assertEquals(2, Node.POST_FLAG);
663:       assertEquals(46, Node.IS_NAMESPACE);
664:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
665:       assertEquals(37, Node.OPT_ARG_NAME);
666:       assertEquals(49, Node.DIRECT_EVAL);
667:       assertEquals(30, Node.VAR_ARGS_NAME);
668:       assertEquals(57, Node.LAST_PROP);
669:       assertEquals(15, Node.NO_SIDE_EFFECTS);
670:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
671:       assertEquals(55, Node.INFERRED_FUNCTION);
672:       assertEquals(36, Node.QUOTED_PROP);
673:       assertEquals(52, Node.LENGTH);
674:       assertEquals(53, Node.INPUT_ID);
675:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
676:       assertEquals(39, Node.EMPTY_BLOCK);
677:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
678:       assertEquals(40, Node.ORIGINALNAME_PROP);
679:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
680:       assertEquals(8, Node.FLAG_NO_THROWS);
681:       assertEquals(50, Node.FREE_CALL);
682:       assertEquals(57, Node.REFLECTED_OBJECT);
683:       assertEquals(54, Node.SLASH_V);
684:       assertEquals(48, Node.DIRECTIVES);
685:       assertEquals(43, Node.IS_CONSTANT_NAME);
686:       assertEquals(4095, Node.COLUMN_MASK);
687:       assertEquals(51, Node.STATIC_SOURCE_FILE);
688:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
689:       assertEquals(12, Node.COLUMN_BITS);
690:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
691:       assertEquals(1, Node.DECR_FLAG);
692:       assertEquals(32, Node.INCRDECR_PROP);
693:       assertNull(string0);
694:       assertFalse(node0.isDelProp());
695:       assertFalse(node0.isGetterDef());
696:       assertFalse(node0.isIf());
697:       assertFalse(node0.isFor());
698:       assertFalse(node0.isNE());
699:       assertFalse(node0.isArrayLit());
700:       assertFalse(node0.isFunction());
701:       assertFalse(node0.isRegExp());
702:       assertFalse(node0.isCase());
703:       assertEquals((-1), node0.getCharno());
704:       assertFalse(node0.isDebugger());
705:       assertFalse(node0.isSwitch());
706:       assertFalse(node0.isTry());
707:       assertFalse(node0.isString());
708:       assertFalse(node0.isBreak());
709:       assertFalse(node0.isNull());
710:       assertFalse(node0.isComma());
711:       assertFalse(node0.isName());
712:       assertFalse(node0.isVar());
713:       assertFalse(node0.isParamList());
714:       assertFalse(node0.isStringKey());
715:       assertEquals(0, node0.getChildCount());
716:       assertFalse(node0.isCall());
717:       assertFalse(node0.isDefaultCase());
718:       assertFalse(node0.isDo());
719:       assertFalse(node0.isVoid());
720:       assertEquals((-598), node0.getType());
721:       assertFalse(node0.isTrue());
722:       assertFalse(node0.isOr());
723:       assertFalse(node0.isNew());
724:       assertFalse(node0.isAdd());
725:       assertFalse(node0.isEmpty());
726:       assertFalse(node0.hasChildren());
727:       assertFalse(node0.isNumber());
728:       assertFalse(node0.isTypeOf());
729:       assertFalse(node0.isLabelName());
730:       assertFalse(node0.isAssign());
731:       assertFalse(node0.isDec());
732:       assertEquals((-1), node0.getSourcePosition());
733:       assertFalse(node0.isAssignAdd());
734:       assertFalse(node0.isReturn());
735:       assertFalse(node0.isLabel());
736:       assertEquals((-1), node0.getLineno());
737:       assertFalse(node0.isContinue());
738:       assertFalse(node0.hasMoreThanOneChild());
739:       assertFalse(node0.isExprResult());
740:       assertFalse(node0.isGetElem());
741:       assertFalse(node0.isCast());
742:       assertFalse(node0.isWith());
743:       assertFalse(node0.isNot());
744:       assertFalse(node0.isAnd());
745:       assertFalse(node0.isBlock());
746:       assertFalse(node0.isWhile());
747:       assertFalse(node0.hasOneChild());
748:       assertFalse(node0.isObjectLit());
749:       assertFalse(node0.isGetProp());
750:       assertFalse(node0.isScript());
751:       assertFalse(node0.isThrow());
752:       assertFalse(node0.isThis());
753:       assertFalse(node0.isHook());
754:       assertFalse(node0.isFalse());
755:       assertFalse(node0.isCatch());
756:       assertFalse(node0.isInstanceOf());
757:       assertFalse(node0.isIn());
758:       assertFalse(node0.isInc());
759:       assertFalse(node0.isSetterDef());
760:       
761:       int int1 = node0.getIntProp((-239));
762:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
763:       assertEquals(56, Node.CHANGE_TIME);
764:       assertEquals(47, Node.IS_DISPATCHER);
765:       assertEquals(29, Node.JSDOC_INFO_PROP);
766:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
767:       assertEquals(2, Node.POST_FLAG);
768:       assertEquals(46, Node.IS_NAMESPACE);
769:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
770:       assertEquals(37, Node.OPT_ARG_NAME);
771:       assertEquals(49, Node.DIRECT_EVAL);
772:       assertEquals(30, Node.VAR_ARGS_NAME);
773:       assertEquals(57, Node.LAST_PROP);
774:       assertEquals(15, Node.NO_SIDE_EFFECTS);
775:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
776:       assertEquals(55, Node.INFERRED_FUNCTION);
777:       assertEquals(36, Node.QUOTED_PROP);
778:       assertEquals(52, Node.LENGTH);
779:       assertEquals(53, Node.INPUT_ID);
780:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
781:       assertEquals(39, Node.EMPTY_BLOCK);
782:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
783:       assertEquals(40, Node.ORIGINALNAME_PROP);
784:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
785:       assertEquals(8, Node.FLAG_NO_THROWS);
786:       assertEquals(50, Node.FREE_CALL);
787:       assertEquals(57, Node.REFLECTED_OBJECT);
788:       assertEquals(54, Node.SLASH_V);
789:       assertEquals(48, Node.DIRECTIVES);
790:       assertEquals(43, Node.IS_CONSTANT_NAME);
791:       assertEquals(4095, Node.COLUMN_MASK);
792:       assertEquals(51, Node.STATIC_SOURCE_FILE);
793:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
794:       assertEquals(12, Node.COLUMN_BITS);
795:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
796:       assertEquals(1, Node.DECR_FLAG);
797:       assertEquals(32, Node.INCRDECR_PROP);
798:       assertFalse(int1 == int0);
799:       assertEquals(0, int1);
800:       assertFalse(node0.isDelProp());
801:       assertFalse(node0.isGetterDef());
802:       assertFalse(node0.isIf());
803:       assertFalse(node0.isFor());
804:       assertFalse(node0.isNE());
805:       assertFalse(node0.isArrayLit());
806:       assertFalse(node0.isFunction());
807:       assertFalse(node0.isRegExp());
808:       assertFalse(node0.isCase());
809:       assertEquals((-1), node0.getCharno());
810:       assertFalse(node0.isDebugger());
811:       assertFalse(node0.isSwitch());
812:       assertFalse(node0.isTry());
813:       assertFalse(node0.isString());
814:       assertFalse(node0.isBreak());
815:       assertFalse(node0.isNull());
816:       assertFalse(node0.isComma());
817:       assertFalse(node0.isName());
818:       assertFalse(node0.isVar());
819:       assertFalse(node0.isParamList());
820:       assertFalse(node0.isStringKey());
821:       assertEquals(0, node0.getChildCount());
822:       assertFalse(node0.isCall());
823:       assertFalse(node0.isDefaultCase());
824:       assertFalse(node0.isDo());
825:       assertFalse(node0.isVoid());
826:       assertEquals((-598), node0.getType());
827:       assertFalse(node0.isTrue());
828:       assertFalse(node0.isOr());
829:       assertFalse(node0.isNew());
830:       assertFalse(node0.isAdd());
831:       assertFalse(node0.isEmpty());
832:       assertFalse(node0.hasChildren());
833:       assertFalse(node0.isNumber());
834:       assertFalse(node0.isTypeOf());
835:       assertFalse(node0.isLabelName());
836:       assertFalse(node0.isAssign());
837:       assertFalse(node0.isDec());
838:       assertEquals((-1), node0.getSourcePosition());
839:       assertFalse(node0.isAssignAdd());
840:       assertFalse(node0.isReturn());
841:       assertFalse(node0.isLabel());
842:       assertEquals((-1), node0.getLineno());
843:       assertFalse(node0.isContinue());
844:       assertFalse(node0.hasMoreThanOneChild());
845:       assertFalse(node0.isExprResult());
846:       assertFalse(node0.isGetElem());
847:       assertFalse(node0.isCast());
848:       assertFalse(node0.isWith());
849:       assertFalse(node0.isNot());
850:       assertFalse(node0.isAnd());
851:       assertFalse(node0.isBlock());
852:       assertFalse(node0.isWhile());
853:       assertFalse(node0.hasOneChild());
854:       assertFalse(node0.isObjectLit());
855:       assertFalse(node0.isGetProp());
856:       assertFalse(node0.isScript());
857:       assertFalse(node0.isThrow());
858:       assertFalse(node0.isThis());
859:       assertFalse(node0.isHook());
860:       assertFalse(node0.isFalse());
861:       assertFalse(node0.isCatch());
862:       assertFalse(node0.isInstanceOf());
863:       assertFalse(node0.isIn());
864:       assertFalse(node0.isInc());
865:       assertFalse(node0.isSetterDef());
866:       
867:       JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
868:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
869:       assertEquals(56, Node.CHANGE_TIME);
870:       assertEquals(47, Node.IS_DISPATCHER);
871:       assertEquals(29, Node.JSDOC_INFO_PROP);
872:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
873:       assertEquals(2, Node.POST_FLAG);
874:       assertEquals(46, Node.IS_NAMESPACE);
875:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
876:       assertEquals(37, Node.OPT_ARG_NAME);
877:       assertEquals(49, Node.DIRECT_EVAL);
878:       assertEquals(30, Node.VAR_ARGS_NAME);
879:       assertEquals(57, Node.LAST_PROP);
880:       assertEquals(15, Node.NO_SIDE_EFFECTS);
881:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
882:       assertEquals(55, Node.INFERRED_FUNCTION);
883:       assertEquals(36, Node.QUOTED_PROP);
884:       assertEquals(52, Node.LENGTH);
885:       assertEquals(53, Node.INPUT_ID);
886:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
887:       assertEquals(39, Node.EMPTY_BLOCK);
888:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
889:       assertEquals(40, Node.ORIGINALNAME_PROP);
890:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
891:       assertEquals(8, Node.FLAG_NO_THROWS);
892:       assertEquals(50, Node.FREE_CALL);
893:       assertEquals(57, Node.REFLECTED_OBJECT);
894:       assertEquals(54, Node.SLASH_V);
895:       assertEquals(48, Node.DIRECTIVES);
896:       assertEquals(43, Node.IS_CONSTANT_NAME);
897:       assertEquals(4095, Node.COLUMN_MASK);
898:       assertEquals(51, Node.STATIC_SOURCE_FILE);
899:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
900:       assertEquals(12, Node.COLUMN_BITS);
901:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
902:       assertEquals(1, Node.DECR_FLAG);
903:       assertEquals(32, Node.INCRDECR_PROP);
904:       assertNull(jSDocInfo0);
905:       assertFalse(node0.isDelProp());
906:       assertFalse(node0.isGetterDef());
907:       assertFalse(node0.isIf());
908:       assertFalse(node0.isFor());
909:       assertFalse(node0.isNE());
910:       assertFalse(node0.isArrayLit());
911:       assertFalse(node0.isFunction());
912:       assertFalse(node0.isRegExp());
913:       assertFalse(node0.isCase());
914:       assertEquals((-1), node0.getCharno());
915:       assertFalse(node0.isDebugger());
916:       assertFalse(node0.isSwitch());
917:       assertFalse(node0.isTry());
918:       assertFalse(node0.isString());
919:       assertFalse(node0.isBreak());
920:       assertFalse(node0.isNull());
921:       assertFalse(node0.isComma());
922:       assertFalse(node0.isName());
923:       assertFalse(node0.isVar());
924:       assertFalse(node0.isParamList());
925:       assertFalse(node0.isStringKey());
926:       assertEquals(0, node0.getChildCount());
927:       assertFalse(node0.isCall());
928:       assertFalse(node0.isDefaultCase());
929:       assertFalse(node0.isDo());
930:       assertFalse(node0.isVoid());
931:       assertEquals((-598), node0.getType());
932:       assertFalse(node0.isTrue());
933:       assertFalse(node0.isOr());
934:       assertFalse(node0.isNew());
935:       assertFalse(node0.isAdd());
936:       assertFalse(node0.isEmpty());
937:       assertFalse(node0.hasChildren());
938:       assertFalse(node0.isNumber());
939:       assertFalse(node0.isTypeOf());
940:       assertFalse(node0.isLabelName());
941:       assertFalse(node0.isAssign());
942:       assertFalse(node0.isDec());
943:       assertEquals((-1), node0.getSourcePosition());
944:       assertFalse(node0.isAssignAdd());
945:       assertFalse(node0.isReturn());
946:       assertFalse(node0.isLabel());
947:       assertEquals((-1), node0.getLineno());
948:       assertFalse(node0.isContinue());
949:       assertFalse(node0.hasMoreThanOneChild());
950:       assertFalse(node0.isExprResult());
951:       assertFalse(node0.isGetElem());
952:       assertFalse(node0.isCast());
953:       assertFalse(node0.isWith());
954:       assertFalse(node0.isNot());
955:       assertFalse(node0.isAnd());
956:       assertFalse(node0.isBlock());
957:       assertFalse(node0.isWhile());
958:       assertFalse(node0.hasOneChild());
959:       assertFalse(node0.isObjectLit());
960:       assertFalse(node0.isGetProp());
961:       assertFalse(node0.isScript());
962:       assertFalse(node0.isThrow());
963:       assertFalse(node0.isThis());
964:       assertFalse(node0.isHook());
965:       assertFalse(node0.isFalse());
966:       assertFalse(node0.isCatch());
967:       assertFalse(node0.isInstanceOf());
968:       assertFalse(node0.isIn());
969:       assertFalse(node0.isInc());
970:       assertFalse(node0.isSetterDef());
971:       
972:       Node node1 = new Node(1, node0, (-3028), 2);
973:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
974:       assertEquals(56, Node.CHANGE_TIME);
975:       assertEquals(47, Node.IS_DISPATCHER);
976:       assertEquals(29, Node.JSDOC_INFO_PROP);
977:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
978:       assertEquals(2, Node.POST_FLAG);
979:       assertEquals(46, Node.IS_NAMESPACE);
980:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
981:       assertEquals(37, Node.OPT_ARG_NAME);
982:       assertEquals(49, Node.DIRECT_EVAL);
983:       assertEquals(30, Node.VAR_ARGS_NAME);
984:       assertEquals(57, Node.LAST_PROP);
985:       assertEquals(15, Node.NO_SIDE_EFFECTS);
986:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
987:       assertEquals(55, Node.INFERRED_FUNCTION);
988:       assertEquals(36, Node.QUOTED_PROP);
989:       assertEquals(52, Node.LENGTH);
990:       assertEquals(53, Node.INPUT_ID);
991:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
992:       assertEquals(39, Node.EMPTY_BLOCK);
993:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
994:       assertEquals(40, Node.ORIGINALNAME_PROP);
995:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
996:       assertEquals(8, Node.FLAG_NO_THROWS);
997:       assertEquals(50, Node.FREE_CALL);
998:       assertEquals(57, Node.REFLECTED_OBJECT);
999:       assertEquals(54, Node.SLASH_V);
1000:       assertEquals(48, Node.DIRECTIVES);
1001:       assertEquals(43, Node.IS_CONSTANT_NAME);
1002:       assertEquals(4095, Node.COLUMN_MASK);
1003:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1004:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1005:       assertEquals(12, Node.COLUMN_BITS);
1006:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1007:       assertEquals(1, Node.DECR_FLAG);
1008:       assertEquals(32, Node.INCRDECR_PROP);
1009:       assertEquals(52, Node.LENGTH);
1010:       assertEquals(54, Node.SLASH_V);
1011:       assertEquals(57, Node.REFLECTED_OBJECT);
1012:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1013:       assertEquals(30, Node.VAR_ARGS_NAME);
1014:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1015:       assertEquals(49, Node.DIRECT_EVAL);
1016:       assertEquals(40, Node.ORIGINALNAME_PROP);
1017:       assertEquals(48, Node.DIRECTIVES);
1018:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1019:       assertEquals(8, Node.FLAG_NO_THROWS);
1020:       assertEquals(2, Node.POST_FLAG);
1021:       assertEquals(47, Node.IS_DISPATCHER);
1022:       assertEquals(29, Node.JSDOC_INFO_PROP);
1023:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1024:       assertEquals(57, Node.LAST_PROP);
1025:       assertEquals(39, Node.EMPTY_BLOCK);
1026:       assertEquals(55, Node.INFERRED_FUNCTION);
1027:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1028:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1029:       assertEquals(53, Node.INPUT_ID);
1030:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1031:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1032:       assertEquals(36, Node.QUOTED_PROP);
1033:       assertEquals(43, Node.IS_CONSTANT_NAME);
1034:       assertEquals(56, Node.CHANGE_TIME);
1035:       assertEquals(37, Node.OPT_ARG_NAME);
1036:       assertEquals(32, Node.INCRDECR_PROP);
1037:       assertEquals(46, Node.IS_NAMESPACE);
1038:       assertEquals(4095, Node.COLUMN_MASK);
1039:       assertEquals(12, Node.COLUMN_BITS);
1040:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1041:       assertEquals(50, Node.FREE_CALL);
1042:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1043:       assertEquals(1, Node.DECR_FLAG);
1044:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1045:       assertFalse(node1.equals((Object)node0));
1046:       assertNotNull(node1);
1047:       assertFalse(node0.isDelProp());
1048:       assertFalse(node0.isGetterDef());
1049:       assertFalse(node0.isIf());
1050:       assertFalse(node0.isFor());
1051:       assertFalse(node0.isNE());
1052:       assertFalse(node0.isArrayLit());
1053:       assertFalse(node0.isFunction());
1054:       assertFalse(node0.isRegExp());
1055:       assertFalse(node0.isCase());
1056:       assertEquals((-1), node0.getCharno());
1057:       assertFalse(node0.isDebugger());
1058:       assertFalse(node0.isSwitch());
1059:       assertFalse(node0.isTry());
1060:       assertFalse(node0.isString());
1061:       assertFalse(node0.isBreak());
1062:       assertFalse(node0.isNull());
1063:       assertFalse(node0.isComma());
1064:       assertFalse(node0.isName());
1065:       assertFalse(node0.isVar());
1066:       assertFalse(node0.isParamList());
1067:       assertFalse(node0.isStringKey());
1068:       assertEquals(0, node0.getChildCount());
1069:       assertFalse(node0.isCall());
1070:       assertFalse(node0.isDefaultCase());
1071:       assertFalse(node0.isDo());
1072:       assertFalse(node0.isVoid());
1073:       assertEquals((-598), node0.getType());
1074:       assertFalse(node0.isTrue());
1075:       assertFalse(node0.isOr());
1076:       assertFalse(node0.isNew());
1077:       assertFalse(node0.isAdd());
1078:       assertFalse(node0.isEmpty());
1079:       assertFalse(node0.hasChildren());
1080:       assertFalse(node0.isNumber());
1081:       assertFalse(node0.isTypeOf());
1082:       assertFalse(node0.isLabelName());
1083:       assertFalse(node0.isAssign());
1084:       assertFalse(node0.isDec());
1085:       assertEquals((-1), node0.getSourcePosition());
1086:       assertFalse(node0.isAssignAdd());
1087:       assertFalse(node0.isReturn());
1088:       assertFalse(node0.isLabel());
1089:       assertEquals((-1), node0.getLineno());
1090:       assertFalse(node0.isContinue());
1091:       assertFalse(node0.hasMoreThanOneChild());
1092:       assertFalse(node0.isExprResult());
1093:       assertFalse(node0.isGetElem());
1094:       assertFalse(node0.isCast());
1095:       assertFalse(node0.isWith());
1096:       assertFalse(node0.isNot());
1097:       assertFalse(node0.isAnd());
1098:       assertFalse(node0.isBlock());
1099:       assertFalse(node0.isWhile());
1100:       assertFalse(node0.hasOneChild());
1101:       assertFalse(node0.isObjectLit());
1102:       assertFalse(node0.isGetProp());
1103:       assertFalse(node0.isScript());
1104:       assertFalse(node0.isThrow());
1105:       assertFalse(node0.isThis());
1106:       assertFalse(node0.isHook());
1107:       assertFalse(node0.isFalse());
1108:       assertFalse(node0.isCatch());
1109:       assertFalse(node0.isInstanceOf());
1110:       assertFalse(node0.isIn());
1111:       assertFalse(node0.isInc());
1112:       assertFalse(node0.isSetterDef());
1113:       assertFalse(node1.isVar());
1114:       assertFalse(node1.isAdd());
1115:       assertFalse(node1.isBlock());
1116:       assertFalse(node1.isCall());
1117:       assertFalse(node1.isNew());
1118:       assertFalse(node1.isStringKey());
1119:       assertFalse(node1.isName());
1120:       assertFalse(node1.isWhile());
1121:       assertFalse(node1.isContinue());
1122:       assertFalse(node1.hasMoreThanOneChild());
1123:       assertFalse(node1.isReturn());
1124:       assertFalse(node1.isParamList());
1125:       assertEquals((-1), node1.getSourcePosition());
1126:       assertFalse(node1.isDebugger());
1127:       assertFalse(node1.isNumber());
1128:       assertFalse(node1.isArrayLit());
1129:       assertFalse(node1.isVoid());
1130:       assertFalse(node1.isLabelName());
1131:       assertFalse(node1.isDelProp());
1132:       assertFalse(node1.isDefaultCase());
1133:       assertFalse(node1.isDec());
1134:       assertFalse(node1.isExprResult());
1135:       assertFalse(node1.isGetElem());
1136:       assertTrue(node1.hasOneChild());
1137:       assertEquals(1, node1.getType());
1138:       assertFalse(node1.isAssign());
1139:       assertFalse(node1.isTypeOf());
1140:       assertFalse(node1.isLabel());
1141:       assertFalse(node1.isDo());
1142:       assertFalse(node1.isAssignAdd());
1143:       assertFalse(node1.isEmpty());
1144:       assertFalse(node1.isNull());
1145:       assertFalse(node1.isTrue());
1146:       assertFalse(node1.isOr());
1147:       assertFalse(node1.isHook());
1148:       assertFalse(node1.isThrow());
1149:       assertFalse(node1.isSwitch());
1150:       assertFalse(node1.isBreak());
1151:       assertFalse(node1.isThis());
1152:       assertFalse(node1.isComma());
1153:       assertFalse(node1.isFalse());
1154:       assertEquals(1, node1.getChildCount());
1155:       assertFalse(node1.isGetProp());
1156:       assertFalse(node1.isCase());
1157:       assertFalse(node1.isAnd());
1158:       assertFalse(node1.isGetterDef());
1159:       assertFalse(node1.isString());
1160:       assertFalse(node1.isScript());
1161:       assertEquals((-1), node1.getCharno());
1162:       assertFalse(node1.isNot());
1163:       assertFalse(node1.isObjectLit());
1164:       assertFalse(node1.isCast());
1165:       assertFalse(node1.isTry());
1166:       assertFalse(node1.isFor());
1167:       assertFalse(node1.isWith());
1168:       assertFalse(node1.isRegExp());
1169:       assertFalse(node1.isFunction());
1170:       assertFalse(node1.isIn());
1171:       assertEquals((-1), node1.getLineno());
1172:       assertFalse(node1.isInstanceOf());
1173:       assertTrue(node1.hasChildren());
1174:       assertFalse(node1.isCatch());
1175:       assertFalse(node1.isIf());
1176:       assertFalse(node1.isNE());
1177:       assertFalse(node1.isInc());
1178:       assertFalse(node1.isSetterDef());
1179:       
1180:       Node node2 = node0.useSourceInfoFromForTree(node1);
1181:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1182:       assertEquals(56, Node.CHANGE_TIME);
1183:       assertEquals(47, Node.IS_DISPATCHER);
1184:       assertEquals(29, Node.JSDOC_INFO_PROP);
1185:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1186:       assertEquals(2, Node.POST_FLAG);
1187:       assertEquals(46, Node.IS_NAMESPACE);
1188:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1189:       assertEquals(37, Node.OPT_ARG_NAME);
1190:       assertEquals(49, Node.DIRECT_EVAL);
1191:       assertEquals(30, Node.VAR_ARGS_NAME);
1192:       assertEquals(57, Node.LAST_PROP);
1193:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1194:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1195:       assertEquals(55, Node.INFERRED_FUNCTION);
1196:       assertEquals(36, Node.QUOTED_PROP);
1197:       assertEquals(52, Node.LENGTH);
1198:       assertEquals(53, Node.INPUT_ID);
1199:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1200:       assertEquals(39, Node.EMPTY_BLOCK);
1201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1202:       assertEquals(40, Node.ORIGINALNAME_PROP);
1203:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1204:       assertEquals(8, Node.FLAG_NO_THROWS);
1205:       assertEquals(50, Node.FREE_CALL);
1206:       assertEquals(57, Node.REFLECTED_OBJECT);
1207:       assertEquals(54, Node.SLASH_V);
1208:       assertEquals(48, Node.DIRECTIVES);
1209:       assertEquals(43, Node.IS_CONSTANT_NAME);
1210:       assertEquals(4095, Node.COLUMN_MASK);
1211:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1212:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1213:       assertEquals(12, Node.COLUMN_BITS);
1214:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1215:       assertEquals(1, Node.DECR_FLAG);
1216:       assertEquals(32, Node.INCRDECR_PROP);
1217:       assertEquals(52, Node.LENGTH);
1218:       assertEquals(54, Node.SLASH_V);
1219:       assertEquals(57, Node.REFLECTED_OBJECT);
1220:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1221:       assertEquals(30, Node.VAR_ARGS_NAME);
1222:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1223:       assertEquals(49, Node.DIRECT_EVAL);
1224:       assertEquals(40, Node.ORIGINALNAME_PROP);
1225:       assertEquals(48, Node.DIRECTIVES);
1226:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1227:       assertEquals(8, Node.FLAG_NO_THROWS);
1228:       assertEquals(2, Node.POST_FLAG);
1229:       assertEquals(47, Node.IS_DISPATCHER);
1230:       assertEquals(29, Node.JSDOC_INFO_PROP);
1231:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1232:       assertEquals(57, Node.LAST_PROP);
1233:       assertEquals(39, Node.EMPTY_BLOCK);
1234:       assertEquals(55, Node.INFERRED_FUNCTION);
1235:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1236:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1237:       assertEquals(53, Node.INPUT_ID);
1238:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1239:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1240:       assertEquals(36, Node.QUOTED_PROP);
1241:       assertEquals(43, Node.IS_CONSTANT_NAME);
1242:       assertEquals(56, Node.CHANGE_TIME);
1243:       assertEquals(37, Node.OPT_ARG_NAME);
1244:       assertEquals(32, Node.INCRDECR_PROP);
1245:       assertEquals(46, Node.IS_NAMESPACE);
1246:       assertEquals(4095, Node.COLUMN_MASK);
1247:       assertEquals(12, Node.COLUMN_BITS);
1248:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1249:       assertEquals(50, Node.FREE_CALL);
1250:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1251:       assertEquals(1, Node.DECR_FLAG);
1252:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1253:       assertEquals(53, Node.INPUT_ID);
1254:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1255:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1256:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1257:       assertEquals(29, Node.JSDOC_INFO_PROP);
1258:       assertEquals(47, Node.IS_DISPATCHER);
1259:       assertEquals(12, Node.COLUMN_BITS);
1260:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1261:       assertEquals(55, Node.INFERRED_FUNCTION);
1262:       assertEquals(4095, Node.COLUMN_MASK);
1263:       assertEquals(8, Node.FLAG_NO_THROWS);
1264:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1265:       assertEquals(56, Node.CHANGE_TIME);
1266:       assertEquals(36, Node.QUOTED_PROP);
1267:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1268:       assertEquals(37, Node.OPT_ARG_NAME);
1269:       assertEquals(48, Node.DIRECTIVES);
1270:       assertEquals(49, Node.DIRECT_EVAL);
1271:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1272:       assertEquals(57, Node.REFLECTED_OBJECT);
1273:       assertEquals(40, Node.ORIGINALNAME_PROP);
1274:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1275:       assertEquals(50, Node.FREE_CALL);
1276:       assertEquals(52, Node.LENGTH);
1277:       assertEquals(57, Node.LAST_PROP);
1278:       assertEquals(30, Node.VAR_ARGS_NAME);
1279:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1280:       assertEquals(39, Node.EMPTY_BLOCK);
1281:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1282:       assertEquals(1, Node.DECR_FLAG);
1283:       assertEquals(32, Node.INCRDECR_PROP);
1284:       assertEquals(46, Node.IS_NAMESPACE);
1285:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1286:       assertEquals(2, Node.POST_FLAG);
1287:       assertEquals(43, Node.IS_CONSTANT_NAME);
1288:       assertEquals(54, Node.SLASH_V);
1289:       assertFalse(node0.equals((Object)node1));
1290:       assertFalse(node1.equals((Object)node0));
1291:       assertFalse(node2.equals((Object)node1));
1292:       assertNotNull(node2);
1293:       assertSame(node0, node2);
1294:       assertSame(node2, node0);
1295:       assertFalse(node0.isDelProp());
1296:       assertFalse(node0.isGetterDef());
1297:       assertFalse(node0.isIf());
1298:       assertFalse(node0.isFor());
1299:       assertFalse(node0.isNE());
1300:       assertFalse(node0.isArrayLit());
1301:       assertFalse(node0.isFunction());
1302:       assertFalse(node0.isRegExp());
1303:       assertFalse(node0.isCase());
1304:       assertEquals((-1), node0.getCharno());
1305:       assertFalse(node0.isDebugger());
1306:       assertFalse(node0.isSwitch());
1307:       assertFalse(node0.isTry());
1308:       assertFalse(node0.isString());
1309:       assertFalse(node0.isBreak());
1310:       assertFalse(node0.isNull());
1311:       assertFalse(node0.isComma());
1312:       assertFalse(node0.isName());
1313:       assertFalse(node0.isVar());
1314:       assertFalse(node0.isParamList());
1315:       assertFalse(node0.isStringKey());
1316:       assertEquals(0, node0.getChildCount());
1317:       assertFalse(node0.isCall());
1318:       assertFalse(node0.isDefaultCase());
1319:       assertFalse(node0.isDo());
1320:       assertFalse(node0.isVoid());
1321:       assertEquals((-598), node0.getType());
1322:       assertFalse(node0.isTrue());
1323:       assertFalse(node0.isOr());
1324:       assertFalse(node0.isNew());
1325:       assertFalse(node0.isAdd());
1326:       assertFalse(node0.isEmpty());
1327:       assertFalse(node0.hasChildren());
1328:       assertFalse(node0.isNumber());
1329:       assertFalse(node0.isTypeOf());
1330:       assertFalse(node0.isLabelName());
1331:       assertFalse(node0.isAssign());
1332:       assertFalse(node0.isDec());
1333:       assertEquals((-1), node0.getSourcePosition());
1334:       assertFalse(node0.isAssignAdd());
1335:       assertFalse(node0.isReturn());
1336:       assertFalse(node0.isLabel());
1337:       assertEquals((-1), node0.getLineno());
1338:       assertFalse(node0.isContinue());
1339:       assertFalse(node0.hasMoreThanOneChild());
1340:       assertFalse(node0.isExprResult());
1341:       assertFalse(node0.isGetElem());
1342:       assertFalse(node0.isCast());
1343:       assertFalse(node0.isWith());
1344:       assertFalse(node0.isNot());
1345:       assertFalse(node0.isAnd());
1346:       assertFalse(node0.isBlock());
1347:       assertFalse(node0.isWhile());
1348:       assertFalse(node0.hasOneChild());
1349:       assertFalse(node0.isObjectLit());
1350:       assertFalse(node0.isGetProp());
1351:       assertFalse(node0.isScript());
1352:       assertFalse(node0.isThrow());
1353:       assertFalse(node0.isThis());
1354:       assertFalse(node0.isHook());
1355:       assertFalse(node0.isFalse());
1356:       assertFalse(node0.isCatch());
1357:       assertFalse(node0.isInstanceOf());
1358:       assertFalse(node0.isIn());
1359:       assertFalse(node0.isInc());
1360:       assertFalse(node0.isSetterDef());
1361:       assertFalse(node1.isVar());
1362:       assertFalse(node1.isAdd());
1363:       assertFalse(node1.isBlock());
1364:       assertFalse(node1.isCall());
1365:       assertFalse(node1.isNew());
1366:       assertFalse(node1.isStringKey());
1367:       assertFalse(node1.isName());
1368:       assertFalse(node1.isWhile());
1369:       assertFalse(node1.isContinue());
1370:       assertFalse(node1.hasMoreThanOneChild());
1371:       assertFalse(node1.isReturn());
1372:       assertFalse(node1.isParamList());
1373:       assertEquals((-1), node1.getSourcePosition());
1374:       assertFalse(node1.isDebugger());
1375:       assertFalse(node1.isNumber());
1376:       assertFalse(node1.isArrayLit());
1377:       assertFalse(node1.isVoid());
1378:       assertFalse(node1.isLabelName());
1379:       assertFalse(node1.isDelProp());
1380:       assertFalse(node1.isDefaultCase());
1381:       assertFalse(node1.isDec());
1382:       assertFalse(node1.isExprResult());
1383:       assertFalse(node1.isGetElem());
1384:       assertTrue(node1.hasOneChild());
1385:       assertEquals(1, node1.getType());
1386:       assertFalse(node1.isAssign());
1387:       assertFalse(node1.isTypeOf());
1388:       assertFalse(node1.isLabel());
1389:       assertFalse(node1.isDo());
1390:       assertFalse(node1.isAssignAdd());
1391:       assertFalse(node1.isEmpty());
1392:       assertFalse(node1.isNull());
1393:       assertFalse(node1.isTrue());
1394:       assertFalse(node1.isOr());
1395:       assertFalse(node1.isHook());
1396:       assertFalse(node1.isThrow());
1397:       assertFalse(node1.isSwitch());
1398:       assertFalse(node1.isBreak());
1399:       assertFalse(node1.isThis());
1400:       assertFalse(node1.isComma());
1401:       assertFalse(node1.isFalse());
1402:       assertEquals(1, node1.getChildCount());
1403:       assertFalse(node1.isGetProp());
1404:       assertFalse(node1.isCase());
1405:       assertFalse(node1.isAnd());
1406:       assertFalse(node1.isGetterDef());
1407:       assertFalse(node1.isString());
1408:       assertFalse(node1.isScript());
1409:       assertEquals((-1), node1.getCharno());
1410:       assertFalse(node1.isNot());
1411:       assertFalse(node1.isObjectLit());
1412:       assertFalse(node1.isCast());
1413:       assertFalse(node1.isTry());
1414:       assertFalse(node1.isFor());
1415:       assertFalse(node1.isWith());
1416:       assertFalse(node1.isRegExp());
1417:       assertFalse(node1.isFunction());
1418:       assertFalse(node1.isIn());
1419:       assertEquals((-1), node1.getLineno());
1420:       assertFalse(node1.isInstanceOf());
1421:       assertTrue(node1.hasChildren());
1422:       assertFalse(node1.isCatch());
1423:       assertFalse(node1.isIf());
1424:       assertFalse(node1.isNE());
1425:       assertFalse(node1.isInc());
1426:       assertFalse(node1.isSetterDef());
1427:       assertFalse(node2.isArrayLit());
1428:       assertFalse(node2.isTry());
1429:       assertFalse(node2.isDebugger());
1430:       assertFalse(node2.isTrue());
1431:       assertFalse(node2.isFor());
1432:       assertFalse(node2.isDefaultCase());
1433:       assertFalse(node2.isGetterDef());
1434:       assertFalse(node2.isEmpty());
1435:       assertEquals(0, node2.getChildCount());
1436:       assertFalse(node2.isParamList());
1437:       assertFalse(node2.isSwitch());
1438:       assertFalse(node2.isFunction());
1439:       assertFalse(node2.isName());
1440:       assertFalse(node2.isVar());
1441:       assertFalse(node2.isNull());
1442:       assertFalse(node2.isDo());
1443:       assertFalse(node2.isNew());
1444:       assertFalse(node2.isGetProp());
1445:       assertFalse(node2.isString());
1446:       assertFalse(node2.isAdd());
1447:       assertFalse(node2.isOr());
1448:       assertFalse(node2.isWhile());
1449:       assertFalse(node2.isReturn());
1450:       assertFalse(node2.isDec());
1451:       assertFalse(node2.isTypeOf());
1452:       assertFalse(node2.hasChildren());
1453:       assertFalse(node2.isBreak());
1454:       assertFalse(node2.isComma());
1455:       assertFalse(node2.isAssign());
1456:       assertFalse(node2.isDelProp());
1457:       assertFalse(node2.isVoid());
1458:       assertFalse(node2.isGetElem());
1459:       assertFalse(node2.isExprResult());
1460:       assertFalse(node2.isCall());
1461:       assertFalse(node2.hasOneChild());
1462:       assertFalse(node2.isNumber());
1463:       assertEquals((-1), node2.getSourcePosition());
1464:       assertFalse(node2.isNot());
1465:       assertFalse(node2.isScript());
1466:       assertFalse(node2.isObjectLit());
1467:       assertFalse(node2.isAssignAdd());
1468:       assertFalse(node2.isLabel());
1469:       assertFalse(node2.isAnd());
1470:       assertEquals((-598), node2.getType());
1471:       assertFalse(node2.isLabelName());
1472:       assertFalse(node2.isFalse());
1473:       assertFalse(node2.isContinue());
1474:       assertFalse(node2.isCast());
1475:       assertFalse(node2.isHook());
1476:       assertFalse(node2.isBlock());
1477:       assertFalse(node2.isStringKey());
1478:       assertEquals((-1), node2.getCharno());
1479:       assertFalse(node2.isThrow());
1480:       assertFalse(node2.isCase());
1481:       assertFalse(node2.isInc());
1482:       assertFalse(node2.isSetterDef());
1483:       assertFalse(node2.isInstanceOf());
1484:       assertFalse(node2.isIn());
1485:       assertFalse(node2.hasMoreThanOneChild());
1486:       assertEquals((-1), node2.getLineno());
1487:       assertFalse(node2.isThis());
1488:       assertFalse(node2.isNE());
1489:       assertFalse(node2.isIf());
1490:       assertFalse(node2.isWith());
1491:       assertFalse(node2.isRegExp());
1492:       assertFalse(node2.isCatch());
1493:       
1494:       Node node3 = Node.newNumber((double) 4095);
1495:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1496:       assertEquals(50, Node.FREE_CALL);
1497:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1498:       assertEquals(40, Node.ORIGINALNAME_PROP);
1499:       assertEquals(39, Node.EMPTY_BLOCK);
1500:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1501:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1502:       assertEquals(30, Node.VAR_ARGS_NAME);
1503:       assertEquals(1, Node.DECR_FLAG);
1504:       assertEquals(43, Node.IS_CONSTANT_NAME);
1505:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1506:       assertEquals(46, Node.IS_NAMESPACE);
1507:       assertEquals(54, Node.SLASH_V);
1508:       assertEquals(29, Node.JSDOC_INFO_PROP);
1509:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1510:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1511:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1512:       assertEquals(37, Node.OPT_ARG_NAME);
1513:       assertEquals(32, Node.INCRDECR_PROP);
1514:       assertEquals(2, Node.POST_FLAG);
1515:       assertEquals(12, Node.COLUMN_BITS);
1516:       assertEquals(47, Node.IS_DISPATCHER);
1517:       assertEquals(49, Node.DIRECT_EVAL);
1518:       assertEquals(57, Node.LAST_PROP);
1519:       assertEquals(4095, Node.COLUMN_MASK);
1520:       assertEquals(55, Node.INFERRED_FUNCTION);
1521:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1522:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1523:       assertEquals(53, Node.INPUT_ID);
1524:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1525:       assertEquals(48, Node.DIRECTIVES);
1526:       assertEquals(52, Node.LENGTH);
1527:       assertEquals(8, Node.FLAG_NO_THROWS);
1528:       assertEquals(56, Node.CHANGE_TIME);
1529:       assertEquals(36, Node.QUOTED_PROP);
1530:       assertEquals(57, Node.REFLECTED_OBJECT);
1531:       assertFalse(node3.equals((Object)node2));
1532:       assertFalse(node3.equals((Object)node0));
1533:       assertFalse(node3.equals((Object)node1));
1534:       assertNotNull(node3);
1535:       assertFalse(node3.isStringKey());
1536:       assertFalse(node3.isNull());
1537:       assertFalse(node3.isBlock());
1538:       assertFalse(node3.isAdd());
1539:       assertFalse(node3.isVar());
1540:       assertFalse(node3.isSetterDef());
1541:       assertFalse(node3.isNew());
1542:       assertFalse(node3.isWhile());
1543:       assertEquals(39, node3.getType());
1544:       assertFalse(node3.isTrue());
1545:       assertFalse(node3.isCatch());
1546:       assertFalse(node3.hasMoreThanOneChild());
1547:       assertFalse(node3.isRegExp());
1548:       assertEquals((-1), node3.getLineno());
1549:       assertFalse(node3.isCall());
1550:       assertFalse(node3.isName());
1551:       assertFalse(node3.isVoid());
1552:       assertFalse(node3.hasChildren());
1553:       assertFalse(node3.isIf());
1554:       assertFalse(node3.isGetElem());
1555:       assertFalse(node3.isNE());
1556:       assertFalse(node3.isDec());
1557:       assertFalse(node3.isTypeOf());
1558:       assertEquals((-1), node3.getSourcePosition());
1559:       assertFalse(node3.isAssign());
1560:       assertFalse(node3.isReturn());
1561:       assertTrue(node3.isNumber());
1562:       assertFalse(node3.isIn());
1563:       assertFalse(node3.isString());
1564:       assertFalse(node3.isFunction());
1565:       assertFalse(node3.isContinue());
1566:       assertFalse(node3.isDebugger());
1567:       assertFalse(node3.isNot());
1568:       assertFalse(node3.isObjectLit());
1569:       assertFalse(node3.isCast());
1570:       assertFalse(node3.isAnd());
1571:       assertFalse(node3.isBreak());
1572:       assertFalse(node3.isThrow());
1573:       assertFalse(node3.isComma());
1574:       assertFalse(node3.isThis());
1575:       assertFalse(node3.isFalse());
1576:       assertFalse(node3.isHook());
1577:       assertFalse(node3.isInc());
1578:       assertFalse(node3.isGetProp());
1579:       assertFalse(node3.isWith());
1580:       assertFalse(node3.isInstanceOf());
1581:       assertFalse(node3.isExprResult());
1582:       assertFalse(node3.isDelProp());
1583:       assertFalse(node3.isEmpty());
1584:       assertFalse(node3.isFor());
1585:       assertFalse(node3.isOr());
1586:       assertFalse(node3.isGetterDef());
1587:       assertFalse(node3.isAssignAdd());
1588:       assertFalse(node3.isLabel());
1589:       assertFalse(node3.isCase());
1590:       assertFalse(node3.hasOneChild());
1591:       assertFalse(node3.isDo());
1592:       assertFalse(node3.isTry());
1593:       assertFalse(node3.isDefaultCase());
1594:       assertFalse(node3.isScript());
1595:       assertEquals((-1), node3.getCharno());
1596:       assertEquals(0, node3.getChildCount());
1597:       assertFalse(node3.isParamList());
1598:       assertFalse(node3.isArrayLit());
1599:       assertFalse(node3.isSwitch());
1600:       assertFalse(node3.isLabelName());
1601:       
1602:       // Undeclared exception!
1603:       try { 
1604:         node3.addChildrenToBack(node0);
1605:         fail("Expecting exception: IllegalArgumentException");
1606:       
1607:       } catch(IllegalArgumentException e) {
1608:          //
1609:          // no message in exception (getMessage() returned null)
1610:          //
1611:          verifyException("com.google.common.base.Preconditions", e);
1612:       }
1613:   }
1614: }
RegularFileObject[/tmp/EvoSuite_70_1628158410576/com/google/javascript/rhino/Node_70_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:30 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_70_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_70_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_70_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.jstype.TemplatizedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.collect.AbstractIndexedListIterator",
335:       "com.google.common.collect.Iterators$11",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.common.base.Objects",
339:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
349:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSTypeExpression",
352:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
353:       "com.google.javascript.rhino.jstype.JSType$TypePair",
354:       "com.google.common.collect.Platform",
355:       "com.google.common.collect.Iterators$12",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.JSType$2",
358:       "com.google.common.collect.AbstractMultimap$Values",
359:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
360:       "com.google.common.collect.AbstractMapBasedMultimap$1",
361:       "com.google.common.collect.Multimaps$Entries",
362:       "com.google.common.collect.AbstractMultimap$Entries",
363:       "com.google.common.collect.AbstractMapBasedMultimap$2"
364:     );
365:   }
366: }

[MASTER] 10:13:30.820 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-598), "", (-598), 108);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node0);
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals((-598), node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

boolean boolean0 = node0.isBlock();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(boolean0);
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals((-598), node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

boolean boolean1 = node0.isNoSideEffectsCall();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals((-598), node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

int int0 = node0.getLineno();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals((-1), int0);
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals((-598), node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

Iterable<Node> iterable0 = node0.children();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(iterable0);
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals((-598), node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(iterable0.contains(node0));

boolean boolean2 = node0.isOptionalArg();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals((-598), node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

String string0 = node0.getQualifiedName();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertNull(string0);
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals((-598), node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

int int1 = node0.getIntProp((-239));
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(int1 == int0);
assertEquals(0, int1);
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals((-598), node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertNull(jSDocInfo0);
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals((-598), node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

Node node1 = new Node(1, node0, (-3028), 2);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals((-598), node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertEquals(1, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

Node node2 = node0.useSourceInfoFromForTree(node1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals((-598), node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertEquals(1, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.hasOneChild());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isAnd());
assertEquals((-598), node2.getType());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());

Node node3 = Node.newNumber((double) 4095);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertNotNull(node3);
assertFalse(node3.isStringKey());
assertFalse(node3.isNull());
assertFalse(node3.isBlock());
assertFalse(node3.isAdd());
assertFalse(node3.isVar());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNew());
assertFalse(node3.isWhile());
assertEquals(39, node3.getType());
assertFalse(node3.isTrue());
assertFalse(node3.isCatch());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isVoid());
assertFalse(node3.hasChildren());
assertFalse(node3.isIf());
assertFalse(node3.isGetElem());
assertFalse(node3.isNE());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isAssign());
assertFalse(node3.isReturn());
assertTrue(node3.isNumber());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isFunction());
assertFalse(node3.isContinue());
assertFalse(node3.isDebugger());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isBreak());
assertFalse(node3.isThrow());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isFalse());
assertFalse(node3.isHook());
assertFalse(node3.isInc());
assertFalse(node3.isGetProp());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isDelProp());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isOr());
assertFalse(node3.isGetterDef());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isCase());
assertFalse(node3.hasOneChild());
assertFalse(node3.isDo());
assertFalse(node3.isTry());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isScript());
assertEquals((-1), node3.getCharno());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabelName());

node3.addChildrenToBack(node0);

[MASTER] 10:13:39.028 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_114_1628158418985/com/google/javascript/rhino/Node_114_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_114_1628158418985/com/google/javascript/rhino/Node_114_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:39.028 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:39.028 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:39.029 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 547
[MASTER] 10:13:39.030 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_114_1628158418985/com/google/javascript/rhino/Node_114_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:38 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_114_tmp__ESTest extends Node_114_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString((-598), "", (-598), 108);
23:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
24:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
25:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
26:       assertEquals(43, Node.IS_CONSTANT_NAME);
27:       assertEquals(36, Node.QUOTED_PROP);
28:       assertEquals(56, Node.CHANGE_TIME);
29:       assertEquals(29, Node.JSDOC_INFO_PROP);
30:       assertEquals(53, Node.INPUT_ID);
31:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
32:       assertEquals(12, Node.COLUMN_BITS);
33:       assertEquals(4095, Node.COLUMN_MASK);
34:       assertEquals(49, Node.DIRECT_EVAL);
35:       assertEquals(48, Node.DIRECTIVES);
36:       assertEquals(1, Node.DECR_FLAG);
37:       assertEquals(32, Node.INCRDECR_PROP);
38:       assertEquals(37, Node.OPT_ARG_NAME);
39:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
40:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
41:       assertEquals(40, Node.ORIGINALNAME_PROP);
42:       assertEquals(57, Node.REFLECTED_OBJECT);
43:       assertEquals(54, Node.SLASH_V);
44:       assertEquals(15, Node.NO_SIDE_EFFECTS);
45:       assertEquals(39, Node.EMPTY_BLOCK);
46:       assertEquals(50, Node.FREE_CALL);
47:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
48:       assertEquals(52, Node.LENGTH);
49:       assertEquals(8, Node.FLAG_NO_THROWS);
50:       assertEquals(51, Node.STATIC_SOURCE_FILE);
51:       assertEquals(55, Node.INFERRED_FUNCTION);
52:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
53:       assertEquals(46, Node.IS_NAMESPACE);
54:       assertEquals(57, Node.LAST_PROP);
55:       assertEquals(2, Node.POST_FLAG);
56:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
57:       assertEquals(47, Node.IS_DISPATCHER);
58:       assertEquals(30, Node.VAR_ARGS_NAME);
59:       assertNotNull(node0);
60:       assertFalse(node0.isCast());
61:       assertFalse(node0.hasOneChild());
62:       assertFalse(node0.isLabelName());
63:       assertFalse(node0.isGetElem());
64:       assertFalse(node0.isExprResult());
65:       assertEquals((-1), node0.getSourcePosition());
66:       assertFalse(node0.isNumber());
67:       assertFalse(node0.isOr());
68:       assertFalse(node0.isContinue());
69:       assertFalse(node0.isAnd());
70:       assertEquals((-598), node0.getType());
71:       assertFalse(node0.isDo());
72:       assertFalse(node0.isNew());
73:       assertFalse(node0.isAssignAdd());
74:       assertFalse(node0.isLabel());
75:       assertFalse(node0.isThrow());
76:       assertFalse(node0.isVar());
77:       assertFalse(node0.isSwitch());
78:       assertFalse(node0.isParamList());
79:       assertEquals((-1), node0.getCharno());
80:       assertFalse(node0.isStringKey());
81:       assertFalse(node0.hasMoreThanOneChild());
82:       assertFalse(node0.isCatch());
83:       assertFalse(node0.isWith());
84:       assertEquals((-1), node0.getLineno());
85:       assertFalse(node0.isCase());
86:       assertFalse(node0.isInstanceOf());
87:       assertFalse(node0.isScript());
88:       assertFalse(node0.isThis());
89:       assertFalse(node0.isRegExp());
90:       assertFalse(node0.isTry());
91:       assertFalse(node0.isHook());
92:       assertFalse(node0.isBlock());
93:       assertFalse(node0.isFor());
94:       assertFalse(node0.isArrayLit());
95:       assertFalse(node0.isEmpty());
96:       assertFalse(node0.isNE());
97:       assertFalse(node0.isDebugger());
98:       assertFalse(node0.isIf());
99:       assertFalse(node0.isDelProp());
100:       assertFalse(node0.isVoid());
101:       assertFalse(node0.isGetterDef());
102:       assertFalse(node0.isTrue());
103:       assertEquals(0, node0.getChildCount());
104:       assertFalse(node0.isIn());
105:       assertFalse(node0.isInc());
106:       assertFalse(node0.isFunction());
107:       assertFalse(node0.isSetterDef());
108:       assertFalse(node0.isDefaultCase());
109:       assertFalse(node0.isFalse());
110:       assertFalse(node0.isName());
111:       assertFalse(node0.isBreak());
112:       assertFalse(node0.isAdd());
113:       assertFalse(node0.isCall());
114:       assertFalse(node0.isNull());
115:       assertFalse(node0.isNot());
116:       assertFalse(node0.isObjectLit());
117:       assertFalse(node0.isString());
118:       assertFalse(node0.isGetProp());
119:       assertFalse(node0.isComma());
120:       assertFalse(node0.isDec());
121:       assertFalse(node0.isTypeOf());
122:       assertFalse(node0.isReturn());
123:       assertFalse(node0.isAssign());
124:       assertFalse(node0.isWhile());
125:       assertFalse(node0.hasChildren());
126:       
127:       boolean boolean0 = node0.isBlock();
128:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
130:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
131:       assertEquals(43, Node.IS_CONSTANT_NAME);
132:       assertEquals(36, Node.QUOTED_PROP);
133:       assertEquals(56, Node.CHANGE_TIME);
134:       assertEquals(29, Node.JSDOC_INFO_PROP);
135:       assertEquals(53, Node.INPUT_ID);
136:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
137:       assertEquals(12, Node.COLUMN_BITS);
138:       assertEquals(4095, Node.COLUMN_MASK);
139:       assertEquals(49, Node.DIRECT_EVAL);
140:       assertEquals(48, Node.DIRECTIVES);
141:       assertEquals(1, Node.DECR_FLAG);
142:       assertEquals(32, Node.INCRDECR_PROP);
143:       assertEquals(37, Node.OPT_ARG_NAME);
144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
145:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
146:       assertEquals(40, Node.ORIGINALNAME_PROP);
147:       assertEquals(57, Node.REFLECTED_OBJECT);
148:       assertEquals(54, Node.SLASH_V);
149:       assertEquals(15, Node.NO_SIDE_EFFECTS);
150:       assertEquals(39, Node.EMPTY_BLOCK);
151:       assertEquals(50, Node.FREE_CALL);
152:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
153:       assertEquals(52, Node.LENGTH);
154:       assertEquals(8, Node.FLAG_NO_THROWS);
155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
156:       assertEquals(55, Node.INFERRED_FUNCTION);
157:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
158:       assertEquals(46, Node.IS_NAMESPACE);
159:       assertEquals(57, Node.LAST_PROP);
160:       assertEquals(2, Node.POST_FLAG);
161:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
162:       assertEquals(47, Node.IS_DISPATCHER);
163:       assertEquals(30, Node.VAR_ARGS_NAME);
164:       assertFalse(boolean0);
165:       assertFalse(node0.isCast());
166:       assertFalse(node0.hasOneChild());
167:       assertFalse(node0.isLabelName());
168:       assertFalse(node0.isGetElem());
169:       assertFalse(node0.isExprResult());
170:       assertEquals((-1), node0.getSourcePosition());
171:       assertFalse(node0.isNumber());
172:       assertFalse(node0.isOr());
173:       assertFalse(node0.isContinue());
174:       assertFalse(node0.isAnd());
175:       assertEquals((-598), node0.getType());
176:       assertFalse(node0.isDo());
177:       assertFalse(node0.isNew());
178:       assertFalse(node0.isAssignAdd());
179:       assertFalse(node0.isLabel());
180:       assertFalse(node0.isThrow());
181:       assertFalse(node0.isVar());
182:       assertFalse(node0.isSwitch());
183:       assertFalse(node0.isParamList());
184:       assertEquals((-1), node0.getCharno());
185:       assertFalse(node0.isStringKey());
186:       assertFalse(node0.hasMoreThanOneChild());
187:       assertFalse(node0.isCatch());
188:       assertFalse(node0.isWith());
189:       assertEquals((-1), node0.getLineno());
190:       assertFalse(node0.isCase());
191:       assertFalse(node0.isInstanceOf());
192:       assertFalse(node0.isScript());
193:       assertFalse(node0.isThis());
194:       assertFalse(node0.isRegExp());
195:       assertFalse(node0.isTry());
196:       assertFalse(node0.isHook());
197:       assertFalse(node0.isBlock());
198:       assertFalse(node0.isFor());
199:       assertFalse(node0.isArrayLit());
200:       assertFalse(node0.isEmpty());
201:       assertFalse(node0.isNE());
202:       assertFalse(node0.isDebugger());
203:       assertFalse(node0.isIf());
204:       assertFalse(node0.isDelProp());
205:       assertFalse(node0.isVoid());
206:       assertFalse(node0.isGetterDef());
207:       assertFalse(node0.isTrue());
208:       assertEquals(0, node0.getChildCount());
209:       assertFalse(node0.isIn());
210:       assertFalse(node0.isInc());
211:       assertFalse(node0.isFunction());
212:       assertFalse(node0.isSetterDef());
213:       assertFalse(node0.isDefaultCase());
214:       assertFalse(node0.isFalse());
215:       assertFalse(node0.isName());
216:       assertFalse(node0.isBreak());
217:       assertFalse(node0.isAdd());
218:       assertFalse(node0.isCall());
219:       assertFalse(node0.isNull());
220:       assertFalse(node0.isNot());
221:       assertFalse(node0.isObjectLit());
222:       assertFalse(node0.isString());
223:       assertFalse(node0.isGetProp());
224:       assertFalse(node0.isComma());
225:       assertFalse(node0.isDec());
226:       assertFalse(node0.isTypeOf());
227:       assertFalse(node0.isReturn());
228:       assertFalse(node0.isAssign());
229:       assertFalse(node0.isWhile());
230:       assertFalse(node0.hasChildren());
231:       
232:       boolean boolean1 = node0.isNoSideEffectsCall();
233:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
234:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
235:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
236:       assertEquals(43, Node.IS_CONSTANT_NAME);
237:       assertEquals(36, Node.QUOTED_PROP);
238:       assertEquals(56, Node.CHANGE_TIME);
239:       assertEquals(29, Node.JSDOC_INFO_PROP);
240:       assertEquals(53, Node.INPUT_ID);
241:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
242:       assertEquals(12, Node.COLUMN_BITS);
243:       assertEquals(4095, Node.COLUMN_MASK);
244:       assertEquals(49, Node.DIRECT_EVAL);
245:       assertEquals(48, Node.DIRECTIVES);
246:       assertEquals(1, Node.DECR_FLAG);
247:       assertEquals(32, Node.INCRDECR_PROP);
248:       assertEquals(37, Node.OPT_ARG_NAME);
249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
250:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
251:       assertEquals(40, Node.ORIGINALNAME_PROP);
252:       assertEquals(57, Node.REFLECTED_OBJECT);
253:       assertEquals(54, Node.SLASH_V);
254:       assertEquals(15, Node.NO_SIDE_EFFECTS);
255:       assertEquals(39, Node.EMPTY_BLOCK);
256:       assertEquals(50, Node.FREE_CALL);
257:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
258:       assertEquals(52, Node.LENGTH);
259:       assertEquals(8, Node.FLAG_NO_THROWS);
260:       assertEquals(51, Node.STATIC_SOURCE_FILE);
261:       assertEquals(55, Node.INFERRED_FUNCTION);
262:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
263:       assertEquals(46, Node.IS_NAMESPACE);
264:       assertEquals(57, Node.LAST_PROP);
265:       assertEquals(2, Node.POST_FLAG);
266:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
267:       assertEquals(47, Node.IS_DISPATCHER);
268:       assertEquals(30, Node.VAR_ARGS_NAME);
269:       assertTrue(boolean1 == boolean0);
270:       assertFalse(boolean1);
271:       assertFalse(node0.isCast());
272:       assertFalse(node0.hasOneChild());
273:       assertFalse(node0.isLabelName());
274:       assertFalse(node0.isGetElem());
275:       assertFalse(node0.isExprResult());
276:       assertEquals((-1), node0.getSourcePosition());
277:       assertFalse(node0.isNumber());
278:       assertFalse(node0.isOr());
279:       assertFalse(node0.isContinue());
280:       assertFalse(node0.isAnd());
281:       assertEquals((-598), node0.getType());
282:       assertFalse(node0.isDo());
283:       assertFalse(node0.isNew());
284:       assertFalse(node0.isAssignAdd());
285:       assertFalse(node0.isLabel());
286:       assertFalse(node0.isThrow());
287:       assertFalse(node0.isVar());
288:       assertFalse(node0.isSwitch());
289:       assertFalse(node0.isParamList());
290:       assertEquals((-1), node0.getCharno());
291:       assertFalse(node0.isStringKey());
292:       assertFalse(node0.hasMoreThanOneChild());
293:       assertFalse(node0.isCatch());
294:       assertFalse(node0.isWith());
295:       assertEquals((-1), node0.getLineno());
296:       assertFalse(node0.isCase());
297:       assertFalse(node0.isInstanceOf());
298:       assertFalse(node0.isScript());
299:       assertFalse(node0.isThis());
300:       assertFalse(node0.isRegExp());
301:       assertFalse(node0.isTry());
302:       assertFalse(node0.isHook());
303:       assertFalse(node0.isBlock());
304:       assertFalse(node0.isFor());
305:       assertFalse(node0.isArrayLit());
306:       assertFalse(node0.isEmpty());
307:       assertFalse(node0.isNE());
308:       assertFalse(node0.isDebugger());
309:       assertFalse(node0.isIf());
310:       assertFalse(node0.isDelProp());
311:       assertFalse(node0.isVoid());
312:       assertFalse(node0.isGetterDef());
313:       assertFalse(node0.isTrue());
314:       assertEquals(0, node0.getChildCount());
315:       assertFalse(node0.isIn());
316:       assertFalse(node0.isInc());
317:       assertFalse(node0.isFunction());
318:       assertFalse(node0.isSetterDef());
319:       assertFalse(node0.isDefaultCase());
320:       assertFalse(node0.isFalse());
321:       assertFalse(node0.isName());
322:       assertFalse(node0.isBreak());
323:       assertFalse(node0.isAdd());
324:       assertFalse(node0.isCall());
325:       assertFalse(node0.isNull());
326:       assertFalse(node0.isNot());
327:       assertFalse(node0.isObjectLit());
328:       assertFalse(node0.isString());
329:       assertFalse(node0.isGetProp());
330:       assertFalse(node0.isComma());
331:       assertFalse(node0.isDec());
332:       assertFalse(node0.isTypeOf());
333:       assertFalse(node0.isReturn());
334:       assertFalse(node0.isAssign());
335:       assertFalse(node0.isWhile());
336:       assertFalse(node0.hasChildren());
337:       
338:       int int0 = node0.getLineno();
339:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
340:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
341:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
342:       assertEquals(43, Node.IS_CONSTANT_NAME);
343:       assertEquals(36, Node.QUOTED_PROP);
344:       assertEquals(56, Node.CHANGE_TIME);
345:       assertEquals(29, Node.JSDOC_INFO_PROP);
346:       assertEquals(53, Node.INPUT_ID);
347:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
348:       assertEquals(12, Node.COLUMN_BITS);
349:       assertEquals(4095, Node.COLUMN_MASK);
350:       assertEquals(49, Node.DIRECT_EVAL);
351:       assertEquals(48, Node.DIRECTIVES);
352:       assertEquals(1, Node.DECR_FLAG);
353:       assertEquals(32, Node.INCRDECR_PROP);
354:       assertEquals(37, Node.OPT_ARG_NAME);
355:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
356:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
357:       assertEquals(40, Node.ORIGINALNAME_PROP);
358:       assertEquals(57, Node.REFLECTED_OBJECT);
359:       assertEquals(54, Node.SLASH_V);
360:       assertEquals(15, Node.NO_SIDE_EFFECTS);
361:       assertEquals(39, Node.EMPTY_BLOCK);
362:       assertEquals(50, Node.FREE_CALL);
363:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
364:       assertEquals(52, Node.LENGTH);
365:       assertEquals(8, Node.FLAG_NO_THROWS);
366:       assertEquals(51, Node.STATIC_SOURCE_FILE);
367:       assertEquals(55, Node.INFERRED_FUNCTION);
368:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
369:       assertEquals(46, Node.IS_NAMESPACE);
370:       assertEquals(57, Node.LAST_PROP);
371:       assertEquals(2, Node.POST_FLAG);
372:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
373:       assertEquals(47, Node.IS_DISPATCHER);
374:       assertEquals(30, Node.VAR_ARGS_NAME);
375:       assertEquals((-1), int0);
376:       assertFalse(node0.isCast());
377:       assertFalse(node0.hasOneChild());
378:       assertFalse(node0.isLabelName());
379:       assertFalse(node0.isGetElem());
380:       assertFalse(node0.isExprResult());
381:       assertEquals((-1), node0.getSourcePosition());
382:       assertFalse(node0.isNumber());
383:       assertFalse(node0.isOr());
384:       assertFalse(node0.isContinue());
385:       assertFalse(node0.isAnd());
386:       assertEquals((-598), node0.getType());
387:       assertFalse(node0.isDo());
388:       assertFalse(node0.isNew());
389:       assertFalse(node0.isAssignAdd());
390:       assertFalse(node0.isLabel());
391:       assertFalse(node0.isThrow());
392:       assertFalse(node0.isVar());
393:       assertFalse(node0.isSwitch());
394:       assertFalse(node0.isParamList());
395:       assertEquals((-1), node0.getCharno());
396:       assertFalse(node0.isStringKey());
397:       assertFalse(node0.hasMoreThanOneChild());
398:       assertFalse(node0.isCatch());
399:       assertFalse(node0.isWith());
400:       assertEquals((-1), node0.getLineno());
401:       assertFalse(node0.isCase());
402:       assertFalse(node0.isInstanceOf());
403:       assertFalse(node0.isScript());
404:       assertFalse(node0.isThis());
405:       assertFalse(node0.isRegExp());
406:       assertFalse(node0.isTry());
407:       assertFalse(node0.isHook());
408:       assertFalse(node0.isBlock());
409:       assertFalse(node0.isFor());
410:       assertFalse(node0.isArrayLit());
411:       assertFalse(node0.isEmpty());
412:       assertFalse(node0.isNE());
413:       assertFalse(node0.isDebugger());
414:       assertFalse(node0.isIf());
415:       assertFalse(node0.isDelProp());
416:       assertFalse(node0.isVoid());
417:       assertFalse(node0.isGetterDef());
418:       assertFalse(node0.isTrue());
419:       assertEquals(0, node0.getChildCount());
420:       assertFalse(node0.isIn());
421:       assertFalse(node0.isInc());
422:       assertFalse(node0.isFunction());
423:       assertFalse(node0.isSetterDef());
424:       assertFalse(node0.isDefaultCase());
425:       assertFalse(node0.isFalse());
426:       assertFalse(node0.isName());
427:       assertFalse(node0.isBreak());
428:       assertFalse(node0.isAdd());
429:       assertFalse(node0.isCall());
430:       assertFalse(node0.isNull());
431:       assertFalse(node0.isNot());
432:       assertFalse(node0.isObjectLit());
433:       assertFalse(node0.isString());
434:       assertFalse(node0.isGetProp());
435:       assertFalse(node0.isComma());
436:       assertFalse(node0.isDec());
437:       assertFalse(node0.isTypeOf());
438:       assertFalse(node0.isReturn());
439:       assertFalse(node0.isAssign());
440:       assertFalse(node0.isWhile());
441:       assertFalse(node0.hasChildren());
442:       
443:       Iterable<Node> iterable0 = node0.children();
444:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
445:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
446:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
447:       assertEquals(43, Node.IS_CONSTANT_NAME);
448:       assertEquals(36, Node.QUOTED_PROP);
449:       assertEquals(56, Node.CHANGE_TIME);
450:       assertEquals(29, Node.JSDOC_INFO_PROP);
451:       assertEquals(53, Node.INPUT_ID);
452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
453:       assertEquals(12, Node.COLUMN_BITS);
454:       assertEquals(4095, Node.COLUMN_MASK);
455:       assertEquals(49, Node.DIRECT_EVAL);
456:       assertEquals(48, Node.DIRECTIVES);
457:       assertEquals(1, Node.DECR_FLAG);
458:       assertEquals(32, Node.INCRDECR_PROP);
459:       assertEquals(37, Node.OPT_ARG_NAME);
460:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
461:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
462:       assertEquals(40, Node.ORIGINALNAME_PROP);
463:       assertEquals(57, Node.REFLECTED_OBJECT);
464:       assertEquals(54, Node.SLASH_V);
465:       assertEquals(15, Node.NO_SIDE_EFFECTS);
466:       assertEquals(39, Node.EMPTY_BLOCK);
467:       assertEquals(50, Node.FREE_CALL);
468:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
469:       assertEquals(52, Node.LENGTH);
470:       assertEquals(8, Node.FLAG_NO_THROWS);
471:       assertEquals(51, Node.STATIC_SOURCE_FILE);
472:       assertEquals(55, Node.INFERRED_FUNCTION);
473:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
474:       assertEquals(46, Node.IS_NAMESPACE);
475:       assertEquals(57, Node.LAST_PROP);
476:       assertEquals(2, Node.POST_FLAG);
477:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
478:       assertEquals(47, Node.IS_DISPATCHER);
479:       assertEquals(30, Node.VAR_ARGS_NAME);
480:       assertNotNull(iterable0);
481:       assertFalse(node0.isCast());
482:       assertFalse(node0.hasOneChild());
483:       assertFalse(node0.isLabelName());
484:       assertFalse(node0.isGetElem());
485:       assertFalse(node0.isExprResult());
486:       assertEquals((-1), node0.getSourcePosition());
487:       assertFalse(node0.isNumber());
488:       assertFalse(node0.isOr());
489:       assertFalse(node0.isContinue());
490:       assertFalse(node0.isAnd());
491:       assertEquals((-598), node0.getType());
492:       assertFalse(node0.isDo());
493:       assertFalse(node0.isNew());
494:       assertFalse(node0.isAssignAdd());
495:       assertFalse(node0.isLabel());
496:       assertFalse(node0.isThrow());
497:       assertFalse(node0.isVar());
498:       assertFalse(node0.isSwitch());
499:       assertFalse(node0.isParamList());
500:       assertEquals((-1), node0.getCharno());
501:       assertFalse(node0.isStringKey());
502:       assertFalse(node0.hasMoreThanOneChild());
503:       assertFalse(node0.isCatch());
504:       assertFalse(node0.isWith());
505:       assertEquals((-1), node0.getLineno());
506:       assertFalse(node0.isCase());
507:       assertFalse(node0.isInstanceOf());
508:       assertFalse(node0.isScript());
509:       assertFalse(node0.isThis());
510:       assertFalse(node0.isRegExp());
511:       assertFalse(node0.isTry());
512:       assertFalse(node0.isHook());
513:       assertFalse(node0.isBlock());
514:       assertFalse(node0.isFor());
515:       assertFalse(node0.isArrayLit());
516:       assertFalse(node0.isEmpty());
517:       assertFalse(node0.isNE());
518:       assertFalse(node0.isDebugger());
519:       assertFalse(node0.isIf());
520:       assertFalse(node0.isDelProp());
521:       assertFalse(node0.isVoid());
522:       assertFalse(node0.isGetterDef());
523:       assertFalse(node0.isTrue());
524:       assertEquals(0, node0.getChildCount());
525:       assertFalse(node0.isIn());
526:       assertFalse(node0.isInc());
527:       assertFalse(node0.isFunction());
528:       assertFalse(node0.isSetterDef());
529:       assertFalse(node0.isDefaultCase());
530:       assertFalse(node0.isFalse());
531:       assertFalse(node0.isName());
532:       assertFalse(node0.isBreak());
533:       assertFalse(node0.isAdd());
534:       assertFalse(node0.isCall());
535:       assertFalse(node0.isNull());
536:       assertFalse(node0.isNot());
537:       assertFalse(node0.isObjectLit());
538:       assertFalse(node0.isString());
539:       assertFalse(node0.isGetProp());
540:       assertFalse(node0.isComma());
541:       assertFalse(node0.isDec());
542:       assertFalse(node0.isTypeOf());
543:       assertFalse(node0.isReturn());
544:       assertFalse(node0.isAssign());
545:       assertFalse(node0.isWhile());
546:       assertFalse(node0.hasChildren());
547:       assertFalse(iterable0.contains(node0));
548:       
549:       boolean boolean2 = node0.isOptionalArg();
550:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
551:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
552:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
553:       assertEquals(43, Node.IS_CONSTANT_NAME);
554:       assertEquals(36, Node.QUOTED_PROP);
555:       assertEquals(56, Node.CHANGE_TIME);
556:       assertEquals(29, Node.JSDOC_INFO_PROP);
557:       assertEquals(53, Node.INPUT_ID);
558:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
559:       assertEquals(12, Node.COLUMN_BITS);
560:       assertEquals(4095, Node.COLUMN_MASK);
561:       assertEquals(49, Node.DIRECT_EVAL);
562:       assertEquals(48, Node.DIRECTIVES);
563:       assertEquals(1, Node.DECR_FLAG);
564:       assertEquals(32, Node.INCRDECR_PROP);
565:       assertEquals(37, Node.OPT_ARG_NAME);
566:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
567:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
568:       assertEquals(40, Node.ORIGINALNAME_PROP);
569:       assertEquals(57, Node.REFLECTED_OBJECT);
570:       assertEquals(54, Node.SLASH_V);
571:       assertEquals(15, Node.NO_SIDE_EFFECTS);
572:       assertEquals(39, Node.EMPTY_BLOCK);
573:       assertEquals(50, Node.FREE_CALL);
574:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
575:       assertEquals(52, Node.LENGTH);
576:       assertEquals(8, Node.FLAG_NO_THROWS);
577:       assertEquals(51, Node.STATIC_SOURCE_FILE);
578:       assertEquals(55, Node.INFERRED_FUNCTION);
579:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
580:       assertEquals(46, Node.IS_NAMESPACE);
581:       assertEquals(57, Node.LAST_PROP);
582:       assertEquals(2, Node.POST_FLAG);
583:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
584:       assertEquals(47, Node.IS_DISPATCHER);
585:       assertEquals(30, Node.VAR_ARGS_NAME);
586:       assertTrue(boolean2 == boolean0);
587:       assertTrue(boolean2 == boolean1);
588:       assertFalse(boolean2);
589:       assertFalse(node0.isCast());
590:       assertFalse(node0.hasOneChild());
591:       assertFalse(node0.isLabelName());
592:       assertFalse(node0.isGetElem());
593:       assertFalse(node0.isExprResult());
594:       assertEquals((-1), node0.getSourcePosition());
595:       assertFalse(node0.isNumber());
596:       assertFalse(node0.isOr());
597:       assertFalse(node0.isContinue());
598:       assertFalse(node0.isAnd());
599:       assertEquals((-598), node0.getType());
600:       assertFalse(node0.isDo());
601:       assertFalse(node0.isNew());
602:       assertFalse(node0.isAssignAdd());
603:       assertFalse(node0.isLabel());
604:       assertFalse(node0.isThrow());
605:       assertFalse(node0.isVar());
606:       assertFalse(node0.isSwitch());
607:       assertFalse(node0.isParamList());
608:       assertEquals((-1), node0.getCharno());
609:       assertFalse(node0.isStringKey());
610:       assertFalse(node0.hasMoreThanOneChild());
611:       assertFalse(node0.isCatch());
612:       assertFalse(node0.isWith());
613:       assertEquals((-1), node0.getLineno());
614:       assertFalse(node0.isCase());
615:       assertFalse(node0.isInstanceOf());
616:       assertFalse(node0.isScript());
617:       assertFalse(node0.isThis());
618:       assertFalse(node0.isRegExp());
619:       assertFalse(node0.isTry());
620:       assertFalse(node0.isHook());
621:       assertFalse(node0.isBlock());
622:       assertFalse(node0.isFor());
623:       assertFalse(node0.isArrayLit());
624:       assertFalse(node0.isEmpty());
625:       assertFalse(node0.isNE());
626:       assertFalse(node0.isDebugger());
627:       assertFalse(node0.isIf());
628:       assertFalse(node0.isDelProp());
629:       assertFalse(node0.isVoid());
630:       assertFalse(node0.isGetterDef());
631:       assertFalse(node0.isTrue());
632:       assertEquals(0, node0.getChildCount());
633:       assertFalse(node0.isIn());
634:       assertFalse(node0.isInc());
635:       assertFalse(node0.isFunction());
636:       assertFalse(node0.isSetterDef());
637:       assertFalse(node0.isDefaultCase());
638:       assertFalse(node0.isFalse());
639:       assertFalse(node0.isName());
640:       assertFalse(node0.isBreak());
641:       assertFalse(node0.isAdd());
642:       assertFalse(node0.isCall());
643:       assertFalse(node0.isNull());
644:       assertFalse(node0.isNot());
645:       assertFalse(node0.isObjectLit());
646:       assertFalse(node0.isString());
647:       assertFalse(node0.isGetProp());
648:       assertFalse(node0.isComma());
649:       assertFalse(node0.isDec());
650:       assertFalse(node0.isTypeOf());
651:       assertFalse(node0.isReturn());
652:       assertFalse(node0.isAssign());
653:       assertFalse(node0.isWhile());
654:       assertFalse(node0.hasChildren());
655:       
656:       // Undeclared exception!
657:       try { 
658:         node0.setSideEffectFlags((-1));
659:         fail("Expecting exception: IllegalStateException");
660:       
661:       } catch(IllegalStateException e) {
662:          //
663:          // -598
664:          //
665:          verifyException("com.google.javascript.rhino.Token", e);
666:       }
667:   }
668: }
RegularFileObject[/tmp/EvoSuite_114_1628158418985/com/google/javascript/rhino/Node_114_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:39 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_114_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_114_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_114_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.jstype.TemplatizedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.collect.AbstractIndexedListIterator",
335:       "com.google.common.collect.Iterators$11",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.common.base.Objects",
339:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
349:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSTypeExpression",
352:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
353:       "com.google.javascript.rhino.jstype.JSType$TypePair",
354:       "com.google.common.collect.Platform",
355:       "com.google.common.collect.Iterators$12",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.JSType$2",
358:       "com.google.common.collect.AbstractMultimap$Values",
359:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
360:       "com.google.common.collect.AbstractMapBasedMultimap$1",
361:       "com.google.common.collect.Multimaps$Entries",
362:       "com.google.common.collect.AbstractMultimap$Entries",
363:       "com.google.common.collect.AbstractMapBasedMultimap$2"
364:     );
365:   }
366: }

[MASTER] 10:13:39.039 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-598), "", (-598), 108);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node0);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());

boolean boolean0 = node0.isBlock();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(boolean0);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());

boolean boolean1 = node0.isNoSideEffectsCall();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());

int int0 = node0.getLineno();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals((-1), int0);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());

Iterable<Node> iterable0 = node0.children();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(iterable0);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(iterable0.contains(node0));

boolean boolean2 = node0.isOptionalArg();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertEquals((-598), node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());

node0.setSideEffectFlags((-1));

[MASTER] 10:13:43.695 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_132_1628158423654/com/google/javascript/rhino/Node_132_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_132_1628158423654/com/google/javascript/rhino/Node_132_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:43.695 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:43.695 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:43.696 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 441
[MASTER] 10:13:43.696 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_132_1628158423654/com/google/javascript/rhino/Node_132_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_132_tmp__ESTest extends Node_132_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(0.0, 0, 0);
23:       assertEquals(57, Node.REFLECTED_OBJECT);
24:       assertEquals(40, Node.ORIGINALNAME_PROP);
25:       assertEquals(15, Node.NO_SIDE_EFFECTS);
26:       assertEquals(39, Node.EMPTY_BLOCK);
27:       assertEquals(54, Node.SLASH_V);
28:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
29:       assertEquals(52, Node.LENGTH);
30:       assertEquals(8, Node.FLAG_NO_THROWS);
31:       assertEquals(50, Node.FREE_CALL);
32:       assertEquals(4095, Node.COLUMN_MASK);
33:       assertEquals(12, Node.COLUMN_BITS);
34:       assertEquals(48, Node.DIRECTIVES);
35:       assertEquals(1, Node.DECR_FLAG);
36:       assertEquals(37, Node.OPT_ARG_NAME);
37:       assertEquals(49, Node.DIRECT_EVAL);
38:       assertEquals(32, Node.INCRDECR_PROP);
39:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
40:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
41:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
42:       assertEquals(53, Node.INPUT_ID);
43:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
44:       assertEquals(56, Node.CHANGE_TIME);
45:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
46:       assertEquals(43, Node.IS_CONSTANT_NAME);
47:       assertEquals(36, Node.QUOTED_PROP);
48:       assertEquals(29, Node.JSDOC_INFO_PROP);
49:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
50:       assertEquals(51, Node.STATIC_SOURCE_FILE);
51:       assertEquals(55, Node.INFERRED_FUNCTION);
52:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
53:       assertEquals(46, Node.IS_NAMESPACE);
54:       assertEquals(57, Node.LAST_PROP);
55:       assertEquals(47, Node.IS_DISPATCHER);
56:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
57:       assertEquals(2, Node.POST_FLAG);
58:       assertEquals(30, Node.VAR_ARGS_NAME);
59:       assertNotNull(node0);
60:       assertFalse(node0.isVar());
61:       assertFalse(node0.isAdd());
62:       assertFalse(node0.isCall());
63:       assertFalse(node0.isNull());
64:       assertEquals(0, node0.getSourcePosition());
65:       assertFalse(node0.isName());
66:       assertFalse(node0.isParamList());
67:       assertFalse(node0.isStringKey());
68:       assertEquals(0, node0.getChildCount());
69:       assertFalse(node0.isOr());
70:       assertEquals(0, node0.getLineno());
71:       assertFalse(node0.isContinue());
72:       assertFalse(node0.isDefaultCase());
73:       assertFalse(node0.isFunction());
74:       assertFalse(node0.isSetterDef());
75:       assertFalse(node0.isNew());
76:       assertFalse(node0.isDo());
77:       assertFalse(node0.isAssignAdd());
78:       assertFalse(node0.isLabel());
79:       assertFalse(node0.isAssign());
80:       assertFalse(node0.isEmpty());
81:       assertFalse(node0.isGetElem());
82:       assertFalse(node0.isExprResult());
83:       assertFalse(node0.isCast());
84:       assertFalse(node0.isDelProp());
85:       assertFalse(node0.isVoid());
86:       assertFalse(node0.isDebugger());
87:       assertFalse(node0.isTrue());
88:       assertFalse(node0.isAnd());
89:       assertFalse(node0.isObjectLit());
90:       assertTrue(node0.isNumber());
91:       assertFalse(node0.isNot());
92:       assertFalse(node0.isGetProp());
93:       assertFalse(node0.isString());
94:       assertFalse(node0.isTypeOf());
95:       assertFalse(node0.hasChildren());
96:       assertFalse(node0.isComma());
97:       assertFalse(node0.isDec());
98:       assertFalse(node0.isReturn());
99:       assertFalse(node0.isWhile());
100:       assertFalse(node0.isHook());
101:       assertFalse(node0.isFalse());
102:       assertFalse(node0.isSwitch());
103:       assertFalse(node0.isBreak());
104:       assertFalse(node0.isIn());
105:       assertFalse(node0.isInc());
106:       assertFalse(node0.isThrow());
107:       assertFalse(node0.isArrayLit());
108:       assertFalse(node0.hasOneChild());
109:       assertEquals(0, node0.getCharno());
110:       assertFalse(node0.isGetterDef());
111:       assertFalse(node0.isLabelName());
112:       assertFalse(node0.isIf());
113:       assertFalse(node0.isNE());
114:       assertFalse(node0.hasMoreThanOneChild());
115:       assertFalse(node0.isCase());
116:       assertFalse(node0.isWith());
117:       assertFalse(node0.isCatch());
118:       assertFalse(node0.isInstanceOf());
119:       assertFalse(node0.isRegExp());
120:       assertFalse(node0.isScript());
121:       assertFalse(node0.isThis());
122:       assertFalse(node0.isTry());
123:       assertFalse(node0.isFor());
124:       assertFalse(node0.isBlock());
125:       assertEquals(39, node0.getType());
126:       
127:       boolean boolean0 = node0.isNoSideEffectsCall();
128:       assertEquals(57, Node.REFLECTED_OBJECT);
129:       assertEquals(40, Node.ORIGINALNAME_PROP);
130:       assertEquals(15, Node.NO_SIDE_EFFECTS);
131:       assertEquals(39, Node.EMPTY_BLOCK);
132:       assertEquals(54, Node.SLASH_V);
133:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
134:       assertEquals(52, Node.LENGTH);
135:       assertEquals(8, Node.FLAG_NO_THROWS);
136:       assertEquals(50, Node.FREE_CALL);
137:       assertEquals(4095, Node.COLUMN_MASK);
138:       assertEquals(12, Node.COLUMN_BITS);
139:       assertEquals(48, Node.DIRECTIVES);
140:       assertEquals(1, Node.DECR_FLAG);
141:       assertEquals(37, Node.OPT_ARG_NAME);
142:       assertEquals(49, Node.DIRECT_EVAL);
143:       assertEquals(32, Node.INCRDECR_PROP);
144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
145:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
146:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
147:       assertEquals(53, Node.INPUT_ID);
148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
149:       assertEquals(56, Node.CHANGE_TIME);
150:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
151:       assertEquals(43, Node.IS_CONSTANT_NAME);
152:       assertEquals(36, Node.QUOTED_PROP);
153:       assertEquals(29, Node.JSDOC_INFO_PROP);
154:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
156:       assertEquals(55, Node.INFERRED_FUNCTION);
157:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
158:       assertEquals(46, Node.IS_NAMESPACE);
159:       assertEquals(57, Node.LAST_PROP);
160:       assertEquals(47, Node.IS_DISPATCHER);
161:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
162:       assertEquals(2, Node.POST_FLAG);
163:       assertEquals(30, Node.VAR_ARGS_NAME);
164:       assertFalse(boolean0);
165:       assertFalse(node0.isVar());
166:       assertFalse(node0.isAdd());
167:       assertFalse(node0.isCall());
168:       assertFalse(node0.isNull());
169:       assertEquals(0, node0.getSourcePosition());
170:       assertFalse(node0.isName());
171:       assertFalse(node0.isParamList());
172:       assertFalse(node0.isStringKey());
173:       assertEquals(0, node0.getChildCount());
174:       assertFalse(node0.isOr());
175:       assertEquals(0, node0.getLineno());
176:       assertFalse(node0.isContinue());
177:       assertFalse(node0.isDefaultCase());
178:       assertFalse(node0.isFunction());
179:       assertFalse(node0.isSetterDef());
180:       assertFalse(node0.isNew());
181:       assertFalse(node0.isDo());
182:       assertFalse(node0.isAssignAdd());
183:       assertFalse(node0.isLabel());
184:       assertFalse(node0.isAssign());
185:       assertFalse(node0.isEmpty());
186:       assertFalse(node0.isGetElem());
187:       assertFalse(node0.isExprResult());
188:       assertFalse(node0.isCast());
189:       assertFalse(node0.isDelProp());
190:       assertFalse(node0.isVoid());
191:       assertFalse(node0.isDebugger());
192:       assertFalse(node0.isTrue());
193:       assertFalse(node0.isAnd());
194:       assertFalse(node0.isObjectLit());
195:       assertTrue(node0.isNumber());
196:       assertFalse(node0.isNot());
197:       assertFalse(node0.isGetProp());
198:       assertFalse(node0.isString());
199:       assertFalse(node0.isTypeOf());
200:       assertFalse(node0.hasChildren());
201:       assertFalse(node0.isComma());
202:       assertFalse(node0.isDec());
203:       assertFalse(node0.isReturn());
204:       assertFalse(node0.isWhile());
205:       assertFalse(node0.isHook());
206:       assertFalse(node0.isFalse());
207:       assertFalse(node0.isSwitch());
208:       assertFalse(node0.isBreak());
209:       assertFalse(node0.isIn());
210:       assertFalse(node0.isInc());
211:       assertFalse(node0.isThrow());
212:       assertFalse(node0.isArrayLit());
213:       assertFalse(node0.hasOneChild());
214:       assertEquals(0, node0.getCharno());
215:       assertFalse(node0.isGetterDef());
216:       assertFalse(node0.isLabelName());
217:       assertFalse(node0.isIf());
218:       assertFalse(node0.isNE());
219:       assertFalse(node0.hasMoreThanOneChild());
220:       assertFalse(node0.isCase());
221:       assertFalse(node0.isWith());
222:       assertFalse(node0.isCatch());
223:       assertFalse(node0.isInstanceOf());
224:       assertFalse(node0.isRegExp());
225:       assertFalse(node0.isScript());
226:       assertFalse(node0.isThis());
227:       assertFalse(node0.isTry());
228:       assertFalse(node0.isFor());
229:       assertFalse(node0.isBlock());
230:       assertEquals(39, node0.getType());
231:       
232:       int int0 = node0.getLineno();
233:       assertEquals(57, Node.REFLECTED_OBJECT);
234:       assertEquals(40, Node.ORIGINALNAME_PROP);
235:       assertEquals(15, Node.NO_SIDE_EFFECTS);
236:       assertEquals(39, Node.EMPTY_BLOCK);
237:       assertEquals(54, Node.SLASH_V);
238:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
239:       assertEquals(52, Node.LENGTH);
240:       assertEquals(8, Node.FLAG_NO_THROWS);
241:       assertEquals(50, Node.FREE_CALL);
242:       assertEquals(4095, Node.COLUMN_MASK);
243:       assertEquals(12, Node.COLUMN_BITS);
244:       assertEquals(48, Node.DIRECTIVES);
245:       assertEquals(1, Node.DECR_FLAG);
246:       assertEquals(37, Node.OPT_ARG_NAME);
247:       assertEquals(49, Node.DIRECT_EVAL);
248:       assertEquals(32, Node.INCRDECR_PROP);
249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
250:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
251:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
252:       assertEquals(53, Node.INPUT_ID);
253:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
254:       assertEquals(56, Node.CHANGE_TIME);
255:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
256:       assertEquals(43, Node.IS_CONSTANT_NAME);
257:       assertEquals(36, Node.QUOTED_PROP);
258:       assertEquals(29, Node.JSDOC_INFO_PROP);
259:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
260:       assertEquals(51, Node.STATIC_SOURCE_FILE);
261:       assertEquals(55, Node.INFERRED_FUNCTION);
262:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
263:       assertEquals(46, Node.IS_NAMESPACE);
264:       assertEquals(57, Node.LAST_PROP);
265:       assertEquals(47, Node.IS_DISPATCHER);
266:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
267:       assertEquals(2, Node.POST_FLAG);
268:       assertEquals(30, Node.VAR_ARGS_NAME);
269:       assertEquals(0, int0);
270:       assertFalse(node0.isVar());
271:       assertFalse(node0.isAdd());
272:       assertFalse(node0.isCall());
273:       assertFalse(node0.isNull());
274:       assertEquals(0, node0.getSourcePosition());
275:       assertFalse(node0.isName());
276:       assertFalse(node0.isParamList());
277:       assertFalse(node0.isStringKey());
278:       assertEquals(0, node0.getChildCount());
279:       assertFalse(node0.isOr());
280:       assertEquals(0, node0.getLineno());
281:       assertFalse(node0.isContinue());
282:       assertFalse(node0.isDefaultCase());
283:       assertFalse(node0.isFunction());
284:       assertFalse(node0.isSetterDef());
285:       assertFalse(node0.isNew());
286:       assertFalse(node0.isDo());
287:       assertFalse(node0.isAssignAdd());
288:       assertFalse(node0.isLabel());
289:       assertFalse(node0.isAssign());
290:       assertFalse(node0.isEmpty());
291:       assertFalse(node0.isGetElem());
292:       assertFalse(node0.isExprResult());
293:       assertFalse(node0.isCast());
294:       assertFalse(node0.isDelProp());
295:       assertFalse(node0.isVoid());
296:       assertFalse(node0.isDebugger());
297:       assertFalse(node0.isTrue());
298:       assertFalse(node0.isAnd());
299:       assertFalse(node0.isObjectLit());
300:       assertTrue(node0.isNumber());
301:       assertFalse(node0.isNot());
302:       assertFalse(node0.isGetProp());
303:       assertFalse(node0.isString());
304:       assertFalse(node0.isTypeOf());
305:       assertFalse(node0.hasChildren());
306:       assertFalse(node0.isComma());
307:       assertFalse(node0.isDec());
308:       assertFalse(node0.isReturn());
309:       assertFalse(node0.isWhile());
310:       assertFalse(node0.isHook());
311:       assertFalse(node0.isFalse());
312:       assertFalse(node0.isSwitch());
313:       assertFalse(node0.isBreak());
314:       assertFalse(node0.isIn());
315:       assertFalse(node0.isInc());
316:       assertFalse(node0.isThrow());
317:       assertFalse(node0.isArrayLit());
318:       assertFalse(node0.hasOneChild());
319:       assertEquals(0, node0.getCharno());
320:       assertFalse(node0.isGetterDef());
321:       assertFalse(node0.isLabelName());
322:       assertFalse(node0.isIf());
323:       assertFalse(node0.isNE());
324:       assertFalse(node0.hasMoreThanOneChild());
325:       assertFalse(node0.isCase());
326:       assertFalse(node0.isWith());
327:       assertFalse(node0.isCatch());
328:       assertFalse(node0.isInstanceOf());
329:       assertFalse(node0.isRegExp());
330:       assertFalse(node0.isScript());
331:       assertFalse(node0.isThis());
332:       assertFalse(node0.isTry());
333:       assertFalse(node0.isFor());
334:       assertFalse(node0.isBlock());
335:       assertEquals(39, node0.getType());
336:       
337:       Iterable<Node> iterable0 = node0.children();
338:       assertEquals(57, Node.REFLECTED_OBJECT);
339:       assertEquals(40, Node.ORIGINALNAME_PROP);
340:       assertEquals(15, Node.NO_SIDE_EFFECTS);
341:       assertEquals(39, Node.EMPTY_BLOCK);
342:       assertEquals(54, Node.SLASH_V);
343:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
344:       assertEquals(52, Node.LENGTH);
345:       assertEquals(8, Node.FLAG_NO_THROWS);
346:       assertEquals(50, Node.FREE_CALL);
347:       assertEquals(4095, Node.COLUMN_MASK);
348:       assertEquals(12, Node.COLUMN_BITS);
349:       assertEquals(48, Node.DIRECTIVES);
350:       assertEquals(1, Node.DECR_FLAG);
351:       assertEquals(37, Node.OPT_ARG_NAME);
352:       assertEquals(49, Node.DIRECT_EVAL);
353:       assertEquals(32, Node.INCRDECR_PROP);
354:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
355:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
356:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
357:       assertEquals(53, Node.INPUT_ID);
358:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
359:       assertEquals(56, Node.CHANGE_TIME);
360:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
361:       assertEquals(43, Node.IS_CONSTANT_NAME);
362:       assertEquals(36, Node.QUOTED_PROP);
363:       assertEquals(29, Node.JSDOC_INFO_PROP);
364:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
365:       assertEquals(51, Node.STATIC_SOURCE_FILE);
366:       assertEquals(55, Node.INFERRED_FUNCTION);
367:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
368:       assertEquals(46, Node.IS_NAMESPACE);
369:       assertEquals(57, Node.LAST_PROP);
370:       assertEquals(47, Node.IS_DISPATCHER);
371:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
372:       assertEquals(2, Node.POST_FLAG);
373:       assertEquals(30, Node.VAR_ARGS_NAME);
374:       assertNotNull(iterable0);
375:       assertFalse(node0.isVar());
376:       assertFalse(node0.isAdd());
377:       assertFalse(node0.isCall());
378:       assertFalse(node0.isNull());
379:       assertEquals(0, node0.getSourcePosition());
380:       assertFalse(node0.isName());
381:       assertFalse(node0.isParamList());
382:       assertFalse(node0.isStringKey());
383:       assertEquals(0, node0.getChildCount());
384:       assertFalse(node0.isOr());
385:       assertEquals(0, node0.getLineno());
386:       assertFalse(node0.isContinue());
387:       assertFalse(node0.isDefaultCase());
388:       assertFalse(node0.isFunction());
389:       assertFalse(node0.isSetterDef());
390:       assertFalse(node0.isNew());
391:       assertFalse(node0.isDo());
392:       assertFalse(node0.isAssignAdd());
393:       assertFalse(node0.isLabel());
394:       assertFalse(node0.isAssign());
395:       assertFalse(node0.isEmpty());
396:       assertFalse(node0.isGetElem());
397:       assertFalse(node0.isExprResult());
398:       assertFalse(node0.isCast());
399:       assertFalse(node0.isDelProp());
400:       assertFalse(node0.isVoid());
401:       assertFalse(node0.isDebugger());
402:       assertFalse(node0.isTrue());
403:       assertFalse(node0.isAnd());
404:       assertFalse(node0.isObjectLit());
405:       assertTrue(node0.isNumber());
406:       assertFalse(node0.isNot());
407:       assertFalse(node0.isGetProp());
408:       assertFalse(node0.isString());
409:       assertFalse(node0.isTypeOf());
410:       assertFalse(node0.hasChildren());
411:       assertFalse(node0.isComma());
412:       assertFalse(node0.isDec());
413:       assertFalse(node0.isReturn());
414:       assertFalse(node0.isWhile());
415:       assertFalse(node0.isHook());
416:       assertFalse(node0.isFalse());
417:       assertFalse(node0.isSwitch());
418:       assertFalse(node0.isBreak());
419:       assertFalse(node0.isIn());
420:       assertFalse(node0.isInc());
421:       assertFalse(node0.isThrow());
422:       assertFalse(node0.isArrayLit());
423:       assertFalse(node0.hasOneChild());
424:       assertEquals(0, node0.getCharno());
425:       assertFalse(node0.isGetterDef());
426:       assertFalse(node0.isLabelName());
427:       assertFalse(node0.isIf());
428:       assertFalse(node0.isNE());
429:       assertFalse(node0.hasMoreThanOneChild());
430:       assertFalse(node0.isCase());
431:       assertFalse(node0.isWith());
432:       assertFalse(node0.isCatch());
433:       assertFalse(node0.isInstanceOf());
434:       assertFalse(node0.isRegExp());
435:       assertFalse(node0.isScript());
436:       assertFalse(node0.isThis());
437:       assertFalse(node0.isTry());
438:       assertFalse(node0.isFor());
439:       assertFalse(node0.isBlock());
440:       assertEquals(39, node0.getType());
441:       assertFalse(iterable0.contains(node0));
442:       
443:       boolean boolean1 = node0.isOptionalArg();
444:       assertEquals(57, Node.REFLECTED_OBJECT);
445:       assertEquals(40, Node.ORIGINALNAME_PROP);
446:       assertEquals(15, Node.NO_SIDE_EFFECTS);
447:       assertEquals(39, Node.EMPTY_BLOCK);
448:       assertEquals(54, Node.SLASH_V);
449:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
450:       assertEquals(52, Node.LENGTH);
451:       assertEquals(8, Node.FLAG_NO_THROWS);
452:       assertEquals(50, Node.FREE_CALL);
453:       assertEquals(4095, Node.COLUMN_MASK);
454:       assertEquals(12, Node.COLUMN_BITS);
455:       assertEquals(48, Node.DIRECTIVES);
456:       assertEquals(1, Node.DECR_FLAG);
457:       assertEquals(37, Node.OPT_ARG_NAME);
458:       assertEquals(49, Node.DIRECT_EVAL);
459:       assertEquals(32, Node.INCRDECR_PROP);
460:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
461:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
462:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
463:       assertEquals(53, Node.INPUT_ID);
464:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
465:       assertEquals(56, Node.CHANGE_TIME);
466:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
467:       assertEquals(43, Node.IS_CONSTANT_NAME);
468:       assertEquals(36, Node.QUOTED_PROP);
469:       assertEquals(29, Node.JSDOC_INFO_PROP);
470:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
471:       assertEquals(51, Node.STATIC_SOURCE_FILE);
472:       assertEquals(55, Node.INFERRED_FUNCTION);
473:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
474:       assertEquals(46, Node.IS_NAMESPACE);
475:       assertEquals(57, Node.LAST_PROP);
476:       assertEquals(47, Node.IS_DISPATCHER);
477:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
478:       assertEquals(2, Node.POST_FLAG);
479:       assertEquals(30, Node.VAR_ARGS_NAME);
480:       assertTrue(boolean1 == boolean0);
481:       assertFalse(boolean1);
482:       assertFalse(node0.isVar());
483:       assertFalse(node0.isAdd());
484:       assertFalse(node0.isCall());
485:       assertFalse(node0.isNull());
486:       assertEquals(0, node0.getSourcePosition());
487:       assertFalse(node0.isName());
488:       assertFalse(node0.isParamList());
489:       assertFalse(node0.isStringKey());
490:       assertEquals(0, node0.getChildCount());
491:       assertFalse(node0.isOr());
492:       assertEquals(0, node0.getLineno());
493:       assertFalse(node0.isContinue());
494:       assertFalse(node0.isDefaultCase());
495:       assertFalse(node0.isFunction());
496:       assertFalse(node0.isSetterDef());
497:       assertFalse(node0.isNew());
498:       assertFalse(node0.isDo());
499:       assertFalse(node0.isAssignAdd());
500:       assertFalse(node0.isLabel());
501:       assertFalse(node0.isAssign());
502:       assertFalse(node0.isEmpty());
503:       assertFalse(node0.isGetElem());
504:       assertFalse(node0.isExprResult());
505:       assertFalse(node0.isCast());
506:       assertFalse(node0.isDelProp());
507:       assertFalse(node0.isVoid());
508:       assertFalse(node0.isDebugger());
509:       assertFalse(node0.isTrue());
510:       assertFalse(node0.isAnd());
511:       assertFalse(node0.isObjectLit());
512:       assertTrue(node0.isNumber());
513:       assertFalse(node0.isNot());
514:       assertFalse(node0.isGetProp());
515:       assertFalse(node0.isString());
516:       assertFalse(node0.isTypeOf());
517:       assertFalse(node0.hasChildren());
518:       assertFalse(node0.isComma());
519:       assertFalse(node0.isDec());
520:       assertFalse(node0.isReturn());
521:       assertFalse(node0.isWhile());
522:       assertFalse(node0.isHook());
523:       assertFalse(node0.isFalse());
524:       assertFalse(node0.isSwitch());
525:       assertFalse(node0.isBreak());
526:       assertFalse(node0.isIn());
527:       assertFalse(node0.isInc());
528:       assertFalse(node0.isThrow());
529:       assertFalse(node0.isArrayLit());
530:       assertFalse(node0.hasOneChild());
531:       assertEquals(0, node0.getCharno());
532:       assertFalse(node0.isGetterDef());
533:       assertFalse(node0.isLabelName());
534:       assertFalse(node0.isIf());
535:       assertFalse(node0.isNE());
536:       assertFalse(node0.hasMoreThanOneChild());
537:       assertFalse(node0.isCase());
538:       assertFalse(node0.isWith());
539:       assertFalse(node0.isCatch());
540:       assertFalse(node0.isInstanceOf());
541:       assertFalse(node0.isRegExp());
542:       assertFalse(node0.isScript());
543:       assertFalse(node0.isThis());
544:       assertFalse(node0.isTry());
545:       assertFalse(node0.isFor());
546:       assertFalse(node0.isBlock());
547:       assertEquals(39, node0.getType());
548:       
549:       // Undeclared exception!
550:       try { 
551:         node0.setSideEffectFlags(0);
552:         fail("Expecting exception: IllegalArgumentException");
553:       
554:       } catch(IllegalArgumentException e) {
555:          //
556:          // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
557:          //
558:          verifyException("com.google.common.base.Preconditions", e);
559:       }
560:   }
561: }
RegularFileObject[/tmp/EvoSuite_132_1628158423654/com/google/javascript/rhino/Node_132_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_132_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_132_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_132_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.jstype.TemplatizedType",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.collect.AbstractIndexedListIterator",
335:       "com.google.common.collect.Iterators$11",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.common.base.Objects",
339:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
348:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
349:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSTypeExpression",
352:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
353:       "com.google.javascript.rhino.jstype.JSType$TypePair",
354:       "com.google.common.collect.Platform",
355:       "com.google.common.collect.Iterators$12",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.JSType$2",
358:       "com.google.common.collect.AbstractMultimap$Values",
359:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
360:       "com.google.common.collect.AbstractMapBasedMultimap$1",
361:       "com.google.common.collect.Multimaps$Entries",
362:       "com.google.common.collect.AbstractMultimap$Entries",
363:       "com.google.common.collect.AbstractMapBasedMultimap$2"
364:     );
365:   }
366: }

[MASTER] 10:13:43.704 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0, 0, 0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node0);
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(0, node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());

boolean boolean0 = node0.isNoSideEffectsCall();
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(boolean0);
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(0, node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());

int int0 = node0.getLineno();
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, int0);
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(0, node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());

Iterable<Node> iterable0 = node0.children();
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(iterable0);
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(0, node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(iterable0.contains(node0));

boolean boolean1 = node0.isOptionalArg();
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(0, node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());

node0.setSideEffectFlags(0);

[MASTER] 10:14:09.400 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:09.702 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:09.988 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:10.247 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:10.502 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:11.383 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:11.598 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:11.792 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:11.991 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:12.199 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:12.414 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:12.593 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:12.771 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:12.999 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:13.189 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:13.420 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:13.615 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:13.821 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:14.051 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:14.267 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:14.510 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:14.687 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:14.903 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:15.118 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:15.334 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:15.519 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:15.694 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:15.886 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:16.067 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:16.256 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:16.452 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:17.419 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:17.594 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:17.802 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:17.996 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:18.189 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:18.383 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:18.574 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:18.762 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:18.979 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:19.192 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:19.412 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:19.609 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:19.801 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:20.012 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:20.251 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:20.437 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:20.613 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:20.825 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:21.025 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:21.275 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:21.573 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/9
* Done!

* Computation finished
