* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 12316
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 11009579
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:45:10.550 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
* Search finished after 604s and 408 generations, 185763 statements, best individual has fitness: 2980.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 17:56:33.982 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 798
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 714
* Number of covered goals: 606
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 99
* Number of covered goals: 99
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 467
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 46%
* Total number of goals: 4536
* Number of covered goals: 2100
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 714
* Number of covered goals: 569
* Generated 682 tests with total length 8976
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:57:49.996 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6992666666666667% of time used, but only 41/682 tests minimized), falling back to using all assertions
[MASTER] 17:58:08.186 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 17:58:20.118 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 12 seconds more than allowed.
[MASTER] 17:58:25.495 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_51_1629223105124/com/google/javascript/rhino/Node_51_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_51_1629223105124/com/google/javascript/rhino/Node_51_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:25.495 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:25.495 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:25.501 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1084
[MASTER] 17:58:25.504 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_51_1629223105124/com/google/javascript/rhino/Node_51_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:25 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_51_tmp__ESTest extends Node_51_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(0, "mEwD%^$0r>}", 0, 0);
21:       assertNotNull(node0);
22:       assertFalse(node0.isIn());
23:       assertFalse(node0.isString());
24:       assertFalse(node0.isIf());
25:       assertFalse(node0.isGetterDef());
26:       assertFalse(node0.isDelProp());
27:       assertFalse(node0.isSwitch());
28:       assertFalse(node0.isNE());
29:       assertFalse(node0.isArrayLit());
30:       assertFalse(node0.isFalse());
31:       assertFalse(node0.isInc());
32:       assertFalse(node0.isFunction());
33:       assertFalse(node0.isEmpty());
34:       assertFalse(node0.isDefaultCase());
35:       assertFalse(node0.isThrow());
36:       assertEquals(0, node0.getLineno());
37:       assertFalse(node0.isObjectLit());
38:       assertFalse(node0.isGetProp());
39:       assertEquals(0, node0.getSourcePosition());
40:       assertFalse(node0.isBreak());
41:       assertFalse(node0.isNot());
42:       assertFalse(node0.isAnd());
43:       assertFalse(node0.isDebugger());
44:       assertFalse(node0.isVoid());
45:       assertFalse(node0.isTrue());
46:       assertFalse(node0.isName());
47:       assertFalse(node0.isNull());
48:       assertFalse(node0.isExprResult());
49:       assertEquals(0, node0.getType());
50:       assertFalse(node0.isGetElem());
51:       assertFalse(node0.isCall());
52:       assertFalse(node0.hasChildren());
53:       assertFalse(node0.isAssign());
54:       assertFalse(node0.isTypeOf());
55:       assertFalse(node0.isDec());
56:       assertFalse(node0.isComma());
57:       assertFalse(node0.isWhile());
58:       assertFalse(node0.isReturn());
59:       assertFalse(node0.isLabel());
60:       assertFalse(node0.isOr());
61:       assertFalse(node0.isContinue());
62:       assertFalse(node0.hasMoreThanOneChild());
63:       assertFalse(node0.isNumber());
64:       assertFalse(node0.isLabelName());
65:       assertFalse(node0.isNew());
66:       assertFalse(node0.isCast());
67:       assertFalse(node0.isAdd());
68:       assertFalse(node0.isDo());
69:       assertFalse(node0.isVar());
70:       assertFalse(node0.isAssignAdd());
71:       assertEquals(0, node0.getChildCount());
72:       assertFalse(node0.isSetterDef());
73:       assertFalse(node0.isInstanceOf());
74:       assertFalse(node0.isCatch());
75:       assertEquals(0, node0.getCharno());
76:       assertFalse(node0.isStringKey());
77:       assertFalse(node0.isParamList());
78:       assertFalse(node0.isHook());
79:       assertFalse(node0.isTry());
80:       assertFalse(node0.hasOneChild());
81:       assertFalse(node0.isScript());
82:       assertFalse(node0.isWith());
83:       assertFalse(node0.isRegExp());
84:       assertFalse(node0.isCase());
85:       assertFalse(node0.isThis());
86:       assertFalse(node0.isBlock());
87:       assertFalse(node0.isFor());
88:       assertEquals(55, Node.INFERRED_FUNCTION);
89:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
90:       assertEquals(4095, Node.COLUMN_MASK);
91:       assertEquals(8, Node.FLAG_NO_THROWS);
92:       assertEquals(39, Node.EMPTY_BLOCK);
93:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
94:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
95:       assertEquals(53, Node.INPUT_ID);
96:       assertEquals(57, Node.REFLECTED_OBJECT);
97:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
98:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
99:       assertEquals(52, Node.LENGTH);
100:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
101:       assertEquals(56, Node.CHANGE_TIME);
102:       assertEquals(36, Node.QUOTED_PROP);
103:       assertEquals(48, Node.DIRECTIVES);
104:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
105:       assertEquals(37, Node.OPT_ARG_NAME);
106:       assertEquals(49, Node.DIRECT_EVAL);
107:       assertEquals(46, Node.IS_NAMESPACE);
108:       assertEquals(51, Node.STATIC_SOURCE_FILE);
109:       assertEquals(12, Node.COLUMN_BITS);
110:       assertEquals(2, Node.POST_FLAG);
111:       assertEquals(30, Node.VAR_ARGS_NAME);
112:       assertEquals(15, Node.NO_SIDE_EFFECTS);
113:       assertEquals(57, Node.LAST_PROP);
114:       assertEquals(47, Node.IS_DISPATCHER);
115:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
116:       assertEquals(29, Node.JSDOC_INFO_PROP);
117:       assertEquals(1, Node.DECR_FLAG);
118:       assertEquals(32, Node.INCRDECR_PROP);
119:       assertEquals(40, Node.ORIGINALNAME_PROP);
120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
121:       assertEquals(50, Node.FREE_CALL);
122:       assertEquals(43, Node.IS_CONSTANT_NAME);
123:       assertEquals(54, Node.SLASH_V);
124:       
125:       node0.setSourceEncodedPositionForTree(0);
126:       assertFalse(node0.isIn());
127:       assertFalse(node0.isString());
128:       assertFalse(node0.isIf());
129:       assertFalse(node0.isGetterDef());
130:       assertFalse(node0.isDelProp());
131:       assertFalse(node0.isSwitch());
132:       assertFalse(node0.isNE());
133:       assertFalse(node0.isArrayLit());
134:       assertFalse(node0.isFalse());
135:       assertFalse(node0.isInc());
136:       assertFalse(node0.isFunction());
137:       assertFalse(node0.isEmpty());
138:       assertFalse(node0.isDefaultCase());
139:       assertFalse(node0.isThrow());
140:       assertEquals(0, node0.getLineno());
141:       assertFalse(node0.isObjectLit());
142:       assertFalse(node0.isGetProp());
143:       assertEquals(0, node0.getSourcePosition());
144:       assertFalse(node0.isBreak());
145:       assertFalse(node0.isNot());
146:       assertFalse(node0.isAnd());
147:       assertFalse(node0.isDebugger());
148:       assertFalse(node0.isVoid());
149:       assertFalse(node0.isTrue());
150:       assertFalse(node0.isName());
151:       assertFalse(node0.isNull());
152:       assertFalse(node0.isExprResult());
153:       assertEquals(0, node0.getType());
154:       assertFalse(node0.isGetElem());
155:       assertFalse(node0.isCall());
156:       assertFalse(node0.hasChildren());
157:       assertFalse(node0.isAssign());
158:       assertFalse(node0.isTypeOf());
159:       assertFalse(node0.isDec());
160:       assertFalse(node0.isComma());
161:       assertFalse(node0.isWhile());
162:       assertFalse(node0.isReturn());
163:       assertFalse(node0.isLabel());
164:       assertFalse(node0.isOr());
165:       assertFalse(node0.isContinue());
166:       assertFalse(node0.hasMoreThanOneChild());
167:       assertFalse(node0.isNumber());
168:       assertFalse(node0.isLabelName());
169:       assertFalse(node0.isNew());
170:       assertFalse(node0.isCast());
171:       assertFalse(node0.isAdd());
172:       assertFalse(node0.isDo());
173:       assertFalse(node0.isVar());
174:       assertFalse(node0.isAssignAdd());
175:       assertEquals(0, node0.getChildCount());
176:       assertFalse(node0.isSetterDef());
177:       assertFalse(node0.isInstanceOf());
178:       assertFalse(node0.isCatch());
179:       assertEquals(0, node0.getCharno());
180:       assertFalse(node0.isStringKey());
181:       assertFalse(node0.isParamList());
182:       assertFalse(node0.isHook());
183:       assertFalse(node0.isTry());
184:       assertFalse(node0.hasOneChild());
185:       assertFalse(node0.isScript());
186:       assertFalse(node0.isWith());
187:       assertFalse(node0.isRegExp());
188:       assertFalse(node0.isCase());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.isBlock());
191:       assertFalse(node0.isFor());
192:       assertEquals(55, Node.INFERRED_FUNCTION);
193:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
194:       assertEquals(4095, Node.COLUMN_MASK);
195:       assertEquals(8, Node.FLAG_NO_THROWS);
196:       assertEquals(39, Node.EMPTY_BLOCK);
197:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
198:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
199:       assertEquals(53, Node.INPUT_ID);
200:       assertEquals(57, Node.REFLECTED_OBJECT);
201:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
203:       assertEquals(52, Node.LENGTH);
204:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
205:       assertEquals(56, Node.CHANGE_TIME);
206:       assertEquals(36, Node.QUOTED_PROP);
207:       assertEquals(48, Node.DIRECTIVES);
208:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
209:       assertEquals(37, Node.OPT_ARG_NAME);
210:       assertEquals(49, Node.DIRECT_EVAL);
211:       assertEquals(46, Node.IS_NAMESPACE);
212:       assertEquals(51, Node.STATIC_SOURCE_FILE);
213:       assertEquals(12, Node.COLUMN_BITS);
214:       assertEquals(2, Node.POST_FLAG);
215:       assertEquals(30, Node.VAR_ARGS_NAME);
216:       assertEquals(15, Node.NO_SIDE_EFFECTS);
217:       assertEquals(57, Node.LAST_PROP);
218:       assertEquals(47, Node.IS_DISPATCHER);
219:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
220:       assertEquals(29, Node.JSDOC_INFO_PROP);
221:       assertEquals(1, Node.DECR_FLAG);
222:       assertEquals(32, Node.INCRDECR_PROP);
223:       assertEquals(40, Node.ORIGINALNAME_PROP);
224:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
225:       assertEquals(50, Node.FREE_CALL);
226:       assertEquals(43, Node.IS_CONSTANT_NAME);
227:       assertEquals(54, Node.SLASH_V);
228:       
229:       Node node1 = Node.newString(0, "mEwD%^$0r>}");
230:       assertFalse(node1.equals((Object)node0));
231:       assertNotNull(node1);
232:       assertNotSame(node1, node0);
233:       assertFalse(node1.isString());
234:       assertFalse(node1.isInc());
235:       assertEquals((-1), node1.getCharno());
236:       assertFalse(node1.isIn());
237:       assertFalse(node1.isHook());
238:       assertFalse(node1.isThrow());
239:       assertFalse(node1.isCase());
240:       assertFalse(node1.isIf());
241:       assertFalse(node1.isBreak());
242:       assertFalse(node1.isThis());
243:       assertFalse(node1.isNE());
244:       assertFalse(node1.isFor());
245:       assertFalse(node1.isEmpty());
246:       assertFalse(node1.isComma());
247:       assertFalse(node1.isInstanceOf());
248:       assertEquals(0, node1.getType());
249:       assertFalse(node1.isDelProp());
250:       assertFalse(node1.isVoid());
251:       assertFalse(node1.isDefaultCase());
252:       assertFalse(node1.isScript());
253:       assertFalse(node1.isTrue());
254:       assertFalse(node1.isWith());
255:       assertFalse(node1.isRegExp());
256:       assertEquals(0, node1.getChildCount());
257:       assertFalse(node1.hasOneChild());
258:       assertFalse(node1.isTry());
259:       assertFalse(node1.isNumber());
260:       assertFalse(node1.isLabel());
261:       assertFalse(node1.isGetterDef());
262:       assertFalse(node1.isArrayLit());
263:       assertFalse(node1.isStringKey());
264:       assertFalse(node1.isParamList());
265:       assertFalse(node1.isLabelName());
266:       assertFalse(node1.isSwitch());
267:       assertFalse(node1.isWhile());
268:       assertFalse(node1.isContinue());
269:       assertFalse(node1.hasMoreThanOneChild());
270:       assertFalse(node1.isReturn());
271:       assertFalse(node1.isBlock());
272:       assertFalse(node1.isVar());
273:       assertFalse(node1.isAdd());
274:       assertFalse(node1.isNew());
275:       assertFalse(node1.isDo());
276:       assertFalse(node1.isAssignAdd());
277:       assertFalse(node1.isDec());
278:       assertFalse(node1.hasChildren());
279:       assertFalse(node1.isSetterDef());
280:       assertFalse(node1.isNull());
281:       assertFalse(node1.isOr());
282:       assertFalse(node1.isAssign());
283:       assertFalse(node1.isTypeOf());
284:       assertEquals((-1), node1.getLineno());
285:       assertFalse(node1.isCatch());
286:       assertFalse(node1.isCall());
287:       assertFalse(node1.isGetElem());
288:       assertFalse(node1.isName());
289:       assertFalse(node1.isExprResult());
290:       assertFalse(node1.isDebugger());
291:       assertFalse(node1.isNot());
292:       assertFalse(node1.isObjectLit());
293:       assertFalse(node1.isFunction());
294:       assertFalse(node1.isGetProp());
295:       assertEquals((-1), node1.getSourcePosition());
296:       assertFalse(node1.isFalse());
297:       assertFalse(node1.isCast());
298:       assertFalse(node1.isAnd());
299:       assertEquals(43, Node.IS_CONSTANT_NAME);
300:       assertEquals(36, Node.QUOTED_PROP);
301:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
302:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
303:       assertEquals(4095, Node.COLUMN_MASK);
304:       assertEquals(48, Node.DIRECTIVES);
305:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
306:       assertEquals(50, Node.FREE_CALL);
307:       assertEquals(51, Node.STATIC_SOURCE_FILE);
308:       assertEquals(12, Node.COLUMN_BITS);
309:       assertEquals(32, Node.INCRDECR_PROP);
310:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
311:       assertEquals(1, Node.DECR_FLAG);
312:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
313:       assertEquals(15, Node.NO_SIDE_EFFECTS);
314:       assertEquals(57, Node.LAST_PROP);
315:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
316:       assertEquals(54, Node.SLASH_V);
317:       assertEquals(30, Node.VAR_ARGS_NAME);
318:       assertEquals(57, Node.REFLECTED_OBJECT);
319:       assertEquals(46, Node.IS_NAMESPACE);
320:       assertEquals(40, Node.ORIGINALNAME_PROP);
321:       assertEquals(49, Node.DIRECT_EVAL);
322:       assertEquals(37, Node.OPT_ARG_NAME);
323:       assertEquals(56, Node.CHANGE_TIME);
324:       assertEquals(47, Node.IS_DISPATCHER);
325:       assertEquals(2, Node.POST_FLAG);
326:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
329:       assertEquals(55, Node.INFERRED_FUNCTION);
330:       assertEquals(52, Node.LENGTH);
331:       assertEquals(53, Node.INPUT_ID);
332:       assertEquals(29, Node.JSDOC_INFO_PROP);
333:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
334:       assertEquals(39, Node.EMPTY_BLOCK);
335:       
336:       Node node2 = node0.clonePropsFrom(node1);
337:       assertFalse(node0.equals((Object)node1));
338:       assertFalse(node1.equals((Object)node0));
339:       assertFalse(node2.equals((Object)node1));
340:       assertNotNull(node2);
341:       assertSame(node0, node2);
342:       assertNotSame(node0, node1);
343:       assertNotSame(node1, node0);
344:       assertNotSame(node1, node2);
345:       assertSame(node2, node0);
346:       assertNotSame(node2, node1);
347:       assertFalse(node0.isIn());
348:       assertFalse(node0.isString());
349:       assertFalse(node0.isIf());
350:       assertFalse(node0.isGetterDef());
351:       assertFalse(node0.isDelProp());
352:       assertFalse(node0.isSwitch());
353:       assertFalse(node0.isNE());
354:       assertFalse(node0.isArrayLit());
355:       assertFalse(node0.isFalse());
356:       assertFalse(node0.isInc());
357:       assertFalse(node0.isFunction());
358:       assertFalse(node0.isEmpty());
359:       assertFalse(node0.isDefaultCase());
360:       assertFalse(node0.isThrow());
361:       assertEquals(0, node0.getLineno());
362:       assertFalse(node0.isObjectLit());
363:       assertFalse(node0.isGetProp());
364:       assertEquals(0, node0.getSourcePosition());
365:       assertFalse(node0.isBreak());
366:       assertFalse(node0.isNot());
367:       assertFalse(node0.isAnd());
368:       assertFalse(node0.isDebugger());
369:       assertFalse(node0.isVoid());
370:       assertFalse(node0.isTrue());
371:       assertFalse(node0.isName());
372:       assertFalse(node0.isNull());
373:       assertFalse(node0.isExprResult());
374:       assertEquals(0, node0.getType());
375:       assertFalse(node0.isGetElem());
376:       assertFalse(node0.isCall());
377:       assertFalse(node0.hasChildren());
378:       assertFalse(node0.isAssign());
379:       assertFalse(node0.isTypeOf());
380:       assertFalse(node0.isDec());
381:       assertFalse(node0.isComma());
382:       assertFalse(node0.isWhile());
383:       assertFalse(node0.isReturn());
384:       assertFalse(node0.isLabel());
385:       assertFalse(node0.isOr());
386:       assertFalse(node0.isContinue());
387:       assertFalse(node0.hasMoreThanOneChild());
388:       assertFalse(node0.isNumber());
389:       assertFalse(node0.isLabelName());
390:       assertFalse(node0.isNew());
391:       assertFalse(node0.isCast());
392:       assertFalse(node0.isAdd());
393:       assertFalse(node0.isDo());
394:       assertFalse(node0.isVar());
395:       assertFalse(node0.isAssignAdd());
396:       assertEquals(0, node0.getChildCount());
397:       assertFalse(node0.isSetterDef());
398:       assertFalse(node0.isInstanceOf());
399:       assertFalse(node0.isCatch());
400:       assertEquals(0, node0.getCharno());
401:       assertFalse(node0.isStringKey());
402:       assertFalse(node0.isParamList());
403:       assertFalse(node0.isHook());
404:       assertFalse(node0.isTry());
405:       assertFalse(node0.hasOneChild());
406:       assertFalse(node0.isScript());
407:       assertFalse(node0.isWith());
408:       assertFalse(node0.isRegExp());
409:       assertFalse(node0.isCase());
410:       assertFalse(node0.isThis());
411:       assertFalse(node0.isBlock());
412:       assertFalse(node0.isFor());
413:       assertFalse(node1.isString());
414:       assertFalse(node1.isInc());
415:       assertEquals((-1), node1.getCharno());
416:       assertFalse(node1.isIn());
417:       assertFalse(node1.isHook());
418:       assertFalse(node1.isThrow());
419:       assertFalse(node1.isCase());
420:       assertFalse(node1.isIf());
421:       assertFalse(node1.isBreak());
422:       assertFalse(node1.isThis());
423:       assertFalse(node1.isNE());
424:       assertFalse(node1.isFor());
425:       assertFalse(node1.isEmpty());
426:       assertFalse(node1.isComma());
427:       assertFalse(node1.isInstanceOf());
428:       assertEquals(0, node1.getType());
429:       assertFalse(node1.isDelProp());
430:       assertFalse(node1.isVoid());
431:       assertFalse(node1.isDefaultCase());
432:       assertFalse(node1.isScript());
433:       assertFalse(node1.isTrue());
434:       assertFalse(node1.isWith());
435:       assertFalse(node1.isRegExp());
436:       assertEquals(0, node1.getChildCount());
437:       assertFalse(node1.hasOneChild());
438:       assertFalse(node1.isTry());
439:       assertFalse(node1.isNumber());
440:       assertFalse(node1.isLabel());
441:       assertFalse(node1.isGetterDef());
442:       assertFalse(node1.isArrayLit());
443:       assertFalse(node1.isStringKey());
444:       assertFalse(node1.isParamList());
445:       assertFalse(node1.isLabelName());
446:       assertFalse(node1.isSwitch());
447:       assertFalse(node1.isWhile());
448:       assertFalse(node1.isContinue());
449:       assertFalse(node1.hasMoreThanOneChild());
450:       assertFalse(node1.isReturn());
451:       assertFalse(node1.isBlock());
452:       assertFalse(node1.isVar());
453:       assertFalse(node1.isAdd());
454:       assertFalse(node1.isNew());
455:       assertFalse(node1.isDo());
456:       assertFalse(node1.isAssignAdd());
457:       assertFalse(node1.isDec());
458:       assertFalse(node1.hasChildren());
459:       assertFalse(node1.isSetterDef());
460:       assertFalse(node1.isNull());
461:       assertFalse(node1.isOr());
462:       assertFalse(node1.isAssign());
463:       assertFalse(node1.isTypeOf());
464:       assertEquals((-1), node1.getLineno());
465:       assertFalse(node1.isCatch());
466:       assertFalse(node1.isCall());
467:       assertFalse(node1.isGetElem());
468:       assertFalse(node1.isName());
469:       assertFalse(node1.isExprResult());
470:       assertFalse(node1.isDebugger());
471:       assertFalse(node1.isNot());
472:       assertFalse(node1.isObjectLit());
473:       assertFalse(node1.isFunction());
474:       assertFalse(node1.isGetProp());
475:       assertEquals((-1), node1.getSourcePosition());
476:       assertFalse(node1.isFalse());
477:       assertFalse(node1.isCast());
478:       assertFalse(node1.isAnd());
479:       assertFalse(node2.isLabel());
480:       assertFalse(node2.isAssignAdd());
481:       assertFalse(node2.isReturn());
482:       assertFalse(node2.isLabelName());
483:       assertFalse(node2.isNumber());
484:       assertFalse(node2.isOr());
485:       assertFalse(node2.isAdd());
486:       assertFalse(node2.isDo());
487:       assertFalse(node2.isNew());
488:       assertFalse(node2.isContinue());
489:       assertFalse(node2.isCast());
490:       assertFalse(node2.isVar());
491:       assertEquals(0, node2.getLineno());
492:       assertFalse(node2.isGetProp());
493:       assertFalse(node2.isBreak());
494:       assertFalse(node2.isNot());
495:       assertFalse(node2.isName());
496:       assertFalse(node2.isAnd());
497:       assertFalse(node2.isNull());
498:       assertEquals(0, node2.getSourcePosition());
499:       assertFalse(node2.isObjectLit());
500:       assertFalse(node2.isDebugger());
501:       assertEquals(0, node2.getType());
502:       assertFalse(node2.isTrue());
503:       assertFalse(node2.isExprResult());
504:       assertFalse(node2.isVoid());
505:       assertFalse(node2.isGetElem());
506:       assertFalse(node2.isWhile());
507:       assertFalse(node2.isCall());
508:       assertFalse(node2.isTypeOf());
509:       assertFalse(node2.hasChildren());
510:       assertFalse(node2.isAssign());
511:       assertFalse(node2.isDec());
512:       assertFalse(node2.isComma());
513:       assertFalse(node2.isNE());
514:       assertFalse(node2.isIf());
515:       assertFalse(node2.isDelProp());
516:       assertFalse(node2.isCase());
517:       assertFalse(node2.isEmpty());
518:       assertFalse(node2.isString());
519:       assertFalse(node2.isIn());
520:       assertFalse(node2.isGetterDef());
521:       assertFalse(node2.isArrayLit());
522:       assertFalse(node2.isSwitch());
523:       assertFalse(node2.isInc());
524:       assertFalse(node2.isDefaultCase());
525:       assertFalse(node2.isFalse());
526:       assertFalse(node2.isThrow());
527:       assertFalse(node2.isFunction());
528:       assertEquals(0, node2.getChildCount());
529:       assertFalse(node2.isParamList());
530:       assertFalse(node2.isInstanceOf());
531:       assertFalse(node2.isSetterDef());
532:       assertFalse(node2.isStringKey());
533:       assertEquals(0, node2.getCharno());
534:       assertFalse(node2.isBlock());
535:       assertFalse(node2.isTry());
536:       assertFalse(node2.isScript());
537:       assertFalse(node2.hasOneChild());
538:       assertFalse(node2.isFor());
539:       assertFalse(node2.isWith());
540:       assertFalse(node2.isCatch());
541:       assertFalse(node2.isRegExp());
542:       assertFalse(node2.isHook());
543:       assertFalse(node2.isThis());
544:       assertFalse(node2.hasMoreThanOneChild());
545:       assertEquals(55, Node.INFERRED_FUNCTION);
546:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
547:       assertEquals(4095, Node.COLUMN_MASK);
548:       assertEquals(8, Node.FLAG_NO_THROWS);
549:       assertEquals(39, Node.EMPTY_BLOCK);
550:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
551:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
552:       assertEquals(53, Node.INPUT_ID);
553:       assertEquals(57, Node.REFLECTED_OBJECT);
554:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
555:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
556:       assertEquals(52, Node.LENGTH);
557:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
558:       assertEquals(56, Node.CHANGE_TIME);
559:       assertEquals(36, Node.QUOTED_PROP);
560:       assertEquals(48, Node.DIRECTIVES);
561:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
562:       assertEquals(37, Node.OPT_ARG_NAME);
563:       assertEquals(49, Node.DIRECT_EVAL);
564:       assertEquals(46, Node.IS_NAMESPACE);
565:       assertEquals(51, Node.STATIC_SOURCE_FILE);
566:       assertEquals(12, Node.COLUMN_BITS);
567:       assertEquals(2, Node.POST_FLAG);
568:       assertEquals(30, Node.VAR_ARGS_NAME);
569:       assertEquals(15, Node.NO_SIDE_EFFECTS);
570:       assertEquals(57, Node.LAST_PROP);
571:       assertEquals(47, Node.IS_DISPATCHER);
572:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
573:       assertEquals(29, Node.JSDOC_INFO_PROP);
574:       assertEquals(1, Node.DECR_FLAG);
575:       assertEquals(32, Node.INCRDECR_PROP);
576:       assertEquals(40, Node.ORIGINALNAME_PROP);
577:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
578:       assertEquals(50, Node.FREE_CALL);
579:       assertEquals(43, Node.IS_CONSTANT_NAME);
580:       assertEquals(54, Node.SLASH_V);
581:       assertEquals(43, Node.IS_CONSTANT_NAME);
582:       assertEquals(36, Node.QUOTED_PROP);
583:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
584:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
585:       assertEquals(4095, Node.COLUMN_MASK);
586:       assertEquals(48, Node.DIRECTIVES);
587:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
588:       assertEquals(50, Node.FREE_CALL);
589:       assertEquals(51, Node.STATIC_SOURCE_FILE);
590:       assertEquals(12, Node.COLUMN_BITS);
591:       assertEquals(32, Node.INCRDECR_PROP);
592:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
593:       assertEquals(1, Node.DECR_FLAG);
594:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
595:       assertEquals(15, Node.NO_SIDE_EFFECTS);
596:       assertEquals(57, Node.LAST_PROP);
597:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
598:       assertEquals(54, Node.SLASH_V);
599:       assertEquals(30, Node.VAR_ARGS_NAME);
600:       assertEquals(57, Node.REFLECTED_OBJECT);
601:       assertEquals(46, Node.IS_NAMESPACE);
602:       assertEquals(40, Node.ORIGINALNAME_PROP);
603:       assertEquals(49, Node.DIRECT_EVAL);
604:       assertEquals(37, Node.OPT_ARG_NAME);
605:       assertEquals(56, Node.CHANGE_TIME);
606:       assertEquals(47, Node.IS_DISPATCHER);
607:       assertEquals(2, Node.POST_FLAG);
608:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
609:       assertEquals(8, Node.FLAG_NO_THROWS);
610:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
611:       assertEquals(55, Node.INFERRED_FUNCTION);
612:       assertEquals(52, Node.LENGTH);
613:       assertEquals(53, Node.INPUT_ID);
614:       assertEquals(29, Node.JSDOC_INFO_PROP);
615:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
616:       assertEquals(39, Node.EMPTY_BLOCK);
617:       assertEquals(48, Node.DIRECTIVES);
618:       assertEquals(8, Node.FLAG_NO_THROWS);
619:       assertEquals(4095, Node.COLUMN_MASK);
620:       assertEquals(55, Node.INFERRED_FUNCTION);
621:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
622:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
623:       assertEquals(39, Node.EMPTY_BLOCK);
624:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
625:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
626:       assertEquals(52, Node.LENGTH);
627:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
628:       assertEquals(15, Node.NO_SIDE_EFFECTS);
629:       assertEquals(53, Node.INPUT_ID);
630:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
631:       assertEquals(29, Node.JSDOC_INFO_PROP);
632:       assertEquals(49, Node.DIRECT_EVAL);
633:       assertEquals(56, Node.CHANGE_TIME);
634:       assertEquals(36, Node.QUOTED_PROP);
635:       assertEquals(57, Node.REFLECTED_OBJECT);
636:       assertEquals(32, Node.INCRDECR_PROP);
637:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
638:       assertEquals(37, Node.OPT_ARG_NAME);
639:       assertEquals(30, Node.VAR_ARGS_NAME);
640:       assertEquals(1, Node.DECR_FLAG);
641:       assertEquals(57, Node.LAST_PROP);
642:       assertEquals(2, Node.POST_FLAG);
643:       assertEquals(12, Node.COLUMN_BITS);
644:       assertEquals(47, Node.IS_DISPATCHER);
645:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
646:       assertEquals(40, Node.ORIGINALNAME_PROP);
647:       assertEquals(50, Node.FREE_CALL);
648:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
649:       assertEquals(43, Node.IS_CONSTANT_NAME);
650:       assertEquals(51, Node.STATIC_SOURCE_FILE);
651:       assertEquals(46, Node.IS_NAMESPACE);
652:       assertEquals(54, Node.SLASH_V);
653:       
654:       boolean boolean0 = node2.isEquivalentTo(node1);
655:       assertFalse(node0.equals((Object)node1));
656:       assertFalse(node1.equals((Object)node0));
657:       assertFalse(node1.equals((Object)node2));
658:       assertFalse(node2.equals((Object)node1));
659:       assertTrue(boolean0);
660:       assertSame(node0, node2);
661:       assertNotSame(node0, node1);
662:       assertNotSame(node1, node0);
663:       assertNotSame(node1, node2);
664:       assertSame(node2, node0);
665:       assertNotSame(node2, node1);
666:       assertFalse(node0.isIn());
667:       assertFalse(node0.isString());
668:       assertFalse(node0.isIf());
669:       assertFalse(node0.isGetterDef());
670:       assertFalse(node0.isDelProp());
671:       assertFalse(node0.isSwitch());
672:       assertFalse(node0.isNE());
673:       assertFalse(node0.isArrayLit());
674:       assertFalse(node0.isFalse());
675:       assertFalse(node0.isInc());
676:       assertFalse(node0.isFunction());
677:       assertFalse(node0.isEmpty());
678:       assertFalse(node0.isDefaultCase());
679:       assertFalse(node0.isThrow());
680:       assertEquals(0, node0.getLineno());
681:       assertFalse(node0.isObjectLit());
682:       assertFalse(node0.isGetProp());
683:       assertEquals(0, node0.getSourcePosition());
684:       assertFalse(node0.isBreak());
685:       assertFalse(node0.isNot());
686:       assertFalse(node0.isAnd());
687:       assertFalse(node0.isDebugger());
688:       assertFalse(node0.isVoid());
689:       assertFalse(node0.isTrue());
690:       assertFalse(node0.isName());
691:       assertFalse(node0.isNull());
692:       assertFalse(node0.isExprResult());
693:       assertEquals(0, node0.getType());
694:       assertFalse(node0.isGetElem());
695:       assertFalse(node0.isCall());
696:       assertFalse(node0.hasChildren());
697:       assertFalse(node0.isAssign());
698:       assertFalse(node0.isTypeOf());
699:       assertFalse(node0.isDec());
700:       assertFalse(node0.isComma());
701:       assertFalse(node0.isWhile());
702:       assertFalse(node0.isReturn());
703:       assertFalse(node0.isLabel());
704:       assertFalse(node0.isOr());
705:       assertFalse(node0.isContinue());
706:       assertFalse(node0.hasMoreThanOneChild());
707:       assertFalse(node0.isNumber());
708:       assertFalse(node0.isLabelName());
709:       assertFalse(node0.isNew());
710:       assertFalse(node0.isCast());
711:       assertFalse(node0.isAdd());
712:       assertFalse(node0.isDo());
713:       assertFalse(node0.isVar());
714:       assertFalse(node0.isAssignAdd());
715:       assertEquals(0, node0.getChildCount());
716:       assertFalse(node0.isSetterDef());
717:       assertFalse(node0.isInstanceOf());
718:       assertFalse(node0.isCatch());
719:       assertEquals(0, node0.getCharno());
720:       assertFalse(node0.isStringKey());
721:       assertFalse(node0.isParamList());
722:       assertFalse(node0.isHook());
723:       assertFalse(node0.isTry());
724:       assertFalse(node0.hasOneChild());
725:       assertFalse(node0.isScript());
726:       assertFalse(node0.isWith());
727:       assertFalse(node0.isRegExp());
728:       assertFalse(node0.isCase());
729:       assertFalse(node0.isThis());
730:       assertFalse(node0.isBlock());
731:       assertFalse(node0.isFor());
732:       assertFalse(node1.isString());
733:       assertFalse(node1.isInc());
734:       assertEquals((-1), node1.getCharno());
735:       assertFalse(node1.isIn());
736:       assertFalse(node1.isHook());
737:       assertFalse(node1.isThrow());
738:       assertFalse(node1.isCase());
739:       assertFalse(node1.isIf());
740:       assertFalse(node1.isBreak());
741:       assertFalse(node1.isThis());
742:       assertFalse(node1.isNE());
743:       assertFalse(node1.isFor());
744:       assertFalse(node1.isEmpty());
745:       assertFalse(node1.isComma());
746:       assertFalse(node1.isInstanceOf());
747:       assertEquals(0, node1.getType());
748:       assertFalse(node1.isDelProp());
749:       assertFalse(node1.isVoid());
750:       assertFalse(node1.isDefaultCase());
751:       assertFalse(node1.isScript());
752:       assertFalse(node1.isTrue());
753:       assertFalse(node1.isWith());
754:       assertFalse(node1.isRegExp());
755:       assertEquals(0, node1.getChildCount());
756:       assertFalse(node1.hasOneChild());
757:       assertFalse(node1.isTry());
758:       assertFalse(node1.isNumber());
759:       assertFalse(node1.isLabel());
760:       assertFalse(node1.isGetterDef());
761:       assertFalse(node1.isArrayLit());
762:       assertFalse(node1.isStringKey());
763:       assertFalse(node1.isParamList());
764:       assertFalse(node1.isLabelName());
765:       assertFalse(node1.isSwitch());
766:       assertFalse(node1.isWhile());
767:       assertFalse(node1.isContinue());
768:       assertFalse(node1.hasMoreThanOneChild());
769:       assertFalse(node1.isReturn());
770:       assertFalse(node1.isBlock());
771:       assertFalse(node1.isVar());
772:       assertFalse(node1.isAdd());
773:       assertFalse(node1.isNew());
774:       assertFalse(node1.isDo());
775:       assertFalse(node1.isAssignAdd());
776:       assertFalse(node1.isDec());
777:       assertFalse(node1.hasChildren());
778:       assertFalse(node1.isSetterDef());
779:       assertFalse(node1.isNull());
780:       assertFalse(node1.isOr());
781:       assertFalse(node1.isAssign());
782:       assertFalse(node1.isTypeOf());
783:       assertEquals((-1), node1.getLineno());
784:       assertFalse(node1.isCatch());
785:       assertFalse(node1.isCall());
786:       assertFalse(node1.isGetElem());
787:       assertFalse(node1.isName());
788:       assertFalse(node1.isExprResult());
789:       assertFalse(node1.isDebugger());
790:       assertFalse(node1.isNot());
791:       assertFalse(node1.isObjectLit());
792:       assertFalse(node1.isFunction());
793:       assertFalse(node1.isGetProp());
794:       assertEquals((-1), node1.getSourcePosition());
795:       assertFalse(node1.isFalse());
796:       assertFalse(node1.isCast());
797:       assertFalse(node1.isAnd());
798:       assertFalse(node2.isLabel());
799:       assertFalse(node2.isAssignAdd());
800:       assertFalse(node2.isReturn());
801:       assertFalse(node2.isLabelName());
802:       assertFalse(node2.isNumber());
803:       assertFalse(node2.isOr());
804:       assertFalse(node2.isAdd());
805:       assertFalse(node2.isDo());
806:       assertFalse(node2.isNew());
807:       assertFalse(node2.isContinue());
808:       assertFalse(node2.isCast());
809:       assertFalse(node2.isVar());
810:       assertEquals(0, node2.getLineno());
811:       assertFalse(node2.isGetProp());
812:       assertFalse(node2.isBreak());
813:       assertFalse(node2.isNot());
814:       assertFalse(node2.isName());
815:       assertFalse(node2.isAnd());
816:       assertFalse(node2.isNull());
817:       assertEquals(0, node2.getSourcePosition());
818:       assertFalse(node2.isObjectLit());
819:       assertFalse(node2.isDebugger());
820:       assertEquals(0, node2.getType());
821:       assertFalse(node2.isTrue());
822:       assertFalse(node2.isExprResult());
823:       assertFalse(node2.isVoid());
824:       assertFalse(node2.isGetElem());
825:       assertFalse(node2.isWhile());
826:       assertFalse(node2.isCall());
827:       assertFalse(node2.isTypeOf());
828:       assertFalse(node2.hasChildren());
829:       assertFalse(node2.isAssign());
830:       assertFalse(node2.isDec());
831:       assertFalse(node2.isComma());
832:       assertFalse(node2.isNE());
833:       assertFalse(node2.isIf());
834:       assertFalse(node2.isDelProp());
835:       assertFalse(node2.isCase());
836:       assertFalse(node2.isEmpty());
837:       assertFalse(node2.isString());
838:       assertFalse(node2.isIn());
839:       assertFalse(node2.isGetterDef());
840:       assertFalse(node2.isArrayLit());
841:       assertFalse(node2.isSwitch());
842:       assertFalse(node2.isInc());
843:       assertFalse(node2.isDefaultCase());
844:       assertFalse(node2.isFalse());
845:       assertFalse(node2.isThrow());
846:       assertFalse(node2.isFunction());
847:       assertEquals(0, node2.getChildCount());
848:       assertFalse(node2.isParamList());
849:       assertFalse(node2.isInstanceOf());
850:       assertFalse(node2.isSetterDef());
851:       assertFalse(node2.isStringKey());
852:       assertEquals(0, node2.getCharno());
853:       assertFalse(node2.isBlock());
854:       assertFalse(node2.isTry());
855:       assertFalse(node2.isScript());
856:       assertFalse(node2.hasOneChild());
857:       assertFalse(node2.isFor());
858:       assertFalse(node2.isWith());
859:       assertFalse(node2.isCatch());
860:       assertFalse(node2.isRegExp());
861:       assertFalse(node2.isHook());
862:       assertFalse(node2.isThis());
863:       assertFalse(node2.hasMoreThanOneChild());
864:       assertEquals(55, Node.INFERRED_FUNCTION);
865:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
866:       assertEquals(4095, Node.COLUMN_MASK);
867:       assertEquals(8, Node.FLAG_NO_THROWS);
868:       assertEquals(39, Node.EMPTY_BLOCK);
869:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
870:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
871:       assertEquals(53, Node.INPUT_ID);
872:       assertEquals(57, Node.REFLECTED_OBJECT);
873:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
874:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
875:       assertEquals(52, Node.LENGTH);
876:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
877:       assertEquals(56, Node.CHANGE_TIME);
878:       assertEquals(36, Node.QUOTED_PROP);
879:       assertEquals(48, Node.DIRECTIVES);
880:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
881:       assertEquals(37, Node.OPT_ARG_NAME);
882:       assertEquals(49, Node.DIRECT_EVAL);
883:       assertEquals(46, Node.IS_NAMESPACE);
884:       assertEquals(51, Node.STATIC_SOURCE_FILE);
885:       assertEquals(12, Node.COLUMN_BITS);
886:       assertEquals(2, Node.POST_FLAG);
887:       assertEquals(30, Node.VAR_ARGS_NAME);
888:       assertEquals(15, Node.NO_SIDE_EFFECTS);
889:       assertEquals(57, Node.LAST_PROP);
890:       assertEquals(47, Node.IS_DISPATCHER);
891:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
892:       assertEquals(29, Node.JSDOC_INFO_PROP);
893:       assertEquals(1, Node.DECR_FLAG);
894:       assertEquals(32, Node.INCRDECR_PROP);
895:       assertEquals(40, Node.ORIGINALNAME_PROP);
896:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
897:       assertEquals(50, Node.FREE_CALL);
898:       assertEquals(43, Node.IS_CONSTANT_NAME);
899:       assertEquals(54, Node.SLASH_V);
900:       assertEquals(43, Node.IS_CONSTANT_NAME);
901:       assertEquals(36, Node.QUOTED_PROP);
902:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
903:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
904:       assertEquals(4095, Node.COLUMN_MASK);
905:       assertEquals(48, Node.DIRECTIVES);
906:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
907:       assertEquals(50, Node.FREE_CALL);
908:       assertEquals(51, Node.STATIC_SOURCE_FILE);
909:       assertEquals(12, Node.COLUMN_BITS);
910:       assertEquals(32, Node.INCRDECR_PROP);
911:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
912:       assertEquals(1, Node.DECR_FLAG);
913:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
914:       assertEquals(15, Node.NO_SIDE_EFFECTS);
915:       assertEquals(57, Node.LAST_PROP);
916:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
917:       assertEquals(54, Node.SLASH_V);
918:       assertEquals(30, Node.VAR_ARGS_NAME);
919:       assertEquals(57, Node.REFLECTED_OBJECT);
920:       assertEquals(46, Node.IS_NAMESPACE);
921:       assertEquals(40, Node.ORIGINALNAME_PROP);
922:       assertEquals(49, Node.DIRECT_EVAL);
923:       assertEquals(37, Node.OPT_ARG_NAME);
924:       assertEquals(56, Node.CHANGE_TIME);
925:       assertEquals(47, Node.IS_DISPATCHER);
926:       assertEquals(2, Node.POST_FLAG);
927:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
928:       assertEquals(8, Node.FLAG_NO_THROWS);
929:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
930:       assertEquals(55, Node.INFERRED_FUNCTION);
931:       assertEquals(52, Node.LENGTH);
932:       assertEquals(53, Node.INPUT_ID);
933:       assertEquals(29, Node.JSDOC_INFO_PROP);
934:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
935:       assertEquals(39, Node.EMPTY_BLOCK);
936:       assertEquals(48, Node.DIRECTIVES);
937:       assertEquals(8, Node.FLAG_NO_THROWS);
938:       assertEquals(4095, Node.COLUMN_MASK);
939:       assertEquals(55, Node.INFERRED_FUNCTION);
940:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
941:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
942:       assertEquals(39, Node.EMPTY_BLOCK);
943:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
944:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
945:       assertEquals(52, Node.LENGTH);
946:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
947:       assertEquals(15, Node.NO_SIDE_EFFECTS);
948:       assertEquals(53, Node.INPUT_ID);
949:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
950:       assertEquals(29, Node.JSDOC_INFO_PROP);
951:       assertEquals(49, Node.DIRECT_EVAL);
952:       assertEquals(56, Node.CHANGE_TIME);
953:       assertEquals(36, Node.QUOTED_PROP);
954:       assertEquals(57, Node.REFLECTED_OBJECT);
955:       assertEquals(32, Node.INCRDECR_PROP);
956:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
957:       assertEquals(37, Node.OPT_ARG_NAME);
958:       assertEquals(30, Node.VAR_ARGS_NAME);
959:       assertEquals(1, Node.DECR_FLAG);
960:       assertEquals(57, Node.LAST_PROP);
961:       assertEquals(2, Node.POST_FLAG);
962:       assertEquals(12, Node.COLUMN_BITS);
963:       assertEquals(47, Node.IS_DISPATCHER);
964:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
965:       assertEquals(40, Node.ORIGINALNAME_PROP);
966:       assertEquals(50, Node.FREE_CALL);
967:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
968:       assertEquals(43, Node.IS_CONSTANT_NAME);
969:       assertEquals(51, Node.STATIC_SOURCE_FILE);
970:       assertEquals(46, Node.IS_NAMESPACE);
971:       assertEquals(54, Node.SLASH_V);
972:       
973:       node1.setWasEmptyNode(false);
974:       assertFalse(node1.equals((Object)node0));
975:       assertFalse(node1.equals((Object)node2));
976:       assertNotSame(node1, node0);
977:       assertNotSame(node1, node2);
978:       assertFalse(node1.isString());
979:       assertFalse(node1.isInc());
980:       assertEquals((-1), node1.getCharno());
981:       assertFalse(node1.isIn());
982:       assertFalse(node1.isHook());
983:       assertFalse(node1.isThrow());
984:       assertFalse(node1.isCase());
985:       assertFalse(node1.isIf());
986:       assertFalse(node1.isBreak());
987:       assertFalse(node1.isThis());
988:       assertFalse(node1.isNE());
989:       assertFalse(node1.isFor());
990:       assertFalse(node1.isEmpty());
991:       assertFalse(node1.isComma());
992:       assertFalse(node1.isInstanceOf());
993:       assertEquals(0, node1.getType());
994:       assertFalse(node1.isDelProp());
995:       assertFalse(node1.isVoid());
996:       assertFalse(node1.isDefaultCase());
997:       assertFalse(node1.isScript());
998:       assertFalse(node1.isTrue());
999:       assertFalse(node1.isWith());
1000:       assertFalse(node1.isRegExp());
1001:       assertEquals(0, node1.getChildCount());
1002:       assertFalse(node1.hasOneChild());
1003:       assertFalse(node1.isTry());
1004:       assertFalse(node1.isNumber());
1005:       assertFalse(node1.isLabel());
1006:       assertFalse(node1.isGetterDef());
1007:       assertFalse(node1.isArrayLit());
1008:       assertFalse(node1.isStringKey());
1009:       assertFalse(node1.isParamList());
1010:       assertFalse(node1.isLabelName());
1011:       assertFalse(node1.isSwitch());
1012:       assertFalse(node1.isWhile());
1013:       assertFalse(node1.isContinue());
1014:       assertFalse(node1.hasMoreThanOneChild());
1015:       assertFalse(node1.isReturn());
1016:       assertFalse(node1.isBlock());
1017:       assertFalse(node1.isVar());
1018:       assertFalse(node1.isAdd());
1019:       assertFalse(node1.isNew());
1020:       assertFalse(node1.isDo());
1021:       assertFalse(node1.isAssignAdd());
1022:       assertFalse(node1.isDec());
1023:       assertFalse(node1.hasChildren());
1024:       assertFalse(node1.isSetterDef());
1025:       assertFalse(node1.isNull());
1026:       assertFalse(node1.isOr());
1027:       assertFalse(node1.isAssign());
1028:       assertFalse(node1.isTypeOf());
1029:       assertEquals((-1), node1.getLineno());
1030:       assertFalse(node1.isCatch());
1031:       assertFalse(node1.isCall());
1032:       assertFalse(node1.isGetElem());
1033:       assertFalse(node1.isName());
1034:       assertFalse(node1.isExprResult());
1035:       assertFalse(node1.isDebugger());
1036:       assertFalse(node1.isNot());
1037:       assertFalse(node1.isObjectLit());
1038:       assertFalse(node1.isFunction());
1039:       assertFalse(node1.isGetProp());
1040:       assertEquals((-1), node1.getSourcePosition());
1041:       assertFalse(node1.isFalse());
1042:       assertFalse(node1.isCast());
1043:       assertFalse(node1.isAnd());
1044:       assertEquals(43, Node.IS_CONSTANT_NAME);
1045:       assertEquals(36, Node.QUOTED_PROP);
1046:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1047:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1048:       assertEquals(4095, Node.COLUMN_MASK);
1049:       assertEquals(48, Node.DIRECTIVES);
1050:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1051:       assertEquals(50, Node.FREE_CALL);
1052:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1053:       assertEquals(12, Node.COLUMN_BITS);
1054:       assertEquals(32, Node.INCRDECR_PROP);
1055:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1056:       assertEquals(1, Node.DECR_FLAG);
1057:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1058:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1059:       assertEquals(57, Node.LAST_PROP);
1060:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1061:       assertEquals(54, Node.SLASH_V);
1062:       assertEquals(30, Node.VAR_ARGS_NAME);
1063:       assertEquals(57, Node.REFLECTED_OBJECT);
1064:       assertEquals(46, Node.IS_NAMESPACE);
1065:       assertEquals(40, Node.ORIGINALNAME_PROP);
1066:       assertEquals(49, Node.DIRECT_EVAL);
1067:       assertEquals(37, Node.OPT_ARG_NAME);
1068:       assertEquals(56, Node.CHANGE_TIME);
1069:       assertEquals(47, Node.IS_DISPATCHER);
1070:       assertEquals(2, Node.POST_FLAG);
1071:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1072:       assertEquals(8, Node.FLAG_NO_THROWS);
1073:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1074:       assertEquals(55, Node.INFERRED_FUNCTION);
1075:       assertEquals(52, Node.LENGTH);
1076:       assertEquals(53, Node.INPUT_ID);
1077:       assertEquals(29, Node.JSDOC_INFO_PROP);
1078:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1079:       assertEquals(39, Node.EMPTY_BLOCK);
1080:       
1081:       Iterable<Node> iterable0 = node1.children();
1082:       assertFalse(node1.equals((Object)node0));
1083:       assertFalse(node1.equals((Object)node2));
1084:       assertFalse(iterable0.contains(node2));
1085:       assertNotNull(iterable0);
1086:       assertNotSame(node1, node0);
1087:       assertNotSame(node1, node2);
1088:       assertFalse(node1.isString());
1089:       assertFalse(node1.isInc());
1090:       assertEquals((-1), node1.getCharno());
1091:       assertFalse(node1.isIn());
1092:       assertFalse(node1.isHook());
1093:       assertFalse(node1.isThrow());
1094:       assertFalse(node1.isCase());
1095:       assertFalse(node1.isIf());
1096:       assertFalse(node1.isBreak());
1097:       assertFalse(node1.isThis());
1098:       assertFalse(node1.isNE());
1099:       assertFalse(node1.isFor());
1100:       assertFalse(node1.isEmpty());
1101:       assertFalse(node1.isComma());
1102:       assertFalse(node1.isInstanceOf());
1103:       assertEquals(0, node1.getType());
1104:       assertFalse(node1.isDelProp());
1105:       assertFalse(node1.isVoid());
1106:       assertFalse(node1.isDefaultCase());
1107:       assertFalse(node1.isScript());
1108:       assertFalse(node1.isTrue());
1109:       assertFalse(node1.isWith());
1110:       assertFalse(node1.isRegExp());
1111:       assertEquals(0, node1.getChildCount());
1112:       assertFalse(node1.hasOneChild());
1113:       assertFalse(node1.isTry());
1114:       assertFalse(node1.isNumber());
1115:       assertFalse(node1.isLabel());
1116:       assertFalse(node1.isGetterDef());
1117:       assertFalse(node1.isArrayLit());
1118:       assertFalse(node1.isStringKey());
1119:       assertFalse(node1.isParamList());
1120:       assertFalse(node1.isLabelName());
1121:       assertFalse(node1.isSwitch());
1122:       assertFalse(node1.isWhile());
1123:       assertFalse(node1.isContinue());
1124:       assertFalse(node1.hasMoreThanOneChild());
1125:       assertFalse(node1.isReturn());
1126:       assertFalse(node1.isBlock());
1127:       assertFalse(node1.isVar());
1128:       assertFalse(node1.isAdd());
1129:       assertFalse(node1.isNew());
1130:       assertFalse(node1.isDo());
1131:       assertFalse(node1.isAssignAdd());
1132:       assertFalse(node1.isDec());
1133:       assertFalse(node1.hasChildren());
1134:       assertFalse(node1.isSetterDef());
1135:       assertFalse(node1.isNull());
1136:       assertFalse(node1.isOr());
1137:       assertFalse(node1.isAssign());
1138:       assertFalse(node1.isTypeOf());
1139:       assertEquals((-1), node1.getLineno());
1140:       assertFalse(node1.isCatch());
1141:       assertFalse(node1.isCall());
1142:       assertFalse(node1.isGetElem());
1143:       assertFalse(node1.isName());
1144:       assertFalse(node1.isExprResult());
1145:       assertFalse(node1.isDebugger());
1146:       assertFalse(node1.isNot());
1147:       assertFalse(node1.isObjectLit());
1148:       assertFalse(node1.isFunction());
1149:       assertFalse(node1.isGetProp());
1150:       assertEquals((-1), node1.getSourcePosition());
1151:       assertFalse(node1.isFalse());
1152:       assertFalse(node1.isCast());
1153:       assertFalse(node1.isAnd());
1154:       assertEquals(43, Node.IS_CONSTANT_NAME);
1155:       assertEquals(36, Node.QUOTED_PROP);
1156:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1157:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1158:       assertEquals(4095, Node.COLUMN_MASK);
1159:       assertEquals(48, Node.DIRECTIVES);
1160:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1161:       assertEquals(50, Node.FREE_CALL);
1162:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1163:       assertEquals(12, Node.COLUMN_BITS);
1164:       assertEquals(32, Node.INCRDECR_PROP);
1165:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1166:       assertEquals(1, Node.DECR_FLAG);
1167:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1168:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1169:       assertEquals(57, Node.LAST_PROP);
1170:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1171:       assertEquals(54, Node.SLASH_V);
1172:       assertEquals(30, Node.VAR_ARGS_NAME);
1173:       assertEquals(57, Node.REFLECTED_OBJECT);
1174:       assertEquals(46, Node.IS_NAMESPACE);
1175:       assertEquals(40, Node.ORIGINALNAME_PROP);
1176:       assertEquals(49, Node.DIRECT_EVAL);
1177:       assertEquals(37, Node.OPT_ARG_NAME);
1178:       assertEquals(56, Node.CHANGE_TIME);
1179:       assertEquals(47, Node.IS_DISPATCHER);
1180:       assertEquals(2, Node.POST_FLAG);
1181:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1182:       assertEquals(8, Node.FLAG_NO_THROWS);
1183:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1184:       assertEquals(55, Node.INFERRED_FUNCTION);
1185:       assertEquals(52, Node.LENGTH);
1186:       assertEquals(53, Node.INPUT_ID);
1187:       assertEquals(29, Node.JSDOC_INFO_PROP);
1188:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1189:       assertEquals(39, Node.EMPTY_BLOCK);
1190:       
1191:       boolean boolean1 = node1.isVoid();
1192:       assertFalse(node1.equals((Object)node0));
1193:       assertFalse(node1.equals((Object)node2));
1194:       assertFalse(boolean1 == boolean0);
1195:       assertFalse(boolean1);
1196:       assertNotSame(node1, node0);
1197:       assertNotSame(node1, node2);
1198:       assertFalse(node1.isString());
1199:       assertFalse(node1.isInc());
1200:       assertEquals((-1), node1.getCharno());
1201:       assertFalse(node1.isIn());
1202:       assertFalse(node1.isHook());
1203:       assertFalse(node1.isThrow());
1204:       assertFalse(node1.isCase());
1205:       assertFalse(node1.isIf());
1206:       assertFalse(node1.isBreak());
1207:       assertFalse(node1.isThis());
1208:       assertFalse(node1.isNE());
1209:       assertFalse(node1.isFor());
1210:       assertFalse(node1.isEmpty());
1211:       assertFalse(node1.isComma());
1212:       assertFalse(node1.isInstanceOf());
1213:       assertEquals(0, node1.getType());
1214:       assertFalse(node1.isDelProp());
1215:       assertFalse(node1.isVoid());
1216:       assertFalse(node1.isDefaultCase());
1217:       assertFalse(node1.isScript());
1218:       assertFalse(node1.isTrue());
1219:       assertFalse(node1.isWith());
1220:       assertFalse(node1.isRegExp());
1221:       assertEquals(0, node1.getChildCount());
1222:       assertFalse(node1.hasOneChild());
1223:       assertFalse(node1.isTry());
1224:       assertFalse(node1.isNumber());
1225:       assertFalse(node1.isLabel());
1226:       assertFalse(node1.isGetterDef());
1227:       assertFalse(node1.isArrayLit());
1228:       assertFalse(node1.isStringKey());
1229:       assertFalse(node1.isParamList());
1230:       assertFalse(node1.isLabelName());
1231:       assertFalse(node1.isSwitch());
1232:       assertFalse(node1.isWhile());
1233:       assertFalse(node1.isContinue());
1234:       assertFalse(node1.hasMoreThanOneChild());
1235:       assertFalse(node1.isReturn());
1236:       assertFalse(node1.isBlock());
1237:       assertFalse(node1.isVar());
1238:       assertFalse(node1.isAdd());
1239:       assertFalse(node1.isNew());
1240:       assertFalse(node1.isDo());
1241:       assertFalse(node1.isAssignAdd());
1242:       assertFalse(node1.isDec());
1243:       assertFalse(node1.hasChildren());
1244:       assertFalse(node1.isSetterDef());
1245:       assertFalse(node1.isNull());
1246:       assertFalse(node1.isOr());
1247:       assertFalse(node1.isAssign());
1248:       assertFalse(node1.isTypeOf());
1249:       assertEquals((-1), node1.getLineno());
1250:       assertFalse(node1.isCatch());
1251:       assertFalse(node1.isCall());
1252:       assertFalse(node1.isGetElem());
1253:       assertFalse(node1.isName());
1254:       assertFalse(node1.isExprResult());
1255:       assertFalse(node1.isDebugger());
1256:       assertFalse(node1.isNot());
1257:       assertFalse(node1.isObjectLit());
1258:       assertFalse(node1.isFunction());
1259:       assertFalse(node1.isGetProp());
1260:       assertEquals((-1), node1.getSourcePosition());
1261:       assertFalse(node1.isFalse());
1262:       assertFalse(node1.isCast());
1263:       assertFalse(node1.isAnd());
1264:       assertEquals(43, Node.IS_CONSTANT_NAME);
1265:       assertEquals(36, Node.QUOTED_PROP);
1266:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1268:       assertEquals(4095, Node.COLUMN_MASK);
1269:       assertEquals(48, Node.DIRECTIVES);
1270:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1271:       assertEquals(50, Node.FREE_CALL);
1272:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1273:       assertEquals(12, Node.COLUMN_BITS);
1274:       assertEquals(32, Node.INCRDECR_PROP);
1275:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1276:       assertEquals(1, Node.DECR_FLAG);
1277:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1278:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1279:       assertEquals(57, Node.LAST_PROP);
1280:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1281:       assertEquals(54, Node.SLASH_V);
1282:       assertEquals(30, Node.VAR_ARGS_NAME);
1283:       assertEquals(57, Node.REFLECTED_OBJECT);
1284:       assertEquals(46, Node.IS_NAMESPACE);
1285:       assertEquals(40, Node.ORIGINALNAME_PROP);
1286:       assertEquals(49, Node.DIRECT_EVAL);
1287:       assertEquals(37, Node.OPT_ARG_NAME);
1288:       assertEquals(56, Node.CHANGE_TIME);
1289:       assertEquals(47, Node.IS_DISPATCHER);
1290:       assertEquals(2, Node.POST_FLAG);
1291:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1292:       assertEquals(8, Node.FLAG_NO_THROWS);
1293:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1294:       assertEquals(55, Node.INFERRED_FUNCTION);
1295:       assertEquals(52, Node.LENGTH);
1296:       assertEquals(53, Node.INPUT_ID);
1297:       assertEquals(29, Node.JSDOC_INFO_PROP);
1298:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1299:       assertEquals(39, Node.EMPTY_BLOCK);
1300:       
1301:       boolean boolean2 = node0.isDebugger();
1302:       assertFalse(node0.equals((Object)node1));
1303:       assertTrue(boolean2 == boolean1);
1304:       assertFalse(boolean2 == boolean0);
1305:       assertFalse(boolean2);
1306:       assertSame(node0, node2);
1307:       assertNotSame(node0, node1);
1308:       assertFalse(node0.isIn());
1309:       assertFalse(node0.isString());
1310:       assertFalse(node0.isIf());
1311:       assertFalse(node0.isGetterDef());
1312:       assertFalse(node0.isDelProp());
1313:       assertFalse(node0.isSwitch());
1314:       assertFalse(node0.isNE());
1315:       assertFalse(node0.isArrayLit());
1316:       assertFalse(node0.isFalse());
1317:       assertFalse(node0.isInc());
1318:       assertFalse(node0.isFunction());
1319:       assertFalse(node0.isEmpty());
1320:       assertFalse(node0.isDefaultCase());
1321:       assertFalse(node0.isThrow());
1322:       assertEquals(0, node0.getLineno());
1323:       assertFalse(node0.isObjectLit());
1324:       assertFalse(node0.isGetProp());
1325:       assertEquals(0, node0.getSourcePosition());
1326:       assertFalse(node0.isBreak());
1327:       assertFalse(node0.isNot());
1328:       assertFalse(node0.isAnd());
1329:       assertFalse(node0.isDebugger());
1330:       assertFalse(node0.isVoid());
1331:       assertFalse(node0.isTrue());
1332:       assertFalse(node0.isName());
1333:       assertFalse(node0.isNull());
1334:       assertFalse(node0.isExprResult());
1335:       assertEquals(0, node0.getType());
1336:       assertFalse(node0.isGetElem());
1337:       assertFalse(node0.isCall());
1338:       assertFalse(node0.hasChildren());
1339:       assertFalse(node0.isAssign());
1340:       assertFalse(node0.isTypeOf());
1341:       assertFalse(node0.isDec());
1342:       assertFalse(node0.isComma());
1343:       assertFalse(node0.isWhile());
1344:       assertFalse(node0.isReturn());
1345:       assertFalse(node0.isLabel());
1346:       assertFalse(node0.isOr());
1347:       assertFalse(node0.isContinue());
1348:       assertFalse(node0.hasMoreThanOneChild());
1349:       assertFalse(node0.isNumber());
1350:       assertFalse(node0.isLabelName());
1351:       assertFalse(node0.isNew());
1352:       assertFalse(node0.isCast());
1353:       assertFalse(node0.isAdd());
1354:       assertFalse(node0.isDo());
1355:       assertFalse(node0.isVar());
1356:       assertFalse(node0.isAssignAdd());
1357:       assertEquals(0, node0.getChildCount());
1358:       assertFalse(node0.isSetterDef());
1359:       assertFalse(node0.isInstanceOf());
1360:       assertFalse(node0.isCatch());
1361:       assertEquals(0, node0.getCharno());
1362:       assertFalse(node0.isStringKey());
1363:       assertFalse(node0.isParamList());
1364:       assertFalse(node0.isHook());
1365:       assertFalse(node0.isTry());
1366:       assertFalse(node0.hasOneChild());
1367:       assertFalse(node0.isScript());
1368:       assertFalse(node0.isWith());
1369:       assertFalse(node0.isRegExp());
1370:       assertFalse(node0.isCase());
1371:       assertFalse(node0.isThis());
1372:       assertFalse(node0.isBlock());
1373:       assertFalse(node0.isFor());
1374:       assertEquals(55, Node.INFERRED_FUNCTION);
1375:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1376:       assertEquals(4095, Node.COLUMN_MASK);
1377:       assertEquals(8, Node.FLAG_NO_THROWS);
1378:       assertEquals(39, Node.EMPTY_BLOCK);
1379:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1380:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1381:       assertEquals(53, Node.INPUT_ID);
1382:       assertEquals(57, Node.REFLECTED_OBJECT);
1383:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1384:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1385:       assertEquals(52, Node.LENGTH);
1386:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1387:       assertEquals(56, Node.CHANGE_TIME);
1388:       assertEquals(36, Node.QUOTED_PROP);
1389:       assertEquals(48, Node.DIRECTIVES);
1390:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1391:       assertEquals(37, Node.OPT_ARG_NAME);
1392:       assertEquals(49, Node.DIRECT_EVAL);
1393:       assertEquals(46, Node.IS_NAMESPACE);
1394:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1395:       assertEquals(12, Node.COLUMN_BITS);
1396:       assertEquals(2, Node.POST_FLAG);
1397:       assertEquals(30, Node.VAR_ARGS_NAME);
1398:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1399:       assertEquals(57, Node.LAST_PROP);
1400:       assertEquals(47, Node.IS_DISPATCHER);
1401:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1402:       assertEquals(29, Node.JSDOC_INFO_PROP);
1403:       assertEquals(1, Node.DECR_FLAG);
1404:       assertEquals(32, Node.INCRDECR_PROP);
1405:       assertEquals(40, Node.ORIGINALNAME_PROP);
1406:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1407:       assertEquals(50, Node.FREE_CALL);
1408:       assertEquals(43, Node.IS_CONSTANT_NAME);
1409:       assertEquals(54, Node.SLASH_V);
1410:       
1411:       boolean boolean3 = node2.isAnd();
1412:       assertFalse(node0.equals((Object)node1));
1413:       assertFalse(node1.equals((Object)node0));
1414:       assertFalse(node1.equals((Object)node2));
1415:       assertFalse(node2.equals((Object)node1));
1416:       assertTrue(boolean3 == boolean1);
1417:       assertTrue(boolean3 == boolean2);
1418:       assertFalse(boolean3 == boolean0);
1419:       assertFalse(boolean3);
1420:       assertSame(node0, node2);
1421:       assertNotSame(node0, node1);
1422:       assertNotSame(node1, node0);
1423:       assertNotSame(node1, node2);
1424:       assertSame(node2, node0);
1425:       assertNotSame(node2, node1);
1426:       assertFalse(node0.isIn());
1427:       assertFalse(node0.isString());
1428:       assertFalse(node0.isIf());
1429:       assertFalse(node0.isGetterDef());
1430:       assertFalse(node0.isDelProp());
1431:       assertFalse(node0.isSwitch());
1432:       assertFalse(node0.isNE());
1433:       assertFalse(node0.isArrayLit());
1434:       assertFalse(node0.isFalse());
1435:       assertFalse(node0.isInc());
1436:       assertFalse(node0.isFunction());
1437:       assertFalse(node0.isEmpty());
1438:       assertFalse(node0.isDefaultCase());
1439:       assertFalse(node0.isThrow());
1440:       assertEquals(0, node0.getLineno());
1441:       assertFalse(node0.isObjectLit());
1442:       assertFalse(node0.isGetProp());
1443:       assertEquals(0, node0.getSourcePosition());
1444:       assertFalse(node0.isBreak());
1445:       assertFalse(node0.isNot());
1446:       assertFalse(node0.isAnd());
1447:       assertFalse(node0.isDebugger());
1448:       assertFalse(node0.isVoid());
1449:       assertFalse(node0.isTrue());
1450:       assertFalse(node0.isName());
1451:       assertFalse(node0.isNull());
1452:       assertFalse(node0.isExprResult());
1453:       assertEquals(0, node0.getType());
1454:       assertFalse(node0.isGetElem());
1455:       assertFalse(node0.isCall());
1456:       assertFalse(node0.hasChildren());
1457:       assertFalse(node0.isAssign());
1458:       assertFalse(node0.isTypeOf());
1459:       assertFalse(node0.isDec());
1460:       assertFalse(node0.isComma());
1461:       assertFalse(node0.isWhile());
1462:       assertFalse(node0.isReturn());
1463:       assertFalse(node0.isLabel());
1464:       assertFalse(node0.isOr());
1465:       assertFalse(node0.isContinue());
1466:       assertFalse(node0.hasMoreThanOneChild());
1467:       assertFalse(node0.isNumber());
1468:       assertFalse(node0.isLabelName());
1469:       assertFalse(node0.isNew());
1470:       assertFalse(node0.isCast());
1471:       assertFalse(node0.isAdd());
1472:       assertFalse(node0.isDo());
1473:       assertFalse(node0.isVar());
1474:       assertFalse(node0.isAssignAdd());
1475:       assertEquals(0, node0.getChildCount());
1476:       assertFalse(node0.isSetterDef());
1477:       assertFalse(node0.isInstanceOf());
1478:       assertFalse(node0.isCatch());
1479:       assertEquals(0, node0.getCharno());
1480:       assertFalse(node0.isStringKey());
1481:       assertFalse(node0.isParamList());
1482:       assertFalse(node0.isHook());
1483:       assertFalse(node0.isTry());
1484:       assertFalse(node0.hasOneChild());
1485:       assertFalse(node0.isScript());
1486:       assertFalse(node0.isWith());
1487:       assertFalse(node0.isRegExp());
1488:       assertFalse(node0.isCase());
1489:       assertFalse(node0.isThis());
1490:       assertFalse(node0.isBlock());
1491:       assertFalse(node0.isFor());
1492:       assertFalse(node1.isString());
1493:       assertFalse(node1.isInc());
1494:       assertEquals((-1), node1.getCharno());
1495:       assertFalse(node1.isIn());
1496:       assertFalse(node1.isHook());
1497:       assertFalse(node1.isThrow());
1498:       assertFalse(node1.isCase());
1499:       assertFalse(node1.isIf());
1500:       assertFalse(node1.isBreak());
1501:       assertFalse(node1.isThis());
1502:       assertFalse(node1.isNE());
1503:       assertFalse(node1.isFor());
1504:       assertFalse(node1.isEmpty());
1505:       assertFalse(node1.isComma());
1506:       assertFalse(node1.isInstanceOf());
1507:       assertEquals(0, node1.getType());
1508:       assertFalse(node1.isDelProp());
1509:       assertFalse(node1.isVoid());
1510:       assertFalse(node1.isDefaultCase());
1511:       assertFalse(node1.isScript());
1512:       assertFalse(node1.isTrue());
1513:       assertFalse(node1.isWith());
1514:       assertFalse(node1.isRegExp());
1515:       assertEquals(0, node1.getChildCount());
1516:       assertFalse(node1.hasOneChild());
1517:       assertFalse(node1.isTry());
1518:       assertFalse(node1.isNumber());
1519:       assertFalse(node1.isLabel());
1520:       assertFalse(node1.isGetterDef());
1521:       assertFalse(node1.isArrayLit());
1522:       assertFalse(node1.isStringKey());
1523:       assertFalse(node1.isParamList());
1524:       assertFalse(node1.isLabelName());
1525:       assertFalse(node1.isSwitch());
1526:       assertFalse(node1.isWhile());
1527:       assertFalse(node1.isContinue());
1528:       assertFalse(node1.hasMoreThanOneChild());
1529:       assertFalse(node1.isReturn());
1530:       assertFalse(node1.isBlock());
1531:       assertFalse(node1.isVar());
1532:       assertFalse(node1.isAdd());
1533:       assertFalse(node1.isNew());
1534:       assertFalse(node1.isDo());
1535:       assertFalse(node1.isAssignAdd());
1536:       assertFalse(node1.isDec());
1537:       assertFalse(node1.hasChildren());
1538:       assertFalse(node1.isSetterDef());
1539:       assertFalse(node1.isNull());
1540:       assertFalse(node1.isOr());
1541:       assertFalse(node1.isAssign());
1542:       assertFalse(node1.isTypeOf());
1543:       assertEquals((-1), node1.getLineno());
1544:       assertFalse(node1.isCatch());
1545:       assertFalse(node1.isCall());
1546:       assertFalse(node1.isGetElem());
1547:       assertFalse(node1.isName());
1548:       assertFalse(node1.isExprResult());
1549:       assertFalse(node1.isDebugger());
1550:       assertFalse(node1.isNot());
1551:       assertFalse(node1.isObjectLit());
1552:       assertFalse(node1.isFunction());
1553:       assertFalse(node1.isGetProp());
1554:       assertEquals((-1), node1.getSourcePosition());
1555:       assertFalse(node1.isFalse());
1556:       assertFalse(node1.isCast());
1557:       assertFalse(node1.isAnd());
1558:       assertFalse(node2.isLabel());
1559:       assertFalse(node2.isAssignAdd());
1560:       assertFalse(node2.isReturn());
1561:       assertFalse(node2.isLabelName());
1562:       assertFalse(node2.isNumber());
1563:       assertFalse(node2.isOr());
1564:       assertFalse(node2.isAdd());
1565:       assertFalse(node2.isDo());
1566:       assertFalse(node2.isNew());
1567:       assertFalse(node2.isContinue());
1568:       assertFalse(node2.isCast());
1569:       assertFalse(node2.isVar());
1570:       assertEquals(0, node2.getLineno());
1571:       assertFalse(node2.isGetProp());
1572:       assertFalse(node2.isBreak());
1573:       assertFalse(node2.isNot());
1574:       assertFalse(node2.isName());
1575:       assertFalse(node2.isAnd());
1576:       assertFalse(node2.isNull());
1577:       assertEquals(0, node2.getSourcePosition());
1578:       assertFalse(node2.isObjectLit());
1579:       assertFalse(node2.isDebugger());
1580:       assertEquals(0, node2.getType());
1581:       assertFalse(node2.isTrue());
1582:       assertFalse(node2.isExprResult());
1583:       assertFalse(node2.isVoid());
1584:       assertFalse(node2.isGetElem());
1585:       assertFalse(node2.isWhile());
1586:       assertFalse(node2.isCall());
1587:       assertFalse(node2.isTypeOf());
1588:       assertFalse(node2.hasChildren());
1589:       assertFalse(node2.isAssign());
1590:       assertFalse(node2.isDec());
1591:       assertFalse(node2.isComma());
1592:       assertFalse(node2.isNE());
1593:       assertFalse(node2.isIf());
1594:       assertFalse(node2.isDelProp());
1595:       assertFalse(node2.isCase());
1596:       assertFalse(node2.isEmpty());
1597:       assertFalse(node2.isString());
1598:       assertFalse(node2.isIn());
1599:       assertFalse(node2.isGetterDef());
1600:       assertFalse(node2.isArrayLit());
1601:       assertFalse(node2.isSwitch());
1602:       assertFalse(node2.isInc());
1603:       assertFalse(node2.isDefaultCase());
1604:       assertFalse(node2.isFalse());
1605:       assertFalse(node2.isThrow());
1606:       assertFalse(node2.isFunction());
1607:       assertEquals(0, node2.getChildCount());
1608:       assertFalse(node2.isParamList());
1609:       assertFalse(node2.isInstanceOf());
1610:       assertFalse(node2.isSetterDef());
1611:       assertFalse(node2.isStringKey());
1612:       assertEquals(0, node2.getCharno());
1613:       assertFalse(node2.isBlock());
1614:       assertFalse(node2.isTry());
1615:       assertFalse(node2.isScript());
1616:       assertFalse(node2.hasOneChild());
1617:       assertFalse(node2.isFor());
1618:       assertFalse(node2.isWith());
1619:       assertFalse(node2.isCatch());
1620:       assertFalse(node2.isRegExp());
1621:       assertFalse(node2.isHook());
1622:       assertFalse(node2.isThis());
1623:       assertFalse(node2.hasMoreThanOneChild());
1624:       assertEquals(55, Node.INFERRED_FUNCTION);
1625:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1626:       assertEquals(4095, Node.COLUMN_MASK);
1627:       assertEquals(8, Node.FLAG_NO_THROWS);
1628:       assertEquals(39, Node.EMPTY_BLOCK);
1629:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1630:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1631:       assertEquals(53, Node.INPUT_ID);
1632:       assertEquals(57, Node.REFLECTED_OBJECT);
1633:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1634:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1635:       assertEquals(52, Node.LENGTH);
1636:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1637:       assertEquals(56, Node.CHANGE_TIME);
1638:       assertEquals(36, Node.QUOTED_PROP);
1639:       assertEquals(48, Node.DIRECTIVES);
1640:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1641:       assertEquals(37, Node.OPT_ARG_NAME);
1642:       assertEquals(49, Node.DIRECT_EVAL);
1643:       assertEquals(46, Node.IS_NAMESPACE);
1644:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1645:       assertEquals(12, Node.COLUMN_BITS);
1646:       assertEquals(2, Node.POST_FLAG);
1647:       assertEquals(30, Node.VAR_ARGS_NAME);
1648:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1649:       assertEquals(57, Node.LAST_PROP);
1650:       assertEquals(47, Node.IS_DISPATCHER);
1651:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1652:       assertEquals(29, Node.JSDOC_INFO_PROP);
1653:       assertEquals(1, Node.DECR_FLAG);
1654:       assertEquals(32, Node.INCRDECR_PROP);
1655:       assertEquals(40, Node.ORIGINALNAME_PROP);
1656:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1657:       assertEquals(50, Node.FREE_CALL);
1658:       assertEquals(43, Node.IS_CONSTANT_NAME);
1659:       assertEquals(54, Node.SLASH_V);
1660:       assertEquals(43, Node.IS_CONSTANT_NAME);
1661:       assertEquals(36, Node.QUOTED_PROP);
1662:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1663:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1664:       assertEquals(4095, Node.COLUMN_MASK);
1665:       assertEquals(48, Node.DIRECTIVES);
1666:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1667:       assertEquals(50, Node.FREE_CALL);
1668:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1669:       assertEquals(12, Node.COLUMN_BITS);
1670:       assertEquals(32, Node.INCRDECR_PROP);
1671:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1672:       assertEquals(1, Node.DECR_FLAG);
1673:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1674:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1675:       assertEquals(57, Node.LAST_PROP);
1676:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1677:       assertEquals(54, Node.SLASH_V);
1678:       assertEquals(30, Node.VAR_ARGS_NAME);
1679:       assertEquals(57, Node.REFLECTED_OBJECT);
1680:       assertEquals(46, Node.IS_NAMESPACE);
1681:       assertEquals(40, Node.ORIGINALNAME_PROP);
1682:       assertEquals(49, Node.DIRECT_EVAL);
1683:       assertEquals(37, Node.OPT_ARG_NAME);
1684:       assertEquals(56, Node.CHANGE_TIME);
1685:       assertEquals(47, Node.IS_DISPATCHER);
1686:       assertEquals(2, Node.POST_FLAG);
1687:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1688:       assertEquals(8, Node.FLAG_NO_THROWS);
1689:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1690:       assertEquals(55, Node.INFERRED_FUNCTION);
1691:       assertEquals(52, Node.LENGTH);
1692:       assertEquals(53, Node.INPUT_ID);
1693:       assertEquals(29, Node.JSDOC_INFO_PROP);
1694:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1695:       assertEquals(39, Node.EMPTY_BLOCK);
1696:       assertEquals(48, Node.DIRECTIVES);
1697:       assertEquals(8, Node.FLAG_NO_THROWS);
1698:       assertEquals(4095, Node.COLUMN_MASK);
1699:       assertEquals(55, Node.INFERRED_FUNCTION);
1700:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1701:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1702:       assertEquals(39, Node.EMPTY_BLOCK);
1703:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1704:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1705:       assertEquals(52, Node.LENGTH);
1706:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1707:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1708:       assertEquals(53, Node.INPUT_ID);
1709:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1710:       assertEquals(29, Node.JSDOC_INFO_PROP);
1711:       assertEquals(49, Node.DIRECT_EVAL);
1712:       assertEquals(56, Node.CHANGE_TIME);
1713:       assertEquals(36, Node.QUOTED_PROP);
1714:       assertEquals(57, Node.REFLECTED_OBJECT);
1715:       assertEquals(32, Node.INCRDECR_PROP);
1716:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1717:       assertEquals(37, Node.OPT_ARG_NAME);
1718:       assertEquals(30, Node.VAR_ARGS_NAME);
1719:       assertEquals(1, Node.DECR_FLAG);
1720:       assertEquals(57, Node.LAST_PROP);
1721:       assertEquals(2, Node.POST_FLAG);
1722:       assertEquals(12, Node.COLUMN_BITS);
1723:       assertEquals(47, Node.IS_DISPATCHER);
1724:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1725:       assertEquals(40, Node.ORIGINALNAME_PROP);
1726:       assertEquals(50, Node.FREE_CALL);
1727:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1728:       assertEquals(43, Node.IS_CONSTANT_NAME);
1729:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1730:       assertEquals(46, Node.IS_NAMESPACE);
1731:       assertEquals(54, Node.SLASH_V);
1732:   }
1733: }
RegularFileObject[/tmp/EvoSuite_51_1629223105124/com/google/javascript/rhino/Node_51_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:25 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_51_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_51_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_51_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.SimpleErrorReporter",
258:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
259:       "com.google.common.base.Joiner",
260:       "com.google.common.base.Preconditions",
261:       "com.google.common.base.Joiner$1",
262:       "com.google.common.collect.Collections2",
263:       "com.google.common.base.Joiner$MapJoiner",
264:       "com.google.common.collect.Maps",
265:       "com.google.common.collect.AbstractMultimap",
266:       "com.google.common.collect.AbstractMapBasedMultimap",
267:       "com.google.common.collect.AbstractSetMultimap",
268:       "com.google.common.collect.LinkedHashMultimap",
269:       "com.google.common.collect.AbstractMapEntry",
270:       "com.google.common.collect.ImmutableEntry",
271:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
272:       "com.google.common.collect.AbstractListMultimap",
273:       "com.google.common.collect.ArrayListMultimap",
274:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
275:       "com.google.common.collect.ImmutableCollection",
276:       "com.google.common.collect.RegularImmutableList",
277:       "com.google.common.collect.ObjectArrays",
278:       "com.google.common.collect.ImmutableList",
279:       "com.google.javascript.rhino.jstype.ModificationVisitor",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
281:       "com.google.common.collect.ImmutableCollection$Builder",
282:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
283:       "com.google.common.collect.ImmutableList$Builder",
284:       "com.google.common.collect.UnmodifiableIterator",
285:       "com.google.common.collect.UnmodifiableListIterator",
286:       "com.google.common.collect.Iterators$1",
287:       "com.google.common.collect.Iterators$2",
288:       "com.google.common.collect.Iterators",
289:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
290:       "com.google.javascript.rhino.jstype.JSType$1",
291:       "com.google.javascript.rhino.jstype.JSType",
292:       "com.google.javascript.rhino.jstype.ObjectType",
293:       "com.google.javascript.rhino.jstype.ProxyObjectType",
294:       "com.google.javascript.rhino.jstype.TemplateType",
295:       "com.google.javascript.rhino.jstype.ValueType",
296:       "com.google.javascript.rhino.jstype.BooleanType",
297:       "com.google.javascript.rhino.jstype.NullType",
298:       "com.google.javascript.rhino.jstype.NumberType",
299:       "com.google.javascript.rhino.jstype.StringType",
300:       "com.google.javascript.rhino.jstype.UnknownType",
301:       "com.google.javascript.rhino.jstype.VoidType",
302:       "com.google.javascript.rhino.jstype.AllType",
303:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
304:       "com.google.common.collect.ImmutableMap",
305:       "com.google.common.collect.ImmutableBiMap",
306:       "com.google.common.collect.EmptyImmutableBiMap",
307:       "com.google.javascript.rhino.jstype.PropertyMap$1",
308:       "com.google.javascript.rhino.jstype.PropertyMap",
309:       "com.google.javascript.rhino.jstype.FunctionType",
310:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
311:       "com.google.javascript.rhino.Token",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.JSDocInfo",
330:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
331:       "com.google.common.collect.Sets",
332:       "com.google.common.base.Objects",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
339:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
340:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
341:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.common.collect.Platform",
349:       "com.google.common.collect.Iterables",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.NamedType",
359:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
360:       "com.google.javascript.rhino.jstype.JSType$2",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 17:58:25.639 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(0, "mEwD%^$0r>}", 0, 0);
assertNotNull(node0);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertEquals(0, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getType());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);

node0.setSourceEncodedPositionForTree(0);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertEquals(0, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getType());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);

Node node1 = Node.newString(0, "mEwD%^$0r>}");
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertNotSame(node1, node0);
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

Node node2 = node0.clonePropsFrom(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertEquals(0, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getType());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertEquals(0, node2.getLineno());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNot());
assertFalse(node2.isName());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertEquals(0, node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertEquals(0, node2.getType());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getCharno());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

boolean boolean0 = node2.isEquivalentTo(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean0);
assertSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertEquals(0, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getType());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertEquals(0, node2.getLineno());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNot());
assertFalse(node2.isName());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertEquals(0, node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertEquals(0, node2.getType());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getCharno());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

node1.setWasEmptyNode(false);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(iterable0.contains(node2));
assertNotNull(iterable0);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean1 = node1.isVoid();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(boolean1 == boolean0);
assertFalse(boolean1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean2 = node0.isDebugger();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(boolean2);
assertSame(node0, node2);
assertNotSame(node0, node1);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertEquals(0, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getType());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);

boolean boolean3 = node2.isAnd();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3 == boolean0);
assertFalse(boolean3);
assertSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertEquals(0, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getType());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertEquals(0, node2.getLineno());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNot());
assertFalse(node2.isName());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertEquals(0, node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertEquals(0, node2.getType());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getCharno());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);


[MASTER] 17:58:32.262 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_88_1629223112013/com/google/javascript/rhino/Node_88_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_88_1629223112013/com/google/javascript/rhino/Node_88_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:32.262 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:32.262 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:32.264 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 673
[MASTER] 17:58:32.267 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_88_1629223112013/com/google/javascript/rhino/Node_88_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:32 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_88_tmp__ESTest extends Node_88_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
25:       assertNotNull(simpleErrorReporter0);
26:       
27:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
28:       assertNotNull(jSTypeRegistry0);
29:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
30:       
31:       JSType[] jSTypeArray0 = new JSType[0];
32:       Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
33:       assertNotNull(node0);
34:       assertEquals(0, jSTypeArray0.length);
35:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
36:       assertFalse(node0.isWhile());
37:       assertFalse(node0.isDo());
38:       assertFalse(node0.isContinue());
39:       assertFalse(node0.isNew());
40:       assertEquals((-1), node0.getLineno());
41:       assertFalse(node0.isOr());
42:       assertFalse(node0.isAdd());
43:       assertEquals((-1), node0.getSourcePosition());
44:       assertFalse(node0.isLabelName());
45:       assertFalse(node0.isStringKey());
46:       assertFalse(node0.isSetterDef());
47:       assertFalse(node0.isCast());
48:       assertEquals(0, node0.getChildCount());
49:       assertFalse(node0.isAssignAdd());
50:       assertFalse(node0.isVar());
51:       assertFalse(node0.isLabel());
52:       assertFalse(node0.isNot());
53:       assertFalse(node0.isAnd());
54:       assertFalse(node0.isDefaultCase());
55:       assertFalse(node0.isExprResult());
56:       assertFalse(node0.isVoid());
57:       assertTrue(node0.isParamList());
58:       assertFalse(node0.isTrue());
59:       assertFalse(node0.isObjectLit());
60:       assertFalse(node0.isNull());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isAssign());
63:       assertFalse(node0.isDelProp());
64:       assertFalse(node0.isName());
65:       assertFalse(node0.isCall());
66:       assertFalse(node0.isGetElem());
67:       assertFalse(node0.isGetProp());
68:       assertFalse(node0.isBreak());
69:       assertFalse(node0.isReturn());
70:       assertFalse(node0.isComma());
71:       assertFalse(node0.isTypeOf());
72:       assertFalse(node0.isDec());
73:       assertFalse(node0.hasChildren());
74:       assertFalse(node0.isString());
75:       assertFalse(node0.isSwitch());
76:       assertFalse(node0.isInc());
77:       assertFalse(node0.isCase());
78:       assertFalse(node0.isIn());
79:       assertFalse(node0.isNE());
80:       assertEquals((-1), node0.getCharno());
81:       assertFalse(node0.isEmpty());
82:       assertFalse(node0.isFalse());
83:       assertEquals(83, node0.getType());
84:       assertFalse(node0.isArrayLit());
85:       assertFalse(node0.isFunction());
86:       assertFalse(node0.isThrow());
87:       assertFalse(node0.isWith());
88:       assertFalse(node0.isCatch());
89:       assertFalse(node0.isScript());
90:       assertFalse(node0.isFor());
91:       assertFalse(node0.isGetterDef());
92:       assertFalse(node0.isNumber());
93:       assertFalse(node0.isIf());
94:       assertFalse(node0.hasOneChild());
95:       assertFalse(node0.isTry());
96:       assertFalse(node0.isInstanceOf());
97:       assertFalse(node0.isThis());
98:       assertFalse(node0.hasMoreThanOneChild());
99:       assertFalse(node0.isRegExp());
100:       assertFalse(node0.isHook());
101:       assertFalse(node0.isBlock());
102:       assertEquals(36, Node.QUOTED_PROP);
103:       assertEquals(4095, Node.COLUMN_MASK);
104:       assertEquals(53, Node.INPUT_ID);
105:       assertEquals(55, Node.INFERRED_FUNCTION);
106:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
107:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
108:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
109:       assertEquals(37, Node.OPT_ARG_NAME);
110:       assertEquals(8, Node.FLAG_NO_THROWS);
111:       assertEquals(39, Node.EMPTY_BLOCK);
112:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
113:       assertEquals(29, Node.JSDOC_INFO_PROP);
114:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
115:       assertEquals(52, Node.LENGTH);
116:       assertEquals(48, Node.DIRECTIVES);
117:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
118:       assertEquals(56, Node.CHANGE_TIME);
119:       assertEquals(57, Node.REFLECTED_OBJECT);
120:       assertEquals(15, Node.NO_SIDE_EFFECTS);
121:       assertEquals(57, Node.LAST_PROP);
122:       assertEquals(30, Node.VAR_ARGS_NAME);
123:       assertEquals(49, Node.DIRECT_EVAL);
124:       assertEquals(1, Node.DECR_FLAG);
125:       assertEquals(32, Node.INCRDECR_PROP);
126:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
127:       assertEquals(12, Node.COLUMN_BITS);
128:       assertEquals(47, Node.IS_DISPATCHER);
129:       assertEquals(2, Node.POST_FLAG);
130:       assertEquals(50, Node.FREE_CALL);
131:       assertEquals(40, Node.ORIGINALNAME_PROP);
132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
133:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
134:       assertEquals(51, Node.STATIC_SOURCE_FILE);
135:       assertEquals(43, Node.IS_CONSTANT_NAME);
136:       assertEquals(46, Node.IS_NAMESPACE);
137:       assertEquals(54, Node.SLASH_V);
138:       
139:       Node node1 = Node.newString("com.google.common.collect.RegularImmutableList", 53, (-1125));
140:       assertFalse(node1.equals((Object)node0));
141:       assertNotNull(node1);
142:       assertEquals((-1), node1.getCharno());
143:       assertFalse(node1.isSwitch());
144:       assertFalse(node1.isHook());
145:       assertFalse(node1.isFalse());
146:       assertFalse(node1.isBreak());
147:       assertFalse(node1.isIf());
148:       assertFalse(node1.isNE());
149:       assertFalse(node1.isThrow());
150:       assertFalse(node1.isIn());
151:       assertFalse(node1.isInc());
152:       assertFalse(node1.isEmpty());
153:       assertFalse(node1.isRegExp());
154:       assertFalse(node1.isTry());
155:       assertFalse(node1.isDefaultCase());
156:       assertFalse(node1.isWith());
157:       assertFalse(node1.isLabelName());
158:       assertFalse(node1.isInstanceOf());
159:       assertFalse(node1.isArrayLit());
160:       assertFalse(node1.isCatch());
161:       assertFalse(node1.isThis());
162:       assertFalse(node1.isParamList());
163:       assertFalse(node1.isFor());
164:       assertFalse(node1.isCase());
165:       assertFalse(node1.isGetterDef());
166:       assertFalse(node1.hasOneChild());
167:       assertFalse(node1.isNumber());
168:       assertFalse(node1.isScript());
169:       assertFalse(node1.isBlock());
170:       assertFalse(node1.isNew());
171:       assertTrue(node1.isString());
172:       assertFalse(node1.isWhile());
173:       assertFalse(node1.isVar());
174:       assertFalse(node1.isStringKey());
175:       assertFalse(node1.isContinue());
176:       assertFalse(node1.hasMoreThanOneChild());
177:       assertFalse(node1.isName());
178:       assertFalse(node1.isCall());
179:       assertFalse(node1.isLabel());
180:       assertFalse(node1.isAssignAdd());
181:       assertEquals((-1), node1.getLineno());
182:       assertFalse(node1.isOr());
183:       assertEquals(0, node1.getChildCount());
184:       assertFalse(node1.isNull());
185:       assertFalse(node1.isDo());
186:       assertFalse(node1.isSetterDef());
187:       assertFalse(node1.isAdd());
188:       assertFalse(node1.isDebugger());
189:       assertFalse(node1.isFunction());
190:       assertFalse(node1.isVoid());
191:       assertFalse(node1.isTrue());
192:       assertEquals(40, node1.getType());
193:       assertFalse(node1.isGetElem());
194:       assertFalse(node1.isAnd());
195:       assertFalse(node1.isAssign());
196:       assertFalse(node1.isDelProp());
197:       assertFalse(node1.isCast());
198:       assertFalse(node1.isExprResult());
199:       assertFalse(node1.isGetProp());
200:       assertFalse(node1.isComma());
201:       assertFalse(node1.isTypeOf());
202:       assertEquals((-1), node1.getSourcePosition());
203:       assertFalse(node1.isDec());
204:       assertFalse(node1.hasChildren());
205:       assertFalse(node1.isReturn());
206:       assertFalse(node1.isObjectLit());
207:       assertFalse(node1.isNot());
208:       assertEquals(53, Node.INPUT_ID);
209:       assertEquals(43, Node.IS_CONSTANT_NAME);
210:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
211:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
212:       assertEquals(29, Node.JSDOC_INFO_PROP);
213:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
214:       assertEquals(36, Node.QUOTED_PROP);
215:       assertEquals(55, Node.INFERRED_FUNCTION);
216:       assertEquals(48, Node.DIRECTIVES);
217:       assertEquals(37, Node.OPT_ARG_NAME);
218:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
219:       assertEquals(56, Node.CHANGE_TIME);
220:       assertEquals(12, Node.COLUMN_BITS);
221:       assertEquals(32, Node.INCRDECR_PROP);
222:       assertEquals(49, Node.DIRECT_EVAL);
223:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
225:       assertEquals(4095, Node.COLUMN_MASK);
226:       assertEquals(54, Node.SLASH_V);
227:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
228:       assertEquals(57, Node.REFLECTED_OBJECT);
229:       assertEquals(57, Node.LAST_PROP);
230:       assertEquals(1, Node.DECR_FLAG);
231:       assertEquals(50, Node.FREE_CALL);
232:       assertEquals(51, Node.STATIC_SOURCE_FILE);
233:       assertEquals(15, Node.NO_SIDE_EFFECTS);
234:       assertEquals(8, Node.FLAG_NO_THROWS);
235:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
236:       assertEquals(52, Node.LENGTH);
237:       assertEquals(39, Node.EMPTY_BLOCK);
238:       assertEquals(46, Node.IS_NAMESPACE);
239:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
240:       assertEquals(30, Node.VAR_ARGS_NAME);
241:       assertEquals(40, Node.ORIGINALNAME_PROP);
242:       assertEquals(47, Node.IS_DISPATCHER);
243:       assertEquals(2, Node.POST_FLAG);
244:       
245:       boolean boolean0 = node0.isVoid();
246:       assertFalse(node0.equals((Object)node1));
247:       assertEquals(0, jSTypeArray0.length);
248:       assertFalse(boolean0);
249:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
250:       assertFalse(node0.isWhile());
251:       assertFalse(node0.isDo());
252:       assertFalse(node0.isContinue());
253:       assertFalse(node0.isNew());
254:       assertEquals((-1), node0.getLineno());
255:       assertFalse(node0.isOr());
256:       assertFalse(node0.isAdd());
257:       assertEquals((-1), node0.getSourcePosition());
258:       assertFalse(node0.isLabelName());
259:       assertFalse(node0.isStringKey());
260:       assertFalse(node0.isSetterDef());
261:       assertFalse(node0.isCast());
262:       assertEquals(0, node0.getChildCount());
263:       assertFalse(node0.isAssignAdd());
264:       assertFalse(node0.isVar());
265:       assertFalse(node0.isLabel());
266:       assertFalse(node0.isNot());
267:       assertFalse(node0.isAnd());
268:       assertFalse(node0.isDefaultCase());
269:       assertFalse(node0.isExprResult());
270:       assertFalse(node0.isVoid());
271:       assertTrue(node0.isParamList());
272:       assertFalse(node0.isTrue());
273:       assertFalse(node0.isObjectLit());
274:       assertFalse(node0.isNull());
275:       assertFalse(node0.isDebugger());
276:       assertFalse(node0.isAssign());
277:       assertFalse(node0.isDelProp());
278:       assertFalse(node0.isName());
279:       assertFalse(node0.isCall());
280:       assertFalse(node0.isGetElem());
281:       assertFalse(node0.isGetProp());
282:       assertFalse(node0.isBreak());
283:       assertFalse(node0.isReturn());
284:       assertFalse(node0.isComma());
285:       assertFalse(node0.isTypeOf());
286:       assertFalse(node0.isDec());
287:       assertFalse(node0.hasChildren());
288:       assertFalse(node0.isString());
289:       assertFalse(node0.isSwitch());
290:       assertFalse(node0.isInc());
291:       assertFalse(node0.isCase());
292:       assertFalse(node0.isIn());
293:       assertFalse(node0.isNE());
294:       assertEquals((-1), node0.getCharno());
295:       assertFalse(node0.isEmpty());
296:       assertFalse(node0.isFalse());
297:       assertEquals(83, node0.getType());
298:       assertFalse(node0.isArrayLit());
299:       assertFalse(node0.isFunction());
300:       assertFalse(node0.isThrow());
301:       assertFalse(node0.isWith());
302:       assertFalse(node0.isCatch());
303:       assertFalse(node0.isScript());
304:       assertFalse(node0.isFor());
305:       assertFalse(node0.isGetterDef());
306:       assertFalse(node0.isNumber());
307:       assertFalse(node0.isIf());
308:       assertFalse(node0.hasOneChild());
309:       assertFalse(node0.isTry());
310:       assertFalse(node0.isInstanceOf());
311:       assertFalse(node0.isThis());
312:       assertFalse(node0.hasMoreThanOneChild());
313:       assertFalse(node0.isRegExp());
314:       assertFalse(node0.isHook());
315:       assertFalse(node0.isBlock());
316:       assertEquals(36, Node.QUOTED_PROP);
317:       assertEquals(4095, Node.COLUMN_MASK);
318:       assertEquals(53, Node.INPUT_ID);
319:       assertEquals(55, Node.INFERRED_FUNCTION);
320:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
321:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
322:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
323:       assertEquals(37, Node.OPT_ARG_NAME);
324:       assertEquals(8, Node.FLAG_NO_THROWS);
325:       assertEquals(39, Node.EMPTY_BLOCK);
326:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
327:       assertEquals(29, Node.JSDOC_INFO_PROP);
328:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
329:       assertEquals(52, Node.LENGTH);
330:       assertEquals(48, Node.DIRECTIVES);
331:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
332:       assertEquals(56, Node.CHANGE_TIME);
333:       assertEquals(57, Node.REFLECTED_OBJECT);
334:       assertEquals(15, Node.NO_SIDE_EFFECTS);
335:       assertEquals(57, Node.LAST_PROP);
336:       assertEquals(30, Node.VAR_ARGS_NAME);
337:       assertEquals(49, Node.DIRECT_EVAL);
338:       assertEquals(1, Node.DECR_FLAG);
339:       assertEquals(32, Node.INCRDECR_PROP);
340:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
341:       assertEquals(12, Node.COLUMN_BITS);
342:       assertEquals(47, Node.IS_DISPATCHER);
343:       assertEquals(2, Node.POST_FLAG);
344:       assertEquals(50, Node.FREE_CALL);
345:       assertEquals(40, Node.ORIGINALNAME_PROP);
346:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
347:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
348:       assertEquals(51, Node.STATIC_SOURCE_FILE);
349:       assertEquals(43, Node.IS_CONSTANT_NAME);
350:       assertEquals(46, Node.IS_NAMESPACE);
351:       assertEquals(54, Node.SLASH_V);
352:       
353:       node0.removeProp(39);
354:       assertFalse(node0.equals((Object)node1));
355:       assertEquals(0, jSTypeArray0.length);
356:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
357:       assertFalse(node0.isWhile());
358:       assertFalse(node0.isDo());
359:       assertFalse(node0.isContinue());
360:       assertFalse(node0.isNew());
361:       assertEquals((-1), node0.getLineno());
362:       assertFalse(node0.isOr());
363:       assertFalse(node0.isAdd());
364:       assertEquals((-1), node0.getSourcePosition());
365:       assertFalse(node0.isLabelName());
366:       assertFalse(node0.isStringKey());
367:       assertFalse(node0.isSetterDef());
368:       assertFalse(node0.isCast());
369:       assertEquals(0, node0.getChildCount());
370:       assertFalse(node0.isAssignAdd());
371:       assertFalse(node0.isVar());
372:       assertFalse(node0.isLabel());
373:       assertFalse(node0.isNot());
374:       assertFalse(node0.isAnd());
375:       assertFalse(node0.isDefaultCase());
376:       assertFalse(node0.isExprResult());
377:       assertFalse(node0.isVoid());
378:       assertTrue(node0.isParamList());
379:       assertFalse(node0.isTrue());
380:       assertFalse(node0.isObjectLit());
381:       assertFalse(node0.isNull());
382:       assertFalse(node0.isDebugger());
383:       assertFalse(node0.isAssign());
384:       assertFalse(node0.isDelProp());
385:       assertFalse(node0.isName());
386:       assertFalse(node0.isCall());
387:       assertFalse(node0.isGetElem());
388:       assertFalse(node0.isGetProp());
389:       assertFalse(node0.isBreak());
390:       assertFalse(node0.isReturn());
391:       assertFalse(node0.isComma());
392:       assertFalse(node0.isTypeOf());
393:       assertFalse(node0.isDec());
394:       assertFalse(node0.hasChildren());
395:       assertFalse(node0.isString());
396:       assertFalse(node0.isSwitch());
397:       assertFalse(node0.isInc());
398:       assertFalse(node0.isCase());
399:       assertFalse(node0.isIn());
400:       assertFalse(node0.isNE());
401:       assertEquals((-1), node0.getCharno());
402:       assertFalse(node0.isEmpty());
403:       assertFalse(node0.isFalse());
404:       assertEquals(83, node0.getType());
405:       assertFalse(node0.isArrayLit());
406:       assertFalse(node0.isFunction());
407:       assertFalse(node0.isThrow());
408:       assertFalse(node0.isWith());
409:       assertFalse(node0.isCatch());
410:       assertFalse(node0.isScript());
411:       assertFalse(node0.isFor());
412:       assertFalse(node0.isGetterDef());
413:       assertFalse(node0.isNumber());
414:       assertFalse(node0.isIf());
415:       assertFalse(node0.hasOneChild());
416:       assertFalse(node0.isTry());
417:       assertFalse(node0.isInstanceOf());
418:       assertFalse(node0.isThis());
419:       assertFalse(node0.hasMoreThanOneChild());
420:       assertFalse(node0.isRegExp());
421:       assertFalse(node0.isHook());
422:       assertFalse(node0.isBlock());
423:       assertEquals(36, Node.QUOTED_PROP);
424:       assertEquals(4095, Node.COLUMN_MASK);
425:       assertEquals(53, Node.INPUT_ID);
426:       assertEquals(55, Node.INFERRED_FUNCTION);
427:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
428:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
429:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
430:       assertEquals(37, Node.OPT_ARG_NAME);
431:       assertEquals(8, Node.FLAG_NO_THROWS);
432:       assertEquals(39, Node.EMPTY_BLOCK);
433:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
434:       assertEquals(29, Node.JSDOC_INFO_PROP);
435:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
436:       assertEquals(52, Node.LENGTH);
437:       assertEquals(48, Node.DIRECTIVES);
438:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
439:       assertEquals(56, Node.CHANGE_TIME);
440:       assertEquals(57, Node.REFLECTED_OBJECT);
441:       assertEquals(15, Node.NO_SIDE_EFFECTS);
442:       assertEquals(57, Node.LAST_PROP);
443:       assertEquals(30, Node.VAR_ARGS_NAME);
444:       assertEquals(49, Node.DIRECT_EVAL);
445:       assertEquals(1, Node.DECR_FLAG);
446:       assertEquals(32, Node.INCRDECR_PROP);
447:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
448:       assertEquals(12, Node.COLUMN_BITS);
449:       assertEquals(47, Node.IS_DISPATCHER);
450:       assertEquals(2, Node.POST_FLAG);
451:       assertEquals(50, Node.FREE_CALL);
452:       assertEquals(40, Node.ORIGINALNAME_PROP);
453:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
454:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
455:       assertEquals(51, Node.STATIC_SOURCE_FILE);
456:       assertEquals(43, Node.IS_CONSTANT_NAME);
457:       assertEquals(46, Node.IS_NAMESPACE);
458:       assertEquals(54, Node.SLASH_V);
459:       
460:       node1.setSourceFileForTesting("Object#Element");
461:       assertFalse(node1.equals((Object)node0));
462:       assertEquals((-1), node1.getCharno());
463:       assertFalse(node1.isSwitch());
464:       assertFalse(node1.isHook());
465:       assertFalse(node1.isFalse());
466:       assertFalse(node1.isBreak());
467:       assertFalse(node1.isIf());
468:       assertFalse(node1.isNE());
469:       assertFalse(node1.isThrow());
470:       assertFalse(node1.isIn());
471:       assertFalse(node1.isInc());
472:       assertFalse(node1.isEmpty());
473:       assertFalse(node1.isRegExp());
474:       assertFalse(node1.isTry());
475:       assertFalse(node1.isDefaultCase());
476:       assertFalse(node1.isWith());
477:       assertFalse(node1.isLabelName());
478:       assertFalse(node1.isInstanceOf());
479:       assertFalse(node1.isArrayLit());
480:       assertFalse(node1.isCatch());
481:       assertFalse(node1.isThis());
482:       assertFalse(node1.isParamList());
483:       assertFalse(node1.isFor());
484:       assertFalse(node1.isCase());
485:       assertFalse(node1.isGetterDef());
486:       assertFalse(node1.hasOneChild());
487:       assertFalse(node1.isNumber());
488:       assertFalse(node1.isScript());
489:       assertFalse(node1.isBlock());
490:       assertFalse(node1.isNew());
491:       assertTrue(node1.isString());
492:       assertFalse(node1.isWhile());
493:       assertFalse(node1.isVar());
494:       assertFalse(node1.isStringKey());
495:       assertFalse(node1.isContinue());
496:       assertFalse(node1.hasMoreThanOneChild());
497:       assertFalse(node1.isName());
498:       assertFalse(node1.isCall());
499:       assertFalse(node1.isLabel());
500:       assertFalse(node1.isAssignAdd());
501:       assertEquals((-1), node1.getLineno());
502:       assertFalse(node1.isOr());
503:       assertEquals(0, node1.getChildCount());
504:       assertFalse(node1.isNull());
505:       assertFalse(node1.isDo());
506:       assertFalse(node1.isSetterDef());
507:       assertFalse(node1.isAdd());
508:       assertFalse(node1.isDebugger());
509:       assertFalse(node1.isFunction());
510:       assertFalse(node1.isVoid());
511:       assertFalse(node1.isTrue());
512:       assertEquals(40, node1.getType());
513:       assertFalse(node1.isGetElem());
514:       assertFalse(node1.isAnd());
515:       assertFalse(node1.isAssign());
516:       assertFalse(node1.isDelProp());
517:       assertFalse(node1.isCast());
518:       assertFalse(node1.isExprResult());
519:       assertFalse(node1.isGetProp());
520:       assertFalse(node1.isComma());
521:       assertFalse(node1.isTypeOf());
522:       assertEquals((-1), node1.getSourcePosition());
523:       assertFalse(node1.isDec());
524:       assertFalse(node1.hasChildren());
525:       assertFalse(node1.isReturn());
526:       assertFalse(node1.isObjectLit());
527:       assertFalse(node1.isNot());
528:       assertEquals(53, Node.INPUT_ID);
529:       assertEquals(43, Node.IS_CONSTANT_NAME);
530:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
531:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
532:       assertEquals(29, Node.JSDOC_INFO_PROP);
533:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
534:       assertEquals(36, Node.QUOTED_PROP);
535:       assertEquals(55, Node.INFERRED_FUNCTION);
536:       assertEquals(48, Node.DIRECTIVES);
537:       assertEquals(37, Node.OPT_ARG_NAME);
538:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
539:       assertEquals(56, Node.CHANGE_TIME);
540:       assertEquals(12, Node.COLUMN_BITS);
541:       assertEquals(32, Node.INCRDECR_PROP);
542:       assertEquals(49, Node.DIRECT_EVAL);
543:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
544:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
545:       assertEquals(4095, Node.COLUMN_MASK);
546:       assertEquals(54, Node.SLASH_V);
547:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
548:       assertEquals(57, Node.REFLECTED_OBJECT);
549:       assertEquals(57, Node.LAST_PROP);
550:       assertEquals(1, Node.DECR_FLAG);
551:       assertEquals(50, Node.FREE_CALL);
552:       assertEquals(51, Node.STATIC_SOURCE_FILE);
553:       assertEquals(15, Node.NO_SIDE_EFFECTS);
554:       assertEquals(8, Node.FLAG_NO_THROWS);
555:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
556:       assertEquals(52, Node.LENGTH);
557:       assertEquals(39, Node.EMPTY_BLOCK);
558:       assertEquals(46, Node.IS_NAMESPACE);
559:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
560:       assertEquals(30, Node.VAR_ARGS_NAME);
561:       assertEquals(40, Node.ORIGINALNAME_PROP);
562:       assertEquals(47, Node.IS_DISPATCHER);
563:       assertEquals(2, Node.POST_FLAG);
564:       
565:       JSDocInfo jSDocInfo0 = node1.getJSDocInfo();
566:       assertFalse(node1.equals((Object)node0));
567:       assertNull(jSDocInfo0);
568:       assertEquals((-1), node1.getCharno());
569:       assertFalse(node1.isSwitch());
570:       assertFalse(node1.isHook());
571:       assertFalse(node1.isFalse());
572:       assertFalse(node1.isBreak());
573:       assertFalse(node1.isIf());
574:       assertFalse(node1.isNE());
575:       assertFalse(node1.isThrow());
576:       assertFalse(node1.isIn());
577:       assertFalse(node1.isInc());
578:       assertFalse(node1.isEmpty());
579:       assertFalse(node1.isRegExp());
580:       assertFalse(node1.isTry());
581:       assertFalse(node1.isDefaultCase());
582:       assertFalse(node1.isWith());
583:       assertFalse(node1.isLabelName());
584:       assertFalse(node1.isInstanceOf());
585:       assertFalse(node1.isArrayLit());
586:       assertFalse(node1.isCatch());
587:       assertFalse(node1.isThis());
588:       assertFalse(node1.isParamList());
589:       assertFalse(node1.isFor());
590:       assertFalse(node1.isCase());
591:       assertFalse(node1.isGetterDef());
592:       assertFalse(node1.hasOneChild());
593:       assertFalse(node1.isNumber());
594:       assertFalse(node1.isScript());
595:       assertFalse(node1.isBlock());
596:       assertFalse(node1.isNew());
597:       assertTrue(node1.isString());
598:       assertFalse(node1.isWhile());
599:       assertFalse(node1.isVar());
600:       assertFalse(node1.isStringKey());
601:       assertFalse(node1.isContinue());
602:       assertFalse(node1.hasMoreThanOneChild());
603:       assertFalse(node1.isName());
604:       assertFalse(node1.isCall());
605:       assertFalse(node1.isLabel());
606:       assertFalse(node1.isAssignAdd());
607:       assertEquals((-1), node1.getLineno());
608:       assertFalse(node1.isOr());
609:       assertEquals(0, node1.getChildCount());
610:       assertFalse(node1.isNull());
611:       assertFalse(node1.isDo());
612:       assertFalse(node1.isSetterDef());
613:       assertFalse(node1.isAdd());
614:       assertFalse(node1.isDebugger());
615:       assertFalse(node1.isFunction());
616:       assertFalse(node1.isVoid());
617:       assertFalse(node1.isTrue());
618:       assertEquals(40, node1.getType());
619:       assertFalse(node1.isGetElem());
620:       assertFalse(node1.isAnd());
621:       assertFalse(node1.isAssign());
622:       assertFalse(node1.isDelProp());
623:       assertFalse(node1.isCast());
624:       assertFalse(node1.isExprResult());
625:       assertFalse(node1.isGetProp());
626:       assertFalse(node1.isComma());
627:       assertFalse(node1.isTypeOf());
628:       assertEquals((-1), node1.getSourcePosition());
629:       assertFalse(node1.isDec());
630:       assertFalse(node1.hasChildren());
631:       assertFalse(node1.isReturn());
632:       assertFalse(node1.isObjectLit());
633:       assertFalse(node1.isNot());
634:       assertEquals(53, Node.INPUT_ID);
635:       assertEquals(43, Node.IS_CONSTANT_NAME);
636:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
637:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
638:       assertEquals(29, Node.JSDOC_INFO_PROP);
639:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
640:       assertEquals(36, Node.QUOTED_PROP);
641:       assertEquals(55, Node.INFERRED_FUNCTION);
642:       assertEquals(48, Node.DIRECTIVES);
643:       assertEquals(37, Node.OPT_ARG_NAME);
644:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
645:       assertEquals(56, Node.CHANGE_TIME);
646:       assertEquals(12, Node.COLUMN_BITS);
647:       assertEquals(32, Node.INCRDECR_PROP);
648:       assertEquals(49, Node.DIRECT_EVAL);
649:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
650:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
651:       assertEquals(4095, Node.COLUMN_MASK);
652:       assertEquals(54, Node.SLASH_V);
653:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
654:       assertEquals(57, Node.REFLECTED_OBJECT);
655:       assertEquals(57, Node.LAST_PROP);
656:       assertEquals(1, Node.DECR_FLAG);
657:       assertEquals(50, Node.FREE_CALL);
658:       assertEquals(51, Node.STATIC_SOURCE_FILE);
659:       assertEquals(15, Node.NO_SIDE_EFFECTS);
660:       assertEquals(8, Node.FLAG_NO_THROWS);
661:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
662:       assertEquals(52, Node.LENGTH);
663:       assertEquals(39, Node.EMPTY_BLOCK);
664:       assertEquals(46, Node.IS_NAMESPACE);
665:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
666:       assertEquals(30, Node.VAR_ARGS_NAME);
667:       assertEquals(40, Node.ORIGINALNAME_PROP);
668:       assertEquals(47, Node.IS_DISPATCHER);
669:       assertEquals(2, Node.POST_FLAG);
670:       
671:       Iterable<Node> iterable0 = node0.children();
672:       assertFalse(node0.equals((Object)node1));
673:       assertFalse(iterable0.contains(node0));
674:       assertNotNull(iterable0);
675:       assertEquals(0, jSTypeArray0.length);
676:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
677:       assertFalse(node0.isWhile());
678:       assertFalse(node0.isDo());
679:       assertFalse(node0.isContinue());
680:       assertFalse(node0.isNew());
681:       assertEquals((-1), node0.getLineno());
682:       assertFalse(node0.isOr());
683:       assertFalse(node0.isAdd());
684:       assertEquals((-1), node0.getSourcePosition());
685:       assertFalse(node0.isLabelName());
686:       assertFalse(node0.isStringKey());
687:       assertFalse(node0.isSetterDef());
688:       assertFalse(node0.isCast());
689:       assertEquals(0, node0.getChildCount());
690:       assertFalse(node0.isAssignAdd());
691:       assertFalse(node0.isVar());
692:       assertFalse(node0.isLabel());
693:       assertFalse(node0.isNot());
694:       assertFalse(node0.isAnd());
695:       assertFalse(node0.isDefaultCase());
696:       assertFalse(node0.isExprResult());
697:       assertFalse(node0.isVoid());
698:       assertTrue(node0.isParamList());
699:       assertFalse(node0.isTrue());
700:       assertFalse(node0.isObjectLit());
701:       assertFalse(node0.isNull());
702:       assertFalse(node0.isDebugger());
703:       assertFalse(node0.isAssign());
704:       assertFalse(node0.isDelProp());
705:       assertFalse(node0.isName());
706:       assertFalse(node0.isCall());
707:       assertFalse(node0.isGetElem());
708:       assertFalse(node0.isGetProp());
709:       assertFalse(node0.isBreak());
710:       assertFalse(node0.isReturn());
711:       assertFalse(node0.isComma());
712:       assertFalse(node0.isTypeOf());
713:       assertFalse(node0.isDec());
714:       assertFalse(node0.hasChildren());
715:       assertFalse(node0.isString());
716:       assertFalse(node0.isSwitch());
717:       assertFalse(node0.isInc());
718:       assertFalse(node0.isCase());
719:       assertFalse(node0.isIn());
720:       assertFalse(node0.isNE());
721:       assertEquals((-1), node0.getCharno());
722:       assertFalse(node0.isEmpty());
723:       assertFalse(node0.isFalse());
724:       assertEquals(83, node0.getType());
725:       assertFalse(node0.isArrayLit());
726:       assertFalse(node0.isFunction());
727:       assertFalse(node0.isThrow());
728:       assertFalse(node0.isWith());
729:       assertFalse(node0.isCatch());
730:       assertFalse(node0.isScript());
731:       assertFalse(node0.isFor());
732:       assertFalse(node0.isGetterDef());
733:       assertFalse(node0.isNumber());
734:       assertFalse(node0.isIf());
735:       assertFalse(node0.hasOneChild());
736:       assertFalse(node0.isTry());
737:       assertFalse(node0.isInstanceOf());
738:       assertFalse(node0.isThis());
739:       assertFalse(node0.hasMoreThanOneChild());
740:       assertFalse(node0.isRegExp());
741:       assertFalse(node0.isHook());
742:       assertFalse(node0.isBlock());
743:       assertEquals(36, Node.QUOTED_PROP);
744:       assertEquals(4095, Node.COLUMN_MASK);
745:       assertEquals(53, Node.INPUT_ID);
746:       assertEquals(55, Node.INFERRED_FUNCTION);
747:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
748:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
749:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
750:       assertEquals(37, Node.OPT_ARG_NAME);
751:       assertEquals(8, Node.FLAG_NO_THROWS);
752:       assertEquals(39, Node.EMPTY_BLOCK);
753:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
754:       assertEquals(29, Node.JSDOC_INFO_PROP);
755:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
756:       assertEquals(52, Node.LENGTH);
757:       assertEquals(48, Node.DIRECTIVES);
758:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
759:       assertEquals(56, Node.CHANGE_TIME);
760:       assertEquals(57, Node.REFLECTED_OBJECT);
761:       assertEquals(15, Node.NO_SIDE_EFFECTS);
762:       assertEquals(57, Node.LAST_PROP);
763:       assertEquals(30, Node.VAR_ARGS_NAME);
764:       assertEquals(49, Node.DIRECT_EVAL);
765:       assertEquals(1, Node.DECR_FLAG);
766:       assertEquals(32, Node.INCRDECR_PROP);
767:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
768:       assertEquals(12, Node.COLUMN_BITS);
769:       assertEquals(47, Node.IS_DISPATCHER);
770:       assertEquals(2, Node.POST_FLAG);
771:       assertEquals(50, Node.FREE_CALL);
772:       assertEquals(40, Node.ORIGINALNAME_PROP);
773:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
774:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
775:       assertEquals(51, Node.STATIC_SOURCE_FILE);
776:       assertEquals(43, Node.IS_CONSTANT_NAME);
777:       assertEquals(46, Node.IS_NAMESPACE);
778:       assertEquals(54, Node.SLASH_V);
779:       
780:       boolean boolean1 = node0.isBlock();
781:       assertFalse(node0.equals((Object)node1));
782:       assertTrue(boolean1 == boolean0);
783:       assertEquals(0, jSTypeArray0.length);
784:       assertFalse(boolean1);
785:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
786:       assertFalse(node0.isWhile());
787:       assertFalse(node0.isDo());
788:       assertFalse(node0.isContinue());
789:       assertFalse(node0.isNew());
790:       assertEquals((-1), node0.getLineno());
791:       assertFalse(node0.isOr());
792:       assertFalse(node0.isAdd());
793:       assertEquals((-1), node0.getSourcePosition());
794:       assertFalse(node0.isLabelName());
795:       assertFalse(node0.isStringKey());
796:       assertFalse(node0.isSetterDef());
797:       assertFalse(node0.isCast());
798:       assertEquals(0, node0.getChildCount());
799:       assertFalse(node0.isAssignAdd());
800:       assertFalse(node0.isVar());
801:       assertFalse(node0.isLabel());
802:       assertFalse(node0.isNot());
803:       assertFalse(node0.isAnd());
804:       assertFalse(node0.isDefaultCase());
805:       assertFalse(node0.isExprResult());
806:       assertFalse(node0.isVoid());
807:       assertTrue(node0.isParamList());
808:       assertFalse(node0.isTrue());
809:       assertFalse(node0.isObjectLit());
810:       assertFalse(node0.isNull());
811:       assertFalse(node0.isDebugger());
812:       assertFalse(node0.isAssign());
813:       assertFalse(node0.isDelProp());
814:       assertFalse(node0.isName());
815:       assertFalse(node0.isCall());
816:       assertFalse(node0.isGetElem());
817:       assertFalse(node0.isGetProp());
818:       assertFalse(node0.isBreak());
819:       assertFalse(node0.isReturn());
820:       assertFalse(node0.isComma());
821:       assertFalse(node0.isTypeOf());
822:       assertFalse(node0.isDec());
823:       assertFalse(node0.hasChildren());
824:       assertFalse(node0.isString());
825:       assertFalse(node0.isSwitch());
826:       assertFalse(node0.isInc());
827:       assertFalse(node0.isCase());
828:       assertFalse(node0.isIn());
829:       assertFalse(node0.isNE());
830:       assertEquals((-1), node0.getCharno());
831:       assertFalse(node0.isEmpty());
832:       assertFalse(node0.isFalse());
833:       assertEquals(83, node0.getType());
834:       assertFalse(node0.isArrayLit());
835:       assertFalse(node0.isFunction());
836:       assertFalse(node0.isThrow());
837:       assertFalse(node0.isWith());
838:       assertFalse(node0.isCatch());
839:       assertFalse(node0.isScript());
840:       assertFalse(node0.isFor());
841:       assertFalse(node0.isGetterDef());
842:       assertFalse(node0.isNumber());
843:       assertFalse(node0.isIf());
844:       assertFalse(node0.hasOneChild());
845:       assertFalse(node0.isTry());
846:       assertFalse(node0.isInstanceOf());
847:       assertFalse(node0.isThis());
848:       assertFalse(node0.hasMoreThanOneChild());
849:       assertFalse(node0.isRegExp());
850:       assertFalse(node0.isHook());
851:       assertFalse(node0.isBlock());
852:       assertEquals(36, Node.QUOTED_PROP);
853:       assertEquals(4095, Node.COLUMN_MASK);
854:       assertEquals(53, Node.INPUT_ID);
855:       assertEquals(55, Node.INFERRED_FUNCTION);
856:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
857:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
858:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
859:       assertEquals(37, Node.OPT_ARG_NAME);
860:       assertEquals(8, Node.FLAG_NO_THROWS);
861:       assertEquals(39, Node.EMPTY_BLOCK);
862:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
863:       assertEquals(29, Node.JSDOC_INFO_PROP);
864:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
865:       assertEquals(52, Node.LENGTH);
866:       assertEquals(48, Node.DIRECTIVES);
867:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
868:       assertEquals(56, Node.CHANGE_TIME);
869:       assertEquals(57, Node.REFLECTED_OBJECT);
870:       assertEquals(15, Node.NO_SIDE_EFFECTS);
871:       assertEquals(57, Node.LAST_PROP);
872:       assertEquals(30, Node.VAR_ARGS_NAME);
873:       assertEquals(49, Node.DIRECT_EVAL);
874:       assertEquals(1, Node.DECR_FLAG);
875:       assertEquals(32, Node.INCRDECR_PROP);
876:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
877:       assertEquals(12, Node.COLUMN_BITS);
878:       assertEquals(47, Node.IS_DISPATCHER);
879:       assertEquals(2, Node.POST_FLAG);
880:       assertEquals(50, Node.FREE_CALL);
881:       assertEquals(40, Node.ORIGINALNAME_PROP);
882:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
883:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
884:       assertEquals(51, Node.STATIC_SOURCE_FILE);
885:       assertEquals(43, Node.IS_CONSTANT_NAME);
886:       assertEquals(46, Node.IS_NAMESPACE);
887:       assertEquals(54, Node.SLASH_V);
888:       
889:       boolean boolean2 = node0.isVarArgs();
890:       assertFalse(node0.equals((Object)node1));
891:       assertTrue(boolean2 == boolean1);
892:       assertTrue(boolean2 == boolean0);
893:       assertEquals(0, jSTypeArray0.length);
894:       assertFalse(boolean2);
895:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
896:       assertFalse(node0.isWhile());
897:       assertFalse(node0.isDo());
898:       assertFalse(node0.isContinue());
899:       assertFalse(node0.isNew());
900:       assertEquals((-1), node0.getLineno());
901:       assertFalse(node0.isOr());
902:       assertFalse(node0.isAdd());
903:       assertEquals((-1), node0.getSourcePosition());
904:       assertFalse(node0.isLabelName());
905:       assertFalse(node0.isStringKey());
906:       assertFalse(node0.isSetterDef());
907:       assertFalse(node0.isCast());
908:       assertEquals(0, node0.getChildCount());
909:       assertFalse(node0.isAssignAdd());
910:       assertFalse(node0.isVar());
911:       assertFalse(node0.isLabel());
912:       assertFalse(node0.isNot());
913:       assertFalse(node0.isAnd());
914:       assertFalse(node0.isDefaultCase());
915:       assertFalse(node0.isExprResult());
916:       assertFalse(node0.isVoid());
917:       assertTrue(node0.isParamList());
918:       assertFalse(node0.isTrue());
919:       assertFalse(node0.isObjectLit());
920:       assertFalse(node0.isNull());
921:       assertFalse(node0.isDebugger());
922:       assertFalse(node0.isAssign());
923:       assertFalse(node0.isDelProp());
924:       assertFalse(node0.isName());
925:       assertFalse(node0.isCall());
926:       assertFalse(node0.isGetElem());
927:       assertFalse(node0.isGetProp());
928:       assertFalse(node0.isBreak());
929:       assertFalse(node0.isReturn());
930:       assertFalse(node0.isComma());
931:       assertFalse(node0.isTypeOf());
932:       assertFalse(node0.isDec());
933:       assertFalse(node0.hasChildren());
934:       assertFalse(node0.isString());
935:       assertFalse(node0.isSwitch());
936:       assertFalse(node0.isInc());
937:       assertFalse(node0.isCase());
938:       assertFalse(node0.isIn());
939:       assertFalse(node0.isNE());
940:       assertEquals((-1), node0.getCharno());
941:       assertFalse(node0.isEmpty());
942:       assertFalse(node0.isFalse());
943:       assertEquals(83, node0.getType());
944:       assertFalse(node0.isArrayLit());
945:       assertFalse(node0.isFunction());
946:       assertFalse(node0.isThrow());
947:       assertFalse(node0.isWith());
948:       assertFalse(node0.isCatch());
949:       assertFalse(node0.isScript());
950:       assertFalse(node0.isFor());
951:       assertFalse(node0.isGetterDef());
952:       assertFalse(node0.isNumber());
953:       assertFalse(node0.isIf());
954:       assertFalse(node0.hasOneChild());
955:       assertFalse(node0.isTry());
956:       assertFalse(node0.isInstanceOf());
957:       assertFalse(node0.isThis());
958:       assertFalse(node0.hasMoreThanOneChild());
959:       assertFalse(node0.isRegExp());
960:       assertFalse(node0.isHook());
961:       assertFalse(node0.isBlock());
962:       assertEquals(36, Node.QUOTED_PROP);
963:       assertEquals(4095, Node.COLUMN_MASK);
964:       assertEquals(53, Node.INPUT_ID);
965:       assertEquals(55, Node.INFERRED_FUNCTION);
966:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
967:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
968:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
969:       assertEquals(37, Node.OPT_ARG_NAME);
970:       assertEquals(8, Node.FLAG_NO_THROWS);
971:       assertEquals(39, Node.EMPTY_BLOCK);
972:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
973:       assertEquals(29, Node.JSDOC_INFO_PROP);
974:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
975:       assertEquals(52, Node.LENGTH);
976:       assertEquals(48, Node.DIRECTIVES);
977:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
978:       assertEquals(56, Node.CHANGE_TIME);
979:       assertEquals(57, Node.REFLECTED_OBJECT);
980:       assertEquals(15, Node.NO_SIDE_EFFECTS);
981:       assertEquals(57, Node.LAST_PROP);
982:       assertEquals(30, Node.VAR_ARGS_NAME);
983:       assertEquals(49, Node.DIRECT_EVAL);
984:       assertEquals(1, Node.DECR_FLAG);
985:       assertEquals(32, Node.INCRDECR_PROP);
986:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
987:       assertEquals(12, Node.COLUMN_BITS);
988:       assertEquals(47, Node.IS_DISPATCHER);
989:       assertEquals(2, Node.POST_FLAG);
990:       assertEquals(50, Node.FREE_CALL);
991:       assertEquals(40, Node.ORIGINALNAME_PROP);
992:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
993:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
994:       assertEquals(51, Node.STATIC_SOURCE_FILE);
995:       assertEquals(43, Node.IS_CONSTANT_NAME);
996:       assertEquals(46, Node.IS_NAMESPACE);
997:       assertEquals(54, Node.SLASH_V);
998:       
999:       node1.setIsSyntheticBlock(true);
1000:       assertFalse(node1.equals((Object)node0));
1001:       assertEquals((-1), node1.getCharno());
1002:       assertFalse(node1.isSwitch());
1003:       assertFalse(node1.isHook());
1004:       assertFalse(node1.isFalse());
1005:       assertFalse(node1.isBreak());
1006:       assertFalse(node1.isIf());
1007:       assertFalse(node1.isNE());
1008:       assertFalse(node1.isThrow());
1009:       assertFalse(node1.isIn());
1010:       assertFalse(node1.isInc());
1011:       assertFalse(node1.isEmpty());
1012:       assertFalse(node1.isRegExp());
1013:       assertFalse(node1.isTry());
1014:       assertFalse(node1.isDefaultCase());
1015:       assertFalse(node1.isWith());
1016:       assertFalse(node1.isLabelName());
1017:       assertFalse(node1.isInstanceOf());
1018:       assertFalse(node1.isArrayLit());
1019:       assertFalse(node1.isCatch());
1020:       assertFalse(node1.isThis());
1021:       assertFalse(node1.isParamList());
1022:       assertFalse(node1.isFor());
1023:       assertFalse(node1.isCase());
1024:       assertFalse(node1.isGetterDef());
1025:       assertFalse(node1.hasOneChild());
1026:       assertFalse(node1.isNumber());
1027:       assertFalse(node1.isScript());
1028:       assertFalse(node1.isBlock());
1029:       assertFalse(node1.isNew());
1030:       assertTrue(node1.isString());
1031:       assertFalse(node1.isWhile());
1032:       assertFalse(node1.isVar());
1033:       assertFalse(node1.isStringKey());
1034:       assertFalse(node1.isContinue());
1035:       assertFalse(node1.hasMoreThanOneChild());
1036:       assertFalse(node1.isName());
1037:       assertFalse(node1.isCall());
1038:       assertFalse(node1.isLabel());
1039:       assertFalse(node1.isAssignAdd());
1040:       assertEquals((-1), node1.getLineno());
1041:       assertFalse(node1.isOr());
1042:       assertEquals(0, node1.getChildCount());
1043:       assertFalse(node1.isNull());
1044:       assertFalse(node1.isDo());
1045:       assertFalse(node1.isSetterDef());
1046:       assertFalse(node1.isAdd());
1047:       assertFalse(node1.isDebugger());
1048:       assertFalse(node1.isFunction());
1049:       assertFalse(node1.isVoid());
1050:       assertFalse(node1.isTrue());
1051:       assertEquals(40, node1.getType());
1052:       assertFalse(node1.isGetElem());
1053:       assertFalse(node1.isAnd());
1054:       assertFalse(node1.isAssign());
1055:       assertFalse(node1.isDelProp());
1056:       assertFalse(node1.isCast());
1057:       assertFalse(node1.isExprResult());
1058:       assertFalse(node1.isGetProp());
1059:       assertFalse(node1.isComma());
1060:       assertFalse(node1.isTypeOf());
1061:       assertEquals((-1), node1.getSourcePosition());
1062:       assertFalse(node1.isDec());
1063:       assertFalse(node1.hasChildren());
1064:       assertFalse(node1.isReturn());
1065:       assertFalse(node1.isObjectLit());
1066:       assertFalse(node1.isNot());
1067:       assertEquals(53, Node.INPUT_ID);
1068:       assertEquals(43, Node.IS_CONSTANT_NAME);
1069:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1070:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1071:       assertEquals(29, Node.JSDOC_INFO_PROP);
1072:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1073:       assertEquals(36, Node.QUOTED_PROP);
1074:       assertEquals(55, Node.INFERRED_FUNCTION);
1075:       assertEquals(48, Node.DIRECTIVES);
1076:       assertEquals(37, Node.OPT_ARG_NAME);
1077:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1078:       assertEquals(56, Node.CHANGE_TIME);
1079:       assertEquals(12, Node.COLUMN_BITS);
1080:       assertEquals(32, Node.INCRDECR_PROP);
1081:       assertEquals(49, Node.DIRECT_EVAL);
1082:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1083:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1084:       assertEquals(4095, Node.COLUMN_MASK);
1085:       assertEquals(54, Node.SLASH_V);
1086:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1087:       assertEquals(57, Node.REFLECTED_OBJECT);
1088:       assertEquals(57, Node.LAST_PROP);
1089:       assertEquals(1, Node.DECR_FLAG);
1090:       assertEquals(50, Node.FREE_CALL);
1091:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1092:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1093:       assertEquals(8, Node.FLAG_NO_THROWS);
1094:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1095:       assertEquals(52, Node.LENGTH);
1096:       assertEquals(39, Node.EMPTY_BLOCK);
1097:       assertEquals(46, Node.IS_NAMESPACE);
1098:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1099:       assertEquals(30, Node.VAR_ARGS_NAME);
1100:       assertEquals(40, Node.ORIGINALNAME_PROP);
1101:       assertEquals(47, Node.IS_DISPATCHER);
1102:       assertEquals(2, Node.POST_FLAG);
1103:       
1104:       boolean boolean3 = node1.isEquivalentTo(node0);
1105:       assertFalse(node0.equals((Object)node1));
1106:       assertFalse(node1.equals((Object)node0));
1107:       assertTrue(boolean3 == boolean2);
1108:       assertTrue(boolean3 == boolean1);
1109:       assertTrue(boolean3 == boolean0);
1110:       assertEquals(0, jSTypeArray0.length);
1111:       assertFalse(boolean3);
1112:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1113:       assertFalse(node0.isWhile());
1114:       assertFalse(node0.isDo());
1115:       assertFalse(node0.isContinue());
1116:       assertFalse(node0.isNew());
1117:       assertEquals((-1), node0.getLineno());
1118:       assertFalse(node0.isOr());
1119:       assertFalse(node0.isAdd());
1120:       assertEquals((-1), node0.getSourcePosition());
1121:       assertFalse(node0.isLabelName());
1122:       assertFalse(node0.isStringKey());
1123:       assertFalse(node0.isSetterDef());
1124:       assertFalse(node0.isCast());
1125:       assertEquals(0, node0.getChildCount());
1126:       assertFalse(node0.isAssignAdd());
1127:       assertFalse(node0.isVar());
1128:       assertFalse(node0.isLabel());
1129:       assertFalse(node0.isNot());
1130:       assertFalse(node0.isAnd());
1131:       assertFalse(node0.isDefaultCase());
1132:       assertFalse(node0.isExprResult());
1133:       assertFalse(node0.isVoid());
1134:       assertTrue(node0.isParamList());
1135:       assertFalse(node0.isTrue());
1136:       assertFalse(node0.isObjectLit());
1137:       assertFalse(node0.isNull());
1138:       assertFalse(node0.isDebugger());
1139:       assertFalse(node0.isAssign());
1140:       assertFalse(node0.isDelProp());
1141:       assertFalse(node0.isName());
1142:       assertFalse(node0.isCall());
1143:       assertFalse(node0.isGetElem());
1144:       assertFalse(node0.isGetProp());
1145:       assertFalse(node0.isBreak());
1146:       assertFalse(node0.isReturn());
1147:       assertFalse(node0.isComma());
1148:       assertFalse(node0.isTypeOf());
1149:       assertFalse(node0.isDec());
1150:       assertFalse(node0.hasChildren());
1151:       assertFalse(node0.isString());
1152:       assertFalse(node0.isSwitch());
1153:       assertFalse(node0.isInc());
1154:       assertFalse(node0.isCase());
1155:       assertFalse(node0.isIn());
1156:       assertFalse(node0.isNE());
1157:       assertEquals((-1), node0.getCharno());
1158:       assertFalse(node0.isEmpty());
1159:       assertFalse(node0.isFalse());
1160:       assertEquals(83, node0.getType());
1161:       assertFalse(node0.isArrayLit());
1162:       assertFalse(node0.isFunction());
1163:       assertFalse(node0.isThrow());
1164:       assertFalse(node0.isWith());
1165:       assertFalse(node0.isCatch());
1166:       assertFalse(node0.isScript());
1167:       assertFalse(node0.isFor());
1168:       assertFalse(node0.isGetterDef());
1169:       assertFalse(node0.isNumber());
1170:       assertFalse(node0.isIf());
1171:       assertFalse(node0.hasOneChild());
1172:       assertFalse(node0.isTry());
1173:       assertFalse(node0.isInstanceOf());
1174:       assertFalse(node0.isThis());
1175:       assertFalse(node0.hasMoreThanOneChild());
1176:       assertFalse(node0.isRegExp());
1177:       assertFalse(node0.isHook());
1178:       assertFalse(node0.isBlock());
1179:       assertEquals((-1), node1.getCharno());
1180:       assertFalse(node1.isSwitch());
1181:       assertFalse(node1.isHook());
1182:       assertFalse(node1.isFalse());
1183:       assertFalse(node1.isBreak());
1184:       assertFalse(node1.isIf());
1185:       assertFalse(node1.isNE());
1186:       assertFalse(node1.isThrow());
1187:       assertFalse(node1.isIn());
1188:       assertFalse(node1.isInc());
1189:       assertFalse(node1.isEmpty());
1190:       assertFalse(node1.isRegExp());
1191:       assertFalse(node1.isTry());
1192:       assertFalse(node1.isDefaultCase());
1193:       assertFalse(node1.isWith());
1194:       assertFalse(node1.isLabelName());
1195:       assertFalse(node1.isInstanceOf());
1196:       assertFalse(node1.isArrayLit());
1197:       assertFalse(node1.isCatch());
1198:       assertFalse(node1.isThis());
1199:       assertFalse(node1.isParamList());
1200:       assertFalse(node1.isFor());
1201:       assertFalse(node1.isCase());
1202:       assertFalse(node1.isGetterDef());
1203:       assertFalse(node1.hasOneChild());
1204:       assertFalse(node1.isNumber());
1205:       assertFalse(node1.isScript());
1206:       assertFalse(node1.isBlock());
1207:       assertFalse(node1.isNew());
1208:       assertTrue(node1.isString());
1209:       assertFalse(node1.isWhile());
1210:       assertFalse(node1.isVar());
1211:       assertFalse(node1.isStringKey());
1212:       assertFalse(node1.isContinue());
1213:       assertFalse(node1.hasMoreThanOneChild());
1214:       assertFalse(node1.isName());
1215:       assertFalse(node1.isCall());
1216:       assertFalse(node1.isLabel());
1217:       assertFalse(node1.isAssignAdd());
1218:       assertEquals((-1), node1.getLineno());
1219:       assertFalse(node1.isOr());
1220:       assertEquals(0, node1.getChildCount());
1221:       assertFalse(node1.isNull());
1222:       assertFalse(node1.isDo());
1223:       assertFalse(node1.isSetterDef());
1224:       assertFalse(node1.isAdd());
1225:       assertFalse(node1.isDebugger());
1226:       assertFalse(node1.isFunction());
1227:       assertFalse(node1.isVoid());
1228:       assertFalse(node1.isTrue());
1229:       assertEquals(40, node1.getType());
1230:       assertFalse(node1.isGetElem());
1231:       assertFalse(node1.isAnd());
1232:       assertFalse(node1.isAssign());
1233:       assertFalse(node1.isDelProp());
1234:       assertFalse(node1.isCast());
1235:       assertFalse(node1.isExprResult());
1236:       assertFalse(node1.isGetProp());
1237:       assertFalse(node1.isComma());
1238:       assertFalse(node1.isTypeOf());
1239:       assertEquals((-1), node1.getSourcePosition());
1240:       assertFalse(node1.isDec());
1241:       assertFalse(node1.hasChildren());
1242:       assertFalse(node1.isReturn());
1243:       assertFalse(node1.isObjectLit());
1244:       assertFalse(node1.isNot());
1245:       assertEquals(36, Node.QUOTED_PROP);
1246:       assertEquals(4095, Node.COLUMN_MASK);
1247:       assertEquals(53, Node.INPUT_ID);
1248:       assertEquals(55, Node.INFERRED_FUNCTION);
1249:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1250:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1251:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1252:       assertEquals(37, Node.OPT_ARG_NAME);
1253:       assertEquals(8, Node.FLAG_NO_THROWS);
1254:       assertEquals(39, Node.EMPTY_BLOCK);
1255:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1256:       assertEquals(29, Node.JSDOC_INFO_PROP);
1257:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1258:       assertEquals(52, Node.LENGTH);
1259:       assertEquals(48, Node.DIRECTIVES);
1260:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1261:       assertEquals(56, Node.CHANGE_TIME);
1262:       assertEquals(57, Node.REFLECTED_OBJECT);
1263:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1264:       assertEquals(57, Node.LAST_PROP);
1265:       assertEquals(30, Node.VAR_ARGS_NAME);
1266:       assertEquals(49, Node.DIRECT_EVAL);
1267:       assertEquals(1, Node.DECR_FLAG);
1268:       assertEquals(32, Node.INCRDECR_PROP);
1269:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1270:       assertEquals(12, Node.COLUMN_BITS);
1271:       assertEquals(47, Node.IS_DISPATCHER);
1272:       assertEquals(2, Node.POST_FLAG);
1273:       assertEquals(50, Node.FREE_CALL);
1274:       assertEquals(40, Node.ORIGINALNAME_PROP);
1275:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1276:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1277:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1278:       assertEquals(43, Node.IS_CONSTANT_NAME);
1279:       assertEquals(46, Node.IS_NAMESPACE);
1280:       assertEquals(54, Node.SLASH_V);
1281:       assertEquals(53, Node.INPUT_ID);
1282:       assertEquals(43, Node.IS_CONSTANT_NAME);
1283:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1284:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1285:       assertEquals(29, Node.JSDOC_INFO_PROP);
1286:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1287:       assertEquals(36, Node.QUOTED_PROP);
1288:       assertEquals(55, Node.INFERRED_FUNCTION);
1289:       assertEquals(48, Node.DIRECTIVES);
1290:       assertEquals(37, Node.OPT_ARG_NAME);
1291:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1292:       assertEquals(56, Node.CHANGE_TIME);
1293:       assertEquals(12, Node.COLUMN_BITS);
1294:       assertEquals(32, Node.INCRDECR_PROP);
1295:       assertEquals(49, Node.DIRECT_EVAL);
1296:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1297:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1298:       assertEquals(4095, Node.COLUMN_MASK);
1299:       assertEquals(54, Node.SLASH_V);
1300:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1301:       assertEquals(57, Node.REFLECTED_OBJECT);
1302:       assertEquals(57, Node.LAST_PROP);
1303:       assertEquals(1, Node.DECR_FLAG);
1304:       assertEquals(50, Node.FREE_CALL);
1305:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1306:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1307:       assertEquals(8, Node.FLAG_NO_THROWS);
1308:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1309:       assertEquals(52, Node.LENGTH);
1310:       assertEquals(39, Node.EMPTY_BLOCK);
1311:       assertEquals(46, Node.IS_NAMESPACE);
1312:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1313:       assertEquals(30, Node.VAR_ARGS_NAME);
1314:       assertEquals(40, Node.ORIGINALNAME_PROP);
1315:       assertEquals(47, Node.IS_DISPATCHER);
1316:       assertEquals(2, Node.POST_FLAG);
1317:   }
1318: }
RegularFileObject[/tmp/EvoSuite_88_1629223112013/com/google/javascript/rhino/Node_88_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:32 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_88_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_88_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_88_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.SimpleErrorReporter",
258:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
259:       "com.google.common.base.Joiner",
260:       "com.google.common.base.Preconditions",
261:       "com.google.common.base.Joiner$1",
262:       "com.google.common.collect.Collections2",
263:       "com.google.common.base.Joiner$MapJoiner",
264:       "com.google.common.collect.Maps",
265:       "com.google.common.collect.AbstractMultimap",
266:       "com.google.common.collect.AbstractMapBasedMultimap",
267:       "com.google.common.collect.AbstractSetMultimap",
268:       "com.google.common.collect.LinkedHashMultimap",
269:       "com.google.common.collect.AbstractMapEntry",
270:       "com.google.common.collect.ImmutableEntry",
271:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
272:       "com.google.common.collect.AbstractListMultimap",
273:       "com.google.common.collect.ArrayListMultimap",
274:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
275:       "com.google.common.collect.ImmutableCollection",
276:       "com.google.common.collect.RegularImmutableList",
277:       "com.google.common.collect.ObjectArrays",
278:       "com.google.common.collect.ImmutableList",
279:       "com.google.javascript.rhino.jstype.ModificationVisitor",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
281:       "com.google.common.collect.ImmutableCollection$Builder",
282:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
283:       "com.google.common.collect.ImmutableList$Builder",
284:       "com.google.common.collect.UnmodifiableIterator",
285:       "com.google.common.collect.UnmodifiableListIterator",
286:       "com.google.common.collect.Iterators$1",
287:       "com.google.common.collect.Iterators$2",
288:       "com.google.common.collect.Iterators",
289:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
290:       "com.google.javascript.rhino.jstype.JSType$1",
291:       "com.google.javascript.rhino.jstype.JSType",
292:       "com.google.javascript.rhino.jstype.ObjectType",
293:       "com.google.javascript.rhino.jstype.ProxyObjectType",
294:       "com.google.javascript.rhino.jstype.TemplateType",
295:       "com.google.javascript.rhino.jstype.ValueType",
296:       "com.google.javascript.rhino.jstype.BooleanType",
297:       "com.google.javascript.rhino.jstype.NullType",
298:       "com.google.javascript.rhino.jstype.NumberType",
299:       "com.google.javascript.rhino.jstype.StringType",
300:       "com.google.javascript.rhino.jstype.UnknownType",
301:       "com.google.javascript.rhino.jstype.VoidType",
302:       "com.google.javascript.rhino.jstype.AllType",
303:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
304:       "com.google.common.collect.ImmutableMap",
305:       "com.google.common.collect.ImmutableBiMap",
306:       "com.google.common.collect.EmptyImmutableBiMap",
307:       "com.google.javascript.rhino.jstype.PropertyMap$1",
308:       "com.google.javascript.rhino.jstype.PropertyMap",
309:       "com.google.javascript.rhino.jstype.FunctionType",
310:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
311:       "com.google.javascript.rhino.Token",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.JSDocInfo",
330:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
331:       "com.google.common.collect.Sets",
332:       "com.google.common.base.Objects",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
339:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
340:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
341:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.common.collect.Platform",
349:       "com.google.common.collect.Iterables",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.NamedType",
359:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
360:       "com.google.javascript.rhino.jstype.JSType$2",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 17:58:32.307 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
assertNotNull(jSTypeRegistry0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());

JSType[] jSTypeArray0 = new JSType[0];
Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
assertNotNull(node0);
assertEquals(0, jSTypeArray0.length);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertTrue(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertEquals(83, node0.getType());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Node node1 = Node.newString("com.google.common.collect.RegularImmutableList", 53, (-1125));
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isLabelName());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertTrue(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals(40, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);

boolean boolean0 = node0.isVoid();
assertFalse(node0.equals((Object)node1));
assertEquals(0, jSTypeArray0.length);
assertFalse(boolean0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertTrue(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertEquals(83, node0.getType());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

node0.removeProp(39);
assertFalse(node0.equals((Object)node1));
assertEquals(0, jSTypeArray0.length);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertTrue(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertEquals(83, node0.getType());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

node1.setSourceFileForTesting("Object#Element");
assertFalse(node1.equals((Object)node0));
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isLabelName());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertTrue(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals(40, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);

JSDocInfo jSDocInfo0 = node1.getJSDocInfo();
assertFalse(node1.equals((Object)node0));
assertNull(jSDocInfo0);
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isLabelName());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertTrue(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals(40, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(0, jSTypeArray0.length);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertTrue(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertEquals(83, node0.getType());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

boolean boolean1 = node0.isBlock();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(0, jSTypeArray0.length);
assertFalse(boolean1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertTrue(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertEquals(83, node0.getType());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

boolean boolean2 = node0.isVarArgs();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(0, jSTypeArray0.length);
assertFalse(boolean2);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertTrue(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertEquals(83, node0.getType());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

node1.setIsSyntheticBlock(true);
assertFalse(node1.equals((Object)node0));
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isLabelName());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertTrue(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals(40, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);

boolean boolean3 = node1.isEquivalentTo(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertEquals(0, jSTypeArray0.length);
assertFalse(boolean3);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertTrue(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertEquals(83, node0.getType());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isLabelName());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertTrue(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals(40, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);


[MASTER] 17:58:35.839 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_102_1629223115628/com/google/javascript/rhino/Node_102_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_102_1629223115628/com/google/javascript/rhino/Node_102_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:35.839 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:35.839 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:35.839 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 974
[MASTER] 17:58:35.841 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_102_1629223115628/com/google/javascript/rhino/Node_102_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:35 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_102_tmp__ESTest extends Node_102_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("change_time");
22:       assertNotNull(node0);
23:       assertFalse(node0.isSetterDef());
24:       assertFalse(node0.isNull());
25:       assertFalse(node0.isName());
26:       assertFalse(node0.isStringKey());
27:       assertFalse(node0.isParamList());
28:       assertFalse(node0.isAdd());
29:       assertFalse(node0.isFunction());
30:       assertFalse(node0.isDebugger());
31:       assertFalse(node0.isNew());
32:       assertFalse(node0.isDo());
33:       assertEquals(40, node0.getType());
34:       assertFalse(node0.isDefaultCase());
35:       assertFalse(node0.isVar());
36:       assertEquals(0, node0.getChildCount());
37:       assertFalse(node0.isArrayLit());
38:       assertFalse(node0.isContinue());
39:       assertFalse(node0.isTypeOf());
40:       assertFalse(node0.isDec());
41:       assertFalse(node0.hasChildren());
42:       assertEquals((-1), node0.getSourcePosition());
43:       assertFalse(node0.isLabel());
44:       assertFalse(node0.isReturn());
45:       assertFalse(node0.isAssignAdd());
46:       assertFalse(node0.isDelProp());
47:       assertFalse(node0.isOr());
48:       assertFalse(node0.isEmpty());
49:       assertFalse(node0.isTrue());
50:       assertFalse(node0.isVoid());
51:       assertFalse(node0.isExprResult());
52:       assertFalse(node0.isWhile());
53:       assertFalse(node0.isCall());
54:       assertFalse(node0.isGetElem());
55:       assertFalse(node0.isAssign());
56:       assertFalse(node0.isThis());
57:       assertFalse(node0.isComma());
58:       assertFalse(node0.isGetProp());
59:       assertFalse(node0.isBreak());
60:       assertFalse(node0.isThrow());
61:       assertFalse(node0.isObjectLit());
62:       assertFalse(node0.isNot());
63:       assertFalse(node0.isSwitch());
64:       assertFalse(node0.isInc());
65:       assertEquals((-1), node0.getCharno());
66:       assertFalse(node0.isAnd());
67:       assertFalse(node0.isCast());
68:       assertFalse(node0.isFalse());
69:       assertFalse(node0.isNE());
70:       assertEquals((-1), node0.getLineno());
71:       assertFalse(node0.isLabelName());
72:       assertFalse(node0.isFor());
73:       assertFalse(node0.isIf());
74:       assertFalse(node0.hasOneChild());
75:       assertFalse(node0.isCase());
76:       assertFalse(node0.isGetterDef());
77:       assertFalse(node0.isNumber());
78:       assertFalse(node0.isIn());
79:       assertFalse(node0.isScript());
80:       assertFalse(node0.isRegExp());
81:       assertFalse(node0.isBlock());
82:       assertFalse(node0.isTry());
83:       assertTrue(node0.isString());
84:       assertFalse(node0.hasMoreThanOneChild());
85:       assertFalse(node0.isCatch());
86:       assertFalse(node0.isHook());
87:       assertFalse(node0.isWith());
88:       assertFalse(node0.isInstanceOf());
89:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
90:       assertEquals(37, Node.OPT_ARG_NAME);
91:       assertEquals(56, Node.CHANGE_TIME);
92:       assertEquals(47, Node.IS_DISPATCHER);
93:       assertEquals(32, Node.INCRDECR_PROP);
94:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
95:       assertEquals(12, Node.COLUMN_BITS);
96:       assertEquals(30, Node.VAR_ARGS_NAME);
97:       assertEquals(2, Node.POST_FLAG);
98:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
99:       assertEquals(15, Node.NO_SIDE_EFFECTS);
100:       assertEquals(53, Node.INPUT_ID);
101:       assertEquals(57, Node.LAST_PROP);
102:       assertEquals(49, Node.DIRECT_EVAL);
103:       assertEquals(55, Node.INFERRED_FUNCTION);
104:       assertEquals(57, Node.REFLECTED_OBJECT);
105:       assertEquals(29, Node.JSDOC_INFO_PROP);
106:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
107:       assertEquals(52, Node.LENGTH);
108:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
109:       assertEquals(36, Node.QUOTED_PROP);
110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
111:       assertEquals(8, Node.FLAG_NO_THROWS);
112:       assertEquals(39, Node.EMPTY_BLOCK);
113:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
114:       assertEquals(48, Node.DIRECTIVES);
115:       assertEquals(40, Node.ORIGINALNAME_PROP);
116:       assertEquals(4095, Node.COLUMN_MASK);
117:       assertEquals(43, Node.IS_CONSTANT_NAME);
118:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
119:       assertEquals(54, Node.SLASH_V);
120:       assertEquals(1, Node.DECR_FLAG);
121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
122:       assertEquals(46, Node.IS_NAMESPACE);
123:       assertEquals(51, Node.STATIC_SOURCE_FILE);
124:       assertEquals(50, Node.FREE_CALL);
125:       
126:       node0.setCharno(0);
127:       assertFalse(node0.isSetterDef());
128:       assertFalse(node0.isNull());
129:       assertFalse(node0.isName());
130:       assertFalse(node0.isStringKey());
131:       assertFalse(node0.isParamList());
132:       assertFalse(node0.isAdd());
133:       assertFalse(node0.isFunction());
134:       assertFalse(node0.isDebugger());
135:       assertFalse(node0.isNew());
136:       assertFalse(node0.isDo());
137:       assertEquals(40, node0.getType());
138:       assertFalse(node0.isDefaultCase());
139:       assertFalse(node0.isVar());
140:       assertEquals(0, node0.getChildCount());
141:       assertFalse(node0.isArrayLit());
142:       assertFalse(node0.isContinue());
143:       assertFalse(node0.isTypeOf());
144:       assertFalse(node0.isDec());
145:       assertFalse(node0.hasChildren());
146:       assertEquals((-1), node0.getSourcePosition());
147:       assertFalse(node0.isLabel());
148:       assertFalse(node0.isReturn());
149:       assertFalse(node0.isAssignAdd());
150:       assertFalse(node0.isDelProp());
151:       assertFalse(node0.isOr());
152:       assertFalse(node0.isEmpty());
153:       assertFalse(node0.isTrue());
154:       assertFalse(node0.isVoid());
155:       assertFalse(node0.isExprResult());
156:       assertFalse(node0.isWhile());
157:       assertFalse(node0.isCall());
158:       assertFalse(node0.isGetElem());
159:       assertFalse(node0.isAssign());
160:       assertFalse(node0.isThis());
161:       assertFalse(node0.isComma());
162:       assertFalse(node0.isGetProp());
163:       assertFalse(node0.isBreak());
164:       assertFalse(node0.isThrow());
165:       assertFalse(node0.isObjectLit());
166:       assertFalse(node0.isNot());
167:       assertFalse(node0.isSwitch());
168:       assertFalse(node0.isInc());
169:       assertEquals((-1), node0.getCharno());
170:       assertFalse(node0.isAnd());
171:       assertFalse(node0.isCast());
172:       assertFalse(node0.isFalse());
173:       assertFalse(node0.isNE());
174:       assertEquals((-1), node0.getLineno());
175:       assertFalse(node0.isLabelName());
176:       assertFalse(node0.isFor());
177:       assertFalse(node0.isIf());
178:       assertFalse(node0.hasOneChild());
179:       assertFalse(node0.isCase());
180:       assertFalse(node0.isGetterDef());
181:       assertFalse(node0.isNumber());
182:       assertFalse(node0.isIn());
183:       assertFalse(node0.isScript());
184:       assertFalse(node0.isRegExp());
185:       assertFalse(node0.isBlock());
186:       assertFalse(node0.isTry());
187:       assertTrue(node0.isString());
188:       assertFalse(node0.hasMoreThanOneChild());
189:       assertFalse(node0.isCatch());
190:       assertFalse(node0.isHook());
191:       assertFalse(node0.isWith());
192:       assertFalse(node0.isInstanceOf());
193:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
194:       assertEquals(37, Node.OPT_ARG_NAME);
195:       assertEquals(56, Node.CHANGE_TIME);
196:       assertEquals(47, Node.IS_DISPATCHER);
197:       assertEquals(32, Node.INCRDECR_PROP);
198:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
199:       assertEquals(12, Node.COLUMN_BITS);
200:       assertEquals(30, Node.VAR_ARGS_NAME);
201:       assertEquals(2, Node.POST_FLAG);
202:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
204:       assertEquals(53, Node.INPUT_ID);
205:       assertEquals(57, Node.LAST_PROP);
206:       assertEquals(49, Node.DIRECT_EVAL);
207:       assertEquals(55, Node.INFERRED_FUNCTION);
208:       assertEquals(57, Node.REFLECTED_OBJECT);
209:       assertEquals(29, Node.JSDOC_INFO_PROP);
210:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
211:       assertEquals(52, Node.LENGTH);
212:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
213:       assertEquals(36, Node.QUOTED_PROP);
214:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
215:       assertEquals(8, Node.FLAG_NO_THROWS);
216:       assertEquals(39, Node.EMPTY_BLOCK);
217:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
218:       assertEquals(48, Node.DIRECTIVES);
219:       assertEquals(40, Node.ORIGINALNAME_PROP);
220:       assertEquals(4095, Node.COLUMN_MASK);
221:       assertEquals(43, Node.IS_CONSTANT_NAME);
222:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
223:       assertEquals(54, Node.SLASH_V);
224:       assertEquals(1, Node.DECR_FLAG);
225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
226:       assertEquals(46, Node.IS_NAMESPACE);
227:       assertEquals(51, Node.STATIC_SOURCE_FILE);
228:       assertEquals(50, Node.FREE_CALL);
229:       
230:       node0.setLength(1982);
231:       assertFalse(node0.isSetterDef());
232:       assertFalse(node0.isNull());
233:       assertFalse(node0.isName());
234:       assertFalse(node0.isStringKey());
235:       assertFalse(node0.isParamList());
236:       assertFalse(node0.isAdd());
237:       assertFalse(node0.isFunction());
238:       assertFalse(node0.isDebugger());
239:       assertFalse(node0.isNew());
240:       assertFalse(node0.isDo());
241:       assertEquals(40, node0.getType());
242:       assertFalse(node0.isDefaultCase());
243:       assertFalse(node0.isVar());
244:       assertEquals(0, node0.getChildCount());
245:       assertFalse(node0.isArrayLit());
246:       assertFalse(node0.isContinue());
247:       assertFalse(node0.isTypeOf());
248:       assertFalse(node0.isDec());
249:       assertFalse(node0.hasChildren());
250:       assertEquals((-1), node0.getSourcePosition());
251:       assertFalse(node0.isLabel());
252:       assertFalse(node0.isReturn());
253:       assertFalse(node0.isAssignAdd());
254:       assertFalse(node0.isDelProp());
255:       assertFalse(node0.isOr());
256:       assertFalse(node0.isEmpty());
257:       assertFalse(node0.isTrue());
258:       assertFalse(node0.isVoid());
259:       assertFalse(node0.isExprResult());
260:       assertFalse(node0.isWhile());
261:       assertFalse(node0.isCall());
262:       assertFalse(node0.isGetElem());
263:       assertFalse(node0.isAssign());
264:       assertFalse(node0.isThis());
265:       assertFalse(node0.isComma());
266:       assertFalse(node0.isGetProp());
267:       assertFalse(node0.isBreak());
268:       assertFalse(node0.isThrow());
269:       assertFalse(node0.isObjectLit());
270:       assertFalse(node0.isNot());
271:       assertFalse(node0.isSwitch());
272:       assertFalse(node0.isInc());
273:       assertEquals((-1), node0.getCharno());
274:       assertFalse(node0.isAnd());
275:       assertFalse(node0.isCast());
276:       assertFalse(node0.isFalse());
277:       assertFalse(node0.isNE());
278:       assertEquals((-1), node0.getLineno());
279:       assertFalse(node0.isLabelName());
280:       assertFalse(node0.isFor());
281:       assertFalse(node0.isIf());
282:       assertFalse(node0.hasOneChild());
283:       assertFalse(node0.isCase());
284:       assertFalse(node0.isGetterDef());
285:       assertFalse(node0.isNumber());
286:       assertFalse(node0.isIn());
287:       assertFalse(node0.isScript());
288:       assertFalse(node0.isRegExp());
289:       assertFalse(node0.isBlock());
290:       assertFalse(node0.isTry());
291:       assertTrue(node0.isString());
292:       assertFalse(node0.hasMoreThanOneChild());
293:       assertFalse(node0.isCatch());
294:       assertFalse(node0.isHook());
295:       assertFalse(node0.isWith());
296:       assertFalse(node0.isInstanceOf());
297:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
298:       assertEquals(37, Node.OPT_ARG_NAME);
299:       assertEquals(56, Node.CHANGE_TIME);
300:       assertEquals(47, Node.IS_DISPATCHER);
301:       assertEquals(32, Node.INCRDECR_PROP);
302:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
303:       assertEquals(12, Node.COLUMN_BITS);
304:       assertEquals(30, Node.VAR_ARGS_NAME);
305:       assertEquals(2, Node.POST_FLAG);
306:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
307:       assertEquals(15, Node.NO_SIDE_EFFECTS);
308:       assertEquals(53, Node.INPUT_ID);
309:       assertEquals(57, Node.LAST_PROP);
310:       assertEquals(49, Node.DIRECT_EVAL);
311:       assertEquals(55, Node.INFERRED_FUNCTION);
312:       assertEquals(57, Node.REFLECTED_OBJECT);
313:       assertEquals(29, Node.JSDOC_INFO_PROP);
314:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
315:       assertEquals(52, Node.LENGTH);
316:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
317:       assertEquals(36, Node.QUOTED_PROP);
318:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
319:       assertEquals(8, Node.FLAG_NO_THROWS);
320:       assertEquals(39, Node.EMPTY_BLOCK);
321:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
322:       assertEquals(48, Node.DIRECTIVES);
323:       assertEquals(40, Node.ORIGINALNAME_PROP);
324:       assertEquals(4095, Node.COLUMN_MASK);
325:       assertEquals(43, Node.IS_CONSTANT_NAME);
326:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
327:       assertEquals(54, Node.SLASH_V);
328:       assertEquals(1, Node.DECR_FLAG);
329:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
330:       assertEquals(46, Node.IS_NAMESPACE);
331:       assertEquals(51, Node.STATIC_SOURCE_FILE);
332:       assertEquals(50, Node.FREE_CALL);
333:       
334:       int int0 = node0.getChangeTime();
335:       assertEquals(0, int0);
336:       assertFalse(node0.isSetterDef());
337:       assertFalse(node0.isNull());
338:       assertFalse(node0.isName());
339:       assertFalse(node0.isStringKey());
340:       assertFalse(node0.isParamList());
341:       assertFalse(node0.isAdd());
342:       assertFalse(node0.isFunction());
343:       assertFalse(node0.isDebugger());
344:       assertFalse(node0.isNew());
345:       assertFalse(node0.isDo());
346:       assertEquals(40, node0.getType());
347:       assertFalse(node0.isDefaultCase());
348:       assertFalse(node0.isVar());
349:       assertEquals(0, node0.getChildCount());
350:       assertFalse(node0.isArrayLit());
351:       assertFalse(node0.isContinue());
352:       assertFalse(node0.isTypeOf());
353:       assertFalse(node0.isDec());
354:       assertFalse(node0.hasChildren());
355:       assertEquals((-1), node0.getSourcePosition());
356:       assertFalse(node0.isLabel());
357:       assertFalse(node0.isReturn());
358:       assertFalse(node0.isAssignAdd());
359:       assertFalse(node0.isDelProp());
360:       assertFalse(node0.isOr());
361:       assertFalse(node0.isEmpty());
362:       assertFalse(node0.isTrue());
363:       assertFalse(node0.isVoid());
364:       assertFalse(node0.isExprResult());
365:       assertFalse(node0.isWhile());
366:       assertFalse(node0.isCall());
367:       assertFalse(node0.isGetElem());
368:       assertFalse(node0.isAssign());
369:       assertFalse(node0.isThis());
370:       assertFalse(node0.isComma());
371:       assertFalse(node0.isGetProp());
372:       assertFalse(node0.isBreak());
373:       assertFalse(node0.isThrow());
374:       assertFalse(node0.isObjectLit());
375:       assertFalse(node0.isNot());
376:       assertFalse(node0.isSwitch());
377:       assertFalse(node0.isInc());
378:       assertEquals((-1), node0.getCharno());
379:       assertFalse(node0.isAnd());
380:       assertFalse(node0.isCast());
381:       assertFalse(node0.isFalse());
382:       assertFalse(node0.isNE());
383:       assertEquals((-1), node0.getLineno());
384:       assertFalse(node0.isLabelName());
385:       assertFalse(node0.isFor());
386:       assertFalse(node0.isIf());
387:       assertFalse(node0.hasOneChild());
388:       assertFalse(node0.isCase());
389:       assertFalse(node0.isGetterDef());
390:       assertFalse(node0.isNumber());
391:       assertFalse(node0.isIn());
392:       assertFalse(node0.isScript());
393:       assertFalse(node0.isRegExp());
394:       assertFalse(node0.isBlock());
395:       assertFalse(node0.isTry());
396:       assertTrue(node0.isString());
397:       assertFalse(node0.hasMoreThanOneChild());
398:       assertFalse(node0.isCatch());
399:       assertFalse(node0.isHook());
400:       assertFalse(node0.isWith());
401:       assertFalse(node0.isInstanceOf());
402:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
403:       assertEquals(37, Node.OPT_ARG_NAME);
404:       assertEquals(56, Node.CHANGE_TIME);
405:       assertEquals(47, Node.IS_DISPATCHER);
406:       assertEquals(32, Node.INCRDECR_PROP);
407:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
408:       assertEquals(12, Node.COLUMN_BITS);
409:       assertEquals(30, Node.VAR_ARGS_NAME);
410:       assertEquals(2, Node.POST_FLAG);
411:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
412:       assertEquals(15, Node.NO_SIDE_EFFECTS);
413:       assertEquals(53, Node.INPUT_ID);
414:       assertEquals(57, Node.LAST_PROP);
415:       assertEquals(49, Node.DIRECT_EVAL);
416:       assertEquals(55, Node.INFERRED_FUNCTION);
417:       assertEquals(57, Node.REFLECTED_OBJECT);
418:       assertEquals(29, Node.JSDOC_INFO_PROP);
419:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
420:       assertEquals(52, Node.LENGTH);
421:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
422:       assertEquals(36, Node.QUOTED_PROP);
423:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
424:       assertEquals(8, Node.FLAG_NO_THROWS);
425:       assertEquals(39, Node.EMPTY_BLOCK);
426:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
427:       assertEquals(48, Node.DIRECTIVES);
428:       assertEquals(40, Node.ORIGINALNAME_PROP);
429:       assertEquals(4095, Node.COLUMN_MASK);
430:       assertEquals(43, Node.IS_CONSTANT_NAME);
431:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
432:       assertEquals(54, Node.SLASH_V);
433:       assertEquals(1, Node.DECR_FLAG);
434:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
435:       assertEquals(46, Node.IS_NAMESPACE);
436:       assertEquals(51, Node.STATIC_SOURCE_FILE);
437:       assertEquals(50, Node.FREE_CALL);
438:       
439:       Node node1 = Node.newString("change_time", 6, 4);
440:       assertFalse(node1.equals((Object)node0));
441:       assertNotNull(node1);
442:       assertNotSame(node1, node0);
443:       assertFalse(node1.isNE());
444:       assertFalse(node1.isIn());
445:       assertFalse(node1.isDelProp());
446:       assertFalse(node1.isEmpty());
447:       assertFalse(node1.isIf());
448:       assertFalse(node1.isGetterDef());
449:       assertFalse(node1.isSwitch());
450:       assertFalse(node1.isDefaultCase());
451:       assertFalse(node1.isFunction());
452:       assertFalse(node1.isArrayLit());
453:       assertFalse(node1.isInc());
454:       assertFalse(node1.isThrow());
455:       assertFalse(node1.isFalse());
456:       assertEquals(6, node1.getLineno());
457:       assertEquals(0, node1.getChildCount());
458:       assertEquals(40, node1.getType());
459:       assertFalse(node1.isComma());
460:       assertFalse(node1.isBreak());
461:       assertFalse(node1.isGetProp());
462:       assertFalse(node1.isAnd());
463:       assertFalse(node1.isObjectLit());
464:       assertFalse(node1.isNot());
465:       assertFalse(node1.isName());
466:       assertFalse(node1.isNull());
467:       assertFalse(node1.isTrue());
468:       assertFalse(node1.isDebugger());
469:       assertFalse(node1.isVoid());
470:       assertFalse(node1.isExprResult());
471:       assertFalse(node1.isCall());
472:       assertFalse(node1.isWhile());
473:       assertFalse(node1.hasChildren());
474:       assertFalse(node1.isAssign());
475:       assertFalse(node1.isDec());
476:       assertFalse(node1.isReturn());
477:       assertFalse(node1.isAssignAdd());
478:       assertFalse(node1.isTypeOf());
479:       assertFalse(node1.isNumber());
480:       assertFalse(node1.isGetElem());
481:       assertFalse(node1.isLabelName());
482:       assertFalse(node1.isOr());
483:       assertFalse(node1.isNew());
484:       assertFalse(node1.isAdd());
485:       assertEquals(24580, node1.getSourcePosition());
486:       assertFalse(node1.isContinue());
487:       assertFalse(node1.isCast());
488:       assertFalse(node1.isDo());
489:       assertFalse(node1.isLabel());
490:       assertFalse(node1.isVar());
491:       assertFalse(node1.isParamList());
492:       assertFalse(node1.isInstanceOf());
493:       assertFalse(node1.isSetterDef());
494:       assertFalse(node1.isStringKey());
495:       assertEquals(4, node1.getCharno());
496:       assertFalse(node1.isRegExp());
497:       assertFalse(node1.isTry());
498:       assertTrue(node1.isString());
499:       assertFalse(node1.hasOneChild());
500:       assertFalse(node1.isScript());
501:       assertFalse(node1.isCase());
502:       assertFalse(node1.isCatch());
503:       assertFalse(node1.isWith());
504:       assertFalse(node1.hasMoreThanOneChild());
505:       assertFalse(node1.isFor());
506:       assertFalse(node1.isBlock());
507:       assertFalse(node1.isHook());
508:       assertFalse(node1.isThis());
509:       assertEquals(48, Node.DIRECTIVES);
510:       assertEquals(8, Node.FLAG_NO_THROWS);
511:       assertEquals(39, Node.EMPTY_BLOCK);
512:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
513:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
514:       assertEquals(4095, Node.COLUMN_MASK);
515:       assertEquals(55, Node.INFERRED_FUNCTION);
516:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
517:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
518:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
519:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
520:       assertEquals(53, Node.INPUT_ID);
521:       assertEquals(36, Node.QUOTED_PROP);
522:       assertEquals(52, Node.LENGTH);
523:       assertEquals(15, Node.NO_SIDE_EFFECTS);
524:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
525:       assertEquals(49, Node.DIRECT_EVAL);
526:       assertEquals(57, Node.REFLECTED_OBJECT);
527:       assertEquals(56, Node.CHANGE_TIME);
528:       assertEquals(2, Node.POST_FLAG);
529:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
530:       assertEquals(37, Node.OPT_ARG_NAME);
531:       assertEquals(29, Node.JSDOC_INFO_PROP);
532:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
533:       assertEquals(30, Node.VAR_ARGS_NAME);
534:       assertEquals(1, Node.DECR_FLAG);
535:       assertEquals(57, Node.LAST_PROP);
536:       assertEquals(32, Node.INCRDECR_PROP);
537:       assertEquals(47, Node.IS_DISPATCHER);
538:       assertEquals(12, Node.COLUMN_BITS);
539:       assertEquals(54, Node.SLASH_V);
540:       assertEquals(40, Node.ORIGINALNAME_PROP);
541:       assertEquals(50, Node.FREE_CALL);
542:       assertEquals(51, Node.STATIC_SOURCE_FILE);
543:       assertEquals(46, Node.IS_NAMESPACE);
544:       assertEquals(43, Node.IS_CONSTANT_NAME);
545:       
546:       boolean boolean0 = node0.isVoid();
547:       assertFalse(node0.equals((Object)node1));
548:       assertFalse(boolean0);
549:       assertNotSame(node0, node1);
550:       assertFalse(node0.isSetterDef());
551:       assertFalse(node0.isNull());
552:       assertFalse(node0.isName());
553:       assertFalse(node0.isStringKey());
554:       assertFalse(node0.isParamList());
555:       assertFalse(node0.isAdd());
556:       assertFalse(node0.isFunction());
557:       assertFalse(node0.isDebugger());
558:       assertFalse(node0.isNew());
559:       assertFalse(node0.isDo());
560:       assertEquals(40, node0.getType());
561:       assertFalse(node0.isDefaultCase());
562:       assertFalse(node0.isVar());
563:       assertEquals(0, node0.getChildCount());
564:       assertFalse(node0.isArrayLit());
565:       assertFalse(node0.isContinue());
566:       assertFalse(node0.isTypeOf());
567:       assertFalse(node0.isDec());
568:       assertFalse(node0.hasChildren());
569:       assertEquals((-1), node0.getSourcePosition());
570:       assertFalse(node0.isLabel());
571:       assertFalse(node0.isReturn());
572:       assertFalse(node0.isAssignAdd());
573:       assertFalse(node0.isDelProp());
574:       assertFalse(node0.isOr());
575:       assertFalse(node0.isEmpty());
576:       assertFalse(node0.isTrue());
577:       assertFalse(node0.isVoid());
578:       assertFalse(node0.isExprResult());
579:       assertFalse(node0.isWhile());
580:       assertFalse(node0.isCall());
581:       assertFalse(node0.isGetElem());
582:       assertFalse(node0.isAssign());
583:       assertFalse(node0.isThis());
584:       assertFalse(node0.isComma());
585:       assertFalse(node0.isGetProp());
586:       assertFalse(node0.isBreak());
587:       assertFalse(node0.isThrow());
588:       assertFalse(node0.isObjectLit());
589:       assertFalse(node0.isNot());
590:       assertFalse(node0.isSwitch());
591:       assertFalse(node0.isInc());
592:       assertEquals((-1), node0.getCharno());
593:       assertFalse(node0.isAnd());
594:       assertFalse(node0.isCast());
595:       assertFalse(node0.isFalse());
596:       assertFalse(node0.isNE());
597:       assertEquals((-1), node0.getLineno());
598:       assertFalse(node0.isLabelName());
599:       assertFalse(node0.isFor());
600:       assertFalse(node0.isIf());
601:       assertFalse(node0.hasOneChild());
602:       assertFalse(node0.isCase());
603:       assertFalse(node0.isGetterDef());
604:       assertFalse(node0.isNumber());
605:       assertFalse(node0.isIn());
606:       assertFalse(node0.isScript());
607:       assertFalse(node0.isRegExp());
608:       assertFalse(node0.isBlock());
609:       assertFalse(node0.isTry());
610:       assertTrue(node0.isString());
611:       assertFalse(node0.hasMoreThanOneChild());
612:       assertFalse(node0.isCatch());
613:       assertFalse(node0.isHook());
614:       assertFalse(node0.isWith());
615:       assertFalse(node0.isInstanceOf());
616:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
617:       assertEquals(37, Node.OPT_ARG_NAME);
618:       assertEquals(56, Node.CHANGE_TIME);
619:       assertEquals(47, Node.IS_DISPATCHER);
620:       assertEquals(32, Node.INCRDECR_PROP);
621:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
622:       assertEquals(12, Node.COLUMN_BITS);
623:       assertEquals(30, Node.VAR_ARGS_NAME);
624:       assertEquals(2, Node.POST_FLAG);
625:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
626:       assertEquals(15, Node.NO_SIDE_EFFECTS);
627:       assertEquals(53, Node.INPUT_ID);
628:       assertEquals(57, Node.LAST_PROP);
629:       assertEquals(49, Node.DIRECT_EVAL);
630:       assertEquals(55, Node.INFERRED_FUNCTION);
631:       assertEquals(57, Node.REFLECTED_OBJECT);
632:       assertEquals(29, Node.JSDOC_INFO_PROP);
633:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
634:       assertEquals(52, Node.LENGTH);
635:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
636:       assertEquals(36, Node.QUOTED_PROP);
637:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
638:       assertEquals(8, Node.FLAG_NO_THROWS);
639:       assertEquals(39, Node.EMPTY_BLOCK);
640:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
641:       assertEquals(48, Node.DIRECTIVES);
642:       assertEquals(40, Node.ORIGINALNAME_PROP);
643:       assertEquals(4095, Node.COLUMN_MASK);
644:       assertEquals(43, Node.IS_CONSTANT_NAME);
645:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
646:       assertEquals(54, Node.SLASH_V);
647:       assertEquals(1, Node.DECR_FLAG);
648:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
649:       assertEquals(46, Node.IS_NAMESPACE);
650:       assertEquals(51, Node.STATIC_SOURCE_FILE);
651:       assertEquals(50, Node.FREE_CALL);
652:       
653:       node0.removeProp(31);
654:       assertFalse(node0.equals((Object)node1));
655:       assertNotSame(node0, node1);
656:       assertFalse(node0.isSetterDef());
657:       assertFalse(node0.isNull());
658:       assertFalse(node0.isName());
659:       assertFalse(node0.isStringKey());
660:       assertFalse(node0.isParamList());
661:       assertFalse(node0.isAdd());
662:       assertFalse(node0.isFunction());
663:       assertFalse(node0.isDebugger());
664:       assertFalse(node0.isNew());
665:       assertFalse(node0.isDo());
666:       assertEquals(40, node0.getType());
667:       assertFalse(node0.isDefaultCase());
668:       assertFalse(node0.isVar());
669:       assertEquals(0, node0.getChildCount());
670:       assertFalse(node0.isArrayLit());
671:       assertFalse(node0.isContinue());
672:       assertFalse(node0.isTypeOf());
673:       assertFalse(node0.isDec());
674:       assertFalse(node0.hasChildren());
675:       assertEquals((-1), node0.getSourcePosition());
676:       assertFalse(node0.isLabel());
677:       assertFalse(node0.isReturn());
678:       assertFalse(node0.isAssignAdd());
679:       assertFalse(node0.isDelProp());
680:       assertFalse(node0.isOr());
681:       assertFalse(node0.isEmpty());
682:       assertFalse(node0.isTrue());
683:       assertFalse(node0.isVoid());
684:       assertFalse(node0.isExprResult());
685:       assertFalse(node0.isWhile());
686:       assertFalse(node0.isCall());
687:       assertFalse(node0.isGetElem());
688:       assertFalse(node0.isAssign());
689:       assertFalse(node0.isThis());
690:       assertFalse(node0.isComma());
691:       assertFalse(node0.isGetProp());
692:       assertFalse(node0.isBreak());
693:       assertFalse(node0.isThrow());
694:       assertFalse(node0.isObjectLit());
695:       assertFalse(node0.isNot());
696:       assertFalse(node0.isSwitch());
697:       assertFalse(node0.isInc());
698:       assertEquals((-1), node0.getCharno());
699:       assertFalse(node0.isAnd());
700:       assertFalse(node0.isCast());
701:       assertFalse(node0.isFalse());
702:       assertFalse(node0.isNE());
703:       assertEquals((-1), node0.getLineno());
704:       assertFalse(node0.isLabelName());
705:       assertFalse(node0.isFor());
706:       assertFalse(node0.isIf());
707:       assertFalse(node0.hasOneChild());
708:       assertFalse(node0.isCase());
709:       assertFalse(node0.isGetterDef());
710:       assertFalse(node0.isNumber());
711:       assertFalse(node0.isIn());
712:       assertFalse(node0.isScript());
713:       assertFalse(node0.isRegExp());
714:       assertFalse(node0.isBlock());
715:       assertFalse(node0.isTry());
716:       assertTrue(node0.isString());
717:       assertFalse(node0.hasMoreThanOneChild());
718:       assertFalse(node0.isCatch());
719:       assertFalse(node0.isHook());
720:       assertFalse(node0.isWith());
721:       assertFalse(node0.isInstanceOf());
722:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
723:       assertEquals(37, Node.OPT_ARG_NAME);
724:       assertEquals(56, Node.CHANGE_TIME);
725:       assertEquals(47, Node.IS_DISPATCHER);
726:       assertEquals(32, Node.INCRDECR_PROP);
727:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
728:       assertEquals(12, Node.COLUMN_BITS);
729:       assertEquals(30, Node.VAR_ARGS_NAME);
730:       assertEquals(2, Node.POST_FLAG);
731:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
732:       assertEquals(15, Node.NO_SIDE_EFFECTS);
733:       assertEquals(53, Node.INPUT_ID);
734:       assertEquals(57, Node.LAST_PROP);
735:       assertEquals(49, Node.DIRECT_EVAL);
736:       assertEquals(55, Node.INFERRED_FUNCTION);
737:       assertEquals(57, Node.REFLECTED_OBJECT);
738:       assertEquals(29, Node.JSDOC_INFO_PROP);
739:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
740:       assertEquals(52, Node.LENGTH);
741:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
742:       assertEquals(36, Node.QUOTED_PROP);
743:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
744:       assertEquals(8, Node.FLAG_NO_THROWS);
745:       assertEquals(39, Node.EMPTY_BLOCK);
746:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
747:       assertEquals(48, Node.DIRECTIVES);
748:       assertEquals(40, Node.ORIGINALNAME_PROP);
749:       assertEquals(4095, Node.COLUMN_MASK);
750:       assertEquals(43, Node.IS_CONSTANT_NAME);
751:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
752:       assertEquals(54, Node.SLASH_V);
753:       assertEquals(1, Node.DECR_FLAG);
754:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
755:       assertEquals(46, Node.IS_NAMESPACE);
756:       assertEquals(51, Node.STATIC_SOURCE_FILE);
757:       assertEquals(50, Node.FREE_CALL);
758:       
759:       node1.setSourceFileForTesting("change_time");
760:       assertFalse(node1.equals((Object)node0));
761:       assertNotSame(node1, node0);
762:       assertFalse(node1.isNE());
763:       assertFalse(node1.isIn());
764:       assertFalse(node1.isDelProp());
765:       assertFalse(node1.isEmpty());
766:       assertFalse(node1.isIf());
767:       assertFalse(node1.isGetterDef());
768:       assertFalse(node1.isSwitch());
769:       assertFalse(node1.isDefaultCase());
770:       assertFalse(node1.isFunction());
771:       assertFalse(node1.isArrayLit());
772:       assertFalse(node1.isInc());
773:       assertFalse(node1.isThrow());
774:       assertFalse(node1.isFalse());
775:       assertEquals(6, node1.getLineno());
776:       assertEquals(0, node1.getChildCount());
777:       assertEquals(40, node1.getType());
778:       assertFalse(node1.isComma());
779:       assertFalse(node1.isBreak());
780:       assertFalse(node1.isGetProp());
781:       assertFalse(node1.isAnd());
782:       assertFalse(node1.isObjectLit());
783:       assertFalse(node1.isNot());
784:       assertFalse(node1.isName());
785:       assertFalse(node1.isNull());
786:       assertFalse(node1.isTrue());
787:       assertFalse(node1.isDebugger());
788:       assertFalse(node1.isVoid());
789:       assertFalse(node1.isExprResult());
790:       assertFalse(node1.isCall());
791:       assertFalse(node1.isWhile());
792:       assertFalse(node1.hasChildren());
793:       assertFalse(node1.isAssign());
794:       assertFalse(node1.isDec());
795:       assertFalse(node1.isReturn());
796:       assertFalse(node1.isAssignAdd());
797:       assertFalse(node1.isTypeOf());
798:       assertFalse(node1.isNumber());
799:       assertFalse(node1.isGetElem());
800:       assertFalse(node1.isLabelName());
801:       assertFalse(node1.isOr());
802:       assertFalse(node1.isNew());
803:       assertFalse(node1.isAdd());
804:       assertEquals(24580, node1.getSourcePosition());
805:       assertFalse(node1.isContinue());
806:       assertFalse(node1.isCast());
807:       assertFalse(node1.isDo());
808:       assertFalse(node1.isLabel());
809:       assertFalse(node1.isVar());
810:       assertFalse(node1.isParamList());
811:       assertFalse(node1.isInstanceOf());
812:       assertFalse(node1.isSetterDef());
813:       assertFalse(node1.isStringKey());
814:       assertEquals(4, node1.getCharno());
815:       assertFalse(node1.isRegExp());
816:       assertFalse(node1.isTry());
817:       assertTrue(node1.isString());
818:       assertFalse(node1.hasOneChild());
819:       assertFalse(node1.isScript());
820:       assertFalse(node1.isCase());
821:       assertFalse(node1.isCatch());
822:       assertFalse(node1.isWith());
823:       assertFalse(node1.hasMoreThanOneChild());
824:       assertFalse(node1.isFor());
825:       assertFalse(node1.isBlock());
826:       assertFalse(node1.isHook());
827:       assertFalse(node1.isThis());
828:       assertEquals(48, Node.DIRECTIVES);
829:       assertEquals(8, Node.FLAG_NO_THROWS);
830:       assertEquals(39, Node.EMPTY_BLOCK);
831:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
832:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
833:       assertEquals(4095, Node.COLUMN_MASK);
834:       assertEquals(55, Node.INFERRED_FUNCTION);
835:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
836:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
837:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
838:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
839:       assertEquals(53, Node.INPUT_ID);
840:       assertEquals(36, Node.QUOTED_PROP);
841:       assertEquals(52, Node.LENGTH);
842:       assertEquals(15, Node.NO_SIDE_EFFECTS);
843:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
844:       assertEquals(49, Node.DIRECT_EVAL);
845:       assertEquals(57, Node.REFLECTED_OBJECT);
846:       assertEquals(56, Node.CHANGE_TIME);
847:       assertEquals(2, Node.POST_FLAG);
848:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
849:       assertEquals(37, Node.OPT_ARG_NAME);
850:       assertEquals(29, Node.JSDOC_INFO_PROP);
851:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
852:       assertEquals(30, Node.VAR_ARGS_NAME);
853:       assertEquals(1, Node.DECR_FLAG);
854:       assertEquals(57, Node.LAST_PROP);
855:       assertEquals(32, Node.INCRDECR_PROP);
856:       assertEquals(47, Node.IS_DISPATCHER);
857:       assertEquals(12, Node.COLUMN_BITS);
858:       assertEquals(54, Node.SLASH_V);
859:       assertEquals(40, Node.ORIGINALNAME_PROP);
860:       assertEquals(50, Node.FREE_CALL);
861:       assertEquals(51, Node.STATIC_SOURCE_FILE);
862:       assertEquals(46, Node.IS_NAMESPACE);
863:       assertEquals(43, Node.IS_CONSTANT_NAME);
864:       
865:       JSDocInfo jSDocInfo0 = node1.getJSDocInfo();
866:       assertFalse(node1.equals((Object)node0));
867:       assertNull(jSDocInfo0);
868:       assertNotSame(node1, node0);
869:       assertFalse(node1.isNE());
870:       assertFalse(node1.isIn());
871:       assertFalse(node1.isDelProp());
872:       assertFalse(node1.isEmpty());
873:       assertFalse(node1.isIf());
874:       assertFalse(node1.isGetterDef());
875:       assertFalse(node1.isSwitch());
876:       assertFalse(node1.isDefaultCase());
877:       assertFalse(node1.isFunction());
878:       assertFalse(node1.isArrayLit());
879:       assertFalse(node1.isInc());
880:       assertFalse(node1.isThrow());
881:       assertFalse(node1.isFalse());
882:       assertEquals(6, node1.getLineno());
883:       assertEquals(0, node1.getChildCount());
884:       assertEquals(40, node1.getType());
885:       assertFalse(node1.isComma());
886:       assertFalse(node1.isBreak());
887:       assertFalse(node1.isGetProp());
888:       assertFalse(node1.isAnd());
889:       assertFalse(node1.isObjectLit());
890:       assertFalse(node1.isNot());
891:       assertFalse(node1.isName());
892:       assertFalse(node1.isNull());
893:       assertFalse(node1.isTrue());
894:       assertFalse(node1.isDebugger());
895:       assertFalse(node1.isVoid());
896:       assertFalse(node1.isExprResult());
897:       assertFalse(node1.isCall());
898:       assertFalse(node1.isWhile());
899:       assertFalse(node1.hasChildren());
900:       assertFalse(node1.isAssign());
901:       assertFalse(node1.isDec());
902:       assertFalse(node1.isReturn());
903:       assertFalse(node1.isAssignAdd());
904:       assertFalse(node1.isTypeOf());
905:       assertFalse(node1.isNumber());
906:       assertFalse(node1.isGetElem());
907:       assertFalse(node1.isLabelName());
908:       assertFalse(node1.isOr());
909:       assertFalse(node1.isNew());
910:       assertFalse(node1.isAdd());
911:       assertEquals(24580, node1.getSourcePosition());
912:       assertFalse(node1.isContinue());
913:       assertFalse(node1.isCast());
914:       assertFalse(node1.isDo());
915:       assertFalse(node1.isLabel());
916:       assertFalse(node1.isVar());
917:       assertFalse(node1.isParamList());
918:       assertFalse(node1.isInstanceOf());
919:       assertFalse(node1.isSetterDef());
920:       assertFalse(node1.isStringKey());
921:       assertEquals(4, node1.getCharno());
922:       assertFalse(node1.isRegExp());
923:       assertFalse(node1.isTry());
924:       assertTrue(node1.isString());
925:       assertFalse(node1.hasOneChild());
926:       assertFalse(node1.isScript());
927:       assertFalse(node1.isCase());
928:       assertFalse(node1.isCatch());
929:       assertFalse(node1.isWith());
930:       assertFalse(node1.hasMoreThanOneChild());
931:       assertFalse(node1.isFor());
932:       assertFalse(node1.isBlock());
933:       assertFalse(node1.isHook());
934:       assertFalse(node1.isThis());
935:       assertEquals(48, Node.DIRECTIVES);
936:       assertEquals(8, Node.FLAG_NO_THROWS);
937:       assertEquals(39, Node.EMPTY_BLOCK);
938:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
939:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
940:       assertEquals(4095, Node.COLUMN_MASK);
941:       assertEquals(55, Node.INFERRED_FUNCTION);
942:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
943:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
944:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
945:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
946:       assertEquals(53, Node.INPUT_ID);
947:       assertEquals(36, Node.QUOTED_PROP);
948:       assertEquals(52, Node.LENGTH);
949:       assertEquals(15, Node.NO_SIDE_EFFECTS);
950:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
951:       assertEquals(49, Node.DIRECT_EVAL);
952:       assertEquals(57, Node.REFLECTED_OBJECT);
953:       assertEquals(56, Node.CHANGE_TIME);
954:       assertEquals(2, Node.POST_FLAG);
955:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
956:       assertEquals(37, Node.OPT_ARG_NAME);
957:       assertEquals(29, Node.JSDOC_INFO_PROP);
958:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
959:       assertEquals(30, Node.VAR_ARGS_NAME);
960:       assertEquals(1, Node.DECR_FLAG);
961:       assertEquals(57, Node.LAST_PROP);
962:       assertEquals(32, Node.INCRDECR_PROP);
963:       assertEquals(47, Node.IS_DISPATCHER);
964:       assertEquals(12, Node.COLUMN_BITS);
965:       assertEquals(54, Node.SLASH_V);
966:       assertEquals(40, Node.ORIGINALNAME_PROP);
967:       assertEquals(50, Node.FREE_CALL);
968:       assertEquals(51, Node.STATIC_SOURCE_FILE);
969:       assertEquals(46, Node.IS_NAMESPACE);
970:       assertEquals(43, Node.IS_CONSTANT_NAME);
971:       
972:       Iterable<Node> iterable0 = node0.children();
973:       assertFalse(node0.equals((Object)node1));
974:       assertFalse(iterable0.contains(node0));
975:       assertNotNull(iterable0);
976:       assertNotSame(node0, node1);
977:       assertFalse(node0.isSetterDef());
978:       assertFalse(node0.isNull());
979:       assertFalse(node0.isName());
980:       assertFalse(node0.isStringKey());
981:       assertFalse(node0.isParamList());
982:       assertFalse(node0.isAdd());
983:       assertFalse(node0.isFunction());
984:       assertFalse(node0.isDebugger());
985:       assertFalse(node0.isNew());
986:       assertFalse(node0.isDo());
987:       assertEquals(40, node0.getType());
988:       assertFalse(node0.isDefaultCase());
989:       assertFalse(node0.isVar());
990:       assertEquals(0, node0.getChildCount());
991:       assertFalse(node0.isArrayLit());
992:       assertFalse(node0.isContinue());
993:       assertFalse(node0.isTypeOf());
994:       assertFalse(node0.isDec());
995:       assertFalse(node0.hasChildren());
996:       assertEquals((-1), node0.getSourcePosition());
997:       assertFalse(node0.isLabel());
998:       assertFalse(node0.isReturn());
999:       assertFalse(node0.isAssignAdd());
1000:       assertFalse(node0.isDelProp());
1001:       assertFalse(node0.isOr());
1002:       assertFalse(node0.isEmpty());
1003:       assertFalse(node0.isTrue());
1004:       assertFalse(node0.isVoid());
1005:       assertFalse(node0.isExprResult());
1006:       assertFalse(node0.isWhile());
1007:       assertFalse(node0.isCall());
1008:       assertFalse(node0.isGetElem());
1009:       assertFalse(node0.isAssign());
1010:       assertFalse(node0.isThis());
1011:       assertFalse(node0.isComma());
1012:       assertFalse(node0.isGetProp());
1013:       assertFalse(node0.isBreak());
1014:       assertFalse(node0.isThrow());
1015:       assertFalse(node0.isObjectLit());
1016:       assertFalse(node0.isNot());
1017:       assertFalse(node0.isSwitch());
1018:       assertFalse(node0.isInc());
1019:       assertEquals((-1), node0.getCharno());
1020:       assertFalse(node0.isAnd());
1021:       assertFalse(node0.isCast());
1022:       assertFalse(node0.isFalse());
1023:       assertFalse(node0.isNE());
1024:       assertEquals((-1), node0.getLineno());
1025:       assertFalse(node0.isLabelName());
1026:       assertFalse(node0.isFor());
1027:       assertFalse(node0.isIf());
1028:       assertFalse(node0.hasOneChild());
1029:       assertFalse(node0.isCase());
1030:       assertFalse(node0.isGetterDef());
1031:       assertFalse(node0.isNumber());
1032:       assertFalse(node0.isIn());
1033:       assertFalse(node0.isScript());
1034:       assertFalse(node0.isRegExp());
1035:       assertFalse(node0.isBlock());
1036:       assertFalse(node0.isTry());
1037:       assertTrue(node0.isString());
1038:       assertFalse(node0.hasMoreThanOneChild());
1039:       assertFalse(node0.isCatch());
1040:       assertFalse(node0.isHook());
1041:       assertFalse(node0.isWith());
1042:       assertFalse(node0.isInstanceOf());
1043:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1044:       assertEquals(37, Node.OPT_ARG_NAME);
1045:       assertEquals(56, Node.CHANGE_TIME);
1046:       assertEquals(47, Node.IS_DISPATCHER);
1047:       assertEquals(32, Node.INCRDECR_PROP);
1048:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1049:       assertEquals(12, Node.COLUMN_BITS);
1050:       assertEquals(30, Node.VAR_ARGS_NAME);
1051:       assertEquals(2, Node.POST_FLAG);
1052:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1053:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1054:       assertEquals(53, Node.INPUT_ID);
1055:       assertEquals(57, Node.LAST_PROP);
1056:       assertEquals(49, Node.DIRECT_EVAL);
1057:       assertEquals(55, Node.INFERRED_FUNCTION);
1058:       assertEquals(57, Node.REFLECTED_OBJECT);
1059:       assertEquals(29, Node.JSDOC_INFO_PROP);
1060:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1061:       assertEquals(52, Node.LENGTH);
1062:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1063:       assertEquals(36, Node.QUOTED_PROP);
1064:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1065:       assertEquals(8, Node.FLAG_NO_THROWS);
1066:       assertEquals(39, Node.EMPTY_BLOCK);
1067:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1068:       assertEquals(48, Node.DIRECTIVES);
1069:       assertEquals(40, Node.ORIGINALNAME_PROP);
1070:       assertEquals(4095, Node.COLUMN_MASK);
1071:       assertEquals(43, Node.IS_CONSTANT_NAME);
1072:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1073:       assertEquals(54, Node.SLASH_V);
1074:       assertEquals(1, Node.DECR_FLAG);
1075:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1076:       assertEquals(46, Node.IS_NAMESPACE);
1077:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1078:       assertEquals(50, Node.FREE_CALL);
1079:       
1080:       boolean boolean1 = node1.isVarArgs();
1081:       assertFalse(node1.equals((Object)node0));
1082:       assertTrue(boolean1 == boolean0);
1083:       assertFalse(boolean1);
1084:       assertNotSame(node1, node0);
1085:       assertFalse(node1.isNE());
1086:       assertFalse(node1.isIn());
1087:       assertFalse(node1.isDelProp());
1088:       assertFalse(node1.isEmpty());
1089:       assertFalse(node1.isIf());
1090:       assertFalse(node1.isGetterDef());
1091:       assertFalse(node1.isSwitch());
1092:       assertFalse(node1.isDefaultCase());
1093:       assertFalse(node1.isFunction());
1094:       assertFalse(node1.isArrayLit());
1095:       assertFalse(node1.isInc());
1096:       assertFalse(node1.isThrow());
1097:       assertFalse(node1.isFalse());
1098:       assertEquals(6, node1.getLineno());
1099:       assertEquals(0, node1.getChildCount());
1100:       assertEquals(40, node1.getType());
1101:       assertFalse(node1.isComma());
1102:       assertFalse(node1.isBreak());
1103:       assertFalse(node1.isGetProp());
1104:       assertFalse(node1.isAnd());
1105:       assertFalse(node1.isObjectLit());
1106:       assertFalse(node1.isNot());
1107:       assertFalse(node1.isName());
1108:       assertFalse(node1.isNull());
1109:       assertFalse(node1.isTrue());
1110:       assertFalse(node1.isDebugger());
1111:       assertFalse(node1.isVoid());
1112:       assertFalse(node1.isExprResult());
1113:       assertFalse(node1.isCall());
1114:       assertFalse(node1.isWhile());
1115:       assertFalse(node1.hasChildren());
1116:       assertFalse(node1.isAssign());
1117:       assertFalse(node1.isDec());
1118:       assertFalse(node1.isReturn());
1119:       assertFalse(node1.isAssignAdd());
1120:       assertFalse(node1.isTypeOf());
1121:       assertFalse(node1.isNumber());
1122:       assertFalse(node1.isGetElem());
1123:       assertFalse(node1.isLabelName());
1124:       assertFalse(node1.isOr());
1125:       assertFalse(node1.isNew());
1126:       assertFalse(node1.isAdd());
1127:       assertEquals(24580, node1.getSourcePosition());
1128:       assertFalse(node1.isContinue());
1129:       assertFalse(node1.isCast());
1130:       assertFalse(node1.isDo());
1131:       assertFalse(node1.isLabel());
1132:       assertFalse(node1.isVar());
1133:       assertFalse(node1.isParamList());
1134:       assertFalse(node1.isInstanceOf());
1135:       assertFalse(node1.isSetterDef());
1136:       assertFalse(node1.isStringKey());
1137:       assertEquals(4, node1.getCharno());
1138:       assertFalse(node1.isRegExp());
1139:       assertFalse(node1.isTry());
1140:       assertTrue(node1.isString());
1141:       assertFalse(node1.hasOneChild());
1142:       assertFalse(node1.isScript());
1143:       assertFalse(node1.isCase());
1144:       assertFalse(node1.isCatch());
1145:       assertFalse(node1.isWith());
1146:       assertFalse(node1.hasMoreThanOneChild());
1147:       assertFalse(node1.isFor());
1148:       assertFalse(node1.isBlock());
1149:       assertFalse(node1.isHook());
1150:       assertFalse(node1.isThis());
1151:       assertEquals(48, Node.DIRECTIVES);
1152:       assertEquals(8, Node.FLAG_NO_THROWS);
1153:       assertEquals(39, Node.EMPTY_BLOCK);
1154:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1156:       assertEquals(4095, Node.COLUMN_MASK);
1157:       assertEquals(55, Node.INFERRED_FUNCTION);
1158:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1159:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1160:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1161:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1162:       assertEquals(53, Node.INPUT_ID);
1163:       assertEquals(36, Node.QUOTED_PROP);
1164:       assertEquals(52, Node.LENGTH);
1165:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1166:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1167:       assertEquals(49, Node.DIRECT_EVAL);
1168:       assertEquals(57, Node.REFLECTED_OBJECT);
1169:       assertEquals(56, Node.CHANGE_TIME);
1170:       assertEquals(2, Node.POST_FLAG);
1171:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1172:       assertEquals(37, Node.OPT_ARG_NAME);
1173:       assertEquals(29, Node.JSDOC_INFO_PROP);
1174:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1175:       assertEquals(30, Node.VAR_ARGS_NAME);
1176:       assertEquals(1, Node.DECR_FLAG);
1177:       assertEquals(57, Node.LAST_PROP);
1178:       assertEquals(32, Node.INCRDECR_PROP);
1179:       assertEquals(47, Node.IS_DISPATCHER);
1180:       assertEquals(12, Node.COLUMN_BITS);
1181:       assertEquals(54, Node.SLASH_V);
1182:       assertEquals(40, Node.ORIGINALNAME_PROP);
1183:       assertEquals(50, Node.FREE_CALL);
1184:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1185:       assertEquals(46, Node.IS_NAMESPACE);
1186:       assertEquals(43, Node.IS_CONSTANT_NAME);
1187:       
1188:       node0.setIsSyntheticBlock(false);
1189:       assertFalse(node0.equals((Object)node1));
1190:       assertNotSame(node0, node1);
1191:       assertFalse(node0.isSetterDef());
1192:       assertFalse(node0.isNull());
1193:       assertFalse(node0.isName());
1194:       assertFalse(node0.isStringKey());
1195:       assertFalse(node0.isParamList());
1196:       assertFalse(node0.isAdd());
1197:       assertFalse(node0.isFunction());
1198:       assertFalse(node0.isDebugger());
1199:       assertFalse(node0.isNew());
1200:       assertFalse(node0.isDo());
1201:       assertEquals(40, node0.getType());
1202:       assertFalse(node0.isDefaultCase());
1203:       assertFalse(node0.isVar());
1204:       assertEquals(0, node0.getChildCount());
1205:       assertFalse(node0.isArrayLit());
1206:       assertFalse(node0.isContinue());
1207:       assertFalse(node0.isTypeOf());
1208:       assertFalse(node0.isDec());
1209:       assertFalse(node0.hasChildren());
1210:       assertEquals((-1), node0.getSourcePosition());
1211:       assertFalse(node0.isLabel());
1212:       assertFalse(node0.isReturn());
1213:       assertFalse(node0.isAssignAdd());
1214:       assertFalse(node0.isDelProp());
1215:       assertFalse(node0.isOr());
1216:       assertFalse(node0.isEmpty());
1217:       assertFalse(node0.isTrue());
1218:       assertFalse(node0.isVoid());
1219:       assertFalse(node0.isExprResult());
1220:       assertFalse(node0.isWhile());
1221:       assertFalse(node0.isCall());
1222:       assertFalse(node0.isGetElem());
1223:       assertFalse(node0.isAssign());
1224:       assertFalse(node0.isThis());
1225:       assertFalse(node0.isComma());
1226:       assertFalse(node0.isGetProp());
1227:       assertFalse(node0.isBreak());
1228:       assertFalse(node0.isThrow());
1229:       assertFalse(node0.isObjectLit());
1230:       assertFalse(node0.isNot());
1231:       assertFalse(node0.isSwitch());
1232:       assertFalse(node0.isInc());
1233:       assertEquals((-1), node0.getCharno());
1234:       assertFalse(node0.isAnd());
1235:       assertFalse(node0.isCast());
1236:       assertFalse(node0.isFalse());
1237:       assertFalse(node0.isNE());
1238:       assertEquals((-1), node0.getLineno());
1239:       assertFalse(node0.isLabelName());
1240:       assertFalse(node0.isFor());
1241:       assertFalse(node0.isIf());
1242:       assertFalse(node0.hasOneChild());
1243:       assertFalse(node0.isCase());
1244:       assertFalse(node0.isGetterDef());
1245:       assertFalse(node0.isNumber());
1246:       assertFalse(node0.isIn());
1247:       assertFalse(node0.isScript());
1248:       assertFalse(node0.isRegExp());
1249:       assertFalse(node0.isBlock());
1250:       assertFalse(node0.isTry());
1251:       assertTrue(node0.isString());
1252:       assertFalse(node0.hasMoreThanOneChild());
1253:       assertFalse(node0.isCatch());
1254:       assertFalse(node0.isHook());
1255:       assertFalse(node0.isWith());
1256:       assertFalse(node0.isInstanceOf());
1257:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1258:       assertEquals(37, Node.OPT_ARG_NAME);
1259:       assertEquals(56, Node.CHANGE_TIME);
1260:       assertEquals(47, Node.IS_DISPATCHER);
1261:       assertEquals(32, Node.INCRDECR_PROP);
1262:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1263:       assertEquals(12, Node.COLUMN_BITS);
1264:       assertEquals(30, Node.VAR_ARGS_NAME);
1265:       assertEquals(2, Node.POST_FLAG);
1266:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1267:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1268:       assertEquals(53, Node.INPUT_ID);
1269:       assertEquals(57, Node.LAST_PROP);
1270:       assertEquals(49, Node.DIRECT_EVAL);
1271:       assertEquals(55, Node.INFERRED_FUNCTION);
1272:       assertEquals(57, Node.REFLECTED_OBJECT);
1273:       assertEquals(29, Node.JSDOC_INFO_PROP);
1274:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1275:       assertEquals(52, Node.LENGTH);
1276:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1277:       assertEquals(36, Node.QUOTED_PROP);
1278:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1279:       assertEquals(8, Node.FLAG_NO_THROWS);
1280:       assertEquals(39, Node.EMPTY_BLOCK);
1281:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1282:       assertEquals(48, Node.DIRECTIVES);
1283:       assertEquals(40, Node.ORIGINALNAME_PROP);
1284:       assertEquals(4095, Node.COLUMN_MASK);
1285:       assertEquals(43, Node.IS_CONSTANT_NAME);
1286:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1287:       assertEquals(54, Node.SLASH_V);
1288:       assertEquals(1, Node.DECR_FLAG);
1289:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1290:       assertEquals(46, Node.IS_NAMESPACE);
1291:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1292:       assertEquals(50, Node.FREE_CALL);
1293:       
1294:       boolean boolean2 = node0.isEquivalentTo(node1);
1295:       assertFalse(node0.equals((Object)node1));
1296:       assertFalse(node1.equals((Object)node0));
1297:       assertFalse(boolean2 == boolean1);
1298:       assertFalse(boolean2 == boolean0);
1299:       assertTrue(boolean2);
1300:       assertNotSame(node0, node1);
1301:       assertNotSame(node1, node0);
1302:       assertFalse(node0.isSetterDef());
1303:       assertFalse(node0.isNull());
1304:       assertFalse(node0.isName());
1305:       assertFalse(node0.isStringKey());
1306:       assertFalse(node0.isParamList());
1307:       assertFalse(node0.isAdd());
1308:       assertFalse(node0.isFunction());
1309:       assertFalse(node0.isDebugger());
1310:       assertFalse(node0.isNew());
1311:       assertFalse(node0.isDo());
1312:       assertEquals(40, node0.getType());
1313:       assertFalse(node0.isDefaultCase());
1314:       assertFalse(node0.isVar());
1315:       assertEquals(0, node0.getChildCount());
1316:       assertFalse(node0.isArrayLit());
1317:       assertFalse(node0.isContinue());
1318:       assertFalse(node0.isTypeOf());
1319:       assertFalse(node0.isDec());
1320:       assertFalse(node0.hasChildren());
1321:       assertEquals((-1), node0.getSourcePosition());
1322:       assertFalse(node0.isLabel());
1323:       assertFalse(node0.isReturn());
1324:       assertFalse(node0.isAssignAdd());
1325:       assertFalse(node0.isDelProp());
1326:       assertFalse(node0.isOr());
1327:       assertFalse(node0.isEmpty());
1328:       assertFalse(node0.isTrue());
1329:       assertFalse(node0.isVoid());
1330:       assertFalse(node0.isExprResult());
1331:       assertFalse(node0.isWhile());
1332:       assertFalse(node0.isCall());
1333:       assertFalse(node0.isGetElem());
1334:       assertFalse(node0.isAssign());
1335:       assertFalse(node0.isThis());
1336:       assertFalse(node0.isComma());
1337:       assertFalse(node0.isGetProp());
1338:       assertFalse(node0.isBreak());
1339:       assertFalse(node0.isThrow());
1340:       assertFalse(node0.isObjectLit());
1341:       assertFalse(node0.isNot());
1342:       assertFalse(node0.isSwitch());
1343:       assertFalse(node0.isInc());
1344:       assertEquals((-1), node0.getCharno());
1345:       assertFalse(node0.isAnd());
1346:       assertFalse(node0.isCast());
1347:       assertFalse(node0.isFalse());
1348:       assertFalse(node0.isNE());
1349:       assertEquals((-1), node0.getLineno());
1350:       assertFalse(node0.isLabelName());
1351:       assertFalse(node0.isFor());
1352:       assertFalse(node0.isIf());
1353:       assertFalse(node0.hasOneChild());
1354:       assertFalse(node0.isCase());
1355:       assertFalse(node0.isGetterDef());
1356:       assertFalse(node0.isNumber());
1357:       assertFalse(node0.isIn());
1358:       assertFalse(node0.isScript());
1359:       assertFalse(node0.isRegExp());
1360:       assertFalse(node0.isBlock());
1361:       assertFalse(node0.isTry());
1362:       assertTrue(node0.isString());
1363:       assertFalse(node0.hasMoreThanOneChild());
1364:       assertFalse(node0.isCatch());
1365:       assertFalse(node0.isHook());
1366:       assertFalse(node0.isWith());
1367:       assertFalse(node0.isInstanceOf());
1368:       assertFalse(node1.isNE());
1369:       assertFalse(node1.isIn());
1370:       assertFalse(node1.isDelProp());
1371:       assertFalse(node1.isEmpty());
1372:       assertFalse(node1.isIf());
1373:       assertFalse(node1.isGetterDef());
1374:       assertFalse(node1.isSwitch());
1375:       assertFalse(node1.isDefaultCase());
1376:       assertFalse(node1.isFunction());
1377:       assertFalse(node1.isArrayLit());
1378:       assertFalse(node1.isInc());
1379:       assertFalse(node1.isThrow());
1380:       assertFalse(node1.isFalse());
1381:       assertEquals(6, node1.getLineno());
1382:       assertEquals(0, node1.getChildCount());
1383:       assertEquals(40, node1.getType());
1384:       assertFalse(node1.isComma());
1385:       assertFalse(node1.isBreak());
1386:       assertFalse(node1.isGetProp());
1387:       assertFalse(node1.isAnd());
1388:       assertFalse(node1.isObjectLit());
1389:       assertFalse(node1.isNot());
1390:       assertFalse(node1.isName());
1391:       assertFalse(node1.isNull());
1392:       assertFalse(node1.isTrue());
1393:       assertFalse(node1.isDebugger());
1394:       assertFalse(node1.isVoid());
1395:       assertFalse(node1.isExprResult());
1396:       assertFalse(node1.isCall());
1397:       assertFalse(node1.isWhile());
1398:       assertFalse(node1.hasChildren());
1399:       assertFalse(node1.isAssign());
1400:       assertFalse(node1.isDec());
1401:       assertFalse(node1.isReturn());
1402:       assertFalse(node1.isAssignAdd());
1403:       assertFalse(node1.isTypeOf());
1404:       assertFalse(node1.isNumber());
1405:       assertFalse(node1.isGetElem());
1406:       assertFalse(node1.isLabelName());
1407:       assertFalse(node1.isOr());
1408:       assertFalse(node1.isNew());
1409:       assertFalse(node1.isAdd());
1410:       assertEquals(24580, node1.getSourcePosition());
1411:       assertFalse(node1.isContinue());
1412:       assertFalse(node1.isCast());
1413:       assertFalse(node1.isDo());
1414:       assertFalse(node1.isLabel());
1415:       assertFalse(node1.isVar());
1416:       assertFalse(node1.isParamList());
1417:       assertFalse(node1.isInstanceOf());
1418:       assertFalse(node1.isSetterDef());
1419:       assertFalse(node1.isStringKey());
1420:       assertEquals(4, node1.getCharno());
1421:       assertFalse(node1.isRegExp());
1422:       assertFalse(node1.isTry());
1423:       assertTrue(node1.isString());
1424:       assertFalse(node1.hasOneChild());
1425:       assertFalse(node1.isScript());
1426:       assertFalse(node1.isCase());
1427:       assertFalse(node1.isCatch());
1428:       assertFalse(node1.isWith());
1429:       assertFalse(node1.hasMoreThanOneChild());
1430:       assertFalse(node1.isFor());
1431:       assertFalse(node1.isBlock());
1432:       assertFalse(node1.isHook());
1433:       assertFalse(node1.isThis());
1434:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1435:       assertEquals(37, Node.OPT_ARG_NAME);
1436:       assertEquals(56, Node.CHANGE_TIME);
1437:       assertEquals(47, Node.IS_DISPATCHER);
1438:       assertEquals(32, Node.INCRDECR_PROP);
1439:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1440:       assertEquals(12, Node.COLUMN_BITS);
1441:       assertEquals(30, Node.VAR_ARGS_NAME);
1442:       assertEquals(2, Node.POST_FLAG);
1443:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1444:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1445:       assertEquals(53, Node.INPUT_ID);
1446:       assertEquals(57, Node.LAST_PROP);
1447:       assertEquals(49, Node.DIRECT_EVAL);
1448:       assertEquals(55, Node.INFERRED_FUNCTION);
1449:       assertEquals(57, Node.REFLECTED_OBJECT);
1450:       assertEquals(29, Node.JSDOC_INFO_PROP);
1451:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1452:       assertEquals(52, Node.LENGTH);
1453:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1454:       assertEquals(36, Node.QUOTED_PROP);
1455:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1456:       assertEquals(8, Node.FLAG_NO_THROWS);
1457:       assertEquals(39, Node.EMPTY_BLOCK);
1458:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1459:       assertEquals(48, Node.DIRECTIVES);
1460:       assertEquals(40, Node.ORIGINALNAME_PROP);
1461:       assertEquals(4095, Node.COLUMN_MASK);
1462:       assertEquals(43, Node.IS_CONSTANT_NAME);
1463:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1464:       assertEquals(54, Node.SLASH_V);
1465:       assertEquals(1, Node.DECR_FLAG);
1466:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1467:       assertEquals(46, Node.IS_NAMESPACE);
1468:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1469:       assertEquals(50, Node.FREE_CALL);
1470:       assertEquals(48, Node.DIRECTIVES);
1471:       assertEquals(8, Node.FLAG_NO_THROWS);
1472:       assertEquals(39, Node.EMPTY_BLOCK);
1473:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1474:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1475:       assertEquals(4095, Node.COLUMN_MASK);
1476:       assertEquals(55, Node.INFERRED_FUNCTION);
1477:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1478:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1479:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1480:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1481:       assertEquals(53, Node.INPUT_ID);
1482:       assertEquals(36, Node.QUOTED_PROP);
1483:       assertEquals(52, Node.LENGTH);
1484:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1485:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1486:       assertEquals(49, Node.DIRECT_EVAL);
1487:       assertEquals(57, Node.REFLECTED_OBJECT);
1488:       assertEquals(56, Node.CHANGE_TIME);
1489:       assertEquals(2, Node.POST_FLAG);
1490:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1491:       assertEquals(37, Node.OPT_ARG_NAME);
1492:       assertEquals(29, Node.JSDOC_INFO_PROP);
1493:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1494:       assertEquals(30, Node.VAR_ARGS_NAME);
1495:       assertEquals(1, Node.DECR_FLAG);
1496:       assertEquals(57, Node.LAST_PROP);
1497:       assertEquals(32, Node.INCRDECR_PROP);
1498:       assertEquals(47, Node.IS_DISPATCHER);
1499:       assertEquals(12, Node.COLUMN_BITS);
1500:       assertEquals(54, Node.SLASH_V);
1501:       assertEquals(40, Node.ORIGINALNAME_PROP);
1502:       assertEquals(50, Node.FREE_CALL);
1503:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1504:       assertEquals(46, Node.IS_NAMESPACE);
1505:       assertEquals(43, Node.IS_CONSTANT_NAME);
1506:   }
1507: }
RegularFileObject[/tmp/EvoSuite_102_1629223115628/com/google/javascript/rhino/Node_102_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:35 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_102_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_102_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_102_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.SimpleErrorReporter",
258:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
259:       "com.google.common.base.Joiner",
260:       "com.google.common.base.Preconditions",
261:       "com.google.common.base.Joiner$1",
262:       "com.google.common.collect.Collections2",
263:       "com.google.common.base.Joiner$MapJoiner",
264:       "com.google.common.collect.Maps",
265:       "com.google.common.collect.AbstractMultimap",
266:       "com.google.common.collect.AbstractMapBasedMultimap",
267:       "com.google.common.collect.AbstractSetMultimap",
268:       "com.google.common.collect.LinkedHashMultimap",
269:       "com.google.common.collect.AbstractMapEntry",
270:       "com.google.common.collect.ImmutableEntry",
271:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
272:       "com.google.common.collect.AbstractListMultimap",
273:       "com.google.common.collect.ArrayListMultimap",
274:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
275:       "com.google.common.collect.ImmutableCollection",
276:       "com.google.common.collect.RegularImmutableList",
277:       "com.google.common.collect.ObjectArrays",
278:       "com.google.common.collect.ImmutableList",
279:       "com.google.javascript.rhino.jstype.ModificationVisitor",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
281:       "com.google.common.collect.ImmutableCollection$Builder",
282:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
283:       "com.google.common.collect.ImmutableList$Builder",
284:       "com.google.common.collect.UnmodifiableIterator",
285:       "com.google.common.collect.UnmodifiableListIterator",
286:       "com.google.common.collect.Iterators$1",
287:       "com.google.common.collect.Iterators$2",
288:       "com.google.common.collect.Iterators",
289:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
290:       "com.google.javascript.rhino.jstype.JSType$1",
291:       "com.google.javascript.rhino.jstype.JSType",
292:       "com.google.javascript.rhino.jstype.ObjectType",
293:       "com.google.javascript.rhino.jstype.ProxyObjectType",
294:       "com.google.javascript.rhino.jstype.TemplateType",
295:       "com.google.javascript.rhino.jstype.ValueType",
296:       "com.google.javascript.rhino.jstype.BooleanType",
297:       "com.google.javascript.rhino.jstype.NullType",
298:       "com.google.javascript.rhino.jstype.NumberType",
299:       "com.google.javascript.rhino.jstype.StringType",
300:       "com.google.javascript.rhino.jstype.UnknownType",
301:       "com.google.javascript.rhino.jstype.VoidType",
302:       "com.google.javascript.rhino.jstype.AllType",
303:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
304:       "com.google.common.collect.ImmutableMap",
305:       "com.google.common.collect.ImmutableBiMap",
306:       "com.google.common.collect.EmptyImmutableBiMap",
307:       "com.google.javascript.rhino.jstype.PropertyMap$1",
308:       "com.google.javascript.rhino.jstype.PropertyMap",
309:       "com.google.javascript.rhino.jstype.FunctionType",
310:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
311:       "com.google.javascript.rhino.Token",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.JSDocInfo",
330:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
331:       "com.google.common.collect.Sets",
332:       "com.google.common.base.Objects",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
339:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
340:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
341:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.common.collect.Platform",
349:       "com.google.common.collect.Iterables",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.NamedType",
359:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
360:       "com.google.javascript.rhino.jstype.JSType$2",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 17:58:35.894 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("change_time");
assertNotNull(node0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

node0.setCharno(0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

node0.setLength(1982);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

int int0 = node0.getChangeTime();
assertEquals(0, int0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

Node node1 = Node.newString("change_time", 6, 4);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertNotSame(node1, node0);
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(6, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(24580, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertEquals(4, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

boolean boolean0 = node0.isVoid();
assertFalse(node0.equals((Object)node1));
assertFalse(boolean0);
assertNotSame(node0, node1);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

node0.removeProp(31);
assertFalse(node0.equals((Object)node1));
assertNotSame(node0, node1);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

node1.setSourceFileForTesting("change_time");
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(6, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(24580, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertEquals(4, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

JSDocInfo jSDocInfo0 = node1.getJSDocInfo();
assertFalse(node1.equals((Object)node0));
assertNull(jSDocInfo0);
assertNotSame(node1, node0);
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(6, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(24580, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertEquals(4, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertNotSame(node0, node1);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

boolean boolean1 = node1.isVarArgs();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertNotSame(node1, node0);
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(6, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(24580, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertEquals(4, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

node0.setIsSyntheticBlock(false);
assertFalse(node0.equals((Object)node1));
assertNotSame(node0, node1);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

boolean boolean2 = node0.isEquivalentTo(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertTrue(boolean2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(6, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(24580, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertEquals(4, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);


[MASTER] 17:58:42.689 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_126_1629223122222/com/google/javascript/rhino/Node_126_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_126_1629223122222/com/google/javascript/rhino/Node_126_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:42.690 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:42.690 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:42.696 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1647
[MASTER] 17:58:42.698 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_126_1629223122222/com/google/javascript/rhino/Node_126_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:42 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.util.ArrayList;
16: import java.util.List;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_126_tmp__ESTest extends Node_126_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
27:       assertNotNull(simpleErrorReporter0);
28:       
29:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
30:       assertNotNull(jSTypeRegistry0);
31:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
32:       
33:       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
34:       assertNotNull(arrayList0);
35:       assertEquals(0, arrayList0.size());
36:       assertTrue(arrayList0.isEmpty());
37:       
38:       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
39:       assertNotNull(node0);
40:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
41:       assertEquals(0, arrayList0.size());
42:       assertTrue(arrayList0.isEmpty());
43:       assertFalse(node0.isCatch());
44:       assertFalse(node0.isDefaultCase());
45:       assertFalse(node0.isRegExp());
46:       assertEquals(0, node0.getChildCount());
47:       assertFalse(node0.isFunction());
48:       assertFalse(node0.isArrayLit());
49:       assertFalse(node0.isFor());
50:       assertFalse(node0.isTry());
51:       assertFalse(node0.isStringKey());
52:       assertFalse(node0.isDebugger());
53:       assertFalse(node0.isGetterDef());
54:       assertFalse(node0.isReturn());
55:       assertFalse(node0.isDo());
56:       assertFalse(node0.isAssignAdd());
57:       assertFalse(node0.isWhile());
58:       assertFalse(node0.isDec());
59:       assertFalse(node0.hasChildren());
60:       assertFalse(node0.isLabel());
61:       assertFalse(node0.isAssign());
62:       assertFalse(node0.isTypeOf());
63:       assertFalse(node0.isVar());
64:       assertFalse(node0.isGetElem());
65:       assertFalse(node0.isCall());
66:       assertFalse(node0.isNew());
67:       assertFalse(node0.isDelProp());
68:       assertFalse(node0.isVoid());
69:       assertFalse(node0.isName());
70:       assertEquals(83, node0.getType());
71:       assertFalse(node0.isTrue());
72:       assertFalse(node0.isNull());
73:       assertFalse(node0.isOr());
74:       assertFalse(node0.isAdd());
75:       assertFalse(node0.isEmpty());
76:       assertFalse(node0.isInstanceOf());
77:       assertFalse(node0.isAnd());
78:       assertFalse(node0.isComma());
79:       assertFalse(node0.isBreak());
80:       assertFalse(node0.isThis());
81:       assertFalse(node0.isExprResult());
82:       assertFalse(node0.isWith());
83:       assertFalse(node0.isFalse());
84:       assertFalse(node0.isCast());
85:       assertFalse(node0.hasOneChild());
86:       assertFalse(node0.isHook());
87:       assertFalse(node0.isLabelName());
88:       assertFalse(node0.isScript());
89:       assertFalse(node0.isSwitch());
90:       assertEquals((-1), node0.getSourcePosition());
91:       assertFalse(node0.isGetProp());
92:       assertEquals((-1), node0.getCharno());
93:       assertFalse(node0.isNot());
94:       assertFalse(node0.isString());
95:       assertFalse(node0.isObjectLit());
96:       assertFalse(node0.isNumber());
97:       assertTrue(node0.isParamList());
98:       assertFalse(node0.hasMoreThanOneChild());
99:       assertEquals((-1), node0.getLineno());
100:       assertFalse(node0.isCase());
101:       assertFalse(node0.isBlock());
102:       assertFalse(node0.isContinue());
103:       assertFalse(node0.isThrow());
104:       assertFalse(node0.isIf());
105:       assertFalse(node0.isNE());
106:       assertFalse(node0.isInc());
107:       assertFalse(node0.isSetterDef());
108:       assertFalse(node0.isIn());
109:       assertEquals(12, Node.COLUMN_BITS);
110:       assertEquals(46, Node.IS_NAMESPACE);
111:       assertEquals(49, Node.DIRECT_EVAL);
112:       assertEquals(32, Node.INCRDECR_PROP);
113:       assertEquals(15, Node.NO_SIDE_EFFECTS);
114:       assertEquals(1, Node.DECR_FLAG);
115:       assertEquals(37, Node.OPT_ARG_NAME);
116:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
117:       assertEquals(54, Node.SLASH_V);
118:       assertEquals(56, Node.CHANGE_TIME);
119:       assertEquals(52, Node.LENGTH);
120:       assertEquals(51, Node.STATIC_SOURCE_FILE);
121:       assertEquals(40, Node.ORIGINALNAME_PROP);
122:       assertEquals(29, Node.JSDOC_INFO_PROP);
123:       assertEquals(53, Node.INPUT_ID);
124:       assertEquals(2, Node.POST_FLAG);
125:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
126:       assertEquals(57, Node.LAST_PROP);
127:       assertEquals(30, Node.VAR_ARGS_NAME);
128:       assertEquals(47, Node.IS_DISPATCHER);
129:       assertEquals(55, Node.INFERRED_FUNCTION);
130:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
131:       assertEquals(4095, Node.COLUMN_MASK);
132:       assertEquals(48, Node.DIRECTIVES);
133:       assertEquals(8, Node.FLAG_NO_THROWS);
134:       assertEquals(39, Node.EMPTY_BLOCK);
135:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
136:       assertEquals(43, Node.IS_CONSTANT_NAME);
137:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
138:       assertEquals(50, Node.FREE_CALL);
139:       assertEquals(36, Node.QUOTED_PROP);
140:       assertEquals(57, Node.REFLECTED_OBJECT);
141:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
142:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
143:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
144:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
145:       
146:       Node node1 = new Node((-1), node0);
147:       assertFalse(node1.equals((Object)node0));
148:       assertNotNull(node1);
149:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
150:       assertEquals(0, arrayList0.size());
151:       assertTrue(arrayList0.isEmpty());
152:       assertFalse(node0.isCatch());
153:       assertFalse(node0.isDefaultCase());
154:       assertFalse(node0.isRegExp());
155:       assertEquals(0, node0.getChildCount());
156:       assertFalse(node0.isFunction());
157:       assertFalse(node0.isArrayLit());
158:       assertFalse(node0.isFor());
159:       assertFalse(node0.isTry());
160:       assertFalse(node0.isStringKey());
161:       assertFalse(node0.isDebugger());
162:       assertFalse(node0.isGetterDef());
163:       assertFalse(node0.isReturn());
164:       assertFalse(node0.isDo());
165:       assertFalse(node0.isAssignAdd());
166:       assertFalse(node0.isWhile());
167:       assertFalse(node0.isDec());
168:       assertFalse(node0.hasChildren());
169:       assertFalse(node0.isLabel());
170:       assertFalse(node0.isAssign());
171:       assertFalse(node0.isTypeOf());
172:       assertFalse(node0.isVar());
173:       assertFalse(node0.isGetElem());
174:       assertFalse(node0.isCall());
175:       assertFalse(node0.isNew());
176:       assertFalse(node0.isDelProp());
177:       assertFalse(node0.isVoid());
178:       assertFalse(node0.isName());
179:       assertEquals(83, node0.getType());
180:       assertFalse(node0.isTrue());
181:       assertFalse(node0.isNull());
182:       assertFalse(node0.isOr());
183:       assertFalse(node0.isAdd());
184:       assertFalse(node0.isEmpty());
185:       assertFalse(node0.isInstanceOf());
186:       assertFalse(node0.isAnd());
187:       assertFalse(node0.isComma());
188:       assertFalse(node0.isBreak());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.isExprResult());
191:       assertFalse(node0.isWith());
192:       assertFalse(node0.isFalse());
193:       assertFalse(node0.isCast());
194:       assertFalse(node0.hasOneChild());
195:       assertFalse(node0.isHook());
196:       assertFalse(node0.isLabelName());
197:       assertFalse(node0.isScript());
198:       assertFalse(node0.isSwitch());
199:       assertEquals((-1), node0.getSourcePosition());
200:       assertFalse(node0.isGetProp());
201:       assertEquals((-1), node0.getCharno());
202:       assertFalse(node0.isNot());
203:       assertFalse(node0.isString());
204:       assertFalse(node0.isObjectLit());
205:       assertFalse(node0.isNumber());
206:       assertTrue(node0.isParamList());
207:       assertFalse(node0.hasMoreThanOneChild());
208:       assertEquals((-1), node0.getLineno());
209:       assertFalse(node0.isCase());
210:       assertFalse(node0.isBlock());
211:       assertFalse(node0.isContinue());
212:       assertFalse(node0.isThrow());
213:       assertFalse(node0.isIf());
214:       assertFalse(node0.isNE());
215:       assertFalse(node0.isInc());
216:       assertFalse(node0.isSetterDef());
217:       assertFalse(node0.isIn());
218:       assertFalse(node1.isAnd());
219:       assertFalse(node1.isInstanceOf());
220:       assertFalse(node1.isGetProp());
221:       assertFalse(node1.isScript());
222:       assertFalse(node1.isNot());
223:       assertFalse(node1.isObjectLit());
224:       assertFalse(node1.isThrow());
225:       assertFalse(node1.isCast());
226:       assertFalse(node1.isLabelName());
227:       assertFalse(node1.isLabel());
228:       assertFalse(node1.isFalse());
229:       assertFalse(node1.isContinue());
230:       assertFalse(node1.isDo());
231:       assertFalse(node1.isAssignAdd());
232:       assertFalse(node1.isString());
233:       assertFalse(node1.isOr());
234:       assertEquals((-1), node1.getSourcePosition());
235:       assertFalse(node1.isCall());
236:       assertFalse(node1.isName());
237:       assertFalse(node1.isGetElem());
238:       assertFalse(node1.isDelProp());
239:       assertFalse(node1.isVoid());
240:       assertFalse(node1.isBreak());
241:       assertFalse(node1.isTypeOf());
242:       assertFalse(node1.isExprResult());
243:       assertFalse(node1.isWhile());
244:       assertFalse(node1.isAssign());
245:       assertTrue(node1.hasOneChild());
246:       assertFalse(node1.isReturn());
247:       assertFalse(node1.isDec());
248:       assertFalse(node1.isComma());
249:       assertFalse(node1.isCatch());
250:       assertFalse(node1.isNull());
251:       assertFalse(node1.isSetterDef());
252:       assertFalse(node1.isTrue());
253:       assertFalse(node1.isParamList());
254:       assertFalse(node1.isDebugger());
255:       assertFalse(node1.isVar());
256:       assertFalse(node1.isArrayLit());
257:       assertFalse(node1.isStringKey());
258:       assertFalse(node1.isAdd());
259:       assertFalse(node1.isEmpty());
260:       assertEquals((-1), node1.getType());
261:       assertFalse(node1.isNew());
262:       assertFalse(node1.isDefaultCase());
263:       assertFalse(node1.isFunction());
264:       assertFalse(node1.hasMoreThanOneChild());
265:       assertFalse(node1.isIn());
266:       assertFalse(node1.isCase());
267:       assertTrue(node1.hasChildren());
268:       assertEquals((-1), node1.getLineno());
269:       assertFalse(node1.isNE());
270:       assertFalse(node1.isSwitch());
271:       assertFalse(node1.isNumber());
272:       assertFalse(node1.isInc());
273:       assertFalse(node1.isIf());
274:       assertEquals((-1), node1.getCharno());
275:       assertFalse(node1.isGetterDef());
276:       assertFalse(node1.isHook());
277:       assertFalse(node1.isTry());
278:       assertFalse(node1.isRegExp());
279:       assertFalse(node1.isThis());
280:       assertFalse(node1.isFor());
281:       assertFalse(node1.isWith());
282:       assertFalse(node1.isBlock());
283:       assertEquals(1, node1.getChildCount());
284:       assertEquals(12, Node.COLUMN_BITS);
285:       assertEquals(46, Node.IS_NAMESPACE);
286:       assertEquals(49, Node.DIRECT_EVAL);
287:       assertEquals(32, Node.INCRDECR_PROP);
288:       assertEquals(15, Node.NO_SIDE_EFFECTS);
289:       assertEquals(1, Node.DECR_FLAG);
290:       assertEquals(37, Node.OPT_ARG_NAME);
291:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
292:       assertEquals(54, Node.SLASH_V);
293:       assertEquals(56, Node.CHANGE_TIME);
294:       assertEquals(52, Node.LENGTH);
295:       assertEquals(51, Node.STATIC_SOURCE_FILE);
296:       assertEquals(40, Node.ORIGINALNAME_PROP);
297:       assertEquals(29, Node.JSDOC_INFO_PROP);
298:       assertEquals(53, Node.INPUT_ID);
299:       assertEquals(2, Node.POST_FLAG);
300:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
301:       assertEquals(57, Node.LAST_PROP);
302:       assertEquals(30, Node.VAR_ARGS_NAME);
303:       assertEquals(47, Node.IS_DISPATCHER);
304:       assertEquals(55, Node.INFERRED_FUNCTION);
305:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
306:       assertEquals(4095, Node.COLUMN_MASK);
307:       assertEquals(48, Node.DIRECTIVES);
308:       assertEquals(8, Node.FLAG_NO_THROWS);
309:       assertEquals(39, Node.EMPTY_BLOCK);
310:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
311:       assertEquals(43, Node.IS_CONSTANT_NAME);
312:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
313:       assertEquals(50, Node.FREE_CALL);
314:       assertEquals(36, Node.QUOTED_PROP);
315:       assertEquals(57, Node.REFLECTED_OBJECT);
316:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
319:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
320:       assertEquals(12, Node.COLUMN_BITS);
321:       assertEquals(51, Node.STATIC_SOURCE_FILE);
322:       assertEquals(32, Node.INCRDECR_PROP);
323:       assertEquals(1, Node.DECR_FLAG);
324:       assertEquals(49, Node.DIRECT_EVAL);
325:       assertEquals(15, Node.NO_SIDE_EFFECTS);
326:       assertEquals(2, Node.POST_FLAG);
327:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
328:       assertEquals(57, Node.LAST_PROP);
329:       assertEquals(30, Node.VAR_ARGS_NAME);
330:       assertEquals(47, Node.IS_DISPATCHER);
331:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
332:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
333:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
334:       assertEquals(29, Node.JSDOC_INFO_PROP);
335:       assertEquals(52, Node.LENGTH);
336:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
337:       assertEquals(53, Node.INPUT_ID);
338:       assertEquals(37, Node.OPT_ARG_NAME);
339:       assertEquals(56, Node.CHANGE_TIME);
340:       assertEquals(36, Node.QUOTED_PROP);
341:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
342:       assertEquals(48, Node.DIRECTIVES);
343:       assertEquals(8, Node.FLAG_NO_THROWS);
344:       assertEquals(57, Node.REFLECTED_OBJECT);
345:       assertEquals(55, Node.INFERRED_FUNCTION);
346:       assertEquals(4095, Node.COLUMN_MASK);
347:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
348:       assertEquals(39, Node.EMPTY_BLOCK);
349:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
350:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
351:       assertEquals(40, Node.ORIGINALNAME_PROP);
352:       assertEquals(43, Node.IS_CONSTANT_NAME);
353:       assertEquals(50, Node.FREE_CALL);
354:       assertEquals(46, Node.IS_NAMESPACE);
355:       assertEquals(54, Node.SLASH_V);
356:       
357:       node0.addChildrenToFront(node1);
358:       assertFalse(node0.equals((Object)node1));
359:       assertFalse(node1.equals((Object)node0));
360:       assertNotSame(node0, node1);
361:       assertNotSame(node1, node0);
362:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
363:       assertEquals(0, arrayList0.size());
364:       assertTrue(arrayList0.isEmpty());
365:       assertFalse(node0.isCatch());
366:       assertFalse(node0.isDefaultCase());
367:       assertFalse(node0.isRegExp());
368:       assertFalse(node0.isFunction());
369:       assertFalse(node0.isArrayLit());
370:       assertFalse(node0.isFor());
371:       assertFalse(node0.isTry());
372:       assertFalse(node0.isStringKey());
373:       assertFalse(node0.isDebugger());
374:       assertFalse(node0.isGetterDef());
375:       assertFalse(node0.isReturn());
376:       assertFalse(node0.isDo());
377:       assertFalse(node0.isAssignAdd());
378:       assertFalse(node0.isWhile());
379:       assertFalse(node0.isDec());
380:       assertTrue(node0.hasOneChild());
381:       assertFalse(node0.isLabel());
382:       assertFalse(node0.isAssign());
383:       assertFalse(node0.isTypeOf());
384:       assertFalse(node0.isVar());
385:       assertFalse(node0.isGetElem());
386:       assertFalse(node0.isCall());
387:       assertFalse(node0.isNew());
388:       assertFalse(node0.isDelProp());
389:       assertFalse(node0.isVoid());
390:       assertFalse(node0.isName());
391:       assertEquals(83, node0.getType());
392:       assertFalse(node0.isTrue());
393:       assertFalse(node0.isNull());
394:       assertFalse(node0.isOr());
395:       assertFalse(node0.isAdd());
396:       assertFalse(node0.isEmpty());
397:       assertFalse(node0.isInstanceOf());
398:       assertFalse(node0.isAnd());
399:       assertFalse(node0.isComma());
400:       assertFalse(node0.isBreak());
401:       assertFalse(node0.isThis());
402:       assertFalse(node0.isExprResult());
403:       assertFalse(node0.isWith());
404:       assertFalse(node0.isFalse());
405:       assertFalse(node0.isCast());
406:       assertFalse(node0.isHook());
407:       assertFalse(node0.isLabelName());
408:       assertFalse(node0.isScript());
409:       assertFalse(node0.isSwitch());
410:       assertEquals((-1), node0.getSourcePosition());
411:       assertFalse(node0.isGetProp());
412:       assertEquals((-1), node0.getCharno());
413:       assertFalse(node0.isNot());
414:       assertFalse(node0.isString());
415:       assertFalse(node0.isObjectLit());
416:       assertFalse(node0.isNumber());
417:       assertTrue(node0.isParamList());
418:       assertFalse(node0.hasMoreThanOneChild());
419:       assertEquals((-1), node0.getLineno());
420:       assertFalse(node0.isCase());
421:       assertFalse(node0.isBlock());
422:       assertTrue(node0.hasChildren());
423:       assertEquals(1, node0.getChildCount());
424:       assertFalse(node0.isContinue());
425:       assertFalse(node0.isThrow());
426:       assertFalse(node0.isIf());
427:       assertFalse(node0.isNE());
428:       assertFalse(node0.isInc());
429:       assertFalse(node0.isSetterDef());
430:       assertFalse(node0.isIn());
431:       assertFalse(node1.isAnd());
432:       assertFalse(node1.isInstanceOf());
433:       assertFalse(node1.isGetProp());
434:       assertFalse(node1.isScript());
435:       assertFalse(node1.isNot());
436:       assertFalse(node1.isObjectLit());
437:       assertFalse(node1.isThrow());
438:       assertFalse(node1.isCast());
439:       assertFalse(node1.isLabelName());
440:       assertFalse(node1.isLabel());
441:       assertFalse(node1.isFalse());
442:       assertFalse(node1.isContinue());
443:       assertFalse(node1.isDo());
444:       assertFalse(node1.isAssignAdd());
445:       assertFalse(node1.isString());
446:       assertFalse(node1.isOr());
447:       assertEquals((-1), node1.getSourcePosition());
448:       assertFalse(node1.isCall());
449:       assertFalse(node1.isName());
450:       assertFalse(node1.isGetElem());
451:       assertFalse(node1.isDelProp());
452:       assertFalse(node1.isVoid());
453:       assertFalse(node1.isBreak());
454:       assertFalse(node1.isTypeOf());
455:       assertFalse(node1.isExprResult());
456:       assertFalse(node1.isWhile());
457:       assertFalse(node1.isAssign());
458:       assertTrue(node1.hasOneChild());
459:       assertFalse(node1.isReturn());
460:       assertFalse(node1.isDec());
461:       assertFalse(node1.isComma());
462:       assertFalse(node1.isCatch());
463:       assertFalse(node1.isNull());
464:       assertFalse(node1.isSetterDef());
465:       assertFalse(node1.isTrue());
466:       assertFalse(node1.isParamList());
467:       assertFalse(node1.isDebugger());
468:       assertFalse(node1.isVar());
469:       assertFalse(node1.isArrayLit());
470:       assertFalse(node1.isStringKey());
471:       assertFalse(node1.isAdd());
472:       assertFalse(node1.isEmpty());
473:       assertEquals((-1), node1.getType());
474:       assertFalse(node1.isNew());
475:       assertFalse(node1.isDefaultCase());
476:       assertFalse(node1.isFunction());
477:       assertFalse(node1.hasMoreThanOneChild());
478:       assertFalse(node1.isIn());
479:       assertFalse(node1.isCase());
480:       assertTrue(node1.hasChildren());
481:       assertEquals((-1), node1.getLineno());
482:       assertFalse(node1.isNE());
483:       assertFalse(node1.isSwitch());
484:       assertFalse(node1.isNumber());
485:       assertFalse(node1.isInc());
486:       assertFalse(node1.isIf());
487:       assertEquals((-1), node1.getCharno());
488:       assertFalse(node1.isGetterDef());
489:       assertFalse(node1.isHook());
490:       assertFalse(node1.isTry());
491:       assertFalse(node1.isRegExp());
492:       assertFalse(node1.isThis());
493:       assertFalse(node1.isFor());
494:       assertFalse(node1.isWith());
495:       assertFalse(node1.isBlock());
496:       assertEquals(1, node1.getChildCount());
497:       assertEquals(12, Node.COLUMN_BITS);
498:       assertEquals(46, Node.IS_NAMESPACE);
499:       assertEquals(49, Node.DIRECT_EVAL);
500:       assertEquals(32, Node.INCRDECR_PROP);
501:       assertEquals(15, Node.NO_SIDE_EFFECTS);
502:       assertEquals(1, Node.DECR_FLAG);
503:       assertEquals(37, Node.OPT_ARG_NAME);
504:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
505:       assertEquals(54, Node.SLASH_V);
506:       assertEquals(56, Node.CHANGE_TIME);
507:       assertEquals(52, Node.LENGTH);
508:       assertEquals(51, Node.STATIC_SOURCE_FILE);
509:       assertEquals(40, Node.ORIGINALNAME_PROP);
510:       assertEquals(29, Node.JSDOC_INFO_PROP);
511:       assertEquals(53, Node.INPUT_ID);
512:       assertEquals(2, Node.POST_FLAG);
513:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
514:       assertEquals(57, Node.LAST_PROP);
515:       assertEquals(30, Node.VAR_ARGS_NAME);
516:       assertEquals(47, Node.IS_DISPATCHER);
517:       assertEquals(55, Node.INFERRED_FUNCTION);
518:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
519:       assertEquals(4095, Node.COLUMN_MASK);
520:       assertEquals(48, Node.DIRECTIVES);
521:       assertEquals(8, Node.FLAG_NO_THROWS);
522:       assertEquals(39, Node.EMPTY_BLOCK);
523:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
524:       assertEquals(43, Node.IS_CONSTANT_NAME);
525:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
526:       assertEquals(50, Node.FREE_CALL);
527:       assertEquals(36, Node.QUOTED_PROP);
528:       assertEquals(57, Node.REFLECTED_OBJECT);
529:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
530:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
531:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
532:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
533:       assertEquals(12, Node.COLUMN_BITS);
534:       assertEquals(51, Node.STATIC_SOURCE_FILE);
535:       assertEquals(32, Node.INCRDECR_PROP);
536:       assertEquals(1, Node.DECR_FLAG);
537:       assertEquals(49, Node.DIRECT_EVAL);
538:       assertEquals(15, Node.NO_SIDE_EFFECTS);
539:       assertEquals(2, Node.POST_FLAG);
540:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
541:       assertEquals(57, Node.LAST_PROP);
542:       assertEquals(30, Node.VAR_ARGS_NAME);
543:       assertEquals(47, Node.IS_DISPATCHER);
544:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
545:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
546:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
547:       assertEquals(29, Node.JSDOC_INFO_PROP);
548:       assertEquals(52, Node.LENGTH);
549:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
550:       assertEquals(53, Node.INPUT_ID);
551:       assertEquals(37, Node.OPT_ARG_NAME);
552:       assertEquals(56, Node.CHANGE_TIME);
553:       assertEquals(36, Node.QUOTED_PROP);
554:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
555:       assertEquals(48, Node.DIRECTIVES);
556:       assertEquals(8, Node.FLAG_NO_THROWS);
557:       assertEquals(57, Node.REFLECTED_OBJECT);
558:       assertEquals(55, Node.INFERRED_FUNCTION);
559:       assertEquals(4095, Node.COLUMN_MASK);
560:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
561:       assertEquals(39, Node.EMPTY_BLOCK);
562:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
563:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
564:       assertEquals(40, Node.ORIGINALNAME_PROP);
565:       assertEquals(43, Node.IS_CONSTANT_NAME);
566:       assertEquals(50, Node.FREE_CALL);
567:       assertEquals(46, Node.IS_NAMESPACE);
568:       assertEquals(54, Node.SLASH_V);
569:       
570:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
571:       assertFalse(node0.equals((Object)node1));
572:       assertFalse(node1.equals((Object)node0));
573:       assertNotNull(node_NodeMismatch0);
574:       assertNotSame(node0, node1);
575:       assertNotSame(node1, node0);
576:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
577:       assertEquals(0, arrayList0.size());
578:       assertTrue(arrayList0.isEmpty());
579:       assertFalse(node0.isCatch());
580:       assertFalse(node0.isDefaultCase());
581:       assertFalse(node0.isRegExp());
582:       assertFalse(node0.isFunction());
583:       assertFalse(node0.isArrayLit());
584:       assertFalse(node0.isFor());
585:       assertFalse(node0.isTry());
586:       assertFalse(node0.isStringKey());
587:       assertFalse(node0.isDebugger());
588:       assertFalse(node0.isGetterDef());
589:       assertFalse(node0.isReturn());
590:       assertFalse(node0.isDo());
591:       assertFalse(node0.isAssignAdd());
592:       assertFalse(node0.isWhile());
593:       assertFalse(node0.isDec());
594:       assertTrue(node0.hasOneChild());
595:       assertFalse(node0.isLabel());
596:       assertFalse(node0.isAssign());
597:       assertFalse(node0.isTypeOf());
598:       assertFalse(node0.isVar());
599:       assertFalse(node0.isGetElem());
600:       assertFalse(node0.isCall());
601:       assertFalse(node0.isNew());
602:       assertFalse(node0.isDelProp());
603:       assertFalse(node0.isVoid());
604:       assertFalse(node0.isName());
605:       assertEquals(83, node0.getType());
606:       assertFalse(node0.isTrue());
607:       assertFalse(node0.isNull());
608:       assertFalse(node0.isOr());
609:       assertFalse(node0.isAdd());
610:       assertFalse(node0.isEmpty());
611:       assertFalse(node0.isInstanceOf());
612:       assertFalse(node0.isAnd());
613:       assertFalse(node0.isComma());
614:       assertFalse(node0.isBreak());
615:       assertFalse(node0.isThis());
616:       assertFalse(node0.isExprResult());
617:       assertFalse(node0.isWith());
618:       assertFalse(node0.isFalse());
619:       assertFalse(node0.isCast());
620:       assertFalse(node0.isHook());
621:       assertFalse(node0.isLabelName());
622:       assertFalse(node0.isScript());
623:       assertFalse(node0.isSwitch());
624:       assertEquals((-1), node0.getSourcePosition());
625:       assertFalse(node0.isGetProp());
626:       assertEquals((-1), node0.getCharno());
627:       assertFalse(node0.isNot());
628:       assertFalse(node0.isString());
629:       assertFalse(node0.isObjectLit());
630:       assertFalse(node0.isNumber());
631:       assertTrue(node0.isParamList());
632:       assertFalse(node0.hasMoreThanOneChild());
633:       assertEquals((-1), node0.getLineno());
634:       assertFalse(node0.isCase());
635:       assertFalse(node0.isBlock());
636:       assertTrue(node0.hasChildren());
637:       assertEquals(1, node0.getChildCount());
638:       assertFalse(node0.isContinue());
639:       assertFalse(node0.isThrow());
640:       assertFalse(node0.isIf());
641:       assertFalse(node0.isNE());
642:       assertFalse(node0.isInc());
643:       assertFalse(node0.isSetterDef());
644:       assertFalse(node0.isIn());
645:       assertFalse(node1.isAnd());
646:       assertFalse(node1.isInstanceOf());
647:       assertFalse(node1.isGetProp());
648:       assertFalse(node1.isScript());
649:       assertFalse(node1.isNot());
650:       assertFalse(node1.isObjectLit());
651:       assertFalse(node1.isThrow());
652:       assertFalse(node1.isCast());
653:       assertFalse(node1.isLabelName());
654:       assertFalse(node1.isLabel());
655:       assertFalse(node1.isFalse());
656:       assertFalse(node1.isContinue());
657:       assertFalse(node1.isDo());
658:       assertFalse(node1.isAssignAdd());
659:       assertFalse(node1.isString());
660:       assertFalse(node1.isOr());
661:       assertEquals((-1), node1.getSourcePosition());
662:       assertFalse(node1.isCall());
663:       assertFalse(node1.isName());
664:       assertFalse(node1.isGetElem());
665:       assertFalse(node1.isDelProp());
666:       assertFalse(node1.isVoid());
667:       assertFalse(node1.isBreak());
668:       assertFalse(node1.isTypeOf());
669:       assertFalse(node1.isExprResult());
670:       assertFalse(node1.isWhile());
671:       assertFalse(node1.isAssign());
672:       assertTrue(node1.hasOneChild());
673:       assertFalse(node1.isReturn());
674:       assertFalse(node1.isDec());
675:       assertFalse(node1.isComma());
676:       assertFalse(node1.isCatch());
677:       assertFalse(node1.isNull());
678:       assertFalse(node1.isSetterDef());
679:       assertFalse(node1.isTrue());
680:       assertFalse(node1.isParamList());
681:       assertFalse(node1.isDebugger());
682:       assertFalse(node1.isVar());
683:       assertFalse(node1.isArrayLit());
684:       assertFalse(node1.isStringKey());
685:       assertFalse(node1.isAdd());
686:       assertFalse(node1.isEmpty());
687:       assertEquals((-1), node1.getType());
688:       assertFalse(node1.isNew());
689:       assertFalse(node1.isDefaultCase());
690:       assertFalse(node1.isFunction());
691:       assertFalse(node1.hasMoreThanOneChild());
692:       assertFalse(node1.isIn());
693:       assertFalse(node1.isCase());
694:       assertTrue(node1.hasChildren());
695:       assertEquals((-1), node1.getLineno());
696:       assertFalse(node1.isNE());
697:       assertFalse(node1.isSwitch());
698:       assertFalse(node1.isNumber());
699:       assertFalse(node1.isInc());
700:       assertFalse(node1.isIf());
701:       assertEquals((-1), node1.getCharno());
702:       assertFalse(node1.isGetterDef());
703:       assertFalse(node1.isHook());
704:       assertFalse(node1.isTry());
705:       assertFalse(node1.isRegExp());
706:       assertFalse(node1.isThis());
707:       assertFalse(node1.isFor());
708:       assertFalse(node1.isWith());
709:       assertFalse(node1.isBlock());
710:       assertEquals(1, node1.getChildCount());
711:       assertEquals(12, Node.COLUMN_BITS);
712:       assertEquals(46, Node.IS_NAMESPACE);
713:       assertEquals(49, Node.DIRECT_EVAL);
714:       assertEquals(32, Node.INCRDECR_PROP);
715:       assertEquals(15, Node.NO_SIDE_EFFECTS);
716:       assertEquals(1, Node.DECR_FLAG);
717:       assertEquals(37, Node.OPT_ARG_NAME);
718:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
719:       assertEquals(54, Node.SLASH_V);
720:       assertEquals(56, Node.CHANGE_TIME);
721:       assertEquals(52, Node.LENGTH);
722:       assertEquals(51, Node.STATIC_SOURCE_FILE);
723:       assertEquals(40, Node.ORIGINALNAME_PROP);
724:       assertEquals(29, Node.JSDOC_INFO_PROP);
725:       assertEquals(53, Node.INPUT_ID);
726:       assertEquals(2, Node.POST_FLAG);
727:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
728:       assertEquals(57, Node.LAST_PROP);
729:       assertEquals(30, Node.VAR_ARGS_NAME);
730:       assertEquals(47, Node.IS_DISPATCHER);
731:       assertEquals(55, Node.INFERRED_FUNCTION);
732:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
733:       assertEquals(4095, Node.COLUMN_MASK);
734:       assertEquals(48, Node.DIRECTIVES);
735:       assertEquals(8, Node.FLAG_NO_THROWS);
736:       assertEquals(39, Node.EMPTY_BLOCK);
737:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
738:       assertEquals(43, Node.IS_CONSTANT_NAME);
739:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
740:       assertEquals(50, Node.FREE_CALL);
741:       assertEquals(36, Node.QUOTED_PROP);
742:       assertEquals(57, Node.REFLECTED_OBJECT);
743:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
744:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
745:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
746:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
747:       assertEquals(12, Node.COLUMN_BITS);
748:       assertEquals(51, Node.STATIC_SOURCE_FILE);
749:       assertEquals(32, Node.INCRDECR_PROP);
750:       assertEquals(1, Node.DECR_FLAG);
751:       assertEquals(49, Node.DIRECT_EVAL);
752:       assertEquals(15, Node.NO_SIDE_EFFECTS);
753:       assertEquals(2, Node.POST_FLAG);
754:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
755:       assertEquals(57, Node.LAST_PROP);
756:       assertEquals(30, Node.VAR_ARGS_NAME);
757:       assertEquals(47, Node.IS_DISPATCHER);
758:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
759:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
760:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
761:       assertEquals(29, Node.JSDOC_INFO_PROP);
762:       assertEquals(52, Node.LENGTH);
763:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
764:       assertEquals(53, Node.INPUT_ID);
765:       assertEquals(37, Node.OPT_ARG_NAME);
766:       assertEquals(56, Node.CHANGE_TIME);
767:       assertEquals(36, Node.QUOTED_PROP);
768:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
769:       assertEquals(48, Node.DIRECTIVES);
770:       assertEquals(8, Node.FLAG_NO_THROWS);
771:       assertEquals(57, Node.REFLECTED_OBJECT);
772:       assertEquals(55, Node.INFERRED_FUNCTION);
773:       assertEquals(4095, Node.COLUMN_MASK);
774:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
775:       assertEquals(39, Node.EMPTY_BLOCK);
776:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
777:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
778:       assertEquals(40, Node.ORIGINALNAME_PROP);
779:       assertEquals(43, Node.IS_CONSTANT_NAME);
780:       assertEquals(50, Node.FREE_CALL);
781:       assertEquals(46, Node.IS_NAMESPACE);
782:       assertEquals(54, Node.SLASH_V);
783:       
784:       Node node2 = node1.useSourceInfoIfMissingFrom(node0);
785:       assertFalse(node0.equals((Object)node1));
786:       assertFalse(node1.equals((Object)node0));
787:       assertFalse(node2.equals((Object)node0));
788:       assertNotNull(node2);
789:       assertNotSame(node0, node2);
790:       assertNotSame(node0, node1);
791:       assertNotSame(node1, node0);
792:       assertSame(node1, node2);
793:       assertSame(node2, node1);
794:       assertNotSame(node2, node0);
795:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
796:       assertEquals(0, arrayList0.size());
797:       assertTrue(arrayList0.isEmpty());
798:       assertFalse(node0.isCatch());
799:       assertFalse(node0.isDefaultCase());
800:       assertFalse(node0.isRegExp());
801:       assertFalse(node0.isFunction());
802:       assertFalse(node0.isArrayLit());
803:       assertFalse(node0.isFor());
804:       assertFalse(node0.isTry());
805:       assertFalse(node0.isStringKey());
806:       assertFalse(node0.isDebugger());
807:       assertFalse(node0.isGetterDef());
808:       assertFalse(node0.isReturn());
809:       assertFalse(node0.isDo());
810:       assertFalse(node0.isAssignAdd());
811:       assertFalse(node0.isWhile());
812:       assertFalse(node0.isDec());
813:       assertTrue(node0.hasOneChild());
814:       assertFalse(node0.isLabel());
815:       assertFalse(node0.isAssign());
816:       assertFalse(node0.isTypeOf());
817:       assertFalse(node0.isVar());
818:       assertFalse(node0.isGetElem());
819:       assertFalse(node0.isCall());
820:       assertFalse(node0.isNew());
821:       assertFalse(node0.isDelProp());
822:       assertFalse(node0.isVoid());
823:       assertFalse(node0.isName());
824:       assertEquals(83, node0.getType());
825:       assertFalse(node0.isTrue());
826:       assertFalse(node0.isNull());
827:       assertFalse(node0.isOr());
828:       assertFalse(node0.isAdd());
829:       assertFalse(node0.isEmpty());
830:       assertFalse(node0.isInstanceOf());
831:       assertFalse(node0.isAnd());
832:       assertFalse(node0.isComma());
833:       assertFalse(node0.isBreak());
834:       assertFalse(node0.isThis());
835:       assertFalse(node0.isExprResult());
836:       assertFalse(node0.isWith());
837:       assertFalse(node0.isFalse());
838:       assertFalse(node0.isCast());
839:       assertFalse(node0.isHook());
840:       assertFalse(node0.isLabelName());
841:       assertFalse(node0.isScript());
842:       assertFalse(node0.isSwitch());
843:       assertEquals((-1), node0.getSourcePosition());
844:       assertFalse(node0.isGetProp());
845:       assertEquals((-1), node0.getCharno());
846:       assertFalse(node0.isNot());
847:       assertFalse(node0.isString());
848:       assertFalse(node0.isObjectLit());
849:       assertFalse(node0.isNumber());
850:       assertTrue(node0.isParamList());
851:       assertFalse(node0.hasMoreThanOneChild());
852:       assertEquals((-1), node0.getLineno());
853:       assertFalse(node0.isCase());
854:       assertFalse(node0.isBlock());
855:       assertTrue(node0.hasChildren());
856:       assertEquals(1, node0.getChildCount());
857:       assertFalse(node0.isContinue());
858:       assertFalse(node0.isThrow());
859:       assertFalse(node0.isIf());
860:       assertFalse(node0.isNE());
861:       assertFalse(node0.isInc());
862:       assertFalse(node0.isSetterDef());
863:       assertFalse(node0.isIn());
864:       assertFalse(node1.isAnd());
865:       assertFalse(node1.isInstanceOf());
866:       assertFalse(node1.isGetProp());
867:       assertFalse(node1.isScript());
868:       assertFalse(node1.isNot());
869:       assertFalse(node1.isObjectLit());
870:       assertFalse(node1.isThrow());
871:       assertFalse(node1.isCast());
872:       assertFalse(node1.isLabelName());
873:       assertFalse(node1.isLabel());
874:       assertFalse(node1.isFalse());
875:       assertFalse(node1.isContinue());
876:       assertFalse(node1.isDo());
877:       assertFalse(node1.isAssignAdd());
878:       assertFalse(node1.isString());
879:       assertFalse(node1.isOr());
880:       assertEquals((-1), node1.getSourcePosition());
881:       assertFalse(node1.isCall());
882:       assertFalse(node1.isName());
883:       assertFalse(node1.isGetElem());
884:       assertFalse(node1.isDelProp());
885:       assertFalse(node1.isVoid());
886:       assertFalse(node1.isBreak());
887:       assertFalse(node1.isTypeOf());
888:       assertFalse(node1.isExprResult());
889:       assertFalse(node1.isWhile());
890:       assertFalse(node1.isAssign());
891:       assertTrue(node1.hasOneChild());
892:       assertFalse(node1.isReturn());
893:       assertFalse(node1.isDec());
894:       assertFalse(node1.isComma());
895:       assertFalse(node1.isCatch());
896:       assertFalse(node1.isNull());
897:       assertFalse(node1.isSetterDef());
898:       assertFalse(node1.isTrue());
899:       assertFalse(node1.isParamList());
900:       assertFalse(node1.isDebugger());
901:       assertFalse(node1.isVar());
902:       assertFalse(node1.isArrayLit());
903:       assertFalse(node1.isStringKey());
904:       assertFalse(node1.isAdd());
905:       assertFalse(node1.isEmpty());
906:       assertEquals((-1), node1.getType());
907:       assertFalse(node1.isNew());
908:       assertFalse(node1.isDefaultCase());
909:       assertFalse(node1.isFunction());
910:       assertFalse(node1.hasMoreThanOneChild());
911:       assertFalse(node1.isIn());
912:       assertFalse(node1.isCase());
913:       assertTrue(node1.hasChildren());
914:       assertEquals((-1), node1.getLineno());
915:       assertFalse(node1.isNE());
916:       assertFalse(node1.isSwitch());
917:       assertFalse(node1.isNumber());
918:       assertFalse(node1.isInc());
919:       assertFalse(node1.isIf());
920:       assertEquals((-1), node1.getCharno());
921:       assertFalse(node1.isGetterDef());
922:       assertFalse(node1.isHook());
923:       assertFalse(node1.isTry());
924:       assertFalse(node1.isRegExp());
925:       assertFalse(node1.isThis());
926:       assertFalse(node1.isFor());
927:       assertFalse(node1.isWith());
928:       assertFalse(node1.isBlock());
929:       assertEquals(1, node1.getChildCount());
930:       assertFalse(node2.isInstanceOf());
931:       assertFalse(node2.isObjectLit());
932:       assertFalse(node2.isAnd());
933:       assertFalse(node2.isNot());
934:       assertFalse(node2.isThis());
935:       assertFalse(node2.isComma());
936:       assertFalse(node2.isWith());
937:       assertFalse(node2.isExprResult());
938:       assertFalse(node2.isBreak());
939:       assertFalse(node2.isCast());
940:       assertFalse(node2.isFalse());
941:       assertFalse(node2.isThrow());
942:       assertFalse(node2.isInc());
943:       assertFalse(node2.isIn());
944:       assertFalse(node2.hasMoreThanOneChild());
945:       assertFalse(node2.isAssignAdd());
946:       assertEquals(1, node2.getChildCount());
947:       assertFalse(node2.isLabel());
948:       assertFalse(node2.isNE());
949:       assertFalse(node2.isSwitch());
950:       assertFalse(node2.isIf());
951:       assertFalse(node2.isLabelName());
952:       assertTrue(node2.hasChildren());
953:       assertEquals((-1), node2.getLineno());
954:       assertFalse(node2.isArrayLit());
955:       assertFalse(node2.isHook());
956:       assertFalse(node2.isBlock());
957:       assertFalse(node2.isStringKey());
958:       assertFalse(node2.isFor());
959:       assertEquals((-1), node2.getCharno());
960:       assertFalse(node2.isNumber());
961:       assertFalse(node2.isScript());
962:       assertFalse(node2.isGetterDef());
963:       assertFalse(node2.isCase());
964:       assertFalse(node2.isTry());
965:       assertFalse(node2.isCatch());
966:       assertFalse(node2.isRegExp());
967:       assertFalse(node2.isNull());
968:       assertFalse(node2.isParamList());
969:       assertFalse(node2.isFunction());
970:       assertFalse(node2.isName());
971:       assertFalse(node2.isVoid());
972:       assertFalse(node2.isCall());
973:       assertEquals((-1), node2.getType());
974:       assertFalse(node2.isVar());
975:       assertFalse(node2.isTrue());
976:       assertFalse(node2.isDefaultCase());
977:       assertFalse(node2.isNew());
978:       assertFalse(node2.isDo());
979:       assertFalse(node2.isAdd());
980:       assertFalse(node2.isEmpty());
981:       assertFalse(node2.isSetterDef());
982:       assertFalse(node2.isContinue());
983:       assertFalse(node2.isOr());
984:       assertFalse(node2.isReturn());
985:       assertFalse(node2.isDec());
986:       assertFalse(node2.isTypeOf());
987:       assertFalse(node2.isDelProp());
988:       assertFalse(node2.isGetElem());
989:       assertFalse(node2.isAssign());
990:       assertTrue(node2.hasOneChild());
991:       assertFalse(node2.isDebugger());
992:       assertEquals((-1), node2.getSourcePosition());
993:       assertFalse(node2.isWhile());
994:       assertFalse(node2.isString());
995:       assertFalse(node2.isGetProp());
996:       assertEquals(12, Node.COLUMN_BITS);
997:       assertEquals(46, Node.IS_NAMESPACE);
998:       assertEquals(49, Node.DIRECT_EVAL);
999:       assertEquals(32, Node.INCRDECR_PROP);
1000:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1001:       assertEquals(1, Node.DECR_FLAG);
1002:       assertEquals(37, Node.OPT_ARG_NAME);
1003:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1004:       assertEquals(54, Node.SLASH_V);
1005:       assertEquals(56, Node.CHANGE_TIME);
1006:       assertEquals(52, Node.LENGTH);
1007:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1008:       assertEquals(40, Node.ORIGINALNAME_PROP);
1009:       assertEquals(29, Node.JSDOC_INFO_PROP);
1010:       assertEquals(53, Node.INPUT_ID);
1011:       assertEquals(2, Node.POST_FLAG);
1012:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1013:       assertEquals(57, Node.LAST_PROP);
1014:       assertEquals(30, Node.VAR_ARGS_NAME);
1015:       assertEquals(47, Node.IS_DISPATCHER);
1016:       assertEquals(55, Node.INFERRED_FUNCTION);
1017:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1018:       assertEquals(4095, Node.COLUMN_MASK);
1019:       assertEquals(48, Node.DIRECTIVES);
1020:       assertEquals(8, Node.FLAG_NO_THROWS);
1021:       assertEquals(39, Node.EMPTY_BLOCK);
1022:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1023:       assertEquals(43, Node.IS_CONSTANT_NAME);
1024:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1025:       assertEquals(50, Node.FREE_CALL);
1026:       assertEquals(36, Node.QUOTED_PROP);
1027:       assertEquals(57, Node.REFLECTED_OBJECT);
1028:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1029:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1030:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1031:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1032:       assertEquals(12, Node.COLUMN_BITS);
1033:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1034:       assertEquals(32, Node.INCRDECR_PROP);
1035:       assertEquals(1, Node.DECR_FLAG);
1036:       assertEquals(49, Node.DIRECT_EVAL);
1037:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1038:       assertEquals(2, Node.POST_FLAG);
1039:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1040:       assertEquals(57, Node.LAST_PROP);
1041:       assertEquals(30, Node.VAR_ARGS_NAME);
1042:       assertEquals(47, Node.IS_DISPATCHER);
1043:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1044:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1045:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1046:       assertEquals(29, Node.JSDOC_INFO_PROP);
1047:       assertEquals(52, Node.LENGTH);
1048:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1049:       assertEquals(53, Node.INPUT_ID);
1050:       assertEquals(37, Node.OPT_ARG_NAME);
1051:       assertEquals(56, Node.CHANGE_TIME);
1052:       assertEquals(36, Node.QUOTED_PROP);
1053:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1054:       assertEquals(48, Node.DIRECTIVES);
1055:       assertEquals(8, Node.FLAG_NO_THROWS);
1056:       assertEquals(57, Node.REFLECTED_OBJECT);
1057:       assertEquals(55, Node.INFERRED_FUNCTION);
1058:       assertEquals(4095, Node.COLUMN_MASK);
1059:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1060:       assertEquals(39, Node.EMPTY_BLOCK);
1061:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1062:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1063:       assertEquals(40, Node.ORIGINALNAME_PROP);
1064:       assertEquals(43, Node.IS_CONSTANT_NAME);
1065:       assertEquals(50, Node.FREE_CALL);
1066:       assertEquals(46, Node.IS_NAMESPACE);
1067:       assertEquals(54, Node.SLASH_V);
1068:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1069:       assertEquals(12, Node.COLUMN_BITS);
1070:       assertEquals(32, Node.INCRDECR_PROP);
1071:       assertEquals(1, Node.DECR_FLAG);
1072:       assertEquals(46, Node.IS_NAMESPACE);
1073:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1074:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1075:       assertEquals(57, Node.LAST_PROP);
1076:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1077:       assertEquals(52, Node.LENGTH);
1078:       assertEquals(29, Node.JSDOC_INFO_PROP);
1079:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1080:       assertEquals(57, Node.REFLECTED_OBJECT);
1081:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1082:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1083:       assertEquals(56, Node.CHANGE_TIME);
1084:       assertEquals(37, Node.OPT_ARG_NAME);
1085:       assertEquals(48, Node.DIRECTIVES);
1086:       assertEquals(49, Node.DIRECT_EVAL);
1087:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1088:       assertEquals(4095, Node.COLUMN_MASK);
1089:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1090:       assertEquals(36, Node.QUOTED_PROP);
1091:       assertEquals(8, Node.FLAG_NO_THROWS);
1092:       assertEquals(39, Node.EMPTY_BLOCK);
1093:       assertEquals(50, Node.FREE_CALL);
1094:       assertEquals(53, Node.INPUT_ID);
1095:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1096:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1097:       assertEquals(55, Node.INFERRED_FUNCTION);
1098:       assertEquals(54, Node.SLASH_V);
1099:       assertEquals(43, Node.IS_CONSTANT_NAME);
1100:       assertEquals(47, Node.IS_DISPATCHER);
1101:       assertEquals(2, Node.POST_FLAG);
1102:       assertEquals(30, Node.VAR_ARGS_NAME);
1103:       assertEquals(40, Node.ORIGINALNAME_PROP);
1104:       
1105:       Node node3 = node2.detachFromParent();
1106:       assertFalse(node0.equals((Object)node2));
1107:       assertFalse(node0.equals((Object)node1));
1108:       assertFalse(node1.equals((Object)node0));
1109:       assertFalse(node2.equals((Object)node0));
1110:       assertFalse(node3.equals((Object)node0));
1111:       assertNotNull(node3);
1112:       assertNotSame(node0, node2);
1113:       assertNotSame(node0, node1);
1114:       assertNotSame(node0, node3);
1115:       assertNotSame(node1, node0);
1116:       assertSame(node1, node3);
1117:       assertSame(node1, node2);
1118:       assertSame(node2, node1);
1119:       assertSame(node2, node3);
1120:       assertNotSame(node2, node0);
1121:       assertSame(node3, node2);
1122:       assertNotSame(node3, node0);
1123:       assertSame(node3, node1);
1124:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1125:       assertEquals(0, arrayList0.size());
1126:       assertTrue(arrayList0.isEmpty());
1127:       assertFalse(node0.isCatch());
1128:       assertFalse(node0.isDefaultCase());
1129:       assertFalse(node0.isRegExp());
1130:       assertEquals(0, node0.getChildCount());
1131:       assertFalse(node0.isFunction());
1132:       assertFalse(node0.isArrayLit());
1133:       assertFalse(node0.isFor());
1134:       assertFalse(node0.isTry());
1135:       assertFalse(node0.isStringKey());
1136:       assertFalse(node0.isDebugger());
1137:       assertFalse(node0.isGetterDef());
1138:       assertFalse(node0.isReturn());
1139:       assertFalse(node0.isDo());
1140:       assertFalse(node0.isAssignAdd());
1141:       assertFalse(node0.isWhile());
1142:       assertFalse(node0.isDec());
1143:       assertFalse(node0.hasChildren());
1144:       assertFalse(node0.isLabel());
1145:       assertFalse(node0.isAssign());
1146:       assertFalse(node0.isTypeOf());
1147:       assertFalse(node0.isVar());
1148:       assertFalse(node0.isGetElem());
1149:       assertFalse(node0.isCall());
1150:       assertFalse(node0.isNew());
1151:       assertFalse(node0.isDelProp());
1152:       assertFalse(node0.isVoid());
1153:       assertFalse(node0.isName());
1154:       assertEquals(83, node0.getType());
1155:       assertFalse(node0.isTrue());
1156:       assertFalse(node0.isNull());
1157:       assertFalse(node0.isOr());
1158:       assertFalse(node0.isAdd());
1159:       assertFalse(node0.isEmpty());
1160:       assertFalse(node0.isInstanceOf());
1161:       assertFalse(node0.isAnd());
1162:       assertFalse(node0.isComma());
1163:       assertFalse(node0.isBreak());
1164:       assertFalse(node0.isThis());
1165:       assertFalse(node0.isExprResult());
1166:       assertFalse(node0.isWith());
1167:       assertFalse(node0.isFalse());
1168:       assertFalse(node0.isCast());
1169:       assertFalse(node0.hasOneChild());
1170:       assertFalse(node0.isHook());
1171:       assertFalse(node0.isLabelName());
1172:       assertFalse(node0.isScript());
1173:       assertFalse(node0.isSwitch());
1174:       assertEquals((-1), node0.getSourcePosition());
1175:       assertFalse(node0.isGetProp());
1176:       assertEquals((-1), node0.getCharno());
1177:       assertFalse(node0.isNot());
1178:       assertFalse(node0.isString());
1179:       assertFalse(node0.isObjectLit());
1180:       assertFalse(node0.isNumber());
1181:       assertTrue(node0.isParamList());
1182:       assertFalse(node0.hasMoreThanOneChild());
1183:       assertEquals((-1), node0.getLineno());
1184:       assertFalse(node0.isCase());
1185:       assertFalse(node0.isBlock());
1186:       assertFalse(node0.isContinue());
1187:       assertFalse(node0.isThrow());
1188:       assertFalse(node0.isIf());
1189:       assertFalse(node0.isNE());
1190:       assertFalse(node0.isInc());
1191:       assertFalse(node0.isSetterDef());
1192:       assertFalse(node0.isIn());
1193:       assertFalse(node1.isAnd());
1194:       assertFalse(node1.isInstanceOf());
1195:       assertFalse(node1.isGetProp());
1196:       assertFalse(node1.isScript());
1197:       assertFalse(node1.isNot());
1198:       assertFalse(node1.isObjectLit());
1199:       assertFalse(node1.isThrow());
1200:       assertFalse(node1.isCast());
1201:       assertFalse(node1.isLabelName());
1202:       assertFalse(node1.isLabel());
1203:       assertFalse(node1.isFalse());
1204:       assertFalse(node1.isContinue());
1205:       assertFalse(node1.isDo());
1206:       assertFalse(node1.isAssignAdd());
1207:       assertFalse(node1.isString());
1208:       assertFalse(node1.isOr());
1209:       assertEquals((-1), node1.getSourcePosition());
1210:       assertFalse(node1.isCall());
1211:       assertFalse(node1.isName());
1212:       assertFalse(node1.isGetElem());
1213:       assertFalse(node1.isDelProp());
1214:       assertFalse(node1.isVoid());
1215:       assertFalse(node1.isBreak());
1216:       assertFalse(node1.isTypeOf());
1217:       assertFalse(node1.isExprResult());
1218:       assertFalse(node1.isWhile());
1219:       assertFalse(node1.isAssign());
1220:       assertTrue(node1.hasOneChild());
1221:       assertFalse(node1.isReturn());
1222:       assertFalse(node1.isDec());
1223:       assertFalse(node1.isComma());
1224:       assertFalse(node1.isCatch());
1225:       assertFalse(node1.isNull());
1226:       assertFalse(node1.isSetterDef());
1227:       assertFalse(node1.isTrue());
1228:       assertFalse(node1.isParamList());
1229:       assertFalse(node1.isDebugger());
1230:       assertFalse(node1.isVar());
1231:       assertFalse(node1.isArrayLit());
1232:       assertFalse(node1.isStringKey());
1233:       assertFalse(node1.isAdd());
1234:       assertFalse(node1.isEmpty());
1235:       assertEquals((-1), node1.getType());
1236:       assertFalse(node1.isNew());
1237:       assertFalse(node1.isDefaultCase());
1238:       assertFalse(node1.isFunction());
1239:       assertFalse(node1.hasMoreThanOneChild());
1240:       assertFalse(node1.isIn());
1241:       assertFalse(node1.isCase());
1242:       assertTrue(node1.hasChildren());
1243:       assertEquals((-1), node1.getLineno());
1244:       assertFalse(node1.isNE());
1245:       assertFalse(node1.isSwitch());
1246:       assertFalse(node1.isNumber());
1247:       assertFalse(node1.isInc());
1248:       assertFalse(node1.isIf());
1249:       assertEquals((-1), node1.getCharno());
1250:       assertFalse(node1.isGetterDef());
1251:       assertFalse(node1.isHook());
1252:       assertFalse(node1.isTry());
1253:       assertFalse(node1.isRegExp());
1254:       assertFalse(node1.isThis());
1255:       assertFalse(node1.isFor());
1256:       assertFalse(node1.isWith());
1257:       assertFalse(node1.isBlock());
1258:       assertEquals(1, node1.getChildCount());
1259:       assertFalse(node2.isInstanceOf());
1260:       assertFalse(node2.isObjectLit());
1261:       assertFalse(node2.isAnd());
1262:       assertFalse(node2.isNot());
1263:       assertFalse(node2.isThis());
1264:       assertFalse(node2.isComma());
1265:       assertFalse(node2.isWith());
1266:       assertFalse(node2.isExprResult());
1267:       assertFalse(node2.isBreak());
1268:       assertFalse(node2.isCast());
1269:       assertFalse(node2.isFalse());
1270:       assertFalse(node2.isThrow());
1271:       assertFalse(node2.isInc());
1272:       assertFalse(node2.isIn());
1273:       assertFalse(node2.hasMoreThanOneChild());
1274:       assertFalse(node2.isAssignAdd());
1275:       assertEquals(1, node2.getChildCount());
1276:       assertFalse(node2.isLabel());
1277:       assertFalse(node2.isNE());
1278:       assertFalse(node2.isSwitch());
1279:       assertFalse(node2.isIf());
1280:       assertFalse(node2.isLabelName());
1281:       assertTrue(node2.hasChildren());
1282:       assertEquals((-1), node2.getLineno());
1283:       assertFalse(node2.isArrayLit());
1284:       assertFalse(node2.isHook());
1285:       assertFalse(node2.isBlock());
1286:       assertFalse(node2.isStringKey());
1287:       assertFalse(node2.isFor());
1288:       assertEquals((-1), node2.getCharno());
1289:       assertFalse(node2.isNumber());
1290:       assertFalse(node2.isScript());
1291:       assertFalse(node2.isGetterDef());
1292:       assertFalse(node2.isCase());
1293:       assertFalse(node2.isTry());
1294:       assertFalse(node2.isCatch());
1295:       assertFalse(node2.isRegExp());
1296:       assertFalse(node2.isNull());
1297:       assertFalse(node2.isParamList());
1298:       assertFalse(node2.isFunction());
1299:       assertFalse(node2.isName());
1300:       assertFalse(node2.isVoid());
1301:       assertFalse(node2.isCall());
1302:       assertEquals((-1), node2.getType());
1303:       assertFalse(node2.isVar());
1304:       assertFalse(node2.isTrue());
1305:       assertFalse(node2.isDefaultCase());
1306:       assertFalse(node2.isNew());
1307:       assertFalse(node2.isDo());
1308:       assertFalse(node2.isAdd());
1309:       assertFalse(node2.isEmpty());
1310:       assertFalse(node2.isSetterDef());
1311:       assertFalse(node2.isContinue());
1312:       assertFalse(node2.isOr());
1313:       assertFalse(node2.isReturn());
1314:       assertFalse(node2.isDec());
1315:       assertFalse(node2.isTypeOf());
1316:       assertFalse(node2.isDelProp());
1317:       assertFalse(node2.isGetElem());
1318:       assertFalse(node2.isAssign());
1319:       assertTrue(node2.hasOneChild());
1320:       assertFalse(node2.isDebugger());
1321:       assertEquals((-1), node2.getSourcePosition());
1322:       assertFalse(node2.isWhile());
1323:       assertFalse(node2.isString());
1324:       assertFalse(node2.isGetProp());
1325:       assertFalse(node3.isBreak());
1326:       assertFalse(node3.isFalse());
1327:       assertFalse(node3.isThis());
1328:       assertFalse(node3.isComma());
1329:       assertFalse(node3.isHook());
1330:       assertFalse(node3.isThrow());
1331:       assertFalse(node3.isInstanceOf());
1332:       assertFalse(node3.isIn());
1333:       assertFalse(node3.isInc());
1334:       assertFalse(node3.isIf());
1335:       assertFalse(node3.isNumber());
1336:       assertFalse(node3.isLabelName());
1337:       assertFalse(node3.isGetterDef());
1338:       assertFalse(node3.isFor());
1339:       assertFalse(node3.isNE());
1340:       assertEquals(1, node3.getChildCount());
1341:       assertEquals((-1), node3.getLineno());
1342:       assertFalse(node3.isLabel());
1343:       assertFalse(node3.isArrayLit());
1344:       assertFalse(node3.hasMoreThanOneChild());
1345:       assertTrue(node3.hasChildren());
1346:       assertFalse(node3.isWith());
1347:       assertFalse(node3.isCase());
1348:       assertFalse(node3.isRegExp());
1349:       assertFalse(node3.isSwitch());
1350:       assertEquals((-1), node3.getCharno());
1351:       assertFalse(node3.isBlock());
1352:       assertFalse(node3.isTry());
1353:       assertFalse(node3.isScript());
1354:       assertFalse(node3.isName());
1355:       assertFalse(node3.isParamList());
1356:       assertFalse(node3.isStringKey());
1357:       assertFalse(node3.isNull());
1358:       assertFalse(node3.isVar());
1359:       assertFalse(node3.isCall());
1360:       assertFalse(node3.isCatch());
1361:       assertFalse(node3.isDefaultCase());
1362:       assertFalse(node3.isDo());
1363:       assertFalse(node3.isTrue());
1364:       assertFalse(node3.isAssignAdd());
1365:       assertFalse(node3.isNew());
1366:       assertFalse(node3.isOr());
1367:       assertFalse(node3.isSetterDef());
1368:       assertFalse(node3.isAdd());
1369:       assertFalse(node3.isEmpty());
1370:       assertTrue(node3.hasOneChild());
1371:       assertEquals((-1), node3.getSourcePosition());
1372:       assertFalse(node3.isDec());
1373:       assertFalse(node3.isTypeOf());
1374:       assertFalse(node3.isAssign());
1375:       assertFalse(node3.isDelProp());
1376:       assertFalse(node3.isReturn());
1377:       assertEquals((-1), node3.getType());
1378:       assertFalse(node3.isVoid());
1379:       assertFalse(node3.isFunction());
1380:       assertFalse(node3.isExprResult());
1381:       assertFalse(node3.isContinue());
1382:       assertFalse(node3.isGetElem());
1383:       assertFalse(node3.isCast());
1384:       assertFalse(node3.isWhile());
1385:       assertFalse(node3.isString());
1386:       assertFalse(node3.isNot());
1387:       assertFalse(node3.isDebugger());
1388:       assertFalse(node3.isAnd());
1389:       assertFalse(node3.isObjectLit());
1390:       assertFalse(node3.isGetProp());
1391:       assertEquals(12, Node.COLUMN_BITS);
1392:       assertEquals(46, Node.IS_NAMESPACE);
1393:       assertEquals(49, Node.DIRECT_EVAL);
1394:       assertEquals(32, Node.INCRDECR_PROP);
1395:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1396:       assertEquals(1, Node.DECR_FLAG);
1397:       assertEquals(37, Node.OPT_ARG_NAME);
1398:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1399:       assertEquals(54, Node.SLASH_V);
1400:       assertEquals(56, Node.CHANGE_TIME);
1401:       assertEquals(52, Node.LENGTH);
1402:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1403:       assertEquals(40, Node.ORIGINALNAME_PROP);
1404:       assertEquals(29, Node.JSDOC_INFO_PROP);
1405:       assertEquals(53, Node.INPUT_ID);
1406:       assertEquals(2, Node.POST_FLAG);
1407:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1408:       assertEquals(57, Node.LAST_PROP);
1409:       assertEquals(30, Node.VAR_ARGS_NAME);
1410:       assertEquals(47, Node.IS_DISPATCHER);
1411:       assertEquals(55, Node.INFERRED_FUNCTION);
1412:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1413:       assertEquals(4095, Node.COLUMN_MASK);
1414:       assertEquals(48, Node.DIRECTIVES);
1415:       assertEquals(8, Node.FLAG_NO_THROWS);
1416:       assertEquals(39, Node.EMPTY_BLOCK);
1417:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1418:       assertEquals(43, Node.IS_CONSTANT_NAME);
1419:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1420:       assertEquals(50, Node.FREE_CALL);
1421:       
1422:       node1.setWasEmptyNode(true);
1423:       assertFalse(node0.equals((Object)node2));
1424:       assertFalse(node0.equals((Object)node1));
1425:       assertFalse(node0.equals((Object)node3));
1426:       assertFalse(node1.equals((Object)node0));
1427:       assertNotSame(node0, node2);
1428:       assertNotSame(node0, node1);
1429:       assertNotSame(node0, node3);
1430:       assertNotSame(node1, node0);
1431:       assertSame(node1, node3);
1432:       assertSame(node1, node2);
1433:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1434:       assertEquals(0, arrayList0.size());
1435:       assertTrue(arrayList0.isEmpty());
1436:       assertFalse(node0.isCatch());
1437:       assertFalse(node0.isDefaultCase());
1438:       assertFalse(node0.isRegExp());
1439:       assertEquals(0, node0.getChildCount());
1440:       assertFalse(node0.isFunction());
1441:       assertFalse(node0.isArrayLit());
1442:       assertFalse(node0.isFor());
1443:       assertFalse(node0.isTry());
1444:       assertFalse(node0.isStringKey());
1445:       assertFalse(node0.isDebugger());
1446:       assertFalse(node0.isGetterDef());
1447:       assertFalse(node0.isReturn());
1448:       assertFalse(node0.isDo());
1449:       assertFalse(node0.isAssignAdd());
1450:       assertFalse(node0.isWhile());
1451:       assertFalse(node0.isDec());
1452:       assertFalse(node0.hasChildren());
1453:       assertFalse(node0.isLabel());
1454:       assertFalse(node0.isAssign());
1455:       assertFalse(node0.isTypeOf());
1456:       assertFalse(node0.isVar());
1457:       assertFalse(node0.isGetElem());
1458:       assertFalse(node0.isCall());
1459:       assertFalse(node0.isNew());
1460:       assertFalse(node0.isDelProp());
1461:       assertFalse(node0.isVoid());
1462:       assertFalse(node0.isName());
1463:       assertEquals(83, node0.getType());
1464:       assertFalse(node0.isTrue());
1465:       assertFalse(node0.isNull());
1466:       assertFalse(node0.isOr());
1467:       assertFalse(node0.isAdd());
1468:       assertFalse(node0.isEmpty());
1469:       assertFalse(node0.isInstanceOf());
1470:       assertFalse(node0.isAnd());
1471:       assertFalse(node0.isComma());
1472:       assertFalse(node0.isBreak());
1473:       assertFalse(node0.isThis());
1474:       assertFalse(node0.isExprResult());
1475:       assertFalse(node0.isWith());
1476:       assertFalse(node0.isFalse());
1477:       assertFalse(node0.isCast());
1478:       assertFalse(node0.hasOneChild());
1479:       assertFalse(node0.isHook());
1480:       assertFalse(node0.isLabelName());
1481:       assertFalse(node0.isScript());
1482:       assertFalse(node0.isSwitch());
1483:       assertEquals((-1), node0.getSourcePosition());
1484:       assertFalse(node0.isGetProp());
1485:       assertEquals((-1), node0.getCharno());
1486:       assertFalse(node0.isNot());
1487:       assertFalse(node0.isString());
1488:       assertFalse(node0.isObjectLit());
1489:       assertFalse(node0.isNumber());
1490:       assertTrue(node0.isParamList());
1491:       assertFalse(node0.hasMoreThanOneChild());
1492:       assertEquals((-1), node0.getLineno());
1493:       assertFalse(node0.isCase());
1494:       assertFalse(node0.isBlock());
1495:       assertFalse(node0.isContinue());
1496:       assertFalse(node0.isThrow());
1497:       assertFalse(node0.isIf());
1498:       assertFalse(node0.isNE());
1499:       assertFalse(node0.isInc());
1500:       assertFalse(node0.isSetterDef());
1501:       assertFalse(node0.isIn());
1502:       assertFalse(node1.isAnd());
1503:       assertFalse(node1.isInstanceOf());
1504:       assertFalse(node1.isGetProp());
1505:       assertFalse(node1.isScript());
1506:       assertFalse(node1.isNot());
1507:       assertFalse(node1.isObjectLit());
1508:       assertFalse(node1.isThrow());
1509:       assertFalse(node1.isCast());
1510:       assertFalse(node1.isLabelName());
1511:       assertFalse(node1.isLabel());
1512:       assertFalse(node1.isFalse());
1513:       assertFalse(node1.isContinue());
1514:       assertFalse(node1.isDo());
1515:       assertFalse(node1.isAssignAdd());
1516:       assertFalse(node1.isString());
1517:       assertFalse(node1.isOr());
1518:       assertEquals((-1), node1.getSourcePosition());
1519:       assertFalse(node1.isCall());
1520:       assertFalse(node1.isName());
1521:       assertFalse(node1.isGetElem());
1522:       assertFalse(node1.isDelProp());
1523:       assertFalse(node1.isVoid());
1524:       assertFalse(node1.isBreak());
1525:       assertFalse(node1.isTypeOf());
1526:       assertFalse(node1.isExprResult());
1527:       assertFalse(node1.isWhile());
1528:       assertFalse(node1.isAssign());
1529:       assertTrue(node1.hasOneChild());
1530:       assertFalse(node1.isReturn());
1531:       assertFalse(node1.isDec());
1532:       assertFalse(node1.isComma());
1533:       assertFalse(node1.isCatch());
1534:       assertFalse(node1.isNull());
1535:       assertFalse(node1.isSetterDef());
1536:       assertFalse(node1.isTrue());
1537:       assertFalse(node1.isParamList());
1538:       assertFalse(node1.isDebugger());
1539:       assertFalse(node1.isVar());
1540:       assertFalse(node1.isArrayLit());
1541:       assertFalse(node1.isStringKey());
1542:       assertFalse(node1.isAdd());
1543:       assertFalse(node1.isEmpty());
1544:       assertEquals((-1), node1.getType());
1545:       assertFalse(node1.isNew());
1546:       assertFalse(node1.isDefaultCase());
1547:       assertFalse(node1.isFunction());
1548:       assertFalse(node1.hasMoreThanOneChild());
1549:       assertFalse(node1.isIn());
1550:       assertFalse(node1.isCase());
1551:       assertTrue(node1.hasChildren());
1552:       assertEquals((-1), node1.getLineno());
1553:       assertFalse(node1.isNE());
1554:       assertFalse(node1.isSwitch());
1555:       assertFalse(node1.isNumber());
1556:       assertFalse(node1.isInc());
1557:       assertFalse(node1.isIf());
1558:       assertEquals((-1), node1.getCharno());
1559:       assertFalse(node1.isGetterDef());
1560:       assertFalse(node1.isHook());
1561:       assertFalse(node1.isTry());
1562:       assertFalse(node1.isRegExp());
1563:       assertFalse(node1.isThis());
1564:       assertFalse(node1.isFor());
1565:       assertFalse(node1.isWith());
1566:       assertFalse(node1.isBlock());
1567:       assertEquals(1, node1.getChildCount());
1568:       
1569:       Node node4 = Node.newString(2788, "Object#Key", 40, 3466);
1570:       assertFalse(node4.equals((Object)node0));
1571:       assertFalse(node4.equals((Object)node1));
1572:       assertFalse(node4.equals((Object)node3));
1573:       assertFalse(node4.equals((Object)node2));
1574:       assertNotNull(node4);
1575:       assertFalse(node4.isAnd());
1576:       assertFalse(node4.isWith());
1577:       assertFalse(node4.isNot());
1578:       assertFalse(node4.isObjectLit());
1579:       assertFalse(node4.isGetProp());
1580:       assertFalse(node4.hasOneChild());
1581:       assertFalse(node4.isScript());
1582:       assertFalse(node4.isGetElem());
1583:       assertEquals(40, node4.getLineno());
1584:       assertFalse(node4.isAssign());
1585:       assertFalse(node4.isHook());
1586:       assertFalse(node4.isDec());
1587:       assertFalse(node4.hasChildren());
1588:       assertFalse(node4.isThis());
1589:       assertFalse(node4.isComma());
1590:       assertFalse(node4.isTypeOf());
1591:       assertFalse(node4.isInstanceOf());
1592:       assertFalse(node4.isBreak());
1593:       assertFalse(node4.isExprResult());
1594:       assertFalse(node4.isCase());
1595:       assertFalse(node4.hasMoreThanOneChild());
1596:       assertFalse(node4.isDo());
1597:       assertFalse(node4.isNew());
1598:       assertFalse(node4.isAssignAdd());
1599:       assertFalse(node4.isOr());
1600:       assertFalse(node4.isNumber());
1601:       assertEquals(167306, node4.getSourcePosition());
1602:       assertFalse(node4.isAdd());
1603:       assertFalse(node4.isEmpty());
1604:       assertFalse(node4.isStringKey());
1605:       assertFalse(node4.isLabelName());
1606:       assertFalse(node4.isGetterDef());
1607:       assertFalse(node4.isVar());
1608:       assertFalse(node4.isLabel());
1609:       assertFalse(node4.isParamList());
1610:       assertFalse(node4.isSwitch());
1611:       assertEquals(2788, node4.getType());
1612:       assertFalse(node4.isArrayLit());
1613:       assertEquals(0, node4.getChildCount());
1614:       assertFalse(node4.isDefaultCase());
1615:       assertFalse(node4.isTrue());
1616:       assertFalse(node4.isDebugger());
1617:       assertFalse(node4.isTry());
1618:       assertFalse(node4.isSetterDef());
1619:       assertFalse(node4.isName());
1620:       assertFalse(node4.isDelProp());
1621:       assertFalse(node4.isIf());
1622:       assertFalse(node4.isNE());
1623:       assertFalse(node4.isFor());
1624:       assertFalse(node4.isBlock());
1625:       assertFalse(node4.isNull());
1626:       assertFalse(node4.isRegExp());
1627:       assertFalse(node4.isVoid());
1628:       assertFalse(node4.isCatch());
1629:       assertEquals(3466, node4.getCharno());
1630:       assertFalse(node4.isCall());
1631:       assertFalse(node4.isContinue());
1632:       assertFalse(node4.isWhile());
1633:       assertFalse(node4.isReturn());
1634:       assertFalse(node4.isIn());
1635:       assertFalse(node4.isString());
1636:       assertFalse(node4.isInc());
1637:       assertFalse(node4.isFalse());
1638:       assertFalse(node4.isThrow());
1639:       assertFalse(node4.isFunction());
1640:       assertFalse(node4.isCast());
1641:       
1642:       Iterable<Node> iterable0 = node4.children();
1643:       assertFalse(node4.equals((Object)node0));
1644:       assertFalse(node4.equals((Object)node1));
1645:       assertFalse(node4.equals((Object)node3));
1646:       assertFalse(node4.equals((Object)node2));
1647:       assertFalse(iterable0.contains(node4));
1648:       assertNotNull(iterable0);
1649:       assertFalse(node4.isAnd());
1650:       assertFalse(node4.isWith());
1651:       assertFalse(node4.isNot());
1652:       assertFalse(node4.isObjectLit());
1653:       assertFalse(node4.isGetProp());
1654:       assertFalse(node4.hasOneChild());
1655:       assertFalse(node4.isScript());
1656:       assertFalse(node4.isGetElem());
1657:       assertEquals(40, node4.getLineno());
1658:       assertFalse(node4.isAssign());
1659:       assertFalse(node4.isHook());
1660:       assertFalse(node4.isDec());
1661:       assertFalse(node4.hasChildren());
1662:       assertFalse(node4.isThis());
1663:       assertFalse(node4.isComma());
1664:       assertFalse(node4.isTypeOf());
1665:       assertFalse(node4.isInstanceOf());
1666:       assertFalse(node4.isBreak());
1667:       assertFalse(node4.isExprResult());
1668:       assertFalse(node4.isCase());
1669:       assertFalse(node4.hasMoreThanOneChild());
1670:       assertFalse(node4.isDo());
1671:       assertFalse(node4.isNew());
1672:       assertFalse(node4.isAssignAdd());
1673:       assertFalse(node4.isOr());
1674:       assertFalse(node4.isNumber());
1675:       assertEquals(167306, node4.getSourcePosition());
1676:       assertFalse(node4.isAdd());
1677:       assertFalse(node4.isEmpty());
1678:       assertFalse(node4.isStringKey());
1679:       assertFalse(node4.isLabelName());
1680:       assertFalse(node4.isGetterDef());
1681:       assertFalse(node4.isVar());
1682:       assertFalse(node4.isLabel());
1683:       assertFalse(node4.isParamList());
1684:       assertFalse(node4.isSwitch());
1685:       assertEquals(2788, node4.getType());
1686:       assertFalse(node4.isArrayLit());
1687:       assertEquals(0, node4.getChildCount());
1688:       assertFalse(node4.isDefaultCase());
1689:       assertFalse(node4.isTrue());
1690:       assertFalse(node4.isDebugger());
1691:       assertFalse(node4.isTry());
1692:       assertFalse(node4.isSetterDef());
1693:       assertFalse(node4.isName());
1694:       assertFalse(node4.isDelProp());
1695:       assertFalse(node4.isIf());
1696:       assertFalse(node4.isNE());
1697:       assertFalse(node4.isFor());
1698:       assertFalse(node4.isBlock());
1699:       assertFalse(node4.isNull());
1700:       assertFalse(node4.isRegExp());
1701:       assertFalse(node4.isVoid());
1702:       assertFalse(node4.isCatch());
1703:       assertEquals(3466, node4.getCharno());
1704:       assertFalse(node4.isCall());
1705:       assertFalse(node4.isContinue());
1706:       assertFalse(node4.isWhile());
1707:       assertFalse(node4.isReturn());
1708:       assertFalse(node4.isIn());
1709:       assertFalse(node4.isString());
1710:       assertFalse(node4.isInc());
1711:       assertFalse(node4.isFalse());
1712:       assertFalse(node4.isThrow());
1713:       assertFalse(node4.isFunction());
1714:       assertFalse(node4.isCast());
1715:       
1716:       boolean boolean0 = node3.isVoid();
1717:       assertFalse(node0.equals((Object)node2));
1718:       assertFalse(node0.equals((Object)node1));
1719:       assertFalse(node0.equals((Object)node4));
1720:       assertFalse(node0.equals((Object)node3));
1721:       assertFalse(node1.equals((Object)node4));
1722:       assertFalse(node1.equals((Object)node0));
1723:       assertFalse(node2.equals((Object)node4));
1724:       assertFalse(node2.equals((Object)node0));
1725:       assertFalse(node3.equals((Object)node0));
1726:       assertFalse(node3.equals((Object)node4));
1727:       assertFalse(boolean0);
1728:       assertNotSame(node0, node2);
1729:       assertNotSame(node0, node1);
1730:       assertNotSame(node0, node3);
1731:       assertNotSame(node1, node0);
1732:       assertSame(node1, node3);
1733:       assertSame(node1, node2);
1734:       assertSame(node2, node1);
1735:       assertSame(node2, node3);
1736:       assertNotSame(node2, node0);
1737:       assertSame(node3, node2);
1738:       assertNotSame(node3, node0);
1739:       assertSame(node3, node1);
1740:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1741:       assertEquals(0, arrayList0.size());
1742:       assertTrue(arrayList0.isEmpty());
1743:       assertFalse(node0.isCatch());
1744:       assertFalse(node0.isDefaultCase());
1745:       assertFalse(node0.isRegExp());
1746:       assertEquals(0, node0.getChildCount());
1747:       assertFalse(node0.isFunction());
1748:       assertFalse(node0.isArrayLit());
1749:       assertFalse(node0.isFor());
1750:       assertFalse(node0.isTry());
1751:       assertFalse(node0.isStringKey());
1752:       assertFalse(node0.isDebugger());
1753:       assertFalse(node0.isGetterDef());
1754:       assertFalse(node0.isReturn());
1755:       assertFalse(node0.isDo());
1756:       assertFalse(node0.isAssignAdd());
1757:       assertFalse(node0.isWhile());
1758:       assertFalse(node0.isDec());
1759:       assertFalse(node0.hasChildren());
1760:       assertFalse(node0.isLabel());
1761:       assertFalse(node0.isAssign());
1762:       assertFalse(node0.isTypeOf());
1763:       assertFalse(node0.isVar());
1764:       assertFalse(node0.isGetElem());
1765:       assertFalse(node0.isCall());
1766:       assertFalse(node0.isNew());
1767:       assertFalse(node0.isDelProp());
1768:       assertFalse(node0.isVoid());
1769:       assertFalse(node0.isName());
1770:       assertEquals(83, node0.getType());
1771:       assertFalse(node0.isTrue());
1772:       assertFalse(node0.isNull());
1773:       assertFalse(node0.isOr());
1774:       assertFalse(node0.isAdd());
1775:       assertFalse(node0.isEmpty());
1776:       assertFalse(node0.isInstanceOf());
1777:       assertFalse(node0.isAnd());
1778:       assertFalse(node0.isComma());
1779:       assertFalse(node0.isBreak());
1780:       assertFalse(node0.isThis());
1781:       assertFalse(node0.isExprResult());
1782:       assertFalse(node0.isWith());
1783:       assertFalse(node0.isFalse());
1784:       assertFalse(node0.isCast());
1785:       assertFalse(node0.hasOneChild());
1786:       assertFalse(node0.isHook());
1787:       assertFalse(node0.isLabelName());
1788:       assertFalse(node0.isScript());
1789:       assertFalse(node0.isSwitch());
1790:       assertEquals((-1), node0.getSourcePosition());
1791:       assertFalse(node0.isGetProp());
1792:       assertEquals((-1), node0.getCharno());
1793:       assertFalse(node0.isNot());
1794:       assertFalse(node0.isString());
1795:       assertFalse(node0.isObjectLit());
1796:       assertFalse(node0.isNumber());
1797:       assertTrue(node0.isParamList());
1798:       assertFalse(node0.hasMoreThanOneChild());
1799:       assertEquals((-1), node0.getLineno());
1800:       assertFalse(node0.isCase());
1801:       assertFalse(node0.isBlock());
1802:       assertFalse(node0.isContinue());
1803:       assertFalse(node0.isThrow());
1804:       assertFalse(node0.isIf());
1805:       assertFalse(node0.isNE());
1806:       assertFalse(node0.isInc());
1807:       assertFalse(node0.isSetterDef());
1808:       assertFalse(node0.isIn());
1809:       assertFalse(node1.isAnd());
1810:       assertFalse(node1.isInstanceOf());
1811:       assertFalse(node1.isGetProp());
1812:       assertFalse(node1.isScript());
1813:       assertFalse(node1.isNot());
1814:       assertFalse(node1.isObjectLit());
1815:       assertFalse(node1.isThrow());
1816:       assertFalse(node1.isCast());
1817:       assertFalse(node1.isLabelName());
1818:       assertFalse(node1.isLabel());
1819:       assertFalse(node1.isFalse());
1820:       assertFalse(node1.isContinue());
1821:       assertFalse(node1.isDo());
1822:       assertFalse(node1.isAssignAdd());
1823:       assertFalse(node1.isString());
1824:       assertFalse(node1.isOr());
1825:       assertEquals((-1), node1.getSourcePosition());
1826:       assertFalse(node1.isCall());
1827:       assertFalse(node1.isName());
1828:       assertFalse(node1.isGetElem());
1829:       assertFalse(node1.isDelProp());
1830:       assertFalse(node1.isVoid());
1831:       assertFalse(node1.isBreak());
1832:       assertFalse(node1.isTypeOf());
1833:       assertFalse(node1.isExprResult());
1834:       assertFalse(node1.isWhile());
1835:       assertFalse(node1.isAssign());
1836:       assertTrue(node1.hasOneChild());
1837:       assertFalse(node1.isReturn());
1838:       assertFalse(node1.isDec());
1839:       assertFalse(node1.isComma());
1840:       assertFalse(node1.isCatch());
1841:       assertFalse(node1.isNull());
1842:       assertFalse(node1.isSetterDef());
1843:       assertFalse(node1.isTrue());
1844:       assertFalse(node1.isParamList());
1845:       assertFalse(node1.isDebugger());
1846:       assertFalse(node1.isVar());
1847:       assertFalse(node1.isArrayLit());
1848:       assertFalse(node1.isStringKey());
1849:       assertFalse(node1.isAdd());
1850:       assertFalse(node1.isEmpty());
1851:       assertEquals((-1), node1.getType());
1852:       assertFalse(node1.isNew());
1853:       assertFalse(node1.isDefaultCase());
1854:       assertFalse(node1.isFunction());
1855:       assertFalse(node1.hasMoreThanOneChild());
1856:       assertFalse(node1.isIn());
1857:       assertFalse(node1.isCase());
1858:       assertTrue(node1.hasChildren());
1859:       assertEquals((-1), node1.getLineno());
1860:       assertFalse(node1.isNE());
1861:       assertFalse(node1.isSwitch());
1862:       assertFalse(node1.isNumber());
1863:       assertFalse(node1.isInc());
1864:       assertFalse(node1.isIf());
1865:       assertEquals((-1), node1.getCharno());
1866:       assertFalse(node1.isGetterDef());
1867:       assertFalse(node1.isHook());
1868:       assertFalse(node1.isTry());
1869:       assertFalse(node1.isRegExp());
1870:       assertFalse(node1.isThis());
1871:       assertFalse(node1.isFor());
1872:       assertFalse(node1.isWith());
1873:       assertFalse(node1.isBlock());
1874:       assertEquals(1, node1.getChildCount());
1875:       assertFalse(node2.isInstanceOf());
1876:       assertFalse(node2.isObjectLit());
1877:       assertFalse(node2.isAnd());
1878:       assertFalse(node2.isNot());
1879:       assertFalse(node2.isThis());
1880:       assertFalse(node2.isComma());
1881:       assertFalse(node2.isWith());
1882:       assertFalse(node2.isExprResult());
1883:       assertFalse(node2.isBreak());
1884:       assertFalse(node2.isCast());
1885:       assertFalse(node2.isFalse());
1886:       assertFalse(node2.isThrow());
1887:       assertFalse(node2.isInc());
1888:       assertFalse(node2.isIn());
1889:       assertFalse(node2.hasMoreThanOneChild());
1890:       assertFalse(node2.isAssignAdd());
1891:       assertEquals(1, node2.getChildCount());
1892:       assertFalse(node2.isLabel());
1893:       assertFalse(node2.isNE());
1894:       assertFalse(node2.isSwitch());
1895:       assertFalse(node2.isIf());
1896:       assertFalse(node2.isLabelName());
1897:       assertTrue(node2.hasChildren());
1898:       assertEquals((-1), node2.getLineno());
1899:       assertFalse(node2.isArrayLit());
1900:       assertFalse(node2.isHook());
1901:       assertFalse(node2.isBlock());
1902:       assertFalse(node2.isStringKey());
1903:       assertFalse(node2.isFor());
1904:       assertEquals((-1), node2.getCharno());
1905:       assertFalse(node2.isNumber());
1906:       assertFalse(node2.isScript());
1907:       assertFalse(node2.isGetterDef());
1908:       assertFalse(node2.isCase());
1909:       assertFalse(node2.isTry());
1910:       assertFalse(node2.isCatch());
1911:       assertFalse(node2.isRegExp());
1912:       assertFalse(node2.isNull());
1913:       assertFalse(node2.isParamList());
1914:       assertFalse(node2.isFunction());
1915:       assertFalse(node2.isName());
1916:       assertFalse(node2.isVoid());
1917:       assertFalse(node2.isCall());
1918:       assertEquals((-1), node2.getType());
1919:       assertFalse(node2.isVar());
1920:       assertFalse(node2.isTrue());
1921:       assertFalse(node2.isDefaultCase());
1922:       assertFalse(node2.isNew());
1923:       assertFalse(node2.isDo());
1924:       assertFalse(node2.isAdd());
1925:       assertFalse(node2.isEmpty());
1926:       assertFalse(node2.isSetterDef());
1927:       assertFalse(node2.isContinue());
1928:       assertFalse(node2.isOr());
1929:       assertFalse(node2.isReturn());
1930:       assertFalse(node2.isDec());
1931:       assertFalse(node2.isTypeOf());
1932:       assertFalse(node2.isDelProp());
1933:       assertFalse(node2.isGetElem());
1934:       assertFalse(node2.isAssign());
1935:       assertTrue(node2.hasOneChild());
1936:       assertFalse(node2.isDebugger());
1937:       assertEquals((-1), node2.getSourcePosition());
1938:       assertFalse(node2.isWhile());
1939:       assertFalse(node2.isString());
1940:       assertFalse(node2.isGetProp());
1941:       assertFalse(node3.isBreak());
1942:       assertFalse(node3.isFalse());
1943:       assertFalse(node3.isThis());
1944:       assertFalse(node3.isComma());
1945:       assertFalse(node3.isHook());
1946:       assertFalse(node3.isThrow());
1947:       assertFalse(node3.isInstanceOf());
1948:       assertFalse(node3.isIn());
1949:       assertFalse(node3.isInc());
1950:       assertFalse(node3.isIf());
1951:       assertFalse(node3.isNumber());
1952:       assertFalse(node3.isLabelName());
1953:       assertFalse(node3.isGetterDef());
1954:       assertFalse(node3.isFor());
1955:       assertFalse(node3.isNE());
1956:       assertEquals(1, node3.getChildCount());
1957:       assertEquals((-1), node3.getLineno());
1958:       assertFalse(node3.isLabel());
1959:       assertFalse(node3.isArrayLit());
1960:       assertFalse(node3.hasMoreThanOneChild());
1961:       assertTrue(node3.hasChildren());
1962:       assertFalse(node3.isWith());
1963:       assertFalse(node3.isCase());
1964:       assertFalse(node3.isRegExp());
1965:       assertFalse(node3.isSwitch());
1966:       assertEquals((-1), node3.getCharno());
1967:       assertFalse(node3.isBlock());
1968:       assertFalse(node3.isTry());
1969:       assertFalse(node3.isScript());
1970:       assertFalse(node3.isName());
1971:       assertFalse(node3.isParamList());
1972:       assertFalse(node3.isStringKey());
1973:       assertFalse(node3.isNull());
1974:       assertFalse(node3.isVar());
1975:       assertFalse(node3.isCall());
1976:       assertFalse(node3.isCatch());
1977:       assertFalse(node3.isDefaultCase());
1978:       assertFalse(node3.isDo());
1979:       assertFalse(node3.isTrue());
1980:       assertFalse(node3.isAssignAdd());
1981:       assertFalse(node3.isNew());
1982:       assertFalse(node3.isOr());
1983:       assertFalse(node3.isSetterDef());
1984:       assertFalse(node3.isAdd());
1985:       assertFalse(node3.isEmpty());
1986:       assertTrue(node3.hasOneChild());
1987:       assertEquals((-1), node3.getSourcePosition());
1988:       assertFalse(node3.isDec());
1989:       assertFalse(node3.isTypeOf());
1990:       assertFalse(node3.isAssign());
1991:       assertFalse(node3.isDelProp());
1992:       assertFalse(node3.isReturn());
1993:       assertEquals((-1), node3.getType());
1994:       assertFalse(node3.isVoid());
1995:       assertFalse(node3.isFunction());
1996:       assertFalse(node3.isExprResult());
1997:       assertFalse(node3.isContinue());
1998:       assertFalse(node3.isGetElem());
1999:       assertFalse(node3.isCast());
2000:       assertFalse(node3.isWhile());
2001:       assertFalse(node3.isString());
2002:       assertFalse(node3.isNot());
2003:       assertFalse(node3.isDebugger());
2004:       assertFalse(node3.isAnd());
2005:       assertFalse(node3.isObjectLit());
2006:       assertFalse(node3.isGetProp());
2007:       
2008:       boolean boolean1 = node2.isDebugger();
2009:       assertFalse(node0.equals((Object)node2));
2010:       assertFalse(node0.equals((Object)node1));
2011:       assertFalse(node0.equals((Object)node4));
2012:       assertFalse(node0.equals((Object)node3));
2013:       assertFalse(node1.equals((Object)node4));
2014:       assertFalse(node1.equals((Object)node0));
2015:       assertFalse(node2.equals((Object)node4));
2016:       assertFalse(node2.equals((Object)node0));
2017:       assertTrue(boolean1 == boolean0);
2018:       assertFalse(boolean1);
2019:       assertNotSame(node0, node2);
2020:       assertNotSame(node0, node1);
2021:       assertNotSame(node0, node3);
2022:       assertNotSame(node1, node0);
2023:       assertSame(node1, node3);
2024:       assertSame(node1, node2);
2025:       assertSame(node2, node1);
2026:       assertSame(node2, node3);
2027:       assertNotSame(node2, node0);
2028:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
2029:       assertEquals(0, arrayList0.size());
2030:       assertTrue(arrayList0.isEmpty());
2031:       assertFalse(node0.isCatch());
2032:       assertFalse(node0.isDefaultCase());
2033:       assertFalse(node0.isRegExp());
2034:       assertEquals(0, node0.getChildCount());
2035:       assertFalse(node0.isFunction());
2036:       assertFalse(node0.isArrayLit());
2037:       assertFalse(node0.isFor());
2038:       assertFalse(node0.isTry());
2039:       assertFalse(node0.isStringKey());
2040:       assertFalse(node0.isDebugger());
2041:       assertFalse(node0.isGetterDef());
2042:       assertFalse(node0.isReturn());
2043:       assertFalse(node0.isDo());
2044:       assertFalse(node0.isAssignAdd());
2045:       assertFalse(node0.isWhile());
2046:       assertFalse(node0.isDec());
2047:       assertFalse(node0.hasChildren());
2048:       assertFalse(node0.isLabel());
2049:       assertFalse(node0.isAssign());
2050:       assertFalse(node0.isTypeOf());
2051:       assertFalse(node0.isVar());
2052:       assertFalse(node0.isGetElem());
2053:       assertFalse(node0.isCall());
2054:       assertFalse(node0.isNew());
2055:       assertFalse(node0.isDelProp());
2056:       assertFalse(node0.isVoid());
2057:       assertFalse(node0.isName());
2058:       assertEquals(83, node0.getType());
2059:       assertFalse(node0.isTrue());
2060:       assertFalse(node0.isNull());
2061:       assertFalse(node0.isOr());
2062:       assertFalse(node0.isAdd());
2063:       assertFalse(node0.isEmpty());
2064:       assertFalse(node0.isInstanceOf());
2065:       assertFalse(node0.isAnd());
2066:       assertFalse(node0.isComma());
2067:       assertFalse(node0.isBreak());
2068:       assertFalse(node0.isThis());
2069:       assertFalse(node0.isExprResult());
2070:       assertFalse(node0.isWith());
2071:       assertFalse(node0.isFalse());
2072:       assertFalse(node0.isCast());
2073:       assertFalse(node0.hasOneChild());
2074:       assertFalse(node0.isHook());
2075:       assertFalse(node0.isLabelName());
2076:       assertFalse(node0.isScript());
2077:       assertFalse(node0.isSwitch());
2078:       assertEquals((-1), node0.getSourcePosition());
2079:       assertFalse(node0.isGetProp());
2080:       assertEquals((-1), node0.getCharno());
2081:       assertFalse(node0.isNot());
2082:       assertFalse(node0.isString());
2083:       assertFalse(node0.isObjectLit());
2084:       assertFalse(node0.isNumber());
2085:       assertTrue(node0.isParamList());
2086:       assertFalse(node0.hasMoreThanOneChild());
2087:       assertEquals((-1), node0.getLineno());
2088:       assertFalse(node0.isCase());
2089:       assertFalse(node0.isBlock());
2090:       assertFalse(node0.isContinue());
2091:       assertFalse(node0.isThrow());
2092:       assertFalse(node0.isIf());
2093:       assertFalse(node0.isNE());
2094:       assertFalse(node0.isInc());
2095:       assertFalse(node0.isSetterDef());
2096:       assertFalse(node0.isIn());
2097:       assertFalse(node1.isAnd());
2098:       assertFalse(node1.isInstanceOf());
2099:       assertFalse(node1.isGetProp());
2100:       assertFalse(node1.isScript());
2101:       assertFalse(node1.isNot());
2102:       assertFalse(node1.isObjectLit());
2103:       assertFalse(node1.isThrow());
2104:       assertFalse(node1.isCast());
2105:       assertFalse(node1.isLabelName());
2106:       assertFalse(node1.isLabel());
2107:       assertFalse(node1.isFalse());
2108:       assertFalse(node1.isContinue());
2109:       assertFalse(node1.isDo());
2110:       assertFalse(node1.isAssignAdd());
2111:       assertFalse(node1.isString());
2112:       assertFalse(node1.isOr());
2113:       assertEquals((-1), node1.getSourcePosition());
2114:       assertFalse(node1.isCall());
2115:       assertFalse(node1.isName());
2116:       assertFalse(node1.isGetElem());
2117:       assertFalse(node1.isDelProp());
2118:       assertFalse(node1.isVoid());
2119:       assertFalse(node1.isBreak());
2120:       assertFalse(node1.isTypeOf());
2121:       assertFalse(node1.isExprResult());
2122:       assertFalse(node1.isWhile());
2123:       assertFalse(node1.isAssign());
2124:       assertTrue(node1.hasOneChild());
2125:       assertFalse(node1.isReturn());
2126:       assertFalse(node1.isDec());
2127:       assertFalse(node1.isComma());
2128:       assertFalse(node1.isCatch());
2129:       assertFalse(node1.isNull());
2130:       assertFalse(node1.isSetterDef());
2131:       assertFalse(node1.isTrue());
2132:       assertFalse(node1.isParamList());
2133:       assertFalse(node1.isDebugger());
2134:       assertFalse(node1.isVar());
2135:       assertFalse(node1.isArrayLit());
2136:       assertFalse(node1.isStringKey());
2137:       assertFalse(node1.isAdd());
2138:       assertFalse(node1.isEmpty());
2139:       assertEquals((-1), node1.getType());
2140:       assertFalse(node1.isNew());
2141:       assertFalse(node1.isDefaultCase());
2142:       assertFalse(node1.isFunction());
2143:       assertFalse(node1.hasMoreThanOneChild());
2144:       assertFalse(node1.isIn());
2145:       assertFalse(node1.isCase());
2146:       assertTrue(node1.hasChildren());
2147:       assertEquals((-1), node1.getLineno());
2148:       assertFalse(node1.isNE());
2149:       assertFalse(node1.isSwitch());
2150:       assertFalse(node1.isNumber());
2151:       assertFalse(node1.isInc());
2152:       assertFalse(node1.isIf());
2153:       assertEquals((-1), node1.getCharno());
2154:       assertFalse(node1.isGetterDef());
2155:       assertFalse(node1.isHook());
2156:       assertFalse(node1.isTry());
2157:       assertFalse(node1.isRegExp());
2158:       assertFalse(node1.isThis());
2159:       assertFalse(node1.isFor());
2160:       assertFalse(node1.isWith());
2161:       assertFalse(node1.isBlock());
2162:       assertEquals(1, node1.getChildCount());
2163:       assertFalse(node2.isInstanceOf());
2164:       assertFalse(node2.isObjectLit());
2165:       assertFalse(node2.isAnd());
2166:       assertFalse(node2.isNot());
2167:       assertFalse(node2.isThis());
2168:       assertFalse(node2.isComma());
2169:       assertFalse(node2.isWith());
2170:       assertFalse(node2.isExprResult());
2171:       assertFalse(node2.isBreak());
2172:       assertFalse(node2.isCast());
2173:       assertFalse(node2.isFalse());
2174:       assertFalse(node2.isThrow());
2175:       assertFalse(node2.isInc());
2176:       assertFalse(node2.isIn());
2177:       assertFalse(node2.hasMoreThanOneChild());
2178:       assertFalse(node2.isAssignAdd());
2179:       assertEquals(1, node2.getChildCount());
2180:       assertFalse(node2.isLabel());
2181:       assertFalse(node2.isNE());
2182:       assertFalse(node2.isSwitch());
2183:       assertFalse(node2.isIf());
2184:       assertFalse(node2.isLabelName());
2185:       assertTrue(node2.hasChildren());
2186:       assertEquals((-1), node2.getLineno());
2187:       assertFalse(node2.isArrayLit());
2188:       assertFalse(node2.isHook());
2189:       assertFalse(node2.isBlock());
2190:       assertFalse(node2.isStringKey());
2191:       assertFalse(node2.isFor());
2192:       assertEquals((-1), node2.getCharno());
2193:       assertFalse(node2.isNumber());
2194:       assertFalse(node2.isScript());
2195:       assertFalse(node2.isGetterDef());
2196:       assertFalse(node2.isCase());
2197:       assertFalse(node2.isTry());
2198:       assertFalse(node2.isCatch());
2199:       assertFalse(node2.isRegExp());
2200:       assertFalse(node2.isNull());
2201:       assertFalse(node2.isParamList());
2202:       assertFalse(node2.isFunction());
2203:       assertFalse(node2.isName());
2204:       assertFalse(node2.isVoid());
2205:       assertFalse(node2.isCall());
2206:       assertEquals((-1), node2.getType());
2207:       assertFalse(node2.isVar());
2208:       assertFalse(node2.isTrue());
2209:       assertFalse(node2.isDefaultCase());
2210:       assertFalse(node2.isNew());
2211:       assertFalse(node2.isDo());
2212:       assertFalse(node2.isAdd());
2213:       assertFalse(node2.isEmpty());
2214:       assertFalse(node2.isSetterDef());
2215:       assertFalse(node2.isContinue());
2216:       assertFalse(node2.isOr());
2217:       assertFalse(node2.isReturn());
2218:       assertFalse(node2.isDec());
2219:       assertFalse(node2.isTypeOf());
2220:       assertFalse(node2.isDelProp());
2221:       assertFalse(node2.isGetElem());
2222:       assertFalse(node2.isAssign());
2223:       assertTrue(node2.hasOneChild());
2224:       assertFalse(node2.isDebugger());
2225:       assertEquals((-1), node2.getSourcePosition());
2226:       assertFalse(node2.isWhile());
2227:       assertFalse(node2.isString());
2228:       assertFalse(node2.isGetProp());
2229:       
2230:       boolean boolean2 = node0.hasChildren();
2231:       assertFalse(node0.equals((Object)node2));
2232:       assertFalse(node0.equals((Object)node1));
2233:       assertFalse(node0.equals((Object)node4));
2234:       assertFalse(node0.equals((Object)node3));
2235:       assertTrue(boolean2 == boolean1);
2236:       assertTrue(boolean2 == boolean0);
2237:       assertFalse(boolean2);
2238:       assertNotSame(node0, node2);
2239:       assertNotSame(node0, node1);
2240:       assertNotSame(node0, node3);
2241:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
2242:       assertEquals(0, arrayList0.size());
2243:       assertTrue(arrayList0.isEmpty());
2244:       assertFalse(node0.isCatch());
2245:       assertFalse(node0.isDefaultCase());
2246:       assertFalse(node0.isRegExp());
2247:       assertEquals(0, node0.getChildCount());
2248:       assertFalse(node0.isFunction());
2249:       assertFalse(node0.isArrayLit());
2250:       assertFalse(node0.isFor());
2251:       assertFalse(node0.isTry());
2252:       assertFalse(node0.isStringKey());
2253:       assertFalse(node0.isDebugger());
2254:       assertFalse(node0.isGetterDef());
2255:       assertFalse(node0.isReturn());
2256:       assertFalse(node0.isDo());
2257:       assertFalse(node0.isAssignAdd());
2258:       assertFalse(node0.isWhile());
2259:       assertFalse(node0.isDec());
2260:       assertFalse(node0.hasChildren());
2261:       assertFalse(node0.isLabel());
2262:       assertFalse(node0.isAssign());
2263:       assertFalse(node0.isTypeOf());
2264:       assertFalse(node0.isVar());
2265:       assertFalse(node0.isGetElem());
2266:       assertFalse(node0.isCall());
2267:       assertFalse(node0.isNew());
2268:       assertFalse(node0.isDelProp());
2269:       assertFalse(node0.isVoid());
2270:       assertFalse(node0.isName());
2271:       assertEquals(83, node0.getType());
2272:       assertFalse(node0.isTrue());
2273:       assertFalse(node0.isNull());
2274:       assertFalse(node0.isOr());
2275:       assertFalse(node0.isAdd());
2276:       assertFalse(node0.isEmpty());
2277:       assertFalse(node0.isInstanceOf());
2278:       assertFalse(node0.isAnd());
2279:       assertFalse(node0.isComma());
2280:       assertFalse(node0.isBreak());
2281:       assertFalse(node0.isThis());
2282:       assertFalse(node0.isExprResult());
2283:       assertFalse(node0.isWith());
2284:       assertFalse(node0.isFalse());
2285:       assertFalse(node0.isCast());
2286:       assertFalse(node0.hasOneChild());
2287:       assertFalse(node0.isHook());
2288:       assertFalse(node0.isLabelName());
2289:       assertFalse(node0.isScript());
2290:       assertFalse(node0.isSwitch());
2291:       assertEquals((-1), node0.getSourcePosition());
2292:       assertFalse(node0.isGetProp());
2293:       assertEquals((-1), node0.getCharno());
2294:       assertFalse(node0.isNot());
2295:       assertFalse(node0.isString());
2296:       assertFalse(node0.isObjectLit());
2297:       assertFalse(node0.isNumber());
2298:       assertTrue(node0.isParamList());
2299:       assertFalse(node0.hasMoreThanOneChild());
2300:       assertEquals((-1), node0.getLineno());
2301:       assertFalse(node0.isCase());
2302:       assertFalse(node0.isBlock());
2303:       assertFalse(node0.isContinue());
2304:       assertFalse(node0.isThrow());
2305:       assertFalse(node0.isIf());
2306:       assertFalse(node0.isNE());
2307:       assertFalse(node0.isInc());
2308:       assertFalse(node0.isSetterDef());
2309:       assertFalse(node0.isIn());
2310:       
2311:       boolean boolean3 = node1.isCall();
2312:       assertFalse(node0.equals((Object)node2));
2313:       assertFalse(node0.equals((Object)node1));
2314:       assertFalse(node0.equals((Object)node4));
2315:       assertFalse(node0.equals((Object)node3));
2316:       assertFalse(node1.equals((Object)node4));
2317:       assertFalse(node1.equals((Object)node0));
2318:       assertTrue(boolean3 == boolean0);
2319:       assertTrue(boolean3 == boolean1);
2320:       assertTrue(boolean3 == boolean2);
2321:       assertFalse(boolean3);
2322:       assertNotSame(node0, node2);
2323:       assertNotSame(node0, node1);
2324:       assertNotSame(node0, node3);
2325:       assertNotSame(node1, node0);
2326:       assertSame(node1, node3);
2327:       assertSame(node1, node2);
2328:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
2329:       assertEquals(0, arrayList0.size());
2330:       assertTrue(arrayList0.isEmpty());
2331:       assertFalse(node0.isCatch());
2332:       assertFalse(node0.isDefaultCase());
2333:       assertFalse(node0.isRegExp());
2334:       assertEquals(0, node0.getChildCount());
2335:       assertFalse(node0.isFunction());
2336:       assertFalse(node0.isArrayLit());
2337:       assertFalse(node0.isFor());
2338:       assertFalse(node0.isTry());
2339:       assertFalse(node0.isStringKey());
2340:       assertFalse(node0.isDebugger());
2341:       assertFalse(node0.isGetterDef());
2342:       assertFalse(node0.isReturn());
2343:       assertFalse(node0.isDo());
2344:       assertFalse(node0.isAssignAdd());
2345:       assertFalse(node0.isWhile());
2346:       assertFalse(node0.isDec());
2347:       assertFalse(node0.hasChildren());
2348:       assertFalse(node0.isLabel());
2349:       assertFalse(node0.isAssign());
2350:       assertFalse(node0.isTypeOf());
2351:       assertFalse(node0.isVar());
2352:       assertFalse(node0.isGetElem());
2353:       assertFalse(node0.isCall());
2354:       assertFalse(node0.isNew());
2355:       assertFalse(node0.isDelProp());
2356:       assertFalse(node0.isVoid());
2357:       assertFalse(node0.isName());
2358:       assertEquals(83, node0.getType());
2359:       assertFalse(node0.isTrue());
2360:       assertFalse(node0.isNull());
2361:       assertFalse(node0.isOr());
2362:       assertFalse(node0.isAdd());
2363:       assertFalse(node0.isEmpty());
2364:       assertFalse(node0.isInstanceOf());
2365:       assertFalse(node0.isAnd());
2366:       assertFalse(node0.isComma());
2367:       assertFalse(node0.isBreak());
2368:       assertFalse(node0.isThis());
2369:       assertFalse(node0.isExprResult());
2370:       assertFalse(node0.isWith());
2371:       assertFalse(node0.isFalse());
2372:       assertFalse(node0.isCast());
2373:       assertFalse(node0.hasOneChild());
2374:       assertFalse(node0.isHook());
2375:       assertFalse(node0.isLabelName());
2376:       assertFalse(node0.isScript());
2377:       assertFalse(node0.isSwitch());
2378:       assertEquals((-1), node0.getSourcePosition());
2379:       assertFalse(node0.isGetProp());
2380:       assertEquals((-1), node0.getCharno());
2381:       assertFalse(node0.isNot());
2382:       assertFalse(node0.isString());
2383:       assertFalse(node0.isObjectLit());
2384:       assertFalse(node0.isNumber());
2385:       assertTrue(node0.isParamList());
2386:       assertFalse(node0.hasMoreThanOneChild());
2387:       assertEquals((-1), node0.getLineno());
2388:       assertFalse(node0.isCase());
2389:       assertFalse(node0.isBlock());
2390:       assertFalse(node0.isContinue());
2391:       assertFalse(node0.isThrow());
2392:       assertFalse(node0.isIf());
2393:       assertFalse(node0.isNE());
2394:       assertFalse(node0.isInc());
2395:       assertFalse(node0.isSetterDef());
2396:       assertFalse(node0.isIn());
2397:       assertFalse(node1.isAnd());
2398:       assertFalse(node1.isInstanceOf());
2399:       assertFalse(node1.isGetProp());
2400:       assertFalse(node1.isScript());
2401:       assertFalse(node1.isNot());
2402:       assertFalse(node1.isObjectLit());
2403:       assertFalse(node1.isThrow());
2404:       assertFalse(node1.isCast());
2405:       assertFalse(node1.isLabelName());
2406:       assertFalse(node1.isLabel());
2407:       assertFalse(node1.isFalse());
2408:       assertFalse(node1.isContinue());
2409:       assertFalse(node1.isDo());
2410:       assertFalse(node1.isAssignAdd());
2411:       assertFalse(node1.isString());
2412:       assertFalse(node1.isOr());
2413:       assertEquals((-1), node1.getSourcePosition());
2414:       assertFalse(node1.isCall());
2415:       assertFalse(node1.isName());
2416:       assertFalse(node1.isGetElem());
2417:       assertFalse(node1.isDelProp());
2418:       assertFalse(node1.isVoid());
2419:       assertFalse(node1.isBreak());
2420:       assertFalse(node1.isTypeOf());
2421:       assertFalse(node1.isExprResult());
2422:       assertFalse(node1.isWhile());
2423:       assertFalse(node1.isAssign());
2424:       assertTrue(node1.hasOneChild());
2425:       assertFalse(node1.isReturn());
2426:       assertFalse(node1.isDec());
2427:       assertFalse(node1.isComma());
2428:       assertFalse(node1.isCatch());
2429:       assertFalse(node1.isNull());
2430:       assertFalse(node1.isSetterDef());
2431:       assertFalse(node1.isTrue());
2432:       assertFalse(node1.isParamList());
2433:       assertFalse(node1.isDebugger());
2434:       assertFalse(node1.isVar());
2435:       assertFalse(node1.isArrayLit());
2436:       assertFalse(node1.isStringKey());
2437:       assertFalse(node1.isAdd());
2438:       assertFalse(node1.isEmpty());
2439:       assertEquals((-1), node1.getType());
2440:       assertFalse(node1.isNew());
2441:       assertFalse(node1.isDefaultCase());
2442:       assertFalse(node1.isFunction());
2443:       assertFalse(node1.hasMoreThanOneChild());
2444:       assertFalse(node1.isIn());
2445:       assertFalse(node1.isCase());
2446:       assertTrue(node1.hasChildren());
2447:       assertEquals((-1), node1.getLineno());
2448:       assertFalse(node1.isNE());
2449:       assertFalse(node1.isSwitch());
2450:       assertFalse(node1.isNumber());
2451:       assertFalse(node1.isInc());
2452:       assertFalse(node1.isIf());
2453:       assertEquals((-1), node1.getCharno());
2454:       assertFalse(node1.isGetterDef());
2455:       assertFalse(node1.isHook());
2456:       assertFalse(node1.isTry());
2457:       assertFalse(node1.isRegExp());
2458:       assertFalse(node1.isThis());
2459:       assertFalse(node1.isFor());
2460:       assertFalse(node1.isWith());
2461:       assertFalse(node1.isBlock());
2462:       assertEquals(1, node1.getChildCount());
2463:       
2464:       Node node5 = Node.newString("Object#Key", (-132), 15);
2465:       assertFalse(node5.equals((Object)node3));
2466:       assertFalse(node5.equals((Object)node0));
2467:       assertFalse(node5.equals((Object)node1));
2468:       assertFalse(node5.equals((Object)node4));
2469:       assertFalse(node5.equals((Object)node2));
2470:       assertNotNull(node5);
2471:       assertNotSame(node5, node4);
2472:       assertFalse(node5.isAnd());
2473:       assertFalse(node5.isObjectLit());
2474:       assertFalse(node5.isNot());
2475:       assertFalse(node5.isWith());
2476:       assertFalse(node5.isInstanceOf());
2477:       assertFalse(node5.isScript());
2478:       assertFalse(node5.isExprResult());
2479:       assertFalse(node5.hasOneChild());
2480:       assertFalse(node5.isAssign());
2481:       assertFalse(node5.isBreak());
2482:       assertFalse(node5.isGetElem());
2483:       assertFalse(node5.isThis());
2484:       assertFalse(node5.isComma());
2485:       assertFalse(node5.isGetProp());
2486:       assertFalse(node5.isDec());
2487:       assertFalse(node5.isTypeOf());
2488:       assertFalse(node5.isReturn());
2489:       assertFalse(node5.hasChildren());
2490:       assertFalse(node5.isHook());
2491:       assertFalse(node5.isCase());
2492:       assertFalse(node5.isDo());
2493:       assertFalse(node5.isSwitch());
2494:       assertEquals((-1), node5.getCharno());
2495:       assertFalse(node5.isNumber());
2496:       assertFalse(node5.isGetterDef());
2497:       assertFalse(node5.isOr());
2498:       assertFalse(node5.isDelProp());
2499:       assertFalse(node5.isArrayLit());
2500:       assertFalse(node5.isLabelName());
2501:       assertFalse(node5.isAdd());
2502:       assertFalse(node5.isEmpty());
2503:       assertFalse(node5.isNew());
2504:       assertFalse(node5.isLabel());
2505:       assertFalse(node5.isDefaultCase());
2506:       assertFalse(node5.isAssignAdd());
2507:       assertFalse(node5.isVar());
2508:       assertFalse(node5.isCatch());
2509:       assertEquals(0, node5.getChildCount());
2510:       assertFalse(node5.isTrue());
2511:       assertFalse(node5.isParamList());
2512:       assertFalse(node5.isDebugger());
2513:       assertFalse(node5.isVoid());
2514:       assertFalse(node5.isStringKey());
2515:       assertFalse(node5.isNull());
2516:       assertFalse(node5.isCall());
2517:       assertFalse(node5.isName());
2518:       assertTrue(node5.isString());
2519:       assertFalse(node5.isRegExp());
2520:       assertFalse(node5.isTry());
2521:       assertFalse(node5.isWhile());
2522:       assertFalse(node5.isBlock());
2523:       assertFalse(node5.isFor());
2524:       assertFalse(node5.isContinue());
2525:       assertFalse(node5.hasMoreThanOneChild());
2526:       assertEquals((-1), node5.getLineno());
2527:       assertFalse(node5.isIn());
2528:       assertEquals((-1), node5.getSourcePosition());
2529:       assertFalse(node5.isIf());
2530:       assertFalse(node5.isNE());
2531:       assertFalse(node5.isFalse());
2532:       assertFalse(node5.isCast());
2533:       assertFalse(node5.isInc());
2534:       assertFalse(node5.isSetterDef());
2535:       assertFalse(node5.isFunction());
2536:       assertEquals(40, node5.getType());
2537:       assertFalse(node5.isThrow());
2538:       
2539:       // Undeclared exception!
2540:       try { 
2541:         node5.replaceChild(node3, node3);
2542:         fail("Expecting exception: NullPointerException");
2543:       
2544:       } catch(NullPointerException e) {
2545:          //
2546:          // no message in exception (getMessage() returned null)
2547:          //
2548:          verifyException("com.google.javascript.rhino.Node", e);
2549:       }
2550:   }
2551: }
RegularFileObject[/tmp/EvoSuite_126_1629223122222/com/google/javascript/rhino/Node_126_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:42 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_126_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_126_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_126_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.SimpleErrorReporter",
258:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
259:       "com.google.common.base.Joiner",
260:       "com.google.common.base.Preconditions",
261:       "com.google.common.base.Joiner$1",
262:       "com.google.common.collect.Collections2",
263:       "com.google.common.base.Joiner$MapJoiner",
264:       "com.google.common.collect.Maps",
265:       "com.google.common.collect.AbstractMultimap",
266:       "com.google.common.collect.AbstractMapBasedMultimap",
267:       "com.google.common.collect.AbstractSetMultimap",
268:       "com.google.common.collect.LinkedHashMultimap",
269:       "com.google.common.collect.AbstractMapEntry",
270:       "com.google.common.collect.ImmutableEntry",
271:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
272:       "com.google.common.collect.AbstractListMultimap",
273:       "com.google.common.collect.ArrayListMultimap",
274:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
275:       "com.google.common.collect.ImmutableCollection",
276:       "com.google.common.collect.RegularImmutableList",
277:       "com.google.common.collect.ObjectArrays",
278:       "com.google.common.collect.ImmutableList",
279:       "com.google.javascript.rhino.jstype.ModificationVisitor",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
281:       "com.google.common.collect.ImmutableCollection$Builder",
282:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
283:       "com.google.common.collect.ImmutableList$Builder",
284:       "com.google.common.collect.UnmodifiableIterator",
285:       "com.google.common.collect.UnmodifiableListIterator",
286:       "com.google.common.collect.Iterators$1",
287:       "com.google.common.collect.Iterators$2",
288:       "com.google.common.collect.Iterators",
289:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
290:       "com.google.javascript.rhino.jstype.JSType$1",
291:       "com.google.javascript.rhino.jstype.JSType",
292:       "com.google.javascript.rhino.jstype.ObjectType",
293:       "com.google.javascript.rhino.jstype.ProxyObjectType",
294:       "com.google.javascript.rhino.jstype.TemplateType",
295:       "com.google.javascript.rhino.jstype.ValueType",
296:       "com.google.javascript.rhino.jstype.BooleanType",
297:       "com.google.javascript.rhino.jstype.NullType",
298:       "com.google.javascript.rhino.jstype.NumberType",
299:       "com.google.javascript.rhino.jstype.StringType",
300:       "com.google.javascript.rhino.jstype.UnknownType",
301:       "com.google.javascript.rhino.jstype.VoidType",
302:       "com.google.javascript.rhino.jstype.AllType",
303:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
304:       "com.google.common.collect.ImmutableMap",
305:       "com.google.common.collect.ImmutableBiMap",
306:       "com.google.common.collect.EmptyImmutableBiMap",
307:       "com.google.javascript.rhino.jstype.PropertyMap$1",
308:       "com.google.javascript.rhino.jstype.PropertyMap",
309:       "com.google.javascript.rhino.jstype.FunctionType",
310:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
311:       "com.google.javascript.rhino.Token",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.JSDocInfo",
330:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
331:       "com.google.common.collect.Sets",
332:       "com.google.common.base.Objects",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
339:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
340:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
341:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.common.collect.Platform",
349:       "com.google.common.collect.Iterables",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.NamedType",
359:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
360:       "com.google.javascript.rhino.jstype.JSType$2",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 17:58:42.944 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
assertNotNull(jSTypeRegistry0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());

ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
assertNotNull(arrayList0);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());

Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
assertNotNull(node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node1 = new Node((-1), node0);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

node0.addChildrenToFront(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertTrue(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isHook());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertTrue(node0.hasChildren());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertTrue(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isHook());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertTrue(node0.hasChildren());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Node node2 = node1.useSourceInfoIfMissingFrom(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertSame(node2, node1);
assertNotSame(node2, node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertTrue(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isHook());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertTrue(node0.hasChildren());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssignAdd());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isIf());
assertFalse(node2.isLabelName());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isStringKey());
assertFalse(node2.isFor());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertEquals((-1), node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node3 = node2.detachFromParent();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertNotNull(node3);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertNotSame(node1, node0);
assertSame(node1, node3);
assertSame(node1, node2);
assertSame(node2, node1);
assertSame(node2, node3);
assertNotSame(node2, node0);
assertSame(node3, node2);
assertNotSame(node3, node0);
assertSame(node3, node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssignAdd());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isIf());
assertFalse(node2.isLabelName());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isStringKey());
assertFalse(node2.isFor());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertEquals((-1), node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node3.isBreak());
assertFalse(node3.isFalse());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertFalse(node3.isInc());
assertFalse(node3.isIf());
assertFalse(node3.isNumber());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertEquals(1, node3.getChildCount());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabel());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasMoreThanOneChild());
assertTrue(node3.hasChildren());
assertFalse(node3.isWith());
assertFalse(node3.isCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isName());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isCall());
assertFalse(node3.isCatch());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isTrue());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isSetterDef());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertTrue(node3.hasOneChild());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isDelProp());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getType());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isExprResult());
assertFalse(node3.isContinue());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);

node1.setWasEmptyNode(true);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertNotSame(node1, node0);
assertSame(node1, node3);
assertSame(node1, node2);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());

Node node4 = Node.newString(2788, "Object#Key", 40, 3466);
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertNotNull(node4);
assertFalse(node4.isAnd());
assertFalse(node4.isWith());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isGetProp());
assertFalse(node4.hasOneChild());
assertFalse(node4.isScript());
assertFalse(node4.isGetElem());
assertEquals(40, node4.getLineno());
assertFalse(node4.isAssign());
assertFalse(node4.isHook());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isBreak());
assertFalse(node4.isExprResult());
assertFalse(node4.isCase());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isNumber());
assertEquals(167306, node4.getSourcePosition());
assertFalse(node4.isAdd());
assertFalse(node4.isEmpty());
assertFalse(node4.isStringKey());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetterDef());
assertFalse(node4.isVar());
assertFalse(node4.isLabel());
assertFalse(node4.isParamList());
assertFalse(node4.isSwitch());
assertEquals(2788, node4.getType());
assertFalse(node4.isArrayLit());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isTry());
assertFalse(node4.isSetterDef());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isFor());
assertFalse(node4.isBlock());
assertFalse(node4.isNull());
assertFalse(node4.isRegExp());
assertFalse(node4.isVoid());
assertFalse(node4.isCatch());
assertEquals(3466, node4.getCharno());
assertFalse(node4.isCall());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.isReturn());
assertFalse(node4.isIn());
assertFalse(node4.isString());
assertFalse(node4.isInc());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isFunction());
assertFalse(node4.isCast());

Iterable<Node> iterable0 = node4.children();
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(iterable0.contains(node4));
assertNotNull(iterable0);
assertFalse(node4.isAnd());
assertFalse(node4.isWith());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isGetProp());
assertFalse(node4.hasOneChild());
assertFalse(node4.isScript());
assertFalse(node4.isGetElem());
assertEquals(40, node4.getLineno());
assertFalse(node4.isAssign());
assertFalse(node4.isHook());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isBreak());
assertFalse(node4.isExprResult());
assertFalse(node4.isCase());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isNumber());
assertEquals(167306, node4.getSourcePosition());
assertFalse(node4.isAdd());
assertFalse(node4.isEmpty());
assertFalse(node4.isStringKey());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetterDef());
assertFalse(node4.isVar());
assertFalse(node4.isLabel());
assertFalse(node4.isParamList());
assertFalse(node4.isSwitch());
assertEquals(2788, node4.getType());
assertFalse(node4.isArrayLit());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isTry());
assertFalse(node4.isSetterDef());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isFor());
assertFalse(node4.isBlock());
assertFalse(node4.isNull());
assertFalse(node4.isRegExp());
assertFalse(node4.isVoid());
assertFalse(node4.isCatch());
assertEquals(3466, node4.getCharno());
assertFalse(node4.isCall());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.isReturn());
assertFalse(node4.isIn());
assertFalse(node4.isString());
assertFalse(node4.isInc());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isFunction());
assertFalse(node4.isCast());

boolean boolean0 = node3.isVoid();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(boolean0);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertNotSame(node1, node0);
assertSame(node1, node3);
assertSame(node1, node2);
assertSame(node2, node1);
assertSame(node2, node3);
assertNotSame(node2, node0);
assertSame(node3, node2);
assertNotSame(node3, node0);
assertSame(node3, node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssignAdd());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isIf());
assertFalse(node2.isLabelName());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isStringKey());
assertFalse(node2.isFor());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertEquals((-1), node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node3.isBreak());
assertFalse(node3.isFalse());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertFalse(node3.isInc());
assertFalse(node3.isIf());
assertFalse(node3.isNumber());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertEquals(1, node3.getChildCount());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabel());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasMoreThanOneChild());
assertTrue(node3.hasChildren());
assertFalse(node3.isWith());
assertFalse(node3.isCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isName());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isCall());
assertFalse(node3.isCatch());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isTrue());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isSetterDef());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertTrue(node3.hasOneChild());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isDelProp());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getType());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isExprResult());
assertFalse(node3.isContinue());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());

boolean boolean1 = node2.isDebugger();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertNotSame(node1, node0);
assertSame(node1, node3);
assertSame(node1, node2);
assertSame(node2, node1);
assertSame(node2, node3);
assertNotSame(node2, node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssignAdd());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isIf());
assertFalse(node2.isLabelName());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isStringKey());
assertFalse(node2.isFor());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertEquals((-1), node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());

boolean boolean2 = node0.hasChildren();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());

boolean boolean3 = node1.isCall();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertNotSame(node1, node0);
assertSame(node1, node3);
assertSame(node1, node2);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());

Node node5 = Node.newString("Object#Key", (-132), 15);
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertNotNull(node5);
assertNotSame(node5, node4);
assertFalse(node5.isAnd());
assertFalse(node5.isObjectLit());
assertFalse(node5.isNot());
assertFalse(node5.isWith());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isScript());
assertFalse(node5.isExprResult());
assertFalse(node5.hasOneChild());
assertFalse(node5.isAssign());
assertFalse(node5.isBreak());
assertFalse(node5.isGetElem());
assertFalse(node5.isThis());
assertFalse(node5.isComma());
assertFalse(node5.isGetProp());
assertFalse(node5.isDec());
assertFalse(node5.isTypeOf());
assertFalse(node5.isReturn());
assertFalse(node5.hasChildren());
assertFalse(node5.isHook());
assertFalse(node5.isCase());
assertFalse(node5.isDo());
assertFalse(node5.isSwitch());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isNumber());
assertFalse(node5.isGetterDef());
assertFalse(node5.isOr());
assertFalse(node5.isDelProp());
assertFalse(node5.isArrayLit());
assertFalse(node5.isLabelName());
assertFalse(node5.isAdd());
assertFalse(node5.isEmpty());
assertFalse(node5.isNew());
assertFalse(node5.isLabel());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isVar());
assertFalse(node5.isCatch());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isTrue());
assertFalse(node5.isParamList());
assertFalse(node5.isDebugger());
assertFalse(node5.isVoid());
assertFalse(node5.isStringKey());
assertFalse(node5.isNull());
assertFalse(node5.isCall());
assertFalse(node5.isName());
assertTrue(node5.isString());
assertFalse(node5.isRegExp());
assertFalse(node5.isTry());
assertFalse(node5.isWhile());
assertFalse(node5.isBlock());
assertFalse(node5.isFor());
assertFalse(node5.isContinue());
assertFalse(node5.hasMoreThanOneChild());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isIn());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isIf());
assertFalse(node5.isNE());
assertFalse(node5.isFalse());
assertFalse(node5.isCast());
assertFalse(node5.isInc());
assertFalse(node5.isSetterDef());
assertFalse(node5.isFunction());
assertEquals(40, node5.getType());
assertFalse(node5.isThrow());

node5.replaceChild(node3, node3);

[MASTER] 17:58:44.412 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_129_1629223123838/com/google/javascript/rhino/Node_129_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_129_1629223123838/com/google/javascript/rhino/Node_129_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:44.413 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:44.413 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:44.414 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 868
[MASTER] 17:58:44.416 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_129_1629223123838/com/google/javascript/rhino/Node_129_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSTypeRegistry;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.mock.java.io.MockFile;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_129_tmp__ESTest extends Node_129_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
24:       assertNotNull(simpleErrorReporter0);
25:       
26:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
27:       assertNotNull(jSTypeRegistry0);
28:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
29:       
30:       Node node0 = Node.newNumber((double) (-432), 152, 1091);
31:       assertNotNull(node0);
32:       assertFalse(node0.isExprResult());
33:       assertFalse(node0.isScript());
34:       assertFalse(node0.hasOneChild());
35:       assertFalse(node0.isGetElem());
36:       assertFalse(node0.isWith());
37:       assertFalse(node0.isCast());
38:       assertFalse(node0.isInstanceOf());
39:       assertFalse(node0.isDec());
40:       assertFalse(node0.isTypeOf());
41:       assertFalse(node0.hasChildren());
42:       assertFalse(node0.isAssign());
43:       assertFalse(node0.isLabel());
44:       assertFalse(node0.isAssignAdd());
45:       assertFalse(node0.isBreak());
46:       assertEquals(152, node0.getLineno());
47:       assertFalse(node0.isOr());
48:       assertFalse(node0.isBlock());
49:       assertFalse(node0.isNew());
50:       assertFalse(node0.isAdd());
51:       assertFalse(node0.isSwitch());
52:       assertFalse(node0.isDo());
53:       assertEquals(39, node0.getType());
54:       assertFalse(node0.isVar());
55:       assertFalse(node0.isHook());
56:       assertFalse(node0.hasMoreThanOneChild());
57:       assertFalse(node0.isThis());
58:       assertFalse(node0.isParamList());
59:       assertFalse(node0.isLabelName());
60:       assertFalse(node0.isCase());
61:       assertFalse(node0.isStringKey());
62:       assertFalse(node0.isGetterDef());
63:       assertFalse(node0.isTrue());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isDefaultCase());
66:       assertFalse(node0.isTry());
67:       assertFalse(node0.isVoid());
68:       assertFalse(node0.isFor());
69:       assertFalse(node0.isCatch());
70:       assertFalse(node0.isRegExp());
71:       assertFalse(node0.isFunction());
72:       assertEquals(0, node0.getChildCount());
73:       assertFalse(node0.isSetterDef());
74:       assertFalse(node0.isNE());
75:       assertFalse(node0.isIf());
76:       assertFalse(node0.isDelProp());
77:       assertFalse(node0.isName());
78:       assertFalse(node0.isEmpty());
79:       assertFalse(node0.isNull());
80:       assertFalse(node0.isIn());
81:       assertEquals(623683, node0.getSourcePosition());
82:       assertFalse(node0.isInc());
83:       assertFalse(node0.isFalse());
84:       assertFalse(node0.isContinue());
85:       assertFalse(node0.isWhile());
86:       assertFalse(node0.isCall());
87:       assertFalse(node0.isThrow());
88:       assertFalse(node0.isComma());
89:       assertFalse(node0.isGetProp());
90:       assertFalse(node0.isReturn());
91:       assertTrue(node0.isNumber());
92:       assertFalse(node0.isAnd());
93:       assertEquals(1091, node0.getCharno());
94:       assertFalse(node0.isString());
95:       assertFalse(node0.isObjectLit());
96:       assertFalse(node0.isDebugger());
97:       assertFalse(node0.isNot());
98:       
99:       Node node1 = new Node((-432), node0, node0, node0, 2, 2);
100:       assertFalse(node1.equals((Object)node0));
101:       assertNotNull(node1);
102:       assertFalse(node0.isExprResult());
103:       assertFalse(node0.isScript());
104:       assertFalse(node0.hasOneChild());
105:       assertFalse(node0.isGetElem());
106:       assertFalse(node0.isWith());
107:       assertFalse(node0.isCast());
108:       assertFalse(node0.isInstanceOf());
109:       assertFalse(node0.isDec());
110:       assertFalse(node0.isTypeOf());
111:       assertFalse(node0.hasChildren());
112:       assertFalse(node0.isAssign());
113:       assertFalse(node0.isLabel());
114:       assertFalse(node0.isAssignAdd());
115:       assertFalse(node0.isBreak());
116:       assertEquals(152, node0.getLineno());
117:       assertFalse(node0.isOr());
118:       assertFalse(node0.isBlock());
119:       assertFalse(node0.isNew());
120:       assertFalse(node0.isAdd());
121:       assertFalse(node0.isSwitch());
122:       assertFalse(node0.isDo());
123:       assertEquals(39, node0.getType());
124:       assertFalse(node0.isVar());
125:       assertFalse(node0.isHook());
126:       assertFalse(node0.hasMoreThanOneChild());
127:       assertFalse(node0.isThis());
128:       assertFalse(node0.isParamList());
129:       assertFalse(node0.isLabelName());
130:       assertFalse(node0.isCase());
131:       assertFalse(node0.isStringKey());
132:       assertFalse(node0.isGetterDef());
133:       assertFalse(node0.isTrue());
134:       assertFalse(node0.isArrayLit());
135:       assertFalse(node0.isDefaultCase());
136:       assertFalse(node0.isTry());
137:       assertFalse(node0.isVoid());
138:       assertFalse(node0.isFor());
139:       assertFalse(node0.isCatch());
140:       assertFalse(node0.isRegExp());
141:       assertFalse(node0.isFunction());
142:       assertEquals(0, node0.getChildCount());
143:       assertFalse(node0.isSetterDef());
144:       assertFalse(node0.isNE());
145:       assertFalse(node0.isIf());
146:       assertFalse(node0.isDelProp());
147:       assertFalse(node0.isName());
148:       assertFalse(node0.isEmpty());
149:       assertFalse(node0.isNull());
150:       assertFalse(node0.isIn());
151:       assertEquals(623683, node0.getSourcePosition());
152:       assertFalse(node0.isInc());
153:       assertFalse(node0.isFalse());
154:       assertFalse(node0.isContinue());
155:       assertFalse(node0.isWhile());
156:       assertFalse(node0.isCall());
157:       assertFalse(node0.isThrow());
158:       assertFalse(node0.isComma());
159:       assertFalse(node0.isGetProp());
160:       assertFalse(node0.isReturn());
161:       assertTrue(node0.isNumber());
162:       assertFalse(node0.isAnd());
163:       assertEquals(1091, node0.getCharno());
164:       assertFalse(node0.isString());
165:       assertFalse(node0.isObjectLit());
166:       assertFalse(node0.isDebugger());
167:       assertFalse(node0.isNot());
168:       assertFalse(node1.isLabel());
169:       assertEquals((-432), node1.getType());
170:       assertFalse(node1.isOr());
171:       assertFalse(node1.isReturn());
172:       assertFalse(node1.isTypeOf());
173:       assertFalse(node1.isDec());
174:       assertFalse(node1.isContinue());
175:       assertFalse(node1.isNumber());
176:       assertFalse(node1.hasMoreThanOneChild());
177:       assertFalse(node1.isLabelName());
178:       assertFalse(node1.isGetElem());
179:       assertFalse(node1.isBlock());
180:       assertFalse(node1.isExprResult());
181:       assertFalse(node1.isScript());
182:       assertFalse(node1.isWith());
183:       assertFalse(node1.isAssign());
184:       assertFalse(node1.isWhile());
185:       assertFalse(node1.isGetProp());
186:       assertFalse(node1.isThis());
187:       assertFalse(node1.isSetterDef());
188:       assertFalse(node1.isInstanceOf());
189:       assertFalse(node1.isCatch());
190:       assertFalse(node1.isObjectLit());
191:       assertFalse(node1.isNot());
192:       assertFalse(node1.isAnd());
193:       assertFalse(node1.isInc());
194:       assertEquals(8194, node1.getSourcePosition());
195:       assertFalse(node1.isCast());
196:       assertFalse(node1.isFunction());
197:       assertFalse(node1.isFalse());
198:       assertFalse(node1.isThrow());
199:       assertTrue(node1.hasChildren());
200:       assertEquals(1, node1.getChildCount());
201:       assertFalse(node1.isGetterDef());
202:       assertFalse(node1.isIn());
203:       assertFalse(node1.isArrayLit());
204:       assertFalse(node1.isNE());
205:       assertFalse(node1.isDelProp());
206:       assertFalse(node1.isSwitch());
207:       assertFalse(node1.isIf());
208:       assertFalse(node1.isTry());
209:       assertFalse(node1.isDebugger());
210:       assertFalse(node1.isHook());
211:       assertFalse(node1.isRegExp());
212:       assertFalse(node1.isString());
213:       assertFalse(node1.isCase());
214:       assertFalse(node1.isFor());
215:       assertTrue(node1.hasOneChild());
216:       assertEquals(2, node1.getLineno());
217:       assertFalse(node1.isComma());
218:       assertFalse(node1.isName());
219:       assertFalse(node1.isStringKey());
220:       assertFalse(node1.isBreak());
221:       assertFalse(node1.isCall());
222:       assertFalse(node1.isNull());
223:       assertEquals(2, node1.getCharno());
224:       assertFalse(node1.isParamList());
225:       assertFalse(node1.isVoid());
226:       assertFalse(node1.isNew());
227:       assertFalse(node1.isAdd());
228:       assertFalse(node1.isTrue());
229:       assertFalse(node1.isEmpty());
230:       assertFalse(node1.isDo());
231:       assertFalse(node1.isVar());
232:       assertFalse(node1.isDefaultCase());
233:       assertFalse(node1.isAssignAdd());
234:       
235:       boolean boolean0 = node1.isCast();
236:       assertFalse(node0.equals((Object)node1));
237:       assertFalse(node1.equals((Object)node0));
238:       assertFalse(boolean0);
239:       assertFalse(node0.isExprResult());
240:       assertFalse(node0.isScript());
241:       assertFalse(node0.hasOneChild());
242:       assertFalse(node0.isGetElem());
243:       assertFalse(node0.isWith());
244:       assertFalse(node0.isCast());
245:       assertFalse(node0.isInstanceOf());
246:       assertFalse(node0.isDec());
247:       assertFalse(node0.isTypeOf());
248:       assertFalse(node0.hasChildren());
249:       assertFalse(node0.isAssign());
250:       assertFalse(node0.isLabel());
251:       assertFalse(node0.isAssignAdd());
252:       assertFalse(node0.isBreak());
253:       assertEquals(152, node0.getLineno());
254:       assertFalse(node0.isOr());
255:       assertFalse(node0.isBlock());
256:       assertFalse(node0.isNew());
257:       assertFalse(node0.isAdd());
258:       assertFalse(node0.isSwitch());
259:       assertFalse(node0.isDo());
260:       assertEquals(39, node0.getType());
261:       assertFalse(node0.isVar());
262:       assertFalse(node0.isHook());
263:       assertFalse(node0.hasMoreThanOneChild());
264:       assertFalse(node0.isThis());
265:       assertFalse(node0.isParamList());
266:       assertFalse(node0.isLabelName());
267:       assertFalse(node0.isCase());
268:       assertFalse(node0.isStringKey());
269:       assertFalse(node0.isGetterDef());
270:       assertFalse(node0.isTrue());
271:       assertFalse(node0.isArrayLit());
272:       assertFalse(node0.isDefaultCase());
273:       assertFalse(node0.isTry());
274:       assertFalse(node0.isVoid());
275:       assertFalse(node0.isFor());
276:       assertFalse(node0.isCatch());
277:       assertFalse(node0.isRegExp());
278:       assertFalse(node0.isFunction());
279:       assertEquals(0, node0.getChildCount());
280:       assertFalse(node0.isSetterDef());
281:       assertFalse(node0.isNE());
282:       assertFalse(node0.isIf());
283:       assertFalse(node0.isDelProp());
284:       assertFalse(node0.isName());
285:       assertFalse(node0.isEmpty());
286:       assertFalse(node0.isNull());
287:       assertFalse(node0.isIn());
288:       assertEquals(623683, node0.getSourcePosition());
289:       assertFalse(node0.isInc());
290:       assertFalse(node0.isFalse());
291:       assertFalse(node0.isContinue());
292:       assertFalse(node0.isWhile());
293:       assertFalse(node0.isCall());
294:       assertFalse(node0.isThrow());
295:       assertFalse(node0.isComma());
296:       assertFalse(node0.isGetProp());
297:       assertFalse(node0.isReturn());
298:       assertTrue(node0.isNumber());
299:       assertFalse(node0.isAnd());
300:       assertEquals(1091, node0.getCharno());
301:       assertFalse(node0.isString());
302:       assertFalse(node0.isObjectLit());
303:       assertFalse(node0.isDebugger());
304:       assertFalse(node0.isNot());
305:       assertFalse(node1.isLabel());
306:       assertEquals((-432), node1.getType());
307:       assertFalse(node1.isOr());
308:       assertFalse(node1.isReturn());
309:       assertFalse(node1.isTypeOf());
310:       assertFalse(node1.isDec());
311:       assertFalse(node1.isContinue());
312:       assertFalse(node1.isNumber());
313:       assertFalse(node1.hasMoreThanOneChild());
314:       assertFalse(node1.isLabelName());
315:       assertFalse(node1.isGetElem());
316:       assertFalse(node1.isBlock());
317:       assertFalse(node1.isExprResult());
318:       assertFalse(node1.isScript());
319:       assertFalse(node1.isWith());
320:       assertFalse(node1.isAssign());
321:       assertFalse(node1.isWhile());
322:       assertFalse(node1.isGetProp());
323:       assertFalse(node1.isThis());
324:       assertFalse(node1.isSetterDef());
325:       assertFalse(node1.isInstanceOf());
326:       assertFalse(node1.isCatch());
327:       assertFalse(node1.isObjectLit());
328:       assertFalse(node1.isNot());
329:       assertFalse(node1.isAnd());
330:       assertFalse(node1.isInc());
331:       assertEquals(8194, node1.getSourcePosition());
332:       assertFalse(node1.isCast());
333:       assertFalse(node1.isFunction());
334:       assertFalse(node1.isFalse());
335:       assertFalse(node1.isThrow());
336:       assertTrue(node1.hasChildren());
337:       assertEquals(1, node1.getChildCount());
338:       assertFalse(node1.isGetterDef());
339:       assertFalse(node1.isIn());
340:       assertFalse(node1.isArrayLit());
341:       assertFalse(node1.isNE());
342:       assertFalse(node1.isDelProp());
343:       assertFalse(node1.isSwitch());
344:       assertFalse(node1.isIf());
345:       assertFalse(node1.isTry());
346:       assertFalse(node1.isDebugger());
347:       assertFalse(node1.isHook());
348:       assertFalse(node1.isRegExp());
349:       assertFalse(node1.isString());
350:       assertFalse(node1.isCase());
351:       assertFalse(node1.isFor());
352:       assertTrue(node1.hasOneChild());
353:       assertEquals(2, node1.getLineno());
354:       assertFalse(node1.isComma());
355:       assertFalse(node1.isName());
356:       assertFalse(node1.isStringKey());
357:       assertFalse(node1.isBreak());
358:       assertFalse(node1.isCall());
359:       assertFalse(node1.isNull());
360:       assertEquals(2, node1.getCharno());
361:       assertFalse(node1.isParamList());
362:       assertFalse(node1.isVoid());
363:       assertFalse(node1.isNew());
364:       assertFalse(node1.isAdd());
365:       assertFalse(node1.isTrue());
366:       assertFalse(node1.isEmpty());
367:       assertFalse(node1.isDo());
368:       assertFalse(node1.isVar());
369:       assertFalse(node1.isDefaultCase());
370:       assertFalse(node1.isAssignAdd());
371:       
372:       boolean boolean1 = node1.isFromExterns();
373:       assertFalse(node0.equals((Object)node1));
374:       assertFalse(node1.equals((Object)node0));
375:       assertTrue(boolean1 == boolean0);
376:       assertFalse(boolean1);
377:       assertFalse(node0.isExprResult());
378:       assertFalse(node0.isScript());
379:       assertFalse(node0.hasOneChild());
380:       assertFalse(node0.isGetElem());
381:       assertFalse(node0.isWith());
382:       assertFalse(node0.isCast());
383:       assertFalse(node0.isInstanceOf());
384:       assertFalse(node0.isDec());
385:       assertFalse(node0.isTypeOf());
386:       assertFalse(node0.hasChildren());
387:       assertFalse(node0.isAssign());
388:       assertFalse(node0.isLabel());
389:       assertFalse(node0.isAssignAdd());
390:       assertFalse(node0.isBreak());
391:       assertEquals(152, node0.getLineno());
392:       assertFalse(node0.isOr());
393:       assertFalse(node0.isBlock());
394:       assertFalse(node0.isNew());
395:       assertFalse(node0.isAdd());
396:       assertFalse(node0.isSwitch());
397:       assertFalse(node0.isDo());
398:       assertEquals(39, node0.getType());
399:       assertFalse(node0.isVar());
400:       assertFalse(node0.isHook());
401:       assertFalse(node0.hasMoreThanOneChild());
402:       assertFalse(node0.isThis());
403:       assertFalse(node0.isParamList());
404:       assertFalse(node0.isLabelName());
405:       assertFalse(node0.isCase());
406:       assertFalse(node0.isStringKey());
407:       assertFalse(node0.isGetterDef());
408:       assertFalse(node0.isTrue());
409:       assertFalse(node0.isArrayLit());
410:       assertFalse(node0.isDefaultCase());
411:       assertFalse(node0.isTry());
412:       assertFalse(node0.isVoid());
413:       assertFalse(node0.isFor());
414:       assertFalse(node0.isCatch());
415:       assertFalse(node0.isRegExp());
416:       assertFalse(node0.isFunction());
417:       assertEquals(0, node0.getChildCount());
418:       assertFalse(node0.isSetterDef());
419:       assertFalse(node0.isNE());
420:       assertFalse(node0.isIf());
421:       assertFalse(node0.isDelProp());
422:       assertFalse(node0.isName());
423:       assertFalse(node0.isEmpty());
424:       assertFalse(node0.isNull());
425:       assertFalse(node0.isIn());
426:       assertEquals(623683, node0.getSourcePosition());
427:       assertFalse(node0.isInc());
428:       assertFalse(node0.isFalse());
429:       assertFalse(node0.isContinue());
430:       assertFalse(node0.isWhile());
431:       assertFalse(node0.isCall());
432:       assertFalse(node0.isThrow());
433:       assertFalse(node0.isComma());
434:       assertFalse(node0.isGetProp());
435:       assertFalse(node0.isReturn());
436:       assertTrue(node0.isNumber());
437:       assertFalse(node0.isAnd());
438:       assertEquals(1091, node0.getCharno());
439:       assertFalse(node0.isString());
440:       assertFalse(node0.isObjectLit());
441:       assertFalse(node0.isDebugger());
442:       assertFalse(node0.isNot());
443:       assertFalse(node1.isLabel());
444:       assertEquals((-432), node1.getType());
445:       assertFalse(node1.isOr());
446:       assertFalse(node1.isReturn());
447:       assertFalse(node1.isTypeOf());
448:       assertFalse(node1.isDec());
449:       assertFalse(node1.isContinue());
450:       assertFalse(node1.isNumber());
451:       assertFalse(node1.hasMoreThanOneChild());
452:       assertFalse(node1.isLabelName());
453:       assertFalse(node1.isGetElem());
454:       assertFalse(node1.isBlock());
455:       assertFalse(node1.isExprResult());
456:       assertFalse(node1.isScript());
457:       assertFalse(node1.isWith());
458:       assertFalse(node1.isAssign());
459:       assertFalse(node1.isWhile());
460:       assertFalse(node1.isGetProp());
461:       assertFalse(node1.isThis());
462:       assertFalse(node1.isSetterDef());
463:       assertFalse(node1.isInstanceOf());
464:       assertFalse(node1.isCatch());
465:       assertFalse(node1.isObjectLit());
466:       assertFalse(node1.isNot());
467:       assertFalse(node1.isAnd());
468:       assertFalse(node1.isInc());
469:       assertEquals(8194, node1.getSourcePosition());
470:       assertFalse(node1.isCast());
471:       assertFalse(node1.isFunction());
472:       assertFalse(node1.isFalse());
473:       assertFalse(node1.isThrow());
474:       assertTrue(node1.hasChildren());
475:       assertEquals(1, node1.getChildCount());
476:       assertFalse(node1.isGetterDef());
477:       assertFalse(node1.isIn());
478:       assertFalse(node1.isArrayLit());
479:       assertFalse(node1.isNE());
480:       assertFalse(node1.isDelProp());
481:       assertFalse(node1.isSwitch());
482:       assertFalse(node1.isIf());
483:       assertFalse(node1.isTry());
484:       assertFalse(node1.isDebugger());
485:       assertFalse(node1.isHook());
486:       assertFalse(node1.isRegExp());
487:       assertFalse(node1.isString());
488:       assertFalse(node1.isCase());
489:       assertFalse(node1.isFor());
490:       assertTrue(node1.hasOneChild());
491:       assertEquals(2, node1.getLineno());
492:       assertFalse(node1.isComma());
493:       assertFalse(node1.isName());
494:       assertFalse(node1.isStringKey());
495:       assertFalse(node1.isBreak());
496:       assertFalse(node1.isCall());
497:       assertFalse(node1.isNull());
498:       assertEquals(2, node1.getCharno());
499:       assertFalse(node1.isParamList());
500:       assertFalse(node1.isVoid());
501:       assertFalse(node1.isNew());
502:       assertFalse(node1.isAdd());
503:       assertFalse(node1.isTrue());
504:       assertFalse(node1.isEmpty());
505:       assertFalse(node1.isDo());
506:       assertFalse(node1.isVar());
507:       assertFalse(node1.isDefaultCase());
508:       assertFalse(node1.isAssignAdd());
509:       
510:       boolean boolean2 = node0.isVoid();
511:       assertFalse(node0.equals((Object)node1));
512:       assertTrue(boolean2 == boolean1);
513:       assertTrue(boolean2 == boolean0);
514:       assertFalse(boolean2);
515:       assertFalse(node0.isExprResult());
516:       assertFalse(node0.isScript());
517:       assertFalse(node0.hasOneChild());
518:       assertFalse(node0.isGetElem());
519:       assertFalse(node0.isWith());
520:       assertFalse(node0.isCast());
521:       assertFalse(node0.isInstanceOf());
522:       assertFalse(node0.isDec());
523:       assertFalse(node0.isTypeOf());
524:       assertFalse(node0.hasChildren());
525:       assertFalse(node0.isAssign());
526:       assertFalse(node0.isLabel());
527:       assertFalse(node0.isAssignAdd());
528:       assertFalse(node0.isBreak());
529:       assertEquals(152, node0.getLineno());
530:       assertFalse(node0.isOr());
531:       assertFalse(node0.isBlock());
532:       assertFalse(node0.isNew());
533:       assertFalse(node0.isAdd());
534:       assertFalse(node0.isSwitch());
535:       assertFalse(node0.isDo());
536:       assertEquals(39, node0.getType());
537:       assertFalse(node0.isVar());
538:       assertFalse(node0.isHook());
539:       assertFalse(node0.hasMoreThanOneChild());
540:       assertFalse(node0.isThis());
541:       assertFalse(node0.isParamList());
542:       assertFalse(node0.isLabelName());
543:       assertFalse(node0.isCase());
544:       assertFalse(node0.isStringKey());
545:       assertFalse(node0.isGetterDef());
546:       assertFalse(node0.isTrue());
547:       assertFalse(node0.isArrayLit());
548:       assertFalse(node0.isDefaultCase());
549:       assertFalse(node0.isTry());
550:       assertFalse(node0.isVoid());
551:       assertFalse(node0.isFor());
552:       assertFalse(node0.isCatch());
553:       assertFalse(node0.isRegExp());
554:       assertFalse(node0.isFunction());
555:       assertEquals(0, node0.getChildCount());
556:       assertFalse(node0.isSetterDef());
557:       assertFalse(node0.isNE());
558:       assertFalse(node0.isIf());
559:       assertFalse(node0.isDelProp());
560:       assertFalse(node0.isName());
561:       assertFalse(node0.isEmpty());
562:       assertFalse(node0.isNull());
563:       assertFalse(node0.isIn());
564:       assertEquals(623683, node0.getSourcePosition());
565:       assertFalse(node0.isInc());
566:       assertFalse(node0.isFalse());
567:       assertFalse(node0.isContinue());
568:       assertFalse(node0.isWhile());
569:       assertFalse(node0.isCall());
570:       assertFalse(node0.isThrow());
571:       assertFalse(node0.isComma());
572:       assertFalse(node0.isGetProp());
573:       assertFalse(node0.isReturn());
574:       assertTrue(node0.isNumber());
575:       assertFalse(node0.isAnd());
576:       assertEquals(1091, node0.getCharno());
577:       assertFalse(node0.isString());
578:       assertFalse(node0.isObjectLit());
579:       assertFalse(node0.isDebugger());
580:       assertFalse(node0.isNot());
581:       
582:       MockFile mockFile0 = new MockFile("SMHqiFE ");
583:       assertNotNull(mockFile0);
584:       
585:       MockFile mockFile1 = new MockFile(mockFile0, "SMHqiFE ");
586:       assertFalse(mockFile1.equals((Object)mockFile0));
587:       assertNotNull(mockFile1);
588:       
589:       Node node2 = node0.detachFromParent();
590:       assertFalse(node0.equals((Object)node1));
591:       assertFalse(node2.equals((Object)node1));
592:       assertNotNull(node2);
593:       assertSame(node0, node2);
594:       assertSame(node2, node0);
595:       assertFalse(node0.isExprResult());
596:       assertFalse(node0.isScript());
597:       assertFalse(node0.hasOneChild());
598:       assertFalse(node0.isGetElem());
599:       assertFalse(node0.isWith());
600:       assertFalse(node0.isCast());
601:       assertFalse(node0.isInstanceOf());
602:       assertFalse(node0.isDec());
603:       assertFalse(node0.isTypeOf());
604:       assertFalse(node0.hasChildren());
605:       assertFalse(node0.isAssign());
606:       assertFalse(node0.isLabel());
607:       assertFalse(node0.isAssignAdd());
608:       assertFalse(node0.isBreak());
609:       assertEquals(152, node0.getLineno());
610:       assertFalse(node0.isOr());
611:       assertFalse(node0.isBlock());
612:       assertFalse(node0.isNew());
613:       assertFalse(node0.isAdd());
614:       assertFalse(node0.isSwitch());
615:       assertFalse(node0.isDo());
616:       assertEquals(39, node0.getType());
617:       assertFalse(node0.isVar());
618:       assertFalse(node0.isHook());
619:       assertFalse(node0.hasMoreThanOneChild());
620:       assertFalse(node0.isThis());
621:       assertFalse(node0.isParamList());
622:       assertFalse(node0.isLabelName());
623:       assertFalse(node0.isCase());
624:       assertFalse(node0.isStringKey());
625:       assertFalse(node0.isGetterDef());
626:       assertFalse(node0.isTrue());
627:       assertFalse(node0.isArrayLit());
628:       assertFalse(node0.isDefaultCase());
629:       assertFalse(node0.isTry());
630:       assertFalse(node0.isVoid());
631:       assertFalse(node0.isFor());
632:       assertFalse(node0.isCatch());
633:       assertFalse(node0.isRegExp());
634:       assertFalse(node0.isFunction());
635:       assertEquals(0, node0.getChildCount());
636:       assertFalse(node0.isSetterDef());
637:       assertFalse(node0.isNE());
638:       assertFalse(node0.isIf());
639:       assertFalse(node0.isDelProp());
640:       assertFalse(node0.isName());
641:       assertFalse(node0.isEmpty());
642:       assertFalse(node0.isNull());
643:       assertFalse(node0.isIn());
644:       assertEquals(623683, node0.getSourcePosition());
645:       assertFalse(node0.isInc());
646:       assertFalse(node0.isFalse());
647:       assertFalse(node0.isContinue());
648:       assertFalse(node0.isWhile());
649:       assertFalse(node0.isCall());
650:       assertFalse(node0.isThrow());
651:       assertFalse(node0.isComma());
652:       assertFalse(node0.isGetProp());
653:       assertFalse(node0.isReturn());
654:       assertTrue(node0.isNumber());
655:       assertFalse(node0.isAnd());
656:       assertEquals(1091, node0.getCharno());
657:       assertFalse(node0.isString());
658:       assertFalse(node0.isObjectLit());
659:       assertFalse(node0.isDebugger());
660:       assertFalse(node0.isNot());
661:       assertFalse(node2.hasOneChild());
662:       assertFalse(node2.isExprResult());
663:       assertFalse(node2.isCast());
664:       assertFalse(node2.isAssign());
665:       assertFalse(node2.isDec());
666:       assertFalse(node2.isScript());
667:       assertFalse(node2.hasChildren());
668:       assertFalse(node2.isAssignAdd());
669:       assertFalse(node2.isLabel());
670:       assertFalse(node2.isGetProp());
671:       assertFalse(node2.isObjectLit());
672:       assertFalse(node2.isContinue());
673:       assertEquals(1091, node2.getCharno());
674:       assertFalse(node2.isNot());
675:       assertFalse(node2.isAnd());
676:       assertFalse(node2.isLabelName());
677:       assertFalse(node2.isBlock());
678:       assertFalse(node2.isHook());
679:       assertEquals(623683, node2.getSourcePosition());
680:       assertFalse(node2.isFalse());
681:       assertFalse(node2.isCase());
682:       assertFalse(node2.isInc());
683:       assertEquals(39, node2.getType());
684:       assertFalse(node2.isThis());
685:       assertFalse(node2.isSetterDef());
686:       assertFalse(node2.isThrow());
687:       assertFalse(node2.isInstanceOf());
688:       assertFalse(node2.isCatch());
689:       assertFalse(node2.isWith());
690:       assertFalse(node2.isIn());
691:       assertFalse(node2.hasMoreThanOneChild());
692:       assertEquals(152, node2.getLineno());
693:       assertFalse(node2.isNE());
694:       assertFalse(node2.isIf());
695:       assertFalse(node2.isArrayLit());
696:       assertFalse(node2.isDebugger());
697:       assertFalse(node2.isFunction());
698:       assertFalse(node2.isRegExp());
699:       assertFalse(node2.isFor());
700:       assertFalse(node2.isEmpty());
701:       assertFalse(node2.isTry());
702:       assertFalse(node2.isDefaultCase());
703:       assertEquals(0, node2.getChildCount());
704:       assertTrue(node2.isNumber());
705:       assertFalse(node2.isGetterDef());
706:       assertFalse(node2.isParamList());
707:       assertFalse(node2.isStringKey());
708:       assertFalse(node2.isSwitch());
709:       assertFalse(node2.isVar());
710:       assertFalse(node2.isNew());
711:       assertFalse(node2.isAdd());
712:       assertFalse(node2.isCall());
713:       assertFalse(node2.isWhile());
714:       assertFalse(node2.isString());
715:       assertFalse(node2.isDo());
716:       assertFalse(node2.isOr());
717:       assertFalse(node2.isReturn());
718:       assertFalse(node2.isComma());
719:       assertFalse(node2.isTypeOf());
720:       assertFalse(node2.isDelProp());
721:       assertFalse(node2.isBreak());
722:       assertFalse(node2.isNull());
723:       assertFalse(node2.isGetElem());
724:       assertFalse(node2.isTrue());
725:       assertFalse(node2.isVoid());
726:       assertFalse(node2.isName());
727:       
728:       node2.setWasEmptyNode(false);
729:       assertFalse(node0.equals((Object)node1));
730:       assertFalse(node2.equals((Object)node1));
731:       assertSame(node0, node2);
732:       assertSame(node2, node0);
733:       assertFalse(node0.isExprResult());
734:       assertFalse(node0.isScript());
735:       assertFalse(node0.hasOneChild());
736:       assertFalse(node0.isGetElem());
737:       assertFalse(node0.isWith());
738:       assertFalse(node0.isCast());
739:       assertFalse(node0.isInstanceOf());
740:       assertFalse(node0.isDec());
741:       assertFalse(node0.isTypeOf());
742:       assertFalse(node0.hasChildren());
743:       assertFalse(node0.isAssign());
744:       assertFalse(node0.isLabel());
745:       assertFalse(node0.isAssignAdd());
746:       assertFalse(node0.isBreak());
747:       assertEquals(152, node0.getLineno());
748:       assertFalse(node0.isOr());
749:       assertFalse(node0.isBlock());
750:       assertFalse(node0.isNew());
751:       assertFalse(node0.isAdd());
752:       assertFalse(node0.isSwitch());
753:       assertFalse(node0.isDo());
754:       assertEquals(39, node0.getType());
755:       assertFalse(node0.isVar());
756:       assertFalse(node0.isHook());
757:       assertFalse(node0.hasMoreThanOneChild());
758:       assertFalse(node0.isThis());
759:       assertFalse(node0.isParamList());
760:       assertFalse(node0.isLabelName());
761:       assertFalse(node0.isCase());
762:       assertFalse(node0.isStringKey());
763:       assertFalse(node0.isGetterDef());
764:       assertFalse(node0.isTrue());
765:       assertFalse(node0.isArrayLit());
766:       assertFalse(node0.isDefaultCase());
767:       assertFalse(node0.isTry());
768:       assertFalse(node0.isVoid());
769:       assertFalse(node0.isFor());
770:       assertFalse(node0.isCatch());
771:       assertFalse(node0.isRegExp());
772:       assertFalse(node0.isFunction());
773:       assertEquals(0, node0.getChildCount());
774:       assertFalse(node0.isSetterDef());
775:       assertFalse(node0.isNE());
776:       assertFalse(node0.isIf());
777:       assertFalse(node0.isDelProp());
778:       assertFalse(node0.isName());
779:       assertFalse(node0.isEmpty());
780:       assertFalse(node0.isNull());
781:       assertFalse(node0.isIn());
782:       assertEquals(623683, node0.getSourcePosition());
783:       assertFalse(node0.isInc());
784:       assertFalse(node0.isFalse());
785:       assertFalse(node0.isContinue());
786:       assertFalse(node0.isWhile());
787:       assertFalse(node0.isCall());
788:       assertFalse(node0.isThrow());
789:       assertFalse(node0.isComma());
790:       assertFalse(node0.isGetProp());
791:       assertFalse(node0.isReturn());
792:       assertTrue(node0.isNumber());
793:       assertFalse(node0.isAnd());
794:       assertEquals(1091, node0.getCharno());
795:       assertFalse(node0.isString());
796:       assertFalse(node0.isObjectLit());
797:       assertFalse(node0.isDebugger());
798:       assertFalse(node0.isNot());
799:       assertFalse(node2.hasOneChild());
800:       assertFalse(node2.isExprResult());
801:       assertFalse(node2.isCast());
802:       assertFalse(node2.isAssign());
803:       assertFalse(node2.isDec());
804:       assertFalse(node2.isScript());
805:       assertFalse(node2.hasChildren());
806:       assertFalse(node2.isAssignAdd());
807:       assertFalse(node2.isLabel());
808:       assertFalse(node2.isGetProp());
809:       assertFalse(node2.isObjectLit());
810:       assertFalse(node2.isContinue());
811:       assertEquals(1091, node2.getCharno());
812:       assertFalse(node2.isNot());
813:       assertFalse(node2.isAnd());
814:       assertFalse(node2.isLabelName());
815:       assertFalse(node2.isBlock());
816:       assertFalse(node2.isHook());
817:       assertEquals(623683, node2.getSourcePosition());
818:       assertFalse(node2.isFalse());
819:       assertFalse(node2.isCase());
820:       assertFalse(node2.isInc());
821:       assertEquals(39, node2.getType());
822:       assertFalse(node2.isThis());
823:       assertFalse(node2.isSetterDef());
824:       assertFalse(node2.isThrow());
825:       assertFalse(node2.isInstanceOf());
826:       assertFalse(node2.isCatch());
827:       assertFalse(node2.isWith());
828:       assertFalse(node2.isIn());
829:       assertFalse(node2.hasMoreThanOneChild());
830:       assertEquals(152, node2.getLineno());
831:       assertFalse(node2.isNE());
832:       assertFalse(node2.isIf());
833:       assertFalse(node2.isArrayLit());
834:       assertFalse(node2.isDebugger());
835:       assertFalse(node2.isFunction());
836:       assertFalse(node2.isRegExp());
837:       assertFalse(node2.isFor());
838:       assertFalse(node2.isEmpty());
839:       assertFalse(node2.isTry());
840:       assertFalse(node2.isDefaultCase());
841:       assertEquals(0, node2.getChildCount());
842:       assertTrue(node2.isNumber());
843:       assertFalse(node2.isGetterDef());
844:       assertFalse(node2.isParamList());
845:       assertFalse(node2.isStringKey());
846:       assertFalse(node2.isSwitch());
847:       assertFalse(node2.isVar());
848:       assertFalse(node2.isNew());
849:       assertFalse(node2.isAdd());
850:       assertFalse(node2.isCall());
851:       assertFalse(node2.isWhile());
852:       assertFalse(node2.isString());
853:       assertFalse(node2.isDo());
854:       assertFalse(node2.isOr());
855:       assertFalse(node2.isReturn());
856:       assertFalse(node2.isComma());
857:       assertFalse(node2.isTypeOf());
858:       assertFalse(node2.isDelProp());
859:       assertFalse(node2.isBreak());
860:       assertFalse(node2.isNull());
861:       assertFalse(node2.isGetElem());
862:       assertFalse(node2.isTrue());
863:       assertFalse(node2.isVoid());
864:       assertFalse(node2.isName());
865:       
866:       Iterable<Node> iterable0 = node0.children();
867:       assertFalse(node0.equals((Object)node1));
868:       assertFalse(iterable0.contains(node1));
869:       assertNotNull(iterable0);
870:       assertSame(node0, node2);
871:       assertFalse(node0.isExprResult());
872:       assertFalse(node0.isScript());
873:       assertFalse(node0.hasOneChild());
874:       assertFalse(node0.isGetElem());
875:       assertFalse(node0.isWith());
876:       assertFalse(node0.isCast());
877:       assertFalse(node0.isInstanceOf());
878:       assertFalse(node0.isDec());
879:       assertFalse(node0.isTypeOf());
880:       assertFalse(node0.hasChildren());
881:       assertFalse(node0.isAssign());
882:       assertFalse(node0.isLabel());
883:       assertFalse(node0.isAssignAdd());
884:       assertFalse(node0.isBreak());
885:       assertEquals(152, node0.getLineno());
886:       assertFalse(node0.isOr());
887:       assertFalse(node0.isBlock());
888:       assertFalse(node0.isNew());
889:       assertFalse(node0.isAdd());
890:       assertFalse(node0.isSwitch());
891:       assertFalse(node0.isDo());
892:       assertEquals(39, node0.getType());
893:       assertFalse(node0.isVar());
894:       assertFalse(node0.isHook());
895:       assertFalse(node0.hasMoreThanOneChild());
896:       assertFalse(node0.isThis());
897:       assertFalse(node0.isParamList());
898:       assertFalse(node0.isLabelName());
899:       assertFalse(node0.isCase());
900:       assertFalse(node0.isStringKey());
901:       assertFalse(node0.isGetterDef());
902:       assertFalse(node0.isTrue());
903:       assertFalse(node0.isArrayLit());
904:       assertFalse(node0.isDefaultCase());
905:       assertFalse(node0.isTry());
906:       assertFalse(node0.isVoid());
907:       assertFalse(node0.isFor());
908:       assertFalse(node0.isCatch());
909:       assertFalse(node0.isRegExp());
910:       assertFalse(node0.isFunction());
911:       assertEquals(0, node0.getChildCount());
912:       assertFalse(node0.isSetterDef());
913:       assertFalse(node0.isNE());
914:       assertFalse(node0.isIf());
915:       assertFalse(node0.isDelProp());
916:       assertFalse(node0.isName());
917:       assertFalse(node0.isEmpty());
918:       assertFalse(node0.isNull());
919:       assertFalse(node0.isIn());
920:       assertEquals(623683, node0.getSourcePosition());
921:       assertFalse(node0.isInc());
922:       assertFalse(node0.isFalse());
923:       assertFalse(node0.isContinue());
924:       assertFalse(node0.isWhile());
925:       assertFalse(node0.isCall());
926:       assertFalse(node0.isThrow());
927:       assertFalse(node0.isComma());
928:       assertFalse(node0.isGetProp());
929:       assertFalse(node0.isReturn());
930:       assertTrue(node0.isNumber());
931:       assertFalse(node0.isAnd());
932:       assertEquals(1091, node0.getCharno());
933:       assertFalse(node0.isString());
934:       assertFalse(node0.isObjectLit());
935:       assertFalse(node0.isDebugger());
936:       assertFalse(node0.isNot());
937:       
938:       boolean boolean3 = node1.isVoid();
939:       assertFalse(node0.equals((Object)node1));
940:       assertFalse(node1.equals((Object)node2));
941:       assertFalse(node1.equals((Object)node0));
942:       assertTrue(boolean3 == boolean0);
943:       assertTrue(boolean3 == boolean1);
944:       assertTrue(boolean3 == boolean2);
945:       assertFalse(boolean3);
946:       assertSame(node0, node2);
947:       assertFalse(node0.isExprResult());
948:       assertFalse(node0.isScript());
949:       assertFalse(node0.hasOneChild());
950:       assertFalse(node0.isGetElem());
951:       assertFalse(node0.isWith());
952:       assertFalse(node0.isCast());
953:       assertFalse(node0.isInstanceOf());
954:       assertFalse(node0.isDec());
955:       assertFalse(node0.isTypeOf());
956:       assertFalse(node0.hasChildren());
957:       assertFalse(node0.isAssign());
958:       assertFalse(node0.isLabel());
959:       assertFalse(node0.isAssignAdd());
960:       assertFalse(node0.isBreak());
961:       assertEquals(152, node0.getLineno());
962:       assertFalse(node0.isOr());
963:       assertFalse(node0.isBlock());
964:       assertFalse(node0.isNew());
965:       assertFalse(node0.isAdd());
966:       assertFalse(node0.isSwitch());
967:       assertFalse(node0.isDo());
968:       assertEquals(39, node0.getType());
969:       assertFalse(node0.isVar());
970:       assertFalse(node0.isHook());
971:       assertFalse(node0.hasMoreThanOneChild());
972:       assertFalse(node0.isThis());
973:       assertFalse(node0.isParamList());
974:       assertFalse(node0.isLabelName());
975:       assertFalse(node0.isCase());
976:       assertFalse(node0.isStringKey());
977:       assertFalse(node0.isGetterDef());
978:       assertFalse(node0.isTrue());
979:       assertFalse(node0.isArrayLit());
980:       assertFalse(node0.isDefaultCase());
981:       assertFalse(node0.isTry());
982:       assertFalse(node0.isVoid());
983:       assertFalse(node0.isFor());
984:       assertFalse(node0.isCatch());
985:       assertFalse(node0.isRegExp());
986:       assertFalse(node0.isFunction());
987:       assertEquals(0, node0.getChildCount());
988:       assertFalse(node0.isSetterDef());
989:       assertFalse(node0.isNE());
990:       assertFalse(node0.isIf());
991:       assertFalse(node0.isDelProp());
992:       assertFalse(node0.isName());
993:       assertFalse(node0.isEmpty());
994:       assertFalse(node0.isNull());
995:       assertFalse(node0.isIn());
996:       assertEquals(623683, node0.getSourcePosition());
997:       assertFalse(node0.isInc());
998:       assertFalse(node0.isFalse());
999:       assertFalse(node0.isContinue());
1000:       assertFalse(node0.isWhile());
1001:       assertFalse(node0.isCall());
1002:       assertFalse(node0.isThrow());
1003:       assertFalse(node0.isComma());
1004:       assertFalse(node0.isGetProp());
1005:       assertFalse(node0.isReturn());
1006:       assertTrue(node0.isNumber());
1007:       assertFalse(node0.isAnd());
1008:       assertEquals(1091, node0.getCharno());
1009:       assertFalse(node0.isString());
1010:       assertFalse(node0.isObjectLit());
1011:       assertFalse(node0.isDebugger());
1012:       assertFalse(node0.isNot());
1013:       assertFalse(node1.isLabel());
1014:       assertEquals((-432), node1.getType());
1015:       assertFalse(node1.isOr());
1016:       assertFalse(node1.isReturn());
1017:       assertFalse(node1.isTypeOf());
1018:       assertFalse(node1.isDec());
1019:       assertFalse(node1.isContinue());
1020:       assertFalse(node1.isNumber());
1021:       assertFalse(node1.hasMoreThanOneChild());
1022:       assertFalse(node1.isLabelName());
1023:       assertFalse(node1.isGetElem());
1024:       assertFalse(node1.isBlock());
1025:       assertFalse(node1.isExprResult());
1026:       assertFalse(node1.isScript());
1027:       assertFalse(node1.isWith());
1028:       assertFalse(node1.isAssign());
1029:       assertFalse(node1.hasChildren());
1030:       assertFalse(node1.hasOneChild());
1031:       assertFalse(node1.isWhile());
1032:       assertFalse(node1.isGetProp());
1033:       assertFalse(node1.isThis());
1034:       assertFalse(node1.isSetterDef());
1035:       assertFalse(node1.isInstanceOf());
1036:       assertFalse(node1.isCatch());
1037:       assertFalse(node1.isObjectLit());
1038:       assertFalse(node1.isNot());
1039:       assertFalse(node1.isAnd());
1040:       assertFalse(node1.isInc());
1041:       assertEquals(8194, node1.getSourcePosition());
1042:       assertFalse(node1.isCast());
1043:       assertFalse(node1.isFunction());
1044:       assertFalse(node1.isFalse());
1045:       assertFalse(node1.isThrow());
1046:       assertFalse(node1.isGetterDef());
1047:       assertFalse(node1.isIn());
1048:       assertFalse(node1.isArrayLit());
1049:       assertFalse(node1.isNE());
1050:       assertFalse(node1.isDelProp());
1051:       assertFalse(node1.isSwitch());
1052:       assertFalse(node1.isIf());
1053:       assertFalse(node1.isTry());
1054:       assertFalse(node1.isDebugger());
1055:       assertFalse(node1.isHook());
1056:       assertFalse(node1.isRegExp());
1057:       assertFalse(node1.isString());
1058:       assertFalse(node1.isCase());
1059:       assertFalse(node1.isFor());
1060:       assertEquals(2, node1.getLineno());
1061:       assertEquals(0, node1.getChildCount());
1062:       assertFalse(node1.isComma());
1063:       assertFalse(node1.isName());
1064:       assertFalse(node1.isStringKey());
1065:       assertFalse(node1.isBreak());
1066:       assertFalse(node1.isCall());
1067:       assertFalse(node1.isNull());
1068:       assertEquals(2, node1.getCharno());
1069:       assertFalse(node1.isParamList());
1070:       assertFalse(node1.isVoid());
1071:       assertFalse(node1.isNew());
1072:       assertFalse(node1.isAdd());
1073:       assertFalse(node1.isTrue());
1074:       assertFalse(node1.isEmpty());
1075:       assertFalse(node1.isDo());
1076:       assertFalse(node1.isVar());
1077:       assertFalse(node1.isDefaultCase());
1078:       assertFalse(node1.isAssignAdd());
1079:       
1080:       boolean boolean4 = node1.isDebugger();
1081:       assertFalse(node0.equals((Object)node1));
1082:       assertFalse(node1.equals((Object)node2));
1083:       assertFalse(node1.equals((Object)node0));
1084:       assertTrue(boolean4 == boolean0);
1085:       assertTrue(boolean4 == boolean1);
1086:       assertTrue(boolean4 == boolean3);
1087:       assertTrue(boolean4 == boolean2);
1088:       assertFalse(boolean4);
1089:       assertSame(node0, node2);
1090:       assertFalse(node0.isExprResult());
1091:       assertFalse(node0.isScript());
1092:       assertFalse(node0.hasOneChild());
1093:       assertFalse(node0.isGetElem());
1094:       assertFalse(node0.isWith());
1095:       assertFalse(node0.isCast());
1096:       assertFalse(node0.isInstanceOf());
1097:       assertFalse(node0.isDec());
1098:       assertFalse(node0.isTypeOf());
1099:       assertFalse(node0.hasChildren());
1100:       assertFalse(node0.isAssign());
1101:       assertFalse(node0.isLabel());
1102:       assertFalse(node0.isAssignAdd());
1103:       assertFalse(node0.isBreak());
1104:       assertEquals(152, node0.getLineno());
1105:       assertFalse(node0.isOr());
1106:       assertFalse(node0.isBlock());
1107:       assertFalse(node0.isNew());
1108:       assertFalse(node0.isAdd());
1109:       assertFalse(node0.isSwitch());
1110:       assertFalse(node0.isDo());
1111:       assertEquals(39, node0.getType());
1112:       assertFalse(node0.isVar());
1113:       assertFalse(node0.isHook());
1114:       assertFalse(node0.hasMoreThanOneChild());
1115:       assertFalse(node0.isThis());
1116:       assertFalse(node0.isParamList());
1117:       assertFalse(node0.isLabelName());
1118:       assertFalse(node0.isCase());
1119:       assertFalse(node0.isStringKey());
1120:       assertFalse(node0.isGetterDef());
1121:       assertFalse(node0.isTrue());
1122:       assertFalse(node0.isArrayLit());
1123:       assertFalse(node0.isDefaultCase());
1124:       assertFalse(node0.isTry());
1125:       assertFalse(node0.isVoid());
1126:       assertFalse(node0.isFor());
1127:       assertFalse(node0.isCatch());
1128:       assertFalse(node0.isRegExp());
1129:       assertFalse(node0.isFunction());
1130:       assertEquals(0, node0.getChildCount());
1131:       assertFalse(node0.isSetterDef());
1132:       assertFalse(node0.isNE());
1133:       assertFalse(node0.isIf());
1134:       assertFalse(node0.isDelProp());
1135:       assertFalse(node0.isName());
1136:       assertFalse(node0.isEmpty());
1137:       assertFalse(node0.isNull());
1138:       assertFalse(node0.isIn());
1139:       assertEquals(623683, node0.getSourcePosition());
1140:       assertFalse(node0.isInc());
1141:       assertFalse(node0.isFalse());
1142:       assertFalse(node0.isContinue());
1143:       assertFalse(node0.isWhile());
1144:       assertFalse(node0.isCall());
1145:       assertFalse(node0.isThrow());
1146:       assertFalse(node0.isComma());
1147:       assertFalse(node0.isGetProp());
1148:       assertFalse(node0.isReturn());
1149:       assertTrue(node0.isNumber());
1150:       assertFalse(node0.isAnd());
1151:       assertEquals(1091, node0.getCharno());
1152:       assertFalse(node0.isString());
1153:       assertFalse(node0.isObjectLit());
1154:       assertFalse(node0.isDebugger());
1155:       assertFalse(node0.isNot());
1156:       assertFalse(node1.isLabel());
1157:       assertEquals((-432), node1.getType());
1158:       assertFalse(node1.isOr());
1159:       assertFalse(node1.isReturn());
1160:       assertFalse(node1.isTypeOf());
1161:       assertFalse(node1.isDec());
1162:       assertFalse(node1.isContinue());
1163:       assertFalse(node1.isNumber());
1164:       assertFalse(node1.hasMoreThanOneChild());
1165:       assertFalse(node1.isLabelName());
1166:       assertFalse(node1.isGetElem());
1167:       assertFalse(node1.isBlock());
1168:       assertFalse(node1.isExprResult());
1169:       assertFalse(node1.isScript());
1170:       assertFalse(node1.isWith());
1171:       assertFalse(node1.isAssign());
1172:       assertFalse(node1.hasChildren());
1173:       assertFalse(node1.hasOneChild());
1174:       assertFalse(node1.isWhile());
1175:       assertFalse(node1.isGetProp());
1176:       assertFalse(node1.isThis());
1177:       assertFalse(node1.isSetterDef());
1178:       assertFalse(node1.isInstanceOf());
1179:       assertFalse(node1.isCatch());
1180:       assertFalse(node1.isObjectLit());
1181:       assertFalse(node1.isNot());
1182:       assertFalse(node1.isAnd());
1183:       assertFalse(node1.isInc());
1184:       assertEquals(8194, node1.getSourcePosition());
1185:       assertFalse(node1.isCast());
1186:       assertFalse(node1.isFunction());
1187:       assertFalse(node1.isFalse());
1188:       assertFalse(node1.isThrow());
1189:       assertFalse(node1.isGetterDef());
1190:       assertFalse(node1.isIn());
1191:       assertFalse(node1.isArrayLit());
1192:       assertFalse(node1.isNE());
1193:       assertFalse(node1.isDelProp());
1194:       assertFalse(node1.isSwitch());
1195:       assertFalse(node1.isIf());
1196:       assertFalse(node1.isTry());
1197:       assertFalse(node1.isDebugger());
1198:       assertFalse(node1.isHook());
1199:       assertFalse(node1.isRegExp());
1200:       assertFalse(node1.isString());
1201:       assertFalse(node1.isCase());
1202:       assertFalse(node1.isFor());
1203:       assertEquals(2, node1.getLineno());
1204:       assertEquals(0, node1.getChildCount());
1205:       assertFalse(node1.isComma());
1206:       assertFalse(node1.isName());
1207:       assertFalse(node1.isStringKey());
1208:       assertFalse(node1.isBreak());
1209:       assertFalse(node1.isCall());
1210:       assertFalse(node1.isNull());
1211:       assertEquals(2, node1.getCharno());
1212:       assertFalse(node1.isParamList());
1213:       assertFalse(node1.isVoid());
1214:       assertFalse(node1.isNew());
1215:       assertFalse(node1.isAdd());
1216:       assertFalse(node1.isTrue());
1217:       assertFalse(node1.isEmpty());
1218:       assertFalse(node1.isDo());
1219:       assertFalse(node1.isVar());
1220:       assertFalse(node1.isDefaultCase());
1221:       assertFalse(node1.isAssignAdd());
1222:       
1223:       boolean boolean5 = node1.hasChildren();
1224:       assertFalse(node0.equals((Object)node1));
1225:       assertFalse(node1.equals((Object)node2));
1226:       assertFalse(node1.equals((Object)node0));
1227:       assertTrue(boolean5 == boolean0);
1228:       assertTrue(boolean5 == boolean4);
1229:       assertTrue(boolean5 == boolean2);
1230:       assertTrue(boolean5 == boolean3);
1231:       assertTrue(boolean5 == boolean1);
1232:       assertFalse(boolean5);
1233:       assertSame(node0, node2);
1234:       assertFalse(node0.isExprResult());
1235:       assertFalse(node0.isScript());
1236:       assertFalse(node0.hasOneChild());
1237:       assertFalse(node0.isGetElem());
1238:       assertFalse(node0.isWith());
1239:       assertFalse(node0.isCast());
1240:       assertFalse(node0.isInstanceOf());
1241:       assertFalse(node0.isDec());
1242:       assertFalse(node0.isTypeOf());
1243:       assertFalse(node0.hasChildren());
1244:       assertFalse(node0.isAssign());
1245:       assertFalse(node0.isLabel());
1246:       assertFalse(node0.isAssignAdd());
1247:       assertFalse(node0.isBreak());
1248:       assertEquals(152, node0.getLineno());
1249:       assertFalse(node0.isOr());
1250:       assertFalse(node0.isBlock());
1251:       assertFalse(node0.isNew());
1252:       assertFalse(node0.isAdd());
1253:       assertFalse(node0.isSwitch());
1254:       assertFalse(node0.isDo());
1255:       assertEquals(39, node0.getType());
1256:       assertFalse(node0.isVar());
1257:       assertFalse(node0.isHook());
1258:       assertFalse(node0.hasMoreThanOneChild());
1259:       assertFalse(node0.isThis());
1260:       assertFalse(node0.isParamList());
1261:       assertFalse(node0.isLabelName());
1262:       assertFalse(node0.isCase());
1263:       assertFalse(node0.isStringKey());
1264:       assertFalse(node0.isGetterDef());
1265:       assertFalse(node0.isTrue());
1266:       assertFalse(node0.isArrayLit());
1267:       assertFalse(node0.isDefaultCase());
1268:       assertFalse(node0.isTry());
1269:       assertFalse(node0.isVoid());
1270:       assertFalse(node0.isFor());
1271:       assertFalse(node0.isCatch());
1272:       assertFalse(node0.isRegExp());
1273:       assertFalse(node0.isFunction());
1274:       assertEquals(0, node0.getChildCount());
1275:       assertFalse(node0.isSetterDef());
1276:       assertFalse(node0.isNE());
1277:       assertFalse(node0.isIf());
1278:       assertFalse(node0.isDelProp());
1279:       assertFalse(node0.isName());
1280:       assertFalse(node0.isEmpty());
1281:       assertFalse(node0.isNull());
1282:       assertFalse(node0.isIn());
1283:       assertEquals(623683, node0.getSourcePosition());
1284:       assertFalse(node0.isInc());
1285:       assertFalse(node0.isFalse());
1286:       assertFalse(node0.isContinue());
1287:       assertFalse(node0.isWhile());
1288:       assertFalse(node0.isCall());
1289:       assertFalse(node0.isThrow());
1290:       assertFalse(node0.isComma());
1291:       assertFalse(node0.isGetProp());
1292:       assertFalse(node0.isReturn());
1293:       assertTrue(node0.isNumber());
1294:       assertFalse(node0.isAnd());
1295:       assertEquals(1091, node0.getCharno());
1296:       assertFalse(node0.isString());
1297:       assertFalse(node0.isObjectLit());
1298:       assertFalse(node0.isDebugger());
1299:       assertFalse(node0.isNot());
1300:       assertFalse(node1.isLabel());
1301:       assertEquals((-432), node1.getType());
1302:       assertFalse(node1.isOr());
1303:       assertFalse(node1.isReturn());
1304:       assertFalse(node1.isTypeOf());
1305:       assertFalse(node1.isDec());
1306:       assertFalse(node1.isContinue());
1307:       assertFalse(node1.isNumber());
1308:       assertFalse(node1.hasMoreThanOneChild());
1309:       assertFalse(node1.isLabelName());
1310:       assertFalse(node1.isGetElem());
1311:       assertFalse(node1.isBlock());
1312:       assertFalse(node1.isExprResult());
1313:       assertFalse(node1.isScript());
1314:       assertFalse(node1.isWith());
1315:       assertFalse(node1.isAssign());
1316:       assertFalse(node1.hasChildren());
1317:       assertFalse(node1.hasOneChild());
1318:       assertFalse(node1.isWhile());
1319:       assertFalse(node1.isGetProp());
1320:       assertFalse(node1.isThis());
1321:       assertFalse(node1.isSetterDef());
1322:       assertFalse(node1.isInstanceOf());
1323:       assertFalse(node1.isCatch());
1324:       assertFalse(node1.isObjectLit());
1325:       assertFalse(node1.isNot());
1326:       assertFalse(node1.isAnd());
1327:       assertFalse(node1.isInc());
1328:       assertEquals(8194, node1.getSourcePosition());
1329:       assertFalse(node1.isCast());
1330:       assertFalse(node1.isFunction());
1331:       assertFalse(node1.isFalse());
1332:       assertFalse(node1.isThrow());
1333:       assertFalse(node1.isGetterDef());
1334:       assertFalse(node1.isIn());
1335:       assertFalse(node1.isArrayLit());
1336:       assertFalse(node1.isNE());
1337:       assertFalse(node1.isDelProp());
1338:       assertFalse(node1.isSwitch());
1339:       assertFalse(node1.isIf());
1340:       assertFalse(node1.isTry());
1341:       assertFalse(node1.isDebugger());
1342:       assertFalse(node1.isHook());
1343:       assertFalse(node1.isRegExp());
1344:       assertFalse(node1.isString());
1345:       assertFalse(node1.isCase());
1346:       assertFalse(node1.isFor());
1347:       assertEquals(2, node1.getLineno());
1348:       assertEquals(0, node1.getChildCount());
1349:       assertFalse(node1.isComma());
1350:       assertFalse(node1.isName());
1351:       assertFalse(node1.isStringKey());
1352:       assertFalse(node1.isBreak());
1353:       assertFalse(node1.isCall());
1354:       assertFalse(node1.isNull());
1355:       assertEquals(2, node1.getCharno());
1356:       assertFalse(node1.isParamList());
1357:       assertFalse(node1.isVoid());
1358:       assertFalse(node1.isNew());
1359:       assertFalse(node1.isAdd());
1360:       assertFalse(node1.isTrue());
1361:       assertFalse(node1.isEmpty());
1362:       assertFalse(node1.isDo());
1363:       assertFalse(node1.isVar());
1364:       assertFalse(node1.isDefaultCase());
1365:       assertFalse(node1.isAssignAdd());
1366:       
1367:       Node node3 = new Node(46, node2, node1, node0, node2, 996, 1);
1368:       assertFalse(node0.equals((Object)node1));
1369:       assertFalse(node1.equals((Object)node2));
1370:       assertFalse(node1.equals((Object)node0));
1371:       assertFalse(node2.equals((Object)node1));
1372:       assertFalse(node3.equals((Object)node0));
1373:       assertFalse(node3.equals((Object)node1));
1374:       assertFalse(node3.equals((Object)node2));
1375:       assertNotNull(node3);
1376:       assertFalse(node0.isExprResult());
1377:       assertFalse(node0.isScript());
1378:       assertFalse(node0.hasOneChild());
1379:       assertFalse(node0.isGetElem());
1380:       assertFalse(node0.isWith());
1381:       assertFalse(node0.isCast());
1382:       assertFalse(node0.isInstanceOf());
1383:       assertFalse(node0.isDec());
1384:       assertFalse(node0.isTypeOf());
1385:       assertFalse(node0.hasChildren());
1386:       assertFalse(node0.isAssign());
1387:       assertFalse(node0.isLabel());
1388:       assertFalse(node0.isAssignAdd());
1389:       assertFalse(node0.isBreak());
1390:       assertEquals(152, node0.getLineno());
1391:       assertFalse(node0.isOr());
1392:       assertFalse(node0.isBlock());
1393:       assertFalse(node0.isNew());
1394:       assertFalse(node0.isAdd());
1395:       assertFalse(node0.isSwitch());
1396:       assertFalse(node0.isDo());
1397:       assertEquals(39, node0.getType());
1398:       assertFalse(node0.isVar());
1399:       assertFalse(node0.isHook());
1400:       assertFalse(node0.hasMoreThanOneChild());
1401:       assertFalse(node0.isThis());
1402:       assertFalse(node0.isParamList());
1403:       assertFalse(node0.isLabelName());
1404:       assertFalse(node0.isCase());
1405:       assertFalse(node0.isStringKey());
1406:       assertFalse(node0.isGetterDef());
1407:       assertFalse(node0.isTrue());
1408:       assertFalse(node0.isArrayLit());
1409:       assertFalse(node0.isDefaultCase());
1410:       assertFalse(node0.isTry());
1411:       assertFalse(node0.isVoid());
1412:       assertFalse(node0.isFor());
1413:       assertFalse(node0.isCatch());
1414:       assertFalse(node0.isRegExp());
1415:       assertFalse(node0.isFunction());
1416:       assertEquals(0, node0.getChildCount());
1417:       assertFalse(node0.isSetterDef());
1418:       assertFalse(node0.isNE());
1419:       assertFalse(node0.isIf());
1420:       assertFalse(node0.isDelProp());
1421:       assertFalse(node0.isName());
1422:       assertFalse(node0.isEmpty());
1423:       assertFalse(node0.isNull());
1424:       assertFalse(node0.isIn());
1425:       assertEquals(623683, node0.getSourcePosition());
1426:       assertFalse(node0.isInc());
1427:       assertFalse(node0.isFalse());
1428:       assertFalse(node0.isContinue());
1429:       assertFalse(node0.isWhile());
1430:       assertFalse(node0.isCall());
1431:       assertFalse(node0.isThrow());
1432:       assertFalse(node0.isComma());
1433:       assertFalse(node0.isGetProp());
1434:       assertFalse(node0.isReturn());
1435:       assertTrue(node0.isNumber());
1436:       assertFalse(node0.isAnd());
1437:       assertEquals(1091, node0.getCharno());
1438:       assertFalse(node0.isString());
1439:       assertFalse(node0.isObjectLit());
1440:       assertFalse(node0.isDebugger());
1441:       assertFalse(node0.isNot());
1442:       assertFalse(node1.isLabel());
1443:       assertEquals((-432), node1.getType());
1444:       assertFalse(node1.isOr());
1445:       assertFalse(node1.isReturn());
1446:       assertFalse(node1.isTypeOf());
1447:       assertFalse(node1.isDec());
1448:       assertFalse(node1.isContinue());
1449:       assertFalse(node1.isNumber());
1450:       assertFalse(node1.hasMoreThanOneChild());
1451:       assertFalse(node1.isLabelName());
1452:       assertFalse(node1.isGetElem());
1453:       assertFalse(node1.isBlock());
1454:       assertFalse(node1.isExprResult());
1455:       assertFalse(node1.isScript());
1456:       assertFalse(node1.isWith());
1457:       assertFalse(node1.isAssign());
1458:       assertFalse(node1.hasChildren());
1459:       assertFalse(node1.hasOneChild());
1460:       assertFalse(node1.isWhile());
1461:       assertFalse(node1.isGetProp());
1462:       assertFalse(node1.isThis());
1463:       assertFalse(node1.isSetterDef());
1464:       assertFalse(node1.isInstanceOf());
1465:       assertFalse(node1.isCatch());
1466:       assertFalse(node1.isObjectLit());
1467:       assertFalse(node1.isNot());
1468:       assertFalse(node1.isAnd());
1469:       assertFalse(node1.isInc());
1470:       assertEquals(8194, node1.getSourcePosition());
1471:       assertFalse(node1.isCast());
1472:       assertFalse(node1.isFunction());
1473:       assertFalse(node1.isFalse());
1474:       assertFalse(node1.isThrow());
1475:       assertFalse(node1.isGetterDef());
1476:       assertFalse(node1.isIn());
1477:       assertFalse(node1.isArrayLit());
1478:       assertFalse(node1.isNE());
1479:       assertFalse(node1.isDelProp());
1480:       assertFalse(node1.isSwitch());
1481:       assertFalse(node1.isIf());
1482:       assertFalse(node1.isTry());
1483:       assertFalse(node1.isDebugger());
1484:       assertFalse(node1.isHook());
1485:       assertFalse(node1.isRegExp());
1486:       assertFalse(node1.isString());
1487:       assertFalse(node1.isCase());
1488:       assertFalse(node1.isFor());
1489:       assertEquals(2, node1.getLineno());
1490:       assertEquals(0, node1.getChildCount());
1491:       assertFalse(node1.isComma());
1492:       assertFalse(node1.isName());
1493:       assertFalse(node1.isStringKey());
1494:       assertFalse(node1.isBreak());
1495:       assertFalse(node1.isCall());
1496:       assertFalse(node1.isNull());
1497:       assertEquals(2, node1.getCharno());
1498:       assertFalse(node1.isParamList());
1499:       assertFalse(node1.isVoid());
1500:       assertFalse(node1.isNew());
1501:       assertFalse(node1.isAdd());
1502:       assertFalse(node1.isTrue());
1503:       assertFalse(node1.isEmpty());
1504:       assertFalse(node1.isDo());
1505:       assertFalse(node1.isVar());
1506:       assertFalse(node1.isDefaultCase());
1507:       assertFalse(node1.isAssignAdd());
1508:       assertFalse(node2.hasOneChild());
1509:       assertFalse(node2.isExprResult());
1510:       assertFalse(node2.isCast());
1511:       assertFalse(node2.isAssign());
1512:       assertFalse(node2.isDec());
1513:       assertFalse(node2.isScript());
1514:       assertFalse(node2.hasChildren());
1515:       assertFalse(node2.isAssignAdd());
1516:       assertFalse(node2.isLabel());
1517:       assertFalse(node2.isGetProp());
1518:       assertFalse(node2.isObjectLit());
1519:       assertFalse(node2.isContinue());
1520:       assertEquals(1091, node2.getCharno());
1521:       assertFalse(node2.isNot());
1522:       assertFalse(node2.isAnd());
1523:       assertFalse(node2.isLabelName());
1524:       assertFalse(node2.isBlock());
1525:       assertFalse(node2.isHook());
1526:       assertEquals(623683, node2.getSourcePosition());
1527:       assertFalse(node2.isFalse());
1528:       assertFalse(node2.isCase());
1529:       assertFalse(node2.isInc());
1530:       assertEquals(39, node2.getType());
1531:       assertFalse(node2.isThis());
1532:       assertFalse(node2.isSetterDef());
1533:       assertFalse(node2.isThrow());
1534:       assertFalse(node2.isInstanceOf());
1535:       assertFalse(node2.isCatch());
1536:       assertFalse(node2.isWith());
1537:       assertFalse(node2.isIn());
1538:       assertFalse(node2.hasMoreThanOneChild());
1539:       assertEquals(152, node2.getLineno());
1540:       assertFalse(node2.isNE());
1541:       assertFalse(node2.isIf());
1542:       assertFalse(node2.isArrayLit());
1543:       assertFalse(node2.isDebugger());
1544:       assertFalse(node2.isFunction());
1545:       assertFalse(node2.isRegExp());
1546:       assertFalse(node2.isFor());
1547:       assertFalse(node2.isEmpty());
1548:       assertFalse(node2.isTry());
1549:       assertFalse(node2.isDefaultCase());
1550:       assertEquals(0, node2.getChildCount());
1551:       assertTrue(node2.isNumber());
1552:       assertFalse(node2.isGetterDef());
1553:       assertFalse(node2.isParamList());
1554:       assertFalse(node2.isStringKey());
1555:       assertFalse(node2.isSwitch());
1556:       assertFalse(node2.isVar());
1557:       assertFalse(node2.isNew());
1558:       assertFalse(node2.isAdd());
1559:       assertFalse(node2.isCall());
1560:       assertFalse(node2.isWhile());
1561:       assertFalse(node2.isString());
1562:       assertFalse(node2.isDo());
1563:       assertFalse(node2.isOr());
1564:       assertFalse(node2.isReturn());
1565:       assertFalse(node2.isComma());
1566:       assertFalse(node2.isTypeOf());
1567:       assertFalse(node2.isDelProp());
1568:       assertFalse(node2.isBreak());
1569:       assertFalse(node2.isNull());
1570:       assertFalse(node2.isGetElem());
1571:       assertFalse(node2.isTrue());
1572:       assertFalse(node2.isVoid());
1573:       assertFalse(node2.isName());
1574:       assertFalse(node3.isFalse());
1575:       assertFalse(node3.isThrow());
1576:       assertFalse(node3.isHook());
1577:       assertFalse(node3.isThis());
1578:       assertFalse(node3.isComma());
1579:       assertFalse(node3.isInc());
1580:       assertEquals(46, node3.getType());
1581:       assertFalse(node3.isGetProp());
1582:       assertFalse(node3.isCase());
1583:       assertFalse(node3.isWith());
1584:       assertEquals(1, node3.getChildCount());
1585:       assertTrue(node3.hasChildren());
1586:       assertEquals(996, node3.getLineno());
1587:       assertFalse(node3.isInstanceOf());
1588:       assertFalse(node3.isDelProp());
1589:       assertFalse(node3.isExprResult());
1590:       assertFalse(node3.isBreak());
1591:       assertFalse(node3.isGetElem());
1592:       assertFalse(node3.isAssign());
1593:       assertFalse(node3.isIf());
1594:       assertFalse(node3.isDec());
1595:       assertFalse(node3.isTypeOf());
1596:       assertFalse(node3.isNE());
1597:       assertTrue(node3.hasOneChild());
1598:       assertFalse(node3.isIn());
1599:       assertFalse(node3.isNot());
1600:       assertFalse(node3.isObjectLit());
1601:       assertFalse(node3.isString());
1602:       assertFalse(node3.isAnd());
1603:       assertFalse(node3.isContinue());
1604:       assertEquals(1, node3.getCharno());
1605:       assertFalse(node3.isDebugger());
1606:       assertFalse(node3.isFunction());
1607:       assertFalse(node3.isCast());
1608:       assertFalse(node3.isStringKey());
1609:       assertFalse(node3.isName());
1610:       assertFalse(node3.isNull());
1611:       assertFalse(node3.isVar());
1612:       assertFalse(node3.isBlock());
1613:       assertFalse(node3.isNew());
1614:       assertFalse(node3.isAdd());
1615:       assertFalse(node3.isSetterDef());
1616:       assertFalse(node3.isCatch());
1617:       assertFalse(node3.isWhile());
1618:       assertFalse(node3.hasMoreThanOneChild());
1619:       assertFalse(node3.isRegExp());
1620:       assertFalse(node3.isTrue());
1621:       assertFalse(node3.isReturn());
1622:       assertFalse(node3.isVoid());
1623:       assertFalse(node3.isCall());
1624:       assertFalse(node3.isLabelName());
1625:       assertFalse(node3.isFor());
1626:       assertFalse(node3.isEmpty());
1627:       assertFalse(node3.isNumber());
1628:       assertFalse(node3.isGetterDef());
1629:       assertEquals(4079617, node3.getSourcePosition());
1630:       assertFalse(node3.isTry());
1631:       assertFalse(node3.isOr());
1632:       assertFalse(node3.isAssignAdd());
1633:       assertFalse(node3.isScript());
1634:       assertFalse(node3.isDo());
1635:       assertFalse(node3.isDefaultCase());
1636:       assertFalse(node3.isLabel());
1637:       assertFalse(node3.isParamList());
1638:       assertFalse(node3.isSwitch());
1639:       assertFalse(node3.isArrayLit());
1640:       
1641:       boolean boolean6 = node2.isTrue();
1642:       assertTrue(boolean6 == boolean5);
1643:       assertTrue(boolean6 == boolean1);
1644:       assertTrue(boolean6 == boolean4);
1645:       assertTrue(boolean6 == boolean2);
1646:       assertTrue(boolean6 == boolean0);
1647:       assertTrue(boolean6 == boolean3);
1648:       assertFalse(node0.equals((Object)node1));
1649:       assertFalse(node0.equals((Object)node3));
1650:       assertFalse(node2.equals((Object)node3));
1651:       assertFalse(node2.equals((Object)node1));
1652:       assertFalse(boolean6);
1653:       assertSame(node0, node2);
1654:       assertSame(node2, node0);
1655:       assertFalse(node0.isExprResult());
1656:       assertFalse(node0.isScript());
1657:       assertFalse(node0.hasOneChild());
1658:       assertFalse(node0.isGetElem());
1659:       assertFalse(node0.isWith());
1660:       assertFalse(node0.isCast());
1661:       assertFalse(node0.isInstanceOf());
1662:       assertFalse(node0.isDec());
1663:       assertFalse(node0.isTypeOf());
1664:       assertFalse(node0.hasChildren());
1665:       assertFalse(node0.isAssign());
1666:       assertFalse(node0.isLabel());
1667:       assertFalse(node0.isAssignAdd());
1668:       assertFalse(node0.isBreak());
1669:       assertEquals(152, node0.getLineno());
1670:       assertFalse(node0.isOr());
1671:       assertFalse(node0.isBlock());
1672:       assertFalse(node0.isNew());
1673:       assertFalse(node0.isAdd());
1674:       assertFalse(node0.isSwitch());
1675:       assertFalse(node0.isDo());
1676:       assertEquals(39, node0.getType());
1677:       assertFalse(node0.isVar());
1678:       assertFalse(node0.isHook());
1679:       assertFalse(node0.hasMoreThanOneChild());
1680:       assertFalse(node0.isThis());
1681:       assertFalse(node0.isParamList());
1682:       assertFalse(node0.isLabelName());
1683:       assertFalse(node0.isCase());
1684:       assertFalse(node0.isStringKey());
1685:       assertFalse(node0.isGetterDef());
1686:       assertFalse(node0.isTrue());
1687:       assertFalse(node0.isArrayLit());
1688:       assertFalse(node0.isDefaultCase());
1689:       assertFalse(node0.isTry());
1690:       assertFalse(node0.isVoid());
1691:       assertFalse(node0.isFor());
1692:       assertFalse(node0.isCatch());
1693:       assertFalse(node0.isRegExp());
1694:       assertFalse(node0.isFunction());
1695:       assertEquals(0, node0.getChildCount());
1696:       assertFalse(node0.isSetterDef());
1697:       assertFalse(node0.isNE());
1698:       assertFalse(node0.isIf());
1699:       assertFalse(node0.isDelProp());
1700:       assertFalse(node0.isName());
1701:       assertFalse(node0.isEmpty());
1702:       assertFalse(node0.isNull());
1703:       assertFalse(node0.isIn());
1704:       assertEquals(623683, node0.getSourcePosition());
1705:       assertFalse(node0.isInc());
1706:       assertFalse(node0.isFalse());
1707:       assertFalse(node0.isContinue());
1708:       assertFalse(node0.isWhile());
1709:       assertFalse(node0.isCall());
1710:       assertFalse(node0.isThrow());
1711:       assertFalse(node0.isComma());
1712:       assertFalse(node0.isGetProp());
1713:       assertFalse(node0.isReturn());
1714:       assertTrue(node0.isNumber());
1715:       assertFalse(node0.isAnd());
1716:       assertEquals(1091, node0.getCharno());
1717:       assertFalse(node0.isString());
1718:       assertFalse(node0.isObjectLit());
1719:       assertFalse(node0.isDebugger());
1720:       assertFalse(node0.isNot());
1721:       assertFalse(node2.hasOneChild());
1722:       assertFalse(node2.isExprResult());
1723:       assertFalse(node2.isCast());
1724:       assertFalse(node2.isAssign());
1725:       assertFalse(node2.isDec());
1726:       assertFalse(node2.isScript());
1727:       assertFalse(node2.hasChildren());
1728:       assertFalse(node2.isAssignAdd());
1729:       assertFalse(node2.isLabel());
1730:       assertFalse(node2.isGetProp());
1731:       assertFalse(node2.isObjectLit());
1732:       assertFalse(node2.isContinue());
1733:       assertEquals(1091, node2.getCharno());
1734:       assertFalse(node2.isNot());
1735:       assertFalse(node2.isAnd());
1736:       assertFalse(node2.isLabelName());
1737:       assertFalse(node2.isBlock());
1738:       assertFalse(node2.isHook());
1739:       assertEquals(623683, node2.getSourcePosition());
1740:       assertFalse(node2.isFalse());
1741:       assertFalse(node2.isCase());
1742:       assertFalse(node2.isInc());
1743:       assertEquals(39, node2.getType());
1744:       assertFalse(node2.isThis());
1745:       assertFalse(node2.isSetterDef());
1746:       assertFalse(node2.isThrow());
1747:       assertFalse(node2.isInstanceOf());
1748:       assertFalse(node2.isCatch());
1749:       assertFalse(node2.isWith());
1750:       assertFalse(node2.isIn());
1751:       assertFalse(node2.hasMoreThanOneChild());
1752:       assertEquals(152, node2.getLineno());
1753:       assertFalse(node2.isNE());
1754:       assertFalse(node2.isIf());
1755:       assertFalse(node2.isArrayLit());
1756:       assertFalse(node2.isDebugger());
1757:       assertFalse(node2.isFunction());
1758:       assertFalse(node2.isRegExp());
1759:       assertFalse(node2.isFor());
1760:       assertFalse(node2.isEmpty());
1761:       assertFalse(node2.isTry());
1762:       assertFalse(node2.isDefaultCase());
1763:       assertEquals(0, node2.getChildCount());
1764:       assertTrue(node2.isNumber());
1765:       assertFalse(node2.isGetterDef());
1766:       assertFalse(node2.isParamList());
1767:       assertFalse(node2.isStringKey());
1768:       assertFalse(node2.isSwitch());
1769:       assertFalse(node2.isVar());
1770:       assertFalse(node2.isNew());
1771:       assertFalse(node2.isAdd());
1772:       assertFalse(node2.isCall());
1773:       assertFalse(node2.isWhile());
1774:       assertFalse(node2.isString());
1775:       assertFalse(node2.isDo());
1776:       assertFalse(node2.isOr());
1777:       assertFalse(node2.isReturn());
1778:       assertFalse(node2.isComma());
1779:       assertFalse(node2.isTypeOf());
1780:       assertFalse(node2.isDelProp());
1781:       assertFalse(node2.isBreak());
1782:       assertFalse(node2.isNull());
1783:       assertFalse(node2.isGetElem());
1784:       assertFalse(node2.isTrue());
1785:       assertFalse(node2.isVoid());
1786:       assertFalse(node2.isName());
1787:       
1788:       boolean boolean7 = node3.isCatch();
1789:       assertTrue(boolean7 == boolean5);
1790:       assertTrue(boolean7 == boolean3);
1791:       assertTrue(boolean7 == boolean1);
1792:       assertTrue(boolean7 == boolean6);
1793:       assertTrue(boolean7 == boolean0);
1794:       assertTrue(boolean7 == boolean4);
1795:       assertTrue(boolean7 == boolean2);
1796:       assertFalse(node0.equals((Object)node1));
1797:       assertFalse(node0.equals((Object)node3));
1798:       assertFalse(node1.equals((Object)node2));
1799:       assertFalse(node1.equals((Object)node3));
1800:       assertFalse(node1.equals((Object)node0));
1801:       assertFalse(node2.equals((Object)node3));
1802:       assertFalse(node2.equals((Object)node1));
1803:       assertFalse(node3.equals((Object)node0));
1804:       assertFalse(node3.equals((Object)node1));
1805:       assertFalse(node3.equals((Object)node2));
1806:       assertFalse(boolean7);
1807:       assertSame(node0, node2);
1808:       assertNotSame(node1, node3);
1809:       assertSame(node2, node0);
1810:       assertNotSame(node3, node1);
1811:       assertFalse(node0.isExprResult());
1812:       assertFalse(node0.isScript());
1813:       assertFalse(node0.hasOneChild());
1814:       assertFalse(node0.isGetElem());
1815:       assertFalse(node0.isWith());
1816:       assertFalse(node0.isCast());
1817:       assertFalse(node0.isInstanceOf());
1818:       assertFalse(node0.isDec());
1819:       assertFalse(node0.isTypeOf());
1820:       assertFalse(node0.hasChildren());
1821:       assertFalse(node0.isAssign());
1822:       assertFalse(node0.isLabel());
1823:       assertFalse(node0.isAssignAdd());
1824:       assertFalse(node0.isBreak());
1825:       assertEquals(152, node0.getLineno());
1826:       assertFalse(node0.isOr());
1827:       assertFalse(node0.isBlock());
1828:       assertFalse(node0.isNew());
1829:       assertFalse(node0.isAdd());
1830:       assertFalse(node0.isSwitch());
1831:       assertFalse(node0.isDo());
1832:       assertEquals(39, node0.getType());
1833:       assertFalse(node0.isVar());
1834:       assertFalse(node0.isHook());
1835:       assertFalse(node0.hasMoreThanOneChild());
1836:       assertFalse(node0.isThis());
1837:       assertFalse(node0.isParamList());
1838:       assertFalse(node0.isLabelName());
1839:       assertFalse(node0.isCase());
1840:       assertFalse(node0.isStringKey());
1841:       assertFalse(node0.isGetterDef());
1842:       assertFalse(node0.isTrue());
1843:       assertFalse(node0.isArrayLit());
1844:       assertFalse(node0.isDefaultCase());
1845:       assertFalse(node0.isTry());
1846:       assertFalse(node0.isVoid());
1847:       assertFalse(node0.isFor());
1848:       assertFalse(node0.isCatch());
1849:       assertFalse(node0.isRegExp());
1850:       assertFalse(node0.isFunction());
1851:       assertEquals(0, node0.getChildCount());
1852:       assertFalse(node0.isSetterDef());
1853:       assertFalse(node0.isNE());
1854:       assertFalse(node0.isIf());
1855:       assertFalse(node0.isDelProp());
1856:       assertFalse(node0.isName());
1857:       assertFalse(node0.isEmpty());
1858:       assertFalse(node0.isNull());
1859:       assertFalse(node0.isIn());
1860:       assertEquals(623683, node0.getSourcePosition());
1861:       assertFalse(node0.isInc());
1862:       assertFalse(node0.isFalse());
1863:       assertFalse(node0.isContinue());
1864:       assertFalse(node0.isWhile());
1865:       assertFalse(node0.isCall());
1866:       assertFalse(node0.isThrow());
1867:       assertFalse(node0.isComma());
1868:       assertFalse(node0.isGetProp());
1869:       assertFalse(node0.isReturn());
1870:       assertTrue(node0.isNumber());
1871:       assertFalse(node0.isAnd());
1872:       assertEquals(1091, node0.getCharno());
1873:       assertFalse(node0.isString());
1874:       assertFalse(node0.isObjectLit());
1875:       assertFalse(node0.isDebugger());
1876:       assertFalse(node0.isNot());
1877:       assertFalse(node1.isLabel());
1878:       assertEquals((-432), node1.getType());
1879:       assertFalse(node1.isOr());
1880:       assertFalse(node1.isReturn());
1881:       assertFalse(node1.isTypeOf());
1882:       assertFalse(node1.isDec());
1883:       assertFalse(node1.isContinue());
1884:       assertFalse(node1.isNumber());
1885:       assertFalse(node1.hasMoreThanOneChild());
1886:       assertFalse(node1.isLabelName());
1887:       assertFalse(node1.isGetElem());
1888:       assertFalse(node1.isBlock());
1889:       assertFalse(node1.isExprResult());
1890:       assertFalse(node1.isScript());
1891:       assertFalse(node1.isWith());
1892:       assertFalse(node1.isAssign());
1893:       assertFalse(node1.hasChildren());
1894:       assertFalse(node1.hasOneChild());
1895:       assertFalse(node1.isWhile());
1896:       assertFalse(node1.isGetProp());
1897:       assertFalse(node1.isThis());
1898:       assertFalse(node1.isSetterDef());
1899:       assertFalse(node1.isInstanceOf());
1900:       assertFalse(node1.isCatch());
1901:       assertFalse(node1.isObjectLit());
1902:       assertFalse(node1.isNot());
1903:       assertFalse(node1.isAnd());
1904:       assertFalse(node1.isInc());
1905:       assertEquals(8194, node1.getSourcePosition());
1906:       assertFalse(node1.isCast());
1907:       assertFalse(node1.isFunction());
1908:       assertFalse(node1.isFalse());
1909:       assertFalse(node1.isThrow());
1910:       assertFalse(node1.isGetterDef());
1911:       assertFalse(node1.isIn());
1912:       assertFalse(node1.isArrayLit());
1913:       assertFalse(node1.isNE());
1914:       assertFalse(node1.isDelProp());
1915:       assertFalse(node1.isSwitch());
1916:       assertFalse(node1.isIf());
1917:       assertFalse(node1.isTry());
1918:       assertFalse(node1.isDebugger());
1919:       assertFalse(node1.isHook());
1920:       assertFalse(node1.isRegExp());
1921:       assertFalse(node1.isString());
1922:       assertFalse(node1.isCase());
1923:       assertFalse(node1.isFor());
1924:       assertEquals(2, node1.getLineno());
1925:       assertEquals(0, node1.getChildCount());
1926:       assertFalse(node1.isComma());
1927:       assertFalse(node1.isName());
1928:       assertFalse(node1.isStringKey());
1929:       assertFalse(node1.isBreak());
1930:       assertFalse(node1.isCall());
1931:       assertFalse(node1.isNull());
1932:       assertEquals(2, node1.getCharno());
1933:       assertFalse(node1.isParamList());
1934:       assertFalse(node1.isVoid());
1935:       assertFalse(node1.isNew());
1936:       assertFalse(node1.isAdd());
1937:       assertFalse(node1.isTrue());
1938:       assertFalse(node1.isEmpty());
1939:       assertFalse(node1.isDo());
1940:       assertFalse(node1.isVar());
1941:       assertFalse(node1.isDefaultCase());
1942:       assertFalse(node1.isAssignAdd());
1943:       assertFalse(node2.hasOneChild());
1944:       assertFalse(node2.isExprResult());
1945:       assertFalse(node2.isCast());
1946:       assertFalse(node2.isAssign());
1947:       assertFalse(node2.isDec());
1948:       assertFalse(node2.isScript());
1949:       assertFalse(node2.hasChildren());
1950:       assertFalse(node2.isAssignAdd());
1951:       assertFalse(node2.isLabel());
1952:       assertFalse(node2.isGetProp());
1953:       assertFalse(node2.isObjectLit());
1954:       assertFalse(node2.isContinue());
1955:       assertEquals(1091, node2.getCharno());
1956:       assertFalse(node2.isNot());
1957:       assertFalse(node2.isAnd());
1958:       assertFalse(node2.isLabelName());
1959:       assertFalse(node2.isBlock());
1960:       assertFalse(node2.isHook());
1961:       assertEquals(623683, node2.getSourcePosition());
1962:       assertFalse(node2.isFalse());
1963:       assertFalse(node2.isCase());
1964:       assertFalse(node2.isInc());
1965:       assertEquals(39, node2.getType());
1966:       assertFalse(node2.isThis());
1967:       assertFalse(node2.isSetterDef());
1968:       assertFalse(node2.isThrow());
1969:       assertFalse(node2.isInstanceOf());
1970:       assertFalse(node2.isCatch());
1971:       assertFalse(node2.isWith());
1972:       assertFalse(node2.isIn());
1973:       assertFalse(node2.hasMoreThanOneChild());
1974:       assertEquals(152, node2.getLineno());
1975:       assertFalse(node2.isNE());
1976:       assertFalse(node2.isIf());
1977:       assertFalse(node2.isArrayLit());
1978:       assertFalse(node2.isDebugger());
1979:       assertFalse(node2.isFunction());
1980:       assertFalse(node2.isRegExp());
1981:       assertFalse(node2.isFor());
1982:       assertFalse(node2.isEmpty());
1983:       assertFalse(node2.isTry());
1984:       assertFalse(node2.isDefaultCase());
1985:       assertEquals(0, node2.getChildCount());
1986:       assertTrue(node2.isNumber());
1987:       assertFalse(node2.isGetterDef());
1988:       assertFalse(node2.isParamList());
1989:       assertFalse(node2.isStringKey());
1990:       assertFalse(node2.isSwitch());
1991:       assertFalse(node2.isVar());
1992:       assertFalse(node2.isNew());
1993:       assertFalse(node2.isAdd());
1994:       assertFalse(node2.isCall());
1995:       assertFalse(node2.isWhile());
1996:       assertFalse(node2.isString());
1997:       assertFalse(node2.isDo());
1998:       assertFalse(node2.isOr());
1999:       assertFalse(node2.isReturn());
2000:       assertFalse(node2.isComma());
2001:       assertFalse(node2.isTypeOf());
2002:       assertFalse(node2.isDelProp());
2003:       assertFalse(node2.isBreak());
2004:       assertFalse(node2.isNull());
2005:       assertFalse(node2.isGetElem());
2006:       assertFalse(node2.isTrue());
2007:       assertFalse(node2.isVoid());
2008:       assertFalse(node2.isName());
2009:       assertFalse(node3.isFalse());
2010:       assertFalse(node3.isThrow());
2011:       assertFalse(node3.isHook());
2012:       assertFalse(node3.isThis());
2013:       assertFalse(node3.isComma());
2014:       assertFalse(node3.isInc());
2015:       assertEquals(46, node3.getType());
2016:       assertFalse(node3.isGetProp());
2017:       assertFalse(node3.isCase());
2018:       assertFalse(node3.isWith());
2019:       assertEquals(1, node3.getChildCount());
2020:       assertTrue(node3.hasChildren());
2021:       assertEquals(996, node3.getLineno());
2022:       assertFalse(node3.isInstanceOf());
2023:       assertFalse(node3.isDelProp());
2024:       assertFalse(node3.isExprResult());
2025:       assertFalse(node3.isBreak());
2026:       assertFalse(node3.isGetElem());
2027:       assertFalse(node3.isAssign());
2028:       assertFalse(node3.isIf());
2029:       assertFalse(node3.isDec());
2030:       assertFalse(node3.isTypeOf());
2031:       assertFalse(node3.isNE());
2032:       assertTrue(node3.hasOneChild());
2033:       assertFalse(node3.isIn());
2034:       assertFalse(node3.isNot());
2035:       assertFalse(node3.isObjectLit());
2036:       assertFalse(node3.isString());
2037:       assertFalse(node3.isAnd());
2038:       assertFalse(node3.isContinue());
2039:       assertEquals(1, node3.getCharno());
2040:       assertFalse(node3.isDebugger());
2041:       assertFalse(node3.isFunction());
2042:       assertFalse(node3.isCast());
2043:       assertFalse(node3.isStringKey());
2044:       assertFalse(node3.isName());
2045:       assertFalse(node3.isNull());
2046:       assertFalse(node3.isVar());
2047:       assertFalse(node3.isBlock());
2048:       assertFalse(node3.isNew());
2049:       assertFalse(node3.isAdd());
2050:       assertFalse(node3.isSetterDef());
2051:       assertFalse(node3.isCatch());
2052:       assertFalse(node3.isWhile());
2053:       assertFalse(node3.hasMoreThanOneChild());
2054:       assertFalse(node3.isRegExp());
2055:       assertFalse(node3.isTrue());
2056:       assertFalse(node3.isReturn());
2057:       assertFalse(node3.isVoid());
2058:       assertFalse(node3.isCall());
2059:       assertFalse(node3.isLabelName());
2060:       assertFalse(node3.isFor());
2061:       assertFalse(node3.isEmpty());
2062:       assertFalse(node3.isNumber());
2063:       assertFalse(node3.isGetterDef());
2064:       assertEquals(4079617, node3.getSourcePosition());
2065:       assertFalse(node3.isTry());
2066:       assertFalse(node3.isOr());
2067:       assertFalse(node3.isAssignAdd());
2068:       assertFalse(node3.isScript());
2069:       assertFalse(node3.isDo());
2070:       assertFalse(node3.isDefaultCase());
2071:       assertFalse(node3.isLabel());
2072:       assertFalse(node3.isParamList());
2073:       assertFalse(node3.isSwitch());
2074:       assertFalse(node3.isArrayLit());
2075:       
2076:       int int0 = node3.getIndexOfChild(node2);
2077:       assertFalse(node0.equals((Object)node1));
2078:       assertFalse(node0.equals((Object)node3));
2079:       assertFalse(node1.equals((Object)node2));
2080:       assertFalse(node1.equals((Object)node3));
2081:       assertFalse(node1.equals((Object)node0));
2082:       assertFalse(node2.equals((Object)node3));
2083:       assertFalse(node2.equals((Object)node1));
2084:       assertFalse(node3.equals((Object)node0));
2085:       assertFalse(node3.equals((Object)node1));
2086:       assertFalse(node3.equals((Object)node2));
2087:       assertEquals(0, int0);
2088:       assertSame(node0, node2);
2089:       assertNotSame(node1, node3);
2090:       assertSame(node2, node0);
2091:       assertNotSame(node3, node1);
2092:       assertFalse(node0.isExprResult());
2093:       assertFalse(node0.isScript());
2094:       assertFalse(node0.hasOneChild());
2095:       assertFalse(node0.isGetElem());
2096:       assertFalse(node0.isWith());
2097:       assertFalse(node0.isCast());
2098:       assertFalse(node0.isInstanceOf());
2099:       assertFalse(node0.isDec());
2100:       assertFalse(node0.isTypeOf());
2101:       assertFalse(node0.hasChildren());
2102:       assertFalse(node0.isAssign());
2103:       assertFalse(node0.isLabel());
2104:       assertFalse(node0.isAssignAdd());
2105:       assertFalse(node0.isBreak());
2106:       assertEquals(152, node0.getLineno());
2107:       assertFalse(node0.isOr());
2108:       assertFalse(node0.isBlock());
2109:       assertFalse(node0.isNew());
2110:       assertFalse(node0.isAdd());
2111:       assertFalse(node0.isSwitch());
2112:       assertFalse(node0.isDo());
2113:       assertEquals(39, node0.getType());
2114:       assertFalse(node0.isVar());
2115:       assertFalse(node0.isHook());
2116:       assertFalse(node0.hasMoreThanOneChild());
2117:       assertFalse(node0.isThis());
2118:       assertFalse(node0.isParamList());
2119:       assertFalse(node0.isLabelName());
2120:       assertFalse(node0.isCase());
2121:       assertFalse(node0.isStringKey());
2122:       assertFalse(node0.isGetterDef());
2123:       assertFalse(node0.isTrue());
2124:       assertFalse(node0.isArrayLit());
2125:       assertFalse(node0.isDefaultCase());
2126:       assertFalse(node0.isTry());
2127:       assertFalse(node0.isVoid());
2128:       assertFalse(node0.isFor());
2129:       assertFalse(node0.isCatch());
2130:       assertFalse(node0.isRegExp());
2131:       assertFalse(node0.isFunction());
2132:       assertEquals(0, node0.getChildCount());
2133:       assertFalse(node0.isSetterDef());
2134:       assertFalse(node0.isNE());
2135:       assertFalse(node0.isIf());
2136:       assertFalse(node0.isDelProp());
2137:       assertFalse(node0.isName());
2138:       assertFalse(node0.isEmpty());
2139:       assertFalse(node0.isNull());
2140:       assertFalse(node0.isIn());
2141:       assertEquals(623683, node0.getSourcePosition());
2142:       assertFalse(node0.isInc());
2143:       assertFalse(node0.isFalse());
2144:       assertFalse(node0.isContinue());
2145:       assertFalse(node0.isWhile());
2146:       assertFalse(node0.isCall());
2147:       assertFalse(node0.isThrow());
2148:       assertFalse(node0.isComma());
2149:       assertFalse(node0.isGetProp());
2150:       assertFalse(node0.isReturn());
2151:       assertTrue(node0.isNumber());
2152:       assertFalse(node0.isAnd());
2153:       assertEquals(1091, node0.getCharno());
2154:       assertFalse(node0.isString());
2155:       assertFalse(node0.isObjectLit());
2156:       assertFalse(node0.isDebugger());
2157:       assertFalse(node0.isNot());
2158:       assertFalse(node1.isLabel());
2159:       assertEquals((-432), node1.getType());
2160:       assertFalse(node1.isOr());
2161:       assertFalse(node1.isReturn());
2162:       assertFalse(node1.isTypeOf());
2163:       assertFalse(node1.isDec());
2164:       assertFalse(node1.isContinue());
2165:       assertFalse(node1.isNumber());
2166:       assertFalse(node1.hasMoreThanOneChild());
2167:       assertFalse(node1.isLabelName());
2168:       assertFalse(node1.isGetElem());
2169:       assertFalse(node1.isBlock());
2170:       assertFalse(node1.isExprResult());
2171:       assertFalse(node1.isScript());
2172:       assertFalse(node1.isWith());
2173:       assertFalse(node1.isAssign());
2174:       assertFalse(node1.hasChildren());
2175:       assertFalse(node1.hasOneChild());
2176:       assertFalse(node1.isWhile());
2177:       assertFalse(node1.isGetProp());
2178:       assertFalse(node1.isThis());
2179:       assertFalse(node1.isSetterDef());
2180:       assertFalse(node1.isInstanceOf());
2181:       assertFalse(node1.isCatch());
2182:       assertFalse(node1.isObjectLit());
2183:       assertFalse(node1.isNot());
2184:       assertFalse(node1.isAnd());
2185:       assertFalse(node1.isInc());
2186:       assertEquals(8194, node1.getSourcePosition());
2187:       assertFalse(node1.isCast());
2188:       assertFalse(node1.isFunction());
2189:       assertFalse(node1.isFalse());
2190:       assertFalse(node1.isThrow());
2191:       assertFalse(node1.isGetterDef());
2192:       assertFalse(node1.isIn());
2193:       assertFalse(node1.isArrayLit());
2194:       assertFalse(node1.isNE());
2195:       assertFalse(node1.isDelProp());
2196:       assertFalse(node1.isSwitch());
2197:       assertFalse(node1.isIf());
2198:       assertFalse(node1.isTry());
2199:       assertFalse(node1.isDebugger());
2200:       assertFalse(node1.isHook());
2201:       assertFalse(node1.isRegExp());
2202:       assertFalse(node1.isString());
2203:       assertFalse(node1.isCase());
2204:       assertFalse(node1.isFor());
2205:       assertEquals(2, node1.getLineno());
2206:       assertEquals(0, node1.getChildCount());
2207:       assertFalse(node1.isComma());
2208:       assertFalse(node1.isName());
2209:       assertFalse(node1.isStringKey());
2210:       assertFalse(node1.isBreak());
2211:       assertFalse(node1.isCall());
2212:       assertFalse(node1.isNull());
2213:       assertEquals(2, node1.getCharno());
2214:       assertFalse(node1.isParamList());
2215:       assertFalse(node1.isVoid());
2216:       assertFalse(node1.isNew());
2217:       assertFalse(node1.isAdd());
2218:       assertFalse(node1.isTrue());
2219:       assertFalse(node1.isEmpty());
2220:       assertFalse(node1.isDo());
2221:       assertFalse(node1.isVar());
2222:       assertFalse(node1.isDefaultCase());
2223:       assertFalse(node1.isAssignAdd());
2224:       assertFalse(node2.hasOneChild());
2225:       assertFalse(node2.isExprResult());
2226:       assertFalse(node2.isCast());
2227:       assertFalse(node2.isAssign());
2228:       assertFalse(node2.isDec());
2229:       assertFalse(node2.isScript());
2230:       assertFalse(node2.hasChildren());
2231:       assertFalse(node2.isAssignAdd());
2232:       assertFalse(node2.isLabel());
2233:       assertFalse(node2.isGetProp());
2234:       assertFalse(node2.isObjectLit());
2235:       assertFalse(node2.isContinue());
2236:       assertEquals(1091, node2.getCharno());
2237:       assertFalse(node2.isNot());
2238:       assertFalse(node2.isAnd());
2239:       assertFalse(node2.isLabelName());
2240:       assertFalse(node2.isBlock());
2241:       assertFalse(node2.isHook());
2242:       assertEquals(623683, node2.getSourcePosition());
2243:       assertFalse(node2.isFalse());
2244:       assertFalse(node2.isCase());
2245:       assertFalse(node2.isInc());
2246:       assertEquals(39, node2.getType());
2247:       assertFalse(node2.isThis());
2248:       assertFalse(node2.isSetterDef());
2249:       assertFalse(node2.isThrow());
2250:       assertFalse(node2.isInstanceOf());
2251:       assertFalse(node2.isCatch());
2252:       assertFalse(node2.isWith());
2253:       assertFalse(node2.isIn());
2254:       assertFalse(node2.hasMoreThanOneChild());
2255:       assertEquals(152, node2.getLineno());
2256:       assertFalse(node2.isNE());
2257:       assertFalse(node2.isIf());
2258:       assertFalse(node2.isArrayLit());
2259:       assertFalse(node2.isDebugger());
2260:       assertFalse(node2.isFunction());
2261:       assertFalse(node2.isRegExp());
2262:       assertFalse(node2.isFor());
2263:       assertFalse(node2.isEmpty());
2264:       assertFalse(node2.isTry());
2265:       assertFalse(node2.isDefaultCase());
2266:       assertEquals(0, node2.getChildCount());
2267:       assertTrue(node2.isNumber());
2268:       assertFalse(node2.isGetterDef());
2269:       assertFalse(node2.isParamList());
2270:       assertFalse(node2.isStringKey());
2271:       assertFalse(node2.isSwitch());
2272:       assertFalse(node2.isVar());
2273:       assertFalse(node2.isNew());
2274:       assertFalse(node2.isAdd());
2275:       assertFalse(node2.isCall());
2276:       assertFalse(node2.isWhile());
2277:       assertFalse(node2.isString());
2278:       assertFalse(node2.isDo());
2279:       assertFalse(node2.isOr());
2280:       assertFalse(node2.isReturn());
2281:       assertFalse(node2.isComma());
2282:       assertFalse(node2.isTypeOf());
2283:       assertFalse(node2.isDelProp());
2284:       assertFalse(node2.isBreak());
2285:       assertFalse(node2.isNull());
2286:       assertFalse(node2.isGetElem());
2287:       assertFalse(node2.isTrue());
2288:       assertFalse(node2.isVoid());
2289:       assertFalse(node2.isName());
2290:       assertFalse(node3.isFalse());
2291:       assertFalse(node3.isThrow());
2292:       assertFalse(node3.isHook());
2293:       assertFalse(node3.isThis());
2294:       assertFalse(node3.isComma());
2295:       assertFalse(node3.isInc());
2296:       assertEquals(46, node3.getType());
2297:       assertFalse(node3.isGetProp());
2298:       assertFalse(node3.isCase());
2299:       assertFalse(node3.isWith());
2300:       assertEquals(1, node3.getChildCount());
2301:       assertTrue(node3.hasChildren());
2302:       assertEquals(996, node3.getLineno());
2303:       assertFalse(node3.isInstanceOf());
2304:       assertFalse(node3.isDelProp());
2305:       assertFalse(node3.isExprResult());
2306:       assertFalse(node3.isBreak());
2307:       assertFalse(node3.isGetElem());
2308:       assertFalse(node3.isAssign());
2309:       assertFalse(node3.isIf());
2310:       assertFalse(node3.isDec());
2311:       assertFalse(node3.isTypeOf());
2312:       assertFalse(node3.isNE());
2313:       assertTrue(node3.hasOneChild());
2314:       assertFalse(node3.isIn());
2315:       assertFalse(node3.isNot());
2316:       assertFalse(node3.isObjectLit());
2317:       assertFalse(node3.isString());
2318:       assertFalse(node3.isAnd());
2319:       assertFalse(node3.isContinue());
2320:       assertEquals(1, node3.getCharno());
2321:       assertFalse(node3.isDebugger());
2322:       assertFalse(node3.isFunction());
2323:       assertFalse(node3.isCast());
2324:       assertFalse(node3.isStringKey());
2325:       assertFalse(node3.isName());
2326:       assertFalse(node3.isNull());
2327:       assertFalse(node3.isVar());
2328:       assertFalse(node3.isBlock());
2329:       assertFalse(node3.isNew());
2330:       assertFalse(node3.isAdd());
2331:       assertFalse(node3.isSetterDef());
2332:       assertFalse(node3.isCatch());
2333:       assertFalse(node3.isWhile());
2334:       assertFalse(node3.hasMoreThanOneChild());
2335:       assertFalse(node3.isRegExp());
2336:       assertFalse(node3.isTrue());
2337:       assertFalse(node3.isReturn());
2338:       assertFalse(node3.isVoid());
2339:       assertFalse(node3.isCall());
2340:       assertFalse(node3.isLabelName());
2341:       assertFalse(node3.isFor());
2342:       assertFalse(node3.isEmpty());
2343:       assertFalse(node3.isNumber());
2344:       assertFalse(node3.isGetterDef());
2345:       assertEquals(4079617, node3.getSourcePosition());
2346:       assertFalse(node3.isTry());
2347:       assertFalse(node3.isOr());
2348:       assertFalse(node3.isAssignAdd());
2349:       assertFalse(node3.isScript());
2350:       assertFalse(node3.isDo());
2351:       assertFalse(node3.isDefaultCase());
2352:       assertFalse(node3.isLabel());
2353:       assertFalse(node3.isParamList());
2354:       assertFalse(node3.isSwitch());
2355:       assertFalse(node3.isArrayLit());
2356:       
2357:       boolean boolean8 = node3.isNew();
2358:       assertFalse(node0.equals((Object)node1));
2359:       assertFalse(node0.equals((Object)node3));
2360:       assertTrue(boolean8 == boolean7);
2361:       assertTrue(boolean8 == boolean2);
2362:       assertTrue(boolean8 == boolean0);
2363:       assertTrue(boolean8 == boolean1);
2364:       assertTrue(boolean8 == boolean4);
2365:       assertTrue(boolean8 == boolean5);
2366:       assertTrue(boolean8 == boolean3);
2367:       assertTrue(boolean8 == boolean6);
2368:       assertFalse(node1.equals((Object)node2));
2369:       assertFalse(node1.equals((Object)node3));
2370:       assertFalse(node1.equals((Object)node0));
2371:       assertFalse(node2.equals((Object)node3));
2372:       assertFalse(node2.equals((Object)node1));
2373:       assertFalse(node3.equals((Object)node0));
2374:       assertFalse(node3.equals((Object)node1));
2375:       assertFalse(node3.equals((Object)node2));
2376:       assertFalse(boolean8);
2377:       assertSame(node0, node2);
2378:       assertNotSame(node1, node3);
2379:       assertSame(node2, node0);
2380:       assertNotSame(node3, node1);
2381:       assertFalse(node0.isExprResult());
2382:       assertFalse(node0.isScript());
2383:       assertFalse(node0.hasOneChild());
2384:       assertFalse(node0.isGetElem());
2385:       assertFalse(node0.isWith());
2386:       assertFalse(node0.isCast());
2387:       assertFalse(node0.isInstanceOf());
2388:       assertFalse(node0.isDec());
2389:       assertFalse(node0.isTypeOf());
2390:       assertFalse(node0.hasChildren());
2391:       assertFalse(node0.isAssign());
2392:       assertFalse(node0.isLabel());
2393:       assertFalse(node0.isAssignAdd());
2394:       assertFalse(node0.isBreak());
2395:       assertEquals(152, node0.getLineno());
2396:       assertFalse(node0.isOr());
2397:       assertFalse(node0.isBlock());
2398:       assertFalse(node0.isNew());
2399:       assertFalse(node0.isAdd());
2400:       assertFalse(node0.isSwitch());
2401:       assertFalse(node0.isDo());
2402:       assertEquals(39, node0.getType());
2403:       assertFalse(node0.isVar());
2404:       assertFalse(node0.isHook());
2405:       assertFalse(node0.hasMoreThanOneChild());
2406:       assertFalse(node0.isThis());
2407:       assertFalse(node0.isParamList());
2408:       assertFalse(node0.isLabelName());
2409:       assertFalse(node0.isCase());
2410:       assertFalse(node0.isStringKey());
2411:       assertFalse(node0.isGetterDef());
2412:       assertFalse(node0.isTrue());
2413:       assertFalse(node0.isArrayLit());
2414:       assertFalse(node0.isDefaultCase());
2415:       assertFalse(node0.isTry());
2416:       assertFalse(node0.isVoid());
2417:       assertFalse(node0.isFor());
2418:       assertFalse(node0.isCatch());
2419:       assertFalse(node0.isRegExp());
2420:       assertFalse(node0.isFunction());
2421:       assertEquals(0, node0.getChildCount());
2422:       assertFalse(node0.isSetterDef());
2423:       assertFalse(node0.isNE());
2424:       assertFalse(node0.isIf());
2425:       assertFalse(node0.isDelProp());
2426:       assertFalse(node0.isName());
2427:       assertFalse(node0.isEmpty());
2428:       assertFalse(node0.isNull());
2429:       assertFalse(node0.isIn());
2430:       assertEquals(623683, node0.getSourcePosition());
2431:       assertFalse(node0.isInc());
2432:       assertFalse(node0.isFalse());
2433:       assertFalse(node0.isContinue());
2434:       assertFalse(node0.isWhile());
2435:       assertFalse(node0.isCall());
2436:       assertFalse(node0.isThrow());
2437:       assertFalse(node0.isComma());
2438:       assertFalse(node0.isGetProp());
2439:       assertFalse(node0.isReturn());
2440:       assertTrue(node0.isNumber());
2441:       assertFalse(node0.isAnd());
2442:       assertEquals(1091, node0.getCharno());
2443:       assertFalse(node0.isString());
2444:       assertFalse(node0.isObjectLit());
2445:       assertFalse(node0.isDebugger());
2446:       assertFalse(node0.isNot());
2447:       assertFalse(node1.isLabel());
2448:       assertEquals((-432), node1.getType());
2449:       assertFalse(node1.isOr());
2450:       assertFalse(node1.isReturn());
2451:       assertFalse(node1.isTypeOf());
2452:       assertFalse(node1.isDec());
2453:       assertFalse(node1.isContinue());
2454:       assertFalse(node1.isNumber());
2455:       assertFalse(node1.hasMoreThanOneChild());
2456:       assertFalse(node1.isLabelName());
2457:       assertFalse(node1.isGetElem());
2458:       assertFalse(node1.isBlock());
2459:       assertFalse(node1.isExprResult());
2460:       assertFalse(node1.isScript());
2461:       assertFalse(node1.isWith());
2462:       assertFalse(node1.isAssign());
2463:       assertFalse(node1.hasChildren());
2464:       assertFalse(node1.hasOneChild());
2465:       assertFalse(node1.isWhile());
2466:       assertFalse(node1.isGetProp());
2467:       assertFalse(node1.isThis());
2468:       assertFalse(node1.isSetterDef());
2469:       assertFalse(node1.isInstanceOf());
2470:       assertFalse(node1.isCatch());
2471:       assertFalse(node1.isObjectLit());
2472:       assertFalse(node1.isNot());
2473:       assertFalse(node1.isAnd());
2474:       assertFalse(node1.isInc());
2475:       assertEquals(8194, node1.getSourcePosition());
2476:       assertFalse(node1.isCast());
2477:       assertFalse(node1.isFunction());
2478:       assertFalse(node1.isFalse());
2479:       assertFalse(node1.isThrow());
2480:       assertFalse(node1.isGetterDef());
2481:       assertFalse(node1.isIn());
2482:       assertFalse(node1.isArrayLit());
2483:       assertFalse(node1.isNE());
2484:       assertFalse(node1.isDelProp());
2485:       assertFalse(node1.isSwitch());
2486:       assertFalse(node1.isIf());
2487:       assertFalse(node1.isTry());
2488:       assertFalse(node1.isDebugger());
2489:       assertFalse(node1.isHook());
2490:       assertFalse(node1.isRegExp());
2491:       assertFalse(node1.isString());
2492:       assertFalse(node1.isCase());
2493:       assertFalse(node1.isFor());
2494:       assertEquals(2, node1.getLineno());
2495:       assertEquals(0, node1.getChildCount());
2496:       assertFalse(node1.isComma());
2497:       assertFalse(node1.isName());
2498:       assertFalse(node1.isStringKey());
2499:       assertFalse(node1.isBreak());
2500:       assertFalse(node1.isCall());
2501:       assertFalse(node1.isNull());
2502:       assertEquals(2, node1.getCharno());
2503:       assertFalse(node1.isParamList());
2504:       assertFalse(node1.isVoid());
2505:       assertFalse(node1.isNew());
2506:       assertFalse(node1.isAdd());
2507:       assertFalse(node1.isTrue());
2508:       assertFalse(node1.isEmpty());
2509:       assertFalse(node1.isDo());
2510:       assertFalse(node1.isVar());
2511:       assertFalse(node1.isDefaultCase());
2512:       assertFalse(node1.isAssignAdd());
2513:       assertFalse(node2.hasOneChild());
2514:       assertFalse(node2.isExprResult());
2515:       assertFalse(node2.isCast());
2516:       assertFalse(node2.isAssign());
2517:       assertFalse(node2.isDec());
2518:       assertFalse(node2.isScript());
2519:       assertFalse(node2.hasChildren());
2520:       assertFalse(node2.isAssignAdd());
2521:       assertFalse(node2.isLabel());
2522:       assertFalse(node2.isGetProp());
2523:       assertFalse(node2.isObjectLit());
2524:       assertFalse(node2.isContinue());
2525:       assertEquals(1091, node2.getCharno());
2526:       assertFalse(node2.isNot());
2527:       assertFalse(node2.isAnd());
2528:       assertFalse(node2.isLabelName());
2529:       assertFalse(node2.isBlock());
2530:       assertFalse(node2.isHook());
2531:       assertEquals(623683, node2.getSourcePosition());
2532:       assertFalse(node2.isFalse());
2533:       assertFalse(node2.isCase());
2534:       assertFalse(node2.isInc());
2535:       assertEquals(39, node2.getType());
2536:       assertFalse(node2.isThis());
2537:       assertFalse(node2.isSetterDef());
2538:       
2539:       node0.setWasEmptyNode(false);
2540:       assertFalse(node0.equals((Object)node1));
2541:       assertFalse(node0.equals((Object)node3));
2542:       assertSame(node0, node2);
2543:   }
2544: }
RegularFileObject[/tmp/EvoSuite_129_1629223123838/com/google/javascript/rhino/Node_129_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:44 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_129_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_129_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_129_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.SimpleErrorReporter",
258:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
259:       "com.google.common.base.Joiner",
260:       "com.google.common.base.Preconditions",
261:       "com.google.common.base.Joiner$1",
262:       "com.google.common.collect.Collections2",
263:       "com.google.common.base.Joiner$MapJoiner",
264:       "com.google.common.collect.Maps",
265:       "com.google.common.collect.AbstractMultimap",
266:       "com.google.common.collect.AbstractMapBasedMultimap",
267:       "com.google.common.collect.AbstractSetMultimap",
268:       "com.google.common.collect.LinkedHashMultimap",
269:       "com.google.common.collect.AbstractMapEntry",
270:       "com.google.common.collect.ImmutableEntry",
271:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
272:       "com.google.common.collect.AbstractListMultimap",
273:       "com.google.common.collect.ArrayListMultimap",
274:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
275:       "com.google.common.collect.ImmutableCollection",
276:       "com.google.common.collect.RegularImmutableList",
277:       "com.google.common.collect.ObjectArrays",
278:       "com.google.common.collect.ImmutableList",
279:       "com.google.javascript.rhino.jstype.ModificationVisitor",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
281:       "com.google.common.collect.ImmutableCollection$Builder",
282:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
283:       "com.google.common.collect.ImmutableList$Builder",
284:       "com.google.common.collect.UnmodifiableIterator",
285:       "com.google.common.collect.UnmodifiableListIterator",
286:       "com.google.common.collect.Iterators$1",
287:       "com.google.common.collect.Iterators$2",
288:       "com.google.common.collect.Iterators",
289:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
290:       "com.google.javascript.rhino.jstype.JSType$1",
291:       "com.google.javascript.rhino.jstype.JSType",
292:       "com.google.javascript.rhino.jstype.ObjectType",
293:       "com.google.javascript.rhino.jstype.ProxyObjectType",
294:       "com.google.javascript.rhino.jstype.TemplateType",
295:       "com.google.javascript.rhino.jstype.ValueType",
296:       "com.google.javascript.rhino.jstype.BooleanType",
297:       "com.google.javascript.rhino.jstype.NullType",
298:       "com.google.javascript.rhino.jstype.NumberType",
299:       "com.google.javascript.rhino.jstype.StringType",
300:       "com.google.javascript.rhino.jstype.UnknownType",
301:       "com.google.javascript.rhino.jstype.VoidType",
302:       "com.google.javascript.rhino.jstype.AllType",
303:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
304:       "com.google.common.collect.ImmutableMap",
305:       "com.google.common.collect.ImmutableBiMap",
306:       "com.google.common.collect.EmptyImmutableBiMap",
307:       "com.google.javascript.rhino.jstype.PropertyMap$1",
308:       "com.google.javascript.rhino.jstype.PropertyMap",
309:       "com.google.javascript.rhino.jstype.FunctionType",
310:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
311:       "com.google.javascript.rhino.Token",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.JSDocInfo",
330:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
331:       "com.google.common.collect.Sets",
332:       "com.google.common.base.Objects",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
339:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
340:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
341:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.common.collect.Platform",
349:       "com.google.common.collect.Iterables",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.NamedType",
359:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
360:       "com.google.javascript.rhino.jstype.JSType$2",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 17:58:44.671 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

Node node0 = Node.newNumber((double) (-432), 152, 1091);
assertNotNull(node0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());

Node node1 = new Node((-432), node0, node0, node0, 2, 2);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node1.isLabel());
assertEquals((-432), node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertEquals(2, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertEquals(2, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());

boolean boolean0 = node1.isCast();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node1.isLabel());
assertEquals((-432), node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertEquals(2, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertEquals(2, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());

boolean boolean1 = node1.isFromExterns();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node1.isLabel());
assertEquals((-432), node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertEquals(2, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertEquals(2, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());

boolean boolean2 = node0.isVoid();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());

MockFile mockFile0 = new MockFile("SMHqiFE ");
assertNotNull(mockFile0);

MockFile mockFile1 = new MockFile(mockFile0, "SMHqiFE ");
assertFalse(mockFile1.equals((Object)mockFile0));
assertNotNull(mockFile1);

Node node2 = node0.detachFromParent();
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node2.hasOneChild());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isScript());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertEquals(1091, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals(623683, node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(152, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertTrue(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetElem());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isName());

node2.setWasEmptyNode(false);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node2.hasOneChild());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isScript());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertEquals(1091, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals(623683, node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(152, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertTrue(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetElem());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isName());

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertSame(node0, node2);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());

boolean boolean3 = node1.isVoid();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);
assertSame(node0, node2);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node1.isLabel());
assertEquals((-432), node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertEquals(2, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertEquals(2, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());

boolean boolean4 = node1.isDebugger();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(boolean4);
assertSame(node0, node2);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node1.isLabel());
assertEquals((-432), node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertEquals(2, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertEquals(2, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());

boolean boolean5 = node1.hasChildren();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertFalse(boolean5);
assertSame(node0, node2);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node1.isLabel());
assertEquals((-432), node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertEquals(2, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertEquals(2, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());

Node node3 = new Node(46, node2, node1, node0, node2, 996, 1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertNotNull(node3);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node1.isLabel());
assertEquals((-432), node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertEquals(2, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertEquals(2, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isScript());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertEquals(1091, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals(623683, node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(152, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertTrue(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetElem());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isInc());
assertEquals(46, node3.getType());
assertFalse(node3.isGetProp());
assertFalse(node3.isCase());
assertFalse(node3.isWith());
assertEquals(1, node3.getChildCount());
assertTrue(node3.hasChildren());
assertEquals(996, node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isDelProp());
assertFalse(node3.isExprResult());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isIf());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNE());
assertTrue(node3.hasOneChild());
assertFalse(node3.isIn());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isString());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertEquals(1, node3.getCharno());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCatch());
assertFalse(node3.isWhile());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isTrue());
assertFalse(node3.isReturn());
assertFalse(node3.isVoid());
assertFalse(node3.isCall());
assertFalse(node3.isLabelName());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertEquals(4079617, node3.getSourcePosition());
assertFalse(node3.isTry());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isScript());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isLabel());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());

boolean boolean6 = node2.isTrue();
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(boolean6);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node2.hasOneChild());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isScript());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertEquals(1091, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals(623683, node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(152, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertTrue(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetElem());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isName());

boolean boolean7 = node3.isCatch();
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(boolean7);
assertSame(node0, node2);
assertNotSame(node1, node3);
assertSame(node2, node0);
assertNotSame(node3, node1);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node1.isLabel());
assertEquals((-432), node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertEquals(2, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertEquals(2, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isScript());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertEquals(1091, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals(623683, node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(152, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertTrue(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetElem());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isInc());
assertEquals(46, node3.getType());
assertFalse(node3.isGetProp());
assertFalse(node3.isCase());
assertFalse(node3.isWith());
assertEquals(1, node3.getChildCount());
assertTrue(node3.hasChildren());
assertEquals(996, node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isDelProp());
assertFalse(node3.isExprResult());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isIf());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNE());
assertTrue(node3.hasOneChild());
assertFalse(node3.isIn());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isString());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertEquals(1, node3.getCharno());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCatch());
assertFalse(node3.isWhile());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isTrue());
assertFalse(node3.isReturn());
assertFalse(node3.isVoid());
assertFalse(node3.isCall());
assertFalse(node3.isLabelName());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertEquals(4079617, node3.getSourcePosition());
assertFalse(node3.isTry());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isScript());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isLabel());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());

int int0 = node3.getIndexOfChild(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertEquals(0, int0);
assertSame(node0, node2);
assertNotSame(node1, node3);
assertSame(node2, node0);
assertNotSame(node3, node1);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node1.isLabel());
assertEquals((-432), node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertEquals(2, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertEquals(2, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isScript());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertEquals(1091, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals(623683, node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(152, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertTrue(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isGetElem());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isInc());
assertEquals(46, node3.getType());
assertFalse(node3.isGetProp());
assertFalse(node3.isCase());
assertFalse(node3.isWith());
assertEquals(1, node3.getChildCount());
assertTrue(node3.hasChildren());
assertEquals(996, node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isDelProp());
assertFalse(node3.isExprResult());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isIf());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNE());
assertTrue(node3.hasOneChild());
assertFalse(node3.isIn());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isString());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertEquals(1, node3.getCharno());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCatch());
assertFalse(node3.isWhile());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isTrue());
assertFalse(node3.isReturn());
assertFalse(node3.isVoid());
assertFalse(node3.isCall());
assertFalse(node3.isLabelName());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertEquals(4079617, node3.getSourcePosition());
assertFalse(node3.isTry());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isScript());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isLabel());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());

boolean boolean8 = node3.isNew();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean1);
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean5);
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean6);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(boolean8);
assertSame(node0, node2);
assertNotSame(node1, node3);
assertSame(node2, node0);
assertNotSame(node3, node1);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertEquals(152, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node1.isLabel());
assertEquals((-432), node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertEquals(2, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertEquals(2, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isScript());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertEquals(1091, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals(623683, node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());

node0.setWasEmptyNode(false);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertSame(node0, node2);


[MASTER] 17:58:47.978 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_141_1629223127413/com/google/javascript/rhino/Node_141_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_141_1629223127413/com/google/javascript/rhino/Node_141_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:47.978 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:47.978 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:47.979 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 868
[MASTER] 17:58:47.980 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_141_1629223127413/com/google/javascript/rhino/Node_141_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:47 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSTypeRegistry;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.mock.java.io.MockFile;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_141_tmp__ESTest extends Node_141_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
24:       assertNotNull(simpleErrorReporter0);
25:       
26:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
27:       assertNotNull(jSTypeRegistry0);
28:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
29:       
30:       Node node0 = Node.newNumber((double) (-432), 152, 1091);
31:       assertNotNull(node0);
32:       assertFalse(node0.isInstanceOf());
33:       assertFalse(node0.isGetProp());
34:       assertFalse(node0.isBreak());
35:       assertFalse(node0.isNot());
36:       assertFalse(node0.isAnd());
37:       assertFalse(node0.isObjectLit());
38:       assertFalse(node0.isCast());
39:       assertFalse(node0.isSwitch());
40:       assertFalse(node0.isInc());
41:       assertFalse(node0.isFalse());
42:       assertFalse(node0.isThrow());
43:       assertFalse(node0.isIn());
44:       assertFalse(node0.isCase());
45:       assertEquals(152, node0.getLineno());
46:       assertFalse(node0.isLabelName());
47:       assertFalse(node0.isIf());
48:       assertFalse(node0.isNE());
49:       assertFalse(node0.isGetterDef());
50:       assertFalse(node0.isTry());
51:       assertFalse(node0.isBlock());
52:       assertFalse(node0.isScript());
53:       assertFalse(node0.hasOneChild());
54:       assertFalse(node0.isWith());
55:       assertEquals(39, node0.getType());
56:       assertFalse(node0.isFor());
57:       assertFalse(node0.hasMoreThanOneChild());
58:       assertFalse(node0.isHook());
59:       assertFalse(node0.isThis());
60:       assertFalse(node0.isRegExp());
61:       assertFalse(node0.isParamList());
62:       assertFalse(node0.isCatch());
63:       assertFalse(node0.isSetterDef());
64:       assertFalse(node0.isName());
65:       assertFalse(node0.isStringKey());
66:       assertFalse(node0.isTrue());
67:       assertFalse(node0.isNull());
68:       assertFalse(node0.isDebugger());
69:       assertEquals(623683, node0.getSourcePosition());
70:       assertFalse(node0.isAdd());
71:       assertFalse(node0.isArrayLit());
72:       assertFalse(node0.isNew());
73:       assertFalse(node0.isDo());
74:       assertFalse(node0.isContinue());
75:       assertFalse(node0.isDefaultCase());
76:       assertFalse(node0.isVar());
77:       assertFalse(node0.isFunction());
78:       assertEquals(0, node0.getChildCount());
79:       assertFalse(node0.isLabel());
80:       assertFalse(node0.isAssignAdd());
81:       assertFalse(node0.isOr());
82:       assertFalse(node0.isReturn());
83:       assertTrue(node0.isNumber());
84:       assertFalse(node0.isEmpty());
85:       assertFalse(node0.isDelProp());
86:       assertEquals(1091, node0.getCharno());
87:       assertFalse(node0.isString());
88:       assertFalse(node0.isCall());
89:       assertFalse(node0.isExprResult());
90:       assertFalse(node0.isVoid());
91:       assertFalse(node0.isAssign());
92:       assertFalse(node0.isGetElem());
93:       assertFalse(node0.isWhile());
94:       assertFalse(node0.isTypeOf());
95:       assertFalse(node0.hasChildren());
96:       assertFalse(node0.isDec());
97:       assertFalse(node0.isComma());
98:       
99:       Node node1 = new Node((-432), node0, node0, node0, 2, 2);
100:       assertFalse(node1.equals((Object)node0));
101:       assertNotNull(node1);
102:       assertFalse(node0.isInstanceOf());
103:       assertFalse(node0.isGetProp());
104:       assertFalse(node0.isBreak());
105:       assertFalse(node0.isNot());
106:       assertFalse(node0.isAnd());
107:       assertFalse(node0.isObjectLit());
108:       assertFalse(node0.isCast());
109:       assertFalse(node0.isSwitch());
110:       assertFalse(node0.isInc());
111:       assertFalse(node0.isFalse());
112:       assertFalse(node0.isThrow());
113:       assertFalse(node0.isIn());
114:       assertFalse(node0.isCase());
115:       assertEquals(152, node0.getLineno());
116:       assertFalse(node0.isLabelName());
117:       assertFalse(node0.isIf());
118:       assertFalse(node0.isNE());
119:       assertFalse(node0.isGetterDef());
120:       assertFalse(node0.isTry());
121:       assertFalse(node0.isBlock());
122:       assertFalse(node0.isScript());
123:       assertFalse(node0.hasOneChild());
124:       assertFalse(node0.isWith());
125:       assertEquals(39, node0.getType());
126:       assertFalse(node0.isFor());
127:       assertFalse(node0.hasMoreThanOneChild());
128:       assertFalse(node0.isHook());
129:       assertFalse(node0.isThis());
130:       assertFalse(node0.isRegExp());
131:       assertFalse(node0.isParamList());
132:       assertFalse(node0.isCatch());
133:       assertFalse(node0.isSetterDef());
134:       assertFalse(node0.isName());
135:       assertFalse(node0.isStringKey());
136:       assertFalse(node0.isTrue());
137:       assertFalse(node0.isNull());
138:       assertFalse(node0.isDebugger());
139:       assertEquals(623683, node0.getSourcePosition());
140:       assertFalse(node0.isAdd());
141:       assertFalse(node0.isArrayLit());
142:       assertFalse(node0.isNew());
143:       assertFalse(node0.isDo());
144:       assertFalse(node0.isContinue());
145:       assertFalse(node0.isDefaultCase());
146:       assertFalse(node0.isVar());
147:       assertFalse(node0.isFunction());
148:       assertEquals(0, node0.getChildCount());
149:       assertFalse(node0.isLabel());
150:       assertFalse(node0.isAssignAdd());
151:       assertFalse(node0.isOr());
152:       assertFalse(node0.isReturn());
153:       assertTrue(node0.isNumber());
154:       assertFalse(node0.isEmpty());
155:       assertFalse(node0.isDelProp());
156:       assertEquals(1091, node0.getCharno());
157:       assertFalse(node0.isString());
158:       assertFalse(node0.isCall());
159:       assertFalse(node0.isExprResult());
160:       assertFalse(node0.isVoid());
161:       assertFalse(node0.isAssign());
162:       assertFalse(node0.isGetElem());
163:       assertFalse(node0.isWhile());
164:       assertFalse(node0.isTypeOf());
165:       assertFalse(node0.hasChildren());
166:       assertFalse(node0.isDec());
167:       assertFalse(node0.isComma());
168:       assertFalse(node1.isScript());
169:       assertFalse(node1.isExprResult());
170:       assertFalse(node1.isWith());
171:       assertFalse(node1.isNot());
172:       assertFalse(node1.isObjectLit());
173:       assertFalse(node1.isGetProp());
174:       assertFalse(node1.isNumber());
175:       assertEquals(2, node1.getLineno());
176:       assertFalse(node1.isFalse());
177:       assertFalse(node1.isLabel());
178:       assertFalse(node1.isCast());
179:       assertFalse(node1.isAnd());
180:       assertFalse(node1.isLabelName());
181:       assertFalse(node1.isSwitch());
182:       assertFalse(node1.isWhile());
183:       assertFalse(node1.isString());
184:       assertFalse(node1.isReturn());
185:       assertFalse(node1.isVar());
186:       assertFalse(node1.isAdd());
187:       assertFalse(node1.isNew());
188:       assertFalse(node1.isDo());
189:       assertFalse(node1.isAssignAdd());
190:       assertFalse(node1.isDec());
191:       assertFalse(node1.isBreak());
192:       assertTrue(node1.hasOneChild());
193:       assertFalse(node1.isEmpty());
194:       assertFalse(node1.isNull());
195:       assertFalse(node1.isOr());
196:       assertFalse(node1.isAssign());
197:       assertFalse(node1.isComma());
198:       assertFalse(node1.isTypeOf());
199:       assertFalse(node1.isCall());
200:       assertFalse(node1.isGetElem());
201:       assertFalse(node1.isName());
202:       assertFalse(node1.isDelProp());
203:       assertFalse(node1.isVoid());
204:       assertFalse(node1.isDefaultCase());
205:       assertEquals(2, node1.getCharno());
206:       assertFalse(node1.isTrue());
207:       assertFalse(node1.isDebugger());
208:       assertFalse(node1.isRegExp());
209:       assertFalse(node1.isFunction());
210:       assertFalse(node1.isTry());
211:       assertFalse(node1.isGetterDef());
212:       assertFalse(node1.isArrayLit());
213:       assertFalse(node1.isStringKey());
214:       assertFalse(node1.isParamList());
215:       assertFalse(node1.isInc());
216:       assertFalse(node1.isContinue());
217:       assertFalse(node1.hasMoreThanOneChild());
218:       assertFalse(node1.isIn());
219:       assertFalse(node1.isHook());
220:       assertEquals(1, node1.getChildCount());
221:       assertEquals((-432), node1.getType());
222:       assertFalse(node1.isBlock());
223:       assertFalse(node1.isThrow());
224:       assertFalse(node1.isCase());
225:       assertFalse(node1.isIf());
226:       assertFalse(node1.isThis());
227:       assertFalse(node1.isNE());
228:       assertFalse(node1.isSetterDef());
229:       assertFalse(node1.isFor());
230:       assertEquals(8194, node1.getSourcePosition());
231:       assertFalse(node1.isInstanceOf());
232:       assertFalse(node1.isCatch());
233:       assertTrue(node1.hasChildren());
234:       
235:       boolean boolean0 = node1.isCast();
236:       assertFalse(node0.equals((Object)node1));
237:       assertFalse(node1.equals((Object)node0));
238:       assertFalse(boolean0);
239:       assertFalse(node0.isInstanceOf());
240:       assertFalse(node0.isGetProp());
241:       assertFalse(node0.isBreak());
242:       assertFalse(node0.isNot());
243:       assertFalse(node0.isAnd());
244:       assertFalse(node0.isObjectLit());
245:       assertFalse(node0.isCast());
246:       assertFalse(node0.isSwitch());
247:       assertFalse(node0.isInc());
248:       assertFalse(node0.isFalse());
249:       assertFalse(node0.isThrow());
250:       assertFalse(node0.isIn());
251:       assertFalse(node0.isCase());
252:       assertEquals(152, node0.getLineno());
253:       assertFalse(node0.isLabelName());
254:       assertFalse(node0.isIf());
255:       assertFalse(node0.isNE());
256:       assertFalse(node0.isGetterDef());
257:       assertFalse(node0.isTry());
258:       assertFalse(node0.isBlock());
259:       assertFalse(node0.isScript());
260:       assertFalse(node0.hasOneChild());
261:       assertFalse(node0.isWith());
262:       assertEquals(39, node0.getType());
263:       assertFalse(node0.isFor());
264:       assertFalse(node0.hasMoreThanOneChild());
265:       assertFalse(node0.isHook());
266:       assertFalse(node0.isThis());
267:       assertFalse(node0.isRegExp());
268:       assertFalse(node0.isParamList());
269:       assertFalse(node0.isCatch());
270:       assertFalse(node0.isSetterDef());
271:       assertFalse(node0.isName());
272:       assertFalse(node0.isStringKey());
273:       assertFalse(node0.isTrue());
274:       assertFalse(node0.isNull());
275:       assertFalse(node0.isDebugger());
276:       assertEquals(623683, node0.getSourcePosition());
277:       assertFalse(node0.isAdd());
278:       assertFalse(node0.isArrayLit());
279:       assertFalse(node0.isNew());
280:       assertFalse(node0.isDo());
281:       assertFalse(node0.isContinue());
282:       assertFalse(node0.isDefaultCase());
283:       assertFalse(node0.isVar());
284:       assertFalse(node0.isFunction());
285:       assertEquals(0, node0.getChildCount());
286:       assertFalse(node0.isLabel());
287:       assertFalse(node0.isAssignAdd());
288:       assertFalse(node0.isOr());
289:       assertFalse(node0.isReturn());
290:       assertTrue(node0.isNumber());
291:       assertFalse(node0.isEmpty());
292:       assertFalse(node0.isDelProp());
293:       assertEquals(1091, node0.getCharno());
294:       assertFalse(node0.isString());
295:       assertFalse(node0.isCall());
296:       assertFalse(node0.isExprResult());
297:       assertFalse(node0.isVoid());
298:       assertFalse(node0.isAssign());
299:       assertFalse(node0.isGetElem());
300:       assertFalse(node0.isWhile());
301:       assertFalse(node0.isTypeOf());
302:       assertFalse(node0.hasChildren());
303:       assertFalse(node0.isDec());
304:       assertFalse(node0.isComma());
305:       assertFalse(node1.isScript());
306:       assertFalse(node1.isExprResult());
307:       assertFalse(node1.isWith());
308:       assertFalse(node1.isNot());
309:       assertFalse(node1.isObjectLit());
310:       assertFalse(node1.isGetProp());
311:       assertFalse(node1.isNumber());
312:       assertEquals(2, node1.getLineno());
313:       assertFalse(node1.isFalse());
314:       assertFalse(node1.isLabel());
315:       assertFalse(node1.isCast());
316:       assertFalse(node1.isAnd());
317:       assertFalse(node1.isLabelName());
318:       assertFalse(node1.isSwitch());
319:       assertFalse(node1.isWhile());
320:       assertFalse(node1.isString());
321:       assertFalse(node1.isReturn());
322:       assertFalse(node1.isVar());
323:       assertFalse(node1.isAdd());
324:       assertFalse(node1.isNew());
325:       assertFalse(node1.isDo());
326:       assertFalse(node1.isAssignAdd());
327:       assertFalse(node1.isDec());
328:       assertFalse(node1.isBreak());
329:       assertTrue(node1.hasOneChild());
330:       assertFalse(node1.isEmpty());
331:       assertFalse(node1.isNull());
332:       assertFalse(node1.isOr());
333:       assertFalse(node1.isAssign());
334:       assertFalse(node1.isComma());
335:       assertFalse(node1.isTypeOf());
336:       assertFalse(node1.isCall());
337:       assertFalse(node1.isGetElem());
338:       assertFalse(node1.isName());
339:       assertFalse(node1.isDelProp());
340:       assertFalse(node1.isVoid());
341:       assertFalse(node1.isDefaultCase());
342:       assertEquals(2, node1.getCharno());
343:       assertFalse(node1.isTrue());
344:       assertFalse(node1.isDebugger());
345:       assertFalse(node1.isRegExp());
346:       assertFalse(node1.isFunction());
347:       assertFalse(node1.isTry());
348:       assertFalse(node1.isGetterDef());
349:       assertFalse(node1.isArrayLit());
350:       assertFalse(node1.isStringKey());
351:       assertFalse(node1.isParamList());
352:       assertFalse(node1.isInc());
353:       assertFalse(node1.isContinue());
354:       assertFalse(node1.hasMoreThanOneChild());
355:       assertFalse(node1.isIn());
356:       assertFalse(node1.isHook());
357:       assertEquals(1, node1.getChildCount());
358:       assertEquals((-432), node1.getType());
359:       assertFalse(node1.isBlock());
360:       assertFalse(node1.isThrow());
361:       assertFalse(node1.isCase());
362:       assertFalse(node1.isIf());
363:       assertFalse(node1.isThis());
364:       assertFalse(node1.isNE());
365:       assertFalse(node1.isSetterDef());
366:       assertFalse(node1.isFor());
367:       assertEquals(8194, node1.getSourcePosition());
368:       assertFalse(node1.isInstanceOf());
369:       assertFalse(node1.isCatch());
370:       assertTrue(node1.hasChildren());
371:       
372:       boolean boolean1 = node1.isFromExterns();
373:       assertFalse(node0.equals((Object)node1));
374:       assertFalse(node1.equals((Object)node0));
375:       assertTrue(boolean1 == boolean0);
376:       assertFalse(boolean1);
377:       assertFalse(node0.isInstanceOf());
378:       assertFalse(node0.isGetProp());
379:       assertFalse(node0.isBreak());
380:       assertFalse(node0.isNot());
381:       assertFalse(node0.isAnd());
382:       assertFalse(node0.isObjectLit());
383:       assertFalse(node0.isCast());
384:       assertFalse(node0.isSwitch());
385:       assertFalse(node0.isInc());
386:       assertFalse(node0.isFalse());
387:       assertFalse(node0.isThrow());
388:       assertFalse(node0.isIn());
389:       assertFalse(node0.isCase());
390:       assertEquals(152, node0.getLineno());
391:       assertFalse(node0.isLabelName());
392:       assertFalse(node0.isIf());
393:       assertFalse(node0.isNE());
394:       assertFalse(node0.isGetterDef());
395:       assertFalse(node0.isTry());
396:       assertFalse(node0.isBlock());
397:       assertFalse(node0.isScript());
398:       assertFalse(node0.hasOneChild());
399:       assertFalse(node0.isWith());
400:       assertEquals(39, node0.getType());
401:       assertFalse(node0.isFor());
402:       assertFalse(node0.hasMoreThanOneChild());
403:       assertFalse(node0.isHook());
404:       assertFalse(node0.isThis());
405:       assertFalse(node0.isRegExp());
406:       assertFalse(node0.isParamList());
407:       assertFalse(node0.isCatch());
408:       assertFalse(node0.isSetterDef());
409:       assertFalse(node0.isName());
410:       assertFalse(node0.isStringKey());
411:       assertFalse(node0.isTrue());
412:       assertFalse(node0.isNull());
413:       assertFalse(node0.isDebugger());
414:       assertEquals(623683, node0.getSourcePosition());
415:       assertFalse(node0.isAdd());
416:       assertFalse(node0.isArrayLit());
417:       assertFalse(node0.isNew());
418:       assertFalse(node0.isDo());
419:       assertFalse(node0.isContinue());
420:       assertFalse(node0.isDefaultCase());
421:       assertFalse(node0.isVar());
422:       assertFalse(node0.isFunction());
423:       assertEquals(0, node0.getChildCount());
424:       assertFalse(node0.isLabel());
425:       assertFalse(node0.isAssignAdd());
426:       assertFalse(node0.isOr());
427:       assertFalse(node0.isReturn());
428:       assertTrue(node0.isNumber());
429:       assertFalse(node0.isEmpty());
430:       assertFalse(node0.isDelProp());
431:       assertEquals(1091, node0.getCharno());
432:       assertFalse(node0.isString());
433:       assertFalse(node0.isCall());
434:       assertFalse(node0.isExprResult());
435:       assertFalse(node0.isVoid());
436:       assertFalse(node0.isAssign());
437:       assertFalse(node0.isGetElem());
438:       assertFalse(node0.isWhile());
439:       assertFalse(node0.isTypeOf());
440:       assertFalse(node0.hasChildren());
441:       assertFalse(node0.isDec());
442:       assertFalse(node0.isComma());
443:       assertFalse(node1.isScript());
444:       assertFalse(node1.isExprResult());
445:       assertFalse(node1.isWith());
446:       assertFalse(node1.isNot());
447:       assertFalse(node1.isObjectLit());
448:       assertFalse(node1.isGetProp());
449:       assertFalse(node1.isNumber());
450:       assertEquals(2, node1.getLineno());
451:       assertFalse(node1.isFalse());
452:       assertFalse(node1.isLabel());
453:       assertFalse(node1.isCast());
454:       assertFalse(node1.isAnd());
455:       assertFalse(node1.isLabelName());
456:       assertFalse(node1.isSwitch());
457:       assertFalse(node1.isWhile());
458:       assertFalse(node1.isString());
459:       assertFalse(node1.isReturn());
460:       assertFalse(node1.isVar());
461:       assertFalse(node1.isAdd());
462:       assertFalse(node1.isNew());
463:       assertFalse(node1.isDo());
464:       assertFalse(node1.isAssignAdd());
465:       assertFalse(node1.isDec());
466:       assertFalse(node1.isBreak());
467:       assertTrue(node1.hasOneChild());
468:       assertFalse(node1.isEmpty());
469:       assertFalse(node1.isNull());
470:       assertFalse(node1.isOr());
471:       assertFalse(node1.isAssign());
472:       assertFalse(node1.isComma());
473:       assertFalse(node1.isTypeOf());
474:       assertFalse(node1.isCall());
475:       assertFalse(node1.isGetElem());
476:       assertFalse(node1.isName());
477:       assertFalse(node1.isDelProp());
478:       assertFalse(node1.isVoid());
479:       assertFalse(node1.isDefaultCase());
480:       assertEquals(2, node1.getCharno());
481:       assertFalse(node1.isTrue());
482:       assertFalse(node1.isDebugger());
483:       assertFalse(node1.isRegExp());
484:       assertFalse(node1.isFunction());
485:       assertFalse(node1.isTry());
486:       assertFalse(node1.isGetterDef());
487:       assertFalse(node1.isArrayLit());
488:       assertFalse(node1.isStringKey());
489:       assertFalse(node1.isParamList());
490:       assertFalse(node1.isInc());
491:       assertFalse(node1.isContinue());
492:       assertFalse(node1.hasMoreThanOneChild());
493:       assertFalse(node1.isIn());
494:       assertFalse(node1.isHook());
495:       assertEquals(1, node1.getChildCount());
496:       assertEquals((-432), node1.getType());
497:       assertFalse(node1.isBlock());
498:       assertFalse(node1.isThrow());
499:       assertFalse(node1.isCase());
500:       assertFalse(node1.isIf());
501:       assertFalse(node1.isThis());
502:       assertFalse(node1.isNE());
503:       assertFalse(node1.isSetterDef());
504:       assertFalse(node1.isFor());
505:       assertEquals(8194, node1.getSourcePosition());
506:       assertFalse(node1.isInstanceOf());
507:       assertFalse(node1.isCatch());
508:       assertTrue(node1.hasChildren());
509:       
510:       boolean boolean2 = node0.isVoid();
511:       assertFalse(node0.equals((Object)node1));
512:       assertTrue(boolean2 == boolean0);
513:       assertTrue(boolean2 == boolean1);
514:       assertFalse(boolean2);
515:       assertFalse(node0.isInstanceOf());
516:       assertFalse(node0.isGetProp());
517:       assertFalse(node0.isBreak());
518:       assertFalse(node0.isNot());
519:       assertFalse(node0.isAnd());
520:       assertFalse(node0.isObjectLit());
521:       assertFalse(node0.isCast());
522:       assertFalse(node0.isSwitch());
523:       assertFalse(node0.isInc());
524:       assertFalse(node0.isFalse());
525:       assertFalse(node0.isThrow());
526:       assertFalse(node0.isIn());
527:       assertFalse(node0.isCase());
528:       assertEquals(152, node0.getLineno());
529:       assertFalse(node0.isLabelName());
530:       assertFalse(node0.isIf());
531:       assertFalse(node0.isNE());
532:       assertFalse(node0.isGetterDef());
533:       assertFalse(node0.isTry());
534:       assertFalse(node0.isBlock());
535:       assertFalse(node0.isScript());
536:       assertFalse(node0.hasOneChild());
537:       assertFalse(node0.isWith());
538:       assertEquals(39, node0.getType());
539:       assertFalse(node0.isFor());
540:       assertFalse(node0.hasMoreThanOneChild());
541:       assertFalse(node0.isHook());
542:       assertFalse(node0.isThis());
543:       assertFalse(node0.isRegExp());
544:       assertFalse(node0.isParamList());
545:       assertFalse(node0.isCatch());
546:       assertFalse(node0.isSetterDef());
547:       assertFalse(node0.isName());
548:       assertFalse(node0.isStringKey());
549:       assertFalse(node0.isTrue());
550:       assertFalse(node0.isNull());
551:       assertFalse(node0.isDebugger());
552:       assertEquals(623683, node0.getSourcePosition());
553:       assertFalse(node0.isAdd());
554:       assertFalse(node0.isArrayLit());
555:       assertFalse(node0.isNew());
556:       assertFalse(node0.isDo());
557:       assertFalse(node0.isContinue());
558:       assertFalse(node0.isDefaultCase());
559:       assertFalse(node0.isVar());
560:       assertFalse(node0.isFunction());
561:       assertEquals(0, node0.getChildCount());
562:       assertFalse(node0.isLabel());
563:       assertFalse(node0.isAssignAdd());
564:       assertFalse(node0.isOr());
565:       assertFalse(node0.isReturn());
566:       assertTrue(node0.isNumber());
567:       assertFalse(node0.isEmpty());
568:       assertFalse(node0.isDelProp());
569:       assertEquals(1091, node0.getCharno());
570:       assertFalse(node0.isString());
571:       assertFalse(node0.isCall());
572:       assertFalse(node0.isExprResult());
573:       assertFalse(node0.isVoid());
574:       assertFalse(node0.isAssign());
575:       assertFalse(node0.isGetElem());
576:       assertFalse(node0.isWhile());
577:       assertFalse(node0.isTypeOf());
578:       assertFalse(node0.hasChildren());
579:       assertFalse(node0.isDec());
580:       assertFalse(node0.isComma());
581:       
582:       MockFile mockFile0 = new MockFile("SMHqiFE ");
583:       assertNotNull(mockFile0);
584:       
585:       MockFile mockFile1 = new MockFile(mockFile0, "SMHqiFE ");
586:       assertFalse(mockFile1.equals((Object)mockFile0));
587:       assertNotNull(mockFile1);
588:       
589:       Node node2 = node0.detachFromParent();
590:       assertFalse(node0.equals((Object)node1));
591:       assertFalse(node2.equals((Object)node1));
592:       assertNotNull(node2);
593:       assertSame(node0, node2);
594:       assertSame(node2, node0);
595:       assertFalse(node0.isInstanceOf());
596:       assertFalse(node0.isGetProp());
597:       assertFalse(node0.isBreak());
598:       assertFalse(node0.isNot());
599:       assertFalse(node0.isAnd());
600:       assertFalse(node0.isObjectLit());
601:       assertFalse(node0.isCast());
602:       assertFalse(node0.isSwitch());
603:       assertFalse(node0.isInc());
604:       assertFalse(node0.isFalse());
605:       assertFalse(node0.isThrow());
606:       assertFalse(node0.isIn());
607:       assertFalse(node0.isCase());
608:       assertEquals(152, node0.getLineno());
609:       assertFalse(node0.isLabelName());
610:       assertFalse(node0.isIf());
611:       assertFalse(node0.isNE());
612:       assertFalse(node0.isGetterDef());
613:       assertFalse(node0.isTry());
614:       assertFalse(node0.isBlock());
615:       assertFalse(node0.isScript());
616:       assertFalse(node0.hasOneChild());
617:       assertFalse(node0.isWith());
618:       assertEquals(39, node0.getType());
619:       assertFalse(node0.isFor());
620:       assertFalse(node0.hasMoreThanOneChild());
621:       assertFalse(node0.isHook());
622:       assertFalse(node0.isThis());
623:       assertFalse(node0.isRegExp());
624:       assertFalse(node0.isParamList());
625:       assertFalse(node0.isCatch());
626:       assertFalse(node0.isSetterDef());
627:       assertFalse(node0.isName());
628:       assertFalse(node0.isStringKey());
629:       assertFalse(node0.isTrue());
630:       assertFalse(node0.isNull());
631:       assertFalse(node0.isDebugger());
632:       assertEquals(623683, node0.getSourcePosition());
633:       assertFalse(node0.isAdd());
634:       assertFalse(node0.isArrayLit());
635:       assertFalse(node0.isNew());
636:       assertFalse(node0.isDo());
637:       assertFalse(node0.isContinue());
638:       assertFalse(node0.isDefaultCase());
639:       assertFalse(node0.isVar());
640:       assertFalse(node0.isFunction());
641:       assertEquals(0, node0.getChildCount());
642:       assertFalse(node0.isLabel());
643:       assertFalse(node0.isAssignAdd());
644:       assertFalse(node0.isOr());
645:       assertFalse(node0.isReturn());
646:       assertTrue(node0.isNumber());
647:       assertFalse(node0.isEmpty());
648:       assertFalse(node0.isDelProp());
649:       assertEquals(1091, node0.getCharno());
650:       assertFalse(node0.isString());
651:       assertFalse(node0.isCall());
652:       assertFalse(node0.isExprResult());
653:       assertFalse(node0.isVoid());
654:       assertFalse(node0.isAssign());
655:       assertFalse(node0.isGetElem());
656:       assertFalse(node0.isWhile());
657:       assertFalse(node0.isTypeOf());
658:       assertFalse(node0.hasChildren());
659:       assertFalse(node0.isDec());
660:       assertFalse(node0.isComma());
661:       assertFalse(node2.isNE());
662:       assertFalse(node2.isGetterDef());
663:       assertFalse(node2.isDelProp());
664:       assertFalse(node2.isIf());
665:       assertFalse(node2.isEmpty());
666:       assertTrue(node2.isNumber());
667:       assertFalse(node2.isFor());
668:       assertFalse(node2.isRegExp());
669:       assertFalse(node2.isVoid());
670:       assertFalse(node2.isDefaultCase());
671:       assertFalse(node2.isInc());
672:       assertFalse(node2.isIn());
673:       assertFalse(node2.isTrue());
674:       assertFalse(node2.isNull());
675:       assertFalse(node2.isComma());
676:       assertFalse(node2.isName());
677:       assertFalse(node2.isBreak());
678:       assertFalse(node2.isCall());
679:       assertFalse(node2.isGetProp());
680:       assertFalse(node2.isSetterDef());
681:       assertFalse(node2.isFalse());
682:       assertFalse(node2.isThrow());
683:       assertEquals(1091, node2.getCharno());
684:       assertFalse(node2.isWhile());
685:       assertFalse(node2.isString());
686:       assertFalse(node2.isFunction());
687:       assertFalse(node2.isAnd());
688:       assertFalse(node2.isObjectLit());
689:       assertFalse(node2.isNot());
690:       assertFalse(node2.isDebugger());
691:       assertFalse(node2.isTypeOf());
692:       assertFalse(node2.isDec());
693:       assertFalse(node2.isLabelName());
694:       assertFalse(node2.isGetElem());
695:       assertFalse(node2.hasOneChild());
696:       assertFalse(node2.isCast());
697:       assertFalse(node2.isContinue());
698:       assertFalse(node2.hasMoreThanOneChild());
699:       assertFalse(node2.isLabel());
700:       assertFalse(node2.isAssignAdd());
701:       assertFalse(node2.isAssign());
702:       assertFalse(node2.hasChildren());
703:       assertEquals(39, node2.getType());
704:       assertFalse(node2.isReturn());
705:       assertFalse(node2.isWith());
706:       assertFalse(node2.isAdd());
707:       assertFalse(node2.isDo());
708:       assertFalse(node2.isNew());
709:       assertFalse(node2.isExprResult());
710:       assertEquals(623683, node2.getSourcePosition());
711:       assertEquals(152, node2.getLineno());
712:       assertFalse(node2.isOr());
713:       assertFalse(node2.isParamList());
714:       assertFalse(node2.isVar());
715:       assertEquals(0, node2.getChildCount());
716:       assertFalse(node2.isInstanceOf());
717:       assertFalse(node2.isCatch());
718:       assertFalse(node2.isBlock());
719:       assertFalse(node2.isHook());
720:       assertFalse(node2.isThis());
721:       assertFalse(node2.isScript());
722:       assertFalse(node2.isSwitch());
723:       assertFalse(node2.isCase());
724:       assertFalse(node2.isTry());
725:       assertFalse(node2.isArrayLit());
726:       assertFalse(node2.isStringKey());
727:       
728:       node2.setWasEmptyNode(false);
729:       assertFalse(node0.equals((Object)node1));
730:       assertFalse(node2.equals((Object)node1));
731:       assertSame(node0, node2);
732:       assertSame(node2, node0);
733:       assertFalse(node0.isInstanceOf());
734:       assertFalse(node0.isGetProp());
735:       assertFalse(node0.isBreak());
736:       assertFalse(node0.isNot());
737:       assertFalse(node0.isAnd());
738:       assertFalse(node0.isObjectLit());
739:       assertFalse(node0.isCast());
740:       assertFalse(node0.isSwitch());
741:       assertFalse(node0.isInc());
742:       assertFalse(node0.isFalse());
743:       assertFalse(node0.isThrow());
744:       assertFalse(node0.isIn());
745:       assertFalse(node0.isCase());
746:       assertEquals(152, node0.getLineno());
747:       assertFalse(node0.isLabelName());
748:       assertFalse(node0.isIf());
749:       assertFalse(node0.isNE());
750:       assertFalse(node0.isGetterDef());
751:       assertFalse(node0.isTry());
752:       assertFalse(node0.isBlock());
753:       assertFalse(node0.isScript());
754:       assertFalse(node0.hasOneChild());
755:       assertFalse(node0.isWith());
756:       assertEquals(39, node0.getType());
757:       assertFalse(node0.isFor());
758:       assertFalse(node0.hasMoreThanOneChild());
759:       assertFalse(node0.isHook());
760:       assertFalse(node0.isThis());
761:       assertFalse(node0.isRegExp());
762:       assertFalse(node0.isParamList());
763:       assertFalse(node0.isCatch());
764:       assertFalse(node0.isSetterDef());
765:       assertFalse(node0.isName());
766:       assertFalse(node0.isStringKey());
767:       assertFalse(node0.isTrue());
768:       assertFalse(node0.isNull());
769:       assertFalse(node0.isDebugger());
770:       assertEquals(623683, node0.getSourcePosition());
771:       assertFalse(node0.isAdd());
772:       assertFalse(node0.isArrayLit());
773:       assertFalse(node0.isNew());
774:       assertFalse(node0.isDo());
775:       assertFalse(node0.isContinue());
776:       assertFalse(node0.isDefaultCase());
777:       assertFalse(node0.isVar());
778:       assertFalse(node0.isFunction());
779:       assertEquals(0, node0.getChildCount());
780:       assertFalse(node0.isLabel());
781:       assertFalse(node0.isAssignAdd());
782:       assertFalse(node0.isOr());
783:       assertFalse(node0.isReturn());
784:       assertTrue(node0.isNumber());
785:       assertFalse(node0.isEmpty());
786:       assertFalse(node0.isDelProp());
787:       assertEquals(1091, node0.getCharno());
788:       assertFalse(node0.isString());
789:       assertFalse(node0.isCall());
790:       assertFalse(node0.isExprResult());
791:       assertFalse(node0.isVoid());
792:       assertFalse(node0.isAssign());
793:       assertFalse(node0.isGetElem());
794:       assertFalse(node0.isWhile());
795:       assertFalse(node0.isTypeOf());
796:       assertFalse(node0.hasChildren());
797:       assertFalse(node0.isDec());
798:       assertFalse(node0.isComma());
799:       assertFalse(node2.isNE());
800:       assertFalse(node2.isGetterDef());
801:       assertFalse(node2.isDelProp());
802:       assertFalse(node2.isIf());
803:       assertFalse(node2.isEmpty());
804:       assertTrue(node2.isNumber());
805:       assertFalse(node2.isFor());
806:       assertFalse(node2.isRegExp());
807:       assertFalse(node2.isVoid());
808:       assertFalse(node2.isDefaultCase());
809:       assertFalse(node2.isInc());
810:       assertFalse(node2.isIn());
811:       assertFalse(node2.isTrue());
812:       assertFalse(node2.isNull());
813:       assertFalse(node2.isComma());
814:       assertFalse(node2.isName());
815:       assertFalse(node2.isBreak());
816:       assertFalse(node2.isCall());
817:       assertFalse(node2.isGetProp());
818:       assertFalse(node2.isSetterDef());
819:       assertFalse(node2.isFalse());
820:       assertFalse(node2.isThrow());
821:       assertEquals(1091, node2.getCharno());
822:       assertFalse(node2.isWhile());
823:       assertFalse(node2.isString());
824:       assertFalse(node2.isFunction());
825:       assertFalse(node2.isAnd());
826:       assertFalse(node2.isObjectLit());
827:       assertFalse(node2.isNot());
828:       assertFalse(node2.isDebugger());
829:       assertFalse(node2.isTypeOf());
830:       assertFalse(node2.isDec());
831:       assertFalse(node2.isLabelName());
832:       assertFalse(node2.isGetElem());
833:       assertFalse(node2.hasOneChild());
834:       assertFalse(node2.isCast());
835:       assertFalse(node2.isContinue());
836:       assertFalse(node2.hasMoreThanOneChild());
837:       assertFalse(node2.isLabel());
838:       assertFalse(node2.isAssignAdd());
839:       assertFalse(node2.isAssign());
840:       assertFalse(node2.hasChildren());
841:       assertEquals(39, node2.getType());
842:       assertFalse(node2.isReturn());
843:       assertFalse(node2.isWith());
844:       assertFalse(node2.isAdd());
845:       assertFalse(node2.isDo());
846:       assertFalse(node2.isNew());
847:       assertFalse(node2.isExprResult());
848:       assertEquals(623683, node2.getSourcePosition());
849:       assertEquals(152, node2.getLineno());
850:       assertFalse(node2.isOr());
851:       assertFalse(node2.isParamList());
852:       assertFalse(node2.isVar());
853:       assertEquals(0, node2.getChildCount());
854:       assertFalse(node2.isInstanceOf());
855:       assertFalse(node2.isCatch());
856:       assertFalse(node2.isBlock());
857:       assertFalse(node2.isHook());
858:       assertFalse(node2.isThis());
859:       assertFalse(node2.isScript());
860:       assertFalse(node2.isSwitch());
861:       assertFalse(node2.isCase());
862:       assertFalse(node2.isTry());
863:       assertFalse(node2.isArrayLit());
864:       assertFalse(node2.isStringKey());
865:       
866:       Iterable<Node> iterable0 = node0.children();
867:       assertFalse(node0.equals((Object)node1));
868:       assertFalse(iterable0.contains(node2));
869:       assertNotNull(iterable0);
870:       assertSame(node0, node2);
871:       assertFalse(node0.isInstanceOf());
872:       assertFalse(node0.isGetProp());
873:       assertFalse(node0.isBreak());
874:       assertFalse(node0.isNot());
875:       assertFalse(node0.isAnd());
876:       assertFalse(node0.isObjectLit());
877:       assertFalse(node0.isCast());
878:       assertFalse(node0.isSwitch());
879:       assertFalse(node0.isInc());
880:       assertFalse(node0.isFalse());
881:       assertFalse(node0.isThrow());
882:       assertFalse(node0.isIn());
883:       assertFalse(node0.isCase());
884:       assertEquals(152, node0.getLineno());
885:       assertFalse(node0.isLabelName());
886:       assertFalse(node0.isIf());
887:       assertFalse(node0.isNE());
888:       assertFalse(node0.isGetterDef());
889:       assertFalse(node0.isTry());
890:       assertFalse(node0.isBlock());
891:       assertFalse(node0.isScript());
892:       assertFalse(node0.hasOneChild());
893:       assertFalse(node0.isWith());
894:       assertEquals(39, node0.getType());
895:       assertFalse(node0.isFor());
896:       assertFalse(node0.hasMoreThanOneChild());
897:       assertFalse(node0.isHook());
898:       assertFalse(node0.isThis());
899:       assertFalse(node0.isRegExp());
900:       assertFalse(node0.isParamList());
901:       assertFalse(node0.isCatch());
902:       assertFalse(node0.isSetterDef());
903:       assertFalse(node0.isName());
904:       assertFalse(node0.isStringKey());
905:       assertFalse(node0.isTrue());
906:       assertFalse(node0.isNull());
907:       assertFalse(node0.isDebugger());
908:       assertEquals(623683, node0.getSourcePosition());
909:       assertFalse(node0.isAdd());
910:       assertFalse(node0.isArrayLit());
911:       assertFalse(node0.isNew());
912:       assertFalse(node0.isDo());
913:       assertFalse(node0.isContinue());
914:       assertFalse(node0.isDefaultCase());
915:       assertFalse(node0.isVar());
916:       assertFalse(node0.isFunction());
917:       assertEquals(0, node0.getChildCount());
918:       assertFalse(node0.isLabel());
919:       assertFalse(node0.isAssignAdd());
920:       assertFalse(node0.isOr());
921:       assertFalse(node0.isReturn());
922:       assertTrue(node0.isNumber());
923:       assertFalse(node0.isEmpty());
924:       assertFalse(node0.isDelProp());
925:       assertEquals(1091, node0.getCharno());
926:       assertFalse(node0.isString());
927:       assertFalse(node0.isCall());
928:       assertFalse(node0.isExprResult());
929:       assertFalse(node0.isVoid());
930:       assertFalse(node0.isAssign());
931:       assertFalse(node0.isGetElem());
932:       assertFalse(node0.isWhile());
933:       assertFalse(node0.isTypeOf());
934:       assertFalse(node0.hasChildren());
935:       assertFalse(node0.isDec());
936:       assertFalse(node0.isComma());
937:       
938:       boolean boolean3 = node1.isVoid();
939:       assertFalse(node0.equals((Object)node1));
940:       assertFalse(node1.equals((Object)node2));
941:       assertFalse(node1.equals((Object)node0));
942:       assertTrue(boolean3 == boolean0);
943:       assertTrue(boolean3 == boolean1);
944:       assertTrue(boolean3 == boolean2);
945:       assertFalse(boolean3);
946:       assertSame(node0, node2);
947:       assertFalse(node0.isInstanceOf());
948:       assertFalse(node0.isGetProp());
949:       assertFalse(node0.isBreak());
950:       assertFalse(node0.isNot());
951:       assertFalse(node0.isAnd());
952:       assertFalse(node0.isObjectLit());
953:       assertFalse(node0.isCast());
954:       assertFalse(node0.isSwitch());
955:       assertFalse(node0.isInc());
956:       assertFalse(node0.isFalse());
957:       assertFalse(node0.isThrow());
958:       assertFalse(node0.isIn());
959:       assertFalse(node0.isCase());
960:       assertEquals(152, node0.getLineno());
961:       assertFalse(node0.isLabelName());
962:       assertFalse(node0.isIf());
963:       assertFalse(node0.isNE());
964:       assertFalse(node0.isGetterDef());
965:       assertFalse(node0.isTry());
966:       assertFalse(node0.isBlock());
967:       assertFalse(node0.isScript());
968:       assertFalse(node0.hasOneChild());
969:       assertFalse(node0.isWith());
970:       assertEquals(39, node0.getType());
971:       assertFalse(node0.isFor());
972:       assertFalse(node0.hasMoreThanOneChild());
973:       assertFalse(node0.isHook());
974:       assertFalse(node0.isThis());
975:       assertFalse(node0.isRegExp());
976:       assertFalse(node0.isParamList());
977:       assertFalse(node0.isCatch());
978:       assertFalse(node0.isSetterDef());
979:       assertFalse(node0.isName());
980:       assertFalse(node0.isStringKey());
981:       assertFalse(node0.isTrue());
982:       assertFalse(node0.isNull());
983:       assertFalse(node0.isDebugger());
984:       assertEquals(623683, node0.getSourcePosition());
985:       assertFalse(node0.isAdd());
986:       assertFalse(node0.isArrayLit());
987:       assertFalse(node0.isNew());
988:       assertFalse(node0.isDo());
989:       assertFalse(node0.isContinue());
990:       assertFalse(node0.isDefaultCase());
991:       assertFalse(node0.isVar());
992:       assertFalse(node0.isFunction());
993:       assertEquals(0, node0.getChildCount());
994:       assertFalse(node0.isLabel());
995:       assertFalse(node0.isAssignAdd());
996:       assertFalse(node0.isOr());
997:       assertFalse(node0.isReturn());
998:       assertTrue(node0.isNumber());
999:       assertFalse(node0.isEmpty());
1000:       assertFalse(node0.isDelProp());
1001:       assertEquals(1091, node0.getCharno());
1002:       assertFalse(node0.isString());
1003:       assertFalse(node0.isCall());
1004:       assertFalse(node0.isExprResult());
1005:       assertFalse(node0.isVoid());
1006:       assertFalse(node0.isAssign());
1007:       assertFalse(node0.isGetElem());
1008:       assertFalse(node0.isWhile());
1009:       assertFalse(node0.isTypeOf());
1010:       assertFalse(node0.hasChildren());
1011:       assertFalse(node0.isDec());
1012:       assertFalse(node0.isComma());
1013:       assertFalse(node1.isScript());
1014:       assertFalse(node1.isExprResult());
1015:       assertFalse(node1.isWith());
1016:       assertFalse(node1.isNot());
1017:       assertFalse(node1.isObjectLit());
1018:       assertFalse(node1.hasOneChild());
1019:       assertFalse(node1.isGetProp());
1020:       assertFalse(node1.isNumber());
1021:       assertEquals(2, node1.getLineno());
1022:       assertFalse(node1.isFalse());
1023:       assertFalse(node1.isLabel());
1024:       assertFalse(node1.isCast());
1025:       assertFalse(node1.isAnd());
1026:       assertFalse(node1.isLabelName());
1027:       assertFalse(node1.isSwitch());
1028:       assertFalse(node1.isWhile());
1029:       assertFalse(node1.isString());
1030:       assertFalse(node1.isReturn());
1031:       assertFalse(node1.isVar());
1032:       assertFalse(node1.isAdd());
1033:       assertFalse(node1.isNew());
1034:       assertFalse(node1.isDo());
1035:       assertFalse(node1.isAssignAdd());
1036:       assertFalse(node1.isDec());
1037:       assertFalse(node1.hasChildren());
1038:       assertFalse(node1.isBreak());
1039:       assertFalse(node1.isEmpty());
1040:       assertFalse(node1.isNull());
1041:       assertFalse(node1.isOr());
1042:       assertFalse(node1.isAssign());
1043:       assertFalse(node1.isComma());
1044:       assertFalse(node1.isTypeOf());
1045:       assertFalse(node1.isCall());
1046:       assertFalse(node1.isGetElem());
1047:       assertFalse(node1.isName());
1048:       assertFalse(node1.isDelProp());
1049:       assertFalse(node1.isVoid());
1050:       assertFalse(node1.isDefaultCase());
1051:       assertEquals(2, node1.getCharno());
1052:       assertFalse(node1.isTrue());
1053:       assertFalse(node1.isDebugger());
1054:       assertFalse(node1.isRegExp());
1055:       assertFalse(node1.isFunction());
1056:       assertEquals(0, node1.getChildCount());
1057:       assertFalse(node1.isTry());
1058:       assertFalse(node1.isGetterDef());
1059:       assertFalse(node1.isArrayLit());
1060:       assertFalse(node1.isStringKey());
1061:       assertFalse(node1.isParamList());
1062:       assertFalse(node1.isInc());
1063:       assertFalse(node1.isContinue());
1064:       assertFalse(node1.hasMoreThanOneChild());
1065:       assertFalse(node1.isIn());
1066:       assertFalse(node1.isHook());
1067:       assertEquals((-432), node1.getType());
1068:       assertFalse(node1.isBlock());
1069:       assertFalse(node1.isThrow());
1070:       assertFalse(node1.isCase());
1071:       assertFalse(node1.isIf());
1072:       assertFalse(node1.isThis());
1073:       assertFalse(node1.isNE());
1074:       assertFalse(node1.isSetterDef());
1075:       assertFalse(node1.isFor());
1076:       assertEquals(8194, node1.getSourcePosition());
1077:       assertFalse(node1.isInstanceOf());
1078:       assertFalse(node1.isCatch());
1079:       
1080:       Node node3 = node0.cloneTree();
1081:       assertFalse(node0.equals((Object)node1));
1082:       assertFalse(node3.equals((Object)node0));
1083:       assertFalse(node3.equals((Object)node1));
1084:       assertFalse(node3.equals((Object)node2));
1085:       assertNotNull(node3);
1086:       assertSame(node0, node2);
1087:       assertNotSame(node0, node3);
1088:       assertNotSame(node3, node0);
1089:       assertNotSame(node3, node2);
1090:       assertFalse(node0.isInstanceOf());
1091:       assertFalse(node0.isGetProp());
1092:       assertFalse(node0.isBreak());
1093:       assertFalse(node0.isNot());
1094:       assertFalse(node0.isAnd());
1095:       assertFalse(node0.isObjectLit());
1096:       assertFalse(node0.isCast());
1097:       assertFalse(node0.isSwitch());
1098:       assertFalse(node0.isInc());
1099:       assertFalse(node0.isFalse());
1100:       assertFalse(node0.isThrow());
1101:       assertFalse(node0.isIn());
1102:       assertFalse(node0.isCase());
1103:       assertEquals(152, node0.getLineno());
1104:       assertFalse(node0.isLabelName());
1105:       assertFalse(node0.isIf());
1106:       assertFalse(node0.isNE());
1107:       assertFalse(node0.isGetterDef());
1108:       assertFalse(node0.isTry());
1109:       assertFalse(node0.isBlock());
1110:       assertFalse(node0.isScript());
1111:       assertFalse(node0.hasOneChild());
1112:       assertFalse(node0.isWith());
1113:       assertEquals(39, node0.getType());
1114:       assertFalse(node0.isFor());
1115:       assertFalse(node0.hasMoreThanOneChild());
1116:       assertFalse(node0.isHook());
1117:       assertFalse(node0.isThis());
1118:       assertFalse(node0.isRegExp());
1119:       assertFalse(node0.isParamList());
1120:       assertFalse(node0.isCatch());
1121:       assertFalse(node0.isSetterDef());
1122:       assertFalse(node0.isName());
1123:       assertFalse(node0.isStringKey());
1124:       assertFalse(node0.isTrue());
1125:       assertFalse(node0.isNull());
1126:       assertFalse(node0.isDebugger());
1127:       assertEquals(623683, node0.getSourcePosition());
1128:       assertFalse(node0.isAdd());
1129:       assertFalse(node0.isArrayLit());
1130:       assertFalse(node0.isNew());
1131:       assertFalse(node0.isDo());
1132:       assertFalse(node0.isContinue());
1133:       assertFalse(node0.isDefaultCase());
1134:       assertFalse(node0.isVar());
1135:       assertFalse(node0.isFunction());
1136:       assertEquals(0, node0.getChildCount());
1137:       assertFalse(node0.isLabel());
1138:       assertFalse(node0.isAssignAdd());
1139:       assertFalse(node0.isOr());
1140:       assertFalse(node0.isReturn());
1141:       assertTrue(node0.isNumber());
1142:       assertFalse(node0.isEmpty());
1143:       assertFalse(node0.isDelProp());
1144:       assertEquals(1091, node0.getCharno());
1145:       assertFalse(node0.isString());
1146:       assertFalse(node0.isCall());
1147:       assertFalse(node0.isExprResult());
1148:       assertFalse(node0.isVoid());
1149:       assertFalse(node0.isAssign());
1150:       assertFalse(node0.isGetElem());
1151:       assertFalse(node0.isWhile());
1152:       assertFalse(node0.isTypeOf());
1153:       assertFalse(node0.hasChildren());
1154:       assertFalse(node0.isDec());
1155:       assertFalse(node0.isComma());
1156:       assertFalse(node3.isSwitch());
1157:       assertFalse(node3.isInc());
1158:       assertFalse(node3.isString());
1159:       assertFalse(node3.isCase());
1160:       assertFalse(node3.isHook());
1161:       assertFalse(node3.isThrow());
1162:       assertFalse(node3.isFalse());
1163:       assertFalse(node3.isThis());
1164:       assertFalse(node3.isGetProp());
1165:       assertTrue(node3.isNumber());
1166:       assertFalse(node3.isObjectLit());
1167:       assertFalse(node3.isAnd());
1168:       assertFalse(node3.isNot());
1169:       assertFalse(node3.isGetterDef());
1170:       assertFalse(node3.isDebugger());
1171:       assertFalse(node3.isScript());
1172:       assertFalse(node3.isRegExp());
1173:       assertFalse(node3.isFunction());
1174:       assertFalse(node3.isTry());
1175:       assertFalse(node3.hasOneChild());
1176:       assertFalse(node3.isCast());
1177:       assertFalse(node3.isCatch());
1178:       assertFalse(node3.isInstanceOf());
1179:       assertFalse(node3.isWith());
1180:       assertFalse(node3.isFor());
1181:       assertFalse(node3.isNE());
1182:       assertFalse(node3.isSetterDef());
1183:       assertFalse(node3.isIf());
1184:       assertFalse(node3.isIn());
1185:       assertEquals(623683, node3.getSourcePosition());
1186:       assertEquals(152, node3.getLineno());
1187:       assertEquals(1091, node3.getCharno());
1188:       assertFalse(node3.isWhile());
1189:       assertFalse(node3.isDo());
1190:       assertFalse(node3.isAdd());
1191:       assertFalse(node3.isNew());
1192:       assertFalse(node3.hasMoreThanOneChild());
1193:       assertFalse(node3.isVar());
1194:       assertFalse(node3.isCall());
1195:       assertFalse(node3.isContinue());
1196:       assertFalse(node3.isLabel());
1197:       assertEquals(39, node3.getType());
1198:       assertFalse(node3.isBlock());
1199:       assertFalse(node3.isReturn());
1200:       assertFalse(node3.isParamList());
1201:       assertFalse(node3.isLabelName());
1202:       assertFalse(node3.isStringKey());
1203:       assertFalse(node3.isTrue());
1204:       assertFalse(node3.isExprResult());
1205:       assertFalse(node3.isDefaultCase());
1206:       assertFalse(node3.isVoid());
1207:       assertFalse(node3.isArrayLit());
1208:       assertFalse(node3.isAssign());
1209:       assertEquals(0, node3.getChildCount());
1210:       assertFalse(node3.hasChildren());
1211:       assertFalse(node3.isDec());
1212:       assertFalse(node3.isComma());
1213:       assertFalse(node3.isNull());
1214:       assertFalse(node3.isTypeOf());
1215:       assertFalse(node3.isAssignAdd());
1216:       assertFalse(node3.isEmpty());
1217:       assertFalse(node3.isGetElem());
1218:       assertFalse(node3.isName());
1219:       assertFalse(node3.isDelProp());
1220:       assertFalse(node3.isBreak());
1221:       assertFalse(node3.isOr());
1222:       
1223:       boolean boolean4 = node1.isDebugger();
1224:       assertFalse(node0.equals((Object)node3));
1225:       assertFalse(node0.equals((Object)node1));
1226:       assertFalse(node1.equals((Object)node2));
1227:       assertFalse(node1.equals((Object)node0));
1228:       assertFalse(node1.equals((Object)node3));
1229:       assertTrue(boolean4 == boolean0);
1230:       assertTrue(boolean4 == boolean1);
1231:       assertTrue(boolean4 == boolean2);
1232:       assertTrue(boolean4 == boolean3);
1233:       assertFalse(boolean4);
1234:       assertSame(node0, node2);
1235:       assertNotSame(node0, node3);
1236:       assertFalse(node0.isInstanceOf());
1237:       assertFalse(node0.isGetProp());
1238:       assertFalse(node0.isBreak());
1239:       assertFalse(node0.isNot());
1240:       assertFalse(node0.isAnd());
1241:       assertFalse(node0.isObjectLit());
1242:       assertFalse(node0.isCast());
1243:       assertFalse(node0.isSwitch());
1244:       assertFalse(node0.isInc());
1245:       assertFalse(node0.isFalse());
1246:       assertFalse(node0.isThrow());
1247:       assertFalse(node0.isIn());
1248:       assertFalse(node0.isCase());
1249:       assertEquals(152, node0.getLineno());
1250:       assertFalse(node0.isLabelName());
1251:       assertFalse(node0.isIf());
1252:       assertFalse(node0.isNE());
1253:       assertFalse(node0.isGetterDef());
1254:       assertFalse(node0.isTry());
1255:       assertFalse(node0.isBlock());
1256:       assertFalse(node0.isScript());
1257:       assertFalse(node0.hasOneChild());
1258:       assertFalse(node0.isWith());
1259:       assertEquals(39, node0.getType());
1260:       assertFalse(node0.isFor());
1261:       assertFalse(node0.hasMoreThanOneChild());
1262:       assertFalse(node0.isHook());
1263:       assertFalse(node0.isThis());
1264:       assertFalse(node0.isRegExp());
1265:       assertFalse(node0.isParamList());
1266:       assertFalse(node0.isCatch());
1267:       assertFalse(node0.isSetterDef());
1268:       assertFalse(node0.isName());
1269:       assertFalse(node0.isStringKey());
1270:       assertFalse(node0.isTrue());
1271:       assertFalse(node0.isNull());
1272:       assertFalse(node0.isDebugger());
1273:       assertEquals(623683, node0.getSourcePosition());
1274:       assertFalse(node0.isAdd());
1275:       assertFalse(node0.isArrayLit());
1276:       assertFalse(node0.isNew());
1277:       assertFalse(node0.isDo());
1278:       assertFalse(node0.isContinue());
1279:       assertFalse(node0.isDefaultCase());
1280:       assertFalse(node0.isVar());
1281:       assertFalse(node0.isFunction());
1282:       assertEquals(0, node0.getChildCount());
1283:       assertFalse(node0.isLabel());
1284:       assertFalse(node0.isAssignAdd());
1285:       assertFalse(node0.isOr());
1286:       assertFalse(node0.isReturn());
1287:       assertTrue(node0.isNumber());
1288:       assertFalse(node0.isEmpty());
1289:       assertFalse(node0.isDelProp());
1290:       assertEquals(1091, node0.getCharno());
1291:       assertFalse(node0.isString());
1292:       assertFalse(node0.isCall());
1293:       assertFalse(node0.isExprResult());
1294:       assertFalse(node0.isVoid());
1295:       assertFalse(node0.isAssign());
1296:       assertFalse(node0.isGetElem());
1297:       assertFalse(node0.isWhile());
1298:       assertFalse(node0.isTypeOf());
1299:       assertFalse(node0.hasChildren());
1300:       assertFalse(node0.isDec());
1301:       assertFalse(node0.isComma());
1302:       assertFalse(node1.isScript());
1303:       assertFalse(node1.isExprResult());
1304:       assertFalse(node1.isWith());
1305:       assertFalse(node1.isNot());
1306:       assertFalse(node1.isObjectLit());
1307:       assertFalse(node1.hasOneChild());
1308:       assertFalse(node1.isGetProp());
1309:       assertFalse(node1.isNumber());
1310:       assertEquals(2, node1.getLineno());
1311:       assertFalse(node1.isFalse());
1312:       assertFalse(node1.isLabel());
1313:       assertFalse(node1.isCast());
1314:       assertFalse(node1.isAnd());
1315:       assertFalse(node1.isLabelName());
1316:       assertFalse(node1.isSwitch());
1317:       assertFalse(node1.isWhile());
1318:       assertFalse(node1.isString());
1319:       assertFalse(node1.isReturn());
1320:       assertFalse(node1.isVar());
1321:       assertFalse(node1.isAdd());
1322:       assertFalse(node1.isNew());
1323:       assertFalse(node1.isDo());
1324:       assertFalse(node1.isAssignAdd());
1325:       assertFalse(node1.isDec());
1326:       assertFalse(node1.hasChildren());
1327:       assertFalse(node1.isBreak());
1328:       assertFalse(node1.isEmpty());
1329:       assertFalse(node1.isNull());
1330:       assertFalse(node1.isOr());
1331:       assertFalse(node1.isAssign());
1332:       assertFalse(node1.isComma());
1333:       assertFalse(node1.isTypeOf());
1334:       assertFalse(node1.isCall());
1335:       assertFalse(node1.isGetElem());
1336:       assertFalse(node1.isName());
1337:       assertFalse(node1.isDelProp());
1338:       assertFalse(node1.isVoid());
1339:       assertFalse(node1.isDefaultCase());
1340:       assertEquals(2, node1.getCharno());
1341:       assertFalse(node1.isTrue());
1342:       assertFalse(node1.isDebugger());
1343:       assertFalse(node1.isRegExp());
1344:       assertFalse(node1.isFunction());
1345:       assertEquals(0, node1.getChildCount());
1346:       assertFalse(node1.isTry());
1347:       assertFalse(node1.isGetterDef());
1348:       assertFalse(node1.isArrayLit());
1349:       assertFalse(node1.isStringKey());
1350:       assertFalse(node1.isParamList());
1351:       assertFalse(node1.isInc());
1352:       assertFalse(node1.isContinue());
1353:       assertFalse(node1.hasMoreThanOneChild());
1354:       assertFalse(node1.isIn());
1355:       assertFalse(node1.isHook());
1356:       assertEquals((-432), node1.getType());
1357:       assertFalse(node1.isBlock());
1358:       assertFalse(node1.isThrow());
1359:       assertFalse(node1.isCase());
1360:       assertFalse(node1.isIf());
1361:       assertFalse(node1.isThis());
1362:       assertFalse(node1.isNE());
1363:       assertFalse(node1.isSetterDef());
1364:       assertFalse(node1.isFor());
1365:       assertEquals(8194, node1.getSourcePosition());
1366:       assertFalse(node1.isInstanceOf());
1367:       assertFalse(node1.isCatch());
1368:       
1369:       boolean boolean5 = node1.hasChildren();
1370:       assertFalse(node0.equals((Object)node3));
1371:       assertFalse(node0.equals((Object)node1));
1372:       assertFalse(node1.equals((Object)node2));
1373:       assertFalse(node1.equals((Object)node0));
1374:       assertFalse(node1.equals((Object)node3));
1375:       assertTrue(boolean5 == boolean4);
1376:       assertTrue(boolean5 == boolean2);
1377:       assertTrue(boolean5 == boolean3);
1378:       assertTrue(boolean5 == boolean1);
1379:       assertTrue(boolean5 == boolean0);
1380:       assertFalse(boolean5);
1381:       assertSame(node0, node2);
1382:       assertNotSame(node0, node3);
1383:       assertFalse(node0.isInstanceOf());
1384:       assertFalse(node0.isGetProp());
1385:       assertFalse(node0.isBreak());
1386:       assertFalse(node0.isNot());
1387:       assertFalse(node0.isAnd());
1388:       assertFalse(node0.isObjectLit());
1389:       assertFalse(node0.isCast());
1390:       assertFalse(node0.isSwitch());
1391:       assertFalse(node0.isInc());
1392:       assertFalse(node0.isFalse());
1393:       assertFalse(node0.isThrow());
1394:       assertFalse(node0.isIn());
1395:       assertFalse(node0.isCase());
1396:       assertEquals(152, node0.getLineno());
1397:       assertFalse(node0.isLabelName());
1398:       assertFalse(node0.isIf());
1399:       assertFalse(node0.isNE());
1400:       assertFalse(node0.isGetterDef());
1401:       assertFalse(node0.isTry());
1402:       assertFalse(node0.isBlock());
1403:       assertFalse(node0.isScript());
1404:       assertFalse(node0.hasOneChild());
1405:       assertFalse(node0.isWith());
1406:       assertEquals(39, node0.getType());
1407:       assertFalse(node0.isFor());
1408:       assertFalse(node0.hasMoreThanOneChild());
1409:       assertFalse(node0.isHook());
1410:       assertFalse(node0.isThis());
1411:       assertFalse(node0.isRegExp());
1412:       assertFalse(node0.isParamList());
1413:       assertFalse(node0.isCatch());
1414:       assertFalse(node0.isSetterDef());
1415:       assertFalse(node0.isName());
1416:       assertFalse(node0.isStringKey());
1417:       assertFalse(node0.isTrue());
1418:       assertFalse(node0.isNull());
1419:       assertFalse(node0.isDebugger());
1420:       assertEquals(623683, node0.getSourcePosition());
1421:       assertFalse(node0.isAdd());
1422:       assertFalse(node0.isArrayLit());
1423:       assertFalse(node0.isNew());
1424:       assertFalse(node0.isDo());
1425:       assertFalse(node0.isContinue());
1426:       assertFalse(node0.isDefaultCase());
1427:       assertFalse(node0.isVar());
1428:       assertFalse(node0.isFunction());
1429:       assertEquals(0, node0.getChildCount());
1430:       assertFalse(node0.isLabel());
1431:       assertFalse(node0.isAssignAdd());
1432:       assertFalse(node0.isOr());
1433:       assertFalse(node0.isReturn());
1434:       assertTrue(node0.isNumber());
1435:       assertFalse(node0.isEmpty());
1436:       assertFalse(node0.isDelProp());
1437:       assertEquals(1091, node0.getCharno());
1438:       assertFalse(node0.isString());
1439:       assertFalse(node0.isCall());
1440:       assertFalse(node0.isExprResult());
1441:       assertFalse(node0.isVoid());
1442:       assertFalse(node0.isAssign());
1443:       assertFalse(node0.isGetElem());
1444:       assertFalse(node0.isWhile());
1445:       assertFalse(node0.isTypeOf());
1446:       assertFalse(node0.hasChildren());
1447:       assertFalse(node0.isDec());
1448:       assertFalse(node0.isComma());
1449:       assertFalse(node1.isScript());
1450:       assertFalse(node1.isExprResult());
1451:       assertFalse(node1.isWith());
1452:       assertFalse(node1.isNot());
1453:       assertFalse(node1.isObjectLit());
1454:       assertFalse(node1.hasOneChild());
1455:       assertFalse(node1.isGetProp());
1456:       assertFalse(node1.isNumber());
1457:       assertEquals(2, node1.getLineno());
1458:       assertFalse(node1.isFalse());
1459:       assertFalse(node1.isLabel());
1460:       assertFalse(node1.isCast());
1461:       assertFalse(node1.isAnd());
1462:       assertFalse(node1.isLabelName());
1463:       assertFalse(node1.isSwitch());
1464:       assertFalse(node1.isWhile());
1465:       assertFalse(node1.isString());
1466:       assertFalse(node1.isReturn());
1467:       assertFalse(node1.isVar());
1468:       assertFalse(node1.isAdd());
1469:       assertFalse(node1.isNew());
1470:       assertFalse(node1.isDo());
1471:       assertFalse(node1.isAssignAdd());
1472:       assertFalse(node1.isDec());
1473:       assertFalse(node1.hasChildren());
1474:       assertFalse(node1.isBreak());
1475:       assertFalse(node1.isEmpty());
1476:       assertFalse(node1.isNull());
1477:       assertFalse(node1.isOr());
1478:       assertFalse(node1.isAssign());
1479:       assertFalse(node1.isComma());
1480:       assertFalse(node1.isTypeOf());
1481:       assertFalse(node1.isCall());
1482:       assertFalse(node1.isGetElem());
1483:       assertFalse(node1.isName());
1484:       assertFalse(node1.isDelProp());
1485:       assertFalse(node1.isVoid());
1486:       assertFalse(node1.isDefaultCase());
1487:       assertEquals(2, node1.getCharno());
1488:       assertFalse(node1.isTrue());
1489:       assertFalse(node1.isDebugger());
1490:       assertFalse(node1.isRegExp());
1491:       assertFalse(node1.isFunction());
1492:       assertEquals(0, node1.getChildCount());
1493:       assertFalse(node1.isTry());
1494:       assertFalse(node1.isGetterDef());
1495:       assertFalse(node1.isArrayLit());
1496:       assertFalse(node1.isStringKey());
1497:       assertFalse(node1.isParamList());
1498:       assertFalse(node1.isInc());
1499:       assertFalse(node1.isContinue());
1500:       assertFalse(node1.hasMoreThanOneChild());
1501:       assertFalse(node1.isIn());
1502:       assertFalse(node1.isHook());
1503:       assertEquals((-432), node1.getType());
1504:       assertFalse(node1.isBlock());
1505:       assertFalse(node1.isThrow());
1506:       assertFalse(node1.isCase());
1507:       assertFalse(node1.isIf());
1508:       assertFalse(node1.isThis());
1509:       assertFalse(node1.isNE());
1510:       assertFalse(node1.isSetterDef());
1511:       assertFalse(node1.isFor());
1512:       assertEquals(8194, node1.getSourcePosition());
1513:       assertFalse(node1.isInstanceOf());
1514:       assertFalse(node1.isCatch());
1515:       
1516:       Node node4 = new Node(46, node2, node1, node0, node2, 996, 1);
1517:       assertFalse(node4.equals((Object)node2));
1518:       assertFalse(node4.equals((Object)node1));
1519:       assertFalse(node4.equals((Object)node0));
1520:       assertFalse(node4.equals((Object)node3));
1521:       assertFalse(node0.equals((Object)node3));
1522:       assertFalse(node0.equals((Object)node1));
1523:       assertFalse(node1.equals((Object)node2));
1524:       assertFalse(node1.equals((Object)node0));
1525:       assertFalse(node1.equals((Object)node3));
1526:       assertFalse(node2.equals((Object)node3));
1527:       assertFalse(node2.equals((Object)node1));
1528:       assertNotNull(node4);
1529:       assertFalse(node4.isCase());
1530:       assertFalse(node4.isString());
1531:       assertEquals(1, node4.getChildCount());
1532:       assertFalse(node4.isIn());
1533:       assertFalse(node4.isInc());
1534:       assertFalse(node4.isFor());
1535:       assertFalse(node4.isEmpty());
1536:       assertFalse(node4.isIf());
1537:       assertFalse(node4.isDelProp());
1538:       assertFalse(node4.isNE());
1539:       assertFalse(node4.isComma());
1540:       assertTrue(node4.hasOneChild());
1541:       assertFalse(node4.isHook());
1542:       assertFalse(node4.isThis());
1543:       assertTrue(node4.hasChildren());
1544:       assertFalse(node4.isVoid());
1545:       assertEquals(996, node4.getLineno());
1546:       assertFalse(node4.isInstanceOf());
1547:       assertFalse(node4.isBreak());
1548:       assertFalse(node4.isNot());
1549:       assertFalse(node4.isAnd());
1550:       assertFalse(node4.isObjectLit());
1551:       assertFalse(node4.isDebugger());
1552:       assertFalse(node4.isGetProp());
1553:       assertFalse(node4.isSetterDef());
1554:       assertFalse(node4.isThrow());
1555:       assertFalse(node4.isFalse());
1556:       assertFalse(node4.isFunction());
1557:       assertFalse(node4.isCast());
1558:       assertFalse(node4.isDo());
1559:       assertFalse(node4.isContinue());
1560:       assertFalse(node4.isWhile());
1561:       assertFalse(node4.hasMoreThanOneChild());
1562:       assertEquals(1, node4.getCharno());
1563:       assertFalse(node4.isBlock());
1564:       assertFalse(node4.isReturn());
1565:       assertFalse(node4.isAssignAdd());
1566:       assertFalse(node4.isOr());
1567:       assertFalse(node4.isAdd());
1568:       assertFalse(node4.isNew());
1569:       assertFalse(node4.isName());
1570:       assertFalse(node4.isAssign());
1571:       assertFalse(node4.isNull());
1572:       assertFalse(node4.isTypeOf());
1573:       assertFalse(node4.isDec());
1574:       assertFalse(node4.isCatch());
1575:       assertFalse(node4.isCall());
1576:       assertFalse(node4.isExprResult());
1577:       assertFalse(node4.isGetElem());
1578:       assertFalse(node4.isWith());
1579:       assertFalse(node4.isDefaultCase());
1580:       assertFalse(node4.isRegExp());
1581:       assertFalse(node4.isTrue());
1582:       assertEquals(4079617, node4.getSourcePosition());
1583:       assertFalse(node4.isTry());
1584:       assertFalse(node4.isScript());
1585:       assertEquals(46, node4.getType());
1586:       assertFalse(node4.isLabelName());
1587:       assertFalse(node4.isStringKey());
1588:       assertFalse(node4.isGetterDef());
1589:       assertFalse(node4.isNumber());
1590:       assertFalse(node4.isVar());
1591:       assertFalse(node4.isParamList());
1592:       assertFalse(node4.isLabel());
1593:       assertFalse(node4.isSwitch());
1594:       assertFalse(node4.isArrayLit());
1595:       assertFalse(node0.isInstanceOf());
1596:       assertFalse(node0.isGetProp());
1597:       assertFalse(node0.isBreak());
1598:       assertFalse(node0.isNot());
1599:       assertFalse(node0.isAnd());
1600:       assertFalse(node0.isObjectLit());
1601:       assertFalse(node0.isCast());
1602:       assertFalse(node0.isSwitch());
1603:       assertFalse(node0.isInc());
1604:       assertFalse(node0.isFalse());
1605:       assertFalse(node0.isThrow());
1606:       assertFalse(node0.isIn());
1607:       assertFalse(node0.isCase());
1608:       assertEquals(152, node0.getLineno());
1609:       assertFalse(node0.isLabelName());
1610:       assertFalse(node0.isIf());
1611:       assertFalse(node0.isNE());
1612:       assertFalse(node0.isGetterDef());
1613:       assertFalse(node0.isTry());
1614:       assertFalse(node0.isBlock());
1615:       assertFalse(node0.isScript());
1616:       assertFalse(node0.hasOneChild());
1617:       assertFalse(node0.isWith());
1618:       assertEquals(39, node0.getType());
1619:       assertFalse(node0.isFor());
1620:       assertFalse(node0.hasMoreThanOneChild());
1621:       assertFalse(node0.isHook());
1622:       assertFalse(node0.isThis());
1623:       assertFalse(node0.isRegExp());
1624:       assertFalse(node0.isParamList());
1625:       assertFalse(node0.isCatch());
1626:       assertFalse(node0.isSetterDef());
1627:       assertFalse(node0.isName());
1628:       assertFalse(node0.isStringKey());
1629:       assertFalse(node0.isTrue());
1630:       assertFalse(node0.isNull());
1631:       assertFalse(node0.isDebugger());
1632:       assertEquals(623683, node0.getSourcePosition());
1633:       assertFalse(node0.isAdd());
1634:       assertFalse(node0.isArrayLit());
1635:       assertFalse(node0.isNew());
1636:       assertFalse(node0.isDo());
1637:       assertFalse(node0.isContinue());
1638:       assertFalse(node0.isDefaultCase());
1639:       assertFalse(node0.isVar());
1640:       assertFalse(node0.isFunction());
1641:       assertEquals(0, node0.getChildCount());
1642:       assertFalse(node0.isLabel());
1643:       assertFalse(node0.isAssignAdd());
1644:       assertFalse(node0.isOr());
1645:       assertFalse(node0.isReturn());
1646:       assertTrue(node0.isNumber());
1647:       assertFalse(node0.isEmpty());
1648:       assertFalse(node0.isDelProp());
1649:       assertEquals(1091, node0.getCharno());
1650:       assertFalse(node0.isString());
1651:       assertFalse(node0.isCall());
1652:       assertFalse(node0.isExprResult());
1653:       assertFalse(node0.isVoid());
1654:       assertFalse(node0.isAssign());
1655:       assertFalse(node0.isGetElem());
1656:       assertFalse(node0.isWhile());
1657:       assertFalse(node0.isTypeOf());
1658:       assertFalse(node0.hasChildren());
1659:       assertFalse(node0.isDec());
1660:       assertFalse(node0.isComma());
1661:       assertFalse(node1.isScript());
1662:       assertFalse(node1.isExprResult());
1663:       assertFalse(node1.isWith());
1664:       assertFalse(node1.isNot());
1665:       assertFalse(node1.isObjectLit());
1666:       assertFalse(node1.hasOneChild());
1667:       assertFalse(node1.isGetProp());
1668:       assertFalse(node1.isNumber());
1669:       assertEquals(2, node1.getLineno());
1670:       assertFalse(node1.isFalse());
1671:       assertFalse(node1.isLabel());
1672:       assertFalse(node1.isCast());
1673:       assertFalse(node1.isAnd());
1674:       assertFalse(node1.isLabelName());
1675:       assertFalse(node1.isSwitch());
1676:       assertFalse(node1.isWhile());
1677:       assertFalse(node1.isString());
1678:       assertFalse(node1.isReturn());
1679:       assertFalse(node1.isVar());
1680:       assertFalse(node1.isAdd());
1681:       assertFalse(node1.isNew());
1682:       assertFalse(node1.isDo());
1683:       assertFalse(node1.isAssignAdd());
1684:       assertFalse(node1.isDec());
1685:       assertFalse(node1.hasChildren());
1686:       assertFalse(node1.isBreak());
1687:       assertFalse(node1.isEmpty());
1688:       assertFalse(node1.isNull());
1689:       assertFalse(node1.isOr());
1690:       assertFalse(node1.isAssign());
1691:       assertFalse(node1.isComma());
1692:       assertFalse(node1.isTypeOf());
1693:       assertFalse(node1.isCall());
1694:       assertFalse(node1.isGetElem());
1695:       assertFalse(node1.isName());
1696:       assertFalse(node1.isDelProp());
1697:       assertFalse(node1.isVoid());
1698:       assertFalse(node1.isDefaultCase());
1699:       assertEquals(2, node1.getCharno());
1700:       assertFalse(node1.isTrue());
1701:       assertFalse(node1.isDebugger());
1702:       assertFalse(node1.isRegExp());
1703:       assertFalse(node1.isFunction());
1704:       assertEquals(0, node1.getChildCount());
1705:       assertFalse(node1.isTry());
1706:       assertFalse(node1.isGetterDef());
1707:       assertFalse(node1.isArrayLit());
1708:       assertFalse(node1.isStringKey());
1709:       assertFalse(node1.isParamList());
1710:       assertFalse(node1.isInc());
1711:       assertFalse(node1.isContinue());
1712:       assertFalse(node1.hasMoreThanOneChild());
1713:       assertFalse(node1.isIn());
1714:       assertFalse(node1.isHook());
1715:       assertEquals((-432), node1.getType());
1716:       assertFalse(node1.isBlock());
1717:       assertFalse(node1.isThrow());
1718:       assertFalse(node1.isCase());
1719:       assertFalse(node1.isIf());
1720:       assertFalse(node1.isThis());
1721:       assertFalse(node1.isNE());
1722:       assertFalse(node1.isSetterDef());
1723:       assertFalse(node1.isFor());
1724:       assertEquals(8194, node1.getSourcePosition());
1725:       assertFalse(node1.isInstanceOf());
1726:       assertFalse(node1.isCatch());
1727:       assertFalse(node2.isNE());
1728:       assertFalse(node2.isGetterDef());
1729:       assertFalse(node2.isDelProp());
1730:       assertFalse(node2.isIf());
1731:       assertFalse(node2.isEmpty());
1732:       assertTrue(node2.isNumber());
1733:       assertFalse(node2.isFor());
1734:       assertFalse(node2.isRegExp());
1735:       assertFalse(node2.isVoid());
1736:       assertFalse(node2.isDefaultCase());
1737:       assertFalse(node2.isInc());
1738:       assertFalse(node2.isIn());
1739:       assertFalse(node2.isTrue());
1740:       assertFalse(node2.isNull());
1741:       assertFalse(node2.isComma());
1742:       assertFalse(node2.isName());
1743:       assertFalse(node2.isBreak());
1744:       assertFalse(node2.isCall());
1745:       assertFalse(node2.isGetProp());
1746:       assertFalse(node2.isSetterDef());
1747:       assertFalse(node2.isFalse());
1748:       assertFalse(node2.isThrow());
1749:       assertEquals(1091, node2.getCharno());
1750:       assertFalse(node2.isWhile());
1751:       assertFalse(node2.isString());
1752:       assertFalse(node2.isFunction());
1753:       assertFalse(node2.isAnd());
1754:       assertFalse(node2.isObjectLit());
1755:       assertFalse(node2.isNot());
1756:       assertFalse(node2.isDebugger());
1757:       assertFalse(node2.isTypeOf());
1758:       assertFalse(node2.isDec());
1759:       assertFalse(node2.isLabelName());
1760:       assertFalse(node2.isGetElem());
1761:       assertFalse(node2.hasOneChild());
1762:       assertFalse(node2.isCast());
1763:       assertFalse(node2.isContinue());
1764:       assertFalse(node2.hasMoreThanOneChild());
1765:       assertFalse(node2.isLabel());
1766:       assertFalse(node2.isAssignAdd());
1767:       assertFalse(node2.isAssign());
1768:       assertFalse(node2.hasChildren());
1769:       assertEquals(39, node2.getType());
1770:       assertFalse(node2.isReturn());
1771:       assertFalse(node2.isWith());
1772:       assertFalse(node2.isAdd());
1773:       assertFalse(node2.isDo());
1774:       assertFalse(node2.isNew());
1775:       assertFalse(node2.isExprResult());
1776:       assertEquals(623683, node2.getSourcePosition());
1777:       assertEquals(152, node2.getLineno());
1778:       assertFalse(node2.isOr());
1779:       assertFalse(node2.isParamList());
1780:       assertFalse(node2.isVar());
1781:       assertEquals(0, node2.getChildCount());
1782:       assertFalse(node2.isInstanceOf());
1783:       assertFalse(node2.isCatch());
1784:       assertFalse(node2.isBlock());
1785:       assertFalse(node2.isHook());
1786:       assertFalse(node2.isThis());
1787:       assertFalse(node2.isScript());
1788:       assertFalse(node2.isSwitch());
1789:       assertFalse(node2.isCase());
1790:       assertFalse(node2.isTry());
1791:       assertFalse(node2.isArrayLit());
1792:       assertFalse(node2.isStringKey());
1793:       
1794:       boolean boolean6 = node2.isTrue();
1795:       assertTrue(boolean6 == boolean3);
1796:       assertTrue(boolean6 == boolean1);
1797:       assertTrue(boolean6 == boolean5);
1798:       assertTrue(boolean6 == boolean4);
1799:       assertTrue(boolean6 == boolean0);
1800:       assertTrue(boolean6 == boolean2);
1801:       assertFalse(node0.equals((Object)node3));
1802:       assertFalse(node0.equals((Object)node4));
1803:       assertFalse(node0.equals((Object)node1));
1804:       assertFalse(node2.equals((Object)node3));
1805:       assertFalse(node2.equals((Object)node1));
1806:       assertFalse(node2.equals((Object)node4));
1807:       assertFalse(boolean6);
1808:       assertSame(node0, node2);
1809:       assertNotSame(node0, node3);
1810:       assertNotSame(node2, node3);
1811:       assertSame(node2, node0);
1812:       assertFalse(node0.isInstanceOf());
1813:       assertFalse(node0.isGetProp());
1814:       assertFalse(node0.isBreak());
1815:       assertFalse(node0.isNot());
1816:       assertFalse(node0.isAnd());
1817:       assertFalse(node0.isObjectLit());
1818:       assertFalse(node0.isCast());
1819:       assertFalse(node0.isSwitch());
1820:       assertFalse(node0.isInc());
1821:       assertFalse(node0.isFalse());
1822:       assertFalse(node0.isThrow());
1823:       assertFalse(node0.isIn());
1824:       assertFalse(node0.isCase());
1825:       assertEquals(152, node0.getLineno());
1826:       assertFalse(node0.isLabelName());
1827:       assertFalse(node0.isIf());
1828:       assertFalse(node0.isNE());
1829:       assertFalse(node0.isGetterDef());
1830:       assertFalse(node0.isTry());
1831:       assertFalse(node0.isBlock());
1832:       assertFalse(node0.isScript());
1833:       assertFalse(node0.hasOneChild());
1834:       assertFalse(node0.isWith());
1835:       assertEquals(39, node0.getType());
1836:       assertFalse(node0.isFor());
1837:       assertFalse(node0.hasMoreThanOneChild());
1838:       assertFalse(node0.isHook());
1839:       assertFalse(node0.isThis());
1840:       assertFalse(node0.isRegExp());
1841:       assertFalse(node0.isParamList());
1842:       assertFalse(node0.isCatch());
1843:       assertFalse(node0.isSetterDef());
1844:       assertFalse(node0.isName());
1845:       assertFalse(node0.isStringKey());
1846:       assertFalse(node0.isTrue());
1847:       assertFalse(node0.isNull());
1848:       assertFalse(node0.isDebugger());
1849:       assertEquals(623683, node0.getSourcePosition());
1850:       assertFalse(node0.isAdd());
1851:       assertFalse(node0.isArrayLit());
1852:       assertFalse(node0.isNew());
1853:       assertFalse(node0.isDo());
1854:       assertFalse(node0.isContinue());
1855:       assertFalse(node0.isDefaultCase());
1856:       assertFalse(node0.isVar());
1857:       assertFalse(node0.isFunction());
1858:       assertEquals(0, node0.getChildCount());
1859:       assertFalse(node0.isLabel());
1860:       assertFalse(node0.isAssignAdd());
1861:       assertFalse(node0.isOr());
1862:       assertFalse(node0.isReturn());
1863:       assertTrue(node0.isNumber());
1864:       assertFalse(node0.isEmpty());
1865:       assertFalse(node0.isDelProp());
1866:       assertEquals(1091, node0.getCharno());
1867:       assertFalse(node0.isString());
1868:       assertFalse(node0.isCall());
1869:       assertFalse(node0.isExprResult());
1870:       assertFalse(node0.isVoid());
1871:       assertFalse(node0.isAssign());
1872:       assertFalse(node0.isGetElem());
1873:       assertFalse(node0.isWhile());
1874:       assertFalse(node0.isTypeOf());
1875:       assertFalse(node0.hasChildren());
1876:       assertFalse(node0.isDec());
1877:       assertFalse(node0.isComma());
1878:       assertFalse(node2.isNE());
1879:       assertFalse(node2.isGetterDef());
1880:       assertFalse(node2.isDelProp());
1881:       assertFalse(node2.isIf());
1882:       assertFalse(node2.isEmpty());
1883:       assertTrue(node2.isNumber());
1884:       assertFalse(node2.isFor());
1885:       assertFalse(node2.isRegExp());
1886:       assertFalse(node2.isVoid());
1887:       assertFalse(node2.isDefaultCase());
1888:       assertFalse(node2.isInc());
1889:       assertFalse(node2.isIn());
1890:       assertFalse(node2.isTrue());
1891:       assertFalse(node2.isNull());
1892:       assertFalse(node2.isComma());
1893:       assertFalse(node2.isName());
1894:       assertFalse(node2.isBreak());
1895:       assertFalse(node2.isCall());
1896:       assertFalse(node2.isGetProp());
1897:       assertFalse(node2.isSetterDef());
1898:       assertFalse(node2.isFalse());
1899:       assertFalse(node2.isThrow());
1900:       assertEquals(1091, node2.getCharno());
1901:       assertFalse(node2.isWhile());
1902:       assertFalse(node2.isString());
1903:       assertFalse(node2.isFunction());
1904:       assertFalse(node2.isAnd());
1905:       assertFalse(node2.isObjectLit());
1906:       assertFalse(node2.isNot());
1907:       assertFalse(node2.isDebugger());
1908:       assertFalse(node2.isTypeOf());
1909:       assertFalse(node2.isDec());
1910:       assertFalse(node2.isLabelName());
1911:       assertFalse(node2.isGetElem());
1912:       assertFalse(node2.hasOneChild());
1913:       assertFalse(node2.isCast());
1914:       assertFalse(node2.isContinue());
1915:       assertFalse(node2.hasMoreThanOneChild());
1916:       assertFalse(node2.isLabel());
1917:       assertFalse(node2.isAssignAdd());
1918:       assertFalse(node2.isAssign());
1919:       assertFalse(node2.hasChildren());
1920:       assertEquals(39, node2.getType());
1921:       assertFalse(node2.isReturn());
1922:       assertFalse(node2.isWith());
1923:       assertFalse(node2.isAdd());
1924:       assertFalse(node2.isDo());
1925:       assertFalse(node2.isNew());
1926:       assertFalse(node2.isExprResult());
1927:       assertEquals(623683, node2.getSourcePosition());
1928:       assertEquals(152, node2.getLineno());
1929:       assertFalse(node2.isOr());
1930:       assertFalse(node2.isParamList());
1931:       assertFalse(node2.isVar());
1932:       assertEquals(0, node2.getChildCount());
1933:       assertFalse(node2.isInstanceOf());
1934:       assertFalse(node2.isCatch());
1935:       assertFalse(node2.isBlock());
1936:       assertFalse(node2.isHook());
1937:       assertFalse(node2.isThis());
1938:       assertFalse(node2.isScript());
1939:       assertFalse(node2.isSwitch());
1940:       assertFalse(node2.isCase());
1941:       assertFalse(node2.isTry());
1942:       assertFalse(node2.isArrayLit());
1943:       assertFalse(node2.isStringKey());
1944:       
1945:       boolean boolean7 = node4.isCatch();
1946:       assertFalse(node4.equals((Object)node2));
1947:       assertFalse(node4.equals((Object)node1));
1948:       assertFalse(node4.equals((Object)node0));
1949:       assertFalse(node4.equals((Object)node3));
1950:       assertTrue(boolean7 == boolean1);
1951:       assertTrue(boolean7 == boolean6);
1952:       assertTrue(boolean7 == boolean2);
1953:       assertTrue(boolean7 == boolean3);
1954:       assertTrue(boolean7 == boolean0);
1955:       assertTrue(boolean7 == boolean5);
1956:       assertTrue(boolean7 == boolean4);
1957:       assertFalse(node0.equals((Object)node3));
1958:       assertFalse(node0.equals((Object)node4));
1959:       assertFalse(node0.equals((Object)node1));
1960:       assertFalse(node1.equals((Object)node4));
1961:       assertFalse(node1.equals((Object)node2));
1962:       assertFalse(node1.equals((Object)node0));
1963:       assertFalse(node1.equals((Object)node3));
1964:       assertFalse(node2.equals((Object)node3));
1965:       assertFalse(node2.equals((Object)node1));
1966:       assertFalse(node2.equals((Object)node4));
1967:       assertFalse(boolean7);
1968:       assertNotSame(node4, node1);
1969:       assertSame(node0, node2);
1970:       assertNotSame(node0, node3);
1971:       assertNotSame(node1, node4);
1972:       assertNotSame(node2, node3);
1973:       assertSame(node2, node0);
1974:       assertFalse(node4.isCase());
1975:       assertFalse(node4.isString());
1976:       assertEquals(1, node4.getChildCount());
1977:       assertFalse(node4.isIn());
1978:       assertFalse(node4.isInc());
1979:       assertFalse(node4.isFor());
1980:       assertFalse(node4.isEmpty());
1981:       assertFalse(node4.isIf());
1982:       assertFalse(node4.isDelProp());
1983:       assertFalse(node4.isNE());
1984:       assertFalse(node4.isComma());
1985:       assertTrue(node4.hasOneChild());
1986:       assertFalse(node4.isHook());
1987:       assertFalse(node4.isThis());
1988:       assertTrue(node4.hasChildren());
1989:       assertFalse(node4.isVoid());
1990:       assertEquals(996, node4.getLineno());
1991:       assertFalse(node4.isInstanceOf());
1992:       assertFalse(node4.isBreak());
1993:       assertFalse(node4.isNot());
1994:       assertFalse(node4.isAnd());
1995:       assertFalse(node4.isObjectLit());
1996:       assertFalse(node4.isDebugger());
1997:       assertFalse(node4.isGetProp());
1998:       assertFalse(node4.isSetterDef());
1999:       assertFalse(node4.isThrow());
2000:       assertFalse(node4.isFalse());
2001:       assertFalse(node4.isFunction());
2002:       assertFalse(node4.isCast());
2003:       assertFalse(node4.isDo());
2004:       assertFalse(node4.isContinue());
2005:       assertFalse(node4.isWhile());
2006:       assertFalse(node4.hasMoreThanOneChild());
2007:       assertEquals(1, node4.getCharno());
2008:       assertFalse(node4.isBlock());
2009:       assertFalse(node4.isReturn());
2010:       assertFalse(node4.isAssignAdd());
2011:       assertFalse(node4.isOr());
2012:       assertFalse(node4.isAdd());
2013:       assertFalse(node4.isNew());
2014:       assertFalse(node4.isName());
2015:       assertFalse(node4.isAssign());
2016:       assertFalse(node4.isNull());
2017:       assertFalse(node4.isTypeOf());
2018:       assertFalse(node4.isDec());
2019:       assertFalse(node4.isCatch());
2020:       assertFalse(node4.isCall());
2021:       assertFalse(node4.isExprResult());
2022:       assertFalse(node4.isGetElem());
2023:       assertFalse(node4.isWith());
2024:       assertFalse(node4.isDefaultCase());
2025:       assertFalse(node4.isRegExp());
2026:       assertFalse(node4.isTrue());
2027:       assertEquals(4079617, node4.getSourcePosition());
2028:       assertFalse(node4.isTry());
2029:       assertFalse(node4.isScript());
2030:       assertEquals(46, node4.getType());
2031:       assertFalse(node4.isLabelName());
2032:       assertFalse(node4.isStringKey());
2033:       assertFalse(node4.isGetterDef());
2034:       assertFalse(node4.isNumber());
2035:       assertFalse(node4.isVar());
2036:       assertFalse(node4.isParamList());
2037:       assertFalse(node4.isLabel());
2038:       assertFalse(node4.isSwitch());
2039:       assertFalse(node4.isArrayLit());
2040:       assertFalse(node0.isInstanceOf());
2041:       assertFalse(node0.isGetProp());
2042:       assertFalse(node0.isBreak());
2043:       assertFalse(node0.isNot());
2044:       assertFalse(node0.isAnd());
2045:       assertFalse(node0.isObjectLit());
2046:       assertFalse(node0.isCast());
2047:       assertFalse(node0.isSwitch());
2048:       assertFalse(node0.isInc());
2049:       assertFalse(node0.isFalse());
2050:       assertFalse(node0.isThrow());
2051:       assertFalse(node0.isIn());
2052:       assertFalse(node0.isCase());
2053:       assertEquals(152, node0.getLineno());
2054:       assertFalse(node0.isLabelName());
2055:       assertFalse(node0.isIf());
2056:       assertFalse(node0.isNE());
2057:       assertFalse(node0.isGetterDef());
2058:       assertFalse(node0.isTry());
2059:       assertFalse(node0.isBlock());
2060:       assertFalse(node0.isScript());
2061:       assertFalse(node0.hasOneChild());
2062:       assertFalse(node0.isWith());
2063:       assertEquals(39, node0.getType());
2064:       assertFalse(node0.isFor());
2065:       assertFalse(node0.hasMoreThanOneChild());
2066:       assertFalse(node0.isHook());
2067:       assertFalse(node0.isThis());
2068:       assertFalse(node0.isRegExp());
2069:       assertFalse(node0.isParamList());
2070:       assertFalse(node0.isCatch());
2071:       assertFalse(node0.isSetterDef());
2072:       assertFalse(node0.isName());
2073:       assertFalse(node0.isStringKey());
2074:       assertFalse(node0.isTrue());
2075:       assertFalse(node0.isNull());
2076:       assertFalse(node0.isDebugger());
2077:       assertEquals(623683, node0.getSourcePosition());
2078:       assertFalse(node0.isAdd());
2079:       assertFalse(node0.isArrayLit());
2080:       assertFalse(node0.isNew());
2081:       assertFalse(node0.isDo());
2082:       assertFalse(node0.isContinue());
2083:       assertFalse(node0.isDefaultCase());
2084:       assertFalse(node0.isVar());
2085:       assertFalse(node0.isFunction());
2086:       assertEquals(0, node0.getChildCount());
2087:       assertFalse(node0.isLabel());
2088:       assertFalse(node0.isAssignAdd());
2089:       assertFalse(node0.isOr());
2090:       assertFalse(node0.isReturn());
2091:       assertTrue(node0.isNumber());
2092:       assertFalse(node0.isEmpty());
2093:       assertFalse(node0.isDelProp());
2094:       assertEquals(1091, node0.getCharno());
2095:       assertFalse(node0.isString());
2096:       assertFalse(node0.isCall());
2097:       assertFalse(node0.isExprResult());
2098:       assertFalse(node0.isVoid());
2099:       assertFalse(node0.isAssign());
2100:       assertFalse(node0.isGetElem());
2101:       assertFalse(node0.isWhile());
2102:       assertFalse(node0.isTypeOf());
2103:       assertFalse(node0.hasChildren());
2104:       assertFalse(node0.isDec());
2105:       assertFalse(node0.isComma());
2106:       assertFalse(node1.isScript());
2107:       assertFalse(node1.isExprResult());
2108:       assertFalse(node1.isWith());
2109:       assertFalse(node1.isNot());
2110:       assertFalse(node1.isObjectLit());
2111:       assertFalse(node1.hasOneChild());
2112:       assertFalse(node1.isGetProp());
2113:       assertFalse(node1.isNumber());
2114:       assertEquals(2, node1.getLineno());
2115:       assertFalse(node1.isFalse());
2116:       assertFalse(node1.isLabel());
2117:       assertFalse(node1.isCast());
2118:       assertFalse(node1.isAnd());
2119:       assertFalse(node1.isLabelName());
2120:       assertFalse(node1.isSwitch());
2121:       assertFalse(node1.isWhile());
2122:       assertFalse(node1.isString());
2123:       assertFalse(node1.isReturn());
2124:       assertFalse(node1.isVar());
2125:       assertFalse(node1.isAdd());
2126:       assertFalse(node1.isNew());
2127:       assertFalse(node1.isDo());
2128:       assertFalse(node1.isAssignAdd());
2129:       assertFalse(node1.isDec());
2130:       assertFalse(node1.hasChildren());
2131:       assertFalse(node1.isBreak());
2132:       assertFalse(node1.isEmpty());
2133:       assertFalse(node1.isNull());
2134:       assertFalse(node1.isOr());
2135:       assertFalse(node1.isAssign());
2136:       assertFalse(node1.isComma());
2137:       assertFalse(node1.isTypeOf());
2138:       assertFalse(node1.isCall());
2139:       assertFalse(node1.isGetElem());
2140:       assertFalse(node1.isName());
2141:       assertFalse(node1.isDelProp());
2142:       assertFalse(node1.isVoid());
2143:       assertFalse(node1.isDefaultCase());
2144:       assertEquals(2, node1.getCharno());
2145:       assertFalse(node1.isTrue());
2146:       assertFalse(node1.isDebugger());
2147:       assertFalse(node1.isRegExp());
2148:       assertFalse(node1.isFunction());
2149:       assertEquals(0, node1.getChildCount());
2150:       assertFalse(node1.isTry());
2151:       assertFalse(node1.isGetterDef());
2152:       assertFalse(node1.isArrayLit());
2153:       assertFalse(node1.isStringKey());
2154:       assertFalse(node1.isParamList());
2155:       assertFalse(node1.isInc());
2156:       assertFalse(node1.isContinue());
2157:       assertFalse(node1.hasMoreThanOneChild());
2158:       assertFalse(node1.isIn());
2159:       assertFalse(node1.isHook());
2160:       assertEquals((-432), node1.getType());
2161:       assertFalse(node1.isBlock());
2162:       assertFalse(node1.isThrow());
2163:       assertFalse(node1.isCase());
2164:       assertFalse(node1.isIf());
2165:       assertFalse(node1.isThis());
2166:       assertFalse(node1.isNE());
2167:       assertFalse(node1.isSetterDef());
2168:       assertFalse(node1.isFor());
2169:       assertEquals(8194, node1.getSourcePosition());
2170:       assertFalse(node1.isInstanceOf());
2171:       assertFalse(node1.isCatch());
2172:       assertFalse(node2.isNE());
2173:       assertFalse(node2.isGetterDef());
2174:       assertFalse(node2.isDelProp());
2175:       assertFalse(node2.isIf());
2176:       assertFalse(node2.isEmpty());
2177:       assertTrue(node2.isNumber());
2178:       assertFalse(node2.isFor());
2179:       assertFalse(node2.isRegExp());
2180:       assertFalse(node2.isVoid());
2181:       assertFalse(node2.isDefaultCase());
2182:       assertFalse(node2.isInc());
2183:       assertFalse(node2.isIn());
2184:       assertFalse(node2.isTrue());
2185:       assertFalse(node2.isNull());
2186:       assertFalse(node2.isComma());
2187:       assertFalse(node2.isName());
2188:       assertFalse(node2.isBreak());
2189:       assertFalse(node2.isCall());
2190:       assertFalse(node2.isGetProp());
2191:       assertFalse(node2.isSetterDef());
2192:       assertFalse(node2.isFalse());
2193:       assertFalse(node2.isThrow());
2194:       assertEquals(1091, node2.getCharno());
2195:       assertFalse(node2.isWhile());
2196:       assertFalse(node2.isString());
2197:       assertFalse(node2.isFunction());
2198:       assertFalse(node2.isAnd());
2199:       assertFalse(node2.isObjectLit());
2200:       assertFalse(node2.isNot());
2201:       assertFalse(node2.isDebugger());
2202:       assertFalse(node2.isTypeOf());
2203:       assertFalse(node2.isDec());
2204:       assertFalse(node2.isLabelName());
2205:       assertFalse(node2.isGetElem());
2206:       assertFalse(node2.hasOneChild());
2207:       assertFalse(node2.isCast());
2208:       assertFalse(node2.isContinue());
2209:       assertFalse(node2.hasMoreThanOneChild());
2210:       assertFalse(node2.isLabel());
2211:       assertFalse(node2.isAssignAdd());
2212:       assertFalse(node2.isAssign());
2213:       assertFalse(node2.hasChildren());
2214:       assertEquals(39, node2.getType());
2215:       assertFalse(node2.isReturn());
2216:       assertFalse(node2.isWith());
2217:       assertFalse(node2.isAdd());
2218:       assertFalse(node2.isDo());
2219:       assertFalse(node2.isNew());
2220:       assertFalse(node2.isExprResult());
2221:       assertEquals(623683, node2.getSourcePosition());
2222:       assertEquals(152, node2.getLineno());
2223:       assertFalse(node2.isOr());
2224:       assertFalse(node2.isParamList());
2225:       assertFalse(node2.isVar());
2226:       assertEquals(0, node2.getChildCount());
2227:       assertFalse(node2.isInstanceOf());
2228:       assertFalse(node2.isCatch());
2229:       assertFalse(node2.isBlock());
2230:       assertFalse(node2.isHook());
2231:       assertFalse(node2.isThis());
2232:       assertFalse(node2.isScript());
2233:       assertFalse(node2.isSwitch());
2234:       assertFalse(node2.isCase());
2235:       assertFalse(node2.isTry());
2236:       assertFalse(node2.isArrayLit());
2237:       assertFalse(node2.isStringKey());
2238:       
2239:       int int0 = node4.getIndexOfChild(node2);
2240:       assertFalse(node4.equals((Object)node2));
2241:       assertFalse(node4.equals((Object)node1));
2242:       assertFalse(node4.equals((Object)node0));
2243:       assertFalse(node4.equals((Object)node3));
2244:       assertFalse(node0.equals((Object)node3));
2245:       assertFalse(node0.equals((Object)node4));
2246:       assertFalse(node0.equals((Object)node1));
2247:       assertFalse(node1.equals((Object)node4));
2248:       assertFalse(node1.equals((Object)node2));
2249:       assertFalse(node1.equals((Object)node0));
2250:       assertFalse(node1.equals((Object)node3));
2251:       assertFalse(node2.equals((Object)node3));
2252:       assertFalse(node2.equals((Object)node1));
2253:       assertFalse(node2.equals((Object)node4));
2254:       assertEquals(0, int0);
2255:       assertNotSame(node4, node1);
2256:       assertSame(node0, node2);
2257:       assertNotSame(node0, node3);
2258:       assertNotSame(node1, node4);
2259:       assertNotSame(node2, node3);
2260:       assertSame(node2, node0);
2261:       assertFalse(node4.isCase());
2262:       assertFalse(node4.isString());
2263:       assertEquals(1, node4.getChildCount());
2264:       assertFalse(node4.isIn());
2265:       assertFalse(node4.isInc());
2266:       assertFalse(node4.isFor());
2267:       assertFalse(node4.isEmpty());
2268:       assertFalse(node4.isIf());
2269:       assertFalse(node4.isDelProp());
2270:       assertFalse(node4.isNE());
2271:       assertFalse(node4.isComma());
2272:       assertTrue(node4.hasOneChild());
2273:       assertFalse(node4.isHook());
2274:       assertFalse(node4.isThis());
2275:       assertTrue(node4.hasChildren());
2276:       assertFalse(node4.isVoid());
2277:       assertEquals(996, node4.getLineno());
2278:       assertFalse(node4.isInstanceOf());
2279:       assertFalse(node4.isBreak());
2280:       assertFalse(node4.isNot());
2281:       assertFalse(node4.isAnd());
2282:       assertFalse(node4.isObjectLit());
2283:       assertFalse(node4.isDebugger());
2284:       assertFalse(node4.isGetProp());
2285:       assertFalse(node4.isSetterDef());
2286:       assertFalse(node4.isThrow());
2287:       assertFalse(node4.isFalse());
2288:       assertFalse(node4.isFunction());
2289:       assertFalse(node4.isCast());
2290:       assertFalse(node4.isDo());
2291:       assertFalse(node4.isContinue());
2292:       assertFalse(node4.isWhile());
2293:       assertFalse(node4.hasMoreThanOneChild());
2294:       assertEquals(1, node4.getCharno());
2295:       assertFalse(node4.isBlock());
2296:       assertFalse(node4.isReturn());
2297:       assertFalse(node4.isAssignAdd());
2298:       assertFalse(node4.isOr());
2299:       assertFalse(node4.isAdd());
2300:       assertFalse(node4.isNew());
2301:       assertFalse(node4.isName());
2302:       assertFalse(node4.isAssign());
2303:       assertFalse(node4.isNull());
2304:       assertFalse(node4.isTypeOf());
2305:       assertFalse(node4.isDec());
2306:       assertFalse(node4.isCatch());
2307:       assertFalse(node4.isCall());
2308:       assertFalse(node4.isExprResult());
2309:       assertFalse(node4.isGetElem());
2310:       assertFalse(node4.isWith());
2311:       assertFalse(node4.isDefaultCase());
2312:       assertFalse(node4.isRegExp());
2313:       assertFalse(node4.isTrue());
2314:       assertEquals(4079617, node4.getSourcePosition());
2315:       assertFalse(node4.isTry());
2316:       assertFalse(node4.isScript());
2317:       assertEquals(46, node4.getType());
2318:       assertFalse(node4.isLabelName());
2319:       assertFalse(node4.isStringKey());
2320:       assertFalse(node4.isGetterDef());
2321:       assertFalse(node4.isNumber());
2322:       assertFalse(node4.isVar());
2323:       assertFalse(node4.isParamList());
2324:       assertFalse(node4.isLabel());
2325:       assertFalse(node4.isSwitch());
2326:       assertFalse(node4.isArrayLit());
2327:       assertFalse(node0.isInstanceOf());
2328:       assertFalse(node0.isGetProp());
2329:       assertFalse(node0.isBreak());
2330:       assertFalse(node0.isNot());
2331:       assertFalse(node0.isAnd());
2332:       assertFalse(node0.isObjectLit());
2333:       assertFalse(node0.isCast());
2334:       assertFalse(node0.isSwitch());
2335:       assertFalse(node0.isInc());
2336:       assertFalse(node0.isFalse());
2337:       assertFalse(node0.isThrow());
2338:       assertFalse(node0.isIn());
2339:       assertFalse(node0.isCase());
2340:       assertEquals(152, node0.getLineno());
2341:       assertFalse(node0.isLabelName());
2342:       assertFalse(node0.isIf());
2343:       assertFalse(node0.isNE());
2344:       assertFalse(node0.isGetterDef());
2345:       assertFalse(node0.isTry());
2346:       assertFalse(node0.isBlock());
2347:       assertFalse(node0.isScript());
2348:       assertFalse(node0.hasOneChild());
2349:       assertFalse(node0.isWith());
2350:       assertEquals(39, node0.getType());
2351:       assertFalse(node0.isFor());
2352:       assertFalse(node0.hasMoreThanOneChild());
2353:       assertFalse(node0.isHook());
2354:       assertFalse(node0.isThis());
2355:       assertFalse(node0.isRegExp());
2356:       assertFalse(node0.isParamList());
2357:       assertFalse(node0.isCatch());
2358:       assertFalse(node0.isSetterDef());
2359:       assertFalse(node0.isName());
2360:       assertFalse(node0.isStringKey());
2361:       assertFalse(node0.isTrue());
2362:       assertFalse(node0.isNull());
2363:       assertFalse(node0.isDebugger());
2364:       assertEquals(623683, node0.getSourcePosition());
2365:       assertFalse(node0.isAdd());
2366:       assertFalse(node0.isArrayLit());
2367:       assertFalse(node0.isNew());
2368:       assertFalse(node0.isDo());
2369:       assertFalse(node0.isContinue());
2370:       assertFalse(node0.isDefaultCase());
2371:       assertFalse(node0.isVar());
2372:       assertFalse(node0.isFunction());
2373:       assertEquals(0, node0.getChildCount());
2374:       assertFalse(node0.isLabel());
2375:       assertFalse(node0.isAssignAdd());
2376:       assertFalse(node0.isOr());
2377:       assertFalse(node0.isReturn());
2378:       assertTrue(node0.isNumber());
2379:       assertFalse(node0.isEmpty());
2380:       assertFalse(node0.isDelProp());
2381:       assertEquals(1091, node0.getCharno());
2382:       assertFalse(node0.isString());
2383:       assertFalse(node0.isCall());
2384:       assertFalse(node0.isExprResult());
2385:       assertFalse(node0.isVoid());
2386:       assertFalse(node0.isAssign());
2387:       assertFalse(node0.isGetElem());
2388:       assertFalse(node0.isWhile());
2389:       assertFalse(node0.isTypeOf());
2390:       assertFalse(node0.hasChildren());
2391:       assertFalse(node0.isDec());
2392:       assertFalse(node0.isComma());
2393:       assertFalse(node1.isScript());
2394:       assertFalse(node1.isExprResult());
2395:       assertFalse(node1.isWith());
2396:       assertFalse(node1.isNot());
2397:       assertFalse(node1.isObjectLit());
2398:       assertFalse(node1.hasOneChild());
2399:       assertFalse(node1.isGetProp());
2400:       assertFalse(node1.isNumber());
2401:       assertEquals(2, node1.getLineno());
2402:       assertFalse(node1.isFalse());
2403:       assertFalse(node1.isLabel());
2404:       assertFalse(node1.isCast());
2405:       assertFalse(node1.isAnd());
2406:       assertFalse(node1.isLabelName());
2407:       assertFalse(node1.isSwitch());
2408:       assertFalse(node1.isWhile());
2409:       assertFalse(node1.isString());
2410:       assertFalse(node1.isReturn());
2411:       assertFalse(node1.isVar());
2412:       assertFalse(node1.isAdd());
2413:       assertFalse(node1.isNew());
2414:       assertFalse(node1.isDo());
2415:       assertFalse(node1.isAssignAdd());
2416:       assertFalse(node1.isDec());
2417:       assertFalse(node1.hasChildren());
2418:       assertFalse(node1.isBreak());
2419:       assertFalse(node1.isEmpty());
2420:       assertFalse(node1.isNull());
2421:       assertFalse(node1.isOr());
2422:       assertFalse(node1.isAssign());
2423:       assertFalse(node1.isComma());
2424:       assertFalse(node1.isTypeOf());
2425:       assertFalse(node1.isCall());
2426:       assertFalse(node1.isGetElem());
2427:       assertFalse(node1.isName());
2428:       assertFalse(node1.isDelProp());
2429:       assertFalse(node1.isVoid());
2430:       assertFalse(node1.isDefaultCase());
2431:       assertEquals(2, node1.getCharno());
2432:       assertFalse(node1.isTrue());
2433:       assertFalse(node1.isDebugger());
2434:       assertFalse(node1.isRegExp());
2435:       assertFalse(node1.isFunction());
2436:       assertEquals(0, node1.getChildCount());
2437:       assertFalse(node1.isTry());
2438:       assertFalse(node1.isGetterDef());
2439:       assertFalse(node1.isArrayLit());
2440:       assertFalse(node1.isStringKey());
2441:       assertFalse(node1.isParamList());
2442:       assertFalse(node1.isInc());
2443:       assertFalse(node1.isContinue());
2444:       assertFalse(node1.hasMoreThanOneChild());
2445:       assertFalse(node1.isIn());
2446:       assertFalse(node1.isHook());
2447:       assertEquals((-432), node1.getType());
2448:       assertFalse(node1.isBlock());
2449:       assertFalse(node1.isThrow());
2450:       assertFalse(node1.isCase());
2451:       assertFalse(node1.isIf());
2452:       assertFalse(node1.isThis());
2453:       assertFalse(node1.isNE());
2454:       assertFalse(node1.isSetterDef());
2455:       assertFalse(node1.isFor());
2456:       assertEquals(8194, node1.getSourcePosition());
2457:       assertFalse(node1.isInstanceOf());
2458:       assertFalse(node1.isCatch());
2459:       assertFalse(node2.isNE());
2460:       assertFalse(node2.isGetterDef());
2461:       assertFalse(node2.isDelProp());
2462:       assertFalse(node2.isIf());
2463:       assertFalse(node2.isEmpty());
2464:       assertTrue(node2.isNumber());
2465:       assertFalse(node2.isFor());
2466:       assertFalse(node2.isRegExp());
2467:       assertFalse(node2.isVoid());
2468:       assertFalse(node2.isDefaultCase());
2469:       assertFalse(node2.isInc());
2470:       assertFalse(node2.isIn());
2471:       assertFalse(node2.isTrue());
2472:       assertFalse(node2.isNull());
2473:       assertFalse(node2.isComma());
2474:       assertFalse(node2.isName());
2475:       assertFalse(node2.isBreak());
2476:       assertFalse(node2.isCall());
2477:       assertFalse(node2.isGetProp());
2478:       assertFalse(node2.isSetterDef());
2479:       assertFalse(node2.isFalse());
2480:       assertFalse(node2.isThrow());
2481:       assertEquals(1091, node2.getCharno());
2482:       assertFalse(node2.isWhile());
2483:       assertFalse(node2.isString());
2484:       assertFalse(node2.isFunction());
2485:       assertFalse(node2.isAnd());
2486:       assertFalse(node2.isObjectLit());
2487:       assertFalse(node2.isNot());
2488:       assertFalse(node2.isDebugger());
2489:       assertFalse(node2.isTypeOf());
2490:       assertFalse(node2.isDec());
2491:       assertFalse(node2.isLabelName());
2492:       assertFalse(node2.isGetElem());
2493:       assertFalse(node2.hasOneChild());
2494:       assertFalse(node2.isCast());
2495:       assertFalse(node2.isContinue());
2496:       assertFalse(node2.hasMoreThanOneChild());
2497:       assertFalse(node2.isLabel());
2498:       assertFalse(node2.isAssignAdd());
2499:       assertFalse(node2.isAssign());
2500:       assertFalse(node2.hasChildren());
2501:       assertEquals(39, node2.getType());
2502:       assertFalse(node2.isReturn());
2503:       assertFalse(node2.isWith());
2504:       assertFalse(node2.isAdd());
2505:       assertFalse(node2.isDo());
2506:       
2507:       boolean boolean8 = node4.isNew();
2508:       assertFalse(node4.equals((Object)node2));
2509:       assertFalse(node4.equals((Object)node1));
2510:       assertFalse(node4.equals((Object)node0));
2511:       assertFalse(node4.equals((Object)node3));
2512:       assertFalse(node0.equals((Object)node3));
2513:       assertFalse(node0.equals((Object)node4));
2514:       assertFalse(node0.equals((Object)node1));
2515:       assertFalse(node1.equals((Object)node4));
2516:       assertFalse(node1.equals((Object)node2));
2517:       assertFalse(node1.equals((Object)node0));
2518:       assertFalse(node1.equals((Object)node3));
2519:       assertTrue(boolean8 == boolean3);
2520:       assertTrue(boolean8 == boolean7);
2521:       assertTrue(boolean8 == boolean2);
2522:       assertTrue(boolean8 == boolean6);
2523:       assertTrue(boolean8 == boolean0);
2524:       assertTrue(boolean8 == boolean5);
2525:       assertTrue(boolean8 == boolean4);
2526:       assertTrue(boolean8 == boolean1);
2527:       assertFalse(node2.equals((Object)node3));
2528:       assertFalse(node2.equals((Object)node1));
2529:       assertFalse(node2.equals((Object)node4));
2530:       assertFalse(boolean8);
2531:       assertNotSame(node4, node1);
2532:       assertSame(node0, node2);
2533:       assertNotSame(node0, node3);
2534:       assertNotSame(node1, node4);
2535:       assertNotSame(node2, node3);
2536:       assertSame(node2, node0);
2537:       
2538:       node0.setWasEmptyNode(false);
2539:       assertFalse(node0.equals((Object)node3));
2540:       assertFalse(node0.equals((Object)node4));
2541:       assertFalse(node0.equals((Object)node1));
2542:       assertSame(node0, node2);
2543:       assertNotSame(node0, node3);
2544:   }
2545: }
RegularFileObject[/tmp/EvoSuite_141_1629223127413/com/google/javascript/rhino/Node_141_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:47 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_141_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_141_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_141_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.SimpleErrorReporter",
258:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
259:       "com.google.common.base.Joiner",
260:       "com.google.common.base.Preconditions",
261:       "com.google.common.base.Joiner$1",
262:       "com.google.common.collect.Collections2",
263:       "com.google.common.base.Joiner$MapJoiner",
264:       "com.google.common.collect.Maps",
265:       "com.google.common.collect.AbstractMultimap",
266:       "com.google.common.collect.AbstractMapBasedMultimap",
267:       "com.google.common.collect.AbstractSetMultimap",
268:       "com.google.common.collect.LinkedHashMultimap",
269:       "com.google.common.collect.AbstractMapEntry",
270:       "com.google.common.collect.ImmutableEntry",
271:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
272:       "com.google.common.collect.AbstractListMultimap",
273:       "com.google.common.collect.ArrayListMultimap",
274:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
275:       "com.google.common.collect.ImmutableCollection",
276:       "com.google.common.collect.RegularImmutableList",
277:       "com.google.common.collect.ObjectArrays",
278:       "com.google.common.collect.ImmutableList",
279:       "com.google.javascript.rhino.jstype.ModificationVisitor",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
281:       "com.google.common.collect.ImmutableCollection$Builder",
282:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
283:       "com.google.common.collect.ImmutableList$Builder",
284:       "com.google.common.collect.UnmodifiableIterator",
285:       "com.google.common.collect.UnmodifiableListIterator",
286:       "com.google.common.collect.Iterators$1",
287:       "com.google.common.collect.Iterators$2",
288:       "com.google.common.collect.Iterators",
289:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
290:       "com.google.javascript.rhino.jstype.JSType$1",
291:       "com.google.javascript.rhino.jstype.JSType",
292:       "com.google.javascript.rhino.jstype.ObjectType",
293:       "com.google.javascript.rhino.jstype.ProxyObjectType",
294:       "com.google.javascript.rhino.jstype.TemplateType",
295:       "com.google.javascript.rhino.jstype.ValueType",
296:       "com.google.javascript.rhino.jstype.BooleanType",
297:       "com.google.javascript.rhino.jstype.NullType",
298:       "com.google.javascript.rhino.jstype.NumberType",
299:       "com.google.javascript.rhino.jstype.StringType",
300:       "com.google.javascript.rhino.jstype.UnknownType",
301:       "com.google.javascript.rhino.jstype.VoidType",
302:       "com.google.javascript.rhino.jstype.AllType",
303:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
304:       "com.google.common.collect.ImmutableMap",
305:       "com.google.common.collect.ImmutableBiMap",
306:       "com.google.common.collect.EmptyImmutableBiMap",
307:       "com.google.javascript.rhino.jstype.PropertyMap$1",
308:       "com.google.javascript.rhino.jstype.PropertyMap",
309:       "com.google.javascript.rhino.jstype.FunctionType",
310:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
311:       "com.google.javascript.rhino.Token",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.JSDocInfo",
330:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
331:       "com.google.common.collect.Sets",
332:       "com.google.common.base.Objects",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
339:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
340:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
341:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.common.collect.Platform",
349:       "com.google.common.collect.Iterables",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.NamedType",
359:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
360:       "com.google.javascript.rhino.jstype.JSType$2",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 17:58:48.166 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

Node node0 = Node.newNumber((double) (-432), 152, 1091);
assertNotNull(node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());

Node node1 = new Node((-432), node0, node0, node0, 2, 2);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertEquals(2, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertEquals(2, node1.getCharno());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertEquals((-432), node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFor());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());

boolean boolean0 = node1.isCast();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertEquals(2, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertEquals(2, node1.getCharno());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertEquals((-432), node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFor());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());

boolean boolean1 = node1.isFromExterns();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertEquals(2, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertEquals(2, node1.getCharno());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertEquals((-432), node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFor());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());

boolean boolean2 = node0.isVoid();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());

MockFile mockFile0 = new MockFile("SMHqiFE ");
assertNotNull(mockFile0);

MockFile mockFile1 = new MockFile(mockFile0, "SMHqiFE ");
assertFalse(mockFile1.equals((Object)mockFile0));
assertNotNull(mockFile1);

Node node2 = node0.detachFromParent();
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertTrue(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertEquals(1091, node2.getCharno());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isFunction());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertEquals(39, node2.getType());
assertFalse(node2.isReturn());
assertFalse(node2.isWith());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isExprResult());
assertEquals(623683, node2.getSourcePosition());
assertEquals(152, node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());

node2.setWasEmptyNode(false);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertTrue(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertEquals(1091, node2.getCharno());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isFunction());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertEquals(39, node2.getType());
assertFalse(node2.isReturn());
assertFalse(node2.isWith());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isExprResult());
assertEquals(623683, node2.getSourcePosition());
assertEquals(152, node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node2));
assertNotNull(iterable0);
assertSame(node0, node2);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());

boolean boolean3 = node1.isVoid();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);
assertSame(node0, node2);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertEquals(2, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertEquals(2, node1.getCharno());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertEquals((-432), node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFor());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());

Node node3 = node0.cloneTree();
assertFalse(node0.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertNotNull(node3);
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node3, node0);
assertNotSame(node3, node2);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertTrue(node3.isNumber());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDebugger());
assertFalse(node3.isScript());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isTry());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCast());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isIn());
assertEquals(623683, node3.getSourcePosition());
assertEquals(152, node3.getLineno());
assertEquals(1091, node3.getCharno());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isVar());
assertFalse(node3.isCall());
assertFalse(node3.isContinue());
assertFalse(node3.isLabel());
assertEquals(39, node3.getType());
assertFalse(node3.isBlock());
assertFalse(node3.isReturn());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isArrayLit());
assertFalse(node3.isAssign());
assertEquals(0, node3.getChildCount());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isComma());
assertFalse(node3.isNull());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isOr());

boolean boolean4 = node1.isDebugger();
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4);
assertSame(node0, node2);
assertNotSame(node0, node3);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertEquals(2, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertEquals(2, node1.getCharno());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertEquals((-432), node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFor());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());

boolean boolean5 = node1.hasChildren();
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertFalse(boolean5);
assertSame(node0, node2);
assertNotSame(node0, node3);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertEquals(2, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertEquals(2, node1.getCharno());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertEquals((-432), node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFor());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());

Node node4 = new Node(46, node2, node1, node0, node2, 996, 1);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertNotNull(node4);
assertFalse(node4.isCase());
assertFalse(node4.isString());
assertEquals(1, node4.getChildCount());
assertFalse(node4.isIn());
assertFalse(node4.isInc());
assertFalse(node4.isFor());
assertFalse(node4.isEmpty());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isNE());
assertFalse(node4.isComma());
assertTrue(node4.hasOneChild());
assertFalse(node4.isHook());
assertFalse(node4.isThis());
assertTrue(node4.hasChildren());
assertFalse(node4.isVoid());
assertEquals(996, node4.getLineno());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isBreak());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertFalse(node4.isGetProp());
assertFalse(node4.isSetterDef());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isFunction());
assertFalse(node4.isCast());
assertFalse(node4.isDo());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.hasMoreThanOneChild());
assertEquals(1, node4.getCharno());
assertFalse(node4.isBlock());
assertFalse(node4.isReturn());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isName());
assertFalse(node4.isAssign());
assertFalse(node4.isNull());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isCatch());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertFalse(node4.isWith());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isRegExp());
assertFalse(node4.isTrue());
assertEquals(4079617, node4.getSourcePosition());
assertFalse(node4.isTry());
assertFalse(node4.isScript());
assertEquals(46, node4.getType());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isVar());
assertFalse(node4.isParamList());
assertFalse(node4.isLabel());
assertFalse(node4.isSwitch());
assertFalse(node4.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertEquals(2, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertEquals(2, node1.getCharno());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertEquals((-432), node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFor());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertTrue(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertEquals(1091, node2.getCharno());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isFunction());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertEquals(39, node2.getType());
assertFalse(node2.isReturn());
assertFalse(node2.isWith());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isExprResult());
assertEquals(623683, node2.getSourcePosition());
assertEquals(152, node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());

boolean boolean6 = node2.isTrue();
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(boolean6);
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node2, node3);
assertSame(node2, node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertTrue(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertEquals(1091, node2.getCharno());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isFunction());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertEquals(39, node2.getType());
assertFalse(node2.isReturn());
assertFalse(node2.isWith());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isExprResult());
assertEquals(623683, node2.getSourcePosition());
assertEquals(152, node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());

boolean boolean7 = node4.isCatch();
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean4);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(boolean7);
assertNotSame(node4, node1);
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node1, node4);
assertNotSame(node2, node3);
assertSame(node2, node0);
assertFalse(node4.isCase());
assertFalse(node4.isString());
assertEquals(1, node4.getChildCount());
assertFalse(node4.isIn());
assertFalse(node4.isInc());
assertFalse(node4.isFor());
assertFalse(node4.isEmpty());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isNE());
assertFalse(node4.isComma());
assertTrue(node4.hasOneChild());
assertFalse(node4.isHook());
assertFalse(node4.isThis());
assertTrue(node4.hasChildren());
assertFalse(node4.isVoid());
assertEquals(996, node4.getLineno());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isBreak());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertFalse(node4.isGetProp());
assertFalse(node4.isSetterDef());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isFunction());
assertFalse(node4.isCast());
assertFalse(node4.isDo());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.hasMoreThanOneChild());
assertEquals(1, node4.getCharno());
assertFalse(node4.isBlock());
assertFalse(node4.isReturn());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isName());
assertFalse(node4.isAssign());
assertFalse(node4.isNull());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isCatch());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertFalse(node4.isWith());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isRegExp());
assertFalse(node4.isTrue());
assertEquals(4079617, node4.getSourcePosition());
assertFalse(node4.isTry());
assertFalse(node4.isScript());
assertEquals(46, node4.getType());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isVar());
assertFalse(node4.isParamList());
assertFalse(node4.isLabel());
assertFalse(node4.isSwitch());
assertFalse(node4.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertEquals(2, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertEquals(2, node1.getCharno());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertEquals((-432), node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFor());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertTrue(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertEquals(1091, node2.getCharno());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isFunction());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertEquals(39, node2.getType());
assertFalse(node2.isReturn());
assertFalse(node2.isWith());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isExprResult());
assertEquals(623683, node2.getSourcePosition());
assertEquals(152, node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());

int int0 = node4.getIndexOfChild(node2);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertEquals(0, int0);
assertNotSame(node4, node1);
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node1, node4);
assertNotSame(node2, node3);
assertSame(node2, node0);
assertFalse(node4.isCase());
assertFalse(node4.isString());
assertEquals(1, node4.getChildCount());
assertFalse(node4.isIn());
assertFalse(node4.isInc());
assertFalse(node4.isFor());
assertFalse(node4.isEmpty());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isNE());
assertFalse(node4.isComma());
assertTrue(node4.hasOneChild());
assertFalse(node4.isHook());
assertFalse(node4.isThis());
assertTrue(node4.hasChildren());
assertFalse(node4.isVoid());
assertEquals(996, node4.getLineno());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isBreak());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertFalse(node4.isGetProp());
assertFalse(node4.isSetterDef());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isFunction());
assertFalse(node4.isCast());
assertFalse(node4.isDo());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.hasMoreThanOneChild());
assertEquals(1, node4.getCharno());
assertFalse(node4.isBlock());
assertFalse(node4.isReturn());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isName());
assertFalse(node4.isAssign());
assertFalse(node4.isNull());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isCatch());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertFalse(node4.isWith());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isRegExp());
assertFalse(node4.isTrue());
assertEquals(4079617, node4.getSourcePosition());
assertFalse(node4.isTry());
assertFalse(node4.isScript());
assertEquals(46, node4.getType());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isVar());
assertFalse(node4.isParamList());
assertFalse(node4.isLabel());
assertFalse(node4.isSwitch());
assertFalse(node4.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals(152, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(623683, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertEquals(1091, node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isNumber());
assertEquals(2, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertEquals(2, node1.getCharno());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertEquals((-432), node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFor());
assertEquals(8194, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertTrue(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertEquals(1091, node2.getCharno());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isFunction());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertEquals(39, node2.getType());
assertFalse(node2.isReturn());
assertFalse(node2.isWith());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());

boolean boolean8 = node4.isNew();
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean6);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean5);
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean1);
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(boolean8);
assertNotSame(node4, node1);
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node1, node4);
assertNotSame(node2, node3);
assertSame(node2, node0);

node0.setWasEmptyNode(false);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertSame(node0, node2);
assertNotSame(node0, node3);


[MASTER] 17:58:51.888 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_157_1629223131443/com/google/javascript/rhino/Node_157_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_157_1629223131443/com/google/javascript/rhino/Node_157_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:51.888 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:51.888 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:51.889 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 648
[MASTER] 17:58:51.890 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_157_1629223131443/com/google/javascript/rhino/Node_157_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_157_tmp__ESTest extends Node_157_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(124, "");
21:       assertNotNull(node0);
22:       assertFalse(node0.isBlock());
23:       assertFalse(node0.isAdd());
24:       assertFalse(node0.isDo());
25:       assertFalse(node0.isNew());
26:       assertFalse(node0.isContinue());
27:       assertFalse(node0.isCall());
28:       assertFalse(node0.hasMoreThanOneChild());
29:       assertFalse(node0.isVar());
30:       assertFalse(node0.isWhile());
31:       assertFalse(node0.isReturn());
32:       assertFalse(node0.isLabel());
33:       assertTrue(node0.isEmpty());
34:       assertFalse(node0.isSetterDef());
35:       assertFalse(node0.isAssignAdd());
36:       assertEquals((-1), node0.getLineno());
37:       assertFalse(node0.isName());
38:       assertFalse(node0.isNull());
39:       assertFalse(node0.isOr());
40:       assertFalse(node0.isVoid());
41:       assertFalse(node0.isTrue());
42:       assertFalse(node0.isFunction());
43:       assertFalse(node0.isExprResult());
44:       assertFalse(node0.isGetElem());
45:       assertFalse(node0.isCast());
46:       assertFalse(node0.hasChildren());
47:       assertFalse(node0.isTypeOf());
48:       assertFalse(node0.isAssign());
49:       assertFalse(node0.isDec());
50:       assertFalse(node0.isGetProp());
51:       assertFalse(node0.isAnd());
52:       assertFalse(node0.isObjectLit());
53:       assertFalse(node0.isString());
54:       assertFalse(node0.isNot());
55:       assertEquals((-1), node0.getSourcePosition());
56:       assertFalse(node0.isDebugger());
57:       assertEquals((-1), node0.getCharno());
58:       assertFalse(node0.isInc());
59:       assertFalse(node0.isSwitch());
60:       assertEquals(124, node0.getType());
61:       assertFalse(node0.isCase());
62:       assertFalse(node0.isThrow());
63:       assertFalse(node0.isFalse());
64:       assertFalse(node0.isHook());
65:       assertFalse(node0.isComma());
66:       assertFalse(node0.isNE());
67:       assertFalse(node0.isIf());
68:       assertFalse(node0.isDelProp());
69:       assertFalse(node0.isBreak());
70:       assertFalse(node0.isIn());
71:       assertFalse(node0.isScript());
72:       assertFalse(node0.isDefaultCase());
73:       assertFalse(node0.isTry());
74:       assertFalse(node0.hasOneChild());
75:       assertFalse(node0.isArrayLit());
76:       assertFalse(node0.isWith());
77:       assertFalse(node0.isFor());
78:       assertFalse(node0.isCatch());
79:       assertFalse(node0.isInstanceOf());
80:       assertEquals(0, node0.getChildCount());
81:       assertFalse(node0.isRegExp());
82:       assertFalse(node0.isThis());
83:       assertFalse(node0.isParamList());
84:       assertFalse(node0.isLabelName());
85:       assertFalse(node0.isStringKey());
86:       assertFalse(node0.isGetterDef());
87:       assertFalse(node0.isNumber());
88:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
89:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
90:       assertEquals(53, Node.INPUT_ID);
91:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
92:       assertEquals(56, Node.CHANGE_TIME);
93:       assertEquals(43, Node.IS_CONSTANT_NAME);
94:       assertEquals(36, Node.QUOTED_PROP);
95:       assertEquals(48, Node.DIRECTIVES);
96:       assertEquals(37, Node.OPT_ARG_NAME);
97:       assertEquals(32, Node.INCRDECR_PROP);
98:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
99:       assertEquals(4095, Node.COLUMN_MASK);
100:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
101:       assertEquals(1, Node.DECR_FLAG);
102:       assertEquals(12, Node.COLUMN_BITS);
103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
104:       assertEquals(54, Node.SLASH_V);
105:       assertEquals(52, Node.LENGTH);
106:       assertEquals(15, Node.NO_SIDE_EFFECTS);
107:       assertEquals(40, Node.ORIGINALNAME_PROP);
108:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
109:       assertEquals(49, Node.DIRECT_EVAL);
110:       assertEquals(50, Node.FREE_CALL);
111:       assertEquals(51, Node.STATIC_SOURCE_FILE);
112:       assertEquals(46, Node.IS_NAMESPACE);
113:       assertEquals(57, Node.REFLECTED_OBJECT);
114:       assertEquals(2, Node.POST_FLAG);
115:       assertEquals(8, Node.FLAG_NO_THROWS);
116:       assertEquals(55, Node.INFERRED_FUNCTION);
117:       assertEquals(39, Node.EMPTY_BLOCK);
118:       assertEquals(29, Node.JSDOC_INFO_PROP);
119:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
120:       assertEquals(30, Node.VAR_ARGS_NAME);
121:       assertEquals(57, Node.LAST_PROP);
122:       assertEquals(47, Node.IS_DISPATCHER);
123:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
124:       
125:       Node node1 = new Node(124, node0);
126:       assertFalse(node1.equals((Object)node0));
127:       assertNotNull(node1);
128:       assertFalse(node0.isBlock());
129:       assertFalse(node0.isAdd());
130:       assertFalse(node0.isDo());
131:       assertFalse(node0.isNew());
132:       assertFalse(node0.isContinue());
133:       assertFalse(node0.isCall());
134:       assertFalse(node0.hasMoreThanOneChild());
135:       assertFalse(node0.isVar());
136:       assertFalse(node0.isWhile());
137:       assertFalse(node0.isReturn());
138:       assertFalse(node0.isLabel());
139:       assertTrue(node0.isEmpty());
140:       assertFalse(node0.isSetterDef());
141:       assertFalse(node0.isAssignAdd());
142:       assertEquals((-1), node0.getLineno());
143:       assertFalse(node0.isName());
144:       assertFalse(node0.isNull());
145:       assertFalse(node0.isOr());
146:       assertFalse(node0.isVoid());
147:       assertFalse(node0.isTrue());
148:       assertFalse(node0.isFunction());
149:       assertFalse(node0.isExprResult());
150:       assertFalse(node0.isGetElem());
151:       assertFalse(node0.isCast());
152:       assertFalse(node0.hasChildren());
153:       assertFalse(node0.isTypeOf());
154:       assertFalse(node0.isAssign());
155:       assertFalse(node0.isDec());
156:       assertFalse(node0.isGetProp());
157:       assertFalse(node0.isAnd());
158:       assertFalse(node0.isObjectLit());
159:       assertFalse(node0.isString());
160:       assertFalse(node0.isNot());
161:       assertEquals((-1), node0.getSourcePosition());
162:       assertFalse(node0.isDebugger());
163:       assertEquals((-1), node0.getCharno());
164:       assertFalse(node0.isInc());
165:       assertFalse(node0.isSwitch());
166:       assertEquals(124, node0.getType());
167:       assertFalse(node0.isCase());
168:       assertFalse(node0.isThrow());
169:       assertFalse(node0.isFalse());
170:       assertFalse(node0.isHook());
171:       assertFalse(node0.isComma());
172:       assertFalse(node0.isNE());
173:       assertFalse(node0.isIf());
174:       assertFalse(node0.isDelProp());
175:       assertFalse(node0.isBreak());
176:       assertFalse(node0.isIn());
177:       assertFalse(node0.isScript());
178:       assertFalse(node0.isDefaultCase());
179:       assertFalse(node0.isTry());
180:       assertFalse(node0.hasOneChild());
181:       assertFalse(node0.isArrayLit());
182:       assertFalse(node0.isWith());
183:       assertFalse(node0.isFor());
184:       assertFalse(node0.isCatch());
185:       assertFalse(node0.isInstanceOf());
186:       assertEquals(0, node0.getChildCount());
187:       assertFalse(node0.isRegExp());
188:       assertFalse(node0.isThis());
189:       assertFalse(node0.isParamList());
190:       assertFalse(node0.isLabelName());
191:       assertFalse(node0.isStringKey());
192:       assertFalse(node0.isGetterDef());
193:       assertFalse(node0.isNumber());
194:       assertFalse(node1.isCatch());
195:       assertFalse(node1.isFunction());
196:       assertFalse(node1.isRegExp());
197:       assertFalse(node1.isSetterDef());
198:       assertFalse(node1.isDefaultCase());
199:       assertFalse(node1.isTry());
200:       assertFalse(node1.isName());
201:       assertTrue(node1.hasOneChild());
202:       assertFalse(node1.isCall());
203:       assertFalse(node1.isFor());
204:       assertFalse(node1.isNull());
205:       assertFalse(node1.isTrue());
206:       assertFalse(node1.isNE());
207:       assertTrue(node1.hasChildren());
208:       assertFalse(node1.isIf());
209:       assertFalse(node1.isDelProp());
210:       assertFalse(node1.isVoid());
211:       assertFalse(node1.isContinue());
212:       assertFalse(node1.isWhile());
213:       assertFalse(node1.isString());
214:       assertFalse(node1.isIn());
215:       assertTrue(node1.isEmpty());
216:       assertFalse(node1.isInc());
217:       assertFalse(node1.isReturn());
218:       assertFalse(node1.isFalse());
219:       assertFalse(node1.isThrow());
220:       assertFalse(node1.isCast());
221:       assertEquals((-1), node1.getSourcePosition());
222:       assertFalse(node1.isDebugger());
223:       assertFalse(node1.isAnd());
224:       assertFalse(node1.isInstanceOf());
225:       assertFalse(node1.isWith());
226:       assertFalse(node1.isObjectLit());
227:       assertFalse(node1.isNot());
228:       assertFalse(node1.isGetProp());
229:       assertFalse(node1.isThis());
230:       assertFalse(node1.isScript());
231:       assertFalse(node1.isGetElem());
232:       assertFalse(node1.isHook());
233:       assertFalse(node1.isDec());
234:       assertFalse(node1.isComma());
235:       assertFalse(node1.isAssign());
236:       assertFalse(node1.isTypeOf());
237:       assertFalse(node1.isExprResult());
238:       assertEquals(124, node1.getType());
239:       assertFalse(node1.isBreak());
240:       assertEquals((-1), node1.getLineno());
241:       assertFalse(node1.isCase());
242:       assertEquals(1, node1.getChildCount());
243:       assertFalse(node1.hasMoreThanOneChild());
244:       assertFalse(node1.isOr());
245:       assertFalse(node1.isBlock());
246:       assertFalse(node1.isNew());
247:       assertFalse(node1.isLabel());
248:       assertFalse(node1.isAssignAdd());
249:       assertFalse(node1.isAdd());
250:       assertFalse(node1.isDo());
251:       assertFalse(node1.isStringKey());
252:       assertFalse(node1.isVar());
253:       assertFalse(node1.isNumber());
254:       assertFalse(node1.isGetterDef());
255:       assertEquals((-1), node1.getCharno());
256:       assertFalse(node1.isParamList());
257:       assertFalse(node1.isArrayLit());
258:       assertFalse(node1.isSwitch());
259:       assertFalse(node1.isLabelName());
260:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
261:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
262:       assertEquals(53, Node.INPUT_ID);
263:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
264:       assertEquals(56, Node.CHANGE_TIME);
265:       assertEquals(43, Node.IS_CONSTANT_NAME);
266:       assertEquals(36, Node.QUOTED_PROP);
267:       assertEquals(48, Node.DIRECTIVES);
268:       assertEquals(37, Node.OPT_ARG_NAME);
269:       assertEquals(32, Node.INCRDECR_PROP);
270:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
271:       assertEquals(4095, Node.COLUMN_MASK);
272:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
273:       assertEquals(1, Node.DECR_FLAG);
274:       assertEquals(12, Node.COLUMN_BITS);
275:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
276:       assertEquals(54, Node.SLASH_V);
277:       assertEquals(52, Node.LENGTH);
278:       assertEquals(15, Node.NO_SIDE_EFFECTS);
279:       assertEquals(40, Node.ORIGINALNAME_PROP);
280:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
281:       assertEquals(49, Node.DIRECT_EVAL);
282:       assertEquals(50, Node.FREE_CALL);
283:       assertEquals(51, Node.STATIC_SOURCE_FILE);
284:       assertEquals(46, Node.IS_NAMESPACE);
285:       assertEquals(57, Node.REFLECTED_OBJECT);
286:       assertEquals(2, Node.POST_FLAG);
287:       assertEquals(8, Node.FLAG_NO_THROWS);
288:       assertEquals(55, Node.INFERRED_FUNCTION);
289:       assertEquals(39, Node.EMPTY_BLOCK);
290:       assertEquals(29, Node.JSDOC_INFO_PROP);
291:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
292:       assertEquals(30, Node.VAR_ARGS_NAME);
293:       assertEquals(57, Node.LAST_PROP);
294:       assertEquals(47, Node.IS_DISPATCHER);
295:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
296:       assertEquals(30, Node.VAR_ARGS_NAME);
297:       assertEquals(49, Node.DIRECT_EVAL);
298:       assertEquals(1, Node.DECR_FLAG);
299:       assertEquals(57, Node.LAST_PROP);
300:       assertEquals(51, Node.STATIC_SOURCE_FILE);
301:       assertEquals(12, Node.COLUMN_BITS);
302:       assertEquals(46, Node.IS_NAMESPACE);
303:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
304:       assertEquals(54, Node.SLASH_V);
305:       assertEquals(40, Node.ORIGINALNAME_PROP);
306:       assertEquals(37, Node.OPT_ARG_NAME);
307:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
308:       assertEquals(50, Node.FREE_CALL);
309:       assertEquals(32, Node.INCRDECR_PROP);
310:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
311:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
312:       assertEquals(4095, Node.COLUMN_MASK);
313:       assertEquals(43, Node.IS_CONSTANT_NAME);
314:       assertEquals(36, Node.QUOTED_PROP);
315:       assertEquals(48, Node.DIRECTIVES);
316:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
319:       assertEquals(29, Node.JSDOC_INFO_PROP);
320:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
321:       assertEquals(56, Node.CHANGE_TIME);
322:       assertEquals(57, Node.REFLECTED_OBJECT);
323:       assertEquals(2, Node.POST_FLAG);
324:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
325:       assertEquals(47, Node.IS_DISPATCHER);
326:       assertEquals(53, Node.INPUT_ID);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(52, Node.LENGTH);
329:       assertEquals(55, Node.INFERRED_FUNCTION);
330:       assertEquals(39, Node.EMPTY_BLOCK);
331:       assertEquals(15, Node.NO_SIDE_EFFECTS);
332:       
333:       node1.setLineno(124);
334:       assertFalse(node0.equals((Object)node1));
335:       assertFalse(node1.equals((Object)node0));
336:       assertFalse(node0.isBlock());
337:       assertFalse(node0.isAdd());
338:       assertFalse(node0.isDo());
339:       assertFalse(node0.isNew());
340:       assertFalse(node0.isContinue());
341:       assertFalse(node0.isCall());
342:       assertFalse(node0.hasMoreThanOneChild());
343:       assertFalse(node0.isVar());
344:       assertFalse(node0.isWhile());
345:       assertFalse(node0.isReturn());
346:       assertFalse(node0.isLabel());
347:       assertTrue(node0.isEmpty());
348:       assertFalse(node0.isSetterDef());
349:       assertFalse(node0.isAssignAdd());
350:       assertEquals((-1), node0.getLineno());
351:       assertFalse(node0.isName());
352:       assertFalse(node0.isNull());
353:       assertFalse(node0.isOr());
354:       assertFalse(node0.isVoid());
355:       assertFalse(node0.isTrue());
356:       assertFalse(node0.isFunction());
357:       assertFalse(node0.isExprResult());
358:       assertFalse(node0.isGetElem());
359:       assertFalse(node0.isCast());
360:       assertFalse(node0.hasChildren());
361:       assertFalse(node0.isTypeOf());
362:       assertFalse(node0.isAssign());
363:       assertFalse(node0.isDec());
364:       assertFalse(node0.isGetProp());
365:       assertFalse(node0.isAnd());
366:       assertFalse(node0.isObjectLit());
367:       assertFalse(node0.isString());
368:       assertFalse(node0.isNot());
369:       assertEquals((-1), node0.getSourcePosition());
370:       assertFalse(node0.isDebugger());
371:       assertEquals((-1), node0.getCharno());
372:       assertFalse(node0.isInc());
373:       assertFalse(node0.isSwitch());
374:       assertEquals(124, node0.getType());
375:       assertFalse(node0.isCase());
376:       assertFalse(node0.isThrow());
377:       assertFalse(node0.isFalse());
378:       assertFalse(node0.isHook());
379:       assertFalse(node0.isComma());
380:       assertFalse(node0.isNE());
381:       assertFalse(node0.isIf());
382:       assertFalse(node0.isDelProp());
383:       assertFalse(node0.isBreak());
384:       assertFalse(node0.isIn());
385:       assertFalse(node0.isScript());
386:       assertFalse(node0.isDefaultCase());
387:       assertFalse(node0.isTry());
388:       assertFalse(node0.hasOneChild());
389:       assertFalse(node0.isArrayLit());
390:       assertFalse(node0.isWith());
391:       assertFalse(node0.isFor());
392:       assertFalse(node0.isCatch());
393:       assertFalse(node0.isInstanceOf());
394:       assertEquals(0, node0.getChildCount());
395:       assertFalse(node0.isRegExp());
396:       assertFalse(node0.isThis());
397:       assertFalse(node0.isParamList());
398:       assertFalse(node0.isLabelName());
399:       assertFalse(node0.isStringKey());
400:       assertFalse(node0.isGetterDef());
401:       assertFalse(node0.isNumber());
402:       assertFalse(node1.isCatch());
403:       assertEquals(507904, node1.getSourcePosition());
404:       assertFalse(node1.isFunction());
405:       assertFalse(node1.isRegExp());
406:       assertFalse(node1.isSetterDef());
407:       assertFalse(node1.isDefaultCase());
408:       assertFalse(node1.isTry());
409:       assertFalse(node1.isName());
410:       assertTrue(node1.hasOneChild());
411:       assertFalse(node1.isCall());
412:       assertFalse(node1.isFor());
413:       assertFalse(node1.isNull());
414:       assertFalse(node1.isTrue());
415:       assertFalse(node1.isNE());
416:       assertTrue(node1.hasChildren());
417:       assertFalse(node1.isIf());
418:       assertFalse(node1.isDelProp());
419:       assertFalse(node1.isVoid());
420:       assertFalse(node1.isContinue());
421:       assertFalse(node1.isWhile());
422:       assertFalse(node1.isString());
423:       assertFalse(node1.isIn());
424:       assertTrue(node1.isEmpty());
425:       assertFalse(node1.isInc());
426:       assertFalse(node1.isReturn());
427:       assertFalse(node1.isFalse());
428:       assertFalse(node1.isThrow());
429:       assertFalse(node1.isCast());
430:       assertFalse(node1.isDebugger());
431:       assertEquals(124, node1.getLineno());
432:       assertFalse(node1.isAnd());
433:       assertFalse(node1.isInstanceOf());
434:       assertFalse(node1.isWith());
435:       assertFalse(node1.isObjectLit());
436:       assertFalse(node1.isNot());
437:       assertFalse(node1.isGetProp());
438:       assertFalse(node1.isThis());
439:       assertFalse(node1.isScript());
440:       assertFalse(node1.isGetElem());
441:       assertFalse(node1.isHook());
442:       assertFalse(node1.isDec());
443:       assertFalse(node1.isComma());
444:       assertFalse(node1.isAssign());
445:       assertFalse(node1.isTypeOf());
446:       assertEquals(0, node1.getCharno());
447:       assertFalse(node1.isExprResult());
448:       assertEquals(124, node1.getType());
449:       assertFalse(node1.isBreak());
450:       assertFalse(node1.isCase());
451:       assertEquals(1, node1.getChildCount());
452:       assertFalse(node1.hasMoreThanOneChild());
453:       assertFalse(node1.isOr());
454:       assertFalse(node1.isBlock());
455:       assertFalse(node1.isNew());
456:       assertFalse(node1.isLabel());
457:       assertFalse(node1.isAssignAdd());
458:       assertFalse(node1.isAdd());
459:       assertFalse(node1.isDo());
460:       assertFalse(node1.isStringKey());
461:       assertFalse(node1.isVar());
462:       assertFalse(node1.isNumber());
463:       assertFalse(node1.isGetterDef());
464:       assertFalse(node1.isParamList());
465:       assertFalse(node1.isArrayLit());
466:       assertFalse(node1.isSwitch());
467:       assertFalse(node1.isLabelName());
468:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
469:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
470:       assertEquals(53, Node.INPUT_ID);
471:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
472:       assertEquals(56, Node.CHANGE_TIME);
473:       assertEquals(43, Node.IS_CONSTANT_NAME);
474:       assertEquals(36, Node.QUOTED_PROP);
475:       assertEquals(48, Node.DIRECTIVES);
476:       assertEquals(37, Node.OPT_ARG_NAME);
477:       assertEquals(32, Node.INCRDECR_PROP);
478:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
479:       assertEquals(4095, Node.COLUMN_MASK);
480:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
481:       assertEquals(1, Node.DECR_FLAG);
482:       assertEquals(12, Node.COLUMN_BITS);
483:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
484:       assertEquals(54, Node.SLASH_V);
485:       assertEquals(52, Node.LENGTH);
486:       assertEquals(15, Node.NO_SIDE_EFFECTS);
487:       assertEquals(40, Node.ORIGINALNAME_PROP);
488:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
489:       assertEquals(49, Node.DIRECT_EVAL);
490:       assertEquals(50, Node.FREE_CALL);
491:       assertEquals(51, Node.STATIC_SOURCE_FILE);
492:       assertEquals(46, Node.IS_NAMESPACE);
493:       assertEquals(57, Node.REFLECTED_OBJECT);
494:       assertEquals(2, Node.POST_FLAG);
495:       assertEquals(8, Node.FLAG_NO_THROWS);
496:       assertEquals(55, Node.INFERRED_FUNCTION);
497:       assertEquals(39, Node.EMPTY_BLOCK);
498:       assertEquals(29, Node.JSDOC_INFO_PROP);
499:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
500:       assertEquals(30, Node.VAR_ARGS_NAME);
501:       assertEquals(57, Node.LAST_PROP);
502:       assertEquals(47, Node.IS_DISPATCHER);
503:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
504:       assertEquals(30, Node.VAR_ARGS_NAME);
505:       assertEquals(49, Node.DIRECT_EVAL);
506:       assertEquals(1, Node.DECR_FLAG);
507:       assertEquals(57, Node.LAST_PROP);
508:       assertEquals(51, Node.STATIC_SOURCE_FILE);
509:       assertEquals(12, Node.COLUMN_BITS);
510:       assertEquals(46, Node.IS_NAMESPACE);
511:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
512:       assertEquals(54, Node.SLASH_V);
513:       assertEquals(40, Node.ORIGINALNAME_PROP);
514:       assertEquals(37, Node.OPT_ARG_NAME);
515:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
516:       assertEquals(50, Node.FREE_CALL);
517:       assertEquals(32, Node.INCRDECR_PROP);
518:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
519:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
520:       assertEquals(4095, Node.COLUMN_MASK);
521:       assertEquals(43, Node.IS_CONSTANT_NAME);
522:       assertEquals(36, Node.QUOTED_PROP);
523:       assertEquals(48, Node.DIRECTIVES);
524:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
525:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
526:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
527:       assertEquals(29, Node.JSDOC_INFO_PROP);
528:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
529:       assertEquals(56, Node.CHANGE_TIME);
530:       assertEquals(57, Node.REFLECTED_OBJECT);
531:       assertEquals(2, Node.POST_FLAG);
532:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
533:       assertEquals(47, Node.IS_DISPATCHER);
534:       assertEquals(53, Node.INPUT_ID);
535:       assertEquals(8, Node.FLAG_NO_THROWS);
536:       assertEquals(52, Node.LENGTH);
537:       assertEquals(55, Node.INFERRED_FUNCTION);
538:       assertEquals(39, Node.EMPTY_BLOCK);
539:       assertEquals(15, Node.NO_SIDE_EFFECTS);
540:       
541:       node0.setChangeTime(15);
542:       assertFalse(node0.equals((Object)node1));
543:       assertFalse(node0.isBlock());
544:       assertFalse(node0.isAdd());
545:       assertFalse(node0.isDo());
546:       assertFalse(node0.isNew());
547:       assertFalse(node0.isContinue());
548:       assertFalse(node0.isCall());
549:       assertFalse(node0.hasMoreThanOneChild());
550:       assertFalse(node0.isVar());
551:       assertFalse(node0.isWhile());
552:       assertFalse(node0.isReturn());
553:       assertFalse(node0.isLabel());
554:       assertTrue(node0.isEmpty());
555:       assertFalse(node0.isSetterDef());
556:       assertFalse(node0.isAssignAdd());
557:       assertEquals((-1), node0.getLineno());
558:       assertFalse(node0.isName());
559:       assertFalse(node0.isNull());
560:       assertFalse(node0.isOr());
561:       assertFalse(node0.isVoid());
562:       assertFalse(node0.isTrue());
563:       assertFalse(node0.isFunction());
564:       assertFalse(node0.isExprResult());
565:       assertFalse(node0.isGetElem());
566:       assertFalse(node0.isCast());
567:       assertFalse(node0.hasChildren());
568:       assertFalse(node0.isTypeOf());
569:       assertFalse(node0.isAssign());
570:       assertFalse(node0.isDec());
571:       assertFalse(node0.isGetProp());
572:       assertFalse(node0.isAnd());
573:       assertFalse(node0.isObjectLit());
574:       assertFalse(node0.isString());
575:       assertFalse(node0.isNot());
576:       assertEquals((-1), node0.getSourcePosition());
577:       assertFalse(node0.isDebugger());
578:       assertEquals((-1), node0.getCharno());
579:       assertFalse(node0.isInc());
580:       assertFalse(node0.isSwitch());
581:       assertEquals(124, node0.getType());
582:       assertFalse(node0.isCase());
583:       assertFalse(node0.isThrow());
584:       assertFalse(node0.isFalse());
585:       assertFalse(node0.isHook());
586:       assertFalse(node0.isComma());
587:       assertFalse(node0.isNE());
588:       assertFalse(node0.isIf());
589:       assertFalse(node0.isDelProp());
590:       assertFalse(node0.isBreak());
591:       assertFalse(node0.isIn());
592:       assertFalse(node0.isScript());
593:       assertFalse(node0.isDefaultCase());
594:       assertFalse(node0.isTry());
595:       assertFalse(node0.hasOneChild());
596:       assertFalse(node0.isArrayLit());
597:       assertFalse(node0.isWith());
598:       assertFalse(node0.isFor());
599:       assertFalse(node0.isCatch());
600:       assertFalse(node0.isInstanceOf());
601:       assertEquals(0, node0.getChildCount());
602:       assertFalse(node0.isRegExp());
603:       assertFalse(node0.isThis());
604:       assertFalse(node0.isParamList());
605:       assertFalse(node0.isLabelName());
606:       assertFalse(node0.isStringKey());
607:       assertFalse(node0.isGetterDef());
608:       assertFalse(node0.isNumber());
609:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
610:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
611:       assertEquals(53, Node.INPUT_ID);
612:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
613:       assertEquals(56, Node.CHANGE_TIME);
614:       assertEquals(43, Node.IS_CONSTANT_NAME);
615:       assertEquals(36, Node.QUOTED_PROP);
616:       assertEquals(48, Node.DIRECTIVES);
617:       assertEquals(37, Node.OPT_ARG_NAME);
618:       assertEquals(32, Node.INCRDECR_PROP);
619:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
620:       assertEquals(4095, Node.COLUMN_MASK);
621:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
622:       assertEquals(1, Node.DECR_FLAG);
623:       assertEquals(12, Node.COLUMN_BITS);
624:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
625:       assertEquals(54, Node.SLASH_V);
626:       assertEquals(52, Node.LENGTH);
627:       assertEquals(15, Node.NO_SIDE_EFFECTS);
628:       assertEquals(40, Node.ORIGINALNAME_PROP);
629:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
630:       assertEquals(49, Node.DIRECT_EVAL);
631:       assertEquals(50, Node.FREE_CALL);
632:       assertEquals(51, Node.STATIC_SOURCE_FILE);
633:       assertEquals(46, Node.IS_NAMESPACE);
634:       assertEquals(57, Node.REFLECTED_OBJECT);
635:       assertEquals(2, Node.POST_FLAG);
636:       assertEquals(8, Node.FLAG_NO_THROWS);
637:       assertEquals(55, Node.INFERRED_FUNCTION);
638:       assertEquals(39, Node.EMPTY_BLOCK);
639:       assertEquals(29, Node.JSDOC_INFO_PROP);
640:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
641:       assertEquals(30, Node.VAR_ARGS_NAME);
642:       assertEquals(57, Node.LAST_PROP);
643:       assertEquals(47, Node.IS_DISPATCHER);
644:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
645:       
646:       Iterable<Node> iterable0 = node0.children();
647:       assertFalse(node0.equals((Object)node1));
648:       assertFalse(iterable0.contains(node1));
649:       assertNotNull(iterable0);
650:       assertFalse(node0.isBlock());
651:       assertFalse(node0.isAdd());
652:       assertFalse(node0.isDo());
653:       assertFalse(node0.isNew());
654:       assertFalse(node0.isContinue());
655:       assertFalse(node0.isCall());
656:       assertFalse(node0.hasMoreThanOneChild());
657:       assertFalse(node0.isVar());
658:       assertFalse(node0.isWhile());
659:       assertFalse(node0.isReturn());
660:       assertFalse(node0.isLabel());
661:       assertTrue(node0.isEmpty());
662:       assertFalse(node0.isSetterDef());
663:       assertFalse(node0.isAssignAdd());
664:       assertEquals((-1), node0.getLineno());
665:       assertFalse(node0.isName());
666:       assertFalse(node0.isNull());
667:       assertFalse(node0.isOr());
668:       assertFalse(node0.isVoid());
669:       assertFalse(node0.isTrue());
670:       assertFalse(node0.isFunction());
671:       assertFalse(node0.isExprResult());
672:       assertFalse(node0.isGetElem());
673:       assertFalse(node0.isCast());
674:       assertFalse(node0.hasChildren());
675:       assertFalse(node0.isTypeOf());
676:       assertFalse(node0.isAssign());
677:       assertFalse(node0.isDec());
678:       assertFalse(node0.isGetProp());
679:       assertFalse(node0.isAnd());
680:       assertFalse(node0.isObjectLit());
681:       assertFalse(node0.isString());
682:       assertFalse(node0.isNot());
683:       assertEquals((-1), node0.getSourcePosition());
684:       assertFalse(node0.isDebugger());
685:       assertEquals((-1), node0.getCharno());
686:       assertFalse(node0.isInc());
687:       assertFalse(node0.isSwitch());
688:       assertEquals(124, node0.getType());
689:       assertFalse(node0.isCase());
690:       assertFalse(node0.isThrow());
691:       assertFalse(node0.isFalse());
692:       assertFalse(node0.isHook());
693:       assertFalse(node0.isComma());
694:       assertFalse(node0.isNE());
695:       assertFalse(node0.isIf());
696:       assertFalse(node0.isDelProp());
697:       assertFalse(node0.isBreak());
698:       assertFalse(node0.isIn());
699:       assertFalse(node0.isScript());
700:       assertFalse(node0.isDefaultCase());
701:       assertFalse(node0.isTry());
702:       assertFalse(node0.hasOneChild());
703:       assertFalse(node0.isArrayLit());
704:       assertFalse(node0.isWith());
705:       assertFalse(node0.isFor());
706:       assertFalse(node0.isCatch());
707:       assertFalse(node0.isInstanceOf());
708:       assertEquals(0, node0.getChildCount());
709:       assertFalse(node0.isRegExp());
710:       assertFalse(node0.isThis());
711:       assertFalse(node0.isParamList());
712:       assertFalse(node0.isLabelName());
713:       assertFalse(node0.isStringKey());
714:       assertFalse(node0.isGetterDef());
715:       assertFalse(node0.isNumber());
716:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
717:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
718:       assertEquals(53, Node.INPUT_ID);
719:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
720:       assertEquals(56, Node.CHANGE_TIME);
721:       assertEquals(43, Node.IS_CONSTANT_NAME);
722:       assertEquals(36, Node.QUOTED_PROP);
723:       assertEquals(48, Node.DIRECTIVES);
724:       assertEquals(37, Node.OPT_ARG_NAME);
725:       assertEquals(32, Node.INCRDECR_PROP);
726:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
727:       assertEquals(4095, Node.COLUMN_MASK);
728:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
729:       assertEquals(1, Node.DECR_FLAG);
730:       assertEquals(12, Node.COLUMN_BITS);
731:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
732:       assertEquals(54, Node.SLASH_V);
733:       assertEquals(52, Node.LENGTH);
734:       assertEquals(15, Node.NO_SIDE_EFFECTS);
735:       assertEquals(40, Node.ORIGINALNAME_PROP);
736:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
737:       assertEquals(49, Node.DIRECT_EVAL);
738:       assertEquals(50, Node.FREE_CALL);
739:       assertEquals(51, Node.STATIC_SOURCE_FILE);
740:       assertEquals(46, Node.IS_NAMESPACE);
741:       assertEquals(57, Node.REFLECTED_OBJECT);
742:       assertEquals(2, Node.POST_FLAG);
743:       assertEquals(8, Node.FLAG_NO_THROWS);
744:       assertEquals(55, Node.INFERRED_FUNCTION);
745:       assertEquals(39, Node.EMPTY_BLOCK);
746:       assertEquals(29, Node.JSDOC_INFO_PROP);
747:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
748:       assertEquals(30, Node.VAR_ARGS_NAME);
749:       assertEquals(57, Node.LAST_PROP);
750:       assertEquals(47, Node.IS_DISPATCHER);
751:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
752:       
753:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
754:       assertFalse(node0.equals((Object)node1));
755:       assertFalse(node1.equals((Object)node0));
756:       assertNotNull(node_NodeMismatch0);
757:       assertFalse(node0.isBlock());
758:       assertFalse(node0.isAdd());
759:       assertFalse(node0.isDo());
760:       assertFalse(node0.isNew());
761:       assertFalse(node0.isContinue());
762:       assertFalse(node0.isCall());
763:       assertFalse(node0.hasMoreThanOneChild());
764:       assertFalse(node0.isVar());
765:       assertFalse(node0.isWhile());
766:       assertFalse(node0.isReturn());
767:       assertFalse(node0.isLabel());
768:       assertTrue(node0.isEmpty());
769:       assertFalse(node0.isSetterDef());
770:       assertFalse(node0.isAssignAdd());
771:       assertEquals((-1), node0.getLineno());
772:       assertFalse(node0.isName());
773:       assertFalse(node0.isNull());
774:       assertFalse(node0.isOr());
775:       assertFalse(node0.isVoid());
776:       assertFalse(node0.isTrue());
777:       assertFalse(node0.isFunction());
778:       assertFalse(node0.isExprResult());
779:       assertFalse(node0.isGetElem());
780:       assertFalse(node0.isCast());
781:       assertFalse(node0.hasChildren());
782:       assertFalse(node0.isTypeOf());
783:       assertFalse(node0.isAssign());
784:       assertFalse(node0.isDec());
785:       assertFalse(node0.isGetProp());
786:       assertFalse(node0.isAnd());
787:       assertFalse(node0.isObjectLit());
788:       assertFalse(node0.isString());
789:       assertFalse(node0.isNot());
790:       assertEquals((-1), node0.getSourcePosition());
791:       assertFalse(node0.isDebugger());
792:       assertEquals((-1), node0.getCharno());
793:       assertFalse(node0.isInc());
794:       assertFalse(node0.isSwitch());
795:       assertEquals(124, node0.getType());
796:       assertFalse(node0.isCase());
797:       assertFalse(node0.isThrow());
798:       assertFalse(node0.isFalse());
799:       assertFalse(node0.isHook());
800:       assertFalse(node0.isComma());
801:       assertFalse(node0.isNE());
802:       assertFalse(node0.isIf());
803:       assertFalse(node0.isDelProp());
804:       assertFalse(node0.isBreak());
805:       assertFalse(node0.isIn());
806:       assertFalse(node0.isScript());
807:       assertFalse(node0.isDefaultCase());
808:       assertFalse(node0.isTry());
809:       assertFalse(node0.hasOneChild());
810:       assertFalse(node0.isArrayLit());
811:       assertFalse(node0.isWith());
812:       assertFalse(node0.isFor());
813:       assertFalse(node0.isCatch());
814:       assertFalse(node0.isInstanceOf());
815:       assertEquals(0, node0.getChildCount());
816:       assertFalse(node0.isRegExp());
817:       assertFalse(node0.isThis());
818:       assertFalse(node0.isParamList());
819:       assertFalse(node0.isLabelName());
820:       assertFalse(node0.isStringKey());
821:       assertFalse(node0.isGetterDef());
822:       assertFalse(node0.isNumber());
823:       assertFalse(node1.isCatch());
824:       assertEquals(507904, node1.getSourcePosition());
825:       assertFalse(node1.isFunction());
826:       assertFalse(node1.isRegExp());
827:       assertFalse(node1.isSetterDef());
828:       assertFalse(node1.isDefaultCase());
829:       assertFalse(node1.isTry());
830:       assertFalse(node1.isName());
831:       assertTrue(node1.hasOneChild());
832:       assertFalse(node1.isCall());
833:       assertFalse(node1.isFor());
834:       assertFalse(node1.isNull());
835:       assertFalse(node1.isTrue());
836:       assertFalse(node1.isNE());
837:       assertTrue(node1.hasChildren());
838:       assertFalse(node1.isIf());
839:       assertFalse(node1.isDelProp());
840:       assertFalse(node1.isVoid());
841:       assertFalse(node1.isContinue());
842:       assertFalse(node1.isWhile());
843:       assertFalse(node1.isString());
844:       assertFalse(node1.isIn());
845:       assertTrue(node1.isEmpty());
846:       assertFalse(node1.isInc());
847:       assertFalse(node1.isReturn());
848:       assertFalse(node1.isFalse());
849:       assertFalse(node1.isThrow());
850:       assertFalse(node1.isCast());
851:       assertFalse(node1.isDebugger());
852:       assertEquals(124, node1.getLineno());
853:       assertFalse(node1.isAnd());
854:       assertFalse(node1.isInstanceOf());
855:       assertFalse(node1.isWith());
856:       assertFalse(node1.isObjectLit());
857:       assertFalse(node1.isNot());
858:       assertFalse(node1.isGetProp());
859:       assertFalse(node1.isThis());
860:       assertFalse(node1.isScript());
861:       assertFalse(node1.isGetElem());
862:       assertFalse(node1.isHook());
863:       assertFalse(node1.isDec());
864:       assertFalse(node1.isComma());
865:       assertFalse(node1.isAssign());
866:       assertFalse(node1.isTypeOf());
867:       assertEquals(0, node1.getCharno());
868:       assertFalse(node1.isExprResult());
869:       assertEquals(124, node1.getType());
870:       assertFalse(node1.isBreak());
871:       assertFalse(node1.isCase());
872:       assertEquals(1, node1.getChildCount());
873:       assertFalse(node1.hasMoreThanOneChild());
874:       assertFalse(node1.isOr());
875:       assertFalse(node1.isBlock());
876:       assertFalse(node1.isNew());
877:       assertFalse(node1.isLabel());
878:       assertFalse(node1.isAssignAdd());
879:       assertFalse(node1.isAdd());
880:       assertFalse(node1.isDo());
881:       assertFalse(node1.isStringKey());
882:       assertFalse(node1.isVar());
883:       assertFalse(node1.isNumber());
884:       assertFalse(node1.isGetterDef());
885:       assertFalse(node1.isParamList());
886:       assertFalse(node1.isArrayLit());
887:       assertFalse(node1.isSwitch());
888:       assertFalse(node1.isLabelName());
889:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
890:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
891:       assertEquals(53, Node.INPUT_ID);
892:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
893:       assertEquals(56, Node.CHANGE_TIME);
894:       assertEquals(43, Node.IS_CONSTANT_NAME);
895:       assertEquals(36, Node.QUOTED_PROP);
896:       assertEquals(48, Node.DIRECTIVES);
897:       assertEquals(37, Node.OPT_ARG_NAME);
898:       assertEquals(32, Node.INCRDECR_PROP);
899:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
900:       assertEquals(4095, Node.COLUMN_MASK);
901:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
902:       assertEquals(1, Node.DECR_FLAG);
903:       assertEquals(12, Node.COLUMN_BITS);
904:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
905:       assertEquals(54, Node.SLASH_V);
906:       assertEquals(52, Node.LENGTH);
907:       assertEquals(15, Node.NO_SIDE_EFFECTS);
908:       assertEquals(40, Node.ORIGINALNAME_PROP);
909:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
910:       assertEquals(49, Node.DIRECT_EVAL);
911:       assertEquals(50, Node.FREE_CALL);
912:       assertEquals(51, Node.STATIC_SOURCE_FILE);
913:       assertEquals(46, Node.IS_NAMESPACE);
914:       assertEquals(57, Node.REFLECTED_OBJECT);
915:       assertEquals(2, Node.POST_FLAG);
916:       assertEquals(8, Node.FLAG_NO_THROWS);
917:       assertEquals(55, Node.INFERRED_FUNCTION);
918:       assertEquals(39, Node.EMPTY_BLOCK);
919:       assertEquals(29, Node.JSDOC_INFO_PROP);
920:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
921:       assertEquals(30, Node.VAR_ARGS_NAME);
922:       assertEquals(57, Node.LAST_PROP);
923:       assertEquals(47, Node.IS_DISPATCHER);
924:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
925:       assertEquals(30, Node.VAR_ARGS_NAME);
926:       assertEquals(49, Node.DIRECT_EVAL);
927:       assertEquals(1, Node.DECR_FLAG);
928:       assertEquals(57, Node.LAST_PROP);
929:       assertEquals(51, Node.STATIC_SOURCE_FILE);
930:       assertEquals(12, Node.COLUMN_BITS);
931:       assertEquals(46, Node.IS_NAMESPACE);
932:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
933:       assertEquals(54, Node.SLASH_V);
934:       assertEquals(40, Node.ORIGINALNAME_PROP);
935:       assertEquals(37, Node.OPT_ARG_NAME);
936:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
937:       assertEquals(50, Node.FREE_CALL);
938:       assertEquals(32, Node.INCRDECR_PROP);
939:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
940:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
941:       assertEquals(4095, Node.COLUMN_MASK);
942:       assertEquals(43, Node.IS_CONSTANT_NAME);
943:       assertEquals(36, Node.QUOTED_PROP);
944:       assertEquals(48, Node.DIRECTIVES);
945:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
946:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
947:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
948:       assertEquals(29, Node.JSDOC_INFO_PROP);
949:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
950:       assertEquals(56, Node.CHANGE_TIME);
951:       assertEquals(57, Node.REFLECTED_OBJECT);
952:       assertEquals(2, Node.POST_FLAG);
953:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
954:       assertEquals(47, Node.IS_DISPATCHER);
955:       assertEquals(53, Node.INPUT_ID);
956:       assertEquals(8, Node.FLAG_NO_THROWS);
957:       assertEquals(52, Node.LENGTH);
958:       assertEquals(55, Node.INFERRED_FUNCTION);
959:       assertEquals(39, Node.EMPTY_BLOCK);
960:       assertEquals(15, Node.NO_SIDE_EFFECTS);
961:       
962:       node1.setLineno(1206);
963:       assertFalse(node0.equals((Object)node1));
964:       assertFalse(node1.equals((Object)node0));
965:       assertFalse(node0.isBlock());
966:       assertFalse(node0.isAdd());
967:       assertFalse(node0.isDo());
968:       assertFalse(node0.isNew());
969:       assertFalse(node0.isContinue());
970:       assertFalse(node0.isCall());
971:       assertFalse(node0.hasMoreThanOneChild());
972:       assertFalse(node0.isVar());
973:       assertFalse(node0.isWhile());
974:       assertFalse(node0.isReturn());
975:       assertFalse(node0.isLabel());
976:       assertTrue(node0.isEmpty());
977:       assertFalse(node0.isSetterDef());
978:       assertFalse(node0.isAssignAdd());
979:       assertEquals((-1), node0.getLineno());
980:       assertFalse(node0.isName());
981:       assertFalse(node0.isNull());
982:       assertFalse(node0.isOr());
983:       assertFalse(node0.isVoid());
984:       assertFalse(node0.isTrue());
985:       assertFalse(node0.isFunction());
986:       assertFalse(node0.isExprResult());
987:       assertFalse(node0.isGetElem());
988:       assertFalse(node0.isCast());
989:       assertFalse(node0.hasChildren());
990:       assertFalse(node0.isTypeOf());
991:       assertFalse(node0.isAssign());
992:       assertFalse(node0.isDec());
993:       assertFalse(node0.isGetProp());
994:       assertFalse(node0.isAnd());
995:       assertFalse(node0.isObjectLit());
996:       assertFalse(node0.isString());
997:       assertFalse(node0.isNot());
998:       assertEquals((-1), node0.getSourcePosition());
999:       assertFalse(node0.isDebugger());
1000:       assertEquals((-1), node0.getCharno());
1001:       assertFalse(node0.isInc());
1002:       assertFalse(node0.isSwitch());
1003:       assertEquals(124, node0.getType());
1004:       assertFalse(node0.isCase());
1005:       assertFalse(node0.isThrow());
1006:       assertFalse(node0.isFalse());
1007:       assertFalse(node0.isHook());
1008:       assertFalse(node0.isComma());
1009:       assertFalse(node0.isNE());
1010:       assertFalse(node0.isIf());
1011:       assertFalse(node0.isDelProp());
1012:       assertFalse(node0.isBreak());
1013:       assertFalse(node0.isIn());
1014:       assertFalse(node0.isScript());
1015:       assertFalse(node0.isDefaultCase());
1016:       assertFalse(node0.isTry());
1017:       assertFalse(node0.hasOneChild());
1018:       assertFalse(node0.isArrayLit());
1019:       assertFalse(node0.isWith());
1020:       assertFalse(node0.isFor());
1021:       assertFalse(node0.isCatch());
1022:       assertFalse(node0.isInstanceOf());
1023:       assertEquals(0, node0.getChildCount());
1024:       assertFalse(node0.isRegExp());
1025:       assertFalse(node0.isThis());
1026:       assertFalse(node0.isParamList());
1027:       assertFalse(node0.isLabelName());
1028:       assertFalse(node0.isStringKey());
1029:       assertFalse(node0.isGetterDef());
1030:       assertFalse(node0.isNumber());
1031:       assertFalse(node1.isCatch());
1032:       assertFalse(node1.isFunction());
1033:       assertEquals(1206, node1.getLineno());
1034:       assertFalse(node1.isRegExp());
1035:       assertFalse(node1.isSetterDef());
1036:       assertFalse(node1.isDefaultCase());
1037:       assertFalse(node1.isTry());
1038:       assertFalse(node1.isName());
1039:       assertTrue(node1.hasOneChild());
1040:       assertFalse(node1.isCall());
1041:       assertFalse(node1.isFor());
1042:       assertFalse(node1.isNull());
1043:       assertFalse(node1.isTrue());
1044:       assertFalse(node1.isNE());
1045:       assertTrue(node1.hasChildren());
1046:       assertFalse(node1.isIf());
1047:       assertFalse(node1.isDelProp());
1048:       assertFalse(node1.isVoid());
1049:       assertFalse(node1.isContinue());
1050:       assertFalse(node1.isWhile());
1051:       assertFalse(node1.isString());
1052:       assertFalse(node1.isIn());
1053:       assertTrue(node1.isEmpty());
1054:       assertFalse(node1.isInc());
1055:       assertFalse(node1.isReturn());
1056:       assertFalse(node1.isFalse());
1057:       assertFalse(node1.isThrow());
1058:       assertFalse(node1.isCast());
1059:       assertFalse(node1.isDebugger());
1060:       assertFalse(node1.isAnd());
1061:       assertFalse(node1.isInstanceOf());
1062:       assertFalse(node1.isWith());
1063:       assertFalse(node1.isObjectLit());
1064:       assertFalse(node1.isNot());
1065:       assertFalse(node1.isGetProp());
1066:       assertFalse(node1.isThis());
1067:       assertFalse(node1.isScript());
1068:       assertFalse(node1.isGetElem());
1069:       assertFalse(node1.isHook());
1070:       assertFalse(node1.isDec());
1071:       assertFalse(node1.isComma());
1072:       assertFalse(node1.isAssign());
1073:       assertFalse(node1.isTypeOf());
1074:       assertEquals(0, node1.getCharno());
1075:       assertFalse(node1.isExprResult());
1076:       assertEquals(124, node1.getType());
1077:       assertFalse(node1.isBreak());
1078:       assertFalse(node1.isCase());
1079:       assertEquals(1, node1.getChildCount());
1080:       assertFalse(node1.hasMoreThanOneChild());
1081:       assertFalse(node1.isOr());
1082:       assertFalse(node1.isBlock());
1083:       assertFalse(node1.isNew());
1084:       assertFalse(node1.isLabel());
1085:       assertFalse(node1.isAssignAdd());
1086:       assertFalse(node1.isAdd());
1087:       assertFalse(node1.isDo());
1088:       assertFalse(node1.isStringKey());
1089:       assertFalse(node1.isVar());
1090:       assertFalse(node1.isNumber());
1091:       assertEquals(4939776, node1.getSourcePosition());
1092:       assertFalse(node1.isGetterDef());
1093:       assertFalse(node1.isParamList());
1094:       assertFalse(node1.isArrayLit());
1095:       assertFalse(node1.isSwitch());
1096:       assertFalse(node1.isLabelName());
1097:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1098:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1099:       assertEquals(53, Node.INPUT_ID);
1100:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1101:       assertEquals(56, Node.CHANGE_TIME);
1102:       assertEquals(43, Node.IS_CONSTANT_NAME);
1103:       assertEquals(36, Node.QUOTED_PROP);
1104:       assertEquals(48, Node.DIRECTIVES);
1105:       assertEquals(37, Node.OPT_ARG_NAME);
1106:       assertEquals(32, Node.INCRDECR_PROP);
1107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1108:       assertEquals(4095, Node.COLUMN_MASK);
1109:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1110:       assertEquals(1, Node.DECR_FLAG);
1111:       assertEquals(12, Node.COLUMN_BITS);
1112:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1113:       assertEquals(54, Node.SLASH_V);
1114:       assertEquals(52, Node.LENGTH);
1115:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1116:       assertEquals(40, Node.ORIGINALNAME_PROP);
1117:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1118:       assertEquals(49, Node.DIRECT_EVAL);
1119:       assertEquals(50, Node.FREE_CALL);
1120:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1121:       assertEquals(46, Node.IS_NAMESPACE);
1122:       assertEquals(57, Node.REFLECTED_OBJECT);
1123:       assertEquals(2, Node.POST_FLAG);
1124:       assertEquals(8, Node.FLAG_NO_THROWS);
1125:       assertEquals(55, Node.INFERRED_FUNCTION);
1126:       assertEquals(39, Node.EMPTY_BLOCK);
1127:       assertEquals(29, Node.JSDOC_INFO_PROP);
1128:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1129:       assertEquals(30, Node.VAR_ARGS_NAME);
1130:       assertEquals(57, Node.LAST_PROP);
1131:       assertEquals(47, Node.IS_DISPATCHER);
1132:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1133:       assertEquals(30, Node.VAR_ARGS_NAME);
1134:       assertEquals(49, Node.DIRECT_EVAL);
1135:       assertEquals(1, Node.DECR_FLAG);
1136:       assertEquals(57, Node.LAST_PROP);
1137:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1138:       assertEquals(12, Node.COLUMN_BITS);
1139:       assertEquals(46, Node.IS_NAMESPACE);
1140:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1141:       assertEquals(54, Node.SLASH_V);
1142:       assertEquals(40, Node.ORIGINALNAME_PROP);
1143:       assertEquals(37, Node.OPT_ARG_NAME);
1144:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1145:       assertEquals(50, Node.FREE_CALL);
1146:       assertEquals(32, Node.INCRDECR_PROP);
1147:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1148:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1149:       assertEquals(4095, Node.COLUMN_MASK);
1150:       assertEquals(43, Node.IS_CONSTANT_NAME);
1151:       assertEquals(36, Node.QUOTED_PROP);
1152:       assertEquals(48, Node.DIRECTIVES);
1153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1154:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1155:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1156:       assertEquals(29, Node.JSDOC_INFO_PROP);
1157:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1158:       assertEquals(56, Node.CHANGE_TIME);
1159:       assertEquals(57, Node.REFLECTED_OBJECT);
1160:       assertEquals(2, Node.POST_FLAG);
1161:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1162:       assertEquals(47, Node.IS_DISPATCHER);
1163:       assertEquals(53, Node.INPUT_ID);
1164:       assertEquals(8, Node.FLAG_NO_THROWS);
1165:       assertEquals(52, Node.LENGTH);
1166:       assertEquals(55, Node.INFERRED_FUNCTION);
1167:       assertEquals(39, Node.EMPTY_BLOCK);
1168:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1169:       
1170:       boolean boolean0 = node0.isTypeOf();
1171:       assertFalse(node0.equals((Object)node1));
1172:       assertFalse(boolean0);
1173:       assertFalse(node0.isBlock());
1174:       assertFalse(node0.isAdd());
1175:       assertFalse(node0.isDo());
1176:       assertFalse(node0.isNew());
1177:       assertFalse(node0.isContinue());
1178:       assertFalse(node0.isCall());
1179:       assertFalse(node0.hasMoreThanOneChild());
1180:       assertFalse(node0.isVar());
1181:       assertFalse(node0.isWhile());
1182:       assertFalse(node0.isReturn());
1183:       assertFalse(node0.isLabel());
1184:       assertTrue(node0.isEmpty());
1185:       assertFalse(node0.isSetterDef());
1186:       assertFalse(node0.isAssignAdd());
1187:       assertEquals((-1), node0.getLineno());
1188:       assertFalse(node0.isName());
1189:       assertFalse(node0.isNull());
1190:       assertFalse(node0.isOr());
1191:       assertFalse(node0.isVoid());
1192:       assertFalse(node0.isTrue());
1193:       assertFalse(node0.isFunction());
1194:       assertFalse(node0.isExprResult());
1195:       assertFalse(node0.isGetElem());
1196:       assertFalse(node0.isCast());
1197:       assertFalse(node0.hasChildren());
1198:       assertFalse(node0.isTypeOf());
1199:       assertFalse(node0.isAssign());
1200:       assertFalse(node0.isDec());
1201:       assertFalse(node0.isGetProp());
1202:       assertFalse(node0.isAnd());
1203:       assertFalse(node0.isObjectLit());
1204:       assertFalse(node0.isString());
1205:       assertFalse(node0.isNot());
1206:       assertEquals((-1), node0.getSourcePosition());
1207:       assertFalse(node0.isDebugger());
1208:       assertEquals((-1), node0.getCharno());
1209:       assertFalse(node0.isInc());
1210:       assertFalse(node0.isSwitch());
1211:       assertEquals(124, node0.getType());
1212:       assertFalse(node0.isCase());
1213:       assertFalse(node0.isThrow());
1214:       assertFalse(node0.isFalse());
1215:       assertFalse(node0.isHook());
1216:       assertFalse(node0.isComma());
1217:       assertFalse(node0.isNE());
1218:       assertFalse(node0.isIf());
1219:       assertFalse(node0.isDelProp());
1220:       assertFalse(node0.isBreak());
1221:       assertFalse(node0.isIn());
1222:       assertFalse(node0.isScript());
1223:       assertFalse(node0.isDefaultCase());
1224:       assertFalse(node0.isTry());
1225:       assertFalse(node0.hasOneChild());
1226:       assertFalse(node0.isArrayLit());
1227:       assertFalse(node0.isWith());
1228:       assertFalse(node0.isFor());
1229:       assertFalse(node0.isCatch());
1230:       assertFalse(node0.isInstanceOf());
1231:       assertEquals(0, node0.getChildCount());
1232:       assertFalse(node0.isRegExp());
1233:       assertFalse(node0.isThis());
1234:       assertFalse(node0.isParamList());
1235:       assertFalse(node0.isLabelName());
1236:       assertFalse(node0.isStringKey());
1237:       assertFalse(node0.isGetterDef());
1238:       assertFalse(node0.isNumber());
1239:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1240:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1241:       assertEquals(53, Node.INPUT_ID);
1242:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1243:       assertEquals(56, Node.CHANGE_TIME);
1244:       assertEquals(43, Node.IS_CONSTANT_NAME);
1245:       assertEquals(36, Node.QUOTED_PROP);
1246:       assertEquals(48, Node.DIRECTIVES);
1247:       assertEquals(37, Node.OPT_ARG_NAME);
1248:       assertEquals(32, Node.INCRDECR_PROP);
1249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1250:       assertEquals(4095, Node.COLUMN_MASK);
1251:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1252:       assertEquals(1, Node.DECR_FLAG);
1253:       assertEquals(12, Node.COLUMN_BITS);
1254:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1255:       assertEquals(54, Node.SLASH_V);
1256:       assertEquals(52, Node.LENGTH);
1257:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1258:       assertEquals(40, Node.ORIGINALNAME_PROP);
1259:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1260:       assertEquals(49, Node.DIRECT_EVAL);
1261:       assertEquals(50, Node.FREE_CALL);
1262:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1263:       assertEquals(46, Node.IS_NAMESPACE);
1264:       assertEquals(57, Node.REFLECTED_OBJECT);
1265:       assertEquals(2, Node.POST_FLAG);
1266:       assertEquals(8, Node.FLAG_NO_THROWS);
1267:       assertEquals(55, Node.INFERRED_FUNCTION);
1268:       assertEquals(39, Node.EMPTY_BLOCK);
1269:       assertEquals(29, Node.JSDOC_INFO_PROP);
1270:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1271:       assertEquals(30, Node.VAR_ARGS_NAME);
1272:       assertEquals(57, Node.LAST_PROP);
1273:       assertEquals(47, Node.IS_DISPATCHER);
1274:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1275:       
1276:       boolean boolean1 = node1.isAssign();
1277:       assertFalse(node0.equals((Object)node1));
1278:       assertFalse(node1.equals((Object)node0));
1279:       assertTrue(boolean1 == boolean0);
1280:       assertFalse(boolean1);
1281:       assertFalse(node0.isBlock());
1282:       assertFalse(node0.isAdd());
1283:       assertFalse(node0.isDo());
1284:       assertFalse(node0.isNew());
1285:       assertFalse(node0.isContinue());
1286:       assertFalse(node0.isCall());
1287:       assertFalse(node0.hasMoreThanOneChild());
1288:       assertFalse(node0.isVar());
1289:       assertFalse(node0.isWhile());
1290:       assertFalse(node0.isReturn());
1291:       assertFalse(node0.isLabel());
1292:       assertTrue(node0.isEmpty());
1293:       assertFalse(node0.isSetterDef());
1294:       assertFalse(node0.isAssignAdd());
1295:       assertEquals((-1), node0.getLineno());
1296:       assertFalse(node0.isName());
1297:       assertFalse(node0.isNull());
1298:       assertFalse(node0.isOr());
1299:       assertFalse(node0.isVoid());
1300:       assertFalse(node0.isTrue());
1301:       assertFalse(node0.isFunction());
1302:       assertFalse(node0.isExprResult());
1303:       assertFalse(node0.isGetElem());
1304:       assertFalse(node0.isCast());
1305:       assertFalse(node0.hasChildren());
1306:       assertFalse(node0.isTypeOf());
1307:       assertFalse(node0.isAssign());
1308:       assertFalse(node0.isDec());
1309:       assertFalse(node0.isGetProp());
1310:       assertFalse(node0.isAnd());
1311:       assertFalse(node0.isObjectLit());
1312:       assertFalse(node0.isString());
1313:       assertFalse(node0.isNot());
1314:       assertEquals((-1), node0.getSourcePosition());
1315:       assertFalse(node0.isDebugger());
1316:       assertEquals((-1), node0.getCharno());
1317:       assertFalse(node0.isInc());
1318:       assertFalse(node0.isSwitch());
1319:       assertEquals(124, node0.getType());
1320:       assertFalse(node0.isCase());
1321:       assertFalse(node0.isThrow());
1322:       assertFalse(node0.isFalse());
1323:       assertFalse(node0.isHook());
1324:       assertFalse(node0.isComma());
1325:       assertFalse(node0.isNE());
1326:       assertFalse(node0.isIf());
1327:       assertFalse(node0.isDelProp());
1328:       assertFalse(node0.isBreak());
1329:       assertFalse(node0.isIn());
1330:       assertFalse(node0.isScript());
1331:       assertFalse(node0.isDefaultCase());
1332:       assertFalse(node0.isTry());
1333:       assertFalse(node0.hasOneChild());
1334:       assertFalse(node0.isArrayLit());
1335:       assertFalse(node0.isWith());
1336:       assertFalse(node0.isFor());
1337:       assertFalse(node0.isCatch());
1338:       assertFalse(node0.isInstanceOf());
1339:       assertEquals(0, node0.getChildCount());
1340:       assertFalse(node0.isRegExp());
1341:       assertFalse(node0.isThis());
1342:       assertFalse(node0.isParamList());
1343:       assertFalse(node0.isLabelName());
1344:       assertFalse(node0.isStringKey());
1345:       assertFalse(node0.isGetterDef());
1346:       assertFalse(node0.isNumber());
1347:       assertFalse(node1.isCatch());
1348:       assertFalse(node1.isFunction());
1349:       assertEquals(1206, node1.getLineno());
1350:       assertFalse(node1.isRegExp());
1351:       assertFalse(node1.isSetterDef());
1352:       assertFalse(node1.isDefaultCase());
1353:       assertFalse(node1.isTry());
1354:       assertFalse(node1.isName());
1355:       assertTrue(node1.hasOneChild());
1356:       assertFalse(node1.isCall());
1357:       assertFalse(node1.isFor());
1358:       assertFalse(node1.isNull());
1359:       assertFalse(node1.isTrue());
1360:       assertFalse(node1.isNE());
1361:       assertTrue(node1.hasChildren());
1362:       assertFalse(node1.isIf());
1363:       assertFalse(node1.isDelProp());
1364:       assertFalse(node1.isVoid());
1365:       assertFalse(node1.isContinue());
1366:       assertFalse(node1.isWhile());
1367:       assertFalse(node1.isString());
1368:       assertFalse(node1.isIn());
1369:       assertTrue(node1.isEmpty());
1370:       assertFalse(node1.isInc());
1371:       assertFalse(node1.isReturn());
1372:       assertFalse(node1.isFalse());
1373:       assertFalse(node1.isThrow());
1374:       assertFalse(node1.isCast());
1375:       assertFalse(node1.isDebugger());
1376:       assertFalse(node1.isAnd());
1377:       assertFalse(node1.isInstanceOf());
1378:       assertFalse(node1.isWith());
1379:       assertFalse(node1.isObjectLit());
1380:       assertFalse(node1.isNot());
1381:       assertFalse(node1.isGetProp());
1382:       assertFalse(node1.isThis());
1383:       assertFalse(node1.isScript());
1384:       assertFalse(node1.isGetElem());
1385:       assertFalse(node1.isHook());
1386:       assertFalse(node1.isDec());
1387:       assertFalse(node1.isComma());
1388:       assertFalse(node1.isAssign());
1389:       assertFalse(node1.isTypeOf());
1390:       assertEquals(0, node1.getCharno());
1391:       assertFalse(node1.isExprResult());
1392:       assertEquals(124, node1.getType());
1393:       assertFalse(node1.isBreak());
1394:       assertFalse(node1.isCase());
1395:       assertEquals(1, node1.getChildCount());
1396:       assertFalse(node1.hasMoreThanOneChild());
1397:       assertFalse(node1.isOr());
1398:       assertFalse(node1.isBlock());
1399:       assertFalse(node1.isNew());
1400:       assertFalse(node1.isLabel());
1401:       assertFalse(node1.isAssignAdd());
1402:       assertFalse(node1.isAdd());
1403:       assertFalse(node1.isDo());
1404:       assertFalse(node1.isStringKey());
1405:       assertFalse(node1.isVar());
1406:       assertFalse(node1.isNumber());
1407:       assertEquals(4939776, node1.getSourcePosition());
1408:       assertFalse(node1.isGetterDef());
1409:       assertFalse(node1.isParamList());
1410:       assertFalse(node1.isArrayLit());
1411:       assertFalse(node1.isSwitch());
1412:       assertFalse(node1.isLabelName());
1413:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1414:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1415:       assertEquals(53, Node.INPUT_ID);
1416:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1417:       assertEquals(56, Node.CHANGE_TIME);
1418:       assertEquals(43, Node.IS_CONSTANT_NAME);
1419:       assertEquals(36, Node.QUOTED_PROP);
1420:       assertEquals(48, Node.DIRECTIVES);
1421:       assertEquals(37, Node.OPT_ARG_NAME);
1422:       assertEquals(32, Node.INCRDECR_PROP);
1423:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1424:       assertEquals(4095, Node.COLUMN_MASK);
1425:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1426:       assertEquals(1, Node.DECR_FLAG);
1427:       assertEquals(12, Node.COLUMN_BITS);
1428:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1429:       assertEquals(54, Node.SLASH_V);
1430:       assertEquals(52, Node.LENGTH);
1431:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1432:       assertEquals(40, Node.ORIGINALNAME_PROP);
1433:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1434:       assertEquals(49, Node.DIRECT_EVAL);
1435:       assertEquals(50, Node.FREE_CALL);
1436:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1437:       assertEquals(46, Node.IS_NAMESPACE);
1438:       assertEquals(57, Node.REFLECTED_OBJECT);
1439:       assertEquals(2, Node.POST_FLAG);
1440:       assertEquals(8, Node.FLAG_NO_THROWS);
1441:       assertEquals(55, Node.INFERRED_FUNCTION);
1442:       assertEquals(39, Node.EMPTY_BLOCK);
1443:       assertEquals(29, Node.JSDOC_INFO_PROP);
1444:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1445:       assertEquals(30, Node.VAR_ARGS_NAME);
1446:       assertEquals(57, Node.LAST_PROP);
1447:       assertEquals(47, Node.IS_DISPATCHER);
1448:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1449:       assertEquals(30, Node.VAR_ARGS_NAME);
1450:       assertEquals(49, Node.DIRECT_EVAL);
1451:       assertEquals(1, Node.DECR_FLAG);
1452:       assertEquals(57, Node.LAST_PROP);
1453:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1454:       assertEquals(12, Node.COLUMN_BITS);
1455:       assertEquals(46, Node.IS_NAMESPACE);
1456:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1457:       assertEquals(54, Node.SLASH_V);
1458:       assertEquals(40, Node.ORIGINALNAME_PROP);
1459:       assertEquals(37, Node.OPT_ARG_NAME);
1460:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1461:       assertEquals(50, Node.FREE_CALL);
1462:       assertEquals(32, Node.INCRDECR_PROP);
1463:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1464:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1465:       assertEquals(4095, Node.COLUMN_MASK);
1466:       assertEquals(43, Node.IS_CONSTANT_NAME);
1467:       assertEquals(36, Node.QUOTED_PROP);
1468:       assertEquals(48, Node.DIRECTIVES);
1469:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1470:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1472:       assertEquals(29, Node.JSDOC_INFO_PROP);
1473:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1474:       assertEquals(56, Node.CHANGE_TIME);
1475:       assertEquals(57, Node.REFLECTED_OBJECT);
1476:       assertEquals(2, Node.POST_FLAG);
1477:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1478:       assertEquals(47, Node.IS_DISPATCHER);
1479:       assertEquals(53, Node.INPUT_ID);
1480:       assertEquals(8, Node.FLAG_NO_THROWS);
1481:       assertEquals(52, Node.LENGTH);
1482:       assertEquals(55, Node.INFERRED_FUNCTION);
1483:       assertEquals(39, Node.EMPTY_BLOCK);
1484:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1485:       
1486:       Node node2 = node0.getAncestor(2);
1487:       assertFalse(node0.equals((Object)node1));
1488:       assertNull(node2);
1489:       assertFalse(node0.isBlock());
1490:       assertFalse(node0.isAdd());
1491:       assertFalse(node0.isDo());
1492:       assertFalse(node0.isNew());
1493:       assertFalse(node0.isContinue());
1494:       assertFalse(node0.isCall());
1495:       assertFalse(node0.hasMoreThanOneChild());
1496:       assertFalse(node0.isVar());
1497:       assertFalse(node0.isWhile());
1498:       assertFalse(node0.isReturn());
1499:       assertFalse(node0.isLabel());
1500:       assertTrue(node0.isEmpty());
1501:       assertFalse(node0.isSetterDef());
1502:       assertFalse(node0.isAssignAdd());
1503:       assertEquals((-1), node0.getLineno());
1504:       assertFalse(node0.isName());
1505:       assertFalse(node0.isNull());
1506:       assertFalse(node0.isOr());
1507:       assertFalse(node0.isVoid());
1508:       assertFalse(node0.isTrue());
1509:       assertFalse(node0.isFunction());
1510:       assertFalse(node0.isExprResult());
1511:       assertFalse(node0.isGetElem());
1512:       assertFalse(node0.isCast());
1513:       assertFalse(node0.hasChildren());
1514:       assertFalse(node0.isTypeOf());
1515:       assertFalse(node0.isAssign());
1516:       assertFalse(node0.isDec());
1517:       assertFalse(node0.isGetProp());
1518:       assertFalse(node0.isAnd());
1519:       assertFalse(node0.isObjectLit());
1520:       assertFalse(node0.isString());
1521:       assertFalse(node0.isNot());
1522:       assertEquals((-1), node0.getSourcePosition());
1523:       assertFalse(node0.isDebugger());
1524:       assertEquals((-1), node0.getCharno());
1525:       assertFalse(node0.isInc());
1526:       assertFalse(node0.isSwitch());
1527:       assertEquals(124, node0.getType());
1528:       assertFalse(node0.isCase());
1529:       assertFalse(node0.isThrow());
1530:       assertFalse(node0.isFalse());
1531:       assertFalse(node0.isHook());
1532:       assertFalse(node0.isComma());
1533:       assertFalse(node0.isNE());
1534:       assertFalse(node0.isIf());
1535:       assertFalse(node0.isDelProp());
1536:       assertFalse(node0.isBreak());
1537:       assertFalse(node0.isIn());
1538:       assertFalse(node0.isScript());
1539:       assertFalse(node0.isDefaultCase());
1540:       assertFalse(node0.isTry());
1541:       assertFalse(node0.hasOneChild());
1542:       assertFalse(node0.isArrayLit());
1543:       assertFalse(node0.isWith());
1544:       assertFalse(node0.isFor());
1545:       assertFalse(node0.isCatch());
1546:       assertFalse(node0.isInstanceOf());
1547:       assertEquals(0, node0.getChildCount());
1548:       assertFalse(node0.isRegExp());
1549:       assertFalse(node0.isThis());
1550:       assertFalse(node0.isParamList());
1551:       assertFalse(node0.isLabelName());
1552:       assertFalse(node0.isStringKey());
1553:       assertFalse(node0.isGetterDef());
1554:       assertFalse(node0.isNumber());
1555:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1556:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1557:       assertEquals(53, Node.INPUT_ID);
1558:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1559:       assertEquals(56, Node.CHANGE_TIME);
1560:       assertEquals(43, Node.IS_CONSTANT_NAME);
1561:       assertEquals(36, Node.QUOTED_PROP);
1562:       assertEquals(48, Node.DIRECTIVES);
1563:       assertEquals(37, Node.OPT_ARG_NAME);
1564:       assertEquals(32, Node.INCRDECR_PROP);
1565:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1566:       assertEquals(4095, Node.COLUMN_MASK);
1567:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1568:       assertEquals(1, Node.DECR_FLAG);
1569:       assertEquals(12, Node.COLUMN_BITS);
1570:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1571:       assertEquals(54, Node.SLASH_V);
1572:       assertEquals(52, Node.LENGTH);
1573:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1574:       assertEquals(40, Node.ORIGINALNAME_PROP);
1575:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1576:       assertEquals(49, Node.DIRECT_EVAL);
1577:       assertEquals(50, Node.FREE_CALL);
1578:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1579:       assertEquals(46, Node.IS_NAMESPACE);
1580:       assertEquals(57, Node.REFLECTED_OBJECT);
1581:       assertEquals(2, Node.POST_FLAG);
1582:       assertEquals(8, Node.FLAG_NO_THROWS);
1583:       assertEquals(55, Node.INFERRED_FUNCTION);
1584:       assertEquals(39, Node.EMPTY_BLOCK);
1585:       assertEquals(29, Node.JSDOC_INFO_PROP);
1586:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1587:       assertEquals(30, Node.VAR_ARGS_NAME);
1588:       assertEquals(57, Node.LAST_PROP);
1589:       assertEquals(47, Node.IS_DISPATCHER);
1590:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1591:       
1592:       node0.setSourceEncodedPositionForTree(36);
1593:       assertFalse(node0.equals((Object)node1));
1594:       assertFalse(node0.isBlock());
1595:       assertFalse(node0.isAdd());
1596:       assertFalse(node0.isDo());
1597:       assertFalse(node0.isNew());
1598:       assertFalse(node0.isContinue());
1599:       assertFalse(node0.isCall());
1600:       assertFalse(node0.hasMoreThanOneChild());
1601:       assertFalse(node0.isVar());
1602:       assertFalse(node0.isWhile());
1603:       assertFalse(node0.isReturn());
1604:       assertFalse(node0.isLabel());
1605:       assertTrue(node0.isEmpty());
1606:       assertFalse(node0.isSetterDef());
1607:       assertFalse(node0.isAssignAdd());
1608:       assertFalse(node0.isName());
1609:       assertFalse(node0.isNull());
1610:       assertFalse(node0.isOr());
1611:       assertFalse(node0.isVoid());
1612:       assertFalse(node0.isTrue());
1613:       assertFalse(node0.isFunction());
1614:       assertFalse(node0.isExprResult());
1615:       assertFalse(node0.isGetElem());
1616:       assertFalse(node0.isCast());
1617:       assertFalse(node0.hasChildren());
1618:       assertFalse(node0.isTypeOf());
1619:       assertFalse(node0.isAssign());
1620:       assertFalse(node0.isDec());
1621:       assertFalse(node0.isGetProp());
1622:       assertEquals(0, node0.getLineno());
1623:       assertFalse(node0.isAnd());
1624:       assertEquals(36, node0.getSourcePosition());
1625:       assertFalse(node0.isObjectLit());
1626:       assertFalse(node0.isString());
1627:       assertFalse(node0.isNot());
1628:       assertFalse(node0.isDebugger());
1629:       assertFalse(node0.isInc());
1630:       assertFalse(node0.isSwitch());
1631:       assertEquals(124, node0.getType());
1632:       assertEquals(36, node0.getCharno());
1633:       assertFalse(node0.isCase());
1634:       assertFalse(node0.isThrow());
1635:       assertFalse(node0.isFalse());
1636:       assertFalse(node0.isHook());
1637:       assertFalse(node0.isComma());
1638:       assertFalse(node0.isNE());
1639:       assertFalse(node0.isIf());
1640:       assertFalse(node0.isDelProp());
1641:       assertFalse(node0.isBreak());
1642:       assertFalse(node0.isIn());
1643:       assertFalse(node0.isScript());
1644:       assertFalse(node0.isDefaultCase());
1645:       assertFalse(node0.isTry());
1646:       assertFalse(node0.hasOneChild());
1647:       assertFalse(node0.isArrayLit());
1648:       assertFalse(node0.isWith());
1649:       assertFalse(node0.isFor());
1650:       assertFalse(node0.isCatch());
1651:       assertFalse(node0.isInstanceOf());
1652:       assertEquals(0, node0.getChildCount());
1653:       assertFalse(node0.isRegExp());
1654:       assertFalse(node0.isThis());
1655:       assertFalse(node0.isParamList());
1656:       assertFalse(node0.isLabelName());
1657:       assertFalse(node0.isStringKey());
1658:       assertFalse(node0.isGetterDef());
1659:       assertFalse(node0.isNumber());
1660:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1661:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1662:       assertEquals(53, Node.INPUT_ID);
1663:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1664:       assertEquals(56, Node.CHANGE_TIME);
1665:       assertEquals(43, Node.IS_CONSTANT_NAME);
1666:       assertEquals(36, Node.QUOTED_PROP);
1667:       assertEquals(48, Node.DIRECTIVES);
1668:       assertEquals(37, Node.OPT_ARG_NAME);
1669:       assertEquals(32, Node.INCRDECR_PROP);
1670:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1671:       assertEquals(4095, Node.COLUMN_MASK);
1672:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1673:       assertEquals(1, Node.DECR_FLAG);
1674:       assertEquals(12, Node.COLUMN_BITS);
1675:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1676:       assertEquals(54, Node.SLASH_V);
1677:       assertEquals(52, Node.LENGTH);
1678:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1679:       assertEquals(40, Node.ORIGINALNAME_PROP);
1680:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1681:       assertEquals(49, Node.DIRECT_EVAL);
1682:       assertEquals(50, Node.FREE_CALL);
1683:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1684:       assertEquals(46, Node.IS_NAMESPACE);
1685:       assertEquals(57, Node.REFLECTED_OBJECT);
1686:       assertEquals(2, Node.POST_FLAG);
1687:       assertEquals(8, Node.FLAG_NO_THROWS);
1688:       assertEquals(55, Node.INFERRED_FUNCTION);
1689:       assertEquals(39, Node.EMPTY_BLOCK);
1690:       assertEquals(29, Node.JSDOC_INFO_PROP);
1691:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1692:       assertEquals(30, Node.VAR_ARGS_NAME);
1693:       assertEquals(57, Node.LAST_PROP);
1694:       assertEquals(47, Node.IS_DISPATCHER);
1695:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1696:       
1697:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
1698:       assertNotNull(node_SideEffectFlags0);
1699:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1700:       assertEquals(0, node_SideEffectFlags0.valueOf());
1701:       
1702:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
1703:       assertNotNull(node_SideEffectFlags1);
1704:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1705:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1706:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1707:       assertEquals(0, node_SideEffectFlags0.valueOf());
1708:       assertEquals(0, node_SideEffectFlags1.valueOf());
1709:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1710:       
1711:       node1.setOptionalArg(false);
1712:       assertFalse(node0.equals((Object)node1));
1713:       assertFalse(node1.equals((Object)node0));
1714:       assertFalse(node0.isBlock());
1715:       assertFalse(node0.isAdd());
1716:       assertFalse(node0.isDo());
1717:       assertFalse(node0.isNew());
1718:       assertFalse(node0.isContinue());
1719:       assertFalse(node0.isCall());
1720:       assertFalse(node0.hasMoreThanOneChild());
1721:       assertFalse(node0.isVar());
1722:       assertFalse(node0.isWhile());
1723:       assertFalse(node0.isReturn());
1724:       assertFalse(node0.isLabel());
1725:       assertTrue(node0.isEmpty());
1726:       assertFalse(node0.isSetterDef());
1727:       assertFalse(node0.isAssignAdd());
1728:       assertFalse(node0.isName());
1729:       assertFalse(node0.isNull());
1730:       assertFalse(node0.isOr());
1731:       assertFalse(node0.isVoid());
1732:       assertFalse(node0.isTrue());
1733:       assertFalse(node0.isFunction());
1734:       assertFalse(node0.isExprResult());
1735:       assertFalse(node0.isGetElem());
1736:       assertFalse(node0.isCast());
1737:       assertFalse(node0.hasChildren());
1738:       assertFalse(node0.isTypeOf());
1739:       assertFalse(node0.isAssign());
1740:       assertFalse(node0.isDec());
1741:       assertFalse(node0.isGetProp());
1742:       assertEquals(0, node0.getLineno());
1743:       assertFalse(node0.isAnd());
1744:       assertEquals(36, node0.getSourcePosition());
1745:       assertFalse(node0.isObjectLit());
1746:       assertFalse(node0.isString());
1747:       assertFalse(node0.isNot());
1748:       assertFalse(node0.isDebugger());
1749:       assertFalse(node0.isInc());
1750:       assertFalse(node0.isSwitch());
1751:       assertEquals(124, node0.getType());
1752:       assertEquals(36, node0.getCharno());
1753:       assertFalse(node0.isCase());
1754:       assertFalse(node0.isThrow());
1755:       assertFalse(node0.isFalse());
1756:       assertFalse(node0.isHook());
1757:       assertFalse(node0.isComma());
1758:       assertFalse(node0.isNE());
1759:       assertFalse(node0.isIf());
1760:       assertFalse(node0.isDelProp());
1761:       assertFalse(node0.isBreak());
1762:       assertFalse(node0.isIn());
1763:       assertFalse(node0.isScript());
1764:       assertFalse(node0.isDefaultCase());
1765:       assertFalse(node0.isTry());
1766:       assertFalse(node0.hasOneChild());
1767:       assertFalse(node0.isArrayLit());
1768:       assertFalse(node0.isWith());
1769:       assertFalse(node0.isFor());
1770:       assertFalse(node0.isCatch());
1771:       assertFalse(node0.isInstanceOf());
1772:       assertEquals(0, node0.getChildCount());
1773:       assertFalse(node0.isRegExp());
1774:       assertFalse(node0.isThis());
1775:       assertFalse(node0.isParamList());
1776:       assertFalse(node0.isLabelName());
1777:       assertFalse(node0.isStringKey());
1778:       assertFalse(node0.isGetterDef());
1779:       assertFalse(node0.isNumber());
1780:       assertFalse(node1.isCatch());
1781:       assertFalse(node1.isFunction());
1782:       assertEquals(1206, node1.getLineno());
1783:       assertFalse(node1.isRegExp());
1784:       assertFalse(node1.isSetterDef());
1785:       assertFalse(node1.isDefaultCase());
1786:       assertFalse(node1.isTry());
1787:       assertFalse(node1.isName());
1788:       assertTrue(node1.hasOneChild());
1789:       assertFalse(node1.isCall());
1790:       assertFalse(node1.isFor());
1791:       assertFalse(node1.isNull());
1792:       assertFalse(node1.isTrue());
1793:       assertFalse(node1.isNE());
1794:       assertTrue(node1.hasChildren());
1795:       assertFalse(node1.isIf());
1796:       assertFalse(node1.isDelProp());
1797:       assertFalse(node1.isVoid());
1798:       assertFalse(node1.isContinue());
1799:       assertFalse(node1.isWhile());
1800:       assertFalse(node1.isString());
1801:       assertFalse(node1.isIn());
1802:       assertTrue(node1.isEmpty());
1803:       assertFalse(node1.isInc());
1804:       assertFalse(node1.isReturn());
1805:       assertFalse(node1.isFalse());
1806:       assertFalse(node1.isThrow());
1807:       assertFalse(node1.isCast());
1808:       assertFalse(node1.isDebugger());
1809:       assertFalse(node1.isAnd());
1810:       assertFalse(node1.isInstanceOf());
1811:       assertFalse(node1.isWith());
1812:       assertFalse(node1.isObjectLit());
1813:       assertFalse(node1.isNot());
1814:       assertFalse(node1.isGetProp());
1815:       assertFalse(node1.isThis());
1816:       assertFalse(node1.isScript());
1817:       assertFalse(node1.isGetElem());
1818:       assertFalse(node1.isHook());
1819:       assertFalse(node1.isDec());
1820:       assertFalse(node1.isComma());
1821:       assertFalse(node1.isAssign());
1822:       assertFalse(node1.isTypeOf());
1823:       assertEquals(0, node1.getCharno());
1824:       assertFalse(node1.isExprResult());
1825:       assertEquals(124, node1.getType());
1826:       assertFalse(node1.isBreak());
1827:       assertFalse(node1.isCase());
1828:       assertEquals(1, node1.getChildCount());
1829:       assertFalse(node1.hasMoreThanOneChild());
1830:       assertFalse(node1.isOr());
1831:       assertFalse(node1.isBlock());
1832:       assertFalse(node1.isNew());
1833:       assertFalse(node1.isLabel());
1834:       assertFalse(node1.isAssignAdd());
1835:       assertFalse(node1.isAdd());
1836:       assertFalse(node1.isDo());
1837:       assertFalse(node1.isStringKey());
1838:       assertFalse(node1.isVar());
1839:       assertFalse(node1.isNumber());
1840:       assertEquals(4939776, node1.getSourcePosition());
1841:       assertFalse(node1.isGetterDef());
1842:       assertFalse(node1.isParamList());
1843:       assertFalse(node1.isArrayLit());
1844:       assertFalse(node1.isSwitch());
1845:       assertFalse(node1.isLabelName());
1846:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1847:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1848:       assertEquals(53, Node.INPUT_ID);
1849:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1850:       assertEquals(56, Node.CHANGE_TIME);
1851:       assertEquals(43, Node.IS_CONSTANT_NAME);
1852:       assertEquals(36, Node.QUOTED_PROP);
1853:       assertEquals(48, Node.DIRECTIVES);
1854:       assertEquals(37, Node.OPT_ARG_NAME);
1855:       assertEquals(32, Node.INCRDECR_PROP);
1856:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1857:       assertEquals(4095, Node.COLUMN_MASK);
1858:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1859:       assertEquals(1, Node.DECR_FLAG);
1860:       assertEquals(12, Node.COLUMN_BITS);
1861:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1862:       assertEquals(54, Node.SLASH_V);
1863:       assertEquals(52, Node.LENGTH);
1864:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1865:       assertEquals(40, Node.ORIGINALNAME_PROP);
1866:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1867:       assertEquals(49, Node.DIRECT_EVAL);
1868:       assertEquals(50, Node.FREE_CALL);
1869:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1870:       assertEquals(46, Node.IS_NAMESPACE);
1871:       assertEquals(57, Node.REFLECTED_OBJECT);
1872:       assertEquals(2, Node.POST_FLAG);
1873:       assertEquals(8, Node.FLAG_NO_THROWS);
1874:       assertEquals(55, Node.INFERRED_FUNCTION);
1875:       assertEquals(39, Node.EMPTY_BLOCK);
1876:       assertEquals(29, Node.JSDOC_INFO_PROP);
1877:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1878:       assertEquals(30, Node.VAR_ARGS_NAME);
1879:       assertEquals(57, Node.LAST_PROP);
1880:       assertEquals(47, Node.IS_DISPATCHER);
1881:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1882:       assertEquals(30, Node.VAR_ARGS_NAME);
1883:       assertEquals(49, Node.DIRECT_EVAL);
1884:       assertEquals(1, Node.DECR_FLAG);
1885:       assertEquals(57, Node.LAST_PROP);
1886:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1887:       assertEquals(12, Node.COLUMN_BITS);
1888:       assertEquals(46, Node.IS_NAMESPACE);
1889:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1890:       assertEquals(54, Node.SLASH_V);
1891:       assertEquals(40, Node.ORIGINALNAME_PROP);
1892:       assertEquals(37, Node.OPT_ARG_NAME);
1893:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1894:       assertEquals(50, Node.FREE_CALL);
1895:       assertEquals(32, Node.INCRDECR_PROP);
1896:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1897:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1898:       assertEquals(4095, Node.COLUMN_MASK);
1899:       assertEquals(43, Node.IS_CONSTANT_NAME);
1900:       assertEquals(36, Node.QUOTED_PROP);
1901:       assertEquals(48, Node.DIRECTIVES);
1902:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1903:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1904:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1905:       assertEquals(29, Node.JSDOC_INFO_PROP);
1906:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1907:       assertEquals(56, Node.CHANGE_TIME);
1908:       assertEquals(57, Node.REFLECTED_OBJECT);
1909:       assertEquals(2, Node.POST_FLAG);
1910:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1911:       assertEquals(47, Node.IS_DISPATCHER);
1912:       assertEquals(53, Node.INPUT_ID);
1913:       assertEquals(8, Node.FLAG_NO_THROWS);
1914:       assertEquals(52, Node.LENGTH);
1915:       assertEquals(55, Node.INFERRED_FUNCTION);
1916:       assertEquals(39, Node.EMPTY_BLOCK);
1917:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1918:       
1919:       String string0 = node0.toString();
1920:       assertFalse(node0.equals((Object)node1));
1921:       assertNotNull(string0);
1922:       assertFalse(node0.isBlock());
1923:       assertFalse(node0.isAdd());
1924:       assertFalse(node0.isDo());
1925:       assertFalse(node0.isNew());
1926:       assertFalse(node0.isContinue());
1927:       assertFalse(node0.isCall());
1928:       assertFalse(node0.hasMoreThanOneChild());
1929:       assertFalse(node0.isVar());
1930:       assertFalse(node0.isWhile());
1931:       assertFalse(node0.isReturn());
1932:       assertFalse(node0.isLabel());
1933:       assertTrue(node0.isEmpty());
1934:       assertFalse(node0.isSetterDef());
1935:       assertFalse(node0.isAssignAdd());
1936:       assertFalse(node0.isName());
1937:       assertFalse(node0.isNull());
1938:       assertFalse(node0.isOr());
1939:       assertFalse(node0.isVoid());
1940:       assertFalse(node0.isTrue());
1941:       assertFalse(node0.isFunction());
1942:       assertFalse(node0.isExprResult());
1943:       assertFalse(node0.isGetElem());
1944:       assertFalse(node0.isCast());
1945:       assertFalse(node0.hasChildren());
1946:       assertFalse(node0.isTypeOf());
1947:       assertFalse(node0.isAssign());
1948:       assertFalse(node0.isDec());
1949:       assertFalse(node0.isGetProp());
1950:       assertEquals(0, node0.getLineno());
1951:       assertFalse(node0.isAnd());
1952:       assertEquals(36, node0.getSourcePosition());
1953:       assertFalse(node0.isObjectLit());
1954:       assertFalse(node0.isString());
1955:       assertFalse(node0.isNot());
1956:       assertFalse(node0.isDebugger());
1957:       assertFalse(node0.isInc());
1958:       assertFalse(node0.isSwitch());
1959:       assertEquals(124, node0.getType());
1960:       assertEquals(36, node0.getCharno());
1961:       assertFalse(node0.isCase());
1962:       assertFalse(node0.isThrow());
1963:       assertFalse(node0.isFalse());
1964:       assertFalse(node0.isHook());
1965:       assertFalse(node0.isComma());
1966:       assertFalse(node0.isNE());
1967:       assertFalse(node0.isIf());
1968:       assertFalse(node0.isDelProp());
1969:       assertFalse(node0.isBreak());
1970:       assertFalse(node0.isIn());
1971:       assertFalse(node0.isScript());
1972:       assertFalse(node0.isDefaultCase());
1973:       assertFalse(node0.isTry());
1974:       assertFalse(node0.hasOneChild());
1975:       assertFalse(node0.isArrayLit());
1976:       assertFalse(node0.isWith());
1977:       assertFalse(node0.isFor());
1978:       assertFalse(node0.isCatch());
1979:       assertFalse(node0.isInstanceOf());
1980:       assertEquals(0, node0.getChildCount());
1981:       assertFalse(node0.isRegExp());
1982:       assertFalse(node0.isThis());
1983:       assertFalse(node0.isParamList());
1984:       assertFalse(node0.isLabelName());
1985:       assertFalse(node0.isStringKey());
1986:       assertFalse(node0.isGetterDef());
1987:       assertFalse(node0.isNumber());
1988:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1989:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1990:       assertEquals(53, Node.INPUT_ID);
1991:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1992:       assertEquals(56, Node.CHANGE_TIME);
1993:       assertEquals(43, Node.IS_CONSTANT_NAME);
1994:       assertEquals(36, Node.QUOTED_PROP);
1995:       assertEquals(48, Node.DIRECTIVES);
1996:       assertEquals(37, Node.OPT_ARG_NAME);
1997:       assertEquals(32, Node.INCRDECR_PROP);
1998:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1999:       assertEquals(4095, Node.COLUMN_MASK);
2000:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2001:       assertEquals(1, Node.DECR_FLAG);
2002:       assertEquals(12, Node.COLUMN_BITS);
2003:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2004:       assertEquals(54, Node.SLASH_V);
2005:       assertEquals(52, Node.LENGTH);
2006:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2007:       assertEquals(40, Node.ORIGINALNAME_PROP);
2008:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2009:       assertEquals(49, Node.DIRECT_EVAL);
2010:       assertEquals(50, Node.FREE_CALL);
2011:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2012:       assertEquals(46, Node.IS_NAMESPACE);
2013:       assertEquals(57, Node.REFLECTED_OBJECT);
2014:       assertEquals(2, Node.POST_FLAG);
2015:       assertEquals(8, Node.FLAG_NO_THROWS);
2016:       assertEquals(55, Node.INFERRED_FUNCTION);
2017:       assertEquals(39, Node.EMPTY_BLOCK);
2018:       assertEquals(29, Node.JSDOC_INFO_PROP);
2019:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2020:       assertEquals(30, Node.VAR_ARGS_NAME);
2021:       assertEquals(57, Node.LAST_PROP);
2022:       assertEquals(47, Node.IS_DISPATCHER);
2023:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2024:       
2025:       boolean boolean2 = node0.isDo();
2026:       assertFalse(node0.equals((Object)node1));
2027:       assertTrue(boolean2 == boolean0);
2028:       assertTrue(boolean2 == boolean1);
2029:       assertFalse(boolean2);
2030:       assertFalse(node0.isBlock());
2031:       assertFalse(node0.isAdd());
2032:       assertFalse(node0.isDo());
2033:       assertFalse(node0.isNew());
2034:       assertFalse(node0.isContinue());
2035:       assertFalse(node0.isCall());
2036:       assertFalse(node0.hasMoreThanOneChild());
2037:       assertFalse(node0.isVar());
2038:       assertFalse(node0.isWhile());
2039:       assertFalse(node0.isReturn());
2040:       assertFalse(node0.isLabel());
2041:       assertTrue(node0.isEmpty());
2042:       assertFalse(node0.isSetterDef());
2043:       assertFalse(node0.isAssignAdd());
2044:       assertFalse(node0.isName());
2045:       assertFalse(node0.isNull());
2046:       assertFalse(node0.isOr());
2047:       assertFalse(node0.isVoid());
2048:       assertFalse(node0.isTrue());
2049:       assertFalse(node0.isFunction());
2050:       assertFalse(node0.isExprResult());
2051:       assertFalse(node0.isGetElem());
2052:       assertFalse(node0.isCast());
2053:       assertFalse(node0.hasChildren());
2054:       assertFalse(node0.isTypeOf());
2055:       assertFalse(node0.isAssign());
2056:       assertFalse(node0.isDec());
2057:       assertFalse(node0.isGetProp());
2058:       assertEquals(0, node0.getLineno());
2059:       assertFalse(node0.isAnd());
2060:       assertEquals(36, node0.getSourcePosition());
2061:       assertFalse(node0.isObjectLit());
2062:       assertFalse(node0.isString());
2063:       assertFalse(node0.isNot());
2064:       assertFalse(node0.isDebugger());
2065:       assertFalse(node0.isInc());
2066:       assertFalse(node0.isSwitch());
2067:       assertEquals(124, node0.getType());
2068:       assertEquals(36, node0.getCharno());
2069:       assertFalse(node0.isCase());
2070:       assertFalse(node0.isThrow());
2071:       assertFalse(node0.isFalse());
2072:       assertFalse(node0.isHook());
2073:       assertFalse(node0.isComma());
2074:       assertFalse(node0.isNE());
2075:       assertFalse(node0.isIf());
2076:       assertFalse(node0.isDelProp());
2077:       assertFalse(node0.isBreak());
2078:       assertFalse(node0.isIn());
2079:       assertFalse(node0.isScript());
2080:       assertFalse(node0.isDefaultCase());
2081:       assertFalse(node0.isTry());
2082:       assertFalse(node0.hasOneChild());
2083:       assertFalse(node0.isArrayLit());
2084:       assertFalse(node0.isWith());
2085:       assertFalse(node0.isFor());
2086:       assertFalse(node0.isCatch());
2087:       assertFalse(node0.isInstanceOf());
2088:       assertEquals(0, node0.getChildCount());
2089:       assertFalse(node0.isRegExp());
2090:       assertFalse(node0.isThis());
2091:       assertFalse(node0.isParamList());
2092:       assertFalse(node0.isLabelName());
2093:       assertFalse(node0.isStringKey());
2094:       assertFalse(node0.isGetterDef());
2095:       assertFalse(node0.isNumber());
2096:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2097:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2098:       assertEquals(53, Node.INPUT_ID);
2099:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2100:       assertEquals(56, Node.CHANGE_TIME);
2101:       assertEquals(43, Node.IS_CONSTANT_NAME);
2102:       assertEquals(36, Node.QUOTED_PROP);
2103:       assertEquals(48, Node.DIRECTIVES);
2104:       assertEquals(37, Node.OPT_ARG_NAME);
2105:       assertEquals(32, Node.INCRDECR_PROP);
2106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2107:       assertEquals(4095, Node.COLUMN_MASK);
2108:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2109:       assertEquals(1, Node.DECR_FLAG);
2110:       assertEquals(12, Node.COLUMN_BITS);
2111:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2112:       assertEquals(54, Node.SLASH_V);
2113:       assertEquals(52, Node.LENGTH);
2114:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2115:       assertEquals(40, Node.ORIGINALNAME_PROP);
2116:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2117:       assertEquals(49, Node.DIRECT_EVAL);
2118:       assertEquals(50, Node.FREE_CALL);
2119:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2120:       assertEquals(46, Node.IS_NAMESPACE);
2121:       assertEquals(57, Node.REFLECTED_OBJECT);
2122:       assertEquals(2, Node.POST_FLAG);
2123:       assertEquals(8, Node.FLAG_NO_THROWS);
2124:       assertEquals(55, Node.INFERRED_FUNCTION);
2125:       assertEquals(39, Node.EMPTY_BLOCK);
2126:       assertEquals(29, Node.JSDOC_INFO_PROP);
2127:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2128:       assertEquals(30, Node.VAR_ARGS_NAME);
2129:       assertEquals(57, Node.LAST_PROP);
2130:       assertEquals(47, Node.IS_DISPATCHER);
2131:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2132:       
2133:       boolean boolean3 = node0.isWith();
2134:       assertTrue(boolean3 == boolean1);
2135:       assertTrue(boolean3 == boolean2);
2136:       assertTrue(boolean3 == boolean0);
2137:       assertFalse(node0.equals((Object)node1));
2138:       assertFalse(boolean3);
2139:       assertFalse(node0.isBlock());
2140:       assertFalse(node0.isAdd());
2141:       assertFalse(node0.isDo());
2142:       assertFalse(node0.isNew());
2143:       assertFalse(node0.isContinue());
2144:       assertFalse(node0.isCall());
2145:       assertFalse(node0.hasMoreThanOneChild());
2146:       assertFalse(node0.isVar());
2147:       assertFalse(node0.isWhile());
2148:       assertFalse(node0.isReturn());
2149:       assertFalse(node0.isLabel());
2150:       assertTrue(node0.isEmpty());
2151:       assertFalse(node0.isSetterDef());
2152:       assertFalse(node0.isAssignAdd());
2153:       assertFalse(node0.isName());
2154:       assertFalse(node0.isNull());
2155:       assertFalse(node0.isOr());
2156:       assertFalse(node0.isVoid());
2157:       assertFalse(node0.isTrue());
2158:       assertFalse(node0.isFunction());
2159:       assertFalse(node0.isExprResult());
2160:       assertFalse(node0.isGetElem());
2161:       assertFalse(node0.isCast());
2162:       assertFalse(node0.hasChildren());
2163:       assertFalse(node0.isTypeOf());
2164:       assertFalse(node0.isAssign());
2165:       assertFalse(node0.isDec());
2166:       assertFalse(node0.isGetProp());
2167:       assertEquals(0, node0.getLineno());
2168:       assertFalse(node0.isAnd());
2169:       assertEquals(36, node0.getSourcePosition());
2170:       assertFalse(node0.isObjectLit());
2171:       assertFalse(node0.isString());
2172:       assertFalse(node0.isNot());
2173:       assertFalse(node0.isDebugger());
2174:       assertFalse(node0.isInc());
2175:       assertFalse(node0.isSwitch());
2176:       assertEquals(124, node0.getType());
2177:       assertEquals(36, node0.getCharno());
2178:       assertFalse(node0.isCase());
2179:       assertFalse(node0.isThrow());
2180:       assertFalse(node0.isFalse());
2181:       assertFalse(node0.isHook());
2182:       assertFalse(node0.isComma());
2183:       assertFalse(node0.isNE());
2184:       assertFalse(node0.isIf());
2185:       assertFalse(node0.isDelProp());
2186:       assertFalse(node0.isBreak());
2187:       assertFalse(node0.isIn());
2188:       assertFalse(node0.isScript());
2189:       assertFalse(node0.isDefaultCase());
2190:       assertFalse(node0.isTry());
2191:       assertFalse(node0.hasOneChild());
2192:       assertFalse(node0.isArrayLit());
2193:       assertFalse(node0.isWith());
2194:       assertFalse(node0.isFor());
2195:       assertFalse(node0.isCatch());
2196:       assertFalse(node0.isInstanceOf());
2197:       assertEquals(0, node0.getChildCount());
2198:       assertFalse(node0.isRegExp());
2199:       assertFalse(node0.isThis());
2200:       assertFalse(node0.isParamList());
2201:       assertFalse(node0.isLabelName());
2202:       assertFalse(node0.isStringKey());
2203:       assertFalse(node0.isGetterDef());
2204:       assertFalse(node0.isNumber());
2205:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2206:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2207:       assertEquals(53, Node.INPUT_ID);
2208:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2209:       assertEquals(56, Node.CHANGE_TIME);
2210:       assertEquals(43, Node.IS_CONSTANT_NAME);
2211:       assertEquals(36, Node.QUOTED_PROP);
2212:       assertEquals(48, Node.DIRECTIVES);
2213:       assertEquals(37, Node.OPT_ARG_NAME);
2214:       assertEquals(32, Node.INCRDECR_PROP);
2215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2216:       assertEquals(4095, Node.COLUMN_MASK);
2217:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2218:       assertEquals(1, Node.DECR_FLAG);
2219:       assertEquals(12, Node.COLUMN_BITS);
2220:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2221:       assertEquals(54, Node.SLASH_V);
2222:       assertEquals(52, Node.LENGTH);
2223:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2224:       assertEquals(40, Node.ORIGINALNAME_PROP);
2225:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2226:       assertEquals(49, Node.DIRECT_EVAL);
2227:       assertEquals(50, Node.FREE_CALL);
2228:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2229:       assertEquals(46, Node.IS_NAMESPACE);
2230:       assertEquals(57, Node.REFLECTED_OBJECT);
2231:       assertEquals(2, Node.POST_FLAG);
2232:       assertEquals(8, Node.FLAG_NO_THROWS);
2233:       assertEquals(55, Node.INFERRED_FUNCTION);
2234:       assertEquals(39, Node.EMPTY_BLOCK);
2235:       assertEquals(29, Node.JSDOC_INFO_PROP);
2236:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2237:       assertEquals(30, Node.VAR_ARGS_NAME);
2238:       assertEquals(57, Node.LAST_PROP);
2239:       assertEquals(47, Node.IS_DISPATCHER);
2240:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2241:   }
2242: }
RegularFileObject[/tmp/EvoSuite_157_1629223131443/com/google/javascript/rhino/Node_157_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:51 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_157_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_157_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_157_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.SimpleErrorReporter",
258:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
259:       "com.google.common.base.Joiner",
260:       "com.google.common.base.Preconditions",
261:       "com.google.common.base.Joiner$1",
262:       "com.google.common.collect.Collections2",
263:       "com.google.common.base.Joiner$MapJoiner",
264:       "com.google.common.collect.Maps",
265:       "com.google.common.collect.AbstractMultimap",
266:       "com.google.common.collect.AbstractMapBasedMultimap",
267:       "com.google.common.collect.AbstractSetMultimap",
268:       "com.google.common.collect.LinkedHashMultimap",
269:       "com.google.common.collect.AbstractMapEntry",
270:       "com.google.common.collect.ImmutableEntry",
271:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
272:       "com.google.common.collect.AbstractListMultimap",
273:       "com.google.common.collect.ArrayListMultimap",
274:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
275:       "com.google.common.collect.ImmutableCollection",
276:       "com.google.common.collect.RegularImmutableList",
277:       "com.google.common.collect.ObjectArrays",
278:       "com.google.common.collect.ImmutableList",
279:       "com.google.javascript.rhino.jstype.ModificationVisitor",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
281:       "com.google.common.collect.ImmutableCollection$Builder",
282:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
283:       "com.google.common.collect.ImmutableList$Builder",
284:       "com.google.common.collect.UnmodifiableIterator",
285:       "com.google.common.collect.UnmodifiableListIterator",
286:       "com.google.common.collect.Iterators$1",
287:       "com.google.common.collect.Iterators$2",
288:       "com.google.common.collect.Iterators",
289:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
290:       "com.google.javascript.rhino.jstype.JSType$1",
291:       "com.google.javascript.rhino.jstype.JSType",
292:       "com.google.javascript.rhino.jstype.ObjectType",
293:       "com.google.javascript.rhino.jstype.ProxyObjectType",
294:       "com.google.javascript.rhino.jstype.TemplateType",
295:       "com.google.javascript.rhino.jstype.ValueType",
296:       "com.google.javascript.rhino.jstype.BooleanType",
297:       "com.google.javascript.rhino.jstype.NullType",
298:       "com.google.javascript.rhino.jstype.NumberType",
299:       "com.google.javascript.rhino.jstype.StringType",
300:       "com.google.javascript.rhino.jstype.UnknownType",
301:       "com.google.javascript.rhino.jstype.VoidType",
302:       "com.google.javascript.rhino.jstype.AllType",
303:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
304:       "com.google.common.collect.ImmutableMap",
305:       "com.google.common.collect.ImmutableBiMap",
306:       "com.google.common.collect.EmptyImmutableBiMap",
307:       "com.google.javascript.rhino.jstype.PropertyMap$1",
308:       "com.google.javascript.rhino.jstype.PropertyMap",
309:       "com.google.javascript.rhino.jstype.FunctionType",
310:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
311:       "com.google.javascript.rhino.Token",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.JSDocInfo",
330:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
331:       "com.google.common.collect.Sets",
332:       "com.google.common.base.Objects",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.collect.AbstractIndexedListIterator",
337:       "com.google.common.collect.Iterators$11",
338:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
339:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
340:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
341:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.common.collect.Platform",
349:       "com.google.common.collect.Iterables",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.NamedType",
359:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
360:       "com.google.javascript.rhino.jstype.JSType$2",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 17:58:52.232 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(124, "");
assertNotNull(node0);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(124, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Node node1 = new Node(124, node0);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(124, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isName());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertTrue(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isReturn());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertEquals(124, node1.getType());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);

node1.setLineno(124);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(124, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isCatch());
assertEquals(507904, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isName());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertTrue(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isReturn());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isDebugger());
assertEquals(124, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals(0, node1.getCharno());
assertFalse(node1.isExprResult());
assertEquals(124, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);

node0.setChangeTime(15);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(124, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(124, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(124, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isCatch());
assertEquals(507904, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isName());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertTrue(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isReturn());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isDebugger());
assertEquals(124, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals(0, node1.getCharno());
assertFalse(node1.isExprResult());
assertEquals(124, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);

node1.setLineno(1206);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(124, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertEquals(1206, node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isName());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertTrue(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isReturn());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals(0, node1.getCharno());
assertFalse(node1.isExprResult());
assertEquals(124, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertEquals(4939776, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);

boolean boolean0 = node0.isTypeOf();
assertFalse(node0.equals((Object)node1));
assertFalse(boolean0);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(124, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean1 = node1.isAssign();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(124, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertEquals(1206, node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isName());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertTrue(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isReturn());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals(0, node1.getCharno());
assertFalse(node1.isExprResult());
assertEquals(124, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertEquals(4939776, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);

Node node2 = node0.getAncestor(2);
assertFalse(node0.equals((Object)node1));
assertNull(node2);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(124, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

node0.setSourceEncodedPositionForTree(36);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isAnd());
assertEquals(36, node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(124, node0.getType());
assertEquals(36, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());

node1.setOptionalArg(false);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isAnd());
assertEquals(36, node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(124, node0.getType());
assertEquals(36, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertEquals(1206, node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isName());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertTrue(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isReturn());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals(0, node1.getCharno());
assertFalse(node1.isExprResult());
assertEquals(124, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertEquals(4939776, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);

String string0 = node0.toString();
assertFalse(node0.equals((Object)node1));
assertNotNull(string0);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isAnd());
assertEquals(36, node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(124, node0.getType());
assertEquals(36, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean2 = node0.isDo();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isAnd());
assertEquals(36, node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(124, node0.getType());
assertEquals(36, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean3 = node0.isWith();
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(boolean3);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertTrue(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isAnd());
assertEquals(36, node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(124, node0.getType());
assertEquals(36, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);


[MASTER] 17:59:12.131 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:12.538 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:12.828 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:13.180 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:13.649 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:13.923 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:14.269 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:14.491 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:14.734 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:14.968 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:15.242 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:15.528 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:15.849 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:16.080 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:16.408 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:16.675 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:16.981 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:17.233 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/15
* Done!

* Computation finished
