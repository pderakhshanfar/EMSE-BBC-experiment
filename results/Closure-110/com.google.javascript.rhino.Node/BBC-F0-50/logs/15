* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 12316
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 11009579
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:15:30.132 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:18:16.713 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 220
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 898
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 44185
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 1928
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 3007
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 46
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 33
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 1007
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 4612
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 12
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 20636
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 12
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 12
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 364
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 12
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 366
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 7945
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 16935
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 12
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 14366
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 2407
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 13596
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 90
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 2407
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 1045
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 24845
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 5847
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 767
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 163
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 1370
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 1448
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 175
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 10280
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 703
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 1273
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 17837
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 24
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 1045
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 970
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 250
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 220
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 2042
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 2007
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 18895
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 129
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 2202
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 735
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 622
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1206
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 12229
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 41431
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 826
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 35
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 92054
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 1045
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - true: 35
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 1902
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 1211
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 3616
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 279
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 2244
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 2244
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 210
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 1789
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 31006
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 1
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 5226
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 220
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 5226
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 16777
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 5226
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 1928
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 21221
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 5167
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 1447
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 521
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 5420
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 19178
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 97
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 39544
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 521
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 10504
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 1778
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 98426
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 2244
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 1589
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 341
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - false: 17
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 2968
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 3109
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - true: 109
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 595
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 11534
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 1627
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 95
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 132
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 17453
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 543
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 14366
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 14366
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 16
Number of times BBC is called for com.google.javascript.rhino.Node.isOptionalArg()Z: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 11873
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 1928
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 640
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 5172
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 1431
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 220
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 220
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 900
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 2948
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: root-Branch: 220
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 924
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 6697
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 3527
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: Line 2161: 3616
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 163
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 16176
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 1045
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 248
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 7232
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 640
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 14366
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 3440
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 217
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 86
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 46
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 640
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 46
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 220
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 45667
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 318
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 1826
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 21221
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 1259
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 1014
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 8103
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 17074
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 5077
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 10952
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 11787
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - false: 3616
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 136
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 21054
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 220
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 4855
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 98426
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 2980
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 9569
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 28
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 23226
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - false: 33
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - true: 35
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 775
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 640
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 2980
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 521
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 146
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 640
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1036
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 62711
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 2407
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 92054
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 532
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 46
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 14366
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 10250
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 640
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 21538
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 7103
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 940
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 46
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 1046
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 1028
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 2502
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 2244
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 904
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 4495
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 79
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 767
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 987
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 4864
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 167
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 11580
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 46
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 282
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 108
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 318
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 6886
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 19435
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 6219
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 37075
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 6886
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 5029
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 5994
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 46
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - false: 14
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 73
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 6094
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 3255
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 414
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 767
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 3527
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 182
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 430
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 1045
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 13
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 1045
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 93982
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 1045
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 14370
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 220
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 1045
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 1045
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 1045
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 46
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 7526
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 8063
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 9297
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 9297
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 5607
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - true: 25
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 9297
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 16131
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 9297
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 11172
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 234
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 307
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 1190
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 2980
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 8301
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 8
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 747
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1727: 108
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1730: 108
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 19139
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1723: 108
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 13061
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 2441
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1724: 108
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 1944
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 640
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 640
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 414
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 46
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 104
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 1928
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 34
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 256
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1816
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 1928
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 6513
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 2083
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 428
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 18395
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 2580
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 318
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 19929
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 5353
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 233
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 465
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 6564
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 18329
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 83
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 318
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 468
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 18734
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 12479
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 29945
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 2244
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 2174
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 327
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 59
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 46
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 286
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 19706
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 3440
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 3919
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 220
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 21443
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 1107
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 10434
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 368
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 5757
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 5678
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 153
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 5757
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 10441
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 8103
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - true: 1
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 8103
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 1
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 8103
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 18801
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 254
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 8103
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 31949
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 220
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 8103
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 8103
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 220
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 3616
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 35
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 4855
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 12281
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 12281
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 90
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 28175
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 1107
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 7820
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 5607
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 134
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 3839
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 122
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 304
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 5281
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 2580
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 594
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 4444
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 219
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 4318
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 15
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 521
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 220
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 2022
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 1045
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 120
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 7005
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 1575
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 7005
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 14767
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 16737
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 767
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 46
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 32
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 1101
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 4844
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 34
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - true: 13
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 10317
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 35255
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 12
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 6461
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 521
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 900
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 3161
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 6886
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 12
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 6794
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 5956
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 37460
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 220
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 37460
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 3192
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 5757
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 18949
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 220
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - true: 25
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 5994
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 18782
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: root-Branch: 898
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 220
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 122
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 531: 521
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 530: 521
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 22630
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 5433
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - false: 169
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 3440
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 414
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 12891
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 95
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 220
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 220
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 7003
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 220
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1446: 46
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 1
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 2060
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 116
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 9724
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 809
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 622: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 5505
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 43
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 6094
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 24
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 43
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 12
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 37460
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 66
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 846
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 37460
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 1190
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 37460
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 37460
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 5574
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 1971
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 37460
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 428
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 37460
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 4495
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 31230
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1706: 220
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 46
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 2090
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1703: 220
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 12427
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1709: 220
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1708: 220
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1707: 220
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1713: 220
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1712: 220
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: Line 1132: 898
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 12427
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 18409
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.isOptionalArg()Z: Line 1935: 46
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 18547
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 747
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 46
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 640
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 471
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 28304
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 46
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 40510
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 46
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 2918
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 10269
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 4207
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: Line 889: 318
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 13578
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 21062
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 1627
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 3294
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 5226
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 2441
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 220
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 220
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 220
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 9297
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 8609
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 1778
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 11944
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 898
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 318
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 304
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 517
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 220
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 2918
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 304
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 15855
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 220
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 4818
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 46
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 864
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 521
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 12
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 19172
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 6481
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 3440
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 4695
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 521
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 2244
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 5950
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 9297
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 4495
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 1928
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 10409
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 5437
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 25369
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 220
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 2522
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 4207
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 15748
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 89
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 1620
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 89
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 414
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 31953
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 93982
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 414
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 95
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1818: 46
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1813: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 20221
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 4495
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 389
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1809: 46
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 891
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 4318
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 37410
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 49
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 9106
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 98426
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 5491
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 1045
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 1045
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - true: 11
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 220
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 2083
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 97
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 220
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 6447
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 46
Number of times BBC is called in total: 5576039
* Search finished after 605s and 557 generations, 261706 statements, best individual has fitness: 2819.0
* Minimizing test suite
[MASTER] 10:26:49.318 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 794
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 714
* Number of covered goals: 619
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 464
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 4536
* Number of covered goals: 2245
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 579
* Generated 761 tests with total length 10747
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:27:54.435 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.68315% of time used, but only 55/761 tests minimized), falling back to using all assertions
[MASTER] 10:28:13.576 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 15%
* Compiling and checking tests
[MASTER] 10:28:22.452 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 9 seconds more than allowed.
[MASTER] 10:28:27.009 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_71_1628159306842/com/google/javascript/rhino/Node_71_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_71_1628159306842/com/google/javascript/rhino/Node_71_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:27.009 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:27.009 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:27.012 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 338
[MASTER] 10:28:27.014 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_71_1628159306842/com/google/javascript/rhino/Node_71_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:26 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_71_tmp__ESTest extends Node_71_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("");
22:       assertNotNull(node0);
23:       assertFalse(node0.isCase());
24:       assertFalse(node0.isIn());
25:       assertEquals((-1), node0.getCharno());
26:       assertFalse(node0.isNE());
27:       assertFalse(node0.isIf());
28:       assertFalse(node0.isSwitch());
29:       assertFalse(node0.isDelProp());
30:       assertFalse(node0.isEmpty());
31:       assertFalse(node0.isFalse());
32:       assertFalse(node0.isThrow());
33:       assertFalse(node0.isInc());
34:       assertFalse(node0.isDefaultCase());
35:       assertEquals(40, node0.getType());
36:       assertFalse(node0.isAnd());
37:       assertFalse(node0.isFunction());
38:       assertFalse(node0.isDebugger());
39:       assertFalse(node0.isObjectLit());
40:       assertFalse(node0.isNot());
41:       assertFalse(node0.isTrue());
42:       assertFalse(node0.isExprResult());
43:       assertFalse(node0.isBreak());
44:       assertFalse(node0.isVoid());
45:       assertFalse(node0.isGetElem());
46:       assertFalse(node0.isCall());
47:       assertEquals((-1), node0.getSourcePosition());
48:       assertFalse(node0.isTypeOf());
49:       assertFalse(node0.hasChildren());
50:       assertFalse(node0.isComma());
51:       assertFalse(node0.isDec());
52:       assertFalse(node0.isAssign());
53:       assertFalse(node0.isReturn());
54:       assertFalse(node0.isGetProp());
55:       assertFalse(node0.isContinue());
56:       assertFalse(node0.isWhile());
57:       assertFalse(node0.hasMoreThanOneChild());
58:       assertFalse(node0.isOr());
59:       assertEquals((-1), node0.getLineno());
60:       assertFalse(node0.isLabelName());
61:       assertFalse(node0.isName());
62:       assertFalse(node0.isVar());
63:       assertFalse(node0.isCast());
64:       assertFalse(node0.isNull());
65:       assertFalse(node0.isNew());
66:       assertFalse(node0.isAdd());
67:       assertFalse(node0.isLabel());
68:       assertFalse(node0.isAssignAdd());
69:       assertFalse(node0.isSetterDef());
70:       assertFalse(node0.isDo());
71:       assertFalse(node0.isWith());
72:       assertFalse(node0.isCatch());
73:       assertFalse(node0.isRegExp());
74:       assertEquals(0, node0.getChildCount());
75:       assertFalse(node0.isParamList());
76:       assertFalse(node0.isInstanceOf());
77:       assertFalse(node0.isArrayLit());
78:       assertFalse(node0.isFor());
79:       assertFalse(node0.isStringKey());
80:       assertFalse(node0.isNumber());
81:       assertFalse(node0.isHook());
82:       assertFalse(node0.isThis());
83:       assertFalse(node0.isGetterDef());
84:       assertFalse(node0.isBlock());
85:       assertTrue(node0.isString());
86:       assertFalse(node0.isScript());
87:       assertFalse(node0.hasOneChild());
88:       assertFalse(node0.isTry());
89:       assertEquals(56, Node.CHANGE_TIME);
90:       assertEquals(47, Node.IS_DISPATCHER);
91:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
92:       assertEquals(29, Node.JSDOC_INFO_PROP);
93:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
94:       assertEquals(2, Node.POST_FLAG);
95:       assertEquals(51, Node.STATIC_SOURCE_FILE);
96:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
97:       assertEquals(46, Node.IS_NAMESPACE);
98:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
99:       assertEquals(37, Node.OPT_ARG_NAME);
100:       assertEquals(49, Node.DIRECT_EVAL);
101:       assertEquals(15, Node.NO_SIDE_EFFECTS);
102:       assertEquals(57, Node.LAST_PROP);
103:       assertEquals(36, Node.QUOTED_PROP);
104:       assertEquals(30, Node.VAR_ARGS_NAME);
105:       assertEquals(52, Node.LENGTH);
106:       assertEquals(55, Node.INFERRED_FUNCTION);
107:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
108:       assertEquals(53, Node.INPUT_ID);
109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
110:       assertEquals(39, Node.EMPTY_BLOCK);
111:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
112:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
113:       assertEquals(8, Node.FLAG_NO_THROWS);
114:       assertEquals(50, Node.FREE_CALL);
115:       assertEquals(57, Node.REFLECTED_OBJECT);
116:       assertEquals(4095, Node.COLUMN_MASK);
117:       assertEquals(40, Node.ORIGINALNAME_PROP);
118:       assertEquals(48, Node.DIRECTIVES);
119:       assertEquals(43, Node.IS_CONSTANT_NAME);
120:       assertEquals(54, Node.SLASH_V);
121:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
122:       assertEquals(12, Node.COLUMN_BITS);
123:       assertEquals(1, Node.DECR_FLAG);
124:       assertEquals(32, Node.INCRDECR_PROP);
125:       
126:       boolean boolean0 = node0.isWhile();
127:       assertFalse(boolean0);
128:       assertFalse(node0.isCase());
129:       assertFalse(node0.isIn());
130:       assertEquals((-1), node0.getCharno());
131:       assertFalse(node0.isNE());
132:       assertFalse(node0.isIf());
133:       assertFalse(node0.isSwitch());
134:       assertFalse(node0.isDelProp());
135:       assertFalse(node0.isEmpty());
136:       assertFalse(node0.isFalse());
137:       assertFalse(node0.isThrow());
138:       assertFalse(node0.isInc());
139:       assertFalse(node0.isDefaultCase());
140:       assertEquals(40, node0.getType());
141:       assertFalse(node0.isAnd());
142:       assertFalse(node0.isFunction());
143:       assertFalse(node0.isDebugger());
144:       assertFalse(node0.isObjectLit());
145:       assertFalse(node0.isNot());
146:       assertFalse(node0.isTrue());
147:       assertFalse(node0.isExprResult());
148:       assertFalse(node0.isBreak());
149:       assertFalse(node0.isVoid());
150:       assertFalse(node0.isGetElem());
151:       assertFalse(node0.isCall());
152:       assertEquals((-1), node0.getSourcePosition());
153:       assertFalse(node0.isTypeOf());
154:       assertFalse(node0.hasChildren());
155:       assertFalse(node0.isComma());
156:       assertFalse(node0.isDec());
157:       assertFalse(node0.isAssign());
158:       assertFalse(node0.isReturn());
159:       assertFalse(node0.isGetProp());
160:       assertFalse(node0.isContinue());
161:       assertFalse(node0.isWhile());
162:       assertFalse(node0.hasMoreThanOneChild());
163:       assertFalse(node0.isOr());
164:       assertEquals((-1), node0.getLineno());
165:       assertFalse(node0.isLabelName());
166:       assertFalse(node0.isName());
167:       assertFalse(node0.isVar());
168:       assertFalse(node0.isCast());
169:       assertFalse(node0.isNull());
170:       assertFalse(node0.isNew());
171:       assertFalse(node0.isAdd());
172:       assertFalse(node0.isLabel());
173:       assertFalse(node0.isAssignAdd());
174:       assertFalse(node0.isSetterDef());
175:       assertFalse(node0.isDo());
176:       assertFalse(node0.isWith());
177:       assertFalse(node0.isCatch());
178:       assertFalse(node0.isRegExp());
179:       assertEquals(0, node0.getChildCount());
180:       assertFalse(node0.isParamList());
181:       assertFalse(node0.isInstanceOf());
182:       assertFalse(node0.isArrayLit());
183:       assertFalse(node0.isFor());
184:       assertFalse(node0.isStringKey());
185:       assertFalse(node0.isNumber());
186:       assertFalse(node0.isHook());
187:       assertFalse(node0.isThis());
188:       assertFalse(node0.isGetterDef());
189:       assertFalse(node0.isBlock());
190:       assertTrue(node0.isString());
191:       assertFalse(node0.isScript());
192:       assertFalse(node0.hasOneChild());
193:       assertFalse(node0.isTry());
194:       assertEquals(56, Node.CHANGE_TIME);
195:       assertEquals(47, Node.IS_DISPATCHER);
196:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
197:       assertEquals(29, Node.JSDOC_INFO_PROP);
198:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
199:       assertEquals(2, Node.POST_FLAG);
200:       assertEquals(51, Node.STATIC_SOURCE_FILE);
201:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
202:       assertEquals(46, Node.IS_NAMESPACE);
203:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
204:       assertEquals(37, Node.OPT_ARG_NAME);
205:       assertEquals(49, Node.DIRECT_EVAL);
206:       assertEquals(15, Node.NO_SIDE_EFFECTS);
207:       assertEquals(57, Node.LAST_PROP);
208:       assertEquals(36, Node.QUOTED_PROP);
209:       assertEquals(30, Node.VAR_ARGS_NAME);
210:       assertEquals(52, Node.LENGTH);
211:       assertEquals(55, Node.INFERRED_FUNCTION);
212:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
213:       assertEquals(53, Node.INPUT_ID);
214:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
215:       assertEquals(39, Node.EMPTY_BLOCK);
216:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
217:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
218:       assertEquals(8, Node.FLAG_NO_THROWS);
219:       assertEquals(50, Node.FREE_CALL);
220:       assertEquals(57, Node.REFLECTED_OBJECT);
221:       assertEquals(4095, Node.COLUMN_MASK);
222:       assertEquals(40, Node.ORIGINALNAME_PROP);
223:       assertEquals(48, Node.DIRECTIVES);
224:       assertEquals(43, Node.IS_CONSTANT_NAME);
225:       assertEquals(54, Node.SLASH_V);
226:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
227:       assertEquals(12, Node.COLUMN_BITS);
228:       assertEquals(1, Node.DECR_FLAG);
229:       assertEquals(32, Node.INCRDECR_PROP);
230:       
231:       boolean boolean1 = node0.isTypeOf();
232:       assertFalse(boolean1);
233:       assertTrue(boolean1 == boolean0);
234:       assertFalse(node0.isCase());
235:       assertFalse(node0.isIn());
236:       assertEquals((-1), node0.getCharno());
237:       assertFalse(node0.isNE());
238:       assertFalse(node0.isIf());
239:       assertFalse(node0.isSwitch());
240:       assertFalse(node0.isDelProp());
241:       assertFalse(node0.isEmpty());
242:       assertFalse(node0.isFalse());
243:       assertFalse(node0.isThrow());
244:       assertFalse(node0.isInc());
245:       assertFalse(node0.isDefaultCase());
246:       assertEquals(40, node0.getType());
247:       assertFalse(node0.isAnd());
248:       assertFalse(node0.isFunction());
249:       assertFalse(node0.isDebugger());
250:       assertFalse(node0.isObjectLit());
251:       assertFalse(node0.isNot());
252:       assertFalse(node0.isTrue());
253:       assertFalse(node0.isExprResult());
254:       assertFalse(node0.isBreak());
255:       assertFalse(node0.isVoid());
256:       assertFalse(node0.isGetElem());
257:       assertFalse(node0.isCall());
258:       assertEquals((-1), node0.getSourcePosition());
259:       assertFalse(node0.isTypeOf());
260:       assertFalse(node0.hasChildren());
261:       assertFalse(node0.isComma());
262:       assertFalse(node0.isDec());
263:       assertFalse(node0.isAssign());
264:       assertFalse(node0.isReturn());
265:       assertFalse(node0.isGetProp());
266:       assertFalse(node0.isContinue());
267:       assertFalse(node0.isWhile());
268:       assertFalse(node0.hasMoreThanOneChild());
269:       assertFalse(node0.isOr());
270:       assertEquals((-1), node0.getLineno());
271:       assertFalse(node0.isLabelName());
272:       assertFalse(node0.isName());
273:       assertFalse(node0.isVar());
274:       assertFalse(node0.isCast());
275:       assertFalse(node0.isNull());
276:       assertFalse(node0.isNew());
277:       assertFalse(node0.isAdd());
278:       assertFalse(node0.isLabel());
279:       assertFalse(node0.isAssignAdd());
280:       assertFalse(node0.isSetterDef());
281:       assertFalse(node0.isDo());
282:       assertFalse(node0.isWith());
283:       assertFalse(node0.isCatch());
284:       assertFalse(node0.isRegExp());
285:       assertEquals(0, node0.getChildCount());
286:       assertFalse(node0.isParamList());
287:       assertFalse(node0.isInstanceOf());
288:       assertFalse(node0.isArrayLit());
289:       assertFalse(node0.isFor());
290:       assertFalse(node0.isStringKey());
291:       assertFalse(node0.isNumber());
292:       assertFalse(node0.isHook());
293:       assertFalse(node0.isThis());
294:       assertFalse(node0.isGetterDef());
295:       assertFalse(node0.isBlock());
296:       assertTrue(node0.isString());
297:       assertFalse(node0.isScript());
298:       assertFalse(node0.hasOneChild());
299:       assertFalse(node0.isTry());
300:       assertEquals(56, Node.CHANGE_TIME);
301:       assertEquals(47, Node.IS_DISPATCHER);
302:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
303:       assertEquals(29, Node.JSDOC_INFO_PROP);
304:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
305:       assertEquals(2, Node.POST_FLAG);
306:       assertEquals(51, Node.STATIC_SOURCE_FILE);
307:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
308:       assertEquals(46, Node.IS_NAMESPACE);
309:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
310:       assertEquals(37, Node.OPT_ARG_NAME);
311:       assertEquals(49, Node.DIRECT_EVAL);
312:       assertEquals(15, Node.NO_SIDE_EFFECTS);
313:       assertEquals(57, Node.LAST_PROP);
314:       assertEquals(36, Node.QUOTED_PROP);
315:       assertEquals(30, Node.VAR_ARGS_NAME);
316:       assertEquals(52, Node.LENGTH);
317:       assertEquals(55, Node.INFERRED_FUNCTION);
318:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
319:       assertEquals(53, Node.INPUT_ID);
320:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
321:       assertEquals(39, Node.EMPTY_BLOCK);
322:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
323:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
324:       assertEquals(8, Node.FLAG_NO_THROWS);
325:       assertEquals(50, Node.FREE_CALL);
326:       assertEquals(57, Node.REFLECTED_OBJECT);
327:       assertEquals(4095, Node.COLUMN_MASK);
328:       assertEquals(40, Node.ORIGINALNAME_PROP);
329:       assertEquals(48, Node.DIRECTIVES);
330:       assertEquals(43, Node.IS_CONSTANT_NAME);
331:       assertEquals(54, Node.SLASH_V);
332:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
333:       assertEquals(12, Node.COLUMN_BITS);
334:       assertEquals(1, Node.DECR_FLAG);
335:       assertEquals(32, Node.INCRDECR_PROP);
336:       
337:       Iterable<Node> iterable0 = node0.children();
338:       assertFalse(iterable0.contains(node0));
339:       assertNotNull(iterable0);
340:       assertFalse(node0.isCase());
341:       assertFalse(node0.isIn());
342:       assertEquals((-1), node0.getCharno());
343:       assertFalse(node0.isNE());
344:       assertFalse(node0.isIf());
345:       assertFalse(node0.isSwitch());
346:       assertFalse(node0.isDelProp());
347:       assertFalse(node0.isEmpty());
348:       assertFalse(node0.isFalse());
349:       assertFalse(node0.isThrow());
350:       assertFalse(node0.isInc());
351:       assertFalse(node0.isDefaultCase());
352:       assertEquals(40, node0.getType());
353:       assertFalse(node0.isAnd());
354:       assertFalse(node0.isFunction());
355:       assertFalse(node0.isDebugger());
356:       assertFalse(node0.isObjectLit());
357:       assertFalse(node0.isNot());
358:       assertFalse(node0.isTrue());
359:       assertFalse(node0.isExprResult());
360:       assertFalse(node0.isBreak());
361:       assertFalse(node0.isVoid());
362:       assertFalse(node0.isGetElem());
363:       assertFalse(node0.isCall());
364:       assertEquals((-1), node0.getSourcePosition());
365:       assertFalse(node0.isTypeOf());
366:       assertFalse(node0.hasChildren());
367:       assertFalse(node0.isComma());
368:       assertFalse(node0.isDec());
369:       assertFalse(node0.isAssign());
370:       assertFalse(node0.isReturn());
371:       assertFalse(node0.isGetProp());
372:       assertFalse(node0.isContinue());
373:       assertFalse(node0.isWhile());
374:       assertFalse(node0.hasMoreThanOneChild());
375:       assertFalse(node0.isOr());
376:       assertEquals((-1), node0.getLineno());
377:       assertFalse(node0.isLabelName());
378:       assertFalse(node0.isName());
379:       assertFalse(node0.isVar());
380:       assertFalse(node0.isCast());
381:       assertFalse(node0.isNull());
382:       assertFalse(node0.isNew());
383:       assertFalse(node0.isAdd());
384:       assertFalse(node0.isLabel());
385:       assertFalse(node0.isAssignAdd());
386:       assertFalse(node0.isSetterDef());
387:       assertFalse(node0.isDo());
388:       assertFalse(node0.isWith());
389:       assertFalse(node0.isCatch());
390:       assertFalse(node0.isRegExp());
391:       assertEquals(0, node0.getChildCount());
392:       assertFalse(node0.isParamList());
393:       assertFalse(node0.isInstanceOf());
394:       assertFalse(node0.isArrayLit());
395:       assertFalse(node0.isFor());
396:       assertFalse(node0.isStringKey());
397:       assertFalse(node0.isNumber());
398:       assertFalse(node0.isHook());
399:       assertFalse(node0.isThis());
400:       assertFalse(node0.isGetterDef());
401:       assertFalse(node0.isBlock());
402:       assertTrue(node0.isString());
403:       assertFalse(node0.isScript());
404:       assertFalse(node0.hasOneChild());
405:       assertFalse(node0.isTry());
406:       assertEquals(56, Node.CHANGE_TIME);
407:       assertEquals(47, Node.IS_DISPATCHER);
408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
409:       assertEquals(29, Node.JSDOC_INFO_PROP);
410:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
411:       assertEquals(2, Node.POST_FLAG);
412:       assertEquals(51, Node.STATIC_SOURCE_FILE);
413:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
414:       assertEquals(46, Node.IS_NAMESPACE);
415:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
416:       assertEquals(37, Node.OPT_ARG_NAME);
417:       assertEquals(49, Node.DIRECT_EVAL);
418:       assertEquals(15, Node.NO_SIDE_EFFECTS);
419:       assertEquals(57, Node.LAST_PROP);
420:       assertEquals(36, Node.QUOTED_PROP);
421:       assertEquals(30, Node.VAR_ARGS_NAME);
422:       assertEquals(52, Node.LENGTH);
423:       assertEquals(55, Node.INFERRED_FUNCTION);
424:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
425:       assertEquals(53, Node.INPUT_ID);
426:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
427:       assertEquals(39, Node.EMPTY_BLOCK);
428:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
429:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
430:       assertEquals(8, Node.FLAG_NO_THROWS);
431:       assertEquals(50, Node.FREE_CALL);
432:       assertEquals(57, Node.REFLECTED_OBJECT);
433:       assertEquals(4095, Node.COLUMN_MASK);
434:       assertEquals(40, Node.ORIGINALNAME_PROP);
435:       assertEquals(48, Node.DIRECTIVES);
436:       assertEquals(43, Node.IS_CONSTANT_NAME);
437:       assertEquals(54, Node.SLASH_V);
438:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
439:       assertEquals(12, Node.COLUMN_BITS);
440:       assertEquals(1, Node.DECR_FLAG);
441:       assertEquals(32, Node.INCRDECR_PROP);
442:       
443:       boolean boolean2 = node0.isVoid();
444:       assertFalse(boolean2);
445:       assertTrue(boolean2 == boolean0);
446:       assertTrue(boolean2 == boolean1);
447:       assertFalse(node0.isCase());
448:       assertFalse(node0.isIn());
449:       assertEquals((-1), node0.getCharno());
450:       assertFalse(node0.isNE());
451:       assertFalse(node0.isIf());
452:       assertFalse(node0.isSwitch());
453:       assertFalse(node0.isDelProp());
454:       assertFalse(node0.isEmpty());
455:       assertFalse(node0.isFalse());
456:       assertFalse(node0.isThrow());
457:       assertFalse(node0.isInc());
458:       assertFalse(node0.isDefaultCase());
459:       assertEquals(40, node0.getType());
460:       assertFalse(node0.isAnd());
461:       assertFalse(node0.isFunction());
462:       assertFalse(node0.isDebugger());
463:       assertFalse(node0.isObjectLit());
464:       assertFalse(node0.isNot());
465:       assertFalse(node0.isTrue());
466:       assertFalse(node0.isExprResult());
467:       assertFalse(node0.isBreak());
468:       assertFalse(node0.isVoid());
469:       assertFalse(node0.isGetElem());
470:       assertFalse(node0.isCall());
471:       assertEquals((-1), node0.getSourcePosition());
472:       assertFalse(node0.isTypeOf());
473:       assertFalse(node0.hasChildren());
474:       assertFalse(node0.isComma());
475:       assertFalse(node0.isDec());
476:       assertFalse(node0.isAssign());
477:       assertFalse(node0.isReturn());
478:       assertFalse(node0.isGetProp());
479:       assertFalse(node0.isContinue());
480:       assertFalse(node0.isWhile());
481:       assertFalse(node0.hasMoreThanOneChild());
482:       assertFalse(node0.isOr());
483:       assertEquals((-1), node0.getLineno());
484:       assertFalse(node0.isLabelName());
485:       assertFalse(node0.isName());
486:       assertFalse(node0.isVar());
487:       assertFalse(node0.isCast());
488:       assertFalse(node0.isNull());
489:       assertFalse(node0.isNew());
490:       assertFalse(node0.isAdd());
491:       assertFalse(node0.isLabel());
492:       assertFalse(node0.isAssignAdd());
493:       assertFalse(node0.isSetterDef());
494:       assertFalse(node0.isDo());
495:       assertFalse(node0.isWith());
496:       assertFalse(node0.isCatch());
497:       assertFalse(node0.isRegExp());
498:       assertEquals(0, node0.getChildCount());
499:       assertFalse(node0.isParamList());
500:       assertFalse(node0.isInstanceOf());
501:       assertFalse(node0.isArrayLit());
502:       assertFalse(node0.isFor());
503:       assertFalse(node0.isStringKey());
504:       assertFalse(node0.isNumber());
505:       assertFalse(node0.isHook());
506:       assertFalse(node0.isThis());
507:       assertFalse(node0.isGetterDef());
508:       assertFalse(node0.isBlock());
509:       assertTrue(node0.isString());
510:       assertFalse(node0.isScript());
511:       assertFalse(node0.hasOneChild());
512:       assertFalse(node0.isTry());
513:       assertEquals(56, Node.CHANGE_TIME);
514:       assertEquals(47, Node.IS_DISPATCHER);
515:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
516:       assertEquals(29, Node.JSDOC_INFO_PROP);
517:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
518:       assertEquals(2, Node.POST_FLAG);
519:       assertEquals(51, Node.STATIC_SOURCE_FILE);
520:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
521:       assertEquals(46, Node.IS_NAMESPACE);
522:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
523:       assertEquals(37, Node.OPT_ARG_NAME);
524:       assertEquals(49, Node.DIRECT_EVAL);
525:       assertEquals(15, Node.NO_SIDE_EFFECTS);
526:       assertEquals(57, Node.LAST_PROP);
527:       assertEquals(36, Node.QUOTED_PROP);
528:       assertEquals(30, Node.VAR_ARGS_NAME);
529:       assertEquals(52, Node.LENGTH);
530:       assertEquals(55, Node.INFERRED_FUNCTION);
531:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
532:       assertEquals(53, Node.INPUT_ID);
533:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
534:       assertEquals(39, Node.EMPTY_BLOCK);
535:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
536:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
537:       assertEquals(8, Node.FLAG_NO_THROWS);
538:       assertEquals(50, Node.FREE_CALL);
539:       assertEquals(57, Node.REFLECTED_OBJECT);
540:       assertEquals(4095, Node.COLUMN_MASK);
541:       assertEquals(40, Node.ORIGINALNAME_PROP);
542:       assertEquals(48, Node.DIRECTIVES);
543:       assertEquals(43, Node.IS_CONSTANT_NAME);
544:       assertEquals(54, Node.SLASH_V);
545:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
546:       assertEquals(12, Node.COLUMN_BITS);
547:       assertEquals(1, Node.DECR_FLAG);
548:       assertEquals(32, Node.INCRDECR_PROP);
549:       
550:       boolean boolean3 = node0.isDebugger();
551:       assertFalse(boolean3);
552:       assertTrue(boolean3 == boolean1);
553:       assertTrue(boolean3 == boolean2);
554:       assertTrue(boolean3 == boolean0);
555:       assertFalse(node0.isCase());
556:       assertFalse(node0.isIn());
557:       assertEquals((-1), node0.getCharno());
558:       assertFalse(node0.isNE());
559:       assertFalse(node0.isIf());
560:       assertFalse(node0.isSwitch());
561:       assertFalse(node0.isDelProp());
562:       assertFalse(node0.isEmpty());
563:       assertFalse(node0.isFalse());
564:       assertFalse(node0.isThrow());
565:       assertFalse(node0.isInc());
566:       assertFalse(node0.isDefaultCase());
567:       assertEquals(40, node0.getType());
568:       assertFalse(node0.isAnd());
569:       assertFalse(node0.isFunction());
570:       assertFalse(node0.isDebugger());
571:       assertFalse(node0.isObjectLit());
572:       assertFalse(node0.isNot());
573:       assertFalse(node0.isTrue());
574:       assertFalse(node0.isExprResult());
575:       assertFalse(node0.isBreak());
576:       assertFalse(node0.isVoid());
577:       assertFalse(node0.isGetElem());
578:       assertFalse(node0.isCall());
579:       assertEquals((-1), node0.getSourcePosition());
580:       assertFalse(node0.isTypeOf());
581:       assertFalse(node0.hasChildren());
582:       assertFalse(node0.isComma());
583:       assertFalse(node0.isDec());
584:       assertFalse(node0.isAssign());
585:       assertFalse(node0.isReturn());
586:       assertFalse(node0.isGetProp());
587:       assertFalse(node0.isContinue());
588:       assertFalse(node0.isWhile());
589:       assertFalse(node0.hasMoreThanOneChild());
590:       assertFalse(node0.isOr());
591:       assertEquals((-1), node0.getLineno());
592:       assertFalse(node0.isLabelName());
593:       assertFalse(node0.isName());
594:       assertFalse(node0.isVar());
595:       assertFalse(node0.isCast());
596:       assertFalse(node0.isNull());
597:       assertFalse(node0.isNew());
598:       assertFalse(node0.isAdd());
599:       assertFalse(node0.isLabel());
600:       assertFalse(node0.isAssignAdd());
601:       assertFalse(node0.isSetterDef());
602:       assertFalse(node0.isDo());
603:       assertFalse(node0.isWith());
604:       assertFalse(node0.isCatch());
605:       assertFalse(node0.isRegExp());
606:       assertEquals(0, node0.getChildCount());
607:       assertFalse(node0.isParamList());
608:       assertFalse(node0.isInstanceOf());
609:       assertFalse(node0.isArrayLit());
610:       assertFalse(node0.isFor());
611:       assertFalse(node0.isStringKey());
612:       assertFalse(node0.isNumber());
613:       assertFalse(node0.isHook());
614:       assertFalse(node0.isThis());
615:       assertFalse(node0.isGetterDef());
616:       assertFalse(node0.isBlock());
617:       assertTrue(node0.isString());
618:       assertFalse(node0.isScript());
619:       assertFalse(node0.hasOneChild());
620:       assertFalse(node0.isTry());
621:       assertEquals(56, Node.CHANGE_TIME);
622:       assertEquals(47, Node.IS_DISPATCHER);
623:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
624:       assertEquals(29, Node.JSDOC_INFO_PROP);
625:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
626:       assertEquals(2, Node.POST_FLAG);
627:       assertEquals(51, Node.STATIC_SOURCE_FILE);
628:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
629:       assertEquals(46, Node.IS_NAMESPACE);
630:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
631:       assertEquals(37, Node.OPT_ARG_NAME);
632:       assertEquals(49, Node.DIRECT_EVAL);
633:       assertEquals(15, Node.NO_SIDE_EFFECTS);
634:       assertEquals(57, Node.LAST_PROP);
635:       assertEquals(36, Node.QUOTED_PROP);
636:       assertEquals(30, Node.VAR_ARGS_NAME);
637:       assertEquals(52, Node.LENGTH);
638:       assertEquals(55, Node.INFERRED_FUNCTION);
639:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
640:       assertEquals(53, Node.INPUT_ID);
641:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
642:       assertEquals(39, Node.EMPTY_BLOCK);
643:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
644:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
645:       assertEquals(8, Node.FLAG_NO_THROWS);
646:       assertEquals(50, Node.FREE_CALL);
647:       assertEquals(57, Node.REFLECTED_OBJECT);
648:       assertEquals(4095, Node.COLUMN_MASK);
649:       assertEquals(40, Node.ORIGINALNAME_PROP);
650:       assertEquals(48, Node.DIRECTIVES);
651:       assertEquals(43, Node.IS_CONSTANT_NAME);
652:       assertEquals(54, Node.SLASH_V);
653:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
654:       assertEquals(12, Node.COLUMN_BITS);
655:       assertEquals(1, Node.DECR_FLAG);
656:       assertEquals(32, Node.INCRDECR_PROP);
657:       
658:       boolean boolean4 = node0.isCall();
659:       assertFalse(boolean4);
660:       assertTrue(boolean4 == boolean2);
661:       assertTrue(boolean4 == boolean3);
662:       assertTrue(boolean4 == boolean0);
663:       assertTrue(boolean4 == boolean1);
664:       assertFalse(node0.isCase());
665:       assertFalse(node0.isIn());
666:       assertEquals((-1), node0.getCharno());
667:       assertFalse(node0.isNE());
668:       assertFalse(node0.isIf());
669:       assertFalse(node0.isSwitch());
670:       assertFalse(node0.isDelProp());
671:       assertFalse(node0.isEmpty());
672:       assertFalse(node0.isFalse());
673:       assertFalse(node0.isThrow());
674:       assertFalse(node0.isInc());
675:       assertFalse(node0.isDefaultCase());
676:       assertEquals(40, node0.getType());
677:       assertFalse(node0.isAnd());
678:       assertFalse(node0.isFunction());
679:       assertFalse(node0.isDebugger());
680:       assertFalse(node0.isObjectLit());
681:       assertFalse(node0.isNot());
682:       assertFalse(node0.isTrue());
683:       assertFalse(node0.isExprResult());
684:       assertFalse(node0.isBreak());
685:       assertFalse(node0.isVoid());
686:       assertFalse(node0.isGetElem());
687:       assertFalse(node0.isCall());
688:       assertEquals((-1), node0.getSourcePosition());
689:       assertFalse(node0.isTypeOf());
690:       assertFalse(node0.hasChildren());
691:       assertFalse(node0.isComma());
692:       assertFalse(node0.isDec());
693:       assertFalse(node0.isAssign());
694:       assertFalse(node0.isReturn());
695:       assertFalse(node0.isGetProp());
696:       assertFalse(node0.isContinue());
697:       assertFalse(node0.isWhile());
698:       assertFalse(node0.hasMoreThanOneChild());
699:       assertFalse(node0.isOr());
700:       assertEquals((-1), node0.getLineno());
701:       assertFalse(node0.isLabelName());
702:       assertFalse(node0.isName());
703:       assertFalse(node0.isVar());
704:       assertFalse(node0.isCast());
705:       assertFalse(node0.isNull());
706:       assertFalse(node0.isNew());
707:       assertFalse(node0.isAdd());
708:       assertFalse(node0.isLabel());
709:       assertFalse(node0.isAssignAdd());
710:       assertFalse(node0.isSetterDef());
711:       assertFalse(node0.isDo());
712:       assertFalse(node0.isWith());
713:       assertFalse(node0.isCatch());
714:       assertFalse(node0.isRegExp());
715:       assertEquals(0, node0.getChildCount());
716:       assertFalse(node0.isParamList());
717:       assertFalse(node0.isInstanceOf());
718:       assertFalse(node0.isArrayLit());
719:       assertFalse(node0.isFor());
720:       assertFalse(node0.isStringKey());
721:       assertFalse(node0.isNumber());
722:       assertFalse(node0.isHook());
723:       assertFalse(node0.isThis());
724:       assertFalse(node0.isGetterDef());
725:       assertFalse(node0.isBlock());
726:       assertTrue(node0.isString());
727:       assertFalse(node0.isScript());
728:       assertFalse(node0.hasOneChild());
729:       assertFalse(node0.isTry());
730:       assertEquals(56, Node.CHANGE_TIME);
731:       assertEquals(47, Node.IS_DISPATCHER);
732:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
733:       assertEquals(29, Node.JSDOC_INFO_PROP);
734:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
735:       assertEquals(2, Node.POST_FLAG);
736:       assertEquals(51, Node.STATIC_SOURCE_FILE);
737:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
738:       assertEquals(46, Node.IS_NAMESPACE);
739:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
740:       assertEquals(37, Node.OPT_ARG_NAME);
741:       assertEquals(49, Node.DIRECT_EVAL);
742:       assertEquals(15, Node.NO_SIDE_EFFECTS);
743:       assertEquals(57, Node.LAST_PROP);
744:       assertEquals(36, Node.QUOTED_PROP);
745:       assertEquals(30, Node.VAR_ARGS_NAME);
746:       assertEquals(52, Node.LENGTH);
747:       assertEquals(55, Node.INFERRED_FUNCTION);
748:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
749:       assertEquals(53, Node.INPUT_ID);
750:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
751:       assertEquals(39, Node.EMPTY_BLOCK);
752:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
753:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
754:       assertEquals(8, Node.FLAG_NO_THROWS);
755:       assertEquals(50, Node.FREE_CALL);
756:       assertEquals(57, Node.REFLECTED_OBJECT);
757:       assertEquals(4095, Node.COLUMN_MASK);
758:       assertEquals(40, Node.ORIGINALNAME_PROP);
759:       assertEquals(48, Node.DIRECTIVES);
760:       assertEquals(43, Node.IS_CONSTANT_NAME);
761:       assertEquals(54, Node.SLASH_V);
762:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
763:       assertEquals(12, Node.COLUMN_BITS);
764:       assertEquals(1, Node.DECR_FLAG);
765:       assertEquals(32, Node.INCRDECR_PROP);
766:       
767:       boolean boolean5 = node0.isDelProp();
768:       assertFalse(boolean5);
769:       assertTrue(boolean5 == boolean0);
770:       assertTrue(boolean5 == boolean3);
771:       assertTrue(boolean5 == boolean2);
772:       assertTrue(boolean5 == boolean1);
773:       assertTrue(boolean5 == boolean4);
774:       assertFalse(node0.isCase());
775:       assertFalse(node0.isIn());
776:       assertEquals((-1), node0.getCharno());
777:       assertFalse(node0.isNE());
778:       assertFalse(node0.isIf());
779:       assertFalse(node0.isSwitch());
780:       assertFalse(node0.isDelProp());
781:       assertFalse(node0.isEmpty());
782:       assertFalse(node0.isFalse());
783:       assertFalse(node0.isThrow());
784:       assertFalse(node0.isInc());
785:       assertFalse(node0.isDefaultCase());
786:       assertEquals(40, node0.getType());
787:       assertFalse(node0.isAnd());
788:       assertFalse(node0.isFunction());
789:       assertFalse(node0.isDebugger());
790:       assertFalse(node0.isObjectLit());
791:       assertFalse(node0.isNot());
792:       assertFalse(node0.isTrue());
793:       assertFalse(node0.isExprResult());
794:       assertFalse(node0.isBreak());
795:       assertFalse(node0.isVoid());
796:       assertFalse(node0.isGetElem());
797:       assertFalse(node0.isCall());
798:       assertEquals((-1), node0.getSourcePosition());
799:       assertFalse(node0.isTypeOf());
800:       assertFalse(node0.hasChildren());
801:       assertFalse(node0.isComma());
802:       assertFalse(node0.isDec());
803:       assertFalse(node0.isAssign());
804:       assertFalse(node0.isReturn());
805:       assertFalse(node0.isGetProp());
806:       assertFalse(node0.isContinue());
807:       assertFalse(node0.isWhile());
808:       assertFalse(node0.hasMoreThanOneChild());
809:       assertFalse(node0.isOr());
810:       assertEquals((-1), node0.getLineno());
811:       assertFalse(node0.isLabelName());
812:       assertFalse(node0.isName());
813:       assertFalse(node0.isVar());
814:       assertFalse(node0.isCast());
815:       assertFalse(node0.isNull());
816:       assertFalse(node0.isNew());
817:       assertFalse(node0.isAdd());
818:       assertFalse(node0.isLabel());
819:       assertFalse(node0.isAssignAdd());
820:       assertFalse(node0.isSetterDef());
821:       assertFalse(node0.isDo());
822:       assertFalse(node0.isWith());
823:       assertFalse(node0.isCatch());
824:       assertFalse(node0.isRegExp());
825:       assertEquals(0, node0.getChildCount());
826:       assertFalse(node0.isParamList());
827:       assertFalse(node0.isInstanceOf());
828:       assertFalse(node0.isArrayLit());
829:       assertFalse(node0.isFor());
830:       assertFalse(node0.isStringKey());
831:       assertFalse(node0.isNumber());
832:       assertFalse(node0.isHook());
833:       assertFalse(node0.isThis());
834:       assertFalse(node0.isGetterDef());
835:       assertFalse(node0.isBlock());
836:       assertTrue(node0.isString());
837:       assertFalse(node0.isScript());
838:       assertFalse(node0.hasOneChild());
839:       assertFalse(node0.isTry());
840:       assertEquals(56, Node.CHANGE_TIME);
841:       assertEquals(47, Node.IS_DISPATCHER);
842:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
843:       assertEquals(29, Node.JSDOC_INFO_PROP);
844:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
845:       assertEquals(2, Node.POST_FLAG);
846:       assertEquals(51, Node.STATIC_SOURCE_FILE);
847:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
848:       assertEquals(46, Node.IS_NAMESPACE);
849:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
850:       assertEquals(37, Node.OPT_ARG_NAME);
851:       assertEquals(49, Node.DIRECT_EVAL);
852:       assertEquals(15, Node.NO_SIDE_EFFECTS);
853:       assertEquals(57, Node.LAST_PROP);
854:       assertEquals(36, Node.QUOTED_PROP);
855:       assertEquals(30, Node.VAR_ARGS_NAME);
856:       assertEquals(52, Node.LENGTH);
857:       assertEquals(55, Node.INFERRED_FUNCTION);
858:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
859:       assertEquals(53, Node.INPUT_ID);
860:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
861:       assertEquals(39, Node.EMPTY_BLOCK);
862:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
863:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
864:       assertEquals(8, Node.FLAG_NO_THROWS);
865:       assertEquals(50, Node.FREE_CALL);
866:       assertEquals(57, Node.REFLECTED_OBJECT);
867:       assertEquals(4095, Node.COLUMN_MASK);
868:       assertEquals(40, Node.ORIGINALNAME_PROP);
869:       assertEquals(48, Node.DIRECTIVES);
870:       assertEquals(43, Node.IS_CONSTANT_NAME);
871:       assertEquals(54, Node.SLASH_V);
872:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
873:       assertEquals(12, Node.COLUMN_BITS);
874:       assertEquals(1, Node.DECR_FLAG);
875:       assertEquals(32, Node.INCRDECR_PROP);
876:       
877:       try { 
878:         node0.setDouble((-267.3420189412577));
879:         fail("Expecting exception: UnsupportedOperationException");
880:       
881:       } catch(UnsupportedOperationException e) {
882:          //
883:          // STRING  is not a string node
884:          //
885:          verifyException("com.google.javascript.rhino.Node", e);
886:       }
887:   }
888: }
RegularFileObject[/tmp/EvoSuite_71_1628159306842/com/google/javascript/rhino/Node_71_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:26 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_71_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_71_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_71_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.NamedType",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.JSDocInfo$Marker",
356:       "com.google.common.collect.ImmutableSet",
357:       "com.google.common.collect.EmptyImmutableSet",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 10:28:27.031 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertNotNull(node0);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean0 = node0.isWhile();
assertFalse(boolean0);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean1 = node0.isTypeOf();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean2 = node0.isVoid();
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean3 = node0.isDebugger();
assertFalse(boolean3);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean4 = node0.isCall();
assertFalse(boolean4);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean5 = node0.isDelProp();
assertFalse(boolean5);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

node0.setDouble((-267.3420189412577));

[MASTER] 10:28:29.294 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_81_1628159309091/com/google/javascript/rhino/Node_81_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_81_1628159309091/com/google/javascript/rhino/Node_81_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:29.294 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:29.294 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:29.295 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 338
[MASTER] 10:28:29.297 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_81_1628159309091/com/google/javascript/rhino/Node_81_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:29 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_81_tmp__ESTest extends Node_81_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("");
22:       assertNotNull(node0);
23:       assertEquals(40, node0.getType());
24:       assertFalse(node0.isDefaultCase());
25:       assertFalse(node0.isCatch());
26:       assertFalse(node0.isVoid());
27:       assertFalse(node0.isTry());
28:       assertFalse(node0.isRegExp());
29:       assertFalse(node0.isFunction());
30:       assertEquals(0, node0.getChildCount());
31:       assertFalse(node0.isName());
32:       assertFalse(node0.isEmpty());
33:       assertFalse(node0.isDelProp());
34:       assertFalse(node0.isIf());
35:       assertFalse(node0.isSetterDef());
36:       assertFalse(node0.isCall());
37:       assertFalse(node0.isAdd());
38:       assertFalse(node0.isIn());
39:       assertFalse(node0.isNE());
40:       assertFalse(node0.isNull());
41:       assertFalse(node0.isTrue());
42:       assertFalse(node0.isDo());
43:       assertFalse(node0.isSwitch());
44:       assertFalse(node0.isNew());
45:       assertFalse(node0.isCase());
46:       assertFalse(node0.isAssignAdd());
47:       assertFalse(node0.isBlock());
48:       assertTrue(node0.isString());
49:       assertFalse(node0.hasMoreThanOneChild());
50:       assertFalse(node0.isVar());
51:       assertFalse(node0.isHook());
52:       assertFalse(node0.isLabel());
53:       assertFalse(node0.isLabelName());
54:       assertFalse(node0.isFor());
55:       assertFalse(node0.isGetterDef());
56:       assertFalse(node0.isStringKey());
57:       assertFalse(node0.isNumber());
58:       assertFalse(node0.hasOneChild());
59:       assertFalse(node0.isArrayLit());
60:       assertFalse(node0.isParamList());
61:       assertEquals((-1), node0.getCharno());
62:       assertFalse(node0.isWith());
63:       assertFalse(node0.isNot());
64:       assertFalse(node0.isAnd());
65:       assertFalse(node0.isScript());
66:       assertFalse(node0.isExprResult());
67:       assertFalse(node0.isInstanceOf());
68:       assertFalse(node0.isComma());
69:       assertFalse(node0.isThis());
70:       assertFalse(node0.isAssign());
71:       assertFalse(node0.isThrow());
72:       assertFalse(node0.isGetElem());
73:       assertFalse(node0.isBreak());
74:       assertFalse(node0.isOr());
75:       assertEquals((-1), node0.getLineno());
76:       assertFalse(node0.isContinue());
77:       assertFalse(node0.isWhile());
78:       assertFalse(node0.isInc());
79:       assertFalse(node0.isReturn());
80:       assertFalse(node0.isTypeOf());
81:       assertFalse(node0.isDec());
82:       assertFalse(node0.hasChildren());
83:       assertFalse(node0.isFalse());
84:       assertFalse(node0.isCast());
85:       assertFalse(node0.isGetProp());
86:       assertFalse(node0.isObjectLit());
87:       assertEquals((-1), node0.getSourcePosition());
88:       assertFalse(node0.isDebugger());
89:       assertEquals(8, Node.FLAG_NO_THROWS);
90:       assertEquals(39, Node.EMPTY_BLOCK);
91:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
92:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
93:       assertEquals(48, Node.DIRECTIVES);
94:       assertEquals(4095, Node.COLUMN_MASK);
95:       assertEquals(40, Node.ORIGINALNAME_PROP);
96:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
97:       assertEquals(15, Node.NO_SIDE_EFFECTS);
98:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
99:       assertEquals(57, Node.LAST_PROP);
100:       assertEquals(49, Node.DIRECT_EVAL);
101:       assertEquals(53, Node.INPUT_ID);
102:       assertEquals(57, Node.REFLECTED_OBJECT);
103:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
104:       assertEquals(55, Node.INFERRED_FUNCTION);
105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
106:       assertEquals(52, Node.LENGTH);
107:       assertEquals(36, Node.QUOTED_PROP);
108:       assertEquals(2, Node.POST_FLAG);
109:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
110:       assertEquals(47, Node.IS_DISPATCHER);
111:       assertEquals(56, Node.CHANGE_TIME);
112:       assertEquals(29, Node.JSDOC_INFO_PROP);
113:       assertEquals(37, Node.OPT_ARG_NAME);
114:       assertEquals(32, Node.INCRDECR_PROP);
115:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
116:       assertEquals(12, Node.COLUMN_BITS);
117:       assertEquals(30, Node.VAR_ARGS_NAME);
118:       assertEquals(54, Node.SLASH_V);
119:       assertEquals(43, Node.IS_CONSTANT_NAME);
120:       assertEquals(1, Node.DECR_FLAG);
121:       assertEquals(46, Node.IS_NAMESPACE);
122:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
123:       assertEquals(50, Node.FREE_CALL);
124:       assertEquals(51, Node.STATIC_SOURCE_FILE);
125:       
126:       boolean boolean0 = node0.isWhile();
127:       assertFalse(boolean0);
128:       assertEquals(40, node0.getType());
129:       assertFalse(node0.isDefaultCase());
130:       assertFalse(node0.isCatch());
131:       assertFalse(node0.isVoid());
132:       assertFalse(node0.isTry());
133:       assertFalse(node0.isRegExp());
134:       assertFalse(node0.isFunction());
135:       assertEquals(0, node0.getChildCount());
136:       assertFalse(node0.isName());
137:       assertFalse(node0.isEmpty());
138:       assertFalse(node0.isDelProp());
139:       assertFalse(node0.isIf());
140:       assertFalse(node0.isSetterDef());
141:       assertFalse(node0.isCall());
142:       assertFalse(node0.isAdd());
143:       assertFalse(node0.isIn());
144:       assertFalse(node0.isNE());
145:       assertFalse(node0.isNull());
146:       assertFalse(node0.isTrue());
147:       assertFalse(node0.isDo());
148:       assertFalse(node0.isSwitch());
149:       assertFalse(node0.isNew());
150:       assertFalse(node0.isCase());
151:       assertFalse(node0.isAssignAdd());
152:       assertFalse(node0.isBlock());
153:       assertTrue(node0.isString());
154:       assertFalse(node0.hasMoreThanOneChild());
155:       assertFalse(node0.isVar());
156:       assertFalse(node0.isHook());
157:       assertFalse(node0.isLabel());
158:       assertFalse(node0.isLabelName());
159:       assertFalse(node0.isFor());
160:       assertFalse(node0.isGetterDef());
161:       assertFalse(node0.isStringKey());
162:       assertFalse(node0.isNumber());
163:       assertFalse(node0.hasOneChild());
164:       assertFalse(node0.isArrayLit());
165:       assertFalse(node0.isParamList());
166:       assertEquals((-1), node0.getCharno());
167:       assertFalse(node0.isWith());
168:       assertFalse(node0.isNot());
169:       assertFalse(node0.isAnd());
170:       assertFalse(node0.isScript());
171:       assertFalse(node0.isExprResult());
172:       assertFalse(node0.isInstanceOf());
173:       assertFalse(node0.isComma());
174:       assertFalse(node0.isThis());
175:       assertFalse(node0.isAssign());
176:       assertFalse(node0.isThrow());
177:       assertFalse(node0.isGetElem());
178:       assertFalse(node0.isBreak());
179:       assertFalse(node0.isOr());
180:       assertEquals((-1), node0.getLineno());
181:       assertFalse(node0.isContinue());
182:       assertFalse(node0.isWhile());
183:       assertFalse(node0.isInc());
184:       assertFalse(node0.isReturn());
185:       assertFalse(node0.isTypeOf());
186:       assertFalse(node0.isDec());
187:       assertFalse(node0.hasChildren());
188:       assertFalse(node0.isFalse());
189:       assertFalse(node0.isCast());
190:       assertFalse(node0.isGetProp());
191:       assertFalse(node0.isObjectLit());
192:       assertEquals((-1), node0.getSourcePosition());
193:       assertFalse(node0.isDebugger());
194:       assertEquals(8, Node.FLAG_NO_THROWS);
195:       assertEquals(39, Node.EMPTY_BLOCK);
196:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
197:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
198:       assertEquals(48, Node.DIRECTIVES);
199:       assertEquals(4095, Node.COLUMN_MASK);
200:       assertEquals(40, Node.ORIGINALNAME_PROP);
201:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
202:       assertEquals(15, Node.NO_SIDE_EFFECTS);
203:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
204:       assertEquals(57, Node.LAST_PROP);
205:       assertEquals(49, Node.DIRECT_EVAL);
206:       assertEquals(53, Node.INPUT_ID);
207:       assertEquals(57, Node.REFLECTED_OBJECT);
208:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
209:       assertEquals(55, Node.INFERRED_FUNCTION);
210:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
211:       assertEquals(52, Node.LENGTH);
212:       assertEquals(36, Node.QUOTED_PROP);
213:       assertEquals(2, Node.POST_FLAG);
214:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
215:       assertEquals(47, Node.IS_DISPATCHER);
216:       assertEquals(56, Node.CHANGE_TIME);
217:       assertEquals(29, Node.JSDOC_INFO_PROP);
218:       assertEquals(37, Node.OPT_ARG_NAME);
219:       assertEquals(32, Node.INCRDECR_PROP);
220:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
221:       assertEquals(12, Node.COLUMN_BITS);
222:       assertEquals(30, Node.VAR_ARGS_NAME);
223:       assertEquals(54, Node.SLASH_V);
224:       assertEquals(43, Node.IS_CONSTANT_NAME);
225:       assertEquals(1, Node.DECR_FLAG);
226:       assertEquals(46, Node.IS_NAMESPACE);
227:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
228:       assertEquals(50, Node.FREE_CALL);
229:       assertEquals(51, Node.STATIC_SOURCE_FILE);
230:       
231:       boolean boolean1 = node0.isTypeOf();
232:       assertFalse(boolean1);
233:       assertTrue(boolean1 == boolean0);
234:       assertEquals(40, node0.getType());
235:       assertFalse(node0.isDefaultCase());
236:       assertFalse(node0.isCatch());
237:       assertFalse(node0.isVoid());
238:       assertFalse(node0.isTry());
239:       assertFalse(node0.isRegExp());
240:       assertFalse(node0.isFunction());
241:       assertEquals(0, node0.getChildCount());
242:       assertFalse(node0.isName());
243:       assertFalse(node0.isEmpty());
244:       assertFalse(node0.isDelProp());
245:       assertFalse(node0.isIf());
246:       assertFalse(node0.isSetterDef());
247:       assertFalse(node0.isCall());
248:       assertFalse(node0.isAdd());
249:       assertFalse(node0.isIn());
250:       assertFalse(node0.isNE());
251:       assertFalse(node0.isNull());
252:       assertFalse(node0.isTrue());
253:       assertFalse(node0.isDo());
254:       assertFalse(node0.isSwitch());
255:       assertFalse(node0.isNew());
256:       assertFalse(node0.isCase());
257:       assertFalse(node0.isAssignAdd());
258:       assertFalse(node0.isBlock());
259:       assertTrue(node0.isString());
260:       assertFalse(node0.hasMoreThanOneChild());
261:       assertFalse(node0.isVar());
262:       assertFalse(node0.isHook());
263:       assertFalse(node0.isLabel());
264:       assertFalse(node0.isLabelName());
265:       assertFalse(node0.isFor());
266:       assertFalse(node0.isGetterDef());
267:       assertFalse(node0.isStringKey());
268:       assertFalse(node0.isNumber());
269:       assertFalse(node0.hasOneChild());
270:       assertFalse(node0.isArrayLit());
271:       assertFalse(node0.isParamList());
272:       assertEquals((-1), node0.getCharno());
273:       assertFalse(node0.isWith());
274:       assertFalse(node0.isNot());
275:       assertFalse(node0.isAnd());
276:       assertFalse(node0.isScript());
277:       assertFalse(node0.isExprResult());
278:       assertFalse(node0.isInstanceOf());
279:       assertFalse(node0.isComma());
280:       assertFalse(node0.isThis());
281:       assertFalse(node0.isAssign());
282:       assertFalse(node0.isThrow());
283:       assertFalse(node0.isGetElem());
284:       assertFalse(node0.isBreak());
285:       assertFalse(node0.isOr());
286:       assertEquals((-1), node0.getLineno());
287:       assertFalse(node0.isContinue());
288:       assertFalse(node0.isWhile());
289:       assertFalse(node0.isInc());
290:       assertFalse(node0.isReturn());
291:       assertFalse(node0.isTypeOf());
292:       assertFalse(node0.isDec());
293:       assertFalse(node0.hasChildren());
294:       assertFalse(node0.isFalse());
295:       assertFalse(node0.isCast());
296:       assertFalse(node0.isGetProp());
297:       assertFalse(node0.isObjectLit());
298:       assertEquals((-1), node0.getSourcePosition());
299:       assertFalse(node0.isDebugger());
300:       assertEquals(8, Node.FLAG_NO_THROWS);
301:       assertEquals(39, Node.EMPTY_BLOCK);
302:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
303:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
304:       assertEquals(48, Node.DIRECTIVES);
305:       assertEquals(4095, Node.COLUMN_MASK);
306:       assertEquals(40, Node.ORIGINALNAME_PROP);
307:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
308:       assertEquals(15, Node.NO_SIDE_EFFECTS);
309:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
310:       assertEquals(57, Node.LAST_PROP);
311:       assertEquals(49, Node.DIRECT_EVAL);
312:       assertEquals(53, Node.INPUT_ID);
313:       assertEquals(57, Node.REFLECTED_OBJECT);
314:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
315:       assertEquals(55, Node.INFERRED_FUNCTION);
316:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
317:       assertEquals(52, Node.LENGTH);
318:       assertEquals(36, Node.QUOTED_PROP);
319:       assertEquals(2, Node.POST_FLAG);
320:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
321:       assertEquals(47, Node.IS_DISPATCHER);
322:       assertEquals(56, Node.CHANGE_TIME);
323:       assertEquals(29, Node.JSDOC_INFO_PROP);
324:       assertEquals(37, Node.OPT_ARG_NAME);
325:       assertEquals(32, Node.INCRDECR_PROP);
326:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
327:       assertEquals(12, Node.COLUMN_BITS);
328:       assertEquals(30, Node.VAR_ARGS_NAME);
329:       assertEquals(54, Node.SLASH_V);
330:       assertEquals(43, Node.IS_CONSTANT_NAME);
331:       assertEquals(1, Node.DECR_FLAG);
332:       assertEquals(46, Node.IS_NAMESPACE);
333:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
334:       assertEquals(50, Node.FREE_CALL);
335:       assertEquals(51, Node.STATIC_SOURCE_FILE);
336:       
337:       Iterable<Node> iterable0 = node0.children();
338:       assertFalse(iterable0.contains(node0));
339:       assertNotNull(iterable0);
340:       assertEquals(40, node0.getType());
341:       assertFalse(node0.isDefaultCase());
342:       assertFalse(node0.isCatch());
343:       assertFalse(node0.isVoid());
344:       assertFalse(node0.isTry());
345:       assertFalse(node0.isRegExp());
346:       assertFalse(node0.isFunction());
347:       assertEquals(0, node0.getChildCount());
348:       assertFalse(node0.isName());
349:       assertFalse(node0.isEmpty());
350:       assertFalse(node0.isDelProp());
351:       assertFalse(node0.isIf());
352:       assertFalse(node0.isSetterDef());
353:       assertFalse(node0.isCall());
354:       assertFalse(node0.isAdd());
355:       assertFalse(node0.isIn());
356:       assertFalse(node0.isNE());
357:       assertFalse(node0.isNull());
358:       assertFalse(node0.isTrue());
359:       assertFalse(node0.isDo());
360:       assertFalse(node0.isSwitch());
361:       assertFalse(node0.isNew());
362:       assertFalse(node0.isCase());
363:       assertFalse(node0.isAssignAdd());
364:       assertFalse(node0.isBlock());
365:       assertTrue(node0.isString());
366:       assertFalse(node0.hasMoreThanOneChild());
367:       assertFalse(node0.isVar());
368:       assertFalse(node0.isHook());
369:       assertFalse(node0.isLabel());
370:       assertFalse(node0.isLabelName());
371:       assertFalse(node0.isFor());
372:       assertFalse(node0.isGetterDef());
373:       assertFalse(node0.isStringKey());
374:       assertFalse(node0.isNumber());
375:       assertFalse(node0.hasOneChild());
376:       assertFalse(node0.isArrayLit());
377:       assertFalse(node0.isParamList());
378:       assertEquals((-1), node0.getCharno());
379:       assertFalse(node0.isWith());
380:       assertFalse(node0.isNot());
381:       assertFalse(node0.isAnd());
382:       assertFalse(node0.isScript());
383:       assertFalse(node0.isExprResult());
384:       assertFalse(node0.isInstanceOf());
385:       assertFalse(node0.isComma());
386:       assertFalse(node0.isThis());
387:       assertFalse(node0.isAssign());
388:       assertFalse(node0.isThrow());
389:       assertFalse(node0.isGetElem());
390:       assertFalse(node0.isBreak());
391:       assertFalse(node0.isOr());
392:       assertEquals((-1), node0.getLineno());
393:       assertFalse(node0.isContinue());
394:       assertFalse(node0.isWhile());
395:       assertFalse(node0.isInc());
396:       assertFalse(node0.isReturn());
397:       assertFalse(node0.isTypeOf());
398:       assertFalse(node0.isDec());
399:       assertFalse(node0.hasChildren());
400:       assertFalse(node0.isFalse());
401:       assertFalse(node0.isCast());
402:       assertFalse(node0.isGetProp());
403:       assertFalse(node0.isObjectLit());
404:       assertEquals((-1), node0.getSourcePosition());
405:       assertFalse(node0.isDebugger());
406:       assertEquals(8, Node.FLAG_NO_THROWS);
407:       assertEquals(39, Node.EMPTY_BLOCK);
408:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
409:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
410:       assertEquals(48, Node.DIRECTIVES);
411:       assertEquals(4095, Node.COLUMN_MASK);
412:       assertEquals(40, Node.ORIGINALNAME_PROP);
413:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
414:       assertEquals(15, Node.NO_SIDE_EFFECTS);
415:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
416:       assertEquals(57, Node.LAST_PROP);
417:       assertEquals(49, Node.DIRECT_EVAL);
418:       assertEquals(53, Node.INPUT_ID);
419:       assertEquals(57, Node.REFLECTED_OBJECT);
420:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
421:       assertEquals(55, Node.INFERRED_FUNCTION);
422:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
423:       assertEquals(52, Node.LENGTH);
424:       assertEquals(36, Node.QUOTED_PROP);
425:       assertEquals(2, Node.POST_FLAG);
426:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
427:       assertEquals(47, Node.IS_DISPATCHER);
428:       assertEquals(56, Node.CHANGE_TIME);
429:       assertEquals(29, Node.JSDOC_INFO_PROP);
430:       assertEquals(37, Node.OPT_ARG_NAME);
431:       assertEquals(32, Node.INCRDECR_PROP);
432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
433:       assertEquals(12, Node.COLUMN_BITS);
434:       assertEquals(30, Node.VAR_ARGS_NAME);
435:       assertEquals(54, Node.SLASH_V);
436:       assertEquals(43, Node.IS_CONSTANT_NAME);
437:       assertEquals(1, Node.DECR_FLAG);
438:       assertEquals(46, Node.IS_NAMESPACE);
439:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
440:       assertEquals(50, Node.FREE_CALL);
441:       assertEquals(51, Node.STATIC_SOURCE_FILE);
442:       
443:       boolean boolean2 = node0.isVoid();
444:       assertFalse(boolean2);
445:       assertTrue(boolean2 == boolean0);
446:       assertTrue(boolean2 == boolean1);
447:       assertEquals(40, node0.getType());
448:       assertFalse(node0.isDefaultCase());
449:       assertFalse(node0.isCatch());
450:       assertFalse(node0.isVoid());
451:       assertFalse(node0.isTry());
452:       assertFalse(node0.isRegExp());
453:       assertFalse(node0.isFunction());
454:       assertEquals(0, node0.getChildCount());
455:       assertFalse(node0.isName());
456:       assertFalse(node0.isEmpty());
457:       assertFalse(node0.isDelProp());
458:       assertFalse(node0.isIf());
459:       assertFalse(node0.isSetterDef());
460:       assertFalse(node0.isCall());
461:       assertFalse(node0.isAdd());
462:       assertFalse(node0.isIn());
463:       assertFalse(node0.isNE());
464:       assertFalse(node0.isNull());
465:       assertFalse(node0.isTrue());
466:       assertFalse(node0.isDo());
467:       assertFalse(node0.isSwitch());
468:       assertFalse(node0.isNew());
469:       assertFalse(node0.isCase());
470:       assertFalse(node0.isAssignAdd());
471:       assertFalse(node0.isBlock());
472:       assertTrue(node0.isString());
473:       assertFalse(node0.hasMoreThanOneChild());
474:       assertFalse(node0.isVar());
475:       assertFalse(node0.isHook());
476:       assertFalse(node0.isLabel());
477:       assertFalse(node0.isLabelName());
478:       assertFalse(node0.isFor());
479:       assertFalse(node0.isGetterDef());
480:       assertFalse(node0.isStringKey());
481:       assertFalse(node0.isNumber());
482:       assertFalse(node0.hasOneChild());
483:       assertFalse(node0.isArrayLit());
484:       assertFalse(node0.isParamList());
485:       assertEquals((-1), node0.getCharno());
486:       assertFalse(node0.isWith());
487:       assertFalse(node0.isNot());
488:       assertFalse(node0.isAnd());
489:       assertFalse(node0.isScript());
490:       assertFalse(node0.isExprResult());
491:       assertFalse(node0.isInstanceOf());
492:       assertFalse(node0.isComma());
493:       assertFalse(node0.isThis());
494:       assertFalse(node0.isAssign());
495:       assertFalse(node0.isThrow());
496:       assertFalse(node0.isGetElem());
497:       assertFalse(node0.isBreak());
498:       assertFalse(node0.isOr());
499:       assertEquals((-1), node0.getLineno());
500:       assertFalse(node0.isContinue());
501:       assertFalse(node0.isWhile());
502:       assertFalse(node0.isInc());
503:       assertFalse(node0.isReturn());
504:       assertFalse(node0.isTypeOf());
505:       assertFalse(node0.isDec());
506:       assertFalse(node0.hasChildren());
507:       assertFalse(node0.isFalse());
508:       assertFalse(node0.isCast());
509:       assertFalse(node0.isGetProp());
510:       assertFalse(node0.isObjectLit());
511:       assertEquals((-1), node0.getSourcePosition());
512:       assertFalse(node0.isDebugger());
513:       assertEquals(8, Node.FLAG_NO_THROWS);
514:       assertEquals(39, Node.EMPTY_BLOCK);
515:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
516:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
517:       assertEquals(48, Node.DIRECTIVES);
518:       assertEquals(4095, Node.COLUMN_MASK);
519:       assertEquals(40, Node.ORIGINALNAME_PROP);
520:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
521:       assertEquals(15, Node.NO_SIDE_EFFECTS);
522:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
523:       assertEquals(57, Node.LAST_PROP);
524:       assertEquals(49, Node.DIRECT_EVAL);
525:       assertEquals(53, Node.INPUT_ID);
526:       assertEquals(57, Node.REFLECTED_OBJECT);
527:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
528:       assertEquals(55, Node.INFERRED_FUNCTION);
529:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
530:       assertEquals(52, Node.LENGTH);
531:       assertEquals(36, Node.QUOTED_PROP);
532:       assertEquals(2, Node.POST_FLAG);
533:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
534:       assertEquals(47, Node.IS_DISPATCHER);
535:       assertEquals(56, Node.CHANGE_TIME);
536:       assertEquals(29, Node.JSDOC_INFO_PROP);
537:       assertEquals(37, Node.OPT_ARG_NAME);
538:       assertEquals(32, Node.INCRDECR_PROP);
539:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
540:       assertEquals(12, Node.COLUMN_BITS);
541:       assertEquals(30, Node.VAR_ARGS_NAME);
542:       assertEquals(54, Node.SLASH_V);
543:       assertEquals(43, Node.IS_CONSTANT_NAME);
544:       assertEquals(1, Node.DECR_FLAG);
545:       assertEquals(46, Node.IS_NAMESPACE);
546:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
547:       assertEquals(50, Node.FREE_CALL);
548:       assertEquals(51, Node.STATIC_SOURCE_FILE);
549:       
550:       boolean boolean3 = node0.isDebugger();
551:       assertFalse(boolean3);
552:       assertTrue(boolean3 == boolean1);
553:       assertTrue(boolean3 == boolean0);
554:       assertTrue(boolean3 == boolean2);
555:       assertEquals(40, node0.getType());
556:       assertFalse(node0.isDefaultCase());
557:       assertFalse(node0.isCatch());
558:       assertFalse(node0.isVoid());
559:       assertFalse(node0.isTry());
560:       assertFalse(node0.isRegExp());
561:       assertFalse(node0.isFunction());
562:       assertEquals(0, node0.getChildCount());
563:       assertFalse(node0.isName());
564:       assertFalse(node0.isEmpty());
565:       assertFalse(node0.isDelProp());
566:       assertFalse(node0.isIf());
567:       assertFalse(node0.isSetterDef());
568:       assertFalse(node0.isCall());
569:       assertFalse(node0.isAdd());
570:       assertFalse(node0.isIn());
571:       assertFalse(node0.isNE());
572:       assertFalse(node0.isNull());
573:       assertFalse(node0.isTrue());
574:       assertFalse(node0.isDo());
575:       assertFalse(node0.isSwitch());
576:       assertFalse(node0.isNew());
577:       assertFalse(node0.isCase());
578:       assertFalse(node0.isAssignAdd());
579:       assertFalse(node0.isBlock());
580:       assertTrue(node0.isString());
581:       assertFalse(node0.hasMoreThanOneChild());
582:       assertFalse(node0.isVar());
583:       assertFalse(node0.isHook());
584:       assertFalse(node0.isLabel());
585:       assertFalse(node0.isLabelName());
586:       assertFalse(node0.isFor());
587:       assertFalse(node0.isGetterDef());
588:       assertFalse(node0.isStringKey());
589:       assertFalse(node0.isNumber());
590:       assertFalse(node0.hasOneChild());
591:       assertFalse(node0.isArrayLit());
592:       assertFalse(node0.isParamList());
593:       assertEquals((-1), node0.getCharno());
594:       assertFalse(node0.isWith());
595:       assertFalse(node0.isNot());
596:       assertFalse(node0.isAnd());
597:       assertFalse(node0.isScript());
598:       assertFalse(node0.isExprResult());
599:       assertFalse(node0.isInstanceOf());
600:       assertFalse(node0.isComma());
601:       assertFalse(node0.isThis());
602:       assertFalse(node0.isAssign());
603:       assertFalse(node0.isThrow());
604:       assertFalse(node0.isGetElem());
605:       assertFalse(node0.isBreak());
606:       assertFalse(node0.isOr());
607:       assertEquals((-1), node0.getLineno());
608:       assertFalse(node0.isContinue());
609:       assertFalse(node0.isWhile());
610:       assertFalse(node0.isInc());
611:       assertFalse(node0.isReturn());
612:       assertFalse(node0.isTypeOf());
613:       assertFalse(node0.isDec());
614:       assertFalse(node0.hasChildren());
615:       assertFalse(node0.isFalse());
616:       assertFalse(node0.isCast());
617:       assertFalse(node0.isGetProp());
618:       assertFalse(node0.isObjectLit());
619:       assertEquals((-1), node0.getSourcePosition());
620:       assertFalse(node0.isDebugger());
621:       assertEquals(8, Node.FLAG_NO_THROWS);
622:       assertEquals(39, Node.EMPTY_BLOCK);
623:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
624:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
625:       assertEquals(48, Node.DIRECTIVES);
626:       assertEquals(4095, Node.COLUMN_MASK);
627:       assertEquals(40, Node.ORIGINALNAME_PROP);
628:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
629:       assertEquals(15, Node.NO_SIDE_EFFECTS);
630:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
631:       assertEquals(57, Node.LAST_PROP);
632:       assertEquals(49, Node.DIRECT_EVAL);
633:       assertEquals(53, Node.INPUT_ID);
634:       assertEquals(57, Node.REFLECTED_OBJECT);
635:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
636:       assertEquals(55, Node.INFERRED_FUNCTION);
637:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
638:       assertEquals(52, Node.LENGTH);
639:       assertEquals(36, Node.QUOTED_PROP);
640:       assertEquals(2, Node.POST_FLAG);
641:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
642:       assertEquals(47, Node.IS_DISPATCHER);
643:       assertEquals(56, Node.CHANGE_TIME);
644:       assertEquals(29, Node.JSDOC_INFO_PROP);
645:       assertEquals(37, Node.OPT_ARG_NAME);
646:       assertEquals(32, Node.INCRDECR_PROP);
647:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
648:       assertEquals(12, Node.COLUMN_BITS);
649:       assertEquals(30, Node.VAR_ARGS_NAME);
650:       assertEquals(54, Node.SLASH_V);
651:       assertEquals(43, Node.IS_CONSTANT_NAME);
652:       assertEquals(1, Node.DECR_FLAG);
653:       assertEquals(46, Node.IS_NAMESPACE);
654:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
655:       assertEquals(50, Node.FREE_CALL);
656:       assertEquals(51, Node.STATIC_SOURCE_FILE);
657:       
658:       boolean boolean4 = node0.isCall();
659:       assertFalse(boolean4);
660:       assertTrue(boolean4 == boolean3);
661:       assertTrue(boolean4 == boolean0);
662:       assertTrue(boolean4 == boolean1);
663:       assertTrue(boolean4 == boolean2);
664:       assertEquals(40, node0.getType());
665:       assertFalse(node0.isDefaultCase());
666:       assertFalse(node0.isCatch());
667:       assertFalse(node0.isVoid());
668:       assertFalse(node0.isTry());
669:       assertFalse(node0.isRegExp());
670:       assertFalse(node0.isFunction());
671:       assertEquals(0, node0.getChildCount());
672:       assertFalse(node0.isName());
673:       assertFalse(node0.isEmpty());
674:       assertFalse(node0.isDelProp());
675:       assertFalse(node0.isIf());
676:       assertFalse(node0.isSetterDef());
677:       assertFalse(node0.isCall());
678:       assertFalse(node0.isAdd());
679:       assertFalse(node0.isIn());
680:       assertFalse(node0.isNE());
681:       assertFalse(node0.isNull());
682:       assertFalse(node0.isTrue());
683:       assertFalse(node0.isDo());
684:       assertFalse(node0.isSwitch());
685:       assertFalse(node0.isNew());
686:       assertFalse(node0.isCase());
687:       assertFalse(node0.isAssignAdd());
688:       assertFalse(node0.isBlock());
689:       assertTrue(node0.isString());
690:       assertFalse(node0.hasMoreThanOneChild());
691:       assertFalse(node0.isVar());
692:       assertFalse(node0.isHook());
693:       assertFalse(node0.isLabel());
694:       assertFalse(node0.isLabelName());
695:       assertFalse(node0.isFor());
696:       assertFalse(node0.isGetterDef());
697:       assertFalse(node0.isStringKey());
698:       assertFalse(node0.isNumber());
699:       assertFalse(node0.hasOneChild());
700:       assertFalse(node0.isArrayLit());
701:       assertFalse(node0.isParamList());
702:       assertEquals((-1), node0.getCharno());
703:       assertFalse(node0.isWith());
704:       assertFalse(node0.isNot());
705:       assertFalse(node0.isAnd());
706:       assertFalse(node0.isScript());
707:       assertFalse(node0.isExprResult());
708:       assertFalse(node0.isInstanceOf());
709:       assertFalse(node0.isComma());
710:       assertFalse(node0.isThis());
711:       assertFalse(node0.isAssign());
712:       assertFalse(node0.isThrow());
713:       assertFalse(node0.isGetElem());
714:       assertFalse(node0.isBreak());
715:       assertFalse(node0.isOr());
716:       assertEquals((-1), node0.getLineno());
717:       assertFalse(node0.isContinue());
718:       assertFalse(node0.isWhile());
719:       assertFalse(node0.isInc());
720:       assertFalse(node0.isReturn());
721:       assertFalse(node0.isTypeOf());
722:       assertFalse(node0.isDec());
723:       assertFalse(node0.hasChildren());
724:       assertFalse(node0.isFalse());
725:       assertFalse(node0.isCast());
726:       assertFalse(node0.isGetProp());
727:       assertFalse(node0.isObjectLit());
728:       assertEquals((-1), node0.getSourcePosition());
729:       assertFalse(node0.isDebugger());
730:       assertEquals(8, Node.FLAG_NO_THROWS);
731:       assertEquals(39, Node.EMPTY_BLOCK);
732:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
733:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
734:       assertEquals(48, Node.DIRECTIVES);
735:       assertEquals(4095, Node.COLUMN_MASK);
736:       assertEquals(40, Node.ORIGINALNAME_PROP);
737:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
738:       assertEquals(15, Node.NO_SIDE_EFFECTS);
739:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
740:       assertEquals(57, Node.LAST_PROP);
741:       assertEquals(49, Node.DIRECT_EVAL);
742:       assertEquals(53, Node.INPUT_ID);
743:       assertEquals(57, Node.REFLECTED_OBJECT);
744:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
745:       assertEquals(55, Node.INFERRED_FUNCTION);
746:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
747:       assertEquals(52, Node.LENGTH);
748:       assertEquals(36, Node.QUOTED_PROP);
749:       assertEquals(2, Node.POST_FLAG);
750:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
751:       assertEquals(47, Node.IS_DISPATCHER);
752:       assertEquals(56, Node.CHANGE_TIME);
753:       assertEquals(29, Node.JSDOC_INFO_PROP);
754:       assertEquals(37, Node.OPT_ARG_NAME);
755:       assertEquals(32, Node.INCRDECR_PROP);
756:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
757:       assertEquals(12, Node.COLUMN_BITS);
758:       assertEquals(30, Node.VAR_ARGS_NAME);
759:       assertEquals(54, Node.SLASH_V);
760:       assertEquals(43, Node.IS_CONSTANT_NAME);
761:       assertEquals(1, Node.DECR_FLAG);
762:       assertEquals(46, Node.IS_NAMESPACE);
763:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
764:       assertEquals(50, Node.FREE_CALL);
765:       assertEquals(51, Node.STATIC_SOURCE_FILE);
766:       
767:       node0.setLineno(40);
768:       assertEquals(40, node0.getType());
769:       assertFalse(node0.isDefaultCase());
770:       assertFalse(node0.isCatch());
771:       assertFalse(node0.isVoid());
772:       assertFalse(node0.isTry());
773:       assertFalse(node0.isRegExp());
774:       assertFalse(node0.isFunction());
775:       assertEquals(0, node0.getChildCount());
776:       assertFalse(node0.isName());
777:       assertFalse(node0.isEmpty());
778:       assertFalse(node0.isDelProp());
779:       assertFalse(node0.isIf());
780:       assertFalse(node0.isSetterDef());
781:       assertFalse(node0.isCall());
782:       assertFalse(node0.isAdd());
783:       assertFalse(node0.isIn());
784:       assertFalse(node0.isNE());
785:       assertFalse(node0.isNull());
786:       assertFalse(node0.isTrue());
787:       assertFalse(node0.isDo());
788:       assertFalse(node0.isSwitch());
789:       assertFalse(node0.isNew());
790:       assertFalse(node0.isCase());
791:       assertFalse(node0.isAssignAdd());
792:       assertFalse(node0.isBlock());
793:       assertTrue(node0.isString());
794:       assertFalse(node0.hasMoreThanOneChild());
795:       assertFalse(node0.isVar());
796:       assertFalse(node0.isHook());
797:       assertFalse(node0.isLabel());
798:       assertFalse(node0.isLabelName());
799:       assertFalse(node0.isFor());
800:       assertFalse(node0.isGetterDef());
801:       assertFalse(node0.isStringKey());
802:       assertFalse(node0.isNumber());
803:       assertFalse(node0.hasOneChild());
804:       assertFalse(node0.isArrayLit());
805:       assertFalse(node0.isParamList());
806:       assertFalse(node0.isWith());
807:       assertFalse(node0.isNot());
808:       assertFalse(node0.isAnd());
809:       assertFalse(node0.isScript());
810:       assertFalse(node0.isExprResult());
811:       assertFalse(node0.isInstanceOf());
812:       assertFalse(node0.isComma());
813:       assertFalse(node0.isThis());
814:       assertEquals(40, node0.getLineno());
815:       assertFalse(node0.isAssign());
816:       assertFalse(node0.isThrow());
817:       assertFalse(node0.isGetElem());
818:       assertFalse(node0.isBreak());
819:       assertFalse(node0.isOr());
820:       assertEquals(0, node0.getCharno());
821:       assertFalse(node0.isContinue());
822:       assertFalse(node0.isWhile());
823:       assertFalse(node0.isInc());
824:       assertFalse(node0.isReturn());
825:       assertEquals(163840, node0.getSourcePosition());
826:       assertFalse(node0.isTypeOf());
827:       assertFalse(node0.isDec());
828:       assertFalse(node0.hasChildren());
829:       assertFalse(node0.isFalse());
830:       assertFalse(node0.isCast());
831:       assertFalse(node0.isGetProp());
832:       assertFalse(node0.isObjectLit());
833:       assertFalse(node0.isDebugger());
834:       assertEquals(8, Node.FLAG_NO_THROWS);
835:       assertEquals(39, Node.EMPTY_BLOCK);
836:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
837:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
838:       assertEquals(48, Node.DIRECTIVES);
839:       assertEquals(4095, Node.COLUMN_MASK);
840:       assertEquals(40, Node.ORIGINALNAME_PROP);
841:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
842:       assertEquals(15, Node.NO_SIDE_EFFECTS);
843:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
844:       assertEquals(57, Node.LAST_PROP);
845:       assertEquals(49, Node.DIRECT_EVAL);
846:       assertEquals(53, Node.INPUT_ID);
847:       assertEquals(57, Node.REFLECTED_OBJECT);
848:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
849:       assertEquals(55, Node.INFERRED_FUNCTION);
850:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
851:       assertEquals(52, Node.LENGTH);
852:       assertEquals(36, Node.QUOTED_PROP);
853:       assertEquals(2, Node.POST_FLAG);
854:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
855:       assertEquals(47, Node.IS_DISPATCHER);
856:       assertEquals(56, Node.CHANGE_TIME);
857:       assertEquals(29, Node.JSDOC_INFO_PROP);
858:       assertEquals(37, Node.OPT_ARG_NAME);
859:       assertEquals(32, Node.INCRDECR_PROP);
860:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
861:       assertEquals(12, Node.COLUMN_BITS);
862:       assertEquals(30, Node.VAR_ARGS_NAME);
863:       assertEquals(54, Node.SLASH_V);
864:       assertEquals(43, Node.IS_CONSTANT_NAME);
865:       assertEquals(1, Node.DECR_FLAG);
866:       assertEquals(46, Node.IS_NAMESPACE);
867:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
868:       assertEquals(50, Node.FREE_CALL);
869:       assertEquals(51, Node.STATIC_SOURCE_FILE);
870:       
871:       boolean boolean5 = node0.isFalse();
872:       assertFalse(boolean5);
873:       assertTrue(boolean5 == boolean3);
874:       assertTrue(boolean5 == boolean4);
875:       assertTrue(boolean5 == boolean1);
876:       assertTrue(boolean5 == boolean2);
877:       assertTrue(boolean5 == boolean0);
878:       assertEquals(40, node0.getType());
879:       assertFalse(node0.isDefaultCase());
880:       assertFalse(node0.isCatch());
881:       assertFalse(node0.isVoid());
882:       assertFalse(node0.isTry());
883:       assertFalse(node0.isRegExp());
884:       assertFalse(node0.isFunction());
885:       assertEquals(0, node0.getChildCount());
886:       assertFalse(node0.isName());
887:       assertFalse(node0.isEmpty());
888:       assertFalse(node0.isDelProp());
889:       assertFalse(node0.isIf());
890:       assertFalse(node0.isSetterDef());
891:       assertFalse(node0.isCall());
892:       assertFalse(node0.isAdd());
893:       assertFalse(node0.isIn());
894:       assertFalse(node0.isNE());
895:       assertFalse(node0.isNull());
896:       assertFalse(node0.isTrue());
897:       assertFalse(node0.isDo());
898:       assertFalse(node0.isSwitch());
899:       assertFalse(node0.isNew());
900:       assertFalse(node0.isCase());
901:       assertFalse(node0.isAssignAdd());
902:       assertFalse(node0.isBlock());
903:       assertTrue(node0.isString());
904:       assertFalse(node0.hasMoreThanOneChild());
905:       assertFalse(node0.isVar());
906:       assertFalse(node0.isHook());
907:       assertFalse(node0.isLabel());
908:       assertFalse(node0.isLabelName());
909:       assertFalse(node0.isFor());
910:       assertFalse(node0.isGetterDef());
911:       assertFalse(node0.isStringKey());
912:       assertFalse(node0.isNumber());
913:       assertFalse(node0.hasOneChild());
914:       assertFalse(node0.isArrayLit());
915:       assertFalse(node0.isParamList());
916:       assertFalse(node0.isWith());
917:       assertFalse(node0.isNot());
918:       assertFalse(node0.isAnd());
919:       assertFalse(node0.isScript());
920:       assertFalse(node0.isExprResult());
921:       assertFalse(node0.isInstanceOf());
922:       assertFalse(node0.isComma());
923:       assertFalse(node0.isThis());
924:       assertEquals(40, node0.getLineno());
925:       assertFalse(node0.isAssign());
926:       assertFalse(node0.isThrow());
927:       assertFalse(node0.isGetElem());
928:       assertFalse(node0.isBreak());
929:       assertFalse(node0.isOr());
930:       assertEquals(0, node0.getCharno());
931:       assertFalse(node0.isContinue());
932:       assertFalse(node0.isWhile());
933:       assertFalse(node0.isInc());
934:       assertFalse(node0.isReturn());
935:       assertEquals(163840, node0.getSourcePosition());
936:       assertFalse(node0.isTypeOf());
937:       assertFalse(node0.isDec());
938:       assertFalse(node0.hasChildren());
939:       assertFalse(node0.isFalse());
940:       assertFalse(node0.isCast());
941:       assertFalse(node0.isGetProp());
942:       assertFalse(node0.isObjectLit());
943:       assertFalse(node0.isDebugger());
944:       assertEquals(8, Node.FLAG_NO_THROWS);
945:       assertEquals(39, Node.EMPTY_BLOCK);
946:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
947:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
948:       assertEquals(48, Node.DIRECTIVES);
949:       assertEquals(4095, Node.COLUMN_MASK);
950:       assertEquals(40, Node.ORIGINALNAME_PROP);
951:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
952:       assertEquals(15, Node.NO_SIDE_EFFECTS);
953:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
954:       assertEquals(57, Node.LAST_PROP);
955:       assertEquals(49, Node.DIRECT_EVAL);
956:       assertEquals(53, Node.INPUT_ID);
957:       assertEquals(57, Node.REFLECTED_OBJECT);
958:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
959:       assertEquals(55, Node.INFERRED_FUNCTION);
960:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
961:       assertEquals(52, Node.LENGTH);
962:       assertEquals(36, Node.QUOTED_PROP);
963:       assertEquals(2, Node.POST_FLAG);
964:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
965:       assertEquals(47, Node.IS_DISPATCHER);
966:       assertEquals(56, Node.CHANGE_TIME);
967:       assertEquals(29, Node.JSDOC_INFO_PROP);
968:       assertEquals(37, Node.OPT_ARG_NAME);
969:       assertEquals(32, Node.INCRDECR_PROP);
970:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
971:       assertEquals(12, Node.COLUMN_BITS);
972:       assertEquals(30, Node.VAR_ARGS_NAME);
973:       assertEquals(54, Node.SLASH_V);
974:       assertEquals(43, Node.IS_CONSTANT_NAME);
975:       assertEquals(1, Node.DECR_FLAG);
976:       assertEquals(46, Node.IS_NAMESPACE);
977:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
978:       assertEquals(50, Node.FREE_CALL);
979:       assertEquals(51, Node.STATIC_SOURCE_FILE);
980:       
981:       node0.setSourceFileForTesting("originalname");
982:       assertEquals(40, node0.getType());
983:       assertFalse(node0.isDefaultCase());
984:       assertFalse(node0.isCatch());
985:       assertFalse(node0.isVoid());
986:       assertFalse(node0.isTry());
987:       assertFalse(node0.isRegExp());
988:       assertFalse(node0.isFunction());
989:       assertEquals(0, node0.getChildCount());
990:       assertFalse(node0.isName());
991:       assertFalse(node0.isEmpty());
992:       assertFalse(node0.isDelProp());
993:       assertFalse(node0.isIf());
994:       assertFalse(node0.isSetterDef());
995:       assertFalse(node0.isCall());
996:       assertFalse(node0.isAdd());
997:       assertFalse(node0.isIn());
998:       assertFalse(node0.isNE());
999:       assertFalse(node0.isNull());
1000:       assertFalse(node0.isTrue());
1001:       assertFalse(node0.isDo());
1002:       assertFalse(node0.isSwitch());
1003:       assertFalse(node0.isNew());
1004:       assertFalse(node0.isCase());
1005:       assertFalse(node0.isAssignAdd());
1006:       assertFalse(node0.isBlock());
1007:       assertTrue(node0.isString());
1008:       assertFalse(node0.hasMoreThanOneChild());
1009:       assertFalse(node0.isVar());
1010:       assertFalse(node0.isHook());
1011:       assertFalse(node0.isLabel());
1012:       assertFalse(node0.isLabelName());
1013:       assertFalse(node0.isFor());
1014:       assertFalse(node0.isGetterDef());
1015:       assertFalse(node0.isStringKey());
1016:       assertFalse(node0.isNumber());
1017:       assertFalse(node0.hasOneChild());
1018:       assertFalse(node0.isArrayLit());
1019:       assertFalse(node0.isParamList());
1020:       assertFalse(node0.isWith());
1021:       assertFalse(node0.isNot());
1022:       assertFalse(node0.isAnd());
1023:       assertFalse(node0.isScript());
1024:       assertFalse(node0.isExprResult());
1025:       assertFalse(node0.isInstanceOf());
1026:       assertFalse(node0.isComma());
1027:       assertFalse(node0.isThis());
1028:       assertEquals(40, node0.getLineno());
1029:       assertFalse(node0.isAssign());
1030:       assertFalse(node0.isThrow());
1031:       assertFalse(node0.isGetElem());
1032:       assertFalse(node0.isBreak());
1033:       assertFalse(node0.isOr());
1034:       assertEquals(0, node0.getCharno());
1035:       assertFalse(node0.isContinue());
1036:       assertFalse(node0.isWhile());
1037:       assertFalse(node0.isInc());
1038:       assertFalse(node0.isReturn());
1039:       assertEquals(163840, node0.getSourcePosition());
1040:       assertFalse(node0.isTypeOf());
1041:       assertFalse(node0.isDec());
1042:       assertFalse(node0.hasChildren());
1043:       assertFalse(node0.isFalse());
1044:       assertFalse(node0.isCast());
1045:       assertFalse(node0.isGetProp());
1046:       assertFalse(node0.isObjectLit());
1047:       assertFalse(node0.isDebugger());
1048:       assertEquals(8, Node.FLAG_NO_THROWS);
1049:       assertEquals(39, Node.EMPTY_BLOCK);
1050:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1051:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1052:       assertEquals(48, Node.DIRECTIVES);
1053:       assertEquals(4095, Node.COLUMN_MASK);
1054:       assertEquals(40, Node.ORIGINALNAME_PROP);
1055:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1056:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1057:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1058:       assertEquals(57, Node.LAST_PROP);
1059:       assertEquals(49, Node.DIRECT_EVAL);
1060:       assertEquals(53, Node.INPUT_ID);
1061:       assertEquals(57, Node.REFLECTED_OBJECT);
1062:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1063:       assertEquals(55, Node.INFERRED_FUNCTION);
1064:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1065:       assertEquals(52, Node.LENGTH);
1066:       assertEquals(36, Node.QUOTED_PROP);
1067:       assertEquals(2, Node.POST_FLAG);
1068:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1069:       assertEquals(47, Node.IS_DISPATCHER);
1070:       assertEquals(56, Node.CHANGE_TIME);
1071:       assertEquals(29, Node.JSDOC_INFO_PROP);
1072:       assertEquals(37, Node.OPT_ARG_NAME);
1073:       assertEquals(32, Node.INCRDECR_PROP);
1074:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1075:       assertEquals(12, Node.COLUMN_BITS);
1076:       assertEquals(30, Node.VAR_ARGS_NAME);
1077:       assertEquals(54, Node.SLASH_V);
1078:       assertEquals(43, Node.IS_CONSTANT_NAME);
1079:       assertEquals(1, Node.DECR_FLAG);
1080:       assertEquals(46, Node.IS_NAMESPACE);
1081:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1082:       assertEquals(50, Node.FREE_CALL);
1083:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1084:       
1085:       Node node1 = Node.newNumber((-50.0676));
1086:       assertNotNull(node1);
1087:       assertFalse(node1.equals((Object)node0));
1088:       assertFalse(node1.isFalse());
1089:       assertFalse(node1.isBreak());
1090:       assertFalse(node1.isGetProp());
1091:       assertFalse(node1.isComma());
1092:       assertFalse(node1.isThrow());
1093:       assertFalse(node1.isHook());
1094:       assertFalse(node1.isThis());
1095:       assertFalse(node1.isNot());
1096:       assertFalse(node1.isCase());
1097:       assertFalse(node1.isString());
1098:       assertFalse(node1.isObjectLit());
1099:       assertFalse(node1.isScript());
1100:       assertFalse(node1.isSwitch());
1101:       assertFalse(node1.isAnd());
1102:       assertEquals((-1), node1.getCharno());
1103:       assertFalse(node1.isLabelName());
1104:       assertFalse(node1.isEmpty());
1105:       assertFalse(node1.isAssign());
1106:       assertFalse(node1.isDec());
1107:       assertFalse(node1.isDelProp());
1108:       assertFalse(node1.isTypeOf());
1109:       assertFalse(node1.isArrayLit());
1110:       assertFalse(node1.isGetElem());
1111:       assertFalse(node1.isAssignAdd());
1112:       assertFalse(node1.isLabel());
1113:       assertTrue(node1.isNumber());
1114:       assertFalse(node1.hasChildren());
1115:       assertFalse(node1.isReturn());
1116:       assertFalse(node1.isDo());
1117:       assertFalse(node1.isDefaultCase());
1118:       assertFalse(node1.isAdd());
1119:       assertFalse(node1.isExprResult());
1120:       assertFalse(node1.isOr());
1121:       assertFalse(node1.isVoid());
1122:       assertFalse(node1.isNull());
1123:       assertFalse(node1.isTrue());
1124:       assertFalse(node1.isName());
1125:       assertFalse(node1.isSetterDef());
1126:       assertFalse(node1.isCall());
1127:       assertFalse(node1.isNew());
1128:       assertEquals(0, node1.getChildCount());
1129:       assertFalse(node1.isVar());
1130:       assertFalse(node1.isBlock());
1131:       assertFalse(node1.isWhile());
1132:       assertFalse(node1.isContinue());
1133:       assertFalse(node1.isParamList());
1134:       assertEquals((-1), node1.getSourcePosition());
1135:       assertFalse(node1.isDebugger());
1136:       assertFalse(node1.isStringKey());
1137:       assertFalse(node1.isIf());
1138:       assertFalse(node1.isGetterDef());
1139:       assertFalse(node1.isCast());
1140:       assertFalse(node1.hasOneChild());
1141:       assertFalse(node1.isTry());
1142:       assertFalse(node1.isFunction());
1143:       assertFalse(node1.isFor());
1144:       assertEquals(39, node1.getType());
1145:       assertFalse(node1.isWith());
1146:       assertFalse(node1.isRegExp());
1147:       assertFalse(node1.hasMoreThanOneChild());
1148:       assertFalse(node1.isCatch());
1149:       assertFalse(node1.isInstanceOf());
1150:       assertFalse(node1.isInc());
1151:       assertEquals((-1), node1.getLineno());
1152:       assertFalse(node1.isIn());
1153:       assertFalse(node1.isNE());
1154:       assertEquals(57, Node.LAST_PROP);
1155:       assertEquals(49, Node.DIRECT_EVAL);
1156:       assertEquals(1, Node.DECR_FLAG);
1157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1158:       assertEquals(12, Node.COLUMN_BITS);
1159:       assertEquals(32, Node.INCRDECR_PROP);
1160:       assertEquals(30, Node.VAR_ARGS_NAME);
1161:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1162:       assertEquals(2, Node.POST_FLAG);
1163:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1164:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1165:       assertEquals(40, Node.ORIGINALNAME_PROP);
1166:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1167:       assertEquals(50, Node.FREE_CALL);
1168:       assertEquals(46, Node.IS_NAMESPACE);
1169:       assertEquals(54, Node.SLASH_V);
1170:       assertEquals(36, Node.QUOTED_PROP);
1171:       assertEquals(43, Node.IS_CONSTANT_NAME);
1172:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1173:       assertEquals(53, Node.INPUT_ID);
1174:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1175:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1176:       assertEquals(4095, Node.COLUMN_MASK);
1177:       assertEquals(47, Node.IS_DISPATCHER);
1178:       assertEquals(56, Node.CHANGE_TIME);
1179:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1180:       assertEquals(8, Node.FLAG_NO_THROWS);
1181:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1182:       assertEquals(29, Node.JSDOC_INFO_PROP);
1183:       assertEquals(48, Node.DIRECTIVES);
1184:       assertEquals(37, Node.OPT_ARG_NAME);
1185:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1186:       assertEquals(39, Node.EMPTY_BLOCK);
1187:       assertEquals(55, Node.INFERRED_FUNCTION);
1188:       assertEquals(52, Node.LENGTH);
1189:       assertEquals(57, Node.REFLECTED_OBJECT);
1190:       
1191:       Node node2 = new Node(51, node0, node0);
1192:       assertNotNull(node2);
1193:       assertFalse(node0.equals((Object)node1));
1194:       assertFalse(node2.equals((Object)node1));
1195:       assertFalse(node2.equals((Object)node0));
1196:       assertEquals(40, node0.getType());
1197:       assertFalse(node0.isDefaultCase());
1198:       assertFalse(node0.isCatch());
1199:       assertFalse(node0.isVoid());
1200:       assertFalse(node0.isTry());
1201:       assertFalse(node0.isRegExp());
1202:       assertFalse(node0.isFunction());
1203:       assertEquals(0, node0.getChildCount());
1204:       assertFalse(node0.isName());
1205:       assertFalse(node0.isEmpty());
1206:       assertFalse(node0.isDelProp());
1207:       assertFalse(node0.isIf());
1208:       assertFalse(node0.isSetterDef());
1209:       assertFalse(node0.isCall());
1210:       assertFalse(node0.isAdd());
1211:       assertFalse(node0.isIn());
1212:       assertFalse(node0.isNE());
1213:       assertFalse(node0.isNull());
1214:       assertFalse(node0.isTrue());
1215:       assertFalse(node0.isDo());
1216:       assertFalse(node0.isSwitch());
1217:       assertFalse(node0.isNew());
1218:       assertFalse(node0.isCase());
1219:       assertFalse(node0.isAssignAdd());
1220:       assertFalse(node0.isBlock());
1221:       assertTrue(node0.isString());
1222:       assertFalse(node0.hasMoreThanOneChild());
1223:       assertFalse(node0.isVar());
1224:       assertFalse(node0.isHook());
1225:       assertFalse(node0.isLabel());
1226:       assertFalse(node0.isLabelName());
1227:       assertFalse(node0.isFor());
1228:       assertFalse(node0.isGetterDef());
1229:       assertFalse(node0.isStringKey());
1230:       assertFalse(node0.isNumber());
1231:       assertFalse(node0.hasOneChild());
1232:       assertFalse(node0.isArrayLit());
1233:       assertFalse(node0.isParamList());
1234:       assertFalse(node0.isWith());
1235:       assertFalse(node0.isNot());
1236:       assertFalse(node0.isAnd());
1237:       assertFalse(node0.isScript());
1238:       assertFalse(node0.isExprResult());
1239:       assertFalse(node0.isInstanceOf());
1240:       assertFalse(node0.isComma());
1241:       assertFalse(node0.isThis());
1242:       assertEquals(40, node0.getLineno());
1243:       assertFalse(node0.isAssign());
1244:       assertFalse(node0.isThrow());
1245:       assertFalse(node0.isGetElem());
1246:       assertFalse(node0.isBreak());
1247:       assertFalse(node0.isOr());
1248:       assertEquals(0, node0.getCharno());
1249:       assertFalse(node0.isContinue());
1250:       assertFalse(node0.isWhile());
1251:       assertFalse(node0.isInc());
1252:       assertFalse(node0.isReturn());
1253:       assertEquals(163840, node0.getSourcePosition());
1254:       assertFalse(node0.isTypeOf());
1255:       assertFalse(node0.isDec());
1256:       assertFalse(node0.hasChildren());
1257:       assertFalse(node0.isFalse());
1258:       assertFalse(node0.isCast());
1259:       assertFalse(node0.isGetProp());
1260:       assertFalse(node0.isObjectLit());
1261:       assertFalse(node0.isDebugger());
1262:       assertFalse(node2.isSetterDef());
1263:       assertFalse(node2.isNull());
1264:       assertFalse(node2.isParamList());
1265:       assertFalse(node2.isCatch());
1266:       assertFalse(node2.isCall());
1267:       assertFalse(node2.isStringKey());
1268:       assertFalse(node2.isName());
1269:       assertFalse(node2.isRegExp());
1270:       assertFalse(node2.isWhile());
1271:       assertFalse(node2.isBlock());
1272:       assertFalse(node2.isDebugger());
1273:       assertFalse(node2.isTry());
1274:       assertFalse(node2.isNE());
1275:       assertFalse(node2.isIf());
1276:       assertFalse(node2.isFor());
1277:       assertEquals((-1), node2.getSourcePosition());
1278:       assertEquals(1, node2.getChildCount());
1279:       assertFalse(node2.hasMoreThanOneChild());
1280:       assertFalse(node2.isCast());
1281:       assertFalse(node2.isContinue());
1282:       assertTrue(node2.hasChildren());
1283:       assertEquals((-1), node2.getLineno());
1284:       assertFalse(node2.isInc());
1285:       assertFalse(node2.isFunction());
1286:       assertFalse(node2.isThrow());
1287:       assertFalse(node2.isComma());
1288:       assertFalse(node2.isThis());
1289:       assertFalse(node2.isFalse());
1290:       assertFalse(node2.isInstanceOf());
1291:       assertFalse(node2.isAnd());
1292:       assertFalse(node2.isBreak());
1293:       assertFalse(node2.isSwitch());
1294:       assertFalse(node2.isScript());
1295:       assertFalse(node2.isExprResult());
1296:       assertFalse(node2.isString());
1297:       assertFalse(node2.isWith());
1298:       assertFalse(node2.isNot());
1299:       assertFalse(node2.isHook());
1300:       assertEquals((-1), node2.getCharno());
1301:       assertFalse(node2.isObjectLit());
1302:       assertFalse(node2.isGetProp());
1303:       assertFalse(node2.isCase());
1304:       assertEquals(51, node2.getType());
1305:       assertFalse(node2.isTypeOf());
1306:       assertFalse(node2.isNumber());
1307:       assertFalse(node2.isOr());
1308:       assertTrue(node2.hasOneChild());
1309:       assertFalse(node2.isAssign());
1310:       assertFalse(node2.isReturn());
1311:       assertFalse(node2.isGetterDef());
1312:       assertFalse(node2.isDec());
1313:       assertFalse(node2.isLabel());
1314:       assertFalse(node2.isLabelName());
1315:       assertFalse(node2.isDelProp());
1316:       assertFalse(node2.isGetElem());
1317:       assertFalse(node2.isArrayLit());
1318:       assertFalse(node2.isTrue());
1319:       assertFalse(node2.isVoid());
1320:       assertFalse(node2.isDefaultCase());
1321:       assertFalse(node2.isVar());
1322:       assertFalse(node2.isAssignAdd());
1323:       assertFalse(node2.isDo());
1324:       assertTrue(node2.isIn());
1325:       assertFalse(node2.isAdd());
1326:       assertFalse(node2.isEmpty());
1327:       assertFalse(node2.isNew());
1328:       assertEquals(8, Node.FLAG_NO_THROWS);
1329:       assertEquals(39, Node.EMPTY_BLOCK);
1330:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1331:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1332:       assertEquals(48, Node.DIRECTIVES);
1333:       assertEquals(4095, Node.COLUMN_MASK);
1334:       assertEquals(40, Node.ORIGINALNAME_PROP);
1335:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1336:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1337:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1338:       assertEquals(57, Node.LAST_PROP);
1339:       assertEquals(49, Node.DIRECT_EVAL);
1340:       assertEquals(53, Node.INPUT_ID);
1341:       assertEquals(57, Node.REFLECTED_OBJECT);
1342:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1343:       assertEquals(55, Node.INFERRED_FUNCTION);
1344:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1345:       assertEquals(52, Node.LENGTH);
1346:       assertEquals(36, Node.QUOTED_PROP);
1347:       assertEquals(2, Node.POST_FLAG);
1348:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1349:       assertEquals(47, Node.IS_DISPATCHER);
1350:       assertEquals(56, Node.CHANGE_TIME);
1351:       assertEquals(29, Node.JSDOC_INFO_PROP);
1352:       assertEquals(37, Node.OPT_ARG_NAME);
1353:       assertEquals(32, Node.INCRDECR_PROP);
1354:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1355:       assertEquals(12, Node.COLUMN_BITS);
1356:       assertEquals(30, Node.VAR_ARGS_NAME);
1357:       assertEquals(54, Node.SLASH_V);
1358:       assertEquals(43, Node.IS_CONSTANT_NAME);
1359:       assertEquals(1, Node.DECR_FLAG);
1360:       assertEquals(46, Node.IS_NAMESPACE);
1361:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1362:       assertEquals(50, Node.FREE_CALL);
1363:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1364:       assertEquals(52, Node.LENGTH);
1365:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1366:       assertEquals(54, Node.SLASH_V);
1367:       assertEquals(57, Node.REFLECTED_OBJECT);
1368:       assertEquals(30, Node.VAR_ARGS_NAME);
1369:       assertEquals(49, Node.DIRECT_EVAL);
1370:       assertEquals(40, Node.ORIGINALNAME_PROP);
1371:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1372:       assertEquals(48, Node.DIRECTIVES);
1373:       assertEquals(46, Node.IS_NAMESPACE);
1374:       assertEquals(12, Node.COLUMN_BITS);
1375:       assertEquals(4095, Node.COLUMN_MASK);
1376:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1377:       assertEquals(50, Node.FREE_CALL);
1378:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1379:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1380:       assertEquals(32, Node.INCRDECR_PROP);
1381:       assertEquals(1, Node.DECR_FLAG);
1382:       assertEquals(53, Node.INPUT_ID);
1383:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1384:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1385:       assertEquals(36, Node.QUOTED_PROP);
1386:       assertEquals(43, Node.IS_CONSTANT_NAME);
1387:       assertEquals(56, Node.CHANGE_TIME);
1388:       assertEquals(37, Node.OPT_ARG_NAME);
1389:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1390:       assertEquals(2, Node.POST_FLAG);
1391:       assertEquals(8, Node.FLAG_NO_THROWS);
1392:       assertEquals(47, Node.IS_DISPATCHER);
1393:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1394:       assertEquals(29, Node.JSDOC_INFO_PROP);
1395:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1396:       assertEquals(55, Node.INFERRED_FUNCTION);
1397:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1398:       assertEquals(39, Node.EMPTY_BLOCK);
1399:       assertEquals(57, Node.LAST_PROP);
1400:       
1401:       Node node3 = null;
1402:       try {
1403:         node3 = new Node(56, node2, node0, node1, (-466), 39);
1404:         fail("Expecting exception: IllegalArgumentException");
1405:       
1406:       } catch(IllegalArgumentException e) {
1407:          //
1408:          // no message in exception (getMessage() returned null)
1409:          //
1410:          verifyException("com.google.common.base.Preconditions", e);
1411:       }
1412:   }
1413: }
RegularFileObject[/tmp/EvoSuite_81_1628159309091/com/google/javascript/rhino/Node_81_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:29 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_81_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_81_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_81_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.NamedType",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.JSDocInfo$Marker",
356:       "com.google.common.collect.ImmutableSet",
357:       "com.google.common.collect.EmptyImmutableSet",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 10:28:29.339 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertNotNull(node0);
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean0 = node0.isWhile();
assertFalse(boolean0);
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean1 = node0.isTypeOf();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean2 = node0.isVoid();
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean3 = node0.isDebugger();
assertFalse(boolean3);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean4 = node0.isCall();
assertFalse(boolean4);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

node0.setLineno(40);
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(40, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertEquals(163840, node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean5 = node0.isFalse();
assertFalse(boolean5);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(40, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertEquals(163840, node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

node0.setSourceFileForTesting("originalname");
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(40, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertEquals(163840, node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node node1 = Node.newNumber((-50.0676));
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertTrue(node1.isNumber());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);

Node node2 = new Node(51, node0, node0);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(40, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isThrow());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertEquals(163840, node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertEquals((-1), node2.getSourcePosition());
assertEquals(1, node2.getChildCount());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isString());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertEquals(51, node2.getType());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertTrue(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertTrue(node2.isIn());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);

Node node3 = new Node(56, node2, node0, node1, (-466), 39);

[MASTER] 10:28:31.568 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_94_1628159311515/com/google/javascript/rhino/Node_94_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_94_1628159311515/com/google/javascript/rhino/Node_94_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:31.568 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:31.568 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:31.569 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 338
[MASTER] 10:28:31.570 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_94_1628159311515/com/google/javascript/rhino/Node_94_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:31 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_94_tmp__ESTest extends Node_94_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("");
22:       assertNotNull(node0);
23:       assertFalse(node0.isReturn());
24:       assertFalse(node0.hasMoreThanOneChild());
25:       assertFalse(node0.isAssignAdd());
26:       assertFalse(node0.isContinue());
27:       assertFalse(node0.isOr());
28:       assertFalse(node0.isLabel());
29:       assertEquals((-1), node0.getSourcePosition());
30:       assertFalse(node0.isNumber());
31:       assertFalse(node0.hasChildren());
32:       assertFalse(node0.isWhile());
33:       assertFalse(node0.isAdd());
34:       assertTrue(node0.isString());
35:       assertFalse(node0.isDo());
36:       assertFalse(node0.isNew());
37:       assertFalse(node0.hasOneChild());
38:       assertFalse(node0.isVar());
39:       assertFalse(node0.isCast());
40:       assertFalse(node0.isStringKey());
41:       assertFalse(node0.isParamList());
42:       assertFalse(node0.isLabelName());
43:       assertFalse(node0.isInstanceOf());
44:       assertFalse(node0.isCatch());
45:       assertEquals(40, node0.getType());
46:       assertFalse(node0.isThis());
47:       assertFalse(node0.isScript());
48:       assertFalse(node0.isSetterDef());
49:       assertFalse(node0.isTry());
50:       assertFalse(node0.isHook());
51:       assertFalse(node0.isBlock());
52:       assertFalse(node0.isFor());
53:       assertFalse(node0.isIf());
54:       assertFalse(node0.isRegExp());
55:       assertFalse(node0.isWith());
56:       assertFalse(node0.isNE());
57:       assertEquals((-1), node0.getLineno());
58:       assertFalse(node0.isIn());
59:       assertFalse(node0.isGetterDef());
60:       assertFalse(node0.isEmpty());
61:       assertFalse(node0.isInc());
62:       assertFalse(node0.isCase());
63:       assertEquals((-1), node0.getCharno());
64:       assertFalse(node0.isThrow());
65:       assertFalse(node0.isFalse());
66:       assertFalse(node0.isFunction());
67:       assertFalse(node0.isDebugger());
68:       assertFalse(node0.isSwitch());
69:       assertFalse(node0.isArrayLit());
70:       assertEquals(0, node0.getChildCount());
71:       assertFalse(node0.isAnd());
72:       assertFalse(node0.isObjectLit());
73:       assertFalse(node0.isNot());
74:       assertFalse(node0.isComma());
75:       assertFalse(node0.isDefaultCase());
76:       assertFalse(node0.isGetProp());
77:       assertFalse(node0.isTrue());
78:       assertFalse(node0.isAssign());
79:       assertFalse(node0.isBreak());
80:       assertFalse(node0.isDec());
81:       assertFalse(node0.isNull());
82:       assertFalse(node0.isDelProp());
83:       assertFalse(node0.isTypeOf());
84:       assertFalse(node0.isVoid());
85:       assertFalse(node0.isCall());
86:       assertFalse(node0.isName());
87:       assertFalse(node0.isGetElem());
88:       assertFalse(node0.isExprResult());
89:       assertEquals(29, Node.JSDOC_INFO_PROP);
90:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
91:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
92:       assertEquals(47, Node.IS_DISPATCHER);
93:       assertEquals(2, Node.POST_FLAG);
94:       assertEquals(53, Node.INPUT_ID);
95:       assertEquals(32, Node.INCRDECR_PROP);
96:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
97:       assertEquals(46, Node.IS_NAMESPACE);
98:       assertEquals(51, Node.STATIC_SOURCE_FILE);
99:       assertEquals(30, Node.VAR_ARGS_NAME);
100:       assertEquals(54, Node.SLASH_V);
101:       assertEquals(43, Node.IS_CONSTANT_NAME);
102:       assertEquals(40, Node.ORIGINALNAME_PROP);
103:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
104:       assertEquals(52, Node.LENGTH);
105:       assertEquals(57, Node.REFLECTED_OBJECT);
106:       assertEquals(50, Node.FREE_CALL);
107:       assertEquals(8, Node.FLAG_NO_THROWS);
108:       assertEquals(39, Node.EMPTY_BLOCK);
109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
111:       assertEquals(15, Node.NO_SIDE_EFFECTS);
112:       assertEquals(57, Node.LAST_PROP);
113:       assertEquals(1, Node.DECR_FLAG);
114:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
115:       assertEquals(12, Node.COLUMN_BITS);
116:       assertEquals(4095, Node.COLUMN_MASK);
117:       assertEquals(55, Node.INFERRED_FUNCTION);
118:       assertEquals(36, Node.QUOTED_PROP);
119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
120:       assertEquals(37, Node.OPT_ARG_NAME);
121:       assertEquals(56, Node.CHANGE_TIME);
122:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
123:       assertEquals(49, Node.DIRECT_EVAL);
124:       assertEquals(48, Node.DIRECTIVES);
125:       
126:       boolean boolean0 = node0.isWhile();
127:       assertFalse(boolean0);
128:       assertFalse(node0.isReturn());
129:       assertFalse(node0.hasMoreThanOneChild());
130:       assertFalse(node0.isAssignAdd());
131:       assertFalse(node0.isContinue());
132:       assertFalse(node0.isOr());
133:       assertFalse(node0.isLabel());
134:       assertEquals((-1), node0.getSourcePosition());
135:       assertFalse(node0.isNumber());
136:       assertFalse(node0.hasChildren());
137:       assertFalse(node0.isWhile());
138:       assertFalse(node0.isAdd());
139:       assertTrue(node0.isString());
140:       assertFalse(node0.isDo());
141:       assertFalse(node0.isNew());
142:       assertFalse(node0.hasOneChild());
143:       assertFalse(node0.isVar());
144:       assertFalse(node0.isCast());
145:       assertFalse(node0.isStringKey());
146:       assertFalse(node0.isParamList());
147:       assertFalse(node0.isLabelName());
148:       assertFalse(node0.isInstanceOf());
149:       assertFalse(node0.isCatch());
150:       assertEquals(40, node0.getType());
151:       assertFalse(node0.isThis());
152:       assertFalse(node0.isScript());
153:       assertFalse(node0.isSetterDef());
154:       assertFalse(node0.isTry());
155:       assertFalse(node0.isHook());
156:       assertFalse(node0.isBlock());
157:       assertFalse(node0.isFor());
158:       assertFalse(node0.isIf());
159:       assertFalse(node0.isRegExp());
160:       assertFalse(node0.isWith());
161:       assertFalse(node0.isNE());
162:       assertEquals((-1), node0.getLineno());
163:       assertFalse(node0.isIn());
164:       assertFalse(node0.isGetterDef());
165:       assertFalse(node0.isEmpty());
166:       assertFalse(node0.isInc());
167:       assertFalse(node0.isCase());
168:       assertEquals((-1), node0.getCharno());
169:       assertFalse(node0.isThrow());
170:       assertFalse(node0.isFalse());
171:       assertFalse(node0.isFunction());
172:       assertFalse(node0.isDebugger());
173:       assertFalse(node0.isSwitch());
174:       assertFalse(node0.isArrayLit());
175:       assertEquals(0, node0.getChildCount());
176:       assertFalse(node0.isAnd());
177:       assertFalse(node0.isObjectLit());
178:       assertFalse(node0.isNot());
179:       assertFalse(node0.isComma());
180:       assertFalse(node0.isDefaultCase());
181:       assertFalse(node0.isGetProp());
182:       assertFalse(node0.isTrue());
183:       assertFalse(node0.isAssign());
184:       assertFalse(node0.isBreak());
185:       assertFalse(node0.isDec());
186:       assertFalse(node0.isNull());
187:       assertFalse(node0.isDelProp());
188:       assertFalse(node0.isTypeOf());
189:       assertFalse(node0.isVoid());
190:       assertFalse(node0.isCall());
191:       assertFalse(node0.isName());
192:       assertFalse(node0.isGetElem());
193:       assertFalse(node0.isExprResult());
194:       assertEquals(29, Node.JSDOC_INFO_PROP);
195:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
196:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
197:       assertEquals(47, Node.IS_DISPATCHER);
198:       assertEquals(2, Node.POST_FLAG);
199:       assertEquals(53, Node.INPUT_ID);
200:       assertEquals(32, Node.INCRDECR_PROP);
201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
202:       assertEquals(46, Node.IS_NAMESPACE);
203:       assertEquals(51, Node.STATIC_SOURCE_FILE);
204:       assertEquals(30, Node.VAR_ARGS_NAME);
205:       assertEquals(54, Node.SLASH_V);
206:       assertEquals(43, Node.IS_CONSTANT_NAME);
207:       assertEquals(40, Node.ORIGINALNAME_PROP);
208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
209:       assertEquals(52, Node.LENGTH);
210:       assertEquals(57, Node.REFLECTED_OBJECT);
211:       assertEquals(50, Node.FREE_CALL);
212:       assertEquals(8, Node.FLAG_NO_THROWS);
213:       assertEquals(39, Node.EMPTY_BLOCK);
214:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
215:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
216:       assertEquals(15, Node.NO_SIDE_EFFECTS);
217:       assertEquals(57, Node.LAST_PROP);
218:       assertEquals(1, Node.DECR_FLAG);
219:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
220:       assertEquals(12, Node.COLUMN_BITS);
221:       assertEquals(4095, Node.COLUMN_MASK);
222:       assertEquals(55, Node.INFERRED_FUNCTION);
223:       assertEquals(36, Node.QUOTED_PROP);
224:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
225:       assertEquals(37, Node.OPT_ARG_NAME);
226:       assertEquals(56, Node.CHANGE_TIME);
227:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
228:       assertEquals(49, Node.DIRECT_EVAL);
229:       assertEquals(48, Node.DIRECTIVES);
230:       
231:       boolean boolean1 = node0.isTypeOf();
232:       assertFalse(boolean1);
233:       assertTrue(boolean1 == boolean0);
234:       assertFalse(node0.isReturn());
235:       assertFalse(node0.hasMoreThanOneChild());
236:       assertFalse(node0.isAssignAdd());
237:       assertFalse(node0.isContinue());
238:       assertFalse(node0.isOr());
239:       assertFalse(node0.isLabel());
240:       assertEquals((-1), node0.getSourcePosition());
241:       assertFalse(node0.isNumber());
242:       assertFalse(node0.hasChildren());
243:       assertFalse(node0.isWhile());
244:       assertFalse(node0.isAdd());
245:       assertTrue(node0.isString());
246:       assertFalse(node0.isDo());
247:       assertFalse(node0.isNew());
248:       assertFalse(node0.hasOneChild());
249:       assertFalse(node0.isVar());
250:       assertFalse(node0.isCast());
251:       assertFalse(node0.isStringKey());
252:       assertFalse(node0.isParamList());
253:       assertFalse(node0.isLabelName());
254:       assertFalse(node0.isInstanceOf());
255:       assertFalse(node0.isCatch());
256:       assertEquals(40, node0.getType());
257:       assertFalse(node0.isThis());
258:       assertFalse(node0.isScript());
259:       assertFalse(node0.isSetterDef());
260:       assertFalse(node0.isTry());
261:       assertFalse(node0.isHook());
262:       assertFalse(node0.isBlock());
263:       assertFalse(node0.isFor());
264:       assertFalse(node0.isIf());
265:       assertFalse(node0.isRegExp());
266:       assertFalse(node0.isWith());
267:       assertFalse(node0.isNE());
268:       assertEquals((-1), node0.getLineno());
269:       assertFalse(node0.isIn());
270:       assertFalse(node0.isGetterDef());
271:       assertFalse(node0.isEmpty());
272:       assertFalse(node0.isInc());
273:       assertFalse(node0.isCase());
274:       assertEquals((-1), node0.getCharno());
275:       assertFalse(node0.isThrow());
276:       assertFalse(node0.isFalse());
277:       assertFalse(node0.isFunction());
278:       assertFalse(node0.isDebugger());
279:       assertFalse(node0.isSwitch());
280:       assertFalse(node0.isArrayLit());
281:       assertEquals(0, node0.getChildCount());
282:       assertFalse(node0.isAnd());
283:       assertFalse(node0.isObjectLit());
284:       assertFalse(node0.isNot());
285:       assertFalse(node0.isComma());
286:       assertFalse(node0.isDefaultCase());
287:       assertFalse(node0.isGetProp());
288:       assertFalse(node0.isTrue());
289:       assertFalse(node0.isAssign());
290:       assertFalse(node0.isBreak());
291:       assertFalse(node0.isDec());
292:       assertFalse(node0.isNull());
293:       assertFalse(node0.isDelProp());
294:       assertFalse(node0.isTypeOf());
295:       assertFalse(node0.isVoid());
296:       assertFalse(node0.isCall());
297:       assertFalse(node0.isName());
298:       assertFalse(node0.isGetElem());
299:       assertFalse(node0.isExprResult());
300:       assertEquals(29, Node.JSDOC_INFO_PROP);
301:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
302:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
303:       assertEquals(47, Node.IS_DISPATCHER);
304:       assertEquals(2, Node.POST_FLAG);
305:       assertEquals(53, Node.INPUT_ID);
306:       assertEquals(32, Node.INCRDECR_PROP);
307:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
308:       assertEquals(46, Node.IS_NAMESPACE);
309:       assertEquals(51, Node.STATIC_SOURCE_FILE);
310:       assertEquals(30, Node.VAR_ARGS_NAME);
311:       assertEquals(54, Node.SLASH_V);
312:       assertEquals(43, Node.IS_CONSTANT_NAME);
313:       assertEquals(40, Node.ORIGINALNAME_PROP);
314:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
315:       assertEquals(52, Node.LENGTH);
316:       assertEquals(57, Node.REFLECTED_OBJECT);
317:       assertEquals(50, Node.FREE_CALL);
318:       assertEquals(8, Node.FLAG_NO_THROWS);
319:       assertEquals(39, Node.EMPTY_BLOCK);
320:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
321:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
322:       assertEquals(15, Node.NO_SIDE_EFFECTS);
323:       assertEquals(57, Node.LAST_PROP);
324:       assertEquals(1, Node.DECR_FLAG);
325:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
326:       assertEquals(12, Node.COLUMN_BITS);
327:       assertEquals(4095, Node.COLUMN_MASK);
328:       assertEquals(55, Node.INFERRED_FUNCTION);
329:       assertEquals(36, Node.QUOTED_PROP);
330:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
331:       assertEquals(37, Node.OPT_ARG_NAME);
332:       assertEquals(56, Node.CHANGE_TIME);
333:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
334:       assertEquals(49, Node.DIRECT_EVAL);
335:       assertEquals(48, Node.DIRECTIVES);
336:       
337:       Iterable<Node> iterable0 = node0.children();
338:       assertFalse(iterable0.contains(node0));
339:       assertNotNull(iterable0);
340:       assertFalse(node0.isReturn());
341:       assertFalse(node0.hasMoreThanOneChild());
342:       assertFalse(node0.isAssignAdd());
343:       assertFalse(node0.isContinue());
344:       assertFalse(node0.isOr());
345:       assertFalse(node0.isLabel());
346:       assertEquals((-1), node0.getSourcePosition());
347:       assertFalse(node0.isNumber());
348:       assertFalse(node0.hasChildren());
349:       assertFalse(node0.isWhile());
350:       assertFalse(node0.isAdd());
351:       assertTrue(node0.isString());
352:       assertFalse(node0.isDo());
353:       assertFalse(node0.isNew());
354:       assertFalse(node0.hasOneChild());
355:       assertFalse(node0.isVar());
356:       assertFalse(node0.isCast());
357:       assertFalse(node0.isStringKey());
358:       assertFalse(node0.isParamList());
359:       assertFalse(node0.isLabelName());
360:       assertFalse(node0.isInstanceOf());
361:       assertFalse(node0.isCatch());
362:       assertEquals(40, node0.getType());
363:       assertFalse(node0.isThis());
364:       assertFalse(node0.isScript());
365:       assertFalse(node0.isSetterDef());
366:       assertFalse(node0.isTry());
367:       assertFalse(node0.isHook());
368:       assertFalse(node0.isBlock());
369:       assertFalse(node0.isFor());
370:       assertFalse(node0.isIf());
371:       assertFalse(node0.isRegExp());
372:       assertFalse(node0.isWith());
373:       assertFalse(node0.isNE());
374:       assertEquals((-1), node0.getLineno());
375:       assertFalse(node0.isIn());
376:       assertFalse(node0.isGetterDef());
377:       assertFalse(node0.isEmpty());
378:       assertFalse(node0.isInc());
379:       assertFalse(node0.isCase());
380:       assertEquals((-1), node0.getCharno());
381:       assertFalse(node0.isThrow());
382:       assertFalse(node0.isFalse());
383:       assertFalse(node0.isFunction());
384:       assertFalse(node0.isDebugger());
385:       assertFalse(node0.isSwitch());
386:       assertFalse(node0.isArrayLit());
387:       assertEquals(0, node0.getChildCount());
388:       assertFalse(node0.isAnd());
389:       assertFalse(node0.isObjectLit());
390:       assertFalse(node0.isNot());
391:       assertFalse(node0.isComma());
392:       assertFalse(node0.isDefaultCase());
393:       assertFalse(node0.isGetProp());
394:       assertFalse(node0.isTrue());
395:       assertFalse(node0.isAssign());
396:       assertFalse(node0.isBreak());
397:       assertFalse(node0.isDec());
398:       assertFalse(node0.isNull());
399:       assertFalse(node0.isDelProp());
400:       assertFalse(node0.isTypeOf());
401:       assertFalse(node0.isVoid());
402:       assertFalse(node0.isCall());
403:       assertFalse(node0.isName());
404:       assertFalse(node0.isGetElem());
405:       assertFalse(node0.isExprResult());
406:       assertEquals(29, Node.JSDOC_INFO_PROP);
407:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
408:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
409:       assertEquals(47, Node.IS_DISPATCHER);
410:       assertEquals(2, Node.POST_FLAG);
411:       assertEquals(53, Node.INPUT_ID);
412:       assertEquals(32, Node.INCRDECR_PROP);
413:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
414:       assertEquals(46, Node.IS_NAMESPACE);
415:       assertEquals(51, Node.STATIC_SOURCE_FILE);
416:       assertEquals(30, Node.VAR_ARGS_NAME);
417:       assertEquals(54, Node.SLASH_V);
418:       assertEquals(43, Node.IS_CONSTANT_NAME);
419:       assertEquals(40, Node.ORIGINALNAME_PROP);
420:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
421:       assertEquals(52, Node.LENGTH);
422:       assertEquals(57, Node.REFLECTED_OBJECT);
423:       assertEquals(50, Node.FREE_CALL);
424:       assertEquals(8, Node.FLAG_NO_THROWS);
425:       assertEquals(39, Node.EMPTY_BLOCK);
426:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
427:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
428:       assertEquals(15, Node.NO_SIDE_EFFECTS);
429:       assertEquals(57, Node.LAST_PROP);
430:       assertEquals(1, Node.DECR_FLAG);
431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
432:       assertEquals(12, Node.COLUMN_BITS);
433:       assertEquals(4095, Node.COLUMN_MASK);
434:       assertEquals(55, Node.INFERRED_FUNCTION);
435:       assertEquals(36, Node.QUOTED_PROP);
436:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
437:       assertEquals(37, Node.OPT_ARG_NAME);
438:       assertEquals(56, Node.CHANGE_TIME);
439:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
440:       assertEquals(49, Node.DIRECT_EVAL);
441:       assertEquals(48, Node.DIRECTIVES);
442:       
443:       boolean boolean2 = node0.isVoid();
444:       assertFalse(boolean2);
445:       assertTrue(boolean2 == boolean0);
446:       assertTrue(boolean2 == boolean1);
447:       assertFalse(node0.isReturn());
448:       assertFalse(node0.hasMoreThanOneChild());
449:       assertFalse(node0.isAssignAdd());
450:       assertFalse(node0.isContinue());
451:       assertFalse(node0.isOr());
452:       assertFalse(node0.isLabel());
453:       assertEquals((-1), node0.getSourcePosition());
454:       assertFalse(node0.isNumber());
455:       assertFalse(node0.hasChildren());
456:       assertFalse(node0.isWhile());
457:       assertFalse(node0.isAdd());
458:       assertTrue(node0.isString());
459:       assertFalse(node0.isDo());
460:       assertFalse(node0.isNew());
461:       assertFalse(node0.hasOneChild());
462:       assertFalse(node0.isVar());
463:       assertFalse(node0.isCast());
464:       assertFalse(node0.isStringKey());
465:       assertFalse(node0.isParamList());
466:       assertFalse(node0.isLabelName());
467:       assertFalse(node0.isInstanceOf());
468:       assertFalse(node0.isCatch());
469:       assertEquals(40, node0.getType());
470:       assertFalse(node0.isThis());
471:       assertFalse(node0.isScript());
472:       assertFalse(node0.isSetterDef());
473:       assertFalse(node0.isTry());
474:       assertFalse(node0.isHook());
475:       assertFalse(node0.isBlock());
476:       assertFalse(node0.isFor());
477:       assertFalse(node0.isIf());
478:       assertFalse(node0.isRegExp());
479:       assertFalse(node0.isWith());
480:       assertFalse(node0.isNE());
481:       assertEquals((-1), node0.getLineno());
482:       assertFalse(node0.isIn());
483:       assertFalse(node0.isGetterDef());
484:       assertFalse(node0.isEmpty());
485:       assertFalse(node0.isInc());
486:       assertFalse(node0.isCase());
487:       assertEquals((-1), node0.getCharno());
488:       assertFalse(node0.isThrow());
489:       assertFalse(node0.isFalse());
490:       assertFalse(node0.isFunction());
491:       assertFalse(node0.isDebugger());
492:       assertFalse(node0.isSwitch());
493:       assertFalse(node0.isArrayLit());
494:       assertEquals(0, node0.getChildCount());
495:       assertFalse(node0.isAnd());
496:       assertFalse(node0.isObjectLit());
497:       assertFalse(node0.isNot());
498:       assertFalse(node0.isComma());
499:       assertFalse(node0.isDefaultCase());
500:       assertFalse(node0.isGetProp());
501:       assertFalse(node0.isTrue());
502:       assertFalse(node0.isAssign());
503:       assertFalse(node0.isBreak());
504:       assertFalse(node0.isDec());
505:       assertFalse(node0.isNull());
506:       assertFalse(node0.isDelProp());
507:       assertFalse(node0.isTypeOf());
508:       assertFalse(node0.isVoid());
509:       assertFalse(node0.isCall());
510:       assertFalse(node0.isName());
511:       assertFalse(node0.isGetElem());
512:       assertFalse(node0.isExprResult());
513:       assertEquals(29, Node.JSDOC_INFO_PROP);
514:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
515:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
516:       assertEquals(47, Node.IS_DISPATCHER);
517:       assertEquals(2, Node.POST_FLAG);
518:       assertEquals(53, Node.INPUT_ID);
519:       assertEquals(32, Node.INCRDECR_PROP);
520:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
521:       assertEquals(46, Node.IS_NAMESPACE);
522:       assertEquals(51, Node.STATIC_SOURCE_FILE);
523:       assertEquals(30, Node.VAR_ARGS_NAME);
524:       assertEquals(54, Node.SLASH_V);
525:       assertEquals(43, Node.IS_CONSTANT_NAME);
526:       assertEquals(40, Node.ORIGINALNAME_PROP);
527:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
528:       assertEquals(52, Node.LENGTH);
529:       assertEquals(57, Node.REFLECTED_OBJECT);
530:       assertEquals(50, Node.FREE_CALL);
531:       assertEquals(8, Node.FLAG_NO_THROWS);
532:       assertEquals(39, Node.EMPTY_BLOCK);
533:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
534:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
535:       assertEquals(15, Node.NO_SIDE_EFFECTS);
536:       assertEquals(57, Node.LAST_PROP);
537:       assertEquals(1, Node.DECR_FLAG);
538:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
539:       assertEquals(12, Node.COLUMN_BITS);
540:       assertEquals(4095, Node.COLUMN_MASK);
541:       assertEquals(55, Node.INFERRED_FUNCTION);
542:       assertEquals(36, Node.QUOTED_PROP);
543:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
544:       assertEquals(37, Node.OPT_ARG_NAME);
545:       assertEquals(56, Node.CHANGE_TIME);
546:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
547:       assertEquals(49, Node.DIRECT_EVAL);
548:       assertEquals(48, Node.DIRECTIVES);
549:       
550:       boolean boolean3 = node0.isName();
551:       assertFalse(boolean3);
552:       assertTrue(boolean3 == boolean1);
553:       assertTrue(boolean3 == boolean0);
554:       assertTrue(boolean3 == boolean2);
555:       assertFalse(node0.isReturn());
556:       assertFalse(node0.hasMoreThanOneChild());
557:       assertFalse(node0.isAssignAdd());
558:       assertFalse(node0.isContinue());
559:       assertFalse(node0.isOr());
560:       assertFalse(node0.isLabel());
561:       assertEquals((-1), node0.getSourcePosition());
562:       assertFalse(node0.isNumber());
563:       assertFalse(node0.hasChildren());
564:       assertFalse(node0.isWhile());
565:       assertFalse(node0.isAdd());
566:       assertTrue(node0.isString());
567:       assertFalse(node0.isDo());
568:       assertFalse(node0.isNew());
569:       assertFalse(node0.hasOneChild());
570:       assertFalse(node0.isVar());
571:       assertFalse(node0.isCast());
572:       assertFalse(node0.isStringKey());
573:       assertFalse(node0.isParamList());
574:       assertFalse(node0.isLabelName());
575:       assertFalse(node0.isInstanceOf());
576:       assertFalse(node0.isCatch());
577:       assertEquals(40, node0.getType());
578:       assertFalse(node0.isThis());
579:       assertFalse(node0.isScript());
580:       assertFalse(node0.isSetterDef());
581:       assertFalse(node0.isTry());
582:       assertFalse(node0.isHook());
583:       assertFalse(node0.isBlock());
584:       assertFalse(node0.isFor());
585:       assertFalse(node0.isIf());
586:       assertFalse(node0.isRegExp());
587:       assertFalse(node0.isWith());
588:       assertFalse(node0.isNE());
589:       assertEquals((-1), node0.getLineno());
590:       assertFalse(node0.isIn());
591:       assertFalse(node0.isGetterDef());
592:       assertFalse(node0.isEmpty());
593:       assertFalse(node0.isInc());
594:       assertFalse(node0.isCase());
595:       assertEquals((-1), node0.getCharno());
596:       assertFalse(node0.isThrow());
597:       assertFalse(node0.isFalse());
598:       assertFalse(node0.isFunction());
599:       assertFalse(node0.isDebugger());
600:       assertFalse(node0.isSwitch());
601:       assertFalse(node0.isArrayLit());
602:       assertEquals(0, node0.getChildCount());
603:       assertFalse(node0.isAnd());
604:       assertFalse(node0.isObjectLit());
605:       assertFalse(node0.isNot());
606:       assertFalse(node0.isComma());
607:       assertFalse(node0.isDefaultCase());
608:       assertFalse(node0.isGetProp());
609:       assertFalse(node0.isTrue());
610:       assertFalse(node0.isAssign());
611:       assertFalse(node0.isBreak());
612:       assertFalse(node0.isDec());
613:       assertFalse(node0.isNull());
614:       assertFalse(node0.isDelProp());
615:       assertFalse(node0.isTypeOf());
616:       assertFalse(node0.isVoid());
617:       assertFalse(node0.isCall());
618:       assertFalse(node0.isName());
619:       assertFalse(node0.isGetElem());
620:       assertFalse(node0.isExprResult());
621:       assertEquals(29, Node.JSDOC_INFO_PROP);
622:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
623:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
624:       assertEquals(47, Node.IS_DISPATCHER);
625:       assertEquals(2, Node.POST_FLAG);
626:       assertEquals(53, Node.INPUT_ID);
627:       assertEquals(32, Node.INCRDECR_PROP);
628:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
629:       assertEquals(46, Node.IS_NAMESPACE);
630:       assertEquals(51, Node.STATIC_SOURCE_FILE);
631:       assertEquals(30, Node.VAR_ARGS_NAME);
632:       assertEquals(54, Node.SLASH_V);
633:       assertEquals(43, Node.IS_CONSTANT_NAME);
634:       assertEquals(40, Node.ORIGINALNAME_PROP);
635:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
636:       assertEquals(52, Node.LENGTH);
637:       assertEquals(57, Node.REFLECTED_OBJECT);
638:       assertEquals(50, Node.FREE_CALL);
639:       assertEquals(8, Node.FLAG_NO_THROWS);
640:       assertEquals(39, Node.EMPTY_BLOCK);
641:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
642:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
643:       assertEquals(15, Node.NO_SIDE_EFFECTS);
644:       assertEquals(57, Node.LAST_PROP);
645:       assertEquals(1, Node.DECR_FLAG);
646:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
647:       assertEquals(12, Node.COLUMN_BITS);
648:       assertEquals(4095, Node.COLUMN_MASK);
649:       assertEquals(55, Node.INFERRED_FUNCTION);
650:       assertEquals(36, Node.QUOTED_PROP);
651:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
652:       assertEquals(37, Node.OPT_ARG_NAME);
653:       assertEquals(56, Node.CHANGE_TIME);
654:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
655:       assertEquals(49, Node.DIRECT_EVAL);
656:       assertEquals(48, Node.DIRECTIVES);
657:       
658:       boolean boolean4 = node0.isCall();
659:       assertFalse(boolean4);
660:       assertTrue(boolean4 == boolean0);
661:       assertTrue(boolean4 == boolean1);
662:       assertTrue(boolean4 == boolean3);
663:       assertTrue(boolean4 == boolean2);
664:       assertFalse(node0.isReturn());
665:       assertFalse(node0.hasMoreThanOneChild());
666:       assertFalse(node0.isAssignAdd());
667:       assertFalse(node0.isContinue());
668:       assertFalse(node0.isOr());
669:       assertFalse(node0.isLabel());
670:       assertEquals((-1), node0.getSourcePosition());
671:       assertFalse(node0.isNumber());
672:       assertFalse(node0.hasChildren());
673:       assertFalse(node0.isWhile());
674:       assertFalse(node0.isAdd());
675:       assertTrue(node0.isString());
676:       assertFalse(node0.isDo());
677:       assertFalse(node0.isNew());
678:       assertFalse(node0.hasOneChild());
679:       assertFalse(node0.isVar());
680:       assertFalse(node0.isCast());
681:       assertFalse(node0.isStringKey());
682:       assertFalse(node0.isParamList());
683:       assertFalse(node0.isLabelName());
684:       assertFalse(node0.isInstanceOf());
685:       assertFalse(node0.isCatch());
686:       assertEquals(40, node0.getType());
687:       assertFalse(node0.isThis());
688:       assertFalse(node0.isScript());
689:       assertFalse(node0.isSetterDef());
690:       assertFalse(node0.isTry());
691:       assertFalse(node0.isHook());
692:       assertFalse(node0.isBlock());
693:       assertFalse(node0.isFor());
694:       assertFalse(node0.isIf());
695:       assertFalse(node0.isRegExp());
696:       assertFalse(node0.isWith());
697:       assertFalse(node0.isNE());
698:       assertEquals((-1), node0.getLineno());
699:       assertFalse(node0.isIn());
700:       assertFalse(node0.isGetterDef());
701:       assertFalse(node0.isEmpty());
702:       assertFalse(node0.isInc());
703:       assertFalse(node0.isCase());
704:       assertEquals((-1), node0.getCharno());
705:       assertFalse(node0.isThrow());
706:       assertFalse(node0.isFalse());
707:       assertFalse(node0.isFunction());
708:       assertFalse(node0.isDebugger());
709:       assertFalse(node0.isSwitch());
710:       assertFalse(node0.isArrayLit());
711:       assertEquals(0, node0.getChildCount());
712:       assertFalse(node0.isAnd());
713:       assertFalse(node0.isObjectLit());
714:       assertFalse(node0.isNot());
715:       assertFalse(node0.isComma());
716:       assertFalse(node0.isDefaultCase());
717:       assertFalse(node0.isGetProp());
718:       assertFalse(node0.isTrue());
719:       assertFalse(node0.isAssign());
720:       assertFalse(node0.isBreak());
721:       assertFalse(node0.isDec());
722:       assertFalse(node0.isNull());
723:       assertFalse(node0.isDelProp());
724:       assertFalse(node0.isTypeOf());
725:       assertFalse(node0.isVoid());
726:       assertFalse(node0.isCall());
727:       assertFalse(node0.isName());
728:       assertFalse(node0.isGetElem());
729:       assertFalse(node0.isExprResult());
730:       assertEquals(29, Node.JSDOC_INFO_PROP);
731:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
732:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
733:       assertEquals(47, Node.IS_DISPATCHER);
734:       assertEquals(2, Node.POST_FLAG);
735:       assertEquals(53, Node.INPUT_ID);
736:       assertEquals(32, Node.INCRDECR_PROP);
737:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
738:       assertEquals(46, Node.IS_NAMESPACE);
739:       assertEquals(51, Node.STATIC_SOURCE_FILE);
740:       assertEquals(30, Node.VAR_ARGS_NAME);
741:       assertEquals(54, Node.SLASH_V);
742:       assertEquals(43, Node.IS_CONSTANT_NAME);
743:       assertEquals(40, Node.ORIGINALNAME_PROP);
744:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
745:       assertEquals(52, Node.LENGTH);
746:       assertEquals(57, Node.REFLECTED_OBJECT);
747:       assertEquals(50, Node.FREE_CALL);
748:       assertEquals(8, Node.FLAG_NO_THROWS);
749:       assertEquals(39, Node.EMPTY_BLOCK);
750:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
751:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
752:       assertEquals(15, Node.NO_SIDE_EFFECTS);
753:       assertEquals(57, Node.LAST_PROP);
754:       assertEquals(1, Node.DECR_FLAG);
755:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
756:       assertEquals(12, Node.COLUMN_BITS);
757:       assertEquals(4095, Node.COLUMN_MASK);
758:       assertEquals(55, Node.INFERRED_FUNCTION);
759:       assertEquals(36, Node.QUOTED_PROP);
760:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
761:       assertEquals(37, Node.OPT_ARG_NAME);
762:       assertEquals(56, Node.CHANGE_TIME);
763:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
764:       assertEquals(49, Node.DIRECT_EVAL);
765:       assertEquals(48, Node.DIRECTIVES);
766:       
767:       boolean boolean5 = node0.isDelProp();
768:       assertFalse(boolean5);
769:       assertTrue(boolean5 == boolean2);
770:       assertTrue(boolean5 == boolean0);
771:       assertTrue(boolean5 == boolean1);
772:       assertTrue(boolean5 == boolean3);
773:       assertTrue(boolean5 == boolean4);
774:       assertFalse(node0.isReturn());
775:       assertFalse(node0.hasMoreThanOneChild());
776:       assertFalse(node0.isAssignAdd());
777:       assertFalse(node0.isContinue());
778:       assertFalse(node0.isOr());
779:       assertFalse(node0.isLabel());
780:       assertEquals((-1), node0.getSourcePosition());
781:       assertFalse(node0.isNumber());
782:       assertFalse(node0.hasChildren());
783:       assertFalse(node0.isWhile());
784:       assertFalse(node0.isAdd());
785:       assertTrue(node0.isString());
786:       assertFalse(node0.isDo());
787:       assertFalse(node0.isNew());
788:       assertFalse(node0.hasOneChild());
789:       assertFalse(node0.isVar());
790:       assertFalse(node0.isCast());
791:       assertFalse(node0.isStringKey());
792:       assertFalse(node0.isParamList());
793:       assertFalse(node0.isLabelName());
794:       assertFalse(node0.isInstanceOf());
795:       assertFalse(node0.isCatch());
796:       assertEquals(40, node0.getType());
797:       assertFalse(node0.isThis());
798:       assertFalse(node0.isScript());
799:       assertFalse(node0.isSetterDef());
800:       assertFalse(node0.isTry());
801:       assertFalse(node0.isHook());
802:       assertFalse(node0.isBlock());
803:       assertFalse(node0.isFor());
804:       assertFalse(node0.isIf());
805:       assertFalse(node0.isRegExp());
806:       assertFalse(node0.isWith());
807:       assertFalse(node0.isNE());
808:       assertEquals((-1), node0.getLineno());
809:       assertFalse(node0.isIn());
810:       assertFalse(node0.isGetterDef());
811:       assertFalse(node0.isEmpty());
812:       assertFalse(node0.isInc());
813:       assertFalse(node0.isCase());
814:       assertEquals((-1), node0.getCharno());
815:       assertFalse(node0.isThrow());
816:       assertFalse(node0.isFalse());
817:       assertFalse(node0.isFunction());
818:       assertFalse(node0.isDebugger());
819:       assertFalse(node0.isSwitch());
820:       assertFalse(node0.isArrayLit());
821:       assertEquals(0, node0.getChildCount());
822:       assertFalse(node0.isAnd());
823:       assertFalse(node0.isObjectLit());
824:       assertFalse(node0.isNot());
825:       assertFalse(node0.isComma());
826:       assertFalse(node0.isDefaultCase());
827:       assertFalse(node0.isGetProp());
828:       assertFalse(node0.isTrue());
829:       assertFalse(node0.isAssign());
830:       assertFalse(node0.isBreak());
831:       assertFalse(node0.isDec());
832:       assertFalse(node0.isNull());
833:       assertFalse(node0.isDelProp());
834:       assertFalse(node0.isTypeOf());
835:       assertFalse(node0.isVoid());
836:       assertFalse(node0.isCall());
837:       assertFalse(node0.isName());
838:       assertFalse(node0.isGetElem());
839:       assertFalse(node0.isExprResult());
840:       assertEquals(29, Node.JSDOC_INFO_PROP);
841:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
842:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
843:       assertEquals(47, Node.IS_DISPATCHER);
844:       assertEquals(2, Node.POST_FLAG);
845:       assertEquals(53, Node.INPUT_ID);
846:       assertEquals(32, Node.INCRDECR_PROP);
847:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
848:       assertEquals(46, Node.IS_NAMESPACE);
849:       assertEquals(51, Node.STATIC_SOURCE_FILE);
850:       assertEquals(30, Node.VAR_ARGS_NAME);
851:       assertEquals(54, Node.SLASH_V);
852:       assertEquals(43, Node.IS_CONSTANT_NAME);
853:       assertEquals(40, Node.ORIGINALNAME_PROP);
854:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
855:       assertEquals(52, Node.LENGTH);
856:       assertEquals(57, Node.REFLECTED_OBJECT);
857:       assertEquals(50, Node.FREE_CALL);
858:       assertEquals(8, Node.FLAG_NO_THROWS);
859:       assertEquals(39, Node.EMPTY_BLOCK);
860:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
861:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
862:       assertEquals(15, Node.NO_SIDE_EFFECTS);
863:       assertEquals(57, Node.LAST_PROP);
864:       assertEquals(1, Node.DECR_FLAG);
865:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
866:       assertEquals(12, Node.COLUMN_BITS);
867:       assertEquals(4095, Node.COLUMN_MASK);
868:       assertEquals(55, Node.INFERRED_FUNCTION);
869:       assertEquals(36, Node.QUOTED_PROP);
870:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
871:       assertEquals(37, Node.OPT_ARG_NAME);
872:       assertEquals(56, Node.CHANGE_TIME);
873:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
874:       assertEquals(49, Node.DIRECT_EVAL);
875:       assertEquals(48, Node.DIRECTIVES);
876:       
877:       try { 
878:         node0.setDouble((-267.3420189412577));
879:         fail("Expecting exception: UnsupportedOperationException");
880:       
881:       } catch(UnsupportedOperationException e) {
882:          //
883:          // STRING  is not a string node
884:          //
885:          verifyException("com.google.javascript.rhino.Node", e);
886:       }
887:   }
888: }
RegularFileObject[/tmp/EvoSuite_94_1628159311515/com/google/javascript/rhino/Node_94_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:31 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_94_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_94_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_94_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.NamedType",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.JSDocInfo$Marker",
356:       "com.google.common.collect.ImmutableSet",
357:       "com.google.common.collect.EmptyImmutableSet",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 10:28:31.586 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertNotNull(node0);
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);

boolean boolean0 = node0.isWhile();
assertFalse(boolean0);
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);

boolean boolean1 = node0.isTypeOf();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);

boolean boolean2 = node0.isVoid();
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);

boolean boolean3 = node0.isName();
assertFalse(boolean3);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);

boolean boolean4 = node0.isCall();
assertFalse(boolean4);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);

boolean boolean5 = node0.isDelProp();
assertFalse(boolean5);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);

node0.setDouble((-267.3420189412577));

[MASTER] 10:28:33.015 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_101_1628159312763/com/google/javascript/rhino/Node_101_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_101_1628159312763/com/google/javascript/rhino/Node_101_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:33.016 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:33.016 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:33.016 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 342
[MASTER] 10:28:33.018 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_101_1628159312763/com/google/javascript/rhino/Node_101_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:32 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.JSType;
13: import java.util.ArrayList;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.testdata.EvoSuiteFile;
17: import org.evosuite.runtime.testdata.FileSystemHandling;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_101_tmp__ESTest extends Node_101_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = Node.newString("");
26:       assertNotNull(node0);
27:       assertEquals((-1), node0.getSourcePosition());
28:       assertFalse(node0.isLabel());
29:       assertFalse(node0.hasChildren());
30:       assertEquals((-1), node0.getLineno());
31:       assertFalse(node0.isReturn());
32:       assertFalse(node0.isLabelName());
33:       assertFalse(node0.isAssignAdd());
34:       assertFalse(node0.isContinue());
35:       assertFalse(node0.isCast());
36:       assertFalse(node0.isGetElem());
37:       assertFalse(node0.isDec());
38:       assertFalse(node0.isAssign());
39:       assertFalse(node0.isTypeOf());
40:       assertFalse(node0.hasMoreThanOneChild());
41:       assertFalse(node0.isBlock());
42:       assertFalse(node0.isScript());
43:       assertFalse(node0.isWhile());
44:       assertTrue(node0.isString());
45:       assertFalse(node0.isAnd());
46:       assertFalse(node0.isObjectLit());
47:       assertFalse(node0.isStringKey());
48:       assertFalse(node0.hasOneChild());
49:       assertFalse(node0.isNot());
50:       assertFalse(node0.isNumber());
51:       assertFalse(node0.isThis());
52:       assertFalse(node0.isSetterDef());
53:       assertFalse(node0.isCatch());
54:       assertFalse(node0.isThrow());
55:       assertEquals(40, node0.getType());
56:       assertFalse(node0.isHook());
57:       assertFalse(node0.isInstanceOf());
58:       assertFalse(node0.isRegExp());
59:       assertFalse(node0.isWith());
60:       assertFalse(node0.isFalse());
61:       assertFalse(node0.isInc());
62:       assertFalse(node0.isFunction());
63:       assertFalse(node0.isIn());
64:       assertFalse(node0.isNE());
65:       assertFalse(node0.isDelProp());
66:       assertFalse(node0.isIf());
67:       assertFalse(node0.isArrayLit());
68:       assertFalse(node0.isFor());
69:       assertEquals((-1), node0.getCharno());
70:       assertFalse(node0.isDebugger());
71:       assertFalse(node0.isTry());
72:       assertFalse(node0.isSwitch());
73:       assertFalse(node0.isCase());
74:       assertFalse(node0.isGetterDef());
75:       assertFalse(node0.isParamList());
76:       assertFalse(node0.isComma());
77:       assertFalse(node0.isNull());
78:       assertFalse(node0.isBreak());
79:       assertFalse(node0.isGetProp());
80:       assertFalse(node0.isName());
81:       assertFalse(node0.isCall());
82:       assertFalse(node0.isVar());
83:       assertEquals(0, node0.getChildCount());
84:       assertFalse(node0.isTrue());
85:       assertFalse(node0.isExprResult());
86:       assertFalse(node0.isVoid());
87:       assertFalse(node0.isNew());
88:       assertFalse(node0.isAdd());
89:       assertFalse(node0.isDo());
90:       assertFalse(node0.isDefaultCase());
91:       assertFalse(node0.isOr());
92:       assertFalse(node0.isEmpty());
93:       assertEquals(53, Node.INPUT_ID);
94:       assertEquals(43, Node.IS_CONSTANT_NAME);
95:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
96:       assertEquals(47, Node.IS_DISPATCHER);
97:       assertEquals(2, Node.POST_FLAG);
98:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
99:       assertEquals(4095, Node.COLUMN_MASK);
100:       assertEquals(32, Node.INCRDECR_PROP);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(51, Node.STATIC_SOURCE_FILE);
103:       assertEquals(12, Node.COLUMN_BITS);
104:       assertEquals(50, Node.FREE_CALL);
105:       assertEquals(1, Node.DECR_FLAG);
106:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
107:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
108:       assertEquals(52, Node.LENGTH);
109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
110:       assertEquals(57, Node.REFLECTED_OBJECT);
111:       assertEquals(54, Node.SLASH_V);
112:       assertEquals(57, Node.LAST_PROP);
113:       assertEquals(30, Node.VAR_ARGS_NAME);
114:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
115:       assertEquals(49, Node.DIRECT_EVAL);
116:       assertEquals(40, Node.ORIGINALNAME_PROP);
117:       assertEquals(48, Node.DIRECTIVES);
118:       assertEquals(37, Node.OPT_ARG_NAME);
119:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
120:       assertEquals(56, Node.CHANGE_TIME);
121:       assertEquals(29, Node.JSDOC_INFO_PROP);
122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
123:       assertEquals(36, Node.QUOTED_PROP);
124:       assertEquals(55, Node.INFERRED_FUNCTION);
125:       assertEquals(8, Node.FLAG_NO_THROWS);
126:       assertEquals(39, Node.EMPTY_BLOCK);
127:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
128:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
129:       
130:       boolean boolean0 = node0.isExprResult();
131:       assertFalse(boolean0);
132:       assertEquals((-1), node0.getSourcePosition());
133:       assertFalse(node0.isLabel());
134:       assertFalse(node0.hasChildren());
135:       assertEquals((-1), node0.getLineno());
136:       assertFalse(node0.isReturn());
137:       assertFalse(node0.isLabelName());
138:       assertFalse(node0.isAssignAdd());
139:       assertFalse(node0.isContinue());
140:       assertFalse(node0.isCast());
141:       assertFalse(node0.isGetElem());
142:       assertFalse(node0.isDec());
143:       assertFalse(node0.isAssign());
144:       assertFalse(node0.isTypeOf());
145:       assertFalse(node0.hasMoreThanOneChild());
146:       assertFalse(node0.isBlock());
147:       assertFalse(node0.isScript());
148:       assertFalse(node0.isWhile());
149:       assertTrue(node0.isString());
150:       assertFalse(node0.isAnd());
151:       assertFalse(node0.isObjectLit());
152:       assertFalse(node0.isStringKey());
153:       assertFalse(node0.hasOneChild());
154:       assertFalse(node0.isNot());
155:       assertFalse(node0.isNumber());
156:       assertFalse(node0.isThis());
157:       assertFalse(node0.isSetterDef());
158:       assertFalse(node0.isCatch());
159:       assertFalse(node0.isThrow());
160:       assertEquals(40, node0.getType());
161:       assertFalse(node0.isHook());
162:       assertFalse(node0.isInstanceOf());
163:       assertFalse(node0.isRegExp());
164:       assertFalse(node0.isWith());
165:       assertFalse(node0.isFalse());
166:       assertFalse(node0.isInc());
167:       assertFalse(node0.isFunction());
168:       assertFalse(node0.isIn());
169:       assertFalse(node0.isNE());
170:       assertFalse(node0.isDelProp());
171:       assertFalse(node0.isIf());
172:       assertFalse(node0.isArrayLit());
173:       assertFalse(node0.isFor());
174:       assertEquals((-1), node0.getCharno());
175:       assertFalse(node0.isDebugger());
176:       assertFalse(node0.isTry());
177:       assertFalse(node0.isSwitch());
178:       assertFalse(node0.isCase());
179:       assertFalse(node0.isGetterDef());
180:       assertFalse(node0.isParamList());
181:       assertFalse(node0.isComma());
182:       assertFalse(node0.isNull());
183:       assertFalse(node0.isBreak());
184:       assertFalse(node0.isGetProp());
185:       assertFalse(node0.isName());
186:       assertFalse(node0.isCall());
187:       assertFalse(node0.isVar());
188:       assertEquals(0, node0.getChildCount());
189:       assertFalse(node0.isTrue());
190:       assertFalse(node0.isExprResult());
191:       assertFalse(node0.isVoid());
192:       assertFalse(node0.isNew());
193:       assertFalse(node0.isAdd());
194:       assertFalse(node0.isDo());
195:       assertFalse(node0.isDefaultCase());
196:       assertFalse(node0.isOr());
197:       assertFalse(node0.isEmpty());
198:       assertEquals(53, Node.INPUT_ID);
199:       assertEquals(43, Node.IS_CONSTANT_NAME);
200:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
201:       assertEquals(47, Node.IS_DISPATCHER);
202:       assertEquals(2, Node.POST_FLAG);
203:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
204:       assertEquals(4095, Node.COLUMN_MASK);
205:       assertEquals(32, Node.INCRDECR_PROP);
206:       assertEquals(46, Node.IS_NAMESPACE);
207:       assertEquals(51, Node.STATIC_SOURCE_FILE);
208:       assertEquals(12, Node.COLUMN_BITS);
209:       assertEquals(50, Node.FREE_CALL);
210:       assertEquals(1, Node.DECR_FLAG);
211:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
212:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
213:       assertEquals(52, Node.LENGTH);
214:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
215:       assertEquals(57, Node.REFLECTED_OBJECT);
216:       assertEquals(54, Node.SLASH_V);
217:       assertEquals(57, Node.LAST_PROP);
218:       assertEquals(30, Node.VAR_ARGS_NAME);
219:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
220:       assertEquals(49, Node.DIRECT_EVAL);
221:       assertEquals(40, Node.ORIGINALNAME_PROP);
222:       assertEquals(48, Node.DIRECTIVES);
223:       assertEquals(37, Node.OPT_ARG_NAME);
224:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
225:       assertEquals(56, Node.CHANGE_TIME);
226:       assertEquals(29, Node.JSDOC_INFO_PROP);
227:       assertEquals(15, Node.NO_SIDE_EFFECTS);
228:       assertEquals(36, Node.QUOTED_PROP);
229:       assertEquals(55, Node.INFERRED_FUNCTION);
230:       assertEquals(8, Node.FLAG_NO_THROWS);
231:       assertEquals(39, Node.EMPTY_BLOCK);
232:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
233:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
234:       
235:       boolean boolean1 = node0.isTypeOf();
236:       assertFalse(boolean1);
237:       assertTrue(boolean1 == boolean0);
238:       assertEquals((-1), node0.getSourcePosition());
239:       assertFalse(node0.isLabel());
240:       assertFalse(node0.hasChildren());
241:       assertEquals((-1), node0.getLineno());
242:       assertFalse(node0.isReturn());
243:       assertFalse(node0.isLabelName());
244:       assertFalse(node0.isAssignAdd());
245:       assertFalse(node0.isContinue());
246:       assertFalse(node0.isCast());
247:       assertFalse(node0.isGetElem());
248:       assertFalse(node0.isDec());
249:       assertFalse(node0.isAssign());
250:       assertFalse(node0.isTypeOf());
251:       assertFalse(node0.hasMoreThanOneChild());
252:       assertFalse(node0.isBlock());
253:       assertFalse(node0.isScript());
254:       assertFalse(node0.isWhile());
255:       assertTrue(node0.isString());
256:       assertFalse(node0.isAnd());
257:       assertFalse(node0.isObjectLit());
258:       assertFalse(node0.isStringKey());
259:       assertFalse(node0.hasOneChild());
260:       assertFalse(node0.isNot());
261:       assertFalse(node0.isNumber());
262:       assertFalse(node0.isThis());
263:       assertFalse(node0.isSetterDef());
264:       assertFalse(node0.isCatch());
265:       assertFalse(node0.isThrow());
266:       assertEquals(40, node0.getType());
267:       assertFalse(node0.isHook());
268:       assertFalse(node0.isInstanceOf());
269:       assertFalse(node0.isRegExp());
270:       assertFalse(node0.isWith());
271:       assertFalse(node0.isFalse());
272:       assertFalse(node0.isInc());
273:       assertFalse(node0.isFunction());
274:       assertFalse(node0.isIn());
275:       assertFalse(node0.isNE());
276:       assertFalse(node0.isDelProp());
277:       assertFalse(node0.isIf());
278:       assertFalse(node0.isArrayLit());
279:       assertFalse(node0.isFor());
280:       assertEquals((-1), node0.getCharno());
281:       assertFalse(node0.isDebugger());
282:       assertFalse(node0.isTry());
283:       assertFalse(node0.isSwitch());
284:       assertFalse(node0.isCase());
285:       assertFalse(node0.isGetterDef());
286:       assertFalse(node0.isParamList());
287:       assertFalse(node0.isComma());
288:       assertFalse(node0.isNull());
289:       assertFalse(node0.isBreak());
290:       assertFalse(node0.isGetProp());
291:       assertFalse(node0.isName());
292:       assertFalse(node0.isCall());
293:       assertFalse(node0.isVar());
294:       assertEquals(0, node0.getChildCount());
295:       assertFalse(node0.isTrue());
296:       assertFalse(node0.isExprResult());
297:       assertFalse(node0.isVoid());
298:       assertFalse(node0.isNew());
299:       assertFalse(node0.isAdd());
300:       assertFalse(node0.isDo());
301:       assertFalse(node0.isDefaultCase());
302:       assertFalse(node0.isOr());
303:       assertFalse(node0.isEmpty());
304:       assertEquals(53, Node.INPUT_ID);
305:       assertEquals(43, Node.IS_CONSTANT_NAME);
306:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
307:       assertEquals(47, Node.IS_DISPATCHER);
308:       assertEquals(2, Node.POST_FLAG);
309:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
310:       assertEquals(4095, Node.COLUMN_MASK);
311:       assertEquals(32, Node.INCRDECR_PROP);
312:       assertEquals(46, Node.IS_NAMESPACE);
313:       assertEquals(51, Node.STATIC_SOURCE_FILE);
314:       assertEquals(12, Node.COLUMN_BITS);
315:       assertEquals(50, Node.FREE_CALL);
316:       assertEquals(1, Node.DECR_FLAG);
317:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
318:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
319:       assertEquals(52, Node.LENGTH);
320:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
321:       assertEquals(57, Node.REFLECTED_OBJECT);
322:       assertEquals(54, Node.SLASH_V);
323:       assertEquals(57, Node.LAST_PROP);
324:       assertEquals(30, Node.VAR_ARGS_NAME);
325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
326:       assertEquals(49, Node.DIRECT_EVAL);
327:       assertEquals(40, Node.ORIGINALNAME_PROP);
328:       assertEquals(48, Node.DIRECTIVES);
329:       assertEquals(37, Node.OPT_ARG_NAME);
330:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
331:       assertEquals(56, Node.CHANGE_TIME);
332:       assertEquals(29, Node.JSDOC_INFO_PROP);
333:       assertEquals(15, Node.NO_SIDE_EFFECTS);
334:       assertEquals(36, Node.QUOTED_PROP);
335:       assertEquals(55, Node.INFERRED_FUNCTION);
336:       assertEquals(8, Node.FLAG_NO_THROWS);
337:       assertEquals(39, Node.EMPTY_BLOCK);
338:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
339:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
340:       
341:       Iterable<Node> iterable0 = node0.children();
342:       assertFalse(iterable0.contains(node0));
343:       assertNotNull(iterable0);
344:       assertEquals((-1), node0.getSourcePosition());
345:       assertFalse(node0.isLabel());
346:       assertFalse(node0.hasChildren());
347:       assertEquals((-1), node0.getLineno());
348:       assertFalse(node0.isReturn());
349:       assertFalse(node0.isLabelName());
350:       assertFalse(node0.isAssignAdd());
351:       assertFalse(node0.isContinue());
352:       assertFalse(node0.isCast());
353:       assertFalse(node0.isGetElem());
354:       assertFalse(node0.isDec());
355:       assertFalse(node0.isAssign());
356:       assertFalse(node0.isTypeOf());
357:       assertFalse(node0.hasMoreThanOneChild());
358:       assertFalse(node0.isBlock());
359:       assertFalse(node0.isScript());
360:       assertFalse(node0.isWhile());
361:       assertTrue(node0.isString());
362:       assertFalse(node0.isAnd());
363:       assertFalse(node0.isObjectLit());
364:       assertFalse(node0.isStringKey());
365:       assertFalse(node0.hasOneChild());
366:       assertFalse(node0.isNot());
367:       assertFalse(node0.isNumber());
368:       assertFalse(node0.isThis());
369:       assertFalse(node0.isSetterDef());
370:       assertFalse(node0.isCatch());
371:       assertFalse(node0.isThrow());
372:       assertEquals(40, node0.getType());
373:       assertFalse(node0.isHook());
374:       assertFalse(node0.isInstanceOf());
375:       assertFalse(node0.isRegExp());
376:       assertFalse(node0.isWith());
377:       assertFalse(node0.isFalse());
378:       assertFalse(node0.isInc());
379:       assertFalse(node0.isFunction());
380:       assertFalse(node0.isIn());
381:       assertFalse(node0.isNE());
382:       assertFalse(node0.isDelProp());
383:       assertFalse(node0.isIf());
384:       assertFalse(node0.isArrayLit());
385:       assertFalse(node0.isFor());
386:       assertEquals((-1), node0.getCharno());
387:       assertFalse(node0.isDebugger());
388:       assertFalse(node0.isTry());
389:       assertFalse(node0.isSwitch());
390:       assertFalse(node0.isCase());
391:       assertFalse(node0.isGetterDef());
392:       assertFalse(node0.isParamList());
393:       assertFalse(node0.isComma());
394:       assertFalse(node0.isNull());
395:       assertFalse(node0.isBreak());
396:       assertFalse(node0.isGetProp());
397:       assertFalse(node0.isName());
398:       assertFalse(node0.isCall());
399:       assertFalse(node0.isVar());
400:       assertEquals(0, node0.getChildCount());
401:       assertFalse(node0.isTrue());
402:       assertFalse(node0.isExprResult());
403:       assertFalse(node0.isVoid());
404:       assertFalse(node0.isNew());
405:       assertFalse(node0.isAdd());
406:       assertFalse(node0.isDo());
407:       assertFalse(node0.isDefaultCase());
408:       assertFalse(node0.isOr());
409:       assertFalse(node0.isEmpty());
410:       assertEquals(53, Node.INPUT_ID);
411:       assertEquals(43, Node.IS_CONSTANT_NAME);
412:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
413:       assertEquals(47, Node.IS_DISPATCHER);
414:       assertEquals(2, Node.POST_FLAG);
415:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
416:       assertEquals(4095, Node.COLUMN_MASK);
417:       assertEquals(32, Node.INCRDECR_PROP);
418:       assertEquals(46, Node.IS_NAMESPACE);
419:       assertEquals(51, Node.STATIC_SOURCE_FILE);
420:       assertEquals(12, Node.COLUMN_BITS);
421:       assertEquals(50, Node.FREE_CALL);
422:       assertEquals(1, Node.DECR_FLAG);
423:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
424:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
425:       assertEquals(52, Node.LENGTH);
426:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
427:       assertEquals(57, Node.REFLECTED_OBJECT);
428:       assertEquals(54, Node.SLASH_V);
429:       assertEquals(57, Node.LAST_PROP);
430:       assertEquals(30, Node.VAR_ARGS_NAME);
431:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
432:       assertEquals(49, Node.DIRECT_EVAL);
433:       assertEquals(40, Node.ORIGINALNAME_PROP);
434:       assertEquals(48, Node.DIRECTIVES);
435:       assertEquals(37, Node.OPT_ARG_NAME);
436:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
437:       assertEquals(56, Node.CHANGE_TIME);
438:       assertEquals(29, Node.JSDOC_INFO_PROP);
439:       assertEquals(15, Node.NO_SIDE_EFFECTS);
440:       assertEquals(36, Node.QUOTED_PROP);
441:       assertEquals(55, Node.INFERRED_FUNCTION);
442:       assertEquals(8, Node.FLAG_NO_THROWS);
443:       assertEquals(39, Node.EMPTY_BLOCK);
444:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
445:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
446:       
447:       boolean boolean2 = node0.isVoid();
448:       assertFalse(boolean2);
449:       assertTrue(boolean2 == boolean1);
450:       assertTrue(boolean2 == boolean0);
451:       assertEquals((-1), node0.getSourcePosition());
452:       assertFalse(node0.isLabel());
453:       assertFalse(node0.hasChildren());
454:       assertEquals((-1), node0.getLineno());
455:       assertFalse(node0.isReturn());
456:       assertFalse(node0.isLabelName());
457:       assertFalse(node0.isAssignAdd());
458:       assertFalse(node0.isContinue());
459:       assertFalse(node0.isCast());
460:       assertFalse(node0.isGetElem());
461:       assertFalse(node0.isDec());
462:       assertFalse(node0.isAssign());
463:       assertFalse(node0.isTypeOf());
464:       assertFalse(node0.hasMoreThanOneChild());
465:       assertFalse(node0.isBlock());
466:       assertFalse(node0.isScript());
467:       assertFalse(node0.isWhile());
468:       assertTrue(node0.isString());
469:       assertFalse(node0.isAnd());
470:       assertFalse(node0.isObjectLit());
471:       assertFalse(node0.isStringKey());
472:       assertFalse(node0.hasOneChild());
473:       assertFalse(node0.isNot());
474:       assertFalse(node0.isNumber());
475:       assertFalse(node0.isThis());
476:       assertFalse(node0.isSetterDef());
477:       assertFalse(node0.isCatch());
478:       assertFalse(node0.isThrow());
479:       assertEquals(40, node0.getType());
480:       assertFalse(node0.isHook());
481:       assertFalse(node0.isInstanceOf());
482:       assertFalse(node0.isRegExp());
483:       assertFalse(node0.isWith());
484:       assertFalse(node0.isFalse());
485:       assertFalse(node0.isInc());
486:       assertFalse(node0.isFunction());
487:       assertFalse(node0.isIn());
488:       assertFalse(node0.isNE());
489:       assertFalse(node0.isDelProp());
490:       assertFalse(node0.isIf());
491:       assertFalse(node0.isArrayLit());
492:       assertFalse(node0.isFor());
493:       assertEquals((-1), node0.getCharno());
494:       assertFalse(node0.isDebugger());
495:       assertFalse(node0.isTry());
496:       assertFalse(node0.isSwitch());
497:       assertFalse(node0.isCase());
498:       assertFalse(node0.isGetterDef());
499:       assertFalse(node0.isParamList());
500:       assertFalse(node0.isComma());
501:       assertFalse(node0.isNull());
502:       assertFalse(node0.isBreak());
503:       assertFalse(node0.isGetProp());
504:       assertFalse(node0.isName());
505:       assertFalse(node0.isCall());
506:       assertFalse(node0.isVar());
507:       assertEquals(0, node0.getChildCount());
508:       assertFalse(node0.isTrue());
509:       assertFalse(node0.isExprResult());
510:       assertFalse(node0.isVoid());
511:       assertFalse(node0.isNew());
512:       assertFalse(node0.isAdd());
513:       assertFalse(node0.isDo());
514:       assertFalse(node0.isDefaultCase());
515:       assertFalse(node0.isOr());
516:       assertFalse(node0.isEmpty());
517:       assertEquals(53, Node.INPUT_ID);
518:       assertEquals(43, Node.IS_CONSTANT_NAME);
519:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
520:       assertEquals(47, Node.IS_DISPATCHER);
521:       assertEquals(2, Node.POST_FLAG);
522:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
523:       assertEquals(4095, Node.COLUMN_MASK);
524:       assertEquals(32, Node.INCRDECR_PROP);
525:       assertEquals(46, Node.IS_NAMESPACE);
526:       assertEquals(51, Node.STATIC_SOURCE_FILE);
527:       assertEquals(12, Node.COLUMN_BITS);
528:       assertEquals(50, Node.FREE_CALL);
529:       assertEquals(1, Node.DECR_FLAG);
530:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
531:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
532:       assertEquals(52, Node.LENGTH);
533:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
534:       assertEquals(57, Node.REFLECTED_OBJECT);
535:       assertEquals(54, Node.SLASH_V);
536:       assertEquals(57, Node.LAST_PROP);
537:       assertEquals(30, Node.VAR_ARGS_NAME);
538:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
539:       assertEquals(49, Node.DIRECT_EVAL);
540:       assertEquals(40, Node.ORIGINALNAME_PROP);
541:       assertEquals(48, Node.DIRECTIVES);
542:       assertEquals(37, Node.OPT_ARG_NAME);
543:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
544:       assertEquals(56, Node.CHANGE_TIME);
545:       assertEquals(29, Node.JSDOC_INFO_PROP);
546:       assertEquals(15, Node.NO_SIDE_EFFECTS);
547:       assertEquals(36, Node.QUOTED_PROP);
548:       assertEquals(55, Node.INFERRED_FUNCTION);
549:       assertEquals(8, Node.FLAG_NO_THROWS);
550:       assertEquals(39, Node.EMPTY_BLOCK);
551:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
552:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
553:       
554:       boolean boolean3 = node0.isDebugger();
555:       assertFalse(boolean3);
556:       assertTrue(boolean3 == boolean2);
557:       assertTrue(boolean3 == boolean1);
558:       assertTrue(boolean3 == boolean0);
559:       assertEquals((-1), node0.getSourcePosition());
560:       assertFalse(node0.isLabel());
561:       assertFalse(node0.hasChildren());
562:       assertEquals((-1), node0.getLineno());
563:       assertFalse(node0.isReturn());
564:       assertFalse(node0.isLabelName());
565:       assertFalse(node0.isAssignAdd());
566:       assertFalse(node0.isContinue());
567:       assertFalse(node0.isCast());
568:       assertFalse(node0.isGetElem());
569:       assertFalse(node0.isDec());
570:       assertFalse(node0.isAssign());
571:       assertFalse(node0.isTypeOf());
572:       assertFalse(node0.hasMoreThanOneChild());
573:       assertFalse(node0.isBlock());
574:       assertFalse(node0.isScript());
575:       assertFalse(node0.isWhile());
576:       assertTrue(node0.isString());
577:       assertFalse(node0.isAnd());
578:       assertFalse(node0.isObjectLit());
579:       assertFalse(node0.isStringKey());
580:       assertFalse(node0.hasOneChild());
581:       assertFalse(node0.isNot());
582:       assertFalse(node0.isNumber());
583:       assertFalse(node0.isThis());
584:       assertFalse(node0.isSetterDef());
585:       assertFalse(node0.isCatch());
586:       assertFalse(node0.isThrow());
587:       assertEquals(40, node0.getType());
588:       assertFalse(node0.isHook());
589:       assertFalse(node0.isInstanceOf());
590:       assertFalse(node0.isRegExp());
591:       assertFalse(node0.isWith());
592:       assertFalse(node0.isFalse());
593:       assertFalse(node0.isInc());
594:       assertFalse(node0.isFunction());
595:       assertFalse(node0.isIn());
596:       assertFalse(node0.isNE());
597:       assertFalse(node0.isDelProp());
598:       assertFalse(node0.isIf());
599:       assertFalse(node0.isArrayLit());
600:       assertFalse(node0.isFor());
601:       assertEquals((-1), node0.getCharno());
602:       assertFalse(node0.isDebugger());
603:       assertFalse(node0.isTry());
604:       assertFalse(node0.isSwitch());
605:       assertFalse(node0.isCase());
606:       assertFalse(node0.isGetterDef());
607:       assertFalse(node0.isParamList());
608:       assertFalse(node0.isComma());
609:       assertFalse(node0.isNull());
610:       assertFalse(node0.isBreak());
611:       assertFalse(node0.isGetProp());
612:       assertFalse(node0.isName());
613:       assertFalse(node0.isCall());
614:       assertFalse(node0.isVar());
615:       assertEquals(0, node0.getChildCount());
616:       assertFalse(node0.isTrue());
617:       assertFalse(node0.isExprResult());
618:       assertFalse(node0.isVoid());
619:       assertFalse(node0.isNew());
620:       assertFalse(node0.isAdd());
621:       assertFalse(node0.isDo());
622:       assertFalse(node0.isDefaultCase());
623:       assertFalse(node0.isOr());
624:       assertFalse(node0.isEmpty());
625:       assertEquals(53, Node.INPUT_ID);
626:       assertEquals(43, Node.IS_CONSTANT_NAME);
627:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
628:       assertEquals(47, Node.IS_DISPATCHER);
629:       assertEquals(2, Node.POST_FLAG);
630:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
631:       assertEquals(4095, Node.COLUMN_MASK);
632:       assertEquals(32, Node.INCRDECR_PROP);
633:       assertEquals(46, Node.IS_NAMESPACE);
634:       assertEquals(51, Node.STATIC_SOURCE_FILE);
635:       assertEquals(12, Node.COLUMN_BITS);
636:       assertEquals(50, Node.FREE_CALL);
637:       assertEquals(1, Node.DECR_FLAG);
638:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
639:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
640:       assertEquals(52, Node.LENGTH);
641:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
642:       assertEquals(57, Node.REFLECTED_OBJECT);
643:       assertEquals(54, Node.SLASH_V);
644:       assertEquals(57, Node.LAST_PROP);
645:       assertEquals(30, Node.VAR_ARGS_NAME);
646:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
647:       assertEquals(49, Node.DIRECT_EVAL);
648:       assertEquals(40, Node.ORIGINALNAME_PROP);
649:       assertEquals(48, Node.DIRECTIVES);
650:       assertEquals(37, Node.OPT_ARG_NAME);
651:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
652:       assertEquals(56, Node.CHANGE_TIME);
653:       assertEquals(29, Node.JSDOC_INFO_PROP);
654:       assertEquals(15, Node.NO_SIDE_EFFECTS);
655:       assertEquals(36, Node.QUOTED_PROP);
656:       assertEquals(55, Node.INFERRED_FUNCTION);
657:       assertEquals(8, Node.FLAG_NO_THROWS);
658:       assertEquals(39, Node.EMPTY_BLOCK);
659:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
660:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
661:       
662:       boolean boolean4 = node0.isCall();
663:       assertFalse(boolean4);
664:       assertTrue(boolean4 == boolean1);
665:       assertTrue(boolean4 == boolean0);
666:       assertTrue(boolean4 == boolean3);
667:       assertTrue(boolean4 == boolean2);
668:       assertEquals((-1), node0.getSourcePosition());
669:       assertFalse(node0.isLabel());
670:       assertFalse(node0.hasChildren());
671:       assertEquals((-1), node0.getLineno());
672:       assertFalse(node0.isReturn());
673:       assertFalse(node0.isLabelName());
674:       assertFalse(node0.isAssignAdd());
675:       assertFalse(node0.isContinue());
676:       assertFalse(node0.isCast());
677:       assertFalse(node0.isGetElem());
678:       assertFalse(node0.isDec());
679:       assertFalse(node0.isAssign());
680:       assertFalse(node0.isTypeOf());
681:       assertFalse(node0.hasMoreThanOneChild());
682:       assertFalse(node0.isBlock());
683:       assertFalse(node0.isScript());
684:       assertFalse(node0.isWhile());
685:       assertTrue(node0.isString());
686:       assertFalse(node0.isAnd());
687:       assertFalse(node0.isObjectLit());
688:       assertFalse(node0.isStringKey());
689:       assertFalse(node0.hasOneChild());
690:       assertFalse(node0.isNot());
691:       assertFalse(node0.isNumber());
692:       assertFalse(node0.isThis());
693:       assertFalse(node0.isSetterDef());
694:       assertFalse(node0.isCatch());
695:       assertFalse(node0.isThrow());
696:       assertEquals(40, node0.getType());
697:       assertFalse(node0.isHook());
698:       assertFalse(node0.isInstanceOf());
699:       assertFalse(node0.isRegExp());
700:       assertFalse(node0.isWith());
701:       assertFalse(node0.isFalse());
702:       assertFalse(node0.isInc());
703:       assertFalse(node0.isFunction());
704:       assertFalse(node0.isIn());
705:       assertFalse(node0.isNE());
706:       assertFalse(node0.isDelProp());
707:       assertFalse(node0.isIf());
708:       assertFalse(node0.isArrayLit());
709:       assertFalse(node0.isFor());
710:       assertEquals((-1), node0.getCharno());
711:       assertFalse(node0.isDebugger());
712:       assertFalse(node0.isTry());
713:       assertFalse(node0.isSwitch());
714:       assertFalse(node0.isCase());
715:       assertFalse(node0.isGetterDef());
716:       assertFalse(node0.isParamList());
717:       assertFalse(node0.isComma());
718:       assertFalse(node0.isNull());
719:       assertFalse(node0.isBreak());
720:       assertFalse(node0.isGetProp());
721:       assertFalse(node0.isName());
722:       assertFalse(node0.isCall());
723:       assertFalse(node0.isVar());
724:       assertEquals(0, node0.getChildCount());
725:       assertFalse(node0.isTrue());
726:       assertFalse(node0.isExprResult());
727:       assertFalse(node0.isVoid());
728:       assertFalse(node0.isNew());
729:       assertFalse(node0.isAdd());
730:       assertFalse(node0.isDo());
731:       assertFalse(node0.isDefaultCase());
732:       assertFalse(node0.isOr());
733:       assertFalse(node0.isEmpty());
734:       assertEquals(53, Node.INPUT_ID);
735:       assertEquals(43, Node.IS_CONSTANT_NAME);
736:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
737:       assertEquals(47, Node.IS_DISPATCHER);
738:       assertEquals(2, Node.POST_FLAG);
739:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
740:       assertEquals(4095, Node.COLUMN_MASK);
741:       assertEquals(32, Node.INCRDECR_PROP);
742:       assertEquals(46, Node.IS_NAMESPACE);
743:       assertEquals(51, Node.STATIC_SOURCE_FILE);
744:       assertEquals(12, Node.COLUMN_BITS);
745:       assertEquals(50, Node.FREE_CALL);
746:       assertEquals(1, Node.DECR_FLAG);
747:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
748:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
749:       assertEquals(52, Node.LENGTH);
750:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
751:       assertEquals(57, Node.REFLECTED_OBJECT);
752:       assertEquals(54, Node.SLASH_V);
753:       assertEquals(57, Node.LAST_PROP);
754:       assertEquals(30, Node.VAR_ARGS_NAME);
755:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
756:       assertEquals(49, Node.DIRECT_EVAL);
757:       assertEquals(40, Node.ORIGINALNAME_PROP);
758:       assertEquals(48, Node.DIRECTIVES);
759:       assertEquals(37, Node.OPT_ARG_NAME);
760:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
761:       assertEquals(56, Node.CHANGE_TIME);
762:       assertEquals(29, Node.JSDOC_INFO_PROP);
763:       assertEquals(15, Node.NO_SIDE_EFFECTS);
764:       assertEquals(36, Node.QUOTED_PROP);
765:       assertEquals(55, Node.INFERRED_FUNCTION);
766:       assertEquals(8, Node.FLAG_NO_THROWS);
767:       assertEquals(39, Node.EMPTY_BLOCK);
768:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
769:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
770:       
771:       boolean boolean5 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
772:       assertFalse(boolean5);
773:       assertTrue(boolean5 == boolean3);
774:       assertTrue(boolean5 == boolean2);
775:       assertTrue(boolean5 == boolean4);
776:       assertTrue(boolean5 == boolean1);
777:       assertTrue(boolean5 == boolean0);
778:       
779:       node0.setLineno(40);
780:       assertFalse(node0.isLabel());
781:       assertFalse(node0.hasChildren());
782:       assertFalse(node0.isReturn());
783:       assertFalse(node0.isLabelName());
784:       assertFalse(node0.isAssignAdd());
785:       assertFalse(node0.isContinue());
786:       assertFalse(node0.isCast());
787:       assertFalse(node0.isGetElem());
788:       assertEquals(40, node0.getLineno());
789:       assertFalse(node0.isDec());
790:       assertFalse(node0.isAssign());
791:       assertFalse(node0.isTypeOf());
792:       assertFalse(node0.hasMoreThanOneChild());
793:       assertFalse(node0.isBlock());
794:       assertFalse(node0.isScript());
795:       assertFalse(node0.isWhile());
796:       assertTrue(node0.isString());
797:       assertFalse(node0.isAnd());
798:       assertFalse(node0.isObjectLit());
799:       assertFalse(node0.isStringKey());
800:       assertFalse(node0.hasOneChild());
801:       assertFalse(node0.isNot());
802:       assertFalse(node0.isNumber());
803:       assertFalse(node0.isThis());
804:       assertFalse(node0.isSetterDef());
805:       assertFalse(node0.isCatch());
806:       assertFalse(node0.isThrow());
807:       assertEquals(40, node0.getType());
808:       assertFalse(node0.isHook());
809:       assertFalse(node0.isInstanceOf());
810:       assertFalse(node0.isRegExp());
811:       assertFalse(node0.isWith());
812:       assertFalse(node0.isFalse());
813:       assertFalse(node0.isInc());
814:       assertFalse(node0.isFunction());
815:       assertEquals(163840, node0.getSourcePosition());
816:       assertEquals(0, node0.getCharno());
817:       assertFalse(node0.isIn());
818:       assertFalse(node0.isNE());
819:       assertFalse(node0.isDelProp());
820:       assertFalse(node0.isIf());
821:       assertFalse(node0.isArrayLit());
822:       assertFalse(node0.isFor());
823:       assertFalse(node0.isDebugger());
824:       assertFalse(node0.isTry());
825:       assertFalse(node0.isSwitch());
826:       assertFalse(node0.isCase());
827:       assertFalse(node0.isGetterDef());
828:       assertFalse(node0.isParamList());
829:       assertFalse(node0.isComma());
830:       assertFalse(node0.isNull());
831:       assertFalse(node0.isBreak());
832:       assertFalse(node0.isGetProp());
833:       assertFalse(node0.isName());
834:       assertFalse(node0.isCall());
835:       assertFalse(node0.isVar());
836:       assertEquals(0, node0.getChildCount());
837:       assertFalse(node0.isTrue());
838:       assertFalse(node0.isExprResult());
839:       assertFalse(node0.isVoid());
840:       assertFalse(node0.isNew());
841:       assertFalse(node0.isAdd());
842:       assertFalse(node0.isDo());
843:       assertFalse(node0.isDefaultCase());
844:       assertFalse(node0.isOr());
845:       assertFalse(node0.isEmpty());
846:       assertEquals(53, Node.INPUT_ID);
847:       assertEquals(43, Node.IS_CONSTANT_NAME);
848:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
849:       assertEquals(47, Node.IS_DISPATCHER);
850:       assertEquals(2, Node.POST_FLAG);
851:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
852:       assertEquals(4095, Node.COLUMN_MASK);
853:       assertEquals(32, Node.INCRDECR_PROP);
854:       assertEquals(46, Node.IS_NAMESPACE);
855:       assertEquals(51, Node.STATIC_SOURCE_FILE);
856:       assertEquals(12, Node.COLUMN_BITS);
857:       assertEquals(50, Node.FREE_CALL);
858:       assertEquals(1, Node.DECR_FLAG);
859:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
860:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
861:       assertEquals(52, Node.LENGTH);
862:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
863:       assertEquals(57, Node.REFLECTED_OBJECT);
864:       assertEquals(54, Node.SLASH_V);
865:       assertEquals(57, Node.LAST_PROP);
866:       assertEquals(30, Node.VAR_ARGS_NAME);
867:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
868:       assertEquals(49, Node.DIRECT_EVAL);
869:       assertEquals(40, Node.ORIGINALNAME_PROP);
870:       assertEquals(48, Node.DIRECTIVES);
871:       assertEquals(37, Node.OPT_ARG_NAME);
872:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
873:       assertEquals(56, Node.CHANGE_TIME);
874:       assertEquals(29, Node.JSDOC_INFO_PROP);
875:       assertEquals(15, Node.NO_SIDE_EFFECTS);
876:       assertEquals(36, Node.QUOTED_PROP);
877:       assertEquals(55, Node.INFERRED_FUNCTION);
878:       assertEquals(8, Node.FLAG_NO_THROWS);
879:       assertEquals(39, Node.EMPTY_BLOCK);
880:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
881:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
882:       
883:       boolean boolean6 = node0.isFalse();
884:       assertFalse(boolean6);
885:       assertTrue(boolean6 == boolean2);
886:       assertTrue(boolean6 == boolean4);
887:       assertTrue(boolean6 == boolean1);
888:       assertTrue(boolean6 == boolean3);
889:       assertTrue(boolean6 == boolean0);
890:       assertTrue(boolean6 == boolean5);
891:       assertFalse(node0.isLabel());
892:       assertFalse(node0.hasChildren());
893:       assertFalse(node0.isReturn());
894:       assertFalse(node0.isLabelName());
895:       assertFalse(node0.isAssignAdd());
896:       assertFalse(node0.isContinue());
897:       assertFalse(node0.isCast());
898:       assertFalse(node0.isGetElem());
899:       assertEquals(40, node0.getLineno());
900:       assertFalse(node0.isDec());
901:       assertFalse(node0.isAssign());
902:       assertFalse(node0.isTypeOf());
903:       assertFalse(node0.hasMoreThanOneChild());
904:       assertFalse(node0.isBlock());
905:       assertFalse(node0.isScript());
906:       assertFalse(node0.isWhile());
907:       assertTrue(node0.isString());
908:       assertFalse(node0.isAnd());
909:       assertFalse(node0.isObjectLit());
910:       assertFalse(node0.isStringKey());
911:       assertFalse(node0.hasOneChild());
912:       assertFalse(node0.isNot());
913:       assertFalse(node0.isNumber());
914:       assertFalse(node0.isThis());
915:       assertFalse(node0.isSetterDef());
916:       assertFalse(node0.isCatch());
917:       assertFalse(node0.isThrow());
918:       assertEquals(40, node0.getType());
919:       assertFalse(node0.isHook());
920:       assertFalse(node0.isInstanceOf());
921:       assertFalse(node0.isRegExp());
922:       assertFalse(node0.isWith());
923:       assertFalse(node0.isFalse());
924:       assertFalse(node0.isInc());
925:       assertFalse(node0.isFunction());
926:       assertEquals(163840, node0.getSourcePosition());
927:       assertEquals(0, node0.getCharno());
928:       assertFalse(node0.isIn());
929:       assertFalse(node0.isNE());
930:       assertFalse(node0.isDelProp());
931:       assertFalse(node0.isIf());
932:       assertFalse(node0.isArrayLit());
933:       assertFalse(node0.isFor());
934:       assertFalse(node0.isDebugger());
935:       assertFalse(node0.isTry());
936:       assertFalse(node0.isSwitch());
937:       assertFalse(node0.isCase());
938:       assertFalse(node0.isGetterDef());
939:       assertFalse(node0.isParamList());
940:       assertFalse(node0.isComma());
941:       assertFalse(node0.isNull());
942:       assertFalse(node0.isBreak());
943:       assertFalse(node0.isGetProp());
944:       assertFalse(node0.isName());
945:       assertFalse(node0.isCall());
946:       assertFalse(node0.isVar());
947:       assertEquals(0, node0.getChildCount());
948:       assertFalse(node0.isTrue());
949:       assertFalse(node0.isExprResult());
950:       assertFalse(node0.isVoid());
951:       assertFalse(node0.isNew());
952:       assertFalse(node0.isAdd());
953:       assertFalse(node0.isDo());
954:       assertFalse(node0.isDefaultCase());
955:       assertFalse(node0.isOr());
956:       assertFalse(node0.isEmpty());
957:       assertEquals(53, Node.INPUT_ID);
958:       assertEquals(43, Node.IS_CONSTANT_NAME);
959:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
960:       assertEquals(47, Node.IS_DISPATCHER);
961:       assertEquals(2, Node.POST_FLAG);
962:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
963:       assertEquals(4095, Node.COLUMN_MASK);
964:       assertEquals(32, Node.INCRDECR_PROP);
965:       assertEquals(46, Node.IS_NAMESPACE);
966:       assertEquals(51, Node.STATIC_SOURCE_FILE);
967:       assertEquals(12, Node.COLUMN_BITS);
968:       assertEquals(50, Node.FREE_CALL);
969:       assertEquals(1, Node.DECR_FLAG);
970:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
971:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
972:       assertEquals(52, Node.LENGTH);
973:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
974:       assertEquals(57, Node.REFLECTED_OBJECT);
975:       assertEquals(54, Node.SLASH_V);
976:       assertEquals(57, Node.LAST_PROP);
977:       assertEquals(30, Node.VAR_ARGS_NAME);
978:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
979:       assertEquals(49, Node.DIRECT_EVAL);
980:       assertEquals(40, Node.ORIGINALNAME_PROP);
981:       assertEquals(48, Node.DIRECTIVES);
982:       assertEquals(37, Node.OPT_ARG_NAME);
983:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
984:       assertEquals(56, Node.CHANGE_TIME);
985:       assertEquals(29, Node.JSDOC_INFO_PROP);
986:       assertEquals(15, Node.NO_SIDE_EFFECTS);
987:       assertEquals(36, Node.QUOTED_PROP);
988:       assertEquals(55, Node.INFERRED_FUNCTION);
989:       assertEquals(8, Node.FLAG_NO_THROWS);
990:       assertEquals(39, Node.EMPTY_BLOCK);
991:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
992:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
993:       
994:       node0.setSourceFileForTesting("originalname");
995:       assertFalse(node0.isLabel());
996:       assertFalse(node0.hasChildren());
997:       assertFalse(node0.isReturn());
998:       assertFalse(node0.isLabelName());
999:       assertFalse(node0.isAssignAdd());
1000:       assertFalse(node0.isContinue());
1001:       assertFalse(node0.isCast());
1002:       assertFalse(node0.isGetElem());
1003:       assertEquals(40, node0.getLineno());
1004:       assertFalse(node0.isDec());
1005:       assertFalse(node0.isAssign());
1006:       assertFalse(node0.isTypeOf());
1007:       assertFalse(node0.hasMoreThanOneChild());
1008:       assertFalse(node0.isBlock());
1009:       assertFalse(node0.isScript());
1010:       assertFalse(node0.isWhile());
1011:       assertTrue(node0.isString());
1012:       assertFalse(node0.isAnd());
1013:       assertFalse(node0.isObjectLit());
1014:       assertFalse(node0.isStringKey());
1015:       assertFalse(node0.hasOneChild());
1016:       assertFalse(node0.isNot());
1017:       assertFalse(node0.isNumber());
1018:       assertFalse(node0.isThis());
1019:       assertFalse(node0.isSetterDef());
1020:       assertFalse(node0.isCatch());
1021:       assertFalse(node0.isThrow());
1022:       assertEquals(40, node0.getType());
1023:       assertFalse(node0.isHook());
1024:       assertFalse(node0.isInstanceOf());
1025:       assertFalse(node0.isRegExp());
1026:       assertFalse(node0.isWith());
1027:       assertFalse(node0.isFalse());
1028:       assertFalse(node0.isInc());
1029:       assertFalse(node0.isFunction());
1030:       assertEquals(163840, node0.getSourcePosition());
1031:       assertEquals(0, node0.getCharno());
1032:       assertFalse(node0.isIn());
1033:       assertFalse(node0.isNE());
1034:       assertFalse(node0.isDelProp());
1035:       assertFalse(node0.isIf());
1036:       assertFalse(node0.isArrayLit());
1037:       assertFalse(node0.isFor());
1038:       assertFalse(node0.isDebugger());
1039:       assertFalse(node0.isTry());
1040:       assertFalse(node0.isSwitch());
1041:       assertFalse(node0.isCase());
1042:       assertFalse(node0.isGetterDef());
1043:       assertFalse(node0.isParamList());
1044:       assertFalse(node0.isComma());
1045:       assertFalse(node0.isNull());
1046:       assertFalse(node0.isBreak());
1047:       assertFalse(node0.isGetProp());
1048:       assertFalse(node0.isName());
1049:       assertFalse(node0.isCall());
1050:       assertFalse(node0.isVar());
1051:       assertEquals(0, node0.getChildCount());
1052:       assertFalse(node0.isTrue());
1053:       assertFalse(node0.isExprResult());
1054:       assertFalse(node0.isVoid());
1055:       assertFalse(node0.isNew());
1056:       assertFalse(node0.isAdd());
1057:       assertFalse(node0.isDo());
1058:       assertFalse(node0.isDefaultCase());
1059:       assertFalse(node0.isOr());
1060:       assertFalse(node0.isEmpty());
1061:       assertEquals(53, Node.INPUT_ID);
1062:       assertEquals(43, Node.IS_CONSTANT_NAME);
1063:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1064:       assertEquals(47, Node.IS_DISPATCHER);
1065:       assertEquals(2, Node.POST_FLAG);
1066:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1067:       assertEquals(4095, Node.COLUMN_MASK);
1068:       assertEquals(32, Node.INCRDECR_PROP);
1069:       assertEquals(46, Node.IS_NAMESPACE);
1070:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1071:       assertEquals(12, Node.COLUMN_BITS);
1072:       assertEquals(50, Node.FREE_CALL);
1073:       assertEquals(1, Node.DECR_FLAG);
1074:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1075:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1076:       assertEquals(52, Node.LENGTH);
1077:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1078:       assertEquals(57, Node.REFLECTED_OBJECT);
1079:       assertEquals(54, Node.SLASH_V);
1080:       assertEquals(57, Node.LAST_PROP);
1081:       assertEquals(30, Node.VAR_ARGS_NAME);
1082:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1083:       assertEquals(49, Node.DIRECT_EVAL);
1084:       assertEquals(40, Node.ORIGINALNAME_PROP);
1085:       assertEquals(48, Node.DIRECTIVES);
1086:       assertEquals(37, Node.OPT_ARG_NAME);
1087:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1088:       assertEquals(56, Node.CHANGE_TIME);
1089:       assertEquals(29, Node.JSDOC_INFO_PROP);
1090:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1091:       assertEquals(36, Node.QUOTED_PROP);
1092:       assertEquals(55, Node.INFERRED_FUNCTION);
1093:       assertEquals(8, Node.FLAG_NO_THROWS);
1094:       assertEquals(39, Node.EMPTY_BLOCK);
1095:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1096:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1097:       
1098:       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
1099:       assertNotNull(arrayList0);
1100:       assertTrue(arrayList0.isEmpty());
1101:       assertEquals(0, arrayList0.size());
1102:       
1103:       Object object0 = node0.getProp(2229);
1104:       assertNull(object0);
1105:       assertFalse(node0.isLabel());
1106:       assertFalse(node0.hasChildren());
1107:       assertFalse(node0.isReturn());
1108:       assertFalse(node0.isLabelName());
1109:       assertFalse(node0.isAssignAdd());
1110:       assertFalse(node0.isContinue());
1111:       assertFalse(node0.isCast());
1112:       assertFalse(node0.isGetElem());
1113:       assertEquals(40, node0.getLineno());
1114:       assertFalse(node0.isDec());
1115:       assertFalse(node0.isAssign());
1116:       assertFalse(node0.isTypeOf());
1117:       assertFalse(node0.hasMoreThanOneChild());
1118:       assertFalse(node0.isBlock());
1119:       assertFalse(node0.isScript());
1120:       assertFalse(node0.isWhile());
1121:       assertTrue(node0.isString());
1122:       assertFalse(node0.isAnd());
1123:       assertFalse(node0.isObjectLit());
1124:       assertFalse(node0.isStringKey());
1125:       assertFalse(node0.hasOneChild());
1126:       assertFalse(node0.isNot());
1127:       assertFalse(node0.isNumber());
1128:       assertFalse(node0.isThis());
1129:       assertFalse(node0.isSetterDef());
1130:       assertFalse(node0.isCatch());
1131:       assertFalse(node0.isThrow());
1132:       assertEquals(40, node0.getType());
1133:       assertFalse(node0.isHook());
1134:       assertFalse(node0.isInstanceOf());
1135:       assertFalse(node0.isRegExp());
1136:       assertFalse(node0.isWith());
1137:       assertFalse(node0.isFalse());
1138:       assertFalse(node0.isInc());
1139:       assertFalse(node0.isFunction());
1140:       assertEquals(163840, node0.getSourcePosition());
1141:       assertEquals(0, node0.getCharno());
1142:       assertFalse(node0.isIn());
1143:       assertFalse(node0.isNE());
1144:       assertFalse(node0.isDelProp());
1145:       assertFalse(node0.isIf());
1146:       assertFalse(node0.isArrayLit());
1147:       assertFalse(node0.isFor());
1148:       assertFalse(node0.isDebugger());
1149:       assertFalse(node0.isTry());
1150:       assertFalse(node0.isSwitch());
1151:       assertFalse(node0.isCase());
1152:       assertFalse(node0.isGetterDef());
1153:       assertFalse(node0.isParamList());
1154:       assertFalse(node0.isComma());
1155:       assertFalse(node0.isNull());
1156:       assertFalse(node0.isBreak());
1157:       assertFalse(node0.isGetProp());
1158:       assertFalse(node0.isName());
1159:       assertFalse(node0.isCall());
1160:       assertFalse(node0.isVar());
1161:       assertEquals(0, node0.getChildCount());
1162:       assertFalse(node0.isTrue());
1163:       assertFalse(node0.isExprResult());
1164:       assertFalse(node0.isVoid());
1165:       assertFalse(node0.isNew());
1166:       assertFalse(node0.isAdd());
1167:       assertFalse(node0.isDo());
1168:       assertFalse(node0.isDefaultCase());
1169:       assertFalse(node0.isOr());
1170:       assertFalse(node0.isEmpty());
1171:       assertEquals(53, Node.INPUT_ID);
1172:       assertEquals(43, Node.IS_CONSTANT_NAME);
1173:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1174:       assertEquals(47, Node.IS_DISPATCHER);
1175:       assertEquals(2, Node.POST_FLAG);
1176:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1177:       assertEquals(4095, Node.COLUMN_MASK);
1178:       assertEquals(32, Node.INCRDECR_PROP);
1179:       assertEquals(46, Node.IS_NAMESPACE);
1180:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1181:       assertEquals(12, Node.COLUMN_BITS);
1182:       assertEquals(50, Node.FREE_CALL);
1183:       assertEquals(1, Node.DECR_FLAG);
1184:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1185:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1186:       assertEquals(52, Node.LENGTH);
1187:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1188:       assertEquals(57, Node.REFLECTED_OBJECT);
1189:       assertEquals(54, Node.SLASH_V);
1190:       assertEquals(57, Node.LAST_PROP);
1191:       assertEquals(30, Node.VAR_ARGS_NAME);
1192:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1193:       assertEquals(49, Node.DIRECT_EVAL);
1194:       assertEquals(40, Node.ORIGINALNAME_PROP);
1195:       assertEquals(48, Node.DIRECTIVES);
1196:       assertEquals(37, Node.OPT_ARG_NAME);
1197:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1198:       assertEquals(56, Node.CHANGE_TIME);
1199:       assertEquals(29, Node.JSDOC_INFO_PROP);
1200:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1201:       assertEquals(36, Node.QUOTED_PROP);
1202:       assertEquals(55, Node.INFERRED_FUNCTION);
1203:       assertEquals(8, Node.FLAG_NO_THROWS);
1204:       assertEquals(39, Node.EMPTY_BLOCK);
1205:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1206:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1207:       
1208:       boolean boolean7 = arrayList0.remove((Object) null);
1209:       assertFalse(boolean7);
1210:       assertTrue(boolean7 == boolean2);
1211:       assertTrue(boolean7 == boolean4);
1212:       assertTrue(boolean7 == boolean3);
1213:       assertTrue(boolean7 == boolean5);
1214:       assertTrue(boolean7 == boolean1);
1215:       assertTrue(boolean7 == boolean6);
1216:       assertTrue(boolean7 == boolean0);
1217:       assertTrue(arrayList0.isEmpty());
1218:       assertEquals(0, arrayList0.size());
1219:       
1220:       Node node1 = new Node(8, 38, 16);
1221:       assertNotNull(node1);
1222:       assertFalse(node1.equals((Object)node0));
1223:       assertFalse(node1.isDefaultCase());
1224:       assertFalse(node1.isRegExp());
1225:       assertFalse(node1.isFunction());
1226:       assertFalse(node1.isCatch());
1227:       assertFalse(node1.isArrayLit());
1228:       assertFalse(node1.isVoid());
1229:       assertFalse(node1.isDebugger());
1230:       assertFalse(node1.isTrue());
1231:       assertFalse(node1.isParamList());
1232:       assertFalse(node1.isIf());
1233:       assertEquals(38, node1.getLineno());
1234:       assertFalse(node1.isGetterDef());
1235:       assertFalse(node1.isDelProp());
1236:       assertFalse(node1.isCall());
1237:       assertFalse(node1.isTry());
1238:       assertFalse(node1.isBlock());
1239:       assertEquals(8, node1.getType());
1240:       assertFalse(node1.isFor());
1241:       assertFalse(node1.isContinue());
1242:       assertFalse(node1.hasMoreThanOneChild());
1243:       assertFalse(node1.isInc());
1244:       assertFalse(node1.isString());
1245:       assertFalse(node1.isIn());
1246:       assertEquals(155664, node1.getSourcePosition());
1247:       assertFalse(node1.isNE());
1248:       assertFalse(node1.isSetterDef());
1249:       assertFalse(node1.isFalse());
1250:       assertFalse(node1.isCast());
1251:       assertFalse(node1.isThrow());
1252:       assertFalse(node1.isWith());
1253:       assertFalse(node1.isNot());
1254:       assertFalse(node1.isObjectLit());
1255:       assertFalse(node1.isExprResult());
1256:       assertFalse(node1.isScript());
1257:       assertFalse(node1.isInstanceOf());
1258:       assertFalse(node1.isAnd());
1259:       assertFalse(node1.isBreak());
1260:       assertFalse(node1.hasChildren());
1261:       assertFalse(node1.isNumber());
1262:       assertFalse(node1.isTypeOf());
1263:       assertFalse(node1.isAssign());
1264:       assertFalse(node1.isComma());
1265:       assertFalse(node1.isDec());
1266:       assertFalse(node1.isGetProp());
1267:       assertFalse(node1.isGetElem());
1268:       assertFalse(node1.isHook());
1269:       assertFalse(node1.isReturn());
1270:       assertFalse(node1.hasOneChild());
1271:       assertEquals(16, node1.getCharno());
1272:       assertFalse(node1.isThis());
1273:       assertFalse(node1.isWhile());
1274:       assertFalse(node1.isDo());
1275:       assertFalse(node1.isCase());
1276:       assertFalse(node1.isAdd());
1277:       assertFalse(node1.isOr());
1278:       assertFalse(node1.isName());
1279:       assertFalse(node1.isSwitch());
1280:       assertFalse(node1.isStringKey());
1281:       assertFalse(node1.isNull());
1282:       assertFalse(node1.isLabelName());
1283:       assertFalse(node1.isEmpty());
1284:       assertEquals(0, node1.getChildCount());
1285:       assertFalse(node1.isLabel());
1286:       assertFalse(node1.isNew());
1287:       assertFalse(node1.isVar());
1288:       assertFalse(node1.isAssignAdd());
1289:       assertEquals(8, Node.FLAG_NO_THROWS);
1290:       assertEquals(39, Node.EMPTY_BLOCK);
1291:       assertEquals(48, Node.DIRECTIVES);
1292:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1293:       assertEquals(4095, Node.COLUMN_MASK);
1294:       assertEquals(55, Node.INFERRED_FUNCTION);
1295:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1296:       assertEquals(40, Node.ORIGINALNAME_PROP);
1297:       assertEquals(50, Node.FREE_CALL);
1298:       assertEquals(43, Node.IS_CONSTANT_NAME);
1299:       assertEquals(57, Node.REFLECTED_OBJECT);
1300:       assertEquals(54, Node.SLASH_V);
1301:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1302:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1304:       assertEquals(1, Node.DECR_FLAG);
1305:       assertEquals(32, Node.INCRDECR_PROP);
1306:       assertEquals(12, Node.COLUMN_BITS);
1307:       assertEquals(37, Node.OPT_ARG_NAME);
1308:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1309:       assertEquals(2, Node.POST_FLAG);
1310:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1311:       assertEquals(29, Node.JSDOC_INFO_PROP);
1312:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1313:       assertEquals(49, Node.DIRECT_EVAL);
1314:       assertEquals(56, Node.CHANGE_TIME);
1315:       assertEquals(46, Node.IS_NAMESPACE);
1316:       assertEquals(36, Node.QUOTED_PROP);
1317:       assertEquals(52, Node.LENGTH);
1318:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1319:       assertEquals(53, Node.INPUT_ID);
1320:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1321:       assertEquals(30, Node.VAR_ARGS_NAME);
1322:       assertEquals(57, Node.LAST_PROP);
1323:       assertEquals(47, Node.IS_DISPATCHER);
1324:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1325:       
1326:       Node node2 = node1.clonePropsFrom(node0);
1327:       assertNotNull(node2);
1328:       assertSame(node1, node2);
1329:       assertSame(node2, node1);
1330:       assertFalse(node0.equals((Object)node1));
1331:       assertFalse(node1.equals((Object)node0));
1332:       assertFalse(node2.equals((Object)node0));
1333:       assertFalse(node0.isLabel());
1334:       assertFalse(node0.hasChildren());
1335:       assertFalse(node0.isReturn());
1336:       assertFalse(node0.isLabelName());
1337:       assertFalse(node0.isAssignAdd());
1338:       assertFalse(node0.isContinue());
1339:       assertFalse(node0.isCast());
1340:       assertFalse(node0.isGetElem());
1341:       assertEquals(40, node0.getLineno());
1342:       assertFalse(node0.isDec());
1343:       assertFalse(node0.isAssign());
1344:       assertFalse(node0.isTypeOf());
1345:       assertFalse(node0.hasMoreThanOneChild());
1346:       assertFalse(node0.isBlock());
1347:       assertFalse(node0.isScript());
1348:       assertFalse(node0.isWhile());
1349:       assertTrue(node0.isString());
1350:       assertFalse(node0.isAnd());
1351:       assertFalse(node0.isObjectLit());
1352:       assertFalse(node0.isStringKey());
1353:       assertFalse(node0.hasOneChild());
1354:       assertFalse(node0.isNot());
1355:       assertFalse(node0.isNumber());
1356:       assertFalse(node0.isThis());
1357:       assertFalse(node0.isSetterDef());
1358:       assertFalse(node0.isCatch());
1359:       assertFalse(node0.isThrow());
1360:       assertEquals(40, node0.getType());
1361:       assertFalse(node0.isHook());
1362:       assertFalse(node0.isInstanceOf());
1363:       assertFalse(node0.isRegExp());
1364:       assertFalse(node0.isWith());
1365:       assertFalse(node0.isFalse());
1366:       assertFalse(node0.isInc());
1367:       assertFalse(node0.isFunction());
1368:       assertEquals(163840, node0.getSourcePosition());
1369:       assertEquals(0, node0.getCharno());
1370:       assertFalse(node0.isIn());
1371:       assertFalse(node0.isNE());
1372:       assertFalse(node0.isDelProp());
1373:       assertFalse(node0.isIf());
1374:       assertFalse(node0.isArrayLit());
1375:       assertFalse(node0.isFor());
1376:       assertFalse(node0.isDebugger());
1377:       assertFalse(node0.isTry());
1378:       assertFalse(node0.isSwitch());
1379:       assertFalse(node0.isCase());
1380:       assertFalse(node0.isGetterDef());
1381:       assertFalse(node0.isParamList());
1382:       assertFalse(node0.isComma());
1383:       assertFalse(node0.isNull());
1384:       assertFalse(node0.isBreak());
1385:       assertFalse(node0.isGetProp());
1386:       assertFalse(node0.isName());
1387:       assertFalse(node0.isCall());
1388:       assertFalse(node0.isVar());
1389:       assertEquals(0, node0.getChildCount());
1390:       assertFalse(node0.isTrue());
1391:       assertFalse(node0.isExprResult());
1392:       assertFalse(node0.isVoid());
1393:       assertFalse(node0.isNew());
1394:       assertFalse(node0.isAdd());
1395:       assertFalse(node0.isDo());
1396:       assertFalse(node0.isDefaultCase());
1397:       assertFalse(node0.isOr());
1398:       assertFalse(node0.isEmpty());
1399:       assertFalse(node1.isDefaultCase());
1400:       assertFalse(node1.isRegExp());
1401:       assertFalse(node1.isFunction());
1402:       assertFalse(node1.isCatch());
1403:       assertFalse(node1.isArrayLit());
1404:       assertFalse(node1.isVoid());
1405:       assertFalse(node1.isDebugger());
1406:       assertFalse(node1.isTrue());
1407:       assertFalse(node1.isParamList());
1408:       assertFalse(node1.isIf());
1409:       assertEquals(38, node1.getLineno());
1410:       assertFalse(node1.isGetterDef());
1411:       assertFalse(node1.isDelProp());
1412:       assertFalse(node1.isCall());
1413:       assertFalse(node1.isTry());
1414:       assertFalse(node1.isBlock());
1415:       assertEquals(8, node1.getType());
1416:       assertFalse(node1.isFor());
1417:       assertFalse(node1.isContinue());
1418:       assertFalse(node1.hasMoreThanOneChild());
1419:       assertFalse(node1.isInc());
1420:       assertFalse(node1.isString());
1421:       assertFalse(node1.isIn());
1422:       assertEquals(155664, node1.getSourcePosition());
1423:       assertFalse(node1.isNE());
1424:       assertFalse(node1.isSetterDef());
1425:       assertFalse(node1.isFalse());
1426:       assertFalse(node1.isCast());
1427:       assertFalse(node1.isThrow());
1428:       assertFalse(node1.isWith());
1429:       assertFalse(node1.isNot());
1430:       assertFalse(node1.isObjectLit());
1431:       assertFalse(node1.isExprResult());
1432:       assertFalse(node1.isScript());
1433:       assertFalse(node1.isInstanceOf());
1434:       assertFalse(node1.isAnd());
1435:       assertFalse(node1.isBreak());
1436:       assertFalse(node1.hasChildren());
1437:       assertFalse(node1.isNumber());
1438:       assertFalse(node1.isTypeOf());
1439:       assertFalse(node1.isAssign());
1440:       assertFalse(node1.isComma());
1441:       assertFalse(node1.isDec());
1442:       assertFalse(node1.isGetProp());
1443:       assertFalse(node1.isGetElem());
1444:       assertFalse(node1.isHook());
1445:       assertFalse(node1.isReturn());
1446:       assertFalse(node1.hasOneChild());
1447:       assertEquals(16, node1.getCharno());
1448:       assertFalse(node1.isThis());
1449:       assertFalse(node1.isWhile());
1450:       assertFalse(node1.isDo());
1451:       assertFalse(node1.isCase());
1452:       assertFalse(node1.isAdd());
1453:       assertFalse(node1.isOr());
1454:       assertFalse(node1.isName());
1455:       assertFalse(node1.isSwitch());
1456:       assertFalse(node1.isStringKey());
1457:       assertFalse(node1.isNull());
1458:       assertFalse(node1.isLabelName());
1459:       assertFalse(node1.isEmpty());
1460:       assertEquals(0, node1.getChildCount());
1461:       assertFalse(node1.isLabel());
1462:       assertFalse(node1.isNew());
1463:       assertFalse(node1.isVar());
1464:       assertFalse(node1.isAssignAdd());
1465:       assertFalse(node2.isComma());
1466:       assertFalse(node2.isThrow());
1467:       assertEquals(16, node2.getCharno());
1468:       assertFalse(node2.isThis());
1469:       assertFalse(node2.isObjectLit());
1470:       assertFalse(node2.isGetProp());
1471:       assertFalse(node2.isInc());
1472:       assertFalse(node2.isWith());
1473:       assertEquals(8, node2.getType());
1474:       assertFalse(node2.isHook());
1475:       assertFalse(node2.isInstanceOf());
1476:       assertEquals(155664, node2.getSourcePosition());
1477:       assertFalse(node2.isBreak());
1478:       assertFalse(node2.isGetElem());
1479:       assertFalse(node2.isExprResult());
1480:       assertFalse(node2.isNE());
1481:       assertFalse(node2.isTypeOf());
1482:       assertFalse(node2.isDec());
1483:       assertFalse(node2.isIf());
1484:       assertEquals(38, node2.getLineno());
1485:       assertFalse(node2.isAssign());
1486:       assertFalse(node2.hasChildren());
1487:       assertFalse(node2.isReturn());
1488:       assertFalse(node2.isIn());
1489:       assertFalse(node2.isString());
1490:       assertFalse(node2.isFunction());
1491:       assertFalse(node2.isNot());
1492:       assertFalse(node2.isDebugger());
1493:       assertFalse(node2.isCast());
1494:       assertFalse(node2.isContinue());
1495:       assertFalse(node2.isAnd());
1496:       assertFalse(node2.isFalse());
1497:       assertFalse(node2.isNull());
1498:       assertFalse(node2.isParamList());
1499:       assertFalse(node2.isStringKey());
1500:       assertFalse(node2.isVar());
1501:       assertFalse(node2.isAdd());
1502:       assertFalse(node2.isNew());
1503:       assertFalse(node2.isSetterDef());
1504:       assertFalse(node2.isRegExp());
1505:       assertFalse(node2.isVoid());
1506:       assertFalse(node2.isWhile());
1507:       assertFalse(node2.isBlock());
1508:       assertFalse(node2.isTrue());
1509:       assertFalse(node2.isCatch());
1510:       assertFalse(node2.isName());
1511:       assertFalse(node2.hasMoreThanOneChild());
1512:       assertFalse(node2.isCall());
1513:       assertFalse(node2.isGetterDef());
1514:       assertFalse(node2.isDelProp());
1515:       assertFalse(node2.isNumber());
1516:       assertFalse(node2.isAssignAdd());
1517:       assertFalse(node2.isOr());
1518:       assertFalse(node2.isFor());
1519:       assertFalse(node2.isLabel());
1520:       assertFalse(node2.hasOneChild());
1521:       assertFalse(node2.isDo());
1522:       assertFalse(node2.isTry());
1523:       assertFalse(node2.isEmpty());
1524:       assertFalse(node2.isCase());
1525:       assertFalse(node2.isScript());
1526:       assertFalse(node2.isDefaultCase());
1527:       assertFalse(node2.isSwitch());
1528:       assertFalse(node2.isArrayLit());
1529:       assertEquals(0, node2.getChildCount());
1530:       assertFalse(node2.isLabelName());
1531:       assertEquals(53, Node.INPUT_ID);
1532:       assertEquals(43, Node.IS_CONSTANT_NAME);
1533:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1534:       assertEquals(47, Node.IS_DISPATCHER);
1535:       assertEquals(2, Node.POST_FLAG);
1536:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1537:       assertEquals(4095, Node.COLUMN_MASK);
1538:       assertEquals(32, Node.INCRDECR_PROP);
1539:       assertEquals(46, Node.IS_NAMESPACE);
1540:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1541:       assertEquals(12, Node.COLUMN_BITS);
1542:       assertEquals(50, Node.FREE_CALL);
1543:       assertEquals(1, Node.DECR_FLAG);
1544:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1545:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1546:       assertEquals(52, Node.LENGTH);
1547:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1548:       assertEquals(57, Node.REFLECTED_OBJECT);
1549:       assertEquals(54, Node.SLASH_V);
1550:       assertEquals(57, Node.LAST_PROP);
1551:       assertEquals(30, Node.VAR_ARGS_NAME);
1552:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1553:       assertEquals(49, Node.DIRECT_EVAL);
1554:       assertEquals(40, Node.ORIGINALNAME_PROP);
1555:       assertEquals(48, Node.DIRECTIVES);
1556:       assertEquals(37, Node.OPT_ARG_NAME);
1557:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1558:       assertEquals(56, Node.CHANGE_TIME);
1559:       assertEquals(29, Node.JSDOC_INFO_PROP);
1560:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1561:       assertEquals(36, Node.QUOTED_PROP);
1562:       assertEquals(55, Node.INFERRED_FUNCTION);
1563:       assertEquals(8, Node.FLAG_NO_THROWS);
1564:       assertEquals(39, Node.EMPTY_BLOCK);
1565:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1566:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1567:       assertEquals(8, Node.FLAG_NO_THROWS);
1568:       assertEquals(39, Node.EMPTY_BLOCK);
1569:       assertEquals(48, Node.DIRECTIVES);
1570:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1571:       assertEquals(4095, Node.COLUMN_MASK);
1572:       assertEquals(55, Node.INFERRED_FUNCTION);
1573:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1574:       assertEquals(40, Node.ORIGINALNAME_PROP);
1575:       assertEquals(50, Node.FREE_CALL);
1576:       assertEquals(43, Node.IS_CONSTANT_NAME);
1577:       assertEquals(57, Node.REFLECTED_OBJECT);
1578:       assertEquals(54, Node.SLASH_V);
1579:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1580:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1581:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1582:       assertEquals(1, Node.DECR_FLAG);
1583:       assertEquals(32, Node.INCRDECR_PROP);
1584:       assertEquals(12, Node.COLUMN_BITS);
1585:       assertEquals(37, Node.OPT_ARG_NAME);
1586:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1587:       assertEquals(2, Node.POST_FLAG);
1588:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1589:       assertEquals(29, Node.JSDOC_INFO_PROP);
1590:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1591:       assertEquals(49, Node.DIRECT_EVAL);
1592:       assertEquals(56, Node.CHANGE_TIME);
1593:       assertEquals(46, Node.IS_NAMESPACE);
1594:       assertEquals(36, Node.QUOTED_PROP);
1595:       assertEquals(52, Node.LENGTH);
1596:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1597:       assertEquals(53, Node.INPUT_ID);
1598:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1599:       assertEquals(30, Node.VAR_ARGS_NAME);
1600:       assertEquals(57, Node.LAST_PROP);
1601:       assertEquals(47, Node.IS_DISPATCHER);
1602:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1603:       assertEquals(54, Node.SLASH_V);
1604:       assertEquals(52, Node.LENGTH);
1605:       assertEquals(57, Node.REFLECTED_OBJECT);
1606:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1607:       assertEquals(1, Node.DECR_FLAG);
1608:       assertEquals(50, Node.FREE_CALL);
1609:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1610:       assertEquals(57, Node.LAST_PROP);
1611:       assertEquals(39, Node.EMPTY_BLOCK);
1612:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1613:       assertEquals(48, Node.DIRECTIVES);
1614:       assertEquals(8, Node.FLAG_NO_THROWS);
1615:       assertEquals(32, Node.INCRDECR_PROP);
1616:       assertEquals(56, Node.CHANGE_TIME);
1617:       assertEquals(12, Node.COLUMN_BITS);
1618:       assertEquals(49, Node.DIRECT_EVAL);
1619:       assertEquals(4095, Node.COLUMN_MASK);
1620:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1621:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1622:       assertEquals(37, Node.OPT_ARG_NAME);
1623:       assertEquals(53, Node.INPUT_ID);
1624:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1625:       assertEquals(43, Node.IS_CONSTANT_NAME);
1626:       assertEquals(36, Node.QUOTED_PROP);
1627:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1628:       assertEquals(29, Node.JSDOC_INFO_PROP);
1629:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1630:       assertEquals(55, Node.INFERRED_FUNCTION);
1631:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1632:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1633:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1634:       assertEquals(2, Node.POST_FLAG);
1635:       assertEquals(46, Node.IS_NAMESPACE);
1636:       assertEquals(47, Node.IS_DISPATCHER);
1637:       assertEquals(30, Node.VAR_ARGS_NAME);
1638:       assertEquals(40, Node.ORIGINALNAME_PROP);
1639:       
1640:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
1641:       assertNotNull(node_FileLevelJsDocBuilder0);
1642:       assertFalse(node0.equals((Object)node2));
1643:       assertFalse(node0.equals((Object)node1));
1644:       assertFalse(node0.isLabel());
1645:       assertFalse(node0.hasChildren());
1646:       assertFalse(node0.isReturn());
1647:       assertFalse(node0.isLabelName());
1648:       assertFalse(node0.isAssignAdd());
1649:       assertFalse(node0.isContinue());
1650:       assertFalse(node0.isCast());
1651:       assertFalse(node0.isGetElem());
1652:       assertEquals(40, node0.getLineno());
1653:       assertFalse(node0.isDec());
1654:       assertFalse(node0.isAssign());
1655:       assertFalse(node0.isTypeOf());
1656:       assertFalse(node0.hasMoreThanOneChild());
1657:       assertFalse(node0.isBlock());
1658:       assertFalse(node0.isScript());
1659:       assertFalse(node0.isWhile());
1660:       assertTrue(node0.isString());
1661:       assertFalse(node0.isAnd());
1662:       assertFalse(node0.isObjectLit());
1663:       assertFalse(node0.isStringKey());
1664:       assertFalse(node0.hasOneChild());
1665:       assertFalse(node0.isNot());
1666:       assertFalse(node0.isNumber());
1667:       assertFalse(node0.isThis());
1668:       assertFalse(node0.isSetterDef());
1669:       assertFalse(node0.isCatch());
1670:       assertFalse(node0.isThrow());
1671:       assertEquals(40, node0.getType());
1672:       assertFalse(node0.isHook());
1673:       assertFalse(node0.isInstanceOf());
1674:       assertFalse(node0.isRegExp());
1675:       assertFalse(node0.isWith());
1676:       assertFalse(node0.isFalse());
1677:       assertFalse(node0.isInc());
1678:       assertFalse(node0.isFunction());
1679:       assertEquals(163840, node0.getSourcePosition());
1680:       assertEquals(0, node0.getCharno());
1681:       assertFalse(node0.isIn());
1682:       assertFalse(node0.isNE());
1683:       assertFalse(node0.isDelProp());
1684:       assertFalse(node0.isIf());
1685:       assertFalse(node0.isArrayLit());
1686:       assertFalse(node0.isFor());
1687:       assertFalse(node0.isDebugger());
1688:       assertFalse(node0.isTry());
1689:       assertFalse(node0.isSwitch());
1690:       assertFalse(node0.isCase());
1691:       assertFalse(node0.isGetterDef());
1692:       assertFalse(node0.isParamList());
1693:       assertFalse(node0.isComma());
1694:       assertFalse(node0.isNull());
1695:       assertFalse(node0.isBreak());
1696:       assertFalse(node0.isGetProp());
1697:       assertFalse(node0.isName());
1698:       assertFalse(node0.isCall());
1699:       assertFalse(node0.isVar());
1700:       assertEquals(0, node0.getChildCount());
1701:       assertFalse(node0.isTrue());
1702:       assertFalse(node0.isExprResult());
1703:       assertFalse(node0.isVoid());
1704:       assertFalse(node0.isNew());
1705:       assertFalse(node0.isAdd());
1706:       assertFalse(node0.isDo());
1707:       assertFalse(node0.isDefaultCase());
1708:       assertFalse(node0.isOr());
1709:       assertFalse(node0.isEmpty());
1710:       assertEquals(53, Node.INPUT_ID);
1711:       assertEquals(43, Node.IS_CONSTANT_NAME);
1712:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1713:       assertEquals(47, Node.IS_DISPATCHER);
1714:       assertEquals(2, Node.POST_FLAG);
1715:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1716:       assertEquals(4095, Node.COLUMN_MASK);
1717:       assertEquals(32, Node.INCRDECR_PROP);
1718:       assertEquals(46, Node.IS_NAMESPACE);
1719:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1720:       assertEquals(12, Node.COLUMN_BITS);
1721:       assertEquals(50, Node.FREE_CALL);
1722:       assertEquals(1, Node.DECR_FLAG);
1723:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1724:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1725:       assertEquals(52, Node.LENGTH);
1726:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1727:       assertEquals(57, Node.REFLECTED_OBJECT);
1728:       assertEquals(54, Node.SLASH_V);
1729:       assertEquals(57, Node.LAST_PROP);
1730:       assertEquals(30, Node.VAR_ARGS_NAME);
1731:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1732:       assertEquals(49, Node.DIRECT_EVAL);
1733:       assertEquals(40, Node.ORIGINALNAME_PROP);
1734:       assertEquals(48, Node.DIRECTIVES);
1735:       assertEquals(37, Node.OPT_ARG_NAME);
1736:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1737:       assertEquals(56, Node.CHANGE_TIME);
1738:       assertEquals(29, Node.JSDOC_INFO_PROP);
1739:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1740:       assertEquals(36, Node.QUOTED_PROP);
1741:       assertEquals(55, Node.INFERRED_FUNCTION);
1742:       assertEquals(8, Node.FLAG_NO_THROWS);
1743:       assertEquals(39, Node.EMPTY_BLOCK);
1744:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1745:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1746:       
1747:       node_FileLevelJsDocBuilder0.append("");
1748:       assertFalse(node0.equals((Object)node2));
1749:       assertFalse(node0.equals((Object)node1));
1750:       assertFalse(node0.isLabel());
1751:       assertFalse(node0.hasChildren());
1752:       assertFalse(node0.isReturn());
1753:       assertFalse(node0.isLabelName());
1754:       assertFalse(node0.isAssignAdd());
1755:       assertFalse(node0.isContinue());
1756:       assertFalse(node0.isCast());
1757:       assertFalse(node0.isGetElem());
1758:       assertEquals(40, node0.getLineno());
1759:       assertFalse(node0.isDec());
1760:       assertFalse(node0.isAssign());
1761:       assertFalse(node0.isTypeOf());
1762:       assertFalse(node0.hasMoreThanOneChild());
1763:       assertFalse(node0.isBlock());
1764:       assertFalse(node0.isScript());
1765:       assertFalse(node0.isWhile());
1766:       assertTrue(node0.isString());
1767:       assertFalse(node0.isAnd());
1768:       assertFalse(node0.isObjectLit());
1769:       assertFalse(node0.isStringKey());
1770:       assertFalse(node0.hasOneChild());
1771:       assertFalse(node0.isNot());
1772:       assertFalse(node0.isNumber());
1773:       assertFalse(node0.isThis());
1774:       assertFalse(node0.isSetterDef());
1775:       assertFalse(node0.isCatch());
1776:       assertFalse(node0.isThrow());
1777:       assertEquals(40, node0.getType());
1778:       assertFalse(node0.isHook());
1779:       assertFalse(node0.isInstanceOf());
1780:       assertFalse(node0.isRegExp());
1781:       assertFalse(node0.isWith());
1782:       assertFalse(node0.isFalse());
1783:       assertFalse(node0.isInc());
1784:       assertFalse(node0.isFunction());
1785:       assertEquals(163840, node0.getSourcePosition());
1786:       assertEquals(0, node0.getCharno());
1787:       assertFalse(node0.isIn());
1788:       assertFalse(node0.isNE());
1789:       assertFalse(node0.isDelProp());
1790:       assertFalse(node0.isIf());
1791:       assertFalse(node0.isArrayLit());
1792:       assertFalse(node0.isFor());
1793:       assertFalse(node0.isDebugger());
1794:       assertFalse(node0.isTry());
1795:       assertFalse(node0.isSwitch());
1796:       assertFalse(node0.isCase());
1797:       assertFalse(node0.isGetterDef());
1798:       assertFalse(node0.isParamList());
1799:       assertFalse(node0.isComma());
1800:       assertFalse(node0.isNull());
1801:       assertFalse(node0.isBreak());
1802:       assertFalse(node0.isGetProp());
1803:       assertFalse(node0.isName());
1804:       assertFalse(node0.isCall());
1805:       assertFalse(node0.isVar());
1806:       assertEquals(0, node0.getChildCount());
1807:       assertFalse(node0.isTrue());
1808:       assertFalse(node0.isExprResult());
1809:       assertFalse(node0.isVoid());
1810:       assertFalse(node0.isNew());
1811:       assertFalse(node0.isAdd());
1812:       assertFalse(node0.isDo());
1813:       assertFalse(node0.isDefaultCase());
1814:       assertFalse(node0.isOr());
1815:       assertFalse(node0.isEmpty());
1816:       assertEquals(53, Node.INPUT_ID);
1817:       assertEquals(43, Node.IS_CONSTANT_NAME);
1818:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1819:       assertEquals(47, Node.IS_DISPATCHER);
1820:       assertEquals(2, Node.POST_FLAG);
1821:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1822:       assertEquals(4095, Node.COLUMN_MASK);
1823:       assertEquals(32, Node.INCRDECR_PROP);
1824:       assertEquals(46, Node.IS_NAMESPACE);
1825:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1826:       assertEquals(12, Node.COLUMN_BITS);
1827:       assertEquals(50, Node.FREE_CALL);
1828:       assertEquals(1, Node.DECR_FLAG);
1829:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1830:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1831:       assertEquals(52, Node.LENGTH);
1832:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1833:       assertEquals(57, Node.REFLECTED_OBJECT);
1834:       assertEquals(54, Node.SLASH_V);
1835:       assertEquals(57, Node.LAST_PROP);
1836:       assertEquals(30, Node.VAR_ARGS_NAME);
1837:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1838:       assertEquals(49, Node.DIRECT_EVAL);
1839:       assertEquals(40, Node.ORIGINALNAME_PROP);
1840:       assertEquals(48, Node.DIRECTIVES);
1841:       assertEquals(37, Node.OPT_ARG_NAME);
1842:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1843:       assertEquals(56, Node.CHANGE_TIME);
1844:       assertEquals(29, Node.JSDOC_INFO_PROP);
1845:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1846:       assertEquals(36, Node.QUOTED_PROP);
1847:       assertEquals(55, Node.INFERRED_FUNCTION);
1848:       assertEquals(8, Node.FLAG_NO_THROWS);
1849:       assertEquals(39, Node.EMPTY_BLOCK);
1850:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1851:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1852:       
1853:       JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
1854:       assertNotNull(jSDocInfo0);
1855:       assertFalse(node0.equals((Object)node2));
1856:       assertFalse(node0.equals((Object)node1));
1857:       assertFalse(node0.isLabel());
1858:       assertFalse(node0.hasChildren());
1859:       assertFalse(node0.isReturn());
1860:       assertFalse(node0.isLabelName());
1861:       assertFalse(node0.isAssignAdd());
1862:       assertFalse(node0.isContinue());
1863:       assertFalse(node0.isCast());
1864:       assertFalse(node0.isGetElem());
1865:       assertEquals(40, node0.getLineno());
1866:       assertFalse(node0.isDec());
1867:       assertFalse(node0.isAssign());
1868:       assertFalse(node0.isTypeOf());
1869:       assertFalse(node0.hasMoreThanOneChild());
1870:       assertFalse(node0.isBlock());
1871:       assertFalse(node0.isScript());
1872:       assertFalse(node0.isWhile());
1873:       assertTrue(node0.isString());
1874:       assertFalse(node0.isAnd());
1875:       assertFalse(node0.isObjectLit());
1876:       assertFalse(node0.isStringKey());
1877:       assertFalse(node0.hasOneChild());
1878:       assertFalse(node0.isNot());
1879:       assertFalse(node0.isNumber());
1880:       assertFalse(node0.isThis());
1881:       assertFalse(node0.isSetterDef());
1882:       assertFalse(node0.isCatch());
1883:       assertFalse(node0.isThrow());
1884:       assertEquals(40, node0.getType());
1885:       assertFalse(node0.isHook());
1886:       assertFalse(node0.isInstanceOf());
1887:       assertFalse(node0.isRegExp());
1888:       assertFalse(node0.isWith());
1889:       assertFalse(node0.isFalse());
1890:       assertFalse(node0.isInc());
1891:       assertFalse(node0.isFunction());
1892:       assertEquals(163840, node0.getSourcePosition());
1893:       assertEquals(0, node0.getCharno());
1894:       assertFalse(node0.isIn());
1895:       assertFalse(node0.isNE());
1896:       assertFalse(node0.isDelProp());
1897:       assertFalse(node0.isIf());
1898:       assertFalse(node0.isArrayLit());
1899:       assertFalse(node0.isFor());
1900:       assertFalse(node0.isDebugger());
1901:       assertFalse(node0.isTry());
1902:       assertFalse(node0.isSwitch());
1903:       assertFalse(node0.isCase());
1904:       assertFalse(node0.isGetterDef());
1905:       assertFalse(node0.isParamList());
1906:       assertFalse(node0.isComma());
1907:       assertFalse(node0.isNull());
1908:       assertFalse(node0.isBreak());
1909:       assertFalse(node0.isGetProp());
1910:       assertFalse(node0.isName());
1911:       assertFalse(node0.isCall());
1912:       assertFalse(node0.isVar());
1913:       assertEquals(0, node0.getChildCount());
1914:       assertFalse(node0.isTrue());
1915:       assertFalse(node0.isExprResult());
1916:       assertFalse(node0.isVoid());
1917:       assertFalse(node0.isNew());
1918:       assertFalse(node0.isAdd());
1919:       assertFalse(node0.isDo());
1920:       assertFalse(node0.isDefaultCase());
1921:       assertFalse(node0.isOr());
1922:       assertFalse(node0.isEmpty());
1923:       assertFalse(jSDocInfo0.isExterns());
1924:       assertFalse(jSDocInfo0.isDeprecated());
1925:       assertFalse(jSDocInfo0.isIdGenerator());
1926:       assertFalse(jSDocInfo0.isInterface());
1927:       assertFalse(jSDocInfo0.isHidden());
1928:       assertFalse(jSDocInfo0.isNoShadow());
1929:       assertNull(jSDocInfo0.getDeprecationReason());
1930:       assertFalse(jSDocInfo0.isExpose());
1931:       assertNull(jSDocInfo0.getBlockDescription());
1932:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1933:       assertFalse(jSDocInfo0.isOverride());
1934:       assertFalse(jSDocInfo0.isJavaDispatch());
1935:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1936:       assertNull(jSDocInfo0.getVersion());
1937:       assertFalse(jSDocInfo0.isNoSideEffects());
1938:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1939:       assertFalse(jSDocInfo0.isJaggerModule());
1940:       assertFalse(jSDocInfo0.isNgInject());
1941:       assertFalse(jSDocInfo0.makesDicts());
1942:       assertFalse(jSDocInfo0.isWizaction());
1943:       assertFalse(jSDocInfo0.isJaggerProvide());
1944:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1945:       assertFalse(jSDocInfo0.isConstant());
1946:       assertFalse(jSDocInfo0.isStableIdGenerator());
1947:       assertNull(jSDocInfo0.getLendsName());
1948:       assertNull(jSDocInfo0.getReturnDescription());
1949:       assertFalse(jSDocInfo0.hasModifies());
1950:       assertEquals("", jSDocInfo0.getLicense());
1951:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1952:       assertFalse(jSDocInfo0.hasBaseType());
1953:       assertFalse(jSDocInfo0.hasType());
1954:       assertFalse(jSDocInfo0.isDisposes());
1955:       assertNull(jSDocInfo0.getOriginalCommentString());
1956:       assertFalse(jSDocInfo0.hasTypedefType());
1957:       assertFalse(jSDocInfo0.isNoAlias());
1958:       assertFalse(jSDocInfo0.isNoTypeCheck());
1959:       assertFalse(jSDocInfo0.hasReturnType());
1960:       assertFalse(jSDocInfo0.hasFileOverview());
1961:       assertFalse(jSDocInfo0.isJaggerInject());
1962:       assertFalse(jSDocInfo0.isImplicitCast());
1963:       assertFalse(jSDocInfo0.isExport());
1964:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1965:       assertFalse(jSDocInfo0.containsDeclaration());
1966:       assertNull(jSDocInfo0.getFileOverview());
1967:       assertNull(jSDocInfo0.getVisibility());
1968:       assertNull(jSDocInfo0.getMeaning());
1969:       assertFalse(jSDocInfo0.makesStructs());
1970:       assertFalse(jSDocInfo0.isConstructor());
1971:       assertFalse(jSDocInfo0.shouldPreserveTry());
1972:       assertNull(jSDocInfo0.getDescription());
1973:       assertFalse(jSDocInfo0.hasEnumParameterType());
1974:       assertEquals(0, jSDocInfo0.getParameterCount());
1975:       assertFalse(jSDocInfo0.hasThisType());
1976:       assertFalse(jSDocInfo0.isNoCompile());
1977:       assertFalse(jSDocInfo0.isDefine());
1978:       assertEquals(53, Node.INPUT_ID);
1979:       assertEquals(43, Node.IS_CONSTANT_NAME);
1980:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1981:       assertEquals(47, Node.IS_DISPATCHER);
1982:       assertEquals(2, Node.POST_FLAG);
1983:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1984:       assertEquals(4095, Node.COLUMN_MASK);
1985:       assertEquals(32, Node.INCRDECR_PROP);
1986:       assertEquals(46, Node.IS_NAMESPACE);
1987:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1988:       assertEquals(12, Node.COLUMN_BITS);
1989:       assertEquals(50, Node.FREE_CALL);
1990:       assertEquals(1, Node.DECR_FLAG);
1991:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1992:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1993:       assertEquals(52, Node.LENGTH);
1994:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1995:       assertEquals(57, Node.REFLECTED_OBJECT);
1996:       assertEquals(54, Node.SLASH_V);
1997:       assertEquals(57, Node.LAST_PROP);
1998:       assertEquals(30, Node.VAR_ARGS_NAME);
1999:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2000:       assertEquals(49, Node.DIRECT_EVAL);
2001:       assertEquals(40, Node.ORIGINALNAME_PROP);
2002:       assertEquals(48, Node.DIRECTIVES);
2003:       assertEquals(37, Node.OPT_ARG_NAME);
2004:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2005:       assertEquals(56, Node.CHANGE_TIME);
2006:       assertEquals(29, Node.JSDOC_INFO_PROP);
2007:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2008:       assertEquals(36, Node.QUOTED_PROP);
2009:       assertEquals(55, Node.INFERRED_FUNCTION);
2010:       assertEquals(8, Node.FLAG_NO_THROWS);
2011:       assertEquals(39, Node.EMPTY_BLOCK);
2012:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2013:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2014:   }
2015: }
RegularFileObject[/tmp/EvoSuite_101_1628159312763/com/google/javascript/rhino/Node_101_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:32 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_101_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_101_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_101_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.NamedType",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.JSDocInfo$Marker",
356:       "com.google.common.collect.ImmutableSet",
357:       "com.google.common.collect.EmptyImmutableSet",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 10:28:33.096 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertNotNull(node0);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);

boolean boolean0 = node0.isExprResult();
assertFalse(boolean0);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);

boolean boolean1 = node0.isTypeOf();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);

boolean boolean2 = node0.isVoid();
assertFalse(boolean2);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);

boolean boolean3 = node0.isDebugger();
assertFalse(boolean3);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);

boolean boolean4 = node0.isCall();
assertFalse(boolean4);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);

boolean boolean5 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
assertFalse(boolean5);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);

node0.setLineno(40);
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals(40, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(163840, node0.getSourcePosition());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);

boolean boolean6 = node0.isFalse();
assertFalse(boolean6);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean5);
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals(40, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(163840, node0.getSourcePosition());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);

node0.setSourceFileForTesting("originalname");
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals(40, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(163840, node0.getSourcePosition());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);

ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
assertNotNull(arrayList0);
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());

Object object0 = node0.getProp(2229);
assertNull(object0);
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals(40, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(163840, node0.getSourcePosition());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);

boolean boolean7 = arrayList0.remove((Object) null);
assertFalse(boolean7);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean0);
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());

Node node1 = new Node(8, 38, 16);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isIf());
assertEquals(38, node1.getLineno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertEquals(8, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals(155664, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertEquals(16, node1.getCharno());
assertFalse(node1.isThis());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Node node2 = node1.clonePropsFrom(node0);
assertNotNull(node2);
assertSame(node1, node2);
assertSame(node2, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals(40, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(163840, node0.getSourcePosition());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isIf());
assertEquals(38, node1.getLineno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertEquals(8, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals(155664, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertEquals(16, node1.getCharno());
assertFalse(node1.isThis());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertEquals(16, node2.getCharno());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isWith());
assertEquals(8, node2.getType());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertEquals(155664, node2.getSourcePosition());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isNE());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isIf());
assertEquals(38, node2.getLineno());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isFunction());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isCatch());
assertFalse(node2.isName());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isNumber());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isFor());
assertFalse(node2.isLabel());
assertFalse(node2.hasOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabelName());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals(40, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(163840, node0.getSourcePosition());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);

node_FileLevelJsDocBuilder0.append("");
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals(40, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(163840, node0.getSourcePosition());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);

JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
assertNotNull(jSDocInfo0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals(40, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(163840, node0.getSourcePosition());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isNoShadow());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isExpose());
assertNull(jSDocInfo0.getBlockDescription());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isNoSideEffects());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isJaggerProvide());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.hasModifies());
assertEquals("", jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isDisposes());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isExport());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDefine());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);


[MASTER] 10:28:33.703 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_105_1628159313657/com/google/javascript/rhino/Node_105_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_105_1628159313657/com/google/javascript/rhino/Node_105_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:33.703 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:33.703 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:33.704 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 338
[MASTER] 10:28:33.705 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_105_1628159313657/com/google/javascript/rhino/Node_105_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:33 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_105_tmp__ESTest extends Node_105_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("");
22:       assertNotNull(node0);
23:       assertEquals(0, node0.getChildCount());
24:       assertFalse(node0.isParamList());
25:       assertFalse(node0.isNull());
26:       assertEquals(40, node0.getType());
27:       assertFalse(node0.isRegExp());
28:       assertFalse(node0.isName());
29:       assertFalse(node0.isFunction());
30:       assertFalse(node0.isVoid());
31:       assertFalse(node0.isCatch());
32:       assertFalse(node0.isCall());
33:       assertFalse(node0.isTry());
34:       assertTrue(node0.isString());
35:       assertFalse(node0.isDebugger());
36:       assertFalse(node0.isStringKey());
37:       assertFalse(node0.isFor());
38:       assertFalse(node0.isBlock());
39:       assertFalse(node0.isGetterDef());
40:       assertFalse(node0.isWhile());
41:       assertFalse(node0.isIn());
42:       assertEquals((-1), node0.getLineno());
43:       assertFalse(node0.hasMoreThanOneChild());
44:       assertFalse(node0.isNE());
45:       assertFalse(node0.isIf());
46:       assertFalse(node0.isContinue());
47:       assertFalse(node0.isCast());
48:       assertFalse(node0.isThrow());
49:       assertFalse(node0.isSetterDef());
50:       assertFalse(node0.isInc());
51:       assertFalse(node0.isInstanceOf());
52:       assertFalse(node0.isAnd());
53:       assertFalse(node0.isObjectLit());
54:       assertFalse(node0.isComma());
55:       assertFalse(node0.isThis());
56:       assertFalse(node0.isBreak());
57:       assertFalse(node0.isWith());
58:       assertFalse(node0.isFalse());
59:       assertFalse(node0.isExprResult());
60:       assertFalse(node0.hasOneChild());
61:       assertEquals((-1), node0.getCharno());
62:       assertFalse(node0.isHook());
63:       assertEquals((-1), node0.getSourcePosition());
64:       assertFalse(node0.isNot());
65:       assertFalse(node0.isNumber());
66:       assertFalse(node0.isGetProp());
67:       assertFalse(node0.isCase());
68:       assertFalse(node0.isScript());
69:       assertFalse(node0.isAssignAdd());
70:       assertFalse(node0.isOr());
71:       assertFalse(node0.isLabel());
72:       assertFalse(node0.isReturn());
73:       assertFalse(node0.isDelProp());
74:       assertFalse(node0.hasChildren());
75:       assertFalse(node0.isDec());
76:       assertFalse(node0.isLabelName());
77:       assertFalse(node0.isAssign());
78:       assertFalse(node0.isTypeOf());
79:       assertFalse(node0.isSwitch());
80:       assertFalse(node0.isArrayLit());
81:       assertFalse(node0.isGetElem());
82:       assertFalse(node0.isVar());
83:       assertFalse(node0.isTrue());
84:       assertFalse(node0.isDefaultCase());
85:       assertFalse(node0.isDo());
86:       assertFalse(node0.isNew());
87:       assertFalse(node0.isAdd());
88:       assertFalse(node0.isEmpty());
89:       assertEquals(40, Node.ORIGINALNAME_PROP);
90:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
91:       assertEquals(50, Node.FREE_CALL);
92:       assertEquals(57, Node.REFLECTED_OBJECT);
93:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
94:       assertEquals(48, Node.DIRECTIVES);
95:       assertEquals(54, Node.SLASH_V);
96:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
97:       assertEquals(49, Node.DIRECT_EVAL);
98:       assertEquals(1, Node.DECR_FLAG);
99:       assertEquals(4095, Node.COLUMN_MASK);
100:       assertEquals(46, Node.IS_NAMESPACE);
101:       assertEquals(51, Node.STATIC_SOURCE_FILE);
102:       assertEquals(12, Node.COLUMN_BITS);
103:       assertEquals(32, Node.INCRDECR_PROP);
104:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
105:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
107:       assertEquals(47, Node.IS_DISPATCHER);
108:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
109:       assertEquals(37, Node.OPT_ARG_NAME);
110:       assertEquals(2, Node.POST_FLAG);
111:       assertEquals(43, Node.IS_CONSTANT_NAME);
112:       assertEquals(56, Node.CHANGE_TIME);
113:       assertEquals(55, Node.INFERRED_FUNCTION);
114:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
115:       assertEquals(30, Node.VAR_ARGS_NAME);
116:       assertEquals(36, Node.QUOTED_PROP);
117:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
118:       assertEquals(8, Node.FLAG_NO_THROWS);
119:       assertEquals(39, Node.EMPTY_BLOCK);
120:       assertEquals(52, Node.LENGTH);
121:       assertEquals(57, Node.LAST_PROP);
122:       assertEquals(29, Node.JSDOC_INFO_PROP);
123:       assertEquals(53, Node.INPUT_ID);
124:       assertEquals(15, Node.NO_SIDE_EFFECTS);
125:       
126:       boolean boolean0 = node0.isWhile();
127:       assertFalse(boolean0);
128:       assertEquals(0, node0.getChildCount());
129:       assertFalse(node0.isParamList());
130:       assertFalse(node0.isNull());
131:       assertEquals(40, node0.getType());
132:       assertFalse(node0.isRegExp());
133:       assertFalse(node0.isName());
134:       assertFalse(node0.isFunction());
135:       assertFalse(node0.isVoid());
136:       assertFalse(node0.isCatch());
137:       assertFalse(node0.isCall());
138:       assertFalse(node0.isTry());
139:       assertTrue(node0.isString());
140:       assertFalse(node0.isDebugger());
141:       assertFalse(node0.isStringKey());
142:       assertFalse(node0.isFor());
143:       assertFalse(node0.isBlock());
144:       assertFalse(node0.isGetterDef());
145:       assertFalse(node0.isWhile());
146:       assertFalse(node0.isIn());
147:       assertEquals((-1), node0.getLineno());
148:       assertFalse(node0.hasMoreThanOneChild());
149:       assertFalse(node0.isNE());
150:       assertFalse(node0.isIf());
151:       assertFalse(node0.isContinue());
152:       assertFalse(node0.isCast());
153:       assertFalse(node0.isThrow());
154:       assertFalse(node0.isSetterDef());
155:       assertFalse(node0.isInc());
156:       assertFalse(node0.isInstanceOf());
157:       assertFalse(node0.isAnd());
158:       assertFalse(node0.isObjectLit());
159:       assertFalse(node0.isComma());
160:       assertFalse(node0.isThis());
161:       assertFalse(node0.isBreak());
162:       assertFalse(node0.isWith());
163:       assertFalse(node0.isFalse());
164:       assertFalse(node0.isExprResult());
165:       assertFalse(node0.hasOneChild());
166:       assertEquals((-1), node0.getCharno());
167:       assertFalse(node0.isHook());
168:       assertEquals((-1), node0.getSourcePosition());
169:       assertFalse(node0.isNot());
170:       assertFalse(node0.isNumber());
171:       assertFalse(node0.isGetProp());
172:       assertFalse(node0.isCase());
173:       assertFalse(node0.isScript());
174:       assertFalse(node0.isAssignAdd());
175:       assertFalse(node0.isOr());
176:       assertFalse(node0.isLabel());
177:       assertFalse(node0.isReturn());
178:       assertFalse(node0.isDelProp());
179:       assertFalse(node0.hasChildren());
180:       assertFalse(node0.isDec());
181:       assertFalse(node0.isLabelName());
182:       assertFalse(node0.isAssign());
183:       assertFalse(node0.isTypeOf());
184:       assertFalse(node0.isSwitch());
185:       assertFalse(node0.isArrayLit());
186:       assertFalse(node0.isGetElem());
187:       assertFalse(node0.isVar());
188:       assertFalse(node0.isTrue());
189:       assertFalse(node0.isDefaultCase());
190:       assertFalse(node0.isDo());
191:       assertFalse(node0.isNew());
192:       assertFalse(node0.isAdd());
193:       assertFalse(node0.isEmpty());
194:       assertEquals(40, Node.ORIGINALNAME_PROP);
195:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
196:       assertEquals(50, Node.FREE_CALL);
197:       assertEquals(57, Node.REFLECTED_OBJECT);
198:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
199:       assertEquals(48, Node.DIRECTIVES);
200:       assertEquals(54, Node.SLASH_V);
201:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
202:       assertEquals(49, Node.DIRECT_EVAL);
203:       assertEquals(1, Node.DECR_FLAG);
204:       assertEquals(4095, Node.COLUMN_MASK);
205:       assertEquals(46, Node.IS_NAMESPACE);
206:       assertEquals(51, Node.STATIC_SOURCE_FILE);
207:       assertEquals(12, Node.COLUMN_BITS);
208:       assertEquals(32, Node.INCRDECR_PROP);
209:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
210:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
211:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
212:       assertEquals(47, Node.IS_DISPATCHER);
213:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
214:       assertEquals(37, Node.OPT_ARG_NAME);
215:       assertEquals(2, Node.POST_FLAG);
216:       assertEquals(43, Node.IS_CONSTANT_NAME);
217:       assertEquals(56, Node.CHANGE_TIME);
218:       assertEquals(55, Node.INFERRED_FUNCTION);
219:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
220:       assertEquals(30, Node.VAR_ARGS_NAME);
221:       assertEquals(36, Node.QUOTED_PROP);
222:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
223:       assertEquals(8, Node.FLAG_NO_THROWS);
224:       assertEquals(39, Node.EMPTY_BLOCK);
225:       assertEquals(52, Node.LENGTH);
226:       assertEquals(57, Node.LAST_PROP);
227:       assertEquals(29, Node.JSDOC_INFO_PROP);
228:       assertEquals(53, Node.INPUT_ID);
229:       assertEquals(15, Node.NO_SIDE_EFFECTS);
230:       
231:       boolean boolean1 = node0.isTypeOf();
232:       assertFalse(boolean1);
233:       assertTrue(boolean1 == boolean0);
234:       assertEquals(0, node0.getChildCount());
235:       assertFalse(node0.isParamList());
236:       assertFalse(node0.isNull());
237:       assertEquals(40, node0.getType());
238:       assertFalse(node0.isRegExp());
239:       assertFalse(node0.isName());
240:       assertFalse(node0.isFunction());
241:       assertFalse(node0.isVoid());
242:       assertFalse(node0.isCatch());
243:       assertFalse(node0.isCall());
244:       assertFalse(node0.isTry());
245:       assertTrue(node0.isString());
246:       assertFalse(node0.isDebugger());
247:       assertFalse(node0.isStringKey());
248:       assertFalse(node0.isFor());
249:       assertFalse(node0.isBlock());
250:       assertFalse(node0.isGetterDef());
251:       assertFalse(node0.isWhile());
252:       assertFalse(node0.isIn());
253:       assertEquals((-1), node0.getLineno());
254:       assertFalse(node0.hasMoreThanOneChild());
255:       assertFalse(node0.isNE());
256:       assertFalse(node0.isIf());
257:       assertFalse(node0.isContinue());
258:       assertFalse(node0.isCast());
259:       assertFalse(node0.isThrow());
260:       assertFalse(node0.isSetterDef());
261:       assertFalse(node0.isInc());
262:       assertFalse(node0.isInstanceOf());
263:       assertFalse(node0.isAnd());
264:       assertFalse(node0.isObjectLit());
265:       assertFalse(node0.isComma());
266:       assertFalse(node0.isThis());
267:       assertFalse(node0.isBreak());
268:       assertFalse(node0.isWith());
269:       assertFalse(node0.isFalse());
270:       assertFalse(node0.isExprResult());
271:       assertFalse(node0.hasOneChild());
272:       assertEquals((-1), node0.getCharno());
273:       assertFalse(node0.isHook());
274:       assertEquals((-1), node0.getSourcePosition());
275:       assertFalse(node0.isNot());
276:       assertFalse(node0.isNumber());
277:       assertFalse(node0.isGetProp());
278:       assertFalse(node0.isCase());
279:       assertFalse(node0.isScript());
280:       assertFalse(node0.isAssignAdd());
281:       assertFalse(node0.isOr());
282:       assertFalse(node0.isLabel());
283:       assertFalse(node0.isReturn());
284:       assertFalse(node0.isDelProp());
285:       assertFalse(node0.hasChildren());
286:       assertFalse(node0.isDec());
287:       assertFalse(node0.isLabelName());
288:       assertFalse(node0.isAssign());
289:       assertFalse(node0.isTypeOf());
290:       assertFalse(node0.isSwitch());
291:       assertFalse(node0.isArrayLit());
292:       assertFalse(node0.isGetElem());
293:       assertFalse(node0.isVar());
294:       assertFalse(node0.isTrue());
295:       assertFalse(node0.isDefaultCase());
296:       assertFalse(node0.isDo());
297:       assertFalse(node0.isNew());
298:       assertFalse(node0.isAdd());
299:       assertFalse(node0.isEmpty());
300:       assertEquals(40, Node.ORIGINALNAME_PROP);
301:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
302:       assertEquals(50, Node.FREE_CALL);
303:       assertEquals(57, Node.REFLECTED_OBJECT);
304:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
305:       assertEquals(48, Node.DIRECTIVES);
306:       assertEquals(54, Node.SLASH_V);
307:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
308:       assertEquals(49, Node.DIRECT_EVAL);
309:       assertEquals(1, Node.DECR_FLAG);
310:       assertEquals(4095, Node.COLUMN_MASK);
311:       assertEquals(46, Node.IS_NAMESPACE);
312:       assertEquals(51, Node.STATIC_SOURCE_FILE);
313:       assertEquals(12, Node.COLUMN_BITS);
314:       assertEquals(32, Node.INCRDECR_PROP);
315:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
316:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
318:       assertEquals(47, Node.IS_DISPATCHER);
319:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
320:       assertEquals(37, Node.OPT_ARG_NAME);
321:       assertEquals(2, Node.POST_FLAG);
322:       assertEquals(43, Node.IS_CONSTANT_NAME);
323:       assertEquals(56, Node.CHANGE_TIME);
324:       assertEquals(55, Node.INFERRED_FUNCTION);
325:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
326:       assertEquals(30, Node.VAR_ARGS_NAME);
327:       assertEquals(36, Node.QUOTED_PROP);
328:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
329:       assertEquals(8, Node.FLAG_NO_THROWS);
330:       assertEquals(39, Node.EMPTY_BLOCK);
331:       assertEquals(52, Node.LENGTH);
332:       assertEquals(57, Node.LAST_PROP);
333:       assertEquals(29, Node.JSDOC_INFO_PROP);
334:       assertEquals(53, Node.INPUT_ID);
335:       assertEquals(15, Node.NO_SIDE_EFFECTS);
336:       
337:       Iterable<Node> iterable0 = node0.children();
338:       assertFalse(iterable0.contains(node0));
339:       assertNotNull(iterable0);
340:       assertEquals(0, node0.getChildCount());
341:       assertFalse(node0.isParamList());
342:       assertFalse(node0.isNull());
343:       assertEquals(40, node0.getType());
344:       assertFalse(node0.isRegExp());
345:       assertFalse(node0.isName());
346:       assertFalse(node0.isFunction());
347:       assertFalse(node0.isVoid());
348:       assertFalse(node0.isCatch());
349:       assertFalse(node0.isCall());
350:       assertFalse(node0.isTry());
351:       assertTrue(node0.isString());
352:       assertFalse(node0.isDebugger());
353:       assertFalse(node0.isStringKey());
354:       assertFalse(node0.isFor());
355:       assertFalse(node0.isBlock());
356:       assertFalse(node0.isGetterDef());
357:       assertFalse(node0.isWhile());
358:       assertFalse(node0.isIn());
359:       assertEquals((-1), node0.getLineno());
360:       assertFalse(node0.hasMoreThanOneChild());
361:       assertFalse(node0.isNE());
362:       assertFalse(node0.isIf());
363:       assertFalse(node0.isContinue());
364:       assertFalse(node0.isCast());
365:       assertFalse(node0.isThrow());
366:       assertFalse(node0.isSetterDef());
367:       assertFalse(node0.isInc());
368:       assertFalse(node0.isInstanceOf());
369:       assertFalse(node0.isAnd());
370:       assertFalse(node0.isObjectLit());
371:       assertFalse(node0.isComma());
372:       assertFalse(node0.isThis());
373:       assertFalse(node0.isBreak());
374:       assertFalse(node0.isWith());
375:       assertFalse(node0.isFalse());
376:       assertFalse(node0.isExprResult());
377:       assertFalse(node0.hasOneChild());
378:       assertEquals((-1), node0.getCharno());
379:       assertFalse(node0.isHook());
380:       assertEquals((-1), node0.getSourcePosition());
381:       assertFalse(node0.isNot());
382:       assertFalse(node0.isNumber());
383:       assertFalse(node0.isGetProp());
384:       assertFalse(node0.isCase());
385:       assertFalse(node0.isScript());
386:       assertFalse(node0.isAssignAdd());
387:       assertFalse(node0.isOr());
388:       assertFalse(node0.isLabel());
389:       assertFalse(node0.isReturn());
390:       assertFalse(node0.isDelProp());
391:       assertFalse(node0.hasChildren());
392:       assertFalse(node0.isDec());
393:       assertFalse(node0.isLabelName());
394:       assertFalse(node0.isAssign());
395:       assertFalse(node0.isTypeOf());
396:       assertFalse(node0.isSwitch());
397:       assertFalse(node0.isArrayLit());
398:       assertFalse(node0.isGetElem());
399:       assertFalse(node0.isVar());
400:       assertFalse(node0.isTrue());
401:       assertFalse(node0.isDefaultCase());
402:       assertFalse(node0.isDo());
403:       assertFalse(node0.isNew());
404:       assertFalse(node0.isAdd());
405:       assertFalse(node0.isEmpty());
406:       assertEquals(40, Node.ORIGINALNAME_PROP);
407:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
408:       assertEquals(50, Node.FREE_CALL);
409:       assertEquals(57, Node.REFLECTED_OBJECT);
410:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
411:       assertEquals(48, Node.DIRECTIVES);
412:       assertEquals(54, Node.SLASH_V);
413:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
414:       assertEquals(49, Node.DIRECT_EVAL);
415:       assertEquals(1, Node.DECR_FLAG);
416:       assertEquals(4095, Node.COLUMN_MASK);
417:       assertEquals(46, Node.IS_NAMESPACE);
418:       assertEquals(51, Node.STATIC_SOURCE_FILE);
419:       assertEquals(12, Node.COLUMN_BITS);
420:       assertEquals(32, Node.INCRDECR_PROP);
421:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
422:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
423:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
424:       assertEquals(47, Node.IS_DISPATCHER);
425:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
426:       assertEquals(37, Node.OPT_ARG_NAME);
427:       assertEquals(2, Node.POST_FLAG);
428:       assertEquals(43, Node.IS_CONSTANT_NAME);
429:       assertEquals(56, Node.CHANGE_TIME);
430:       assertEquals(55, Node.INFERRED_FUNCTION);
431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
432:       assertEquals(30, Node.VAR_ARGS_NAME);
433:       assertEquals(36, Node.QUOTED_PROP);
434:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
435:       assertEquals(8, Node.FLAG_NO_THROWS);
436:       assertEquals(39, Node.EMPTY_BLOCK);
437:       assertEquals(52, Node.LENGTH);
438:       assertEquals(57, Node.LAST_PROP);
439:       assertEquals(29, Node.JSDOC_INFO_PROP);
440:       assertEquals(53, Node.INPUT_ID);
441:       assertEquals(15, Node.NO_SIDE_EFFECTS);
442:       
443:       boolean boolean2 = node0.isVoid();
444:       assertFalse(boolean2);
445:       assertTrue(boolean2 == boolean0);
446:       assertTrue(boolean2 == boolean1);
447:       assertEquals(0, node0.getChildCount());
448:       assertFalse(node0.isParamList());
449:       assertFalse(node0.isNull());
450:       assertEquals(40, node0.getType());
451:       assertFalse(node0.isRegExp());
452:       assertFalse(node0.isName());
453:       assertFalse(node0.isFunction());
454:       assertFalse(node0.isVoid());
455:       assertFalse(node0.isCatch());
456:       assertFalse(node0.isCall());
457:       assertFalse(node0.isTry());
458:       assertTrue(node0.isString());
459:       assertFalse(node0.isDebugger());
460:       assertFalse(node0.isStringKey());
461:       assertFalse(node0.isFor());
462:       assertFalse(node0.isBlock());
463:       assertFalse(node0.isGetterDef());
464:       assertFalse(node0.isWhile());
465:       assertFalse(node0.isIn());
466:       assertEquals((-1), node0.getLineno());
467:       assertFalse(node0.hasMoreThanOneChild());
468:       assertFalse(node0.isNE());
469:       assertFalse(node0.isIf());
470:       assertFalse(node0.isContinue());
471:       assertFalse(node0.isCast());
472:       assertFalse(node0.isThrow());
473:       assertFalse(node0.isSetterDef());
474:       assertFalse(node0.isInc());
475:       assertFalse(node0.isInstanceOf());
476:       assertFalse(node0.isAnd());
477:       assertFalse(node0.isObjectLit());
478:       assertFalse(node0.isComma());
479:       assertFalse(node0.isThis());
480:       assertFalse(node0.isBreak());
481:       assertFalse(node0.isWith());
482:       assertFalse(node0.isFalse());
483:       assertFalse(node0.isExprResult());
484:       assertFalse(node0.hasOneChild());
485:       assertEquals((-1), node0.getCharno());
486:       assertFalse(node0.isHook());
487:       assertEquals((-1), node0.getSourcePosition());
488:       assertFalse(node0.isNot());
489:       assertFalse(node0.isNumber());
490:       assertFalse(node0.isGetProp());
491:       assertFalse(node0.isCase());
492:       assertFalse(node0.isScript());
493:       assertFalse(node0.isAssignAdd());
494:       assertFalse(node0.isOr());
495:       assertFalse(node0.isLabel());
496:       assertFalse(node0.isReturn());
497:       assertFalse(node0.isDelProp());
498:       assertFalse(node0.hasChildren());
499:       assertFalse(node0.isDec());
500:       assertFalse(node0.isLabelName());
501:       assertFalse(node0.isAssign());
502:       assertFalse(node0.isTypeOf());
503:       assertFalse(node0.isSwitch());
504:       assertFalse(node0.isArrayLit());
505:       assertFalse(node0.isGetElem());
506:       assertFalse(node0.isVar());
507:       assertFalse(node0.isTrue());
508:       assertFalse(node0.isDefaultCase());
509:       assertFalse(node0.isDo());
510:       assertFalse(node0.isNew());
511:       assertFalse(node0.isAdd());
512:       assertFalse(node0.isEmpty());
513:       assertEquals(40, Node.ORIGINALNAME_PROP);
514:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
515:       assertEquals(50, Node.FREE_CALL);
516:       assertEquals(57, Node.REFLECTED_OBJECT);
517:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
518:       assertEquals(48, Node.DIRECTIVES);
519:       assertEquals(54, Node.SLASH_V);
520:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
521:       assertEquals(49, Node.DIRECT_EVAL);
522:       assertEquals(1, Node.DECR_FLAG);
523:       assertEquals(4095, Node.COLUMN_MASK);
524:       assertEquals(46, Node.IS_NAMESPACE);
525:       assertEquals(51, Node.STATIC_SOURCE_FILE);
526:       assertEquals(12, Node.COLUMN_BITS);
527:       assertEquals(32, Node.INCRDECR_PROP);
528:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
529:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
530:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
531:       assertEquals(47, Node.IS_DISPATCHER);
532:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
533:       assertEquals(37, Node.OPT_ARG_NAME);
534:       assertEquals(2, Node.POST_FLAG);
535:       assertEquals(43, Node.IS_CONSTANT_NAME);
536:       assertEquals(56, Node.CHANGE_TIME);
537:       assertEquals(55, Node.INFERRED_FUNCTION);
538:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
539:       assertEquals(30, Node.VAR_ARGS_NAME);
540:       assertEquals(36, Node.QUOTED_PROP);
541:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
542:       assertEquals(8, Node.FLAG_NO_THROWS);
543:       assertEquals(39, Node.EMPTY_BLOCK);
544:       assertEquals(52, Node.LENGTH);
545:       assertEquals(57, Node.LAST_PROP);
546:       assertEquals(29, Node.JSDOC_INFO_PROP);
547:       assertEquals(53, Node.INPUT_ID);
548:       assertEquals(15, Node.NO_SIDE_EFFECTS);
549:       
550:       boolean boolean3 = node0.isName();
551:       assertFalse(boolean3);
552:       assertTrue(boolean3 == boolean2);
553:       assertTrue(boolean3 == boolean1);
554:       assertTrue(boolean3 == boolean0);
555:       assertEquals(0, node0.getChildCount());
556:       assertFalse(node0.isParamList());
557:       assertFalse(node0.isNull());
558:       assertEquals(40, node0.getType());
559:       assertFalse(node0.isRegExp());
560:       assertFalse(node0.isName());
561:       assertFalse(node0.isFunction());
562:       assertFalse(node0.isVoid());
563:       assertFalse(node0.isCatch());
564:       assertFalse(node0.isCall());
565:       assertFalse(node0.isTry());
566:       assertTrue(node0.isString());
567:       assertFalse(node0.isDebugger());
568:       assertFalse(node0.isStringKey());
569:       assertFalse(node0.isFor());
570:       assertFalse(node0.isBlock());
571:       assertFalse(node0.isGetterDef());
572:       assertFalse(node0.isWhile());
573:       assertFalse(node0.isIn());
574:       assertEquals((-1), node0.getLineno());
575:       assertFalse(node0.hasMoreThanOneChild());
576:       assertFalse(node0.isNE());
577:       assertFalse(node0.isIf());
578:       assertFalse(node0.isContinue());
579:       assertFalse(node0.isCast());
580:       assertFalse(node0.isThrow());
581:       assertFalse(node0.isSetterDef());
582:       assertFalse(node0.isInc());
583:       assertFalse(node0.isInstanceOf());
584:       assertFalse(node0.isAnd());
585:       assertFalse(node0.isObjectLit());
586:       assertFalse(node0.isComma());
587:       assertFalse(node0.isThis());
588:       assertFalse(node0.isBreak());
589:       assertFalse(node0.isWith());
590:       assertFalse(node0.isFalse());
591:       assertFalse(node0.isExprResult());
592:       assertFalse(node0.hasOneChild());
593:       assertEquals((-1), node0.getCharno());
594:       assertFalse(node0.isHook());
595:       assertEquals((-1), node0.getSourcePosition());
596:       assertFalse(node0.isNot());
597:       assertFalse(node0.isNumber());
598:       assertFalse(node0.isGetProp());
599:       assertFalse(node0.isCase());
600:       assertFalse(node0.isScript());
601:       assertFalse(node0.isAssignAdd());
602:       assertFalse(node0.isOr());
603:       assertFalse(node0.isLabel());
604:       assertFalse(node0.isReturn());
605:       assertFalse(node0.isDelProp());
606:       assertFalse(node0.hasChildren());
607:       assertFalse(node0.isDec());
608:       assertFalse(node0.isLabelName());
609:       assertFalse(node0.isAssign());
610:       assertFalse(node0.isTypeOf());
611:       assertFalse(node0.isSwitch());
612:       assertFalse(node0.isArrayLit());
613:       assertFalse(node0.isGetElem());
614:       assertFalse(node0.isVar());
615:       assertFalse(node0.isTrue());
616:       assertFalse(node0.isDefaultCase());
617:       assertFalse(node0.isDo());
618:       assertFalse(node0.isNew());
619:       assertFalse(node0.isAdd());
620:       assertFalse(node0.isEmpty());
621:       assertEquals(40, Node.ORIGINALNAME_PROP);
622:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
623:       assertEquals(50, Node.FREE_CALL);
624:       assertEquals(57, Node.REFLECTED_OBJECT);
625:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
626:       assertEquals(48, Node.DIRECTIVES);
627:       assertEquals(54, Node.SLASH_V);
628:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
629:       assertEquals(49, Node.DIRECT_EVAL);
630:       assertEquals(1, Node.DECR_FLAG);
631:       assertEquals(4095, Node.COLUMN_MASK);
632:       assertEquals(46, Node.IS_NAMESPACE);
633:       assertEquals(51, Node.STATIC_SOURCE_FILE);
634:       assertEquals(12, Node.COLUMN_BITS);
635:       assertEquals(32, Node.INCRDECR_PROP);
636:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
637:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
638:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
639:       assertEquals(47, Node.IS_DISPATCHER);
640:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
641:       assertEquals(37, Node.OPT_ARG_NAME);
642:       assertEquals(2, Node.POST_FLAG);
643:       assertEquals(43, Node.IS_CONSTANT_NAME);
644:       assertEquals(56, Node.CHANGE_TIME);
645:       assertEquals(55, Node.INFERRED_FUNCTION);
646:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
647:       assertEquals(30, Node.VAR_ARGS_NAME);
648:       assertEquals(36, Node.QUOTED_PROP);
649:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
650:       assertEquals(8, Node.FLAG_NO_THROWS);
651:       assertEquals(39, Node.EMPTY_BLOCK);
652:       assertEquals(52, Node.LENGTH);
653:       assertEquals(57, Node.LAST_PROP);
654:       assertEquals(29, Node.JSDOC_INFO_PROP);
655:       assertEquals(53, Node.INPUT_ID);
656:       assertEquals(15, Node.NO_SIDE_EFFECTS);
657:       
658:       Node[] nodeArray0 = new Node[6];
659:       nodeArray0[0] = node0;
660:       Node node1 = Node.newNumber((double) 49);
661:       assertNotNull(node1);
662:       assertFalse(node1.equals((Object)node0));
663:       assertFalse(node1.isRegExp());
664:       assertFalse(node1.isVoid());
665:       assertFalse(node1.isFunction());
666:       assertFalse(node1.isDefaultCase());
667:       assertFalse(node1.isTry());
668:       assertFalse(node1.isCatch());
669:       assertEquals(0, node1.getChildCount());
670:       assertFalse(node1.isFor());
671:       assertFalse(node1.isNull());
672:       assertFalse(node1.isNE());
673:       assertFalse(node1.isDelProp());
674:       assertFalse(node1.isIf());
675:       assertFalse(node1.isName());
676:       assertFalse(node1.isEmpty());
677:       assertFalse(node1.isCall());
678:       assertFalse(node1.isSetterDef());
679:       assertFalse(node1.isIn());
680:       assertFalse(node1.isTrue());
681:       assertFalse(node1.isWhile());
682:       assertFalse(node1.isString());
683:       assertFalse(node1.isInc());
684:       assertFalse(node1.isContinue());
685:       assertFalse(node1.isFalse());
686:       assertFalse(node1.isThrow());
687:       assertFalse(node1.isReturn());
688:       assertEquals((-1), node1.getSourcePosition());
689:       assertTrue(node1.isNumber());
690:       assertFalse(node1.isGetProp());
691:       assertFalse(node1.isAnd());
692:       assertFalse(node1.isObjectLit());
693:       assertFalse(node1.isNot());
694:       assertFalse(node1.isDebugger());
695:       assertFalse(node1.isScript());
696:       assertFalse(node1.isWith());
697:       assertFalse(node1.isExprResult());
698:       assertFalse(node1.hasOneChild());
699:       assertFalse(node1.isInstanceOf());
700:       assertFalse(node1.isCast());
701:       assertFalse(node1.isAssign());
702:       assertFalse(node1.isThis());
703:       assertFalse(node1.hasChildren());
704:       assertFalse(node1.isTypeOf());
705:       assertFalse(node1.isComma());
706:       assertFalse(node1.isDec());
707:       assertEquals((-1), node1.getLineno());
708:       assertFalse(node1.isBreak());
709:       assertFalse(node1.isGetElem());
710:       assertFalse(node1.isOr());
711:       assertFalse(node1.isSwitch());
712:       assertFalse(node1.isNew());
713:       assertFalse(node1.isAdd());
714:       assertFalse(node1.isCase());
715:       assertFalse(node1.isDo());
716:       assertFalse(node1.isVar());
717:       assertFalse(node1.hasMoreThanOneChild());
718:       assertFalse(node1.isAssignAdd());
719:       assertFalse(node1.isBlock());
720:       assertFalse(node1.isLabel());
721:       assertEquals(39, node1.getType());
722:       assertFalse(node1.isHook());
723:       assertFalse(node1.isParamList());
724:       assertFalse(node1.isGetterDef());
725:       assertFalse(node1.isLabelName());
726:       assertFalse(node1.isArrayLit());
727:       assertFalse(node1.isStringKey());
728:       assertEquals((-1), node1.getCharno());
729:       assertEquals(48, Node.DIRECTIVES);
730:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
731:       assertEquals(8, Node.FLAG_NO_THROWS);
732:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
733:       assertEquals(39, Node.EMPTY_BLOCK);
734:       assertEquals(40, Node.ORIGINALNAME_PROP);
735:       assertEquals(4095, Node.COLUMN_MASK);
736:       assertEquals(53, Node.INPUT_ID);
737:       assertEquals(52, Node.LENGTH);
738:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
739:       assertEquals(15, Node.NO_SIDE_EFFECTS);
740:       assertEquals(29, Node.JSDOC_INFO_PROP);
741:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
742:       assertEquals(49, Node.DIRECT_EVAL);
743:       assertEquals(55, Node.INFERRED_FUNCTION);
744:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
745:       assertEquals(56, Node.CHANGE_TIME);
746:       assertEquals(36, Node.QUOTED_PROP);
747:       assertEquals(57, Node.REFLECTED_OBJECT);
748:       assertEquals(32, Node.INCRDECR_PROP);
749:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
750:       assertEquals(37, Node.OPT_ARG_NAME);
751:       assertEquals(1, Node.DECR_FLAG);
752:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
753:       assertEquals(57, Node.LAST_PROP);
754:       assertEquals(47, Node.IS_DISPATCHER);
755:       assertEquals(2, Node.POST_FLAG);
756:       assertEquals(12, Node.COLUMN_BITS);
757:       assertEquals(30, Node.VAR_ARGS_NAME);
758:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
759:       assertEquals(54, Node.SLASH_V);
760:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
761:       assertEquals(50, Node.FREE_CALL);
762:       assertEquals(43, Node.IS_CONSTANT_NAME);
763:       assertEquals(51, Node.STATIC_SOURCE_FILE);
764:       assertEquals(46, Node.IS_NAMESPACE);
765:       
766:       nodeArray0[1] = node1;
767:       nodeArray0[2] = node0;
768:       nodeArray0[3] = node0;
769:       nodeArray0[4] = node0;
770:       nodeArray0[5] = node0;
771:       Node node2 = null;
772:       try {
773:         node2 = new Node(56, nodeArray0);
774:         fail("Expecting exception: IllegalArgumentException");
775:       
776:       } catch(IllegalArgumentException e) {
777:          //
778:          // duplicate child
779:          //
780:          verifyException("com.google.javascript.rhino.Node", e);
781:       }
782:   }
783: }
RegularFileObject[/tmp/EvoSuite_105_1628159313657/com/google/javascript/rhino/Node_105_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:33 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_105_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_105_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_105_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.NamedType",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.JSDocInfo$Marker",
356:       "com.google.common.collect.ImmutableSet",
357:       "com.google.common.collect.EmptyImmutableSet",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 10:28:33.718 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertNotNull(node0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(40, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);

boolean boolean0 = node0.isWhile();
assertFalse(boolean0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(40, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);

boolean boolean1 = node0.isTypeOf();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(40, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(40, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);

boolean boolean2 = node0.isVoid();
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(40, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);

boolean boolean3 = node0.isName();
assertFalse(boolean3);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(40, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);

Node[] nodeArray0 = new Node[6];
nodeArray0[0] = node0;
Node node1 = Node.newNumber((double) 49);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isThis());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

nodeArray0[1] = node1;
nodeArray0[2] = node0;
nodeArray0[3] = node0;
nodeArray0[4] = node0;
nodeArray0[5] = node0;
Node node2 = new Node(56, nodeArray0);

[MASTER] 10:28:39.510 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_135_1628159319324/com/google/javascript/rhino/Node_135_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_135_1628159319324/com/google/javascript/rhino/Node_135_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:39.510 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:39.510 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:39.510 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 460
[MASTER] 10:28:39.511 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_135_1628159319324/com/google/javascript/rhino/Node_135_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:39 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.FunctionType;
14: import com.google.javascript.rhino.jstype.JSType;
15: import com.google.javascript.rhino.jstype.JSTypeRegistry;
16: import com.google.javascript.rhino.jstype.ObjectType;
17: import com.google.javascript.rhino.jstype.TemplatizedType;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class Node_135_tmp__ESTest extends Node_135_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Node node0 = Node.newString("change_time");
28:       assertNotNull(node0);
29:       assertFalse(node0.isObjectLit());
30:       assertFalse(node0.isNot());
31:       assertFalse(node0.isWith());
32:       assertFalse(node0.isInstanceOf());
33:       assertFalse(node0.isScript());
34:       assertFalse(node0.isThis());
35:       assertFalse(node0.isGetProp());
36:       assertFalse(node0.isComma());
37:       assertFalse(node0.isThrow());
38:       assertFalse(node0.isCast());
39:       assertFalse(node0.hasOneChild());
40:       assertFalse(node0.isFalse());
41:       assertFalse(node0.isSwitch());
42:       assertFalse(node0.isNumber());
43:       assertEquals((-1), node0.getCharno());
44:       assertEquals((-1), node0.getSourcePosition());
45:       assertFalse(node0.isLabelName());
46:       assertFalse(node0.isAnd());
47:       assertFalse(node0.isOr());
48:       assertFalse(node0.isTypeOf());
49:       assertFalse(node0.hasChildren());
50:       assertFalse(node0.isNew());
51:       assertFalse(node0.isDec());
52:       assertFalse(node0.isAssignAdd());
53:       assertFalse(node0.isDo());
54:       assertFalse(node0.isLabel());
55:       assertFalse(node0.isReturn());
56:       assertFalse(node0.isWhile());
57:       assertFalse(node0.isCall());
58:       assertFalse(node0.isAdd());
59:       assertFalse(node0.isEmpty());
60:       assertFalse(node0.isAssign());
61:       assertFalse(node0.isGetElem());
62:       assertFalse(node0.isNull());
63:       assertFalse(node0.isTrue());
64:       assertFalse(node0.isExprResult());
65:       assertFalse(node0.isBreak());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.isVoid());
68:       assertFalse(node0.isName());
69:       assertEquals(0, node0.getChildCount());
70:       assertFalse(node0.isCatch());
71:       assertFalse(node0.isRegExp());
72:       assertFalse(node0.isSetterDef());
73:       assertFalse(node0.isFunction());
74:       assertFalse(node0.isTry());
75:       assertEquals(40, node0.getType());
76:       assertFalse(node0.isDefaultCase());
77:       assertFalse(node0.isVar());
78:       assertFalse(node0.isArrayLit());
79:       assertFalse(node0.isGetterDef());
80:       assertFalse(node0.isDebugger());
81:       assertFalse(node0.isStringKey());
82:       assertFalse(node0.isParamList());
83:       assertFalse(node0.hasMoreThanOneChild());
84:       assertFalse(node0.isCase());
85:       assertEquals((-1), node0.getLineno());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.isIn());
88:       assertFalse(node0.isInc());
89:       assertFalse(node0.isFor());
90:       assertFalse(node0.isBlock());
91:       assertTrue(node0.isString());
92:       assertFalse(node0.isHook());
93:       assertFalse(node0.isNE());
94:       assertFalse(node0.isIf());
95:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
96:       assertEquals(50, Node.FREE_CALL);
97:       assertEquals(39, Node.EMPTY_BLOCK);
98:       assertEquals(40, Node.ORIGINALNAME_PROP);
99:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
100:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
101:       assertEquals(57, Node.LAST_PROP);
102:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
103:       assertEquals(30, Node.VAR_ARGS_NAME);
104:       assertEquals(1, Node.DECR_FLAG);
105:       assertEquals(43, Node.IS_CONSTANT_NAME);
106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
107:       assertEquals(46, Node.IS_NAMESPACE);
108:       assertEquals(54, Node.SLASH_V);
109:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
110:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
111:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
112:       assertEquals(29, Node.JSDOC_INFO_PROP);
113:       assertEquals(53, Node.INPUT_ID);
114:       assertEquals(32, Node.INCRDECR_PROP);
115:       assertEquals(2, Node.POST_FLAG);
116:       assertEquals(12, Node.COLUMN_BITS);
117:       assertEquals(47, Node.IS_DISPATCHER);
118:       assertEquals(49, Node.DIRECT_EVAL);
119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
120:       assertEquals(4095, Node.COLUMN_MASK);
121:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
122:       assertEquals(55, Node.INFERRED_FUNCTION);
123:       assertEquals(52, Node.LENGTH);
124:       assertEquals(37, Node.OPT_ARG_NAME);
125:       assertEquals(8, Node.FLAG_NO_THROWS);
126:       assertEquals(48, Node.DIRECTIVES);
127:       assertEquals(56, Node.CHANGE_TIME);
128:       assertEquals(36, Node.QUOTED_PROP);
129:       assertEquals(57, Node.REFLECTED_OBJECT);
130:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
131:       
132:       node0.setCharno(0);
133:       assertFalse(node0.isObjectLit());
134:       assertFalse(node0.isNot());
135:       assertFalse(node0.isWith());
136:       assertFalse(node0.isInstanceOf());
137:       assertFalse(node0.isScript());
138:       assertFalse(node0.isThis());
139:       assertFalse(node0.isGetProp());
140:       assertFalse(node0.isComma());
141:       assertFalse(node0.isThrow());
142:       assertFalse(node0.isCast());
143:       assertFalse(node0.hasOneChild());
144:       assertFalse(node0.isFalse());
145:       assertFalse(node0.isSwitch());
146:       assertFalse(node0.isNumber());
147:       assertEquals((-1), node0.getCharno());
148:       assertEquals((-1), node0.getSourcePosition());
149:       assertFalse(node0.isLabelName());
150:       assertFalse(node0.isAnd());
151:       assertFalse(node0.isOr());
152:       assertFalse(node0.isTypeOf());
153:       assertFalse(node0.hasChildren());
154:       assertFalse(node0.isNew());
155:       assertFalse(node0.isDec());
156:       assertFalse(node0.isAssignAdd());
157:       assertFalse(node0.isDo());
158:       assertFalse(node0.isLabel());
159:       assertFalse(node0.isReturn());
160:       assertFalse(node0.isWhile());
161:       assertFalse(node0.isCall());
162:       assertFalse(node0.isAdd());
163:       assertFalse(node0.isEmpty());
164:       assertFalse(node0.isAssign());
165:       assertFalse(node0.isGetElem());
166:       assertFalse(node0.isNull());
167:       assertFalse(node0.isTrue());
168:       assertFalse(node0.isExprResult());
169:       assertFalse(node0.isBreak());
170:       assertFalse(node0.isDelProp());
171:       assertFalse(node0.isVoid());
172:       assertFalse(node0.isName());
173:       assertEquals(0, node0.getChildCount());
174:       assertFalse(node0.isCatch());
175:       assertFalse(node0.isRegExp());
176:       assertFalse(node0.isSetterDef());
177:       assertFalse(node0.isFunction());
178:       assertFalse(node0.isTry());
179:       assertEquals(40, node0.getType());
180:       assertFalse(node0.isDefaultCase());
181:       assertFalse(node0.isVar());
182:       assertFalse(node0.isArrayLit());
183:       assertFalse(node0.isGetterDef());
184:       assertFalse(node0.isDebugger());
185:       assertFalse(node0.isStringKey());
186:       assertFalse(node0.isParamList());
187:       assertFalse(node0.hasMoreThanOneChild());
188:       assertFalse(node0.isCase());
189:       assertEquals((-1), node0.getLineno());
190:       assertFalse(node0.isContinue());
191:       assertFalse(node0.isIn());
192:       assertFalse(node0.isInc());
193:       assertFalse(node0.isFor());
194:       assertFalse(node0.isBlock());
195:       assertTrue(node0.isString());
196:       assertFalse(node0.isHook());
197:       assertFalse(node0.isNE());
198:       assertFalse(node0.isIf());
199:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
200:       assertEquals(50, Node.FREE_CALL);
201:       assertEquals(39, Node.EMPTY_BLOCK);
202:       assertEquals(40, Node.ORIGINALNAME_PROP);
203:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
204:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
205:       assertEquals(57, Node.LAST_PROP);
206:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
207:       assertEquals(30, Node.VAR_ARGS_NAME);
208:       assertEquals(1, Node.DECR_FLAG);
209:       assertEquals(43, Node.IS_CONSTANT_NAME);
210:       assertEquals(51, Node.STATIC_SOURCE_FILE);
211:       assertEquals(46, Node.IS_NAMESPACE);
212:       assertEquals(54, Node.SLASH_V);
213:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
214:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
215:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
216:       assertEquals(29, Node.JSDOC_INFO_PROP);
217:       assertEquals(53, Node.INPUT_ID);
218:       assertEquals(32, Node.INCRDECR_PROP);
219:       assertEquals(2, Node.POST_FLAG);
220:       assertEquals(12, Node.COLUMN_BITS);
221:       assertEquals(47, Node.IS_DISPATCHER);
222:       assertEquals(49, Node.DIRECT_EVAL);
223:       assertEquals(15, Node.NO_SIDE_EFFECTS);
224:       assertEquals(4095, Node.COLUMN_MASK);
225:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
226:       assertEquals(55, Node.INFERRED_FUNCTION);
227:       assertEquals(52, Node.LENGTH);
228:       assertEquals(37, Node.OPT_ARG_NAME);
229:       assertEquals(8, Node.FLAG_NO_THROWS);
230:       assertEquals(48, Node.DIRECTIVES);
231:       assertEquals(56, Node.CHANGE_TIME);
232:       assertEquals(36, Node.QUOTED_PROP);
233:       assertEquals(57, Node.REFLECTED_OBJECT);
234:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
235:       
236:       node0.setLength(1953);
237:       assertFalse(node0.isObjectLit());
238:       assertFalse(node0.isNot());
239:       assertFalse(node0.isWith());
240:       assertFalse(node0.isInstanceOf());
241:       assertFalse(node0.isScript());
242:       assertFalse(node0.isThis());
243:       assertFalse(node0.isGetProp());
244:       assertFalse(node0.isComma());
245:       assertFalse(node0.isThrow());
246:       assertFalse(node0.isCast());
247:       assertFalse(node0.hasOneChild());
248:       assertFalse(node0.isFalse());
249:       assertFalse(node0.isSwitch());
250:       assertFalse(node0.isNumber());
251:       assertEquals((-1), node0.getCharno());
252:       assertEquals((-1), node0.getSourcePosition());
253:       assertFalse(node0.isLabelName());
254:       assertFalse(node0.isAnd());
255:       assertFalse(node0.isOr());
256:       assertFalse(node0.isTypeOf());
257:       assertFalse(node0.hasChildren());
258:       assertFalse(node0.isNew());
259:       assertFalse(node0.isDec());
260:       assertFalse(node0.isAssignAdd());
261:       assertFalse(node0.isDo());
262:       assertFalse(node0.isLabel());
263:       assertFalse(node0.isReturn());
264:       assertFalse(node0.isWhile());
265:       assertFalse(node0.isCall());
266:       assertFalse(node0.isAdd());
267:       assertFalse(node0.isEmpty());
268:       assertFalse(node0.isAssign());
269:       assertFalse(node0.isGetElem());
270:       assertFalse(node0.isNull());
271:       assertFalse(node0.isTrue());
272:       assertFalse(node0.isExprResult());
273:       assertFalse(node0.isBreak());
274:       assertFalse(node0.isDelProp());
275:       assertFalse(node0.isVoid());
276:       assertFalse(node0.isName());
277:       assertEquals(0, node0.getChildCount());
278:       assertFalse(node0.isCatch());
279:       assertFalse(node0.isRegExp());
280:       assertFalse(node0.isSetterDef());
281:       assertFalse(node0.isFunction());
282:       assertFalse(node0.isTry());
283:       assertEquals(40, node0.getType());
284:       assertFalse(node0.isDefaultCase());
285:       assertFalse(node0.isVar());
286:       assertFalse(node0.isArrayLit());
287:       assertFalse(node0.isGetterDef());
288:       assertFalse(node0.isDebugger());
289:       assertFalse(node0.isStringKey());
290:       assertFalse(node0.isParamList());
291:       assertFalse(node0.hasMoreThanOneChild());
292:       assertFalse(node0.isCase());
293:       assertEquals((-1), node0.getLineno());
294:       assertFalse(node0.isContinue());
295:       assertFalse(node0.isIn());
296:       assertFalse(node0.isInc());
297:       assertFalse(node0.isFor());
298:       assertFalse(node0.isBlock());
299:       assertTrue(node0.isString());
300:       assertFalse(node0.isHook());
301:       assertFalse(node0.isNE());
302:       assertFalse(node0.isIf());
303:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
304:       assertEquals(50, Node.FREE_CALL);
305:       assertEquals(39, Node.EMPTY_BLOCK);
306:       assertEquals(40, Node.ORIGINALNAME_PROP);
307:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
308:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
309:       assertEquals(57, Node.LAST_PROP);
310:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
311:       assertEquals(30, Node.VAR_ARGS_NAME);
312:       assertEquals(1, Node.DECR_FLAG);
313:       assertEquals(43, Node.IS_CONSTANT_NAME);
314:       assertEquals(51, Node.STATIC_SOURCE_FILE);
315:       assertEquals(46, Node.IS_NAMESPACE);
316:       assertEquals(54, Node.SLASH_V);
317:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
318:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
319:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
320:       assertEquals(29, Node.JSDOC_INFO_PROP);
321:       assertEquals(53, Node.INPUT_ID);
322:       assertEquals(32, Node.INCRDECR_PROP);
323:       assertEquals(2, Node.POST_FLAG);
324:       assertEquals(12, Node.COLUMN_BITS);
325:       assertEquals(47, Node.IS_DISPATCHER);
326:       assertEquals(49, Node.DIRECT_EVAL);
327:       assertEquals(15, Node.NO_SIDE_EFFECTS);
328:       assertEquals(4095, Node.COLUMN_MASK);
329:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
330:       assertEquals(55, Node.INFERRED_FUNCTION);
331:       assertEquals(52, Node.LENGTH);
332:       assertEquals(37, Node.OPT_ARG_NAME);
333:       assertEquals(8, Node.FLAG_NO_THROWS);
334:       assertEquals(48, Node.DIRECTIVES);
335:       assertEquals(56, Node.CHANGE_TIME);
336:       assertEquals(36, Node.QUOTED_PROP);
337:       assertEquals(57, Node.REFLECTED_OBJECT);
338:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
339:       
340:       int int0 = node0.getChangeTime();
341:       assertEquals(0, int0);
342:       assertFalse(node0.isObjectLit());
343:       assertFalse(node0.isNot());
344:       assertFalse(node0.isWith());
345:       assertFalse(node0.isInstanceOf());
346:       assertFalse(node0.isScript());
347:       assertFalse(node0.isThis());
348:       assertFalse(node0.isGetProp());
349:       assertFalse(node0.isComma());
350:       assertFalse(node0.isThrow());
351:       assertFalse(node0.isCast());
352:       assertFalse(node0.hasOneChild());
353:       assertFalse(node0.isFalse());
354:       assertFalse(node0.isSwitch());
355:       assertFalse(node0.isNumber());
356:       assertEquals((-1), node0.getCharno());
357:       assertEquals((-1), node0.getSourcePosition());
358:       assertFalse(node0.isLabelName());
359:       assertFalse(node0.isAnd());
360:       assertFalse(node0.isOr());
361:       assertFalse(node0.isTypeOf());
362:       assertFalse(node0.hasChildren());
363:       assertFalse(node0.isNew());
364:       assertFalse(node0.isDec());
365:       assertFalse(node0.isAssignAdd());
366:       assertFalse(node0.isDo());
367:       assertFalse(node0.isLabel());
368:       assertFalse(node0.isReturn());
369:       assertFalse(node0.isWhile());
370:       assertFalse(node0.isCall());
371:       assertFalse(node0.isAdd());
372:       assertFalse(node0.isEmpty());
373:       assertFalse(node0.isAssign());
374:       assertFalse(node0.isGetElem());
375:       assertFalse(node0.isNull());
376:       assertFalse(node0.isTrue());
377:       assertFalse(node0.isExprResult());
378:       assertFalse(node0.isBreak());
379:       assertFalse(node0.isDelProp());
380:       assertFalse(node0.isVoid());
381:       assertFalse(node0.isName());
382:       assertEquals(0, node0.getChildCount());
383:       assertFalse(node0.isCatch());
384:       assertFalse(node0.isRegExp());
385:       assertFalse(node0.isSetterDef());
386:       assertFalse(node0.isFunction());
387:       assertFalse(node0.isTry());
388:       assertEquals(40, node0.getType());
389:       assertFalse(node0.isDefaultCase());
390:       assertFalse(node0.isVar());
391:       assertFalse(node0.isArrayLit());
392:       assertFalse(node0.isGetterDef());
393:       assertFalse(node0.isDebugger());
394:       assertFalse(node0.isStringKey());
395:       assertFalse(node0.isParamList());
396:       assertFalse(node0.hasMoreThanOneChild());
397:       assertFalse(node0.isCase());
398:       assertEquals((-1), node0.getLineno());
399:       assertFalse(node0.isContinue());
400:       assertFalse(node0.isIn());
401:       assertFalse(node0.isInc());
402:       assertFalse(node0.isFor());
403:       assertFalse(node0.isBlock());
404:       assertTrue(node0.isString());
405:       assertFalse(node0.isHook());
406:       assertFalse(node0.isNE());
407:       assertFalse(node0.isIf());
408:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
409:       assertEquals(50, Node.FREE_CALL);
410:       assertEquals(39, Node.EMPTY_BLOCK);
411:       assertEquals(40, Node.ORIGINALNAME_PROP);
412:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
413:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
414:       assertEquals(57, Node.LAST_PROP);
415:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
416:       assertEquals(30, Node.VAR_ARGS_NAME);
417:       assertEquals(1, Node.DECR_FLAG);
418:       assertEquals(43, Node.IS_CONSTANT_NAME);
419:       assertEquals(51, Node.STATIC_SOURCE_FILE);
420:       assertEquals(46, Node.IS_NAMESPACE);
421:       assertEquals(54, Node.SLASH_V);
422:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
423:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
424:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
425:       assertEquals(29, Node.JSDOC_INFO_PROP);
426:       assertEquals(53, Node.INPUT_ID);
427:       assertEquals(32, Node.INCRDECR_PROP);
428:       assertEquals(2, Node.POST_FLAG);
429:       assertEquals(12, Node.COLUMN_BITS);
430:       assertEquals(47, Node.IS_DISPATCHER);
431:       assertEquals(49, Node.DIRECT_EVAL);
432:       assertEquals(15, Node.NO_SIDE_EFFECTS);
433:       assertEquals(4095, Node.COLUMN_MASK);
434:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
435:       assertEquals(55, Node.INFERRED_FUNCTION);
436:       assertEquals(52, Node.LENGTH);
437:       assertEquals(37, Node.OPT_ARG_NAME);
438:       assertEquals(8, Node.FLAG_NO_THROWS);
439:       assertEquals(48, Node.DIRECTIVES);
440:       assertEquals(56, Node.CHANGE_TIME);
441:       assertEquals(36, Node.QUOTED_PROP);
442:       assertEquals(57, Node.REFLECTED_OBJECT);
443:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
444:       
445:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
446:       assertNotNull(node_SideEffectFlags0);
447:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
448:       assertEquals(0, node_SideEffectFlags0.valueOf());
449:       
450:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
451:       assertNotNull(node_SideEffectFlags1);
452:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
453:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
454:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
455:       assertEquals(0, node_SideEffectFlags0.valueOf());
456:       assertEquals(0, node_SideEffectFlags1.valueOf());
457:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
458:       
459:       Iterable<Node> iterable0 = node0.children();
460:       assertFalse(iterable0.contains(node0));
461:       assertNotNull(iterable0);
462:       assertFalse(node0.isObjectLit());
463:       assertFalse(node0.isNot());
464:       assertFalse(node0.isWith());
465:       assertFalse(node0.isInstanceOf());
466:       assertFalse(node0.isScript());
467:       assertFalse(node0.isThis());
468:       assertFalse(node0.isGetProp());
469:       assertFalse(node0.isComma());
470:       assertFalse(node0.isThrow());
471:       assertFalse(node0.isCast());
472:       assertFalse(node0.hasOneChild());
473:       assertFalse(node0.isFalse());
474:       assertFalse(node0.isSwitch());
475:       assertFalse(node0.isNumber());
476:       assertEquals((-1), node0.getCharno());
477:       assertEquals((-1), node0.getSourcePosition());
478:       assertFalse(node0.isLabelName());
479:       assertFalse(node0.isAnd());
480:       assertFalse(node0.isOr());
481:       assertFalse(node0.isTypeOf());
482:       assertFalse(node0.hasChildren());
483:       assertFalse(node0.isNew());
484:       assertFalse(node0.isDec());
485:       assertFalse(node0.isAssignAdd());
486:       assertFalse(node0.isDo());
487:       assertFalse(node0.isLabel());
488:       assertFalse(node0.isReturn());
489:       assertFalse(node0.isWhile());
490:       assertFalse(node0.isCall());
491:       assertFalse(node0.isAdd());
492:       assertFalse(node0.isEmpty());
493:       assertFalse(node0.isAssign());
494:       assertFalse(node0.isGetElem());
495:       assertFalse(node0.isNull());
496:       assertFalse(node0.isTrue());
497:       assertFalse(node0.isExprResult());
498:       assertFalse(node0.isBreak());
499:       assertFalse(node0.isDelProp());
500:       assertFalse(node0.isVoid());
501:       assertFalse(node0.isName());
502:       assertEquals(0, node0.getChildCount());
503:       assertFalse(node0.isCatch());
504:       assertFalse(node0.isRegExp());
505:       assertFalse(node0.isSetterDef());
506:       assertFalse(node0.isFunction());
507:       assertFalse(node0.isTry());
508:       assertEquals(40, node0.getType());
509:       assertFalse(node0.isDefaultCase());
510:       assertFalse(node0.isVar());
511:       assertFalse(node0.isArrayLit());
512:       assertFalse(node0.isGetterDef());
513:       assertFalse(node0.isDebugger());
514:       assertFalse(node0.isStringKey());
515:       assertFalse(node0.isParamList());
516:       assertFalse(node0.hasMoreThanOneChild());
517:       assertFalse(node0.isCase());
518:       assertEquals((-1), node0.getLineno());
519:       assertFalse(node0.isContinue());
520:       assertFalse(node0.isIn());
521:       assertFalse(node0.isInc());
522:       assertFalse(node0.isFor());
523:       assertFalse(node0.isBlock());
524:       assertTrue(node0.isString());
525:       assertFalse(node0.isHook());
526:       assertFalse(node0.isNE());
527:       assertFalse(node0.isIf());
528:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
529:       assertEquals(50, Node.FREE_CALL);
530:       assertEquals(39, Node.EMPTY_BLOCK);
531:       assertEquals(40, Node.ORIGINALNAME_PROP);
532:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
533:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
534:       assertEquals(57, Node.LAST_PROP);
535:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
536:       assertEquals(30, Node.VAR_ARGS_NAME);
537:       assertEquals(1, Node.DECR_FLAG);
538:       assertEquals(43, Node.IS_CONSTANT_NAME);
539:       assertEquals(51, Node.STATIC_SOURCE_FILE);
540:       assertEquals(46, Node.IS_NAMESPACE);
541:       assertEquals(54, Node.SLASH_V);
542:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
543:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
544:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
545:       assertEquals(29, Node.JSDOC_INFO_PROP);
546:       assertEquals(53, Node.INPUT_ID);
547:       assertEquals(32, Node.INCRDECR_PROP);
548:       assertEquals(2, Node.POST_FLAG);
549:       assertEquals(12, Node.COLUMN_BITS);
550:       assertEquals(47, Node.IS_DISPATCHER);
551:       assertEquals(49, Node.DIRECT_EVAL);
552:       assertEquals(15, Node.NO_SIDE_EFFECTS);
553:       assertEquals(4095, Node.COLUMN_MASK);
554:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
555:       assertEquals(55, Node.INFERRED_FUNCTION);
556:       assertEquals(52, Node.LENGTH);
557:       assertEquals(37, Node.OPT_ARG_NAME);
558:       assertEquals(8, Node.FLAG_NO_THROWS);
559:       assertEquals(48, Node.DIRECTIVES);
560:       assertEquals(56, Node.CHANGE_TIME);
561:       assertEquals(36, Node.QUOTED_PROP);
562:       assertEquals(57, Node.REFLECTED_OBJECT);
563:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
564:       
565:       boolean boolean0 = node0.isVoid();
566:       assertFalse(boolean0);
567:       assertFalse(node0.isObjectLit());
568:       assertFalse(node0.isNot());
569:       assertFalse(node0.isWith());
570:       assertFalse(node0.isInstanceOf());
571:       assertFalse(node0.isScript());
572:       assertFalse(node0.isThis());
573:       assertFalse(node0.isGetProp());
574:       assertFalse(node0.isComma());
575:       assertFalse(node0.isThrow());
576:       assertFalse(node0.isCast());
577:       assertFalse(node0.hasOneChild());
578:       assertFalse(node0.isFalse());
579:       assertFalse(node0.isSwitch());
580:       assertFalse(node0.isNumber());
581:       assertEquals((-1), node0.getCharno());
582:       assertEquals((-1), node0.getSourcePosition());
583:       assertFalse(node0.isLabelName());
584:       assertFalse(node0.isAnd());
585:       assertFalse(node0.isOr());
586:       assertFalse(node0.isTypeOf());
587:       assertFalse(node0.hasChildren());
588:       assertFalse(node0.isNew());
589:       assertFalse(node0.isDec());
590:       assertFalse(node0.isAssignAdd());
591:       assertFalse(node0.isDo());
592:       assertFalse(node0.isLabel());
593:       assertFalse(node0.isReturn());
594:       assertFalse(node0.isWhile());
595:       assertFalse(node0.isCall());
596:       assertFalse(node0.isAdd());
597:       assertFalse(node0.isEmpty());
598:       assertFalse(node0.isAssign());
599:       assertFalse(node0.isGetElem());
600:       assertFalse(node0.isNull());
601:       assertFalse(node0.isTrue());
602:       assertFalse(node0.isExprResult());
603:       assertFalse(node0.isBreak());
604:       assertFalse(node0.isDelProp());
605:       assertFalse(node0.isVoid());
606:       assertFalse(node0.isName());
607:       assertEquals(0, node0.getChildCount());
608:       assertFalse(node0.isCatch());
609:       assertFalse(node0.isRegExp());
610:       assertFalse(node0.isSetterDef());
611:       assertFalse(node0.isFunction());
612:       assertFalse(node0.isTry());
613:       assertEquals(40, node0.getType());
614:       assertFalse(node0.isDefaultCase());
615:       assertFalse(node0.isVar());
616:       assertFalse(node0.isArrayLit());
617:       assertFalse(node0.isGetterDef());
618:       assertFalse(node0.isDebugger());
619:       assertFalse(node0.isStringKey());
620:       assertFalse(node0.isParamList());
621:       assertFalse(node0.hasMoreThanOneChild());
622:       assertFalse(node0.isCase());
623:       assertEquals((-1), node0.getLineno());
624:       assertFalse(node0.isContinue());
625:       assertFalse(node0.isIn());
626:       assertFalse(node0.isInc());
627:       assertFalse(node0.isFor());
628:       assertFalse(node0.isBlock());
629:       assertTrue(node0.isString());
630:       assertFalse(node0.isHook());
631:       assertFalse(node0.isNE());
632:       assertFalse(node0.isIf());
633:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
634:       assertEquals(50, Node.FREE_CALL);
635:       assertEquals(39, Node.EMPTY_BLOCK);
636:       assertEquals(40, Node.ORIGINALNAME_PROP);
637:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
638:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
639:       assertEquals(57, Node.LAST_PROP);
640:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
641:       assertEquals(30, Node.VAR_ARGS_NAME);
642:       assertEquals(1, Node.DECR_FLAG);
643:       assertEquals(43, Node.IS_CONSTANT_NAME);
644:       assertEquals(51, Node.STATIC_SOURCE_FILE);
645:       assertEquals(46, Node.IS_NAMESPACE);
646:       assertEquals(54, Node.SLASH_V);
647:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
648:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
649:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
650:       assertEquals(29, Node.JSDOC_INFO_PROP);
651:       assertEquals(53, Node.INPUT_ID);
652:       assertEquals(32, Node.INCRDECR_PROP);
653:       assertEquals(2, Node.POST_FLAG);
654:       assertEquals(12, Node.COLUMN_BITS);
655:       assertEquals(47, Node.IS_DISPATCHER);
656:       assertEquals(49, Node.DIRECT_EVAL);
657:       assertEquals(15, Node.NO_SIDE_EFFECTS);
658:       assertEquals(4095, Node.COLUMN_MASK);
659:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
660:       assertEquals(55, Node.INFERRED_FUNCTION);
661:       assertEquals(52, Node.LENGTH);
662:       assertEquals(37, Node.OPT_ARG_NAME);
663:       assertEquals(8, Node.FLAG_NO_THROWS);
664:       assertEquals(48, Node.DIRECTIVES);
665:       assertEquals(56, Node.CHANGE_TIME);
666:       assertEquals(36, Node.QUOTED_PROP);
667:       assertEquals(57, Node.REFLECTED_OBJECT);
668:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
669:       
670:       boolean boolean1 = node0.isDebugger();
671:       assertFalse(boolean1);
672:       assertTrue(boolean1 == boolean0);
673:       assertFalse(node0.isObjectLit());
674:       assertFalse(node0.isNot());
675:       assertFalse(node0.isWith());
676:       assertFalse(node0.isInstanceOf());
677:       assertFalse(node0.isScript());
678:       assertFalse(node0.isThis());
679:       assertFalse(node0.isGetProp());
680:       assertFalse(node0.isComma());
681:       assertFalse(node0.isThrow());
682:       assertFalse(node0.isCast());
683:       assertFalse(node0.hasOneChild());
684:       assertFalse(node0.isFalse());
685:       assertFalse(node0.isSwitch());
686:       assertFalse(node0.isNumber());
687:       assertEquals((-1), node0.getCharno());
688:       assertEquals((-1), node0.getSourcePosition());
689:       assertFalse(node0.isLabelName());
690:       assertFalse(node0.isAnd());
691:       assertFalse(node0.isOr());
692:       assertFalse(node0.isTypeOf());
693:       assertFalse(node0.hasChildren());
694:       assertFalse(node0.isNew());
695:       assertFalse(node0.isDec());
696:       assertFalse(node0.isAssignAdd());
697:       assertFalse(node0.isDo());
698:       assertFalse(node0.isLabel());
699:       assertFalse(node0.isReturn());
700:       assertFalse(node0.isWhile());
701:       assertFalse(node0.isCall());
702:       assertFalse(node0.isAdd());
703:       assertFalse(node0.isEmpty());
704:       assertFalse(node0.isAssign());
705:       assertFalse(node0.isGetElem());
706:       assertFalse(node0.isNull());
707:       assertFalse(node0.isTrue());
708:       assertFalse(node0.isExprResult());
709:       assertFalse(node0.isBreak());
710:       assertFalse(node0.isDelProp());
711:       assertFalse(node0.isVoid());
712:       assertFalse(node0.isName());
713:       assertEquals(0, node0.getChildCount());
714:       assertFalse(node0.isCatch());
715:       assertFalse(node0.isRegExp());
716:       assertFalse(node0.isSetterDef());
717:       assertFalse(node0.isFunction());
718:       assertFalse(node0.isTry());
719:       assertEquals(40, node0.getType());
720:       assertFalse(node0.isDefaultCase());
721:       assertFalse(node0.isVar());
722:       assertFalse(node0.isArrayLit());
723:       assertFalse(node0.isGetterDef());
724:       assertFalse(node0.isDebugger());
725:       assertFalse(node0.isStringKey());
726:       assertFalse(node0.isParamList());
727:       assertFalse(node0.hasMoreThanOneChild());
728:       assertFalse(node0.isCase());
729:       assertEquals((-1), node0.getLineno());
730:       assertFalse(node0.isContinue());
731:       assertFalse(node0.isIn());
732:       assertFalse(node0.isInc());
733:       assertFalse(node0.isFor());
734:       assertFalse(node0.isBlock());
735:       assertTrue(node0.isString());
736:       assertFalse(node0.isHook());
737:       assertFalse(node0.isNE());
738:       assertFalse(node0.isIf());
739:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
740:       assertEquals(50, Node.FREE_CALL);
741:       assertEquals(39, Node.EMPTY_BLOCK);
742:       assertEquals(40, Node.ORIGINALNAME_PROP);
743:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
744:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
745:       assertEquals(57, Node.LAST_PROP);
746:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
747:       assertEquals(30, Node.VAR_ARGS_NAME);
748:       assertEquals(1, Node.DECR_FLAG);
749:       assertEquals(43, Node.IS_CONSTANT_NAME);
750:       assertEquals(51, Node.STATIC_SOURCE_FILE);
751:       assertEquals(46, Node.IS_NAMESPACE);
752:       assertEquals(54, Node.SLASH_V);
753:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
754:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
755:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
756:       assertEquals(29, Node.JSDOC_INFO_PROP);
757:       assertEquals(53, Node.INPUT_ID);
758:       assertEquals(32, Node.INCRDECR_PROP);
759:       assertEquals(2, Node.POST_FLAG);
760:       assertEquals(12, Node.COLUMN_BITS);
761:       assertEquals(47, Node.IS_DISPATCHER);
762:       assertEquals(49, Node.DIRECT_EVAL);
763:       assertEquals(15, Node.NO_SIDE_EFFECTS);
764:       assertEquals(4095, Node.COLUMN_MASK);
765:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
766:       assertEquals(55, Node.INFERRED_FUNCTION);
767:       assertEquals(52, Node.LENGTH);
768:       assertEquals(37, Node.OPT_ARG_NAME);
769:       assertEquals(8, Node.FLAG_NO_THROWS);
770:       assertEquals(48, Node.DIRECTIVES);
771:       assertEquals(56, Node.CHANGE_TIME);
772:       assertEquals(36, Node.QUOTED_PROP);
773:       assertEquals(57, Node.REFLECTED_OBJECT);
774:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
775:       
776:       boolean boolean2 = node0.isCall();
777:       assertFalse(boolean2);
778:       assertTrue(boolean2 == boolean0);
779:       assertTrue(boolean2 == boolean1);
780:       assertFalse(node0.isObjectLit());
781:       assertFalse(node0.isNot());
782:       assertFalse(node0.isWith());
783:       assertFalse(node0.isInstanceOf());
784:       assertFalse(node0.isScript());
785:       assertFalse(node0.isThis());
786:       assertFalse(node0.isGetProp());
787:       assertFalse(node0.isComma());
788:       assertFalse(node0.isThrow());
789:       assertFalse(node0.isCast());
790:       assertFalse(node0.hasOneChild());
791:       assertFalse(node0.isFalse());
792:       assertFalse(node0.isSwitch());
793:       assertFalse(node0.isNumber());
794:       assertEquals((-1), node0.getCharno());
795:       assertEquals((-1), node0.getSourcePosition());
796:       assertFalse(node0.isLabelName());
797:       assertFalse(node0.isAnd());
798:       assertFalse(node0.isOr());
799:       assertFalse(node0.isTypeOf());
800:       assertFalse(node0.hasChildren());
801:       assertFalse(node0.isNew());
802:       assertFalse(node0.isDec());
803:       assertFalse(node0.isAssignAdd());
804:       assertFalse(node0.isDo());
805:       assertFalse(node0.isLabel());
806:       assertFalse(node0.isReturn());
807:       assertFalse(node0.isWhile());
808:       assertFalse(node0.isCall());
809:       assertFalse(node0.isAdd());
810:       assertFalse(node0.isEmpty());
811:       assertFalse(node0.isAssign());
812:       assertFalse(node0.isGetElem());
813:       assertFalse(node0.isNull());
814:       assertFalse(node0.isTrue());
815:       assertFalse(node0.isExprResult());
816:       assertFalse(node0.isBreak());
817:       assertFalse(node0.isDelProp());
818:       assertFalse(node0.isVoid());
819:       assertFalse(node0.isName());
820:       assertEquals(0, node0.getChildCount());
821:       assertFalse(node0.isCatch());
822:       assertFalse(node0.isRegExp());
823:       assertFalse(node0.isSetterDef());
824:       assertFalse(node0.isFunction());
825:       assertFalse(node0.isTry());
826:       assertEquals(40, node0.getType());
827:       assertFalse(node0.isDefaultCase());
828:       assertFalse(node0.isVar());
829:       assertFalse(node0.isArrayLit());
830:       assertFalse(node0.isGetterDef());
831:       assertFalse(node0.isDebugger());
832:       assertFalse(node0.isStringKey());
833:       assertFalse(node0.isParamList());
834:       assertFalse(node0.hasMoreThanOneChild());
835:       assertFalse(node0.isCase());
836:       assertEquals((-1), node0.getLineno());
837:       assertFalse(node0.isContinue());
838:       assertFalse(node0.isIn());
839:       assertFalse(node0.isInc());
840:       assertFalse(node0.isFor());
841:       assertFalse(node0.isBlock());
842:       assertTrue(node0.isString());
843:       assertFalse(node0.isHook());
844:       assertFalse(node0.isNE());
845:       assertFalse(node0.isIf());
846:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
847:       assertEquals(50, Node.FREE_CALL);
848:       assertEquals(39, Node.EMPTY_BLOCK);
849:       assertEquals(40, Node.ORIGINALNAME_PROP);
850:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
851:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
852:       assertEquals(57, Node.LAST_PROP);
853:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
854:       assertEquals(30, Node.VAR_ARGS_NAME);
855:       assertEquals(1, Node.DECR_FLAG);
856:       assertEquals(43, Node.IS_CONSTANT_NAME);
857:       assertEquals(51, Node.STATIC_SOURCE_FILE);
858:       assertEquals(46, Node.IS_NAMESPACE);
859:       assertEquals(54, Node.SLASH_V);
860:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
861:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
862:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
863:       assertEquals(29, Node.JSDOC_INFO_PROP);
864:       assertEquals(53, Node.INPUT_ID);
865:       assertEquals(32, Node.INCRDECR_PROP);
866:       assertEquals(2, Node.POST_FLAG);
867:       assertEquals(12, Node.COLUMN_BITS);
868:       assertEquals(47, Node.IS_DISPATCHER);
869:       assertEquals(49, Node.DIRECT_EVAL);
870:       assertEquals(15, Node.NO_SIDE_EFFECTS);
871:       assertEquals(4095, Node.COLUMN_MASK);
872:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
873:       assertEquals(55, Node.INFERRED_FUNCTION);
874:       assertEquals(52, Node.LENGTH);
875:       assertEquals(37, Node.OPT_ARG_NAME);
876:       assertEquals(8, Node.FLAG_NO_THROWS);
877:       assertEquals(48, Node.DIRECTIVES);
878:       assertEquals(56, Node.CHANGE_TIME);
879:       assertEquals(36, Node.QUOTED_PROP);
880:       assertEquals(57, Node.REFLECTED_OBJECT);
881:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
882:       
883:       boolean boolean3 = node0.isString();
884:       assertTrue(boolean3);
885:       assertFalse(boolean3 == boolean2);
886:       assertFalse(boolean3 == boolean0);
887:       assertFalse(boolean3 == boolean1);
888:       assertFalse(node0.isObjectLit());
889:       assertFalse(node0.isNot());
890:       assertFalse(node0.isWith());
891:       assertFalse(node0.isInstanceOf());
892:       assertFalse(node0.isScript());
893:       assertFalse(node0.isThis());
894:       assertFalse(node0.isGetProp());
895:       assertFalse(node0.isComma());
896:       assertFalse(node0.isThrow());
897:       assertFalse(node0.isCast());
898:       assertFalse(node0.hasOneChild());
899:       assertFalse(node0.isFalse());
900:       assertFalse(node0.isSwitch());
901:       assertFalse(node0.isNumber());
902:       assertEquals((-1), node0.getCharno());
903:       assertEquals((-1), node0.getSourcePosition());
904:       assertFalse(node0.isLabelName());
905:       assertFalse(node0.isAnd());
906:       assertFalse(node0.isOr());
907:       assertFalse(node0.isTypeOf());
908:       assertFalse(node0.hasChildren());
909:       assertFalse(node0.isNew());
910:       assertFalse(node0.isDec());
911:       assertFalse(node0.isAssignAdd());
912:       assertFalse(node0.isDo());
913:       assertFalse(node0.isLabel());
914:       assertFalse(node0.isReturn());
915:       assertFalse(node0.isWhile());
916:       assertFalse(node0.isCall());
917:       assertFalse(node0.isAdd());
918:       assertFalse(node0.isEmpty());
919:       assertFalse(node0.isAssign());
920:       assertFalse(node0.isGetElem());
921:       assertFalse(node0.isNull());
922:       assertFalse(node0.isTrue());
923:       assertFalse(node0.isExprResult());
924:       assertFalse(node0.isBreak());
925:       assertFalse(node0.isDelProp());
926:       assertFalse(node0.isVoid());
927:       assertFalse(node0.isName());
928:       assertEquals(0, node0.getChildCount());
929:       assertFalse(node0.isCatch());
930:       assertFalse(node0.isRegExp());
931:       assertFalse(node0.isSetterDef());
932:       assertFalse(node0.isFunction());
933:       assertFalse(node0.isTry());
934:       assertEquals(40, node0.getType());
935:       assertFalse(node0.isDefaultCase());
936:       assertFalse(node0.isVar());
937:       assertFalse(node0.isArrayLit());
938:       assertFalse(node0.isGetterDef());
939:       assertFalse(node0.isDebugger());
940:       assertFalse(node0.isStringKey());
941:       assertFalse(node0.isParamList());
942:       assertFalse(node0.hasMoreThanOneChild());
943:       assertFalse(node0.isCase());
944:       assertEquals((-1), node0.getLineno());
945:       assertFalse(node0.isContinue());
946:       assertFalse(node0.isIn());
947:       assertFalse(node0.isInc());
948:       assertFalse(node0.isFor());
949:       assertFalse(node0.isBlock());
950:       assertTrue(node0.isString());
951:       assertFalse(node0.isHook());
952:       assertFalse(node0.isNE());
953:       assertFalse(node0.isIf());
954:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
955:       assertEquals(50, Node.FREE_CALL);
956:       assertEquals(39, Node.EMPTY_BLOCK);
957:       assertEquals(40, Node.ORIGINALNAME_PROP);
958:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
959:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
960:       assertEquals(57, Node.LAST_PROP);
961:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
962:       assertEquals(30, Node.VAR_ARGS_NAME);
963:       assertEquals(1, Node.DECR_FLAG);
964:       assertEquals(43, Node.IS_CONSTANT_NAME);
965:       assertEquals(51, Node.STATIC_SOURCE_FILE);
966:       assertEquals(46, Node.IS_NAMESPACE);
967:       assertEquals(54, Node.SLASH_V);
968:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
969:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
970:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
971:       assertEquals(29, Node.JSDOC_INFO_PROP);
972:       assertEquals(53, Node.INPUT_ID);
973:       assertEquals(32, Node.INCRDECR_PROP);
974:       assertEquals(2, Node.POST_FLAG);
975:       assertEquals(12, Node.COLUMN_BITS);
976:       assertEquals(47, Node.IS_DISPATCHER);
977:       assertEquals(49, Node.DIRECT_EVAL);
978:       assertEquals(15, Node.NO_SIDE_EFFECTS);
979:       assertEquals(4095, Node.COLUMN_MASK);
980:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
981:       assertEquals(55, Node.INFERRED_FUNCTION);
982:       assertEquals(52, Node.LENGTH);
983:       assertEquals(37, Node.OPT_ARG_NAME);
984:       assertEquals(8, Node.FLAG_NO_THROWS);
985:       assertEquals(48, Node.DIRECTIVES);
986:       assertEquals(56, Node.CHANGE_TIME);
987:       assertEquals(36, Node.QUOTED_PROP);
988:       assertEquals(57, Node.REFLECTED_OBJECT);
989:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
990:       
991:       boolean boolean4 = node0.isNull();
992:       assertFalse(boolean4);
993:       assertTrue(boolean4 == boolean2);
994:       assertFalse(boolean4 == boolean3);
995:       assertTrue(boolean4 == boolean0);
996:       assertTrue(boolean4 == boolean1);
997:       assertFalse(node0.isObjectLit());
998:       assertFalse(node0.isNot());
999:       assertFalse(node0.isWith());
1000:       assertFalse(node0.isInstanceOf());
1001:       assertFalse(node0.isScript());
1002:       assertFalse(node0.isThis());
1003:       assertFalse(node0.isGetProp());
1004:       assertFalse(node0.isComma());
1005:       assertFalse(node0.isThrow());
1006:       assertFalse(node0.isCast());
1007:       assertFalse(node0.hasOneChild());
1008:       assertFalse(node0.isFalse());
1009:       assertFalse(node0.isSwitch());
1010:       assertFalse(node0.isNumber());
1011:       assertEquals((-1), node0.getCharno());
1012:       assertEquals((-1), node0.getSourcePosition());
1013:       assertFalse(node0.isLabelName());
1014:       assertFalse(node0.isAnd());
1015:       assertFalse(node0.isOr());
1016:       assertFalse(node0.isTypeOf());
1017:       assertFalse(node0.hasChildren());
1018:       assertFalse(node0.isNew());
1019:       assertFalse(node0.isDec());
1020:       assertFalse(node0.isAssignAdd());
1021:       assertFalse(node0.isDo());
1022:       assertFalse(node0.isLabel());
1023:       assertFalse(node0.isReturn());
1024:       assertFalse(node0.isWhile());
1025:       assertFalse(node0.isCall());
1026:       assertFalse(node0.isAdd());
1027:       assertFalse(node0.isEmpty());
1028:       assertFalse(node0.isAssign());
1029:       assertFalse(node0.isGetElem());
1030:       assertFalse(node0.isNull());
1031:       assertFalse(node0.isTrue());
1032:       assertFalse(node0.isExprResult());
1033:       assertFalse(node0.isBreak());
1034:       assertFalse(node0.isDelProp());
1035:       assertFalse(node0.isVoid());
1036:       assertFalse(node0.isName());
1037:       assertEquals(0, node0.getChildCount());
1038:       assertFalse(node0.isCatch());
1039:       assertFalse(node0.isRegExp());
1040:       assertFalse(node0.isSetterDef());
1041:       assertFalse(node0.isFunction());
1042:       assertFalse(node0.isTry());
1043:       assertEquals(40, node0.getType());
1044:       assertFalse(node0.isDefaultCase());
1045:       assertFalse(node0.isVar());
1046:       assertFalse(node0.isArrayLit());
1047:       assertFalse(node0.isGetterDef());
1048:       assertFalse(node0.isDebugger());
1049:       assertFalse(node0.isStringKey());
1050:       assertFalse(node0.isParamList());
1051:       assertFalse(node0.hasMoreThanOneChild());
1052:       assertFalse(node0.isCase());
1053:       assertEquals((-1), node0.getLineno());
1054:       assertFalse(node0.isContinue());
1055:       assertFalse(node0.isIn());
1056:       assertFalse(node0.isInc());
1057:       assertFalse(node0.isFor());
1058:       assertFalse(node0.isBlock());
1059:       assertTrue(node0.isString());
1060:       assertFalse(node0.isHook());
1061:       assertFalse(node0.isNE());
1062:       assertFalse(node0.isIf());
1063:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1064:       assertEquals(50, Node.FREE_CALL);
1065:       assertEquals(39, Node.EMPTY_BLOCK);
1066:       assertEquals(40, Node.ORIGINALNAME_PROP);
1067:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1068:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1069:       assertEquals(57, Node.LAST_PROP);
1070:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1071:       assertEquals(30, Node.VAR_ARGS_NAME);
1072:       assertEquals(1, Node.DECR_FLAG);
1073:       assertEquals(43, Node.IS_CONSTANT_NAME);
1074:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1075:       assertEquals(46, Node.IS_NAMESPACE);
1076:       assertEquals(54, Node.SLASH_V);
1077:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1078:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1079:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1080:       assertEquals(29, Node.JSDOC_INFO_PROP);
1081:       assertEquals(53, Node.INPUT_ID);
1082:       assertEquals(32, Node.INCRDECR_PROP);
1083:       assertEquals(2, Node.POST_FLAG);
1084:       assertEquals(12, Node.COLUMN_BITS);
1085:       assertEquals(47, Node.IS_DISPATCHER);
1086:       assertEquals(49, Node.DIRECT_EVAL);
1087:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1088:       assertEquals(4095, Node.COLUMN_MASK);
1089:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1090:       assertEquals(55, Node.INFERRED_FUNCTION);
1091:       assertEquals(52, Node.LENGTH);
1092:       assertEquals(37, Node.OPT_ARG_NAME);
1093:       assertEquals(8, Node.FLAG_NO_THROWS);
1094:       assertEquals(48, Node.DIRECTIVES);
1095:       assertEquals(56, Node.CHANGE_TIME);
1096:       assertEquals(36, Node.QUOTED_PROP);
1097:       assertEquals(57, Node.REFLECTED_OBJECT);
1098:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1099:       
1100:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
1101:       assertNotNull(simpleErrorReporter0);
1102:       
1103:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
1104:       assertNotNull(jSTypeRegistry0);
1105:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1106:       
1107:       JSType[] jSTypeArray0 = new JSType[1];
1108:       // Undeclared exception!
1109:       try { 
1110:         jSTypeRegistry0.createFunctionTypeWithNewReturnType((FunctionType) null, (JSType) null);
1111:         fail("Expecting exception: NullPointerException");
1112:       
1113:       } catch(NullPointerException e) {
1114:          //
1115:          // no message in exception (getMessage() returned null)
1116:          //
1117:          verifyException("com.google.javascript.rhino.jstype.FunctionBuilder", e);
1118:       }
1119:   }
1120: }
RegularFileObject[/tmp/EvoSuite_135_1628159319324/com/google/javascript/rhino/Node_135_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:39 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_135_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_135_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_135_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.NamedType",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.JSDocInfo$Marker",
356:       "com.google.common.collect.ImmutableSet",
357:       "com.google.common.collect.EmptyImmutableSet",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 10:28:39.548 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("change_time");
assertNotNull(node0);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

node0.setCharno(0);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

node0.setLength(1953);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

int int0 = node0.getChangeTime();
assertEquals(0, int0);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

boolean boolean0 = node0.isVoid();
assertFalse(boolean0);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

boolean boolean1 = node0.isDebugger();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

boolean boolean2 = node0.isCall();
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

boolean boolean3 = node0.isString();
assertTrue(boolean3);
assertFalse(boolean3 == boolean2);
assertFalse(boolean3 == boolean0);
assertFalse(boolean3 == boolean1);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

boolean boolean4 = node0.isNull();
assertFalse(boolean4);
assertTrue(boolean4 == boolean2);
assertFalse(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

JSType[] jSTypeArray0 = new JSType[1];
jSTypeRegistry0.createFunctionTypeWithNewReturnType((FunctionType) null, (JSType) null);

[MASTER] 10:28:41.403 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_146_1628159320995/com/google/javascript/rhino/Node_146_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_146_1628159320995/com/google/javascript/rhino/Node_146_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:41.403 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:41.403 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:41.404 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2037
[MASTER] 10:28:41.405 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_146_1628159320995/com/google/javascript/rhino/Node_146_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:40 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.mock.java.io.MockPrintStream;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_146_tmp__ESTest extends Node_146_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString("");
23:       assertNotNull(node0);
24:       assertFalse(node0.isScript());
25:       assertFalse(node0.isExprResult());
26:       assertFalse(node0.isWith());
27:       assertFalse(node0.isNot());
28:       assertFalse(node0.isObjectLit());
29:       assertFalse(node0.isInstanceOf());
30:       assertFalse(node0.isCast());
31:       assertFalse(node0.isGetElem());
32:       assertFalse(node0.isAnd());
33:       assertFalse(node0.isLabelName());
34:       assertFalse(node0.isNumber());
35:       assertEquals((-1), node0.getSourcePosition());
36:       assertFalse(node0.isDec());
37:       assertFalse(node0.isBreak());
38:       assertFalse(node0.hasChildren());
39:       assertFalse(node0.isThis());
40:       assertFalse(node0.isComma());
41:       assertFalse(node0.isAssign());
42:       assertFalse(node0.isTypeOf());
43:       assertFalse(node0.hasOneChild());
44:       assertFalse(node0.isHook());
45:       assertFalse(node0.isReturn());
46:       assertFalse(node0.isGetProp());
47:       assertFalse(node0.isInc());
48:       assertFalse(node0.isBlock());
49:       assertFalse(node0.isContinue());
50:       assertFalse(node0.hasMoreThanOneChild());
51:       assertEquals((-1), node0.getLineno());
52:       assertFalse(node0.isIf());
53:       assertFalse(node0.isSetterDef());
54:       assertFalse(node0.isNE());
55:       assertFalse(node0.isFalse());
56:       assertFalse(node0.isIn());
57:       assertFalse(node0.isThrow());
58:       assertFalse(node0.isDefaultCase());
59:       assertFalse(node0.isTrue());
60:       assertEquals(40, node0.getType());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isFunction());
63:       assertFalse(node0.isRegExp());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isCatch());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.isVoid());
68:       assertFalse(node0.isParamList());
69:       assertFalse(node0.isFor());
70:       assertFalse(node0.isGetterDef());
71:       assertFalse(node0.isCase());
72:       assertFalse(node0.isTry());
73:       assertTrue(node0.isString());
74:       assertFalse(node0.isWhile());
75:       assertEquals((-1), node0.getCharno());
76:       assertFalse(node0.isCall());
77:       assertFalse(node0.isStringKey());
78:       assertFalse(node0.isSwitch());
79:       assertFalse(node0.isName());
80:       assertFalse(node0.isNull());
81:       assertFalse(node0.isEmpty());
82:       assertFalse(node0.isLabel());
83:       assertFalse(node0.isOr());
84:       assertEquals(0, node0.getChildCount());
85:       assertFalse(node0.isVar());
86:       assertFalse(node0.isAdd());
87:       assertFalse(node0.isNew());
88:       assertFalse(node0.isAssignAdd());
89:       assertFalse(node0.isDo());
90:       assertEquals(48, Node.DIRECTIVES);
91:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
92:       assertEquals(39, Node.EMPTY_BLOCK);
93:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
94:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
95:       assertEquals(50, Node.FREE_CALL);
96:       assertEquals(4095, Node.COLUMN_MASK);
97:       assertEquals(8, Node.FLAG_NO_THROWS);
98:       assertEquals(40, Node.ORIGINALNAME_PROP);
99:       assertEquals(57, Node.REFLECTED_OBJECT);
100:       assertEquals(43, Node.IS_CONSTANT_NAME);
101:       assertEquals(54, Node.SLASH_V);
102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
103:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
104:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
105:       assertEquals(1, Node.DECR_FLAG);
106:       assertEquals(12, Node.COLUMN_BITS);
107:       assertEquals(32, Node.INCRDECR_PROP);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
110:       assertEquals(47, Node.IS_DISPATCHER);
111:       assertEquals(51, Node.STATIC_SOURCE_FILE);
112:       assertEquals(2, Node.POST_FLAG);
113:       assertEquals(46, Node.IS_NAMESPACE);
114:       assertEquals(56, Node.CHANGE_TIME);
115:       assertEquals(49, Node.DIRECT_EVAL);
116:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
118:       assertEquals(53, Node.INPUT_ID);
119:       assertEquals(36, Node.QUOTED_PROP);
120:       assertEquals(30, Node.VAR_ARGS_NAME);
121:       assertEquals(52, Node.LENGTH);
122:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
123:       assertEquals(55, Node.INFERRED_FUNCTION);
124:       assertEquals(29, Node.JSDOC_INFO_PROP);
125:       assertEquals(57, Node.LAST_PROP);
126:       
127:       boolean boolean0 = node0.isWhile();
128:       assertFalse(boolean0);
129:       assertFalse(node0.isScript());
130:       assertFalse(node0.isExprResult());
131:       assertFalse(node0.isWith());
132:       assertFalse(node0.isNot());
133:       assertFalse(node0.isObjectLit());
134:       assertFalse(node0.isInstanceOf());
135:       assertFalse(node0.isCast());
136:       assertFalse(node0.isGetElem());
137:       assertFalse(node0.isAnd());
138:       assertFalse(node0.isLabelName());
139:       assertFalse(node0.isNumber());
140:       assertEquals((-1), node0.getSourcePosition());
141:       assertFalse(node0.isDec());
142:       assertFalse(node0.isBreak());
143:       assertFalse(node0.hasChildren());
144:       assertFalse(node0.isThis());
145:       assertFalse(node0.isComma());
146:       assertFalse(node0.isAssign());
147:       assertFalse(node0.isTypeOf());
148:       assertFalse(node0.hasOneChild());
149:       assertFalse(node0.isHook());
150:       assertFalse(node0.isReturn());
151:       assertFalse(node0.isGetProp());
152:       assertFalse(node0.isInc());
153:       assertFalse(node0.isBlock());
154:       assertFalse(node0.isContinue());
155:       assertFalse(node0.hasMoreThanOneChild());
156:       assertEquals((-1), node0.getLineno());
157:       assertFalse(node0.isIf());
158:       assertFalse(node0.isSetterDef());
159:       assertFalse(node0.isNE());
160:       assertFalse(node0.isFalse());
161:       assertFalse(node0.isIn());
162:       assertFalse(node0.isThrow());
163:       assertFalse(node0.isDefaultCase());
164:       assertFalse(node0.isTrue());
165:       assertEquals(40, node0.getType());
166:       assertFalse(node0.isDebugger());
167:       assertFalse(node0.isFunction());
168:       assertFalse(node0.isRegExp());
169:       assertFalse(node0.isArrayLit());
170:       assertFalse(node0.isCatch());
171:       assertFalse(node0.isDelProp());
172:       assertFalse(node0.isVoid());
173:       assertFalse(node0.isParamList());
174:       assertFalse(node0.isFor());
175:       assertFalse(node0.isGetterDef());
176:       assertFalse(node0.isCase());
177:       assertFalse(node0.isTry());
178:       assertTrue(node0.isString());
179:       assertFalse(node0.isWhile());
180:       assertEquals((-1), node0.getCharno());
181:       assertFalse(node0.isCall());
182:       assertFalse(node0.isStringKey());
183:       assertFalse(node0.isSwitch());
184:       assertFalse(node0.isName());
185:       assertFalse(node0.isNull());
186:       assertFalse(node0.isEmpty());
187:       assertFalse(node0.isLabel());
188:       assertFalse(node0.isOr());
189:       assertEquals(0, node0.getChildCount());
190:       assertFalse(node0.isVar());
191:       assertFalse(node0.isAdd());
192:       assertFalse(node0.isNew());
193:       assertFalse(node0.isAssignAdd());
194:       assertFalse(node0.isDo());
195:       assertEquals(48, Node.DIRECTIVES);
196:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
197:       assertEquals(39, Node.EMPTY_BLOCK);
198:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
199:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
200:       assertEquals(50, Node.FREE_CALL);
201:       assertEquals(4095, Node.COLUMN_MASK);
202:       assertEquals(8, Node.FLAG_NO_THROWS);
203:       assertEquals(40, Node.ORIGINALNAME_PROP);
204:       assertEquals(57, Node.REFLECTED_OBJECT);
205:       assertEquals(43, Node.IS_CONSTANT_NAME);
206:       assertEquals(54, Node.SLASH_V);
207:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
208:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
209:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
210:       assertEquals(1, Node.DECR_FLAG);
211:       assertEquals(12, Node.COLUMN_BITS);
212:       assertEquals(32, Node.INCRDECR_PROP);
213:       assertEquals(37, Node.OPT_ARG_NAME);
214:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
215:       assertEquals(47, Node.IS_DISPATCHER);
216:       assertEquals(51, Node.STATIC_SOURCE_FILE);
217:       assertEquals(2, Node.POST_FLAG);
218:       assertEquals(46, Node.IS_NAMESPACE);
219:       assertEquals(56, Node.CHANGE_TIME);
220:       assertEquals(49, Node.DIRECT_EVAL);
221:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
222:       assertEquals(15, Node.NO_SIDE_EFFECTS);
223:       assertEquals(53, Node.INPUT_ID);
224:       assertEquals(36, Node.QUOTED_PROP);
225:       assertEquals(30, Node.VAR_ARGS_NAME);
226:       assertEquals(52, Node.LENGTH);
227:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
228:       assertEquals(55, Node.INFERRED_FUNCTION);
229:       assertEquals(29, Node.JSDOC_INFO_PROP);
230:       assertEquals(57, Node.LAST_PROP);
231:       
232:       boolean boolean1 = node0.isTypeOf();
233:       assertFalse(boolean1);
234:       assertTrue(boolean1 == boolean0);
235:       assertFalse(node0.isScript());
236:       assertFalse(node0.isExprResult());
237:       assertFalse(node0.isWith());
238:       assertFalse(node0.isNot());
239:       assertFalse(node0.isObjectLit());
240:       assertFalse(node0.isInstanceOf());
241:       assertFalse(node0.isCast());
242:       assertFalse(node0.isGetElem());
243:       assertFalse(node0.isAnd());
244:       assertFalse(node0.isLabelName());
245:       assertFalse(node0.isNumber());
246:       assertEquals((-1), node0.getSourcePosition());
247:       assertFalse(node0.isDec());
248:       assertFalse(node0.isBreak());
249:       assertFalse(node0.hasChildren());
250:       assertFalse(node0.isThis());
251:       assertFalse(node0.isComma());
252:       assertFalse(node0.isAssign());
253:       assertFalse(node0.isTypeOf());
254:       assertFalse(node0.hasOneChild());
255:       assertFalse(node0.isHook());
256:       assertFalse(node0.isReturn());
257:       assertFalse(node0.isGetProp());
258:       assertFalse(node0.isInc());
259:       assertFalse(node0.isBlock());
260:       assertFalse(node0.isContinue());
261:       assertFalse(node0.hasMoreThanOneChild());
262:       assertEquals((-1), node0.getLineno());
263:       assertFalse(node0.isIf());
264:       assertFalse(node0.isSetterDef());
265:       assertFalse(node0.isNE());
266:       assertFalse(node0.isFalse());
267:       assertFalse(node0.isIn());
268:       assertFalse(node0.isThrow());
269:       assertFalse(node0.isDefaultCase());
270:       assertFalse(node0.isTrue());
271:       assertEquals(40, node0.getType());
272:       assertFalse(node0.isDebugger());
273:       assertFalse(node0.isFunction());
274:       assertFalse(node0.isRegExp());
275:       assertFalse(node0.isArrayLit());
276:       assertFalse(node0.isCatch());
277:       assertFalse(node0.isDelProp());
278:       assertFalse(node0.isVoid());
279:       assertFalse(node0.isParamList());
280:       assertFalse(node0.isFor());
281:       assertFalse(node0.isGetterDef());
282:       assertFalse(node0.isCase());
283:       assertFalse(node0.isTry());
284:       assertTrue(node0.isString());
285:       assertFalse(node0.isWhile());
286:       assertEquals((-1), node0.getCharno());
287:       assertFalse(node0.isCall());
288:       assertFalse(node0.isStringKey());
289:       assertFalse(node0.isSwitch());
290:       assertFalse(node0.isName());
291:       assertFalse(node0.isNull());
292:       assertFalse(node0.isEmpty());
293:       assertFalse(node0.isLabel());
294:       assertFalse(node0.isOr());
295:       assertEquals(0, node0.getChildCount());
296:       assertFalse(node0.isVar());
297:       assertFalse(node0.isAdd());
298:       assertFalse(node0.isNew());
299:       assertFalse(node0.isAssignAdd());
300:       assertFalse(node0.isDo());
301:       assertEquals(48, Node.DIRECTIVES);
302:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
303:       assertEquals(39, Node.EMPTY_BLOCK);
304:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
305:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
306:       assertEquals(50, Node.FREE_CALL);
307:       assertEquals(4095, Node.COLUMN_MASK);
308:       assertEquals(8, Node.FLAG_NO_THROWS);
309:       assertEquals(40, Node.ORIGINALNAME_PROP);
310:       assertEquals(57, Node.REFLECTED_OBJECT);
311:       assertEquals(43, Node.IS_CONSTANT_NAME);
312:       assertEquals(54, Node.SLASH_V);
313:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
314:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
315:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
316:       assertEquals(1, Node.DECR_FLAG);
317:       assertEquals(12, Node.COLUMN_BITS);
318:       assertEquals(32, Node.INCRDECR_PROP);
319:       assertEquals(37, Node.OPT_ARG_NAME);
320:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
321:       assertEquals(47, Node.IS_DISPATCHER);
322:       assertEquals(51, Node.STATIC_SOURCE_FILE);
323:       assertEquals(2, Node.POST_FLAG);
324:       assertEquals(46, Node.IS_NAMESPACE);
325:       assertEquals(56, Node.CHANGE_TIME);
326:       assertEquals(49, Node.DIRECT_EVAL);
327:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
328:       assertEquals(15, Node.NO_SIDE_EFFECTS);
329:       assertEquals(53, Node.INPUT_ID);
330:       assertEquals(36, Node.QUOTED_PROP);
331:       assertEquals(30, Node.VAR_ARGS_NAME);
332:       assertEquals(52, Node.LENGTH);
333:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
334:       assertEquals(55, Node.INFERRED_FUNCTION);
335:       assertEquals(29, Node.JSDOC_INFO_PROP);
336:       assertEquals(57, Node.LAST_PROP);
337:       
338:       boolean boolean2 = node0.isTypeOf();
339:       assertFalse(boolean2);
340:       assertTrue(boolean2 == boolean1);
341:       assertTrue(boolean2 == boolean0);
342:       assertFalse(node0.isScript());
343:       assertFalse(node0.isExprResult());
344:       assertFalse(node0.isWith());
345:       assertFalse(node0.isNot());
346:       assertFalse(node0.isObjectLit());
347:       assertFalse(node0.isInstanceOf());
348:       assertFalse(node0.isCast());
349:       assertFalse(node0.isGetElem());
350:       assertFalse(node0.isAnd());
351:       assertFalse(node0.isLabelName());
352:       assertFalse(node0.isNumber());
353:       assertEquals((-1), node0.getSourcePosition());
354:       assertFalse(node0.isDec());
355:       assertFalse(node0.isBreak());
356:       assertFalse(node0.hasChildren());
357:       assertFalse(node0.isThis());
358:       assertFalse(node0.isComma());
359:       assertFalse(node0.isAssign());
360:       assertFalse(node0.isTypeOf());
361:       assertFalse(node0.hasOneChild());
362:       assertFalse(node0.isHook());
363:       assertFalse(node0.isReturn());
364:       assertFalse(node0.isGetProp());
365:       assertFalse(node0.isInc());
366:       assertFalse(node0.isBlock());
367:       assertFalse(node0.isContinue());
368:       assertFalse(node0.hasMoreThanOneChild());
369:       assertEquals((-1), node0.getLineno());
370:       assertFalse(node0.isIf());
371:       assertFalse(node0.isSetterDef());
372:       assertFalse(node0.isNE());
373:       assertFalse(node0.isFalse());
374:       assertFalse(node0.isIn());
375:       assertFalse(node0.isThrow());
376:       assertFalse(node0.isDefaultCase());
377:       assertFalse(node0.isTrue());
378:       assertEquals(40, node0.getType());
379:       assertFalse(node0.isDebugger());
380:       assertFalse(node0.isFunction());
381:       assertFalse(node0.isRegExp());
382:       assertFalse(node0.isArrayLit());
383:       assertFalse(node0.isCatch());
384:       assertFalse(node0.isDelProp());
385:       assertFalse(node0.isVoid());
386:       assertFalse(node0.isParamList());
387:       assertFalse(node0.isFor());
388:       assertFalse(node0.isGetterDef());
389:       assertFalse(node0.isCase());
390:       assertFalse(node0.isTry());
391:       assertTrue(node0.isString());
392:       assertFalse(node0.isWhile());
393:       assertEquals((-1), node0.getCharno());
394:       assertFalse(node0.isCall());
395:       assertFalse(node0.isStringKey());
396:       assertFalse(node0.isSwitch());
397:       assertFalse(node0.isName());
398:       assertFalse(node0.isNull());
399:       assertFalse(node0.isEmpty());
400:       assertFalse(node0.isLabel());
401:       assertFalse(node0.isOr());
402:       assertEquals(0, node0.getChildCount());
403:       assertFalse(node0.isVar());
404:       assertFalse(node0.isAdd());
405:       assertFalse(node0.isNew());
406:       assertFalse(node0.isAssignAdd());
407:       assertFalse(node0.isDo());
408:       assertEquals(48, Node.DIRECTIVES);
409:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
410:       assertEquals(39, Node.EMPTY_BLOCK);
411:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
412:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
413:       assertEquals(50, Node.FREE_CALL);
414:       assertEquals(4095, Node.COLUMN_MASK);
415:       assertEquals(8, Node.FLAG_NO_THROWS);
416:       assertEquals(40, Node.ORIGINALNAME_PROP);
417:       assertEquals(57, Node.REFLECTED_OBJECT);
418:       assertEquals(43, Node.IS_CONSTANT_NAME);
419:       assertEquals(54, Node.SLASH_V);
420:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
421:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
422:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
423:       assertEquals(1, Node.DECR_FLAG);
424:       assertEquals(12, Node.COLUMN_BITS);
425:       assertEquals(32, Node.INCRDECR_PROP);
426:       assertEquals(37, Node.OPT_ARG_NAME);
427:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
428:       assertEquals(47, Node.IS_DISPATCHER);
429:       assertEquals(51, Node.STATIC_SOURCE_FILE);
430:       assertEquals(2, Node.POST_FLAG);
431:       assertEquals(46, Node.IS_NAMESPACE);
432:       assertEquals(56, Node.CHANGE_TIME);
433:       assertEquals(49, Node.DIRECT_EVAL);
434:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
435:       assertEquals(15, Node.NO_SIDE_EFFECTS);
436:       assertEquals(53, Node.INPUT_ID);
437:       assertEquals(36, Node.QUOTED_PROP);
438:       assertEquals(30, Node.VAR_ARGS_NAME);
439:       assertEquals(52, Node.LENGTH);
440:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
441:       assertEquals(55, Node.INFERRED_FUNCTION);
442:       assertEquals(29, Node.JSDOC_INFO_PROP);
443:       assertEquals(57, Node.LAST_PROP);
444:       
445:       boolean boolean3 = node0.isAssign();
446:       assertFalse(boolean3);
447:       assertTrue(boolean3 == boolean2);
448:       assertTrue(boolean3 == boolean1);
449:       assertTrue(boolean3 == boolean0);
450:       assertFalse(node0.isScript());
451:       assertFalse(node0.isExprResult());
452:       assertFalse(node0.isWith());
453:       assertFalse(node0.isNot());
454:       assertFalse(node0.isObjectLit());
455:       assertFalse(node0.isInstanceOf());
456:       assertFalse(node0.isCast());
457:       assertFalse(node0.isGetElem());
458:       assertFalse(node0.isAnd());
459:       assertFalse(node0.isLabelName());
460:       assertFalse(node0.isNumber());
461:       assertEquals((-1), node0.getSourcePosition());
462:       assertFalse(node0.isDec());
463:       assertFalse(node0.isBreak());
464:       assertFalse(node0.hasChildren());
465:       assertFalse(node0.isThis());
466:       assertFalse(node0.isComma());
467:       assertFalse(node0.isAssign());
468:       assertFalse(node0.isTypeOf());
469:       assertFalse(node0.hasOneChild());
470:       assertFalse(node0.isHook());
471:       assertFalse(node0.isReturn());
472:       assertFalse(node0.isGetProp());
473:       assertFalse(node0.isInc());
474:       assertFalse(node0.isBlock());
475:       assertFalse(node0.isContinue());
476:       assertFalse(node0.hasMoreThanOneChild());
477:       assertEquals((-1), node0.getLineno());
478:       assertFalse(node0.isIf());
479:       assertFalse(node0.isSetterDef());
480:       assertFalse(node0.isNE());
481:       assertFalse(node0.isFalse());
482:       assertFalse(node0.isIn());
483:       assertFalse(node0.isThrow());
484:       assertFalse(node0.isDefaultCase());
485:       assertFalse(node0.isTrue());
486:       assertEquals(40, node0.getType());
487:       assertFalse(node0.isDebugger());
488:       assertFalse(node0.isFunction());
489:       assertFalse(node0.isRegExp());
490:       assertFalse(node0.isArrayLit());
491:       assertFalse(node0.isCatch());
492:       assertFalse(node0.isDelProp());
493:       assertFalse(node0.isVoid());
494:       assertFalse(node0.isParamList());
495:       assertFalse(node0.isFor());
496:       assertFalse(node0.isGetterDef());
497:       assertFalse(node0.isCase());
498:       assertFalse(node0.isTry());
499:       assertTrue(node0.isString());
500:       assertFalse(node0.isWhile());
501:       assertEquals((-1), node0.getCharno());
502:       assertFalse(node0.isCall());
503:       assertFalse(node0.isStringKey());
504:       assertFalse(node0.isSwitch());
505:       assertFalse(node0.isName());
506:       assertFalse(node0.isNull());
507:       assertFalse(node0.isEmpty());
508:       assertFalse(node0.isLabel());
509:       assertFalse(node0.isOr());
510:       assertEquals(0, node0.getChildCount());
511:       assertFalse(node0.isVar());
512:       assertFalse(node0.isAdd());
513:       assertFalse(node0.isNew());
514:       assertFalse(node0.isAssignAdd());
515:       assertFalse(node0.isDo());
516:       assertEquals(48, Node.DIRECTIVES);
517:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
518:       assertEquals(39, Node.EMPTY_BLOCK);
519:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
520:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
521:       assertEquals(50, Node.FREE_CALL);
522:       assertEquals(4095, Node.COLUMN_MASK);
523:       assertEquals(8, Node.FLAG_NO_THROWS);
524:       assertEquals(40, Node.ORIGINALNAME_PROP);
525:       assertEquals(57, Node.REFLECTED_OBJECT);
526:       assertEquals(43, Node.IS_CONSTANT_NAME);
527:       assertEquals(54, Node.SLASH_V);
528:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
529:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
530:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
531:       assertEquals(1, Node.DECR_FLAG);
532:       assertEquals(12, Node.COLUMN_BITS);
533:       assertEquals(32, Node.INCRDECR_PROP);
534:       assertEquals(37, Node.OPT_ARG_NAME);
535:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
536:       assertEquals(47, Node.IS_DISPATCHER);
537:       assertEquals(51, Node.STATIC_SOURCE_FILE);
538:       assertEquals(2, Node.POST_FLAG);
539:       assertEquals(46, Node.IS_NAMESPACE);
540:       assertEquals(56, Node.CHANGE_TIME);
541:       assertEquals(49, Node.DIRECT_EVAL);
542:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
543:       assertEquals(15, Node.NO_SIDE_EFFECTS);
544:       assertEquals(53, Node.INPUT_ID);
545:       assertEquals(36, Node.QUOTED_PROP);
546:       assertEquals(30, Node.VAR_ARGS_NAME);
547:       assertEquals(52, Node.LENGTH);
548:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
549:       assertEquals(55, Node.INFERRED_FUNCTION);
550:       assertEquals(29, Node.JSDOC_INFO_PROP);
551:       assertEquals(57, Node.LAST_PROP);
552:       
553:       MockPrintStream mockPrintStream0 = new MockPrintStream("T*");
554:       assertNotNull(mockPrintStream0);
555:       
556:       Node node1 = Node.newString("");
557:       assertNotNull(node1);
558:       assertNotSame(node1, node0);
559:       assertFalse(node1.equals((Object)node0));
560:       assertFalse(node1.isIn());
561:       assertFalse(node1.isInc());
562:       assertFalse(node1.isFor());
563:       assertFalse(node1.isEmpty());
564:       assertFalse(node1.isCase());
565:       assertFalse(node1.isHook());
566:       assertFalse(node1.isRegExp());
567:       assertFalse(node1.isIf());
568:       assertFalse(node1.isBreak());
569:       assertFalse(node1.isNE());
570:       assertFalse(node1.isTrue());
571:       assertFalse(node1.isDelProp());
572:       assertFalse(node1.isVoid());
573:       assertFalse(node1.isInstanceOf());
574:       assertEquals(0, node1.getChildCount());
575:       assertFalse(node1.isCatch());
576:       assertFalse(node1.isWith());
577:       assertFalse(node1.isDefaultCase());
578:       assertFalse(node1.isThis());
579:       assertFalse(node1.isScript());
580:       assertFalse(node1.isTry());
581:       assertFalse(node1.hasOneChild());
582:       assertFalse(node1.isArrayLit());
583:       assertFalse(node1.isVar());
584:       assertEquals((-1), node1.getCharno());
585:       assertFalse(node1.isGetterDef());
586:       assertFalse(node1.isStringKey());
587:       assertFalse(node1.isParamList());
588:       assertFalse(node1.isSwitch());
589:       assertFalse(node1.isLabelName());
590:       assertFalse(node1.isReturn());
591:       assertFalse(node1.isContinue());
592:       assertFalse(node1.isLabel());
593:       assertFalse(node1.hasMoreThanOneChild());
594:       assertFalse(node1.isOr());
595:       assertFalse(node1.isTypeOf());
596:       assertFalse(node1.isNumber());
597:       assertFalse(node1.isDec());
598:       assertFalse(node1.hasChildren());
599:       assertFalse(node1.isWhile());
600:       assertFalse(node1.isNew());
601:       assertFalse(node1.isAssignAdd());
602:       assertFalse(node1.isDo());
603:       assertTrue(node1.isString());
604:       assertFalse(node1.isCall());
605:       assertFalse(node1.isBlock());
606:       assertFalse(node1.isAdd());
607:       assertFalse(node1.isAssign());
608:       assertFalse(node1.isNull());
609:       assertFalse(node1.isExprResult());
610:       assertFalse(node1.isGetElem());
611:       assertEquals((-1), node1.getLineno());
612:       assertFalse(node1.isName());
613:       assertFalse(node1.isComma());
614:       assertFalse(node1.isNot());
615:       assertFalse(node1.isObjectLit());
616:       assertFalse(node1.isSetterDef());
617:       assertEquals(40, node1.getType());
618:       assertFalse(node1.isThrow());
619:       assertFalse(node1.isGetProp());
620:       assertFalse(node1.isCast());
621:       assertFalse(node1.isFalse());
622:       assertFalse(node1.isDebugger());
623:       assertFalse(node1.isFunction());
624:       assertEquals((-1), node1.getSourcePosition());
625:       assertFalse(node1.isAnd());
626:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
627:       assertEquals(29, Node.JSDOC_INFO_PROP);
628:       assertEquals(2, Node.POST_FLAG);
629:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
630:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
631:       assertEquals(47, Node.IS_DISPATCHER);
632:       assertEquals(53, Node.INPUT_ID);
633:       assertEquals(32, Node.INCRDECR_PROP);
634:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
635:       assertEquals(55, Node.INFERRED_FUNCTION);
636:       assertEquals(12, Node.COLUMN_BITS);
637:       assertEquals(36, Node.QUOTED_PROP);
638:       assertEquals(4095, Node.COLUMN_MASK);
639:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
640:       assertEquals(48, Node.DIRECTIVES);
641:       assertEquals(37, Node.OPT_ARG_NAME);
642:       assertEquals(56, Node.CHANGE_TIME);
643:       assertEquals(49, Node.DIRECT_EVAL);
644:       assertEquals(40, Node.ORIGINALNAME_PROP);
645:       assertEquals(57, Node.REFLECTED_OBJECT);
646:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
647:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
648:       assertEquals(50, Node.FREE_CALL);
649:       assertEquals(52, Node.LENGTH);
650:       assertEquals(8, Node.FLAG_NO_THROWS);
651:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
652:       assertEquals(15, Node.NO_SIDE_EFFECTS);
653:       assertEquals(39, Node.EMPTY_BLOCK);
654:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
655:       assertEquals(57, Node.LAST_PROP);
656:       assertEquals(1, Node.DECR_FLAG);
657:       assertEquals(51, Node.STATIC_SOURCE_FILE);
658:       assertEquals(30, Node.VAR_ARGS_NAME);
659:       assertEquals(54, Node.SLASH_V);
660:       assertEquals(46, Node.IS_NAMESPACE);
661:       assertEquals(43, Node.IS_CONSTANT_NAME);
662:       
663:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
664:       assertNull(node_NodeMismatch0);
665:       assertNotSame(node0, node1);
666:       assertNotSame(node1, node0);
667:       assertFalse(node0.equals((Object)node1));
668:       assertFalse(node1.equals((Object)node0));
669:       assertFalse(node0.isScript());
670:       assertFalse(node0.isExprResult());
671:       assertFalse(node0.isWith());
672:       assertFalse(node0.isNot());
673:       assertFalse(node0.isObjectLit());
674:       assertFalse(node0.isInstanceOf());
675:       assertFalse(node0.isCast());
676:       assertFalse(node0.isGetElem());
677:       assertFalse(node0.isAnd());
678:       assertFalse(node0.isLabelName());
679:       assertFalse(node0.isNumber());
680:       assertEquals((-1), node0.getSourcePosition());
681:       assertFalse(node0.isDec());
682:       assertFalse(node0.isBreak());
683:       assertFalse(node0.hasChildren());
684:       assertFalse(node0.isThis());
685:       assertFalse(node0.isComma());
686:       assertFalse(node0.isAssign());
687:       assertFalse(node0.isTypeOf());
688:       assertFalse(node0.hasOneChild());
689:       assertFalse(node0.isHook());
690:       assertFalse(node0.isReturn());
691:       assertFalse(node0.isGetProp());
692:       assertFalse(node0.isInc());
693:       assertFalse(node0.isBlock());
694:       assertFalse(node0.isContinue());
695:       assertFalse(node0.hasMoreThanOneChild());
696:       assertEquals((-1), node0.getLineno());
697:       assertFalse(node0.isIf());
698:       assertFalse(node0.isSetterDef());
699:       assertFalse(node0.isNE());
700:       assertFalse(node0.isFalse());
701:       assertFalse(node0.isIn());
702:       assertFalse(node0.isThrow());
703:       assertFalse(node0.isDefaultCase());
704:       assertFalse(node0.isTrue());
705:       assertEquals(40, node0.getType());
706:       assertFalse(node0.isDebugger());
707:       assertFalse(node0.isFunction());
708:       assertFalse(node0.isRegExp());
709:       assertFalse(node0.isArrayLit());
710:       assertFalse(node0.isCatch());
711:       assertFalse(node0.isDelProp());
712:       assertFalse(node0.isVoid());
713:       assertFalse(node0.isParamList());
714:       assertFalse(node0.isFor());
715:       assertFalse(node0.isGetterDef());
716:       assertFalse(node0.isCase());
717:       assertFalse(node0.isTry());
718:       assertTrue(node0.isString());
719:       assertFalse(node0.isWhile());
720:       assertEquals((-1), node0.getCharno());
721:       assertFalse(node0.isCall());
722:       assertFalse(node0.isStringKey());
723:       assertFalse(node0.isSwitch());
724:       assertFalse(node0.isName());
725:       assertFalse(node0.isNull());
726:       assertFalse(node0.isEmpty());
727:       assertFalse(node0.isLabel());
728:       assertFalse(node0.isOr());
729:       assertEquals(0, node0.getChildCount());
730:       assertFalse(node0.isVar());
731:       assertFalse(node0.isAdd());
732:       assertFalse(node0.isNew());
733:       assertFalse(node0.isAssignAdd());
734:       assertFalse(node0.isDo());
735:       assertFalse(node1.isIn());
736:       assertFalse(node1.isInc());
737:       assertFalse(node1.isFor());
738:       assertFalse(node1.isEmpty());
739:       assertFalse(node1.isCase());
740:       assertFalse(node1.isHook());
741:       assertFalse(node1.isRegExp());
742:       assertFalse(node1.isIf());
743:       assertFalse(node1.isBreak());
744:       assertFalse(node1.isNE());
745:       assertFalse(node1.isTrue());
746:       assertFalse(node1.isDelProp());
747:       assertFalse(node1.isVoid());
748:       assertFalse(node1.isInstanceOf());
749:       assertEquals(0, node1.getChildCount());
750:       assertFalse(node1.isCatch());
751:       assertFalse(node1.isWith());
752:       assertFalse(node1.isDefaultCase());
753:       assertFalse(node1.isThis());
754:       assertFalse(node1.isScript());
755:       assertFalse(node1.isTry());
756:       assertFalse(node1.hasOneChild());
757:       assertFalse(node1.isArrayLit());
758:       assertFalse(node1.isVar());
759:       assertEquals((-1), node1.getCharno());
760:       assertFalse(node1.isGetterDef());
761:       assertFalse(node1.isStringKey());
762:       assertFalse(node1.isParamList());
763:       assertFalse(node1.isSwitch());
764:       assertFalse(node1.isLabelName());
765:       assertFalse(node1.isReturn());
766:       assertFalse(node1.isContinue());
767:       assertFalse(node1.isLabel());
768:       assertFalse(node1.hasMoreThanOneChild());
769:       assertFalse(node1.isOr());
770:       assertFalse(node1.isTypeOf());
771:       assertFalse(node1.isNumber());
772:       assertFalse(node1.isDec());
773:       assertFalse(node1.hasChildren());
774:       assertFalse(node1.isWhile());
775:       assertFalse(node1.isNew());
776:       assertFalse(node1.isAssignAdd());
777:       assertFalse(node1.isDo());
778:       assertTrue(node1.isString());
779:       assertFalse(node1.isCall());
780:       assertFalse(node1.isBlock());
781:       assertFalse(node1.isAdd());
782:       assertFalse(node1.isAssign());
783:       assertFalse(node1.isNull());
784:       assertFalse(node1.isExprResult());
785:       assertFalse(node1.isGetElem());
786:       assertEquals((-1), node1.getLineno());
787:       assertFalse(node1.isName());
788:       assertFalse(node1.isComma());
789:       assertFalse(node1.isNot());
790:       assertFalse(node1.isObjectLit());
791:       assertFalse(node1.isSetterDef());
792:       assertEquals(40, node1.getType());
793:       assertFalse(node1.isThrow());
794:       assertFalse(node1.isGetProp());
795:       assertFalse(node1.isCast());
796:       assertFalse(node1.isFalse());
797:       assertFalse(node1.isDebugger());
798:       assertFalse(node1.isFunction());
799:       assertEquals((-1), node1.getSourcePosition());
800:       assertFalse(node1.isAnd());
801:       assertEquals(48, Node.DIRECTIVES);
802:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
803:       assertEquals(39, Node.EMPTY_BLOCK);
804:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
805:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
806:       assertEquals(50, Node.FREE_CALL);
807:       assertEquals(4095, Node.COLUMN_MASK);
808:       assertEquals(8, Node.FLAG_NO_THROWS);
809:       assertEquals(40, Node.ORIGINALNAME_PROP);
810:       assertEquals(57, Node.REFLECTED_OBJECT);
811:       assertEquals(43, Node.IS_CONSTANT_NAME);
812:       assertEquals(54, Node.SLASH_V);
813:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
814:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
815:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
816:       assertEquals(1, Node.DECR_FLAG);
817:       assertEquals(12, Node.COLUMN_BITS);
818:       assertEquals(32, Node.INCRDECR_PROP);
819:       assertEquals(37, Node.OPT_ARG_NAME);
820:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
821:       assertEquals(47, Node.IS_DISPATCHER);
822:       assertEquals(51, Node.STATIC_SOURCE_FILE);
823:       assertEquals(2, Node.POST_FLAG);
824:       assertEquals(46, Node.IS_NAMESPACE);
825:       assertEquals(56, Node.CHANGE_TIME);
826:       assertEquals(49, Node.DIRECT_EVAL);
827:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
828:       assertEquals(15, Node.NO_SIDE_EFFECTS);
829:       assertEquals(53, Node.INPUT_ID);
830:       assertEquals(36, Node.QUOTED_PROP);
831:       assertEquals(30, Node.VAR_ARGS_NAME);
832:       assertEquals(52, Node.LENGTH);
833:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
834:       assertEquals(55, Node.INFERRED_FUNCTION);
835:       assertEquals(29, Node.JSDOC_INFO_PROP);
836:       assertEquals(57, Node.LAST_PROP);
837:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
838:       assertEquals(29, Node.JSDOC_INFO_PROP);
839:       assertEquals(2, Node.POST_FLAG);
840:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
841:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
842:       assertEquals(47, Node.IS_DISPATCHER);
843:       assertEquals(53, Node.INPUT_ID);
844:       assertEquals(32, Node.INCRDECR_PROP);
845:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
846:       assertEquals(55, Node.INFERRED_FUNCTION);
847:       assertEquals(12, Node.COLUMN_BITS);
848:       assertEquals(36, Node.QUOTED_PROP);
849:       assertEquals(4095, Node.COLUMN_MASK);
850:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
851:       assertEquals(48, Node.DIRECTIVES);
852:       assertEquals(37, Node.OPT_ARG_NAME);
853:       assertEquals(56, Node.CHANGE_TIME);
854:       assertEquals(49, Node.DIRECT_EVAL);
855:       assertEquals(40, Node.ORIGINALNAME_PROP);
856:       assertEquals(57, Node.REFLECTED_OBJECT);
857:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
858:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
859:       assertEquals(50, Node.FREE_CALL);
860:       assertEquals(52, Node.LENGTH);
861:       assertEquals(8, Node.FLAG_NO_THROWS);
862:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
863:       assertEquals(15, Node.NO_SIDE_EFFECTS);
864:       assertEquals(39, Node.EMPTY_BLOCK);
865:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
866:       assertEquals(57, Node.LAST_PROP);
867:       assertEquals(1, Node.DECR_FLAG);
868:       assertEquals(51, Node.STATIC_SOURCE_FILE);
869:       assertEquals(30, Node.VAR_ARGS_NAME);
870:       assertEquals(54, Node.SLASH_V);
871:       assertEquals(46, Node.IS_NAMESPACE);
872:       assertEquals(43, Node.IS_CONSTANT_NAME);
873:       
874:       Node node2 = node1.useSourceInfoIfMissingFrom(node0);
875:       assertNotNull(node2);
876:       assertNotSame(node0, node1);
877:       assertNotSame(node0, node2);
878:       assertSame(node1, node2);
879:       assertNotSame(node1, node0);
880:       assertNotSame(node2, node0);
881:       assertSame(node2, node1);
882:       assertFalse(node0.equals((Object)node1));
883:       assertFalse(node1.equals((Object)node0));
884:       assertFalse(node2.equals((Object)node0));
885:       assertFalse(node0.isScript());
886:       assertFalse(node0.isExprResult());
887:       assertFalse(node0.isWith());
888:       assertFalse(node0.isNot());
889:       assertFalse(node0.isObjectLit());
890:       assertFalse(node0.isInstanceOf());
891:       assertFalse(node0.isCast());
892:       assertFalse(node0.isGetElem());
893:       assertFalse(node0.isAnd());
894:       assertFalse(node0.isLabelName());
895:       assertFalse(node0.isNumber());
896:       assertEquals((-1), node0.getSourcePosition());
897:       assertFalse(node0.isDec());
898:       assertFalse(node0.isBreak());
899:       assertFalse(node0.hasChildren());
900:       assertFalse(node0.isThis());
901:       assertFalse(node0.isComma());
902:       assertFalse(node0.isAssign());
903:       assertFalse(node0.isTypeOf());
904:       assertFalse(node0.hasOneChild());
905:       assertFalse(node0.isHook());
906:       assertFalse(node0.isReturn());
907:       assertFalse(node0.isGetProp());
908:       assertFalse(node0.isInc());
909:       assertFalse(node0.isBlock());
910:       assertFalse(node0.isContinue());
911:       assertFalse(node0.hasMoreThanOneChild());
912:       assertEquals((-1), node0.getLineno());
913:       assertFalse(node0.isIf());
914:       assertFalse(node0.isSetterDef());
915:       assertFalse(node0.isNE());
916:       assertFalse(node0.isFalse());
917:       assertFalse(node0.isIn());
918:       assertFalse(node0.isThrow());
919:       assertFalse(node0.isDefaultCase());
920:       assertFalse(node0.isTrue());
921:       assertEquals(40, node0.getType());
922:       assertFalse(node0.isDebugger());
923:       assertFalse(node0.isFunction());
924:       assertFalse(node0.isRegExp());
925:       assertFalse(node0.isArrayLit());
926:       assertFalse(node0.isCatch());
927:       assertFalse(node0.isDelProp());
928:       assertFalse(node0.isVoid());
929:       assertFalse(node0.isParamList());
930:       assertFalse(node0.isFor());
931:       assertFalse(node0.isGetterDef());
932:       assertFalse(node0.isCase());
933:       assertFalse(node0.isTry());
934:       assertTrue(node0.isString());
935:       assertFalse(node0.isWhile());
936:       assertEquals((-1), node0.getCharno());
937:       assertFalse(node0.isCall());
938:       assertFalse(node0.isStringKey());
939:       assertFalse(node0.isSwitch());
940:       assertFalse(node0.isName());
941:       assertFalse(node0.isNull());
942:       assertFalse(node0.isEmpty());
943:       assertFalse(node0.isLabel());
944:       assertFalse(node0.isOr());
945:       assertEquals(0, node0.getChildCount());
946:       assertFalse(node0.isVar());
947:       assertFalse(node0.isAdd());
948:       assertFalse(node0.isNew());
949:       assertFalse(node0.isAssignAdd());
950:       assertFalse(node0.isDo());
951:       assertFalse(node1.isIn());
952:       assertFalse(node1.isInc());
953:       assertFalse(node1.isFor());
954:       assertFalse(node1.isEmpty());
955:       assertFalse(node1.isCase());
956:       assertFalse(node1.isHook());
957:       assertFalse(node1.isRegExp());
958:       assertFalse(node1.isIf());
959:       assertFalse(node1.isBreak());
960:       assertFalse(node1.isNE());
961:       assertFalse(node1.isTrue());
962:       assertFalse(node1.isDelProp());
963:       assertFalse(node1.isVoid());
964:       assertFalse(node1.isInstanceOf());
965:       assertEquals(0, node1.getChildCount());
966:       assertFalse(node1.isCatch());
967:       assertFalse(node1.isWith());
968:       assertFalse(node1.isDefaultCase());
969:       assertFalse(node1.isThis());
970:       assertFalse(node1.isScript());
971:       assertFalse(node1.isTry());
972:       assertFalse(node1.hasOneChild());
973:       assertFalse(node1.isArrayLit());
974:       assertFalse(node1.isVar());
975:       assertEquals((-1), node1.getCharno());
976:       assertFalse(node1.isGetterDef());
977:       assertFalse(node1.isStringKey());
978:       assertFalse(node1.isParamList());
979:       assertFalse(node1.isSwitch());
980:       assertFalse(node1.isLabelName());
981:       assertFalse(node1.isReturn());
982:       assertFalse(node1.isContinue());
983:       assertFalse(node1.isLabel());
984:       assertFalse(node1.hasMoreThanOneChild());
985:       assertFalse(node1.isOr());
986:       assertFalse(node1.isTypeOf());
987:       assertFalse(node1.isNumber());
988:       assertFalse(node1.isDec());
989:       assertFalse(node1.hasChildren());
990:       assertFalse(node1.isWhile());
991:       assertFalse(node1.isNew());
992:       assertFalse(node1.isAssignAdd());
993:       assertFalse(node1.isDo());
994:       assertTrue(node1.isString());
995:       assertFalse(node1.isCall());
996:       assertFalse(node1.isBlock());
997:       assertFalse(node1.isAdd());
998:       assertFalse(node1.isAssign());
999:       assertFalse(node1.isNull());
1000:       assertFalse(node1.isExprResult());
1001:       assertFalse(node1.isGetElem());
1002:       assertEquals((-1), node1.getLineno());
1003:       assertFalse(node1.isName());
1004:       assertFalse(node1.isComma());
1005:       assertFalse(node1.isNot());
1006:       assertFalse(node1.isObjectLit());
1007:       assertFalse(node1.isSetterDef());
1008:       assertEquals(40, node1.getType());
1009:       assertFalse(node1.isThrow());
1010:       assertFalse(node1.isGetProp());
1011:       assertFalse(node1.isCast());
1012:       assertFalse(node1.isFalse());
1013:       assertFalse(node1.isDebugger());
1014:       assertFalse(node1.isFunction());
1015:       assertEquals((-1), node1.getSourcePosition());
1016:       assertFalse(node1.isAnd());
1017:       assertFalse(node2.isAnd());
1018:       assertFalse(node2.isObjectLit());
1019:       assertFalse(node2.isInstanceOf());
1020:       assertFalse(node2.isGetProp());
1021:       assertFalse(node2.isScript());
1022:       assertFalse(node2.isNot());
1023:       assertFalse(node2.isThrow());
1024:       assertFalse(node2.isCast());
1025:       assertFalse(node2.isLabelName());
1026:       assertFalse(node2.isLabel());
1027:       assertFalse(node2.isFalse());
1028:       assertFalse(node2.isContinue());
1029:       assertFalse(node2.isWhile());
1030:       assertFalse(node2.isAssignAdd());
1031:       assertFalse(node2.isDo());
1032:       assertFalse(node2.isAdd());
1033:       assertEquals((-1), node2.getSourcePosition());
1034:       assertFalse(node2.isOr());
1035:       assertFalse(node2.isCall());
1036:       assertFalse(node2.isGetElem());
1037:       assertFalse(node2.isDelProp());
1038:       assertFalse(node2.isBreak());
1039:       assertFalse(node2.isName());
1040:       assertFalse(node2.isVoid());
1041:       assertFalse(node2.isComma());
1042:       assertFalse(node2.isExprResult());
1043:       assertFalse(node2.isReturn());
1044:       assertFalse(node2.hasChildren());
1045:       assertFalse(node2.isTypeOf());
1046:       assertFalse(node2.isDec());
1047:       assertFalse(node2.isAssign());
1048:       assertEquals(40, node2.getType());
1049:       assertFalse(node2.isCatch());
1050:       assertFalse(node2.isDefaultCase());
1051:       assertFalse(node2.isTrue());
1052:       assertFalse(node2.isParamList());
1053:       assertFalse(node2.isDebugger());
1054:       assertFalse(node2.isSetterDef());
1055:       assertFalse(node2.isNull());
1056:       assertFalse(node2.isVar());
1057:       assertFalse(node2.isStringKey());
1058:       assertFalse(node2.isEmpty());
1059:       assertFalse(node2.isNew());
1060:       assertFalse(node2.isArrayLit());
1061:       assertFalse(node2.isFunction());
1062:       assertEquals(0, node2.getChildCount());
1063:       assertFalse(node2.hasMoreThanOneChild());
1064:       assertEquals((-1), node2.getLineno());
1065:       assertFalse(node2.isCase());
1066:       assertFalse(node2.isInc());
1067:       assertEquals((-1), node2.getCharno());
1068:       assertFalse(node2.isSwitch());
1069:       assertFalse(node2.isNE());
1070:       assertFalse(node2.isIn());
1071:       assertFalse(node2.isNumber());
1072:       assertFalse(node2.isGetterDef());
1073:       assertFalse(node2.isFor());
1074:       assertFalse(node2.isHook());
1075:       assertFalse(node2.isIf());
1076:       assertFalse(node2.hasOneChild());
1077:       assertTrue(node2.isString());
1078:       assertFalse(node2.isTry());
1079:       assertFalse(node2.isThis());
1080:       assertFalse(node2.isBlock());
1081:       assertFalse(node2.isWith());
1082:       assertFalse(node2.isRegExp());
1083:       assertEquals(48, Node.DIRECTIVES);
1084:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1085:       assertEquals(39, Node.EMPTY_BLOCK);
1086:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1087:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1088:       assertEquals(50, Node.FREE_CALL);
1089:       assertEquals(4095, Node.COLUMN_MASK);
1090:       assertEquals(8, Node.FLAG_NO_THROWS);
1091:       assertEquals(40, Node.ORIGINALNAME_PROP);
1092:       assertEquals(57, Node.REFLECTED_OBJECT);
1093:       assertEquals(43, Node.IS_CONSTANT_NAME);
1094:       assertEquals(54, Node.SLASH_V);
1095:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1096:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1097:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1098:       assertEquals(1, Node.DECR_FLAG);
1099:       assertEquals(12, Node.COLUMN_BITS);
1100:       assertEquals(32, Node.INCRDECR_PROP);
1101:       assertEquals(37, Node.OPT_ARG_NAME);
1102:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1103:       assertEquals(47, Node.IS_DISPATCHER);
1104:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1105:       assertEquals(2, Node.POST_FLAG);
1106:       assertEquals(46, Node.IS_NAMESPACE);
1107:       assertEquals(56, Node.CHANGE_TIME);
1108:       assertEquals(49, Node.DIRECT_EVAL);
1109:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1110:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1111:       assertEquals(53, Node.INPUT_ID);
1112:       assertEquals(36, Node.QUOTED_PROP);
1113:       assertEquals(30, Node.VAR_ARGS_NAME);
1114:       assertEquals(52, Node.LENGTH);
1115:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1116:       assertEquals(55, Node.INFERRED_FUNCTION);
1117:       assertEquals(29, Node.JSDOC_INFO_PROP);
1118:       assertEquals(57, Node.LAST_PROP);
1119:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1120:       assertEquals(29, Node.JSDOC_INFO_PROP);
1121:       assertEquals(2, Node.POST_FLAG);
1122:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1123:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1124:       assertEquals(47, Node.IS_DISPATCHER);
1125:       assertEquals(53, Node.INPUT_ID);
1126:       assertEquals(32, Node.INCRDECR_PROP);
1127:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1128:       assertEquals(55, Node.INFERRED_FUNCTION);
1129:       assertEquals(12, Node.COLUMN_BITS);
1130:       assertEquals(36, Node.QUOTED_PROP);
1131:       assertEquals(4095, Node.COLUMN_MASK);
1132:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1133:       assertEquals(48, Node.DIRECTIVES);
1134:       assertEquals(37, Node.OPT_ARG_NAME);
1135:       assertEquals(56, Node.CHANGE_TIME);
1136:       assertEquals(49, Node.DIRECT_EVAL);
1137:       assertEquals(40, Node.ORIGINALNAME_PROP);
1138:       assertEquals(57, Node.REFLECTED_OBJECT);
1139:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1140:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1141:       assertEquals(50, Node.FREE_CALL);
1142:       assertEquals(52, Node.LENGTH);
1143:       assertEquals(8, Node.FLAG_NO_THROWS);
1144:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1145:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1146:       assertEquals(39, Node.EMPTY_BLOCK);
1147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1148:       assertEquals(57, Node.LAST_PROP);
1149:       assertEquals(1, Node.DECR_FLAG);
1150:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1151:       assertEquals(30, Node.VAR_ARGS_NAME);
1152:       assertEquals(54, Node.SLASH_V);
1153:       assertEquals(46, Node.IS_NAMESPACE);
1154:       assertEquals(43, Node.IS_CONSTANT_NAME);
1155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1156:       assertEquals(40, Node.ORIGINALNAME_PROP);
1157:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1159:       assertEquals(39, Node.EMPTY_BLOCK);
1160:       assertEquals(48, Node.DIRECTIVES);
1161:       assertEquals(52, Node.LENGTH);
1162:       assertEquals(57, Node.REFLECTED_OBJECT);
1163:       assertEquals(54, Node.SLASH_V);
1164:       assertEquals(55, Node.INFERRED_FUNCTION);
1165:       assertEquals(8, Node.FLAG_NO_THROWS);
1166:       assertEquals(50, Node.FREE_CALL);
1167:       assertEquals(30, Node.VAR_ARGS_NAME);
1168:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1169:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1170:       assertEquals(43, Node.IS_CONSTANT_NAME);
1171:       assertEquals(57, Node.LAST_PROP);
1172:       assertEquals(2, Node.POST_FLAG);
1173:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1174:       assertEquals(56, Node.CHANGE_TIME);
1175:       assertEquals(47, Node.IS_DISPATCHER);
1176:       assertEquals(29, Node.JSDOC_INFO_PROP);
1177:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1178:       assertEquals(37, Node.OPT_ARG_NAME);
1179:       assertEquals(46, Node.IS_NAMESPACE);
1180:       assertEquals(53, Node.INPUT_ID);
1181:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1182:       assertEquals(36, Node.QUOTED_PROP);
1183:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1184:       assertEquals(1, Node.DECR_FLAG);
1185:       assertEquals(49, Node.DIRECT_EVAL);
1186:       assertEquals(32, Node.INCRDECR_PROP);
1187:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1188:       assertEquals(12, Node.COLUMN_BITS);
1189:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1190:       assertEquals(4095, Node.COLUMN_MASK);
1191:       
1192:       Node node3 = new Node(53, node0, node1, node2, 16, 16);
1193:       assertNotNull(node3);
1194:       assertFalse(node0.equals((Object)node1));
1195:       assertFalse(node0.equals((Object)node2));
1196:       assertFalse(node1.equals((Object)node0));
1197:       assertFalse(node2.equals((Object)node0));
1198:       assertFalse(node3.equals((Object)node0));
1199:       assertFalse(node3.equals((Object)node1));
1200:       assertFalse(node3.equals((Object)node2));
1201:       assertFalse(node0.isScript());
1202:       assertFalse(node0.isExprResult());
1203:       assertFalse(node0.isWith());
1204:       assertFalse(node0.isNot());
1205:       assertFalse(node0.isObjectLit());
1206:       assertFalse(node0.isInstanceOf());
1207:       assertFalse(node0.isCast());
1208:       assertFalse(node0.isGetElem());
1209:       assertFalse(node0.isAnd());
1210:       assertFalse(node0.isLabelName());
1211:       assertFalse(node0.isNumber());
1212:       assertEquals((-1), node0.getSourcePosition());
1213:       assertFalse(node0.isDec());
1214:       assertFalse(node0.isBreak());
1215:       assertFalse(node0.hasChildren());
1216:       assertFalse(node0.isThis());
1217:       assertFalse(node0.isComma());
1218:       assertFalse(node0.isAssign());
1219:       assertFalse(node0.isTypeOf());
1220:       assertFalse(node0.hasOneChild());
1221:       assertFalse(node0.isHook());
1222:       assertFalse(node0.isReturn());
1223:       assertFalse(node0.isGetProp());
1224:       assertFalse(node0.isInc());
1225:       assertFalse(node0.isBlock());
1226:       assertFalse(node0.isContinue());
1227:       assertFalse(node0.hasMoreThanOneChild());
1228:       assertEquals((-1), node0.getLineno());
1229:       assertFalse(node0.isIf());
1230:       assertFalse(node0.isSetterDef());
1231:       assertFalse(node0.isNE());
1232:       assertFalse(node0.isFalse());
1233:       assertFalse(node0.isIn());
1234:       assertFalse(node0.isThrow());
1235:       assertFalse(node0.isDefaultCase());
1236:       assertFalse(node0.isTrue());
1237:       assertEquals(40, node0.getType());
1238:       assertFalse(node0.isDebugger());
1239:       assertFalse(node0.isFunction());
1240:       assertFalse(node0.isRegExp());
1241:       assertFalse(node0.isArrayLit());
1242:       assertFalse(node0.isCatch());
1243:       assertFalse(node0.isDelProp());
1244:       assertFalse(node0.isVoid());
1245:       assertFalse(node0.isParamList());
1246:       assertFalse(node0.isFor());
1247:       assertFalse(node0.isGetterDef());
1248:       assertFalse(node0.isCase());
1249:       assertFalse(node0.isTry());
1250:       assertTrue(node0.isString());
1251:       assertFalse(node0.isWhile());
1252:       assertEquals((-1), node0.getCharno());
1253:       assertFalse(node0.isCall());
1254:       assertFalse(node0.isStringKey());
1255:       assertFalse(node0.isSwitch());
1256:       assertFalse(node0.isName());
1257:       assertFalse(node0.isNull());
1258:       assertFalse(node0.isEmpty());
1259:       assertFalse(node0.isLabel());
1260:       assertFalse(node0.isOr());
1261:       assertEquals(0, node0.getChildCount());
1262:       assertFalse(node0.isVar());
1263:       assertFalse(node0.isAdd());
1264:       assertFalse(node0.isNew());
1265:       assertFalse(node0.isAssignAdd());
1266:       assertFalse(node0.isDo());
1267:       assertFalse(node1.isIn());
1268:       assertFalse(node1.isInc());
1269:       assertFalse(node1.isFor());
1270:       assertFalse(node1.isEmpty());
1271:       assertFalse(node1.isCase());
1272:       assertFalse(node1.isHook());
1273:       assertFalse(node1.isRegExp());
1274:       assertFalse(node1.isIf());
1275:       assertFalse(node1.isBreak());
1276:       assertFalse(node1.isNE());
1277:       assertFalse(node1.isTrue());
1278:       assertFalse(node1.isDelProp());
1279:       assertFalse(node1.isVoid());
1280:       assertFalse(node1.isInstanceOf());
1281:       assertEquals(0, node1.getChildCount());
1282:       assertFalse(node1.isCatch());
1283:       assertFalse(node1.isWith());
1284:       assertFalse(node1.isDefaultCase());
1285:       assertFalse(node1.isThis());
1286:       assertFalse(node1.isScript());
1287:       assertFalse(node1.isTry());
1288:       assertFalse(node1.hasOneChild());
1289:       assertFalse(node1.isArrayLit());
1290:       assertFalse(node1.isVar());
1291:       assertEquals((-1), node1.getCharno());
1292:       assertFalse(node1.isGetterDef());
1293:       assertFalse(node1.isStringKey());
1294:       assertFalse(node1.isParamList());
1295:       assertFalse(node1.isSwitch());
1296:       assertFalse(node1.isLabelName());
1297:       assertFalse(node1.isReturn());
1298:       assertFalse(node1.isContinue());
1299:       assertFalse(node1.isLabel());
1300:       assertFalse(node1.hasMoreThanOneChild());
1301:       assertFalse(node1.isOr());
1302:       assertFalse(node1.isTypeOf());
1303:       assertFalse(node1.isNumber());
1304:       assertFalse(node1.isDec());
1305:       assertFalse(node1.hasChildren());
1306:       assertFalse(node1.isWhile());
1307:       assertFalse(node1.isNew());
1308:       assertFalse(node1.isAssignAdd());
1309:       assertFalse(node1.isDo());
1310:       assertTrue(node1.isString());
1311:       assertFalse(node1.isCall());
1312:       assertFalse(node1.isBlock());
1313:       assertFalse(node1.isAdd());
1314:       assertFalse(node1.isAssign());
1315:       assertFalse(node1.isNull());
1316:       assertFalse(node1.isExprResult());
1317:       assertFalse(node1.isGetElem());
1318:       assertEquals((-1), node1.getLineno());
1319:       assertFalse(node1.isName());
1320:       assertFalse(node1.isComma());
1321:       assertFalse(node1.isNot());
1322:       assertFalse(node1.isObjectLit());
1323:       assertFalse(node1.isSetterDef());
1324:       assertEquals(40, node1.getType());
1325:       assertFalse(node1.isThrow());
1326:       assertFalse(node1.isGetProp());
1327:       assertFalse(node1.isCast());
1328:       assertFalse(node1.isFalse());
1329:       assertFalse(node1.isDebugger());
1330:       assertFalse(node1.isFunction());
1331:       assertEquals((-1), node1.getSourcePosition());
1332:       assertFalse(node1.isAnd());
1333:       assertFalse(node2.isAnd());
1334:       assertFalse(node2.isObjectLit());
1335:       assertFalse(node2.isInstanceOf());
1336:       assertFalse(node2.isGetProp());
1337:       assertFalse(node2.isScript());
1338:       assertFalse(node2.isNot());
1339:       assertFalse(node2.isThrow());
1340:       assertFalse(node2.isCast());
1341:       assertFalse(node2.isLabelName());
1342:       assertFalse(node2.isLabel());
1343:       assertFalse(node2.isFalse());
1344:       assertFalse(node2.isContinue());
1345:       assertFalse(node2.isWhile());
1346:       assertFalse(node2.isAssignAdd());
1347:       assertFalse(node2.isDo());
1348:       assertFalse(node2.isAdd());
1349:       assertEquals((-1), node2.getSourcePosition());
1350:       assertFalse(node2.isOr());
1351:       assertFalse(node2.isCall());
1352:       assertFalse(node2.isGetElem());
1353:       assertFalse(node2.isDelProp());
1354:       assertFalse(node2.isBreak());
1355:       assertFalse(node2.isName());
1356:       assertFalse(node2.isVoid());
1357:       assertFalse(node2.isComma());
1358:       assertFalse(node2.isExprResult());
1359:       assertFalse(node2.isReturn());
1360:       assertFalse(node2.hasChildren());
1361:       assertFalse(node2.isTypeOf());
1362:       assertFalse(node2.isDec());
1363:       assertFalse(node2.isAssign());
1364:       assertEquals(40, node2.getType());
1365:       assertFalse(node2.isCatch());
1366:       assertFalse(node2.isDefaultCase());
1367:       assertFalse(node2.isTrue());
1368:       assertFalse(node2.isParamList());
1369:       assertFalse(node2.isDebugger());
1370:       assertFalse(node2.isSetterDef());
1371:       assertFalse(node2.isNull());
1372:       assertFalse(node2.isVar());
1373:       assertFalse(node2.isStringKey());
1374:       assertFalse(node2.isEmpty());
1375:       assertFalse(node2.isNew());
1376:       assertFalse(node2.isArrayLit());
1377:       assertFalse(node2.isFunction());
1378:       assertEquals(0, node2.getChildCount());
1379:       assertFalse(node2.hasMoreThanOneChild());
1380:       assertEquals((-1), node2.getLineno());
1381:       assertFalse(node2.isCase());
1382:       assertFalse(node2.isInc());
1383:       assertEquals((-1), node2.getCharno());
1384:       assertFalse(node2.isSwitch());
1385:       assertFalse(node2.isNE());
1386:       assertFalse(node2.isIn());
1387:       assertFalse(node2.isNumber());
1388:       assertFalse(node2.isGetterDef());
1389:       assertFalse(node2.isFor());
1390:       assertFalse(node2.isHook());
1391:       assertFalse(node2.isIf());
1392:       assertFalse(node2.hasOneChild());
1393:       assertTrue(node2.isString());
1394:       assertFalse(node2.isTry());
1395:       assertFalse(node2.isThis());
1396:       assertFalse(node2.isBlock());
1397:       assertFalse(node2.isWith());
1398:       assertFalse(node2.isRegExp());
1399:       assertFalse(node3.isCase());
1400:       assertFalse(node3.isString());
1401:       assertFalse(node3.isIn());
1402:       assertTrue(node3.hasChildren());
1403:       assertTrue(node3.hasMoreThanOneChild());
1404:       assertFalse(node3.isNE());
1405:       assertFalse(node3.isDelProp());
1406:       assertFalse(node3.isIf());
1407:       assertFalse(node3.isSwitch());
1408:       assertFalse(node3.isFor());
1409:       assertFalse(node3.isBreak());
1410:       assertEquals(53, node3.getType());
1411:       assertFalse(node3.isGetterDef());
1412:       assertFalse(node3.isTry());
1413:       assertEquals(16, node3.getCharno());
1414:       assertFalse(node3.isComma());
1415:       assertFalse(node3.isThis());
1416:       assertFalse(node3.isGetProp());
1417:       assertFalse(node3.isHook());
1418:       assertFalse(node3.isScript());
1419:       assertFalse(node3.isVoid());
1420:       assertFalse(node3.isTrue());
1421:       assertFalse(node3.isExprResult());
1422:       assertFalse(node3.isNull());
1423:       assertFalse(node3.isArrayLit());
1424:       assertFalse(node3.isParamList());
1425:       assertFalse(node3.isLabelName());
1426:       assertFalse(node3.isEmpty());
1427:       assertFalse(node3.isNew());
1428:       assertFalse(node3.isAdd());
1429:       assertFalse(node3.isLabel());
1430:       assertEquals(65552, node3.getSourcePosition());
1431:       assertFalse(node3.isVar());
1432:       assertFalse(node3.isAssignAdd());
1433:       assertFalse(node3.isDefaultCase());
1434:       assertFalse(node3.isDo());
1435:       assertFalse(node3.isContinue());
1436:       assertFalse(node3.isOr());
1437:       assertFalse(node3.isStringKey());
1438:       assertFalse(node3.isName());
1439:       assertFalse(node3.isGetElem());
1440:       assertFalse(node3.isAssign());
1441:       assertFalse(node3.isCall());
1442:       assertFalse(node3.isNumber());
1443:       assertFalse(node3.isDec());
1444:       assertFalse(node3.isTypeOf());
1445:       assertFalse(node3.isBlock());
1446:       assertFalse(node3.isReturn());
1447:       assertFalse(node3.hasOneChild());
1448:       assertFalse(node3.isWhile());
1449:       assertFalse(node3.isNot());
1450:       assertFalse(node3.isRegExp());
1451:       assertFalse(node3.isInstanceOf());
1452:       assertFalse(node3.isCatch());
1453:       assertFalse(node3.isFunction());
1454:       assertFalse(node3.isObjectLit());
1455:       assertFalse(node3.isWith());
1456:       assertFalse(node3.isDebugger());
1457:       assertFalse(node3.isAnd());
1458:       assertFalse(node3.isFalse());
1459:       assertFalse(node3.isThrow());
1460:       assertFalse(node3.isCast());
1461:       assertFalse(node3.isSetterDef());
1462:       assertFalse(node3.isInc());
1463:       assertEquals(16, node3.getLineno());
1464:       assertEquals(2, node3.getChildCount());
1465:       assertEquals(48, Node.DIRECTIVES);
1466:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1467:       assertEquals(39, Node.EMPTY_BLOCK);
1468:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1469:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1470:       assertEquals(50, Node.FREE_CALL);
1471:       assertEquals(4095, Node.COLUMN_MASK);
1472:       assertEquals(8, Node.FLAG_NO_THROWS);
1473:       assertEquals(40, Node.ORIGINALNAME_PROP);
1474:       assertEquals(57, Node.REFLECTED_OBJECT);
1475:       assertEquals(43, Node.IS_CONSTANT_NAME);
1476:       assertEquals(54, Node.SLASH_V);
1477:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1478:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1479:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1480:       assertEquals(1, Node.DECR_FLAG);
1481:       assertEquals(12, Node.COLUMN_BITS);
1482:       assertEquals(32, Node.INCRDECR_PROP);
1483:       assertEquals(37, Node.OPT_ARG_NAME);
1484:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1485:       assertEquals(47, Node.IS_DISPATCHER);
1486:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1487:       assertEquals(2, Node.POST_FLAG);
1488:       assertEquals(46, Node.IS_NAMESPACE);
1489:       assertEquals(56, Node.CHANGE_TIME);
1490:       assertEquals(49, Node.DIRECT_EVAL);
1491:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1492:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1493:       assertEquals(53, Node.INPUT_ID);
1494:       assertEquals(36, Node.QUOTED_PROP);
1495:       assertEquals(30, Node.VAR_ARGS_NAME);
1496:       assertEquals(52, Node.LENGTH);
1497:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1498:       assertEquals(55, Node.INFERRED_FUNCTION);
1499:       assertEquals(29, Node.JSDOC_INFO_PROP);
1500:       assertEquals(57, Node.LAST_PROP);
1501:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1502:       assertEquals(29, Node.JSDOC_INFO_PROP);
1503:       assertEquals(2, Node.POST_FLAG);
1504:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1505:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1506:       assertEquals(47, Node.IS_DISPATCHER);
1507:       assertEquals(53, Node.INPUT_ID);
1508:       assertEquals(32, Node.INCRDECR_PROP);
1509:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1510:       assertEquals(55, Node.INFERRED_FUNCTION);
1511:       assertEquals(12, Node.COLUMN_BITS);
1512:       assertEquals(36, Node.QUOTED_PROP);
1513:       assertEquals(4095, Node.COLUMN_MASK);
1514:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1515:       assertEquals(48, Node.DIRECTIVES);
1516:       assertEquals(37, Node.OPT_ARG_NAME);
1517:       assertEquals(56, Node.CHANGE_TIME);
1518:       assertEquals(49, Node.DIRECT_EVAL);
1519:       assertEquals(40, Node.ORIGINALNAME_PROP);
1520:       assertEquals(57, Node.REFLECTED_OBJECT);
1521:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1522:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1523:       assertEquals(50, Node.FREE_CALL);
1524:       assertEquals(52, Node.LENGTH);
1525:       assertEquals(8, Node.FLAG_NO_THROWS);
1526:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1527:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1528:       assertEquals(39, Node.EMPTY_BLOCK);
1529:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1530:       assertEquals(57, Node.LAST_PROP);
1531:       assertEquals(1, Node.DECR_FLAG);
1532:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1533:       assertEquals(30, Node.VAR_ARGS_NAME);
1534:       assertEquals(54, Node.SLASH_V);
1535:       assertEquals(46, Node.IS_NAMESPACE);
1536:       assertEquals(43, Node.IS_CONSTANT_NAME);
1537:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1538:       assertEquals(40, Node.ORIGINALNAME_PROP);
1539:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1540:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1541:       assertEquals(39, Node.EMPTY_BLOCK);
1542:       assertEquals(48, Node.DIRECTIVES);
1543:       assertEquals(52, Node.LENGTH);
1544:       assertEquals(57, Node.REFLECTED_OBJECT);
1545:       assertEquals(54, Node.SLASH_V);
1546:       assertEquals(55, Node.INFERRED_FUNCTION);
1547:       assertEquals(8, Node.FLAG_NO_THROWS);
1548:       assertEquals(50, Node.FREE_CALL);
1549:       assertEquals(30, Node.VAR_ARGS_NAME);
1550:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1551:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1552:       assertEquals(43, Node.IS_CONSTANT_NAME);
1553:       assertEquals(57, Node.LAST_PROP);
1554:       assertEquals(2, Node.POST_FLAG);
1555:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1556:       assertEquals(56, Node.CHANGE_TIME);
1557:       assertEquals(47, Node.IS_DISPATCHER);
1558:       assertEquals(29, Node.JSDOC_INFO_PROP);
1559:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1560:       assertEquals(37, Node.OPT_ARG_NAME);
1561:       assertEquals(46, Node.IS_NAMESPACE);
1562:       assertEquals(53, Node.INPUT_ID);
1563:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1564:       assertEquals(36, Node.QUOTED_PROP);
1565:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1566:       assertEquals(1, Node.DECR_FLAG);
1567:       assertEquals(49, Node.DIRECT_EVAL);
1568:       assertEquals(32, Node.INCRDECR_PROP);
1569:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1570:       assertEquals(12, Node.COLUMN_BITS);
1571:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1572:       assertEquals(4095, Node.COLUMN_MASK);
1573:       assertEquals(56, Node.CHANGE_TIME);
1574:       assertEquals(47, Node.IS_DISPATCHER);
1575:       assertEquals(2, Node.POST_FLAG);
1576:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1577:       assertEquals(37, Node.OPT_ARG_NAME);
1578:       assertEquals(29, Node.JSDOC_INFO_PROP);
1579:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1580:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1581:       assertEquals(46, Node.IS_NAMESPACE);
1582:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1583:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1584:       assertEquals(43, Node.IS_CONSTANT_NAME);
1585:       assertEquals(49, Node.DIRECT_EVAL);
1586:       assertEquals(4095, Node.COLUMN_MASK);
1587:       assertEquals(12, Node.COLUMN_BITS);
1588:       assertEquals(32, Node.INCRDECR_PROP);
1589:       assertEquals(1, Node.DECR_FLAG);
1590:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1591:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1592:       assertEquals(39, Node.EMPTY_BLOCK);
1593:       assertEquals(40, Node.ORIGINALNAME_PROP);
1594:       assertEquals(50, Node.FREE_CALL);
1595:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1596:       assertEquals(8, Node.FLAG_NO_THROWS);
1597:       assertEquals(57, Node.REFLECTED_OBJECT);
1598:       assertEquals(48, Node.DIRECTIVES);
1599:       assertEquals(54, Node.SLASH_V);
1600:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1601:       assertEquals(57, Node.LAST_PROP);
1602:       assertEquals(30, Node.VAR_ARGS_NAME);
1603:       assertEquals(36, Node.QUOTED_PROP);
1604:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1605:       assertEquals(53, Node.INPUT_ID);
1606:       assertEquals(55, Node.INFERRED_FUNCTION);
1607:       assertEquals(52, Node.LENGTH);
1608:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1609:       
1610:       node3.setWasEmptyNode(false);
1611:       assertNotSame(node0, node1);
1612:       assertNotSame(node0, node2);
1613:       assertSame(node1, node2);
1614:       assertNotSame(node1, node0);
1615:       assertNotSame(node2, node0);
1616:       assertSame(node2, node1);
1617:       assertFalse(node0.equals((Object)node1));
1618:       assertFalse(node0.equals((Object)node3));
1619:       assertFalse(node0.equals((Object)node2));
1620:       assertFalse(node1.equals((Object)node3));
1621:       assertFalse(node1.equals((Object)node0));
1622:       assertFalse(node2.equals((Object)node0));
1623:       assertFalse(node2.equals((Object)node3));
1624:       assertFalse(node3.equals((Object)node0));
1625:       assertFalse(node3.equals((Object)node1));
1626:       assertFalse(node3.equals((Object)node2));
1627:       assertFalse(node0.isScript());
1628:       assertFalse(node0.isExprResult());
1629:       assertFalse(node0.isWith());
1630:       assertFalse(node0.isNot());
1631:       assertFalse(node0.isObjectLit());
1632:       assertFalse(node0.isInstanceOf());
1633:       assertFalse(node0.isCast());
1634:       assertFalse(node0.isGetElem());
1635:       assertFalse(node0.isAnd());
1636:       assertFalse(node0.isLabelName());
1637:       assertFalse(node0.isNumber());
1638:       assertEquals((-1), node0.getSourcePosition());
1639:       assertFalse(node0.isDec());
1640:       assertFalse(node0.isBreak());
1641:       assertFalse(node0.hasChildren());
1642:       assertFalse(node0.isThis());
1643:       assertFalse(node0.isComma());
1644:       assertFalse(node0.isAssign());
1645:       assertFalse(node0.isTypeOf());
1646:       assertFalse(node0.hasOneChild());
1647:       assertFalse(node0.isHook());
1648:       assertFalse(node0.isReturn());
1649:       assertFalse(node0.isGetProp());
1650:       assertFalse(node0.isInc());
1651:       assertFalse(node0.isBlock());
1652:       assertFalse(node0.isContinue());
1653:       assertFalse(node0.hasMoreThanOneChild());
1654:       assertEquals((-1), node0.getLineno());
1655:       assertFalse(node0.isIf());
1656:       assertFalse(node0.isSetterDef());
1657:       assertFalse(node0.isNE());
1658:       assertFalse(node0.isFalse());
1659:       assertFalse(node0.isIn());
1660:       assertFalse(node0.isThrow());
1661:       assertFalse(node0.isDefaultCase());
1662:       assertFalse(node0.isTrue());
1663:       assertEquals(40, node0.getType());
1664:       assertFalse(node0.isDebugger());
1665:       assertFalse(node0.isFunction());
1666:       assertFalse(node0.isRegExp());
1667:       assertFalse(node0.isArrayLit());
1668:       assertFalse(node0.isCatch());
1669:       assertFalse(node0.isDelProp());
1670:       assertFalse(node0.isVoid());
1671:       assertFalse(node0.isParamList());
1672:       assertFalse(node0.isFor());
1673:       assertFalse(node0.isGetterDef());
1674:       assertFalse(node0.isCase());
1675:       assertFalse(node0.isTry());
1676:       assertTrue(node0.isString());
1677:       assertFalse(node0.isWhile());
1678:       assertEquals((-1), node0.getCharno());
1679:       assertFalse(node0.isCall());
1680:       assertFalse(node0.isStringKey());
1681:       assertFalse(node0.isSwitch());
1682:       assertFalse(node0.isName());
1683:       assertFalse(node0.isNull());
1684:       assertFalse(node0.isEmpty());
1685:       assertFalse(node0.isLabel());
1686:       assertFalse(node0.isOr());
1687:       assertEquals(0, node0.getChildCount());
1688:       assertFalse(node0.isVar());
1689:       assertFalse(node0.isAdd());
1690:       assertFalse(node0.isNew());
1691:       assertFalse(node0.isAssignAdd());
1692:       assertFalse(node0.isDo());
1693:       assertFalse(node1.isIn());
1694:       assertFalse(node1.isInc());
1695:       assertFalse(node1.isFor());
1696:       assertFalse(node1.isEmpty());
1697:       assertFalse(node1.isCase());
1698:       assertFalse(node1.isHook());
1699:       assertFalse(node1.isRegExp());
1700:       assertFalse(node1.isIf());
1701:       assertFalse(node1.isBreak());
1702:       assertFalse(node1.isNE());
1703:       assertFalse(node1.isTrue());
1704:       assertFalse(node1.isDelProp());
1705:       assertFalse(node1.isVoid());
1706:       assertFalse(node1.isInstanceOf());
1707:       assertEquals(0, node1.getChildCount());
1708:       assertFalse(node1.isCatch());
1709:       assertFalse(node1.isWith());
1710:       assertFalse(node1.isDefaultCase());
1711:       assertFalse(node1.isThis());
1712:       assertFalse(node1.isScript());
1713:       assertFalse(node1.isTry());
1714:       assertFalse(node1.hasOneChild());
1715:       assertFalse(node1.isArrayLit());
1716:       assertFalse(node1.isVar());
1717:       assertEquals((-1), node1.getCharno());
1718:       assertFalse(node1.isGetterDef());
1719:       assertFalse(node1.isStringKey());
1720:       assertFalse(node1.isParamList());
1721:       assertFalse(node1.isSwitch());
1722:       assertFalse(node1.isLabelName());
1723:       assertFalse(node1.isReturn());
1724:       assertFalse(node1.isContinue());
1725:       assertFalse(node1.isLabel());
1726:       assertFalse(node1.hasMoreThanOneChild());
1727:       assertFalse(node1.isOr());
1728:       assertFalse(node1.isTypeOf());
1729:       assertFalse(node1.isNumber());
1730:       assertFalse(node1.isDec());
1731:       assertFalse(node1.hasChildren());
1732:       assertFalse(node1.isWhile());
1733:       assertFalse(node1.isNew());
1734:       assertFalse(node1.isAssignAdd());
1735:       assertFalse(node1.isDo());
1736:       assertTrue(node1.isString());
1737:       assertFalse(node1.isCall());
1738:       assertFalse(node1.isBlock());
1739:       assertFalse(node1.isAdd());
1740:       assertFalse(node1.isAssign());
1741:       assertFalse(node1.isNull());
1742:       assertFalse(node1.isExprResult());
1743:       assertFalse(node1.isGetElem());
1744:       assertEquals((-1), node1.getLineno());
1745:       assertFalse(node1.isName());
1746:       assertFalse(node1.isComma());
1747:       assertFalse(node1.isNot());
1748:       assertFalse(node1.isObjectLit());
1749:       assertFalse(node1.isSetterDef());
1750:       assertEquals(40, node1.getType());
1751:       assertFalse(node1.isThrow());
1752:       assertFalse(node1.isGetProp());
1753:       assertFalse(node1.isCast());
1754:       assertFalse(node1.isFalse());
1755:       assertFalse(node1.isDebugger());
1756:       assertFalse(node1.isFunction());
1757:       assertEquals((-1), node1.getSourcePosition());
1758:       assertFalse(node1.isAnd());
1759:       assertFalse(node2.isAnd());
1760:       assertFalse(node2.isObjectLit());
1761:       assertFalse(node2.isInstanceOf());
1762:       assertFalse(node2.isGetProp());
1763:       assertFalse(node2.isScript());
1764:       assertFalse(node2.isNot());
1765:       assertFalse(node2.isThrow());
1766:       assertFalse(node2.isCast());
1767:       assertFalse(node2.isLabelName());
1768:       assertFalse(node2.isLabel());
1769:       assertFalse(node2.isFalse());
1770:       assertFalse(node2.isContinue());
1771:       assertFalse(node2.isWhile());
1772:       assertFalse(node2.isAssignAdd());
1773:       assertFalse(node2.isDo());
1774:       assertFalse(node2.isAdd());
1775:       assertEquals((-1), node2.getSourcePosition());
1776:       assertFalse(node2.isOr());
1777:       assertFalse(node2.isCall());
1778:       assertFalse(node2.isGetElem());
1779:       assertFalse(node2.isDelProp());
1780:       assertFalse(node2.isBreak());
1781:       assertFalse(node2.isName());
1782:       assertFalse(node2.isVoid());
1783:       assertFalse(node2.isComma());
1784:       assertFalse(node2.isExprResult());
1785:       assertFalse(node2.isReturn());
1786:       assertFalse(node2.hasChildren());
1787:       assertFalse(node2.isTypeOf());
1788:       assertFalse(node2.isDec());
1789:       assertFalse(node2.isAssign());
1790:       assertEquals(40, node2.getType());
1791:       assertFalse(node2.isCatch());
1792:       assertFalse(node2.isDefaultCase());
1793:       assertFalse(node2.isTrue());
1794:       assertFalse(node2.isParamList());
1795:       assertFalse(node2.isDebugger());
1796:       assertFalse(node2.isSetterDef());
1797:       assertFalse(node2.isNull());
1798:       assertFalse(node2.isVar());
1799:       assertFalse(node2.isStringKey());
1800:       assertFalse(node2.isEmpty());
1801:       assertFalse(node2.isNew());
1802:       assertFalse(node2.isArrayLit());
1803:       assertFalse(node2.isFunction());
1804:       assertEquals(0, node2.getChildCount());
1805:       assertFalse(node2.hasMoreThanOneChild());
1806:       assertEquals((-1), node2.getLineno());
1807:       assertFalse(node2.isCase());
1808:       assertFalse(node2.isInc());
1809:       assertEquals((-1), node2.getCharno());
1810:       assertFalse(node2.isSwitch());
1811:       assertFalse(node2.isNE());
1812:       assertFalse(node2.isIn());
1813:       assertFalse(node2.isNumber());
1814:       assertFalse(node2.isGetterDef());
1815:       assertFalse(node2.isFor());
1816:       assertFalse(node2.isHook());
1817:       assertFalse(node2.isIf());
1818:       assertFalse(node2.hasOneChild());
1819:       assertTrue(node2.isString());
1820:       assertFalse(node2.isTry());
1821:       assertFalse(node2.isThis());
1822:       assertFalse(node2.isBlock());
1823:       assertFalse(node2.isWith());
1824:       assertFalse(node2.isRegExp());
1825:       assertFalse(node3.isCase());
1826:       assertFalse(node3.isString());
1827:       assertFalse(node3.isIn());
1828:       assertTrue(node3.hasChildren());
1829:       assertTrue(node3.hasMoreThanOneChild());
1830:       assertFalse(node3.isNE());
1831:       assertFalse(node3.isDelProp());
1832:       assertFalse(node3.isIf());
1833:       assertFalse(node3.isSwitch());
1834:       assertFalse(node3.isFor());
1835:       assertFalse(node3.isBreak());
1836:       assertEquals(53, node3.getType());
1837:       assertFalse(node3.isGetterDef());
1838:       assertFalse(node3.isTry());
1839:       assertEquals(16, node3.getCharno());
1840:       assertFalse(node3.isComma());
1841:       assertFalse(node3.isThis());
1842:       assertFalse(node3.isGetProp());
1843:       assertFalse(node3.isHook());
1844:       assertFalse(node3.isScript());
1845:       assertFalse(node3.isVoid());
1846:       assertFalse(node3.isTrue());
1847:       assertFalse(node3.isExprResult());
1848:       assertFalse(node3.isNull());
1849:       assertFalse(node3.isArrayLit());
1850:       assertFalse(node3.isParamList());
1851:       assertFalse(node3.isLabelName());
1852:       assertFalse(node3.isEmpty());
1853:       assertFalse(node3.isNew());
1854:       assertFalse(node3.isAdd());
1855:       assertFalse(node3.isLabel());
1856:       assertEquals(65552, node3.getSourcePosition());
1857:       assertFalse(node3.isVar());
1858:       assertFalse(node3.isAssignAdd());
1859:       assertFalse(node3.isDefaultCase());
1860:       assertFalse(node3.isDo());
1861:       assertFalse(node3.isContinue());
1862:       assertFalse(node3.isOr());
1863:       assertFalse(node3.isStringKey());
1864:       assertFalse(node3.isName());
1865:       assertFalse(node3.isGetElem());
1866:       assertFalse(node3.isAssign());
1867:       assertFalse(node3.isCall());
1868:       assertFalse(node3.isNumber());
1869:       assertFalse(node3.isDec());
1870:       assertFalse(node3.isTypeOf());
1871:       assertFalse(node3.isBlock());
1872:       assertFalse(node3.isReturn());
1873:       assertFalse(node3.hasOneChild());
1874:       assertFalse(node3.isWhile());
1875:       assertFalse(node3.isNot());
1876:       assertFalse(node3.isRegExp());
1877:       assertFalse(node3.isInstanceOf());
1878:       assertFalse(node3.isCatch());
1879:       assertFalse(node3.isFunction());
1880:       assertFalse(node3.isObjectLit());
1881:       assertFalse(node3.isWith());
1882:       assertFalse(node3.isDebugger());
1883:       assertFalse(node3.isAnd());
1884:       assertFalse(node3.isFalse());
1885:       assertFalse(node3.isThrow());
1886:       assertFalse(node3.isCast());
1887:       assertFalse(node3.isSetterDef());
1888:       assertFalse(node3.isInc());
1889:       assertEquals(16, node3.getLineno());
1890:       assertEquals(2, node3.getChildCount());
1891:       assertEquals(48, Node.DIRECTIVES);
1892:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1893:       assertEquals(39, Node.EMPTY_BLOCK);
1894:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1895:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1896:       assertEquals(50, Node.FREE_CALL);
1897:       assertEquals(4095, Node.COLUMN_MASK);
1898:       assertEquals(8, Node.FLAG_NO_THROWS);
1899:       assertEquals(40, Node.ORIGINALNAME_PROP);
1900:       assertEquals(57, Node.REFLECTED_OBJECT);
1901:       assertEquals(43, Node.IS_CONSTANT_NAME);
1902:       assertEquals(54, Node.SLASH_V);
1903:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1904:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1905:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1906:       assertEquals(1, Node.DECR_FLAG);
1907:       assertEquals(12, Node.COLUMN_BITS);
1908:       assertEquals(32, Node.INCRDECR_PROP);
1909:       assertEquals(37, Node.OPT_ARG_NAME);
1910:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1911:       assertEquals(47, Node.IS_DISPATCHER);
1912:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1913:       assertEquals(2, Node.POST_FLAG);
1914:       assertEquals(46, Node.IS_NAMESPACE);
1915:       assertEquals(56, Node.CHANGE_TIME);
1916:       assertEquals(49, Node.DIRECT_EVAL);
1917:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1918:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1919:       assertEquals(53, Node.INPUT_ID);
1920:       assertEquals(36, Node.QUOTED_PROP);
1921:       assertEquals(30, Node.VAR_ARGS_NAME);
1922:       assertEquals(52, Node.LENGTH);
1923:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1924:       assertEquals(55, Node.INFERRED_FUNCTION);
1925:       assertEquals(29, Node.JSDOC_INFO_PROP);
1926:       assertEquals(57, Node.LAST_PROP);
1927:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1928:       assertEquals(29, Node.JSDOC_INFO_PROP);
1929:       assertEquals(2, Node.POST_FLAG);
1930:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1931:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1932:       assertEquals(47, Node.IS_DISPATCHER);
1933:       assertEquals(53, Node.INPUT_ID);
1934:       assertEquals(32, Node.INCRDECR_PROP);
1935:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1936:       assertEquals(55, Node.INFERRED_FUNCTION);
1937:       assertEquals(12, Node.COLUMN_BITS);
1938:       assertEquals(36, Node.QUOTED_PROP);
1939:       assertEquals(4095, Node.COLUMN_MASK);
1940:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1941:       assertEquals(48, Node.DIRECTIVES);
1942:       assertEquals(37, Node.OPT_ARG_NAME);
1943:       assertEquals(56, Node.CHANGE_TIME);
1944:       assertEquals(49, Node.DIRECT_EVAL);
1945:       assertEquals(40, Node.ORIGINALNAME_PROP);
1946:       assertEquals(57, Node.REFLECTED_OBJECT);
1947:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1948:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1949:       assertEquals(50, Node.FREE_CALL);
1950:       assertEquals(52, Node.LENGTH);
1951:       assertEquals(8, Node.FLAG_NO_THROWS);
1952:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1953:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1954:       assertEquals(39, Node.EMPTY_BLOCK);
1955:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1956:       assertEquals(57, Node.LAST_PROP);
1957:       assertEquals(1, Node.DECR_FLAG);
1958:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1959:       assertEquals(30, Node.VAR_ARGS_NAME);
1960:       assertEquals(54, Node.SLASH_V);
1961:       assertEquals(46, Node.IS_NAMESPACE);
1962:       assertEquals(43, Node.IS_CONSTANT_NAME);
1963:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1964:       assertEquals(40, Node.ORIGINALNAME_PROP);
1965:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1966:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1967:       assertEquals(39, Node.EMPTY_BLOCK);
1968:       assertEquals(48, Node.DIRECTIVES);
1969:       assertEquals(52, Node.LENGTH);
1970:       assertEquals(57, Node.REFLECTED_OBJECT);
1971:       assertEquals(54, Node.SLASH_V);
1972:       assertEquals(55, Node.INFERRED_FUNCTION);
1973:       assertEquals(8, Node.FLAG_NO_THROWS);
1974:       assertEquals(50, Node.FREE_CALL);
1975:       assertEquals(30, Node.VAR_ARGS_NAME);
1976:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1977:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1978:       assertEquals(43, Node.IS_CONSTANT_NAME);
1979:       assertEquals(57, Node.LAST_PROP);
1980:       assertEquals(2, Node.POST_FLAG);
1981:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1982:       assertEquals(56, Node.CHANGE_TIME);
1983:       assertEquals(47, Node.IS_DISPATCHER);
1984:       assertEquals(29, Node.JSDOC_INFO_PROP);
1985:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1986:       assertEquals(37, Node.OPT_ARG_NAME);
1987:       assertEquals(46, Node.IS_NAMESPACE);
1988:       assertEquals(53, Node.INPUT_ID);
1989:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1990:       assertEquals(36, Node.QUOTED_PROP);
1991:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1992:       assertEquals(1, Node.DECR_FLAG);
1993:       assertEquals(49, Node.DIRECT_EVAL);
1994:       assertEquals(32, Node.INCRDECR_PROP);
1995:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1996:       assertEquals(12, Node.COLUMN_BITS);
1997:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1998:       assertEquals(4095, Node.COLUMN_MASK);
1999:       assertEquals(56, Node.CHANGE_TIME);
2000:       assertEquals(47, Node.IS_DISPATCHER);
2001:       assertEquals(2, Node.POST_FLAG);
2002:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2003:       assertEquals(37, Node.OPT_ARG_NAME);
2004:       assertEquals(29, Node.JSDOC_INFO_PROP);
2005:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2006:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2007:       assertEquals(46, Node.IS_NAMESPACE);
2008:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2009:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2010:       assertEquals(43, Node.IS_CONSTANT_NAME);
2011:       assertEquals(49, Node.DIRECT_EVAL);
2012:       assertEquals(4095, Node.COLUMN_MASK);
2013:       assertEquals(12, Node.COLUMN_BITS);
2014:       assertEquals(32, Node.INCRDECR_PROP);
2015:       assertEquals(1, Node.DECR_FLAG);
2016:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2017:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2018:       assertEquals(39, Node.EMPTY_BLOCK);
2019:       assertEquals(40, Node.ORIGINALNAME_PROP);
2020:       assertEquals(50, Node.FREE_CALL);
2021:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2022:       assertEquals(8, Node.FLAG_NO_THROWS);
2023:       assertEquals(57, Node.REFLECTED_OBJECT);
2024:       assertEquals(48, Node.DIRECTIVES);
2025:       assertEquals(54, Node.SLASH_V);
2026:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2027:       assertEquals(57, Node.LAST_PROP);
2028:       assertEquals(30, Node.VAR_ARGS_NAME);
2029:       assertEquals(36, Node.QUOTED_PROP);
2030:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2031:       assertEquals(53, Node.INPUT_ID);
2032:       assertEquals(55, Node.INFERRED_FUNCTION);
2033:       assertEquals(52, Node.LENGTH);
2034:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2035:       
2036:       Iterable<Node> iterable0 = node0.children();
2037:       assertFalse(iterable0.contains(node0));
2038:       assertNotNull(iterable0);
2039:       assertNotSame(node0, node1);
2040:       assertNotSame(node0, node2);
2041:       assertFalse(node0.equals((Object)node1));
2042:       assertFalse(node0.equals((Object)node3));
2043:       assertFalse(node0.equals((Object)node2));
2044:       assertFalse(node0.isScript());
2045:       assertFalse(node0.isExprResult());
2046:       assertFalse(node0.isWith());
2047:       assertFalse(node0.isNot());
2048:       assertFalse(node0.isObjectLit());
2049:       assertFalse(node0.isInstanceOf());
2050:       assertFalse(node0.isCast());
2051:       assertFalse(node0.isGetElem());
2052:       assertFalse(node0.isAnd());
2053:       assertFalse(node0.isLabelName());
2054:       assertFalse(node0.isNumber());
2055:       assertEquals((-1), node0.getSourcePosition());
2056:       assertFalse(node0.isDec());
2057:       assertFalse(node0.isBreak());
2058:       assertFalse(node0.hasChildren());
2059:       assertFalse(node0.isThis());
2060:       assertFalse(node0.isComma());
2061:       assertFalse(node0.isAssign());
2062:       assertFalse(node0.isTypeOf());
2063:       assertFalse(node0.hasOneChild());
2064:       assertFalse(node0.isHook());
2065:       assertFalse(node0.isReturn());
2066:       assertFalse(node0.isGetProp());
2067:       assertFalse(node0.isInc());
2068:       assertFalse(node0.isBlock());
2069:       assertFalse(node0.isContinue());
2070:       assertFalse(node0.hasMoreThanOneChild());
2071:       assertEquals((-1), node0.getLineno());
2072:       assertFalse(node0.isIf());
2073:       assertFalse(node0.isSetterDef());
2074:       assertFalse(node0.isNE());
2075:       assertFalse(node0.isFalse());
2076:       assertFalse(node0.isIn());
2077:       assertFalse(node0.isThrow());
2078:       assertFalse(node0.isDefaultCase());
2079:       assertFalse(node0.isTrue());
2080:       assertEquals(40, node0.getType());
2081:       assertFalse(node0.isDebugger());
2082:       assertFalse(node0.isFunction());
2083:       assertFalse(node0.isRegExp());
2084:       assertFalse(node0.isArrayLit());
2085:       assertFalse(node0.isCatch());
2086:       assertFalse(node0.isDelProp());
2087:       assertFalse(node0.isVoid());
2088:       assertFalse(node0.isParamList());
2089:       assertFalse(node0.isFor());
2090:       assertFalse(node0.isGetterDef());
2091:       assertFalse(node0.isCase());
2092:       assertFalse(node0.isTry());
2093:       assertTrue(node0.isString());
2094:       assertFalse(node0.isWhile());
2095:       assertEquals((-1), node0.getCharno());
2096:       assertFalse(node0.isCall());
2097:       assertFalse(node0.isStringKey());
2098:       assertFalse(node0.isSwitch());
2099:       assertFalse(node0.isName());
2100:       assertFalse(node0.isNull());
2101:       assertFalse(node0.isEmpty());
2102:       assertFalse(node0.isLabel());
2103:       assertFalse(node0.isOr());
2104:       assertEquals(0, node0.getChildCount());
2105:       assertFalse(node0.isVar());
2106:       assertFalse(node0.isAdd());
2107:       assertFalse(node0.isNew());
2108:       assertFalse(node0.isAssignAdd());
2109:       assertFalse(node0.isDo());
2110:       assertEquals(48, Node.DIRECTIVES);
2111:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2112:       assertEquals(39, Node.EMPTY_BLOCK);
2113:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2115:       assertEquals(50, Node.FREE_CALL);
2116:       assertEquals(4095, Node.COLUMN_MASK);
2117:       assertEquals(8, Node.FLAG_NO_THROWS);
2118:       assertEquals(40, Node.ORIGINALNAME_PROP);
2119:       assertEquals(57, Node.REFLECTED_OBJECT);
2120:       assertEquals(43, Node.IS_CONSTANT_NAME);
2121:       assertEquals(54, Node.SLASH_V);
2122:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2123:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2124:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2125:       assertEquals(1, Node.DECR_FLAG);
2126:       assertEquals(12, Node.COLUMN_BITS);
2127:       assertEquals(32, Node.INCRDECR_PROP);
2128:       assertEquals(37, Node.OPT_ARG_NAME);
2129:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2130:       assertEquals(47, Node.IS_DISPATCHER);
2131:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2132:       assertEquals(2, Node.POST_FLAG);
2133:       assertEquals(46, Node.IS_NAMESPACE);
2134:       assertEquals(56, Node.CHANGE_TIME);
2135:       assertEquals(49, Node.DIRECT_EVAL);
2136:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2137:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2138:       assertEquals(53, Node.INPUT_ID);
2139:       assertEquals(36, Node.QUOTED_PROP);
2140:       assertEquals(30, Node.VAR_ARGS_NAME);
2141:       assertEquals(52, Node.LENGTH);
2142:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2143:       assertEquals(55, Node.INFERRED_FUNCTION);
2144:       assertEquals(29, Node.JSDOC_INFO_PROP);
2145:       assertEquals(57, Node.LAST_PROP);
2146:       
2147:       boolean boolean4 = node3.isVoid();
2148:       assertNotSame(node0, node1);
2149:       assertNotSame(node0, node2);
2150:       assertSame(node1, node2);
2151:       assertNotSame(node1, node0);
2152:       assertNotSame(node2, node0);
2153:       assertSame(node2, node1);
2154:       assertFalse(boolean4);
2155:       assertFalse(node0.equals((Object)node1));
2156:       assertFalse(node0.equals((Object)node3));
2157:       assertFalse(node0.equals((Object)node2));
2158:       assertFalse(node1.equals((Object)node3));
2159:       assertFalse(node1.equals((Object)node0));
2160:       assertFalse(node2.equals((Object)node0));
2161:       assertFalse(node2.equals((Object)node3));
2162:       assertFalse(node3.equals((Object)node0));
2163:       assertFalse(node3.equals((Object)node1));
2164:       assertFalse(node3.equals((Object)node2));
2165:       assertTrue(boolean4 == boolean3);
2166:       assertTrue(boolean4 == boolean0);
2167:       assertTrue(boolean4 == boolean2);
2168:       assertTrue(boolean4 == boolean1);
2169:       assertFalse(node0.isScript());
2170:       assertFalse(node0.isExprResult());
2171:       assertFalse(node0.isWith());
2172:       assertFalse(node0.isNot());
2173:       assertFalse(node0.isObjectLit());
2174:       assertFalse(node0.isInstanceOf());
2175:       assertFalse(node0.isCast());
2176:       assertFalse(node0.isGetElem());
2177:       assertFalse(node0.isAnd());
2178:       assertFalse(node0.isLabelName());
2179:       assertFalse(node0.isNumber());
2180:       assertEquals((-1), node0.getSourcePosition());
2181:       assertFalse(node0.isDec());
2182:       assertFalse(node0.isBreak());
2183:       assertFalse(node0.hasChildren());
2184:       assertFalse(node0.isThis());
2185:       assertFalse(node0.isComma());
2186:       assertFalse(node0.isAssign());
2187:       assertFalse(node0.isTypeOf());
2188:       assertFalse(node0.hasOneChild());
2189:       assertFalse(node0.isHook());
2190:       assertFalse(node0.isReturn());
2191:       assertFalse(node0.isGetProp());
2192:       assertFalse(node0.isInc());
2193:       assertFalse(node0.isBlock());
2194:       assertFalse(node0.isContinue());
2195:       assertFalse(node0.hasMoreThanOneChild());
2196:       assertEquals((-1), node0.getLineno());
2197:       assertFalse(node0.isIf());
2198:       assertFalse(node0.isSetterDef());
2199:       assertFalse(node0.isNE());
2200:       assertFalse(node0.isFalse());
2201:       assertFalse(node0.isIn());
2202:       assertFalse(node0.isThrow());
2203:       assertFalse(node0.isDefaultCase());
2204:       assertFalse(node0.isTrue());
2205:       assertEquals(40, node0.getType());
2206:       assertFalse(node0.isDebugger());
2207:       assertFalse(node0.isFunction());
2208:       assertFalse(node0.isRegExp());
2209:       assertFalse(node0.isArrayLit());
2210:       assertFalse(node0.isCatch());
2211:       assertFalse(node0.isDelProp());
2212:       assertFalse(node0.isVoid());
2213:       assertFalse(node0.isParamList());
2214:       assertFalse(node0.isFor());
2215:       assertFalse(node0.isGetterDef());
2216:       assertFalse(node0.isCase());
2217:       assertFalse(node0.isTry());
2218:       assertTrue(node0.isString());
2219:       assertFalse(node0.isWhile());
2220:       assertEquals((-1), node0.getCharno());
2221:       assertFalse(node0.isCall());
2222:       assertFalse(node0.isStringKey());
2223:       assertFalse(node0.isSwitch());
2224:       assertFalse(node0.isName());
2225:       assertFalse(node0.isNull());
2226:       assertFalse(node0.isEmpty());
2227:       assertFalse(node0.isLabel());
2228:       assertFalse(node0.isOr());
2229:       assertEquals(0, node0.getChildCount());
2230:       assertFalse(node0.isVar());
2231:       assertFalse(node0.isAdd());
2232:       assertFalse(node0.isNew());
2233:       assertFalse(node0.isAssignAdd());
2234:       assertFalse(node0.isDo());
2235:       assertFalse(node1.isIn());
2236:       assertFalse(node1.isInc());
2237:       assertFalse(node1.isFor());
2238:       assertFalse(node1.isEmpty());
2239:       assertFalse(node1.isCase());
2240:       assertFalse(node1.isHook());
2241:       assertFalse(node1.isRegExp());
2242:       assertFalse(node1.isIf());
2243:       assertFalse(node1.isBreak());
2244:       assertFalse(node1.isNE());
2245:       assertFalse(node1.isTrue());
2246:       assertFalse(node1.isDelProp());
2247:       assertFalse(node1.isVoid());
2248:       assertFalse(node1.isInstanceOf());
2249:       assertEquals(0, node1.getChildCount());
2250:       assertFalse(node1.isCatch());
2251:       assertFalse(node1.isWith());
2252:       assertFalse(node1.isDefaultCase());
2253:       assertFalse(node1.isThis());
2254:       assertFalse(node1.isScript());
2255:       assertFalse(node1.isTry());
2256:       assertFalse(node1.hasOneChild());
2257:       assertFalse(node1.isArrayLit());
2258:       assertFalse(node1.isVar());
2259:       assertEquals((-1), node1.getCharno());
2260:       assertFalse(node1.isGetterDef());
2261:       assertFalse(node1.isStringKey());
2262:       assertFalse(node1.isParamList());
2263:       assertFalse(node1.isSwitch());
2264:       assertFalse(node1.isLabelName());
2265:       assertFalse(node1.isReturn());
2266:       assertFalse(node1.isContinue());
2267:       assertFalse(node1.isLabel());
2268:       assertFalse(node1.hasMoreThanOneChild());
2269:       assertFalse(node1.isOr());
2270:       assertFalse(node1.isTypeOf());
2271:       assertFalse(node1.isNumber());
2272:       assertFalse(node1.isDec());
2273:       assertFalse(node1.hasChildren());
2274:       assertFalse(node1.isWhile());
2275:       assertFalse(node1.isNew());
2276:       assertFalse(node1.isAssignAdd());
2277:       assertFalse(node1.isDo());
2278:       assertTrue(node1.isString());
2279:       assertFalse(node1.isCall());
2280:       assertFalse(node1.isBlock());
2281:       assertFalse(node1.isAdd());
2282:       assertFalse(node1.isAssign());
2283:       assertFalse(node1.isNull());
2284:       assertFalse(node1.isExprResult());
2285:       assertFalse(node1.isGetElem());
2286:       assertEquals((-1), node1.getLineno());
2287:       assertFalse(node1.isName());
2288:       assertFalse(node1.isComma());
2289:       assertFalse(node1.isNot());
2290:       assertFalse(node1.isObjectLit());
2291:       assertFalse(node1.isSetterDef());
2292:       assertEquals(40, node1.getType());
2293:       assertFalse(node1.isThrow());
2294:       assertFalse(node1.isGetProp());
2295:       assertFalse(node1.isCast());
2296:       assertFalse(node1.isFalse());
2297:       assertFalse(node1.isDebugger());
2298:       assertFalse(node1.isFunction());
2299:       assertEquals((-1), node1.getSourcePosition());
2300:       assertFalse(node1.isAnd());
2301:       assertFalse(node2.isAnd());
2302:       assertFalse(node2.isObjectLit());
2303:       assertFalse(node2.isInstanceOf());
2304:       assertFalse(node2.isGetProp());
2305:       assertFalse(node2.isScript());
2306:       assertFalse(node2.isNot());
2307:       assertFalse(node2.isThrow());
2308:       assertFalse(node2.isCast());
2309:       assertFalse(node2.isLabelName());
2310:       assertFalse(node2.isLabel());
2311:       assertFalse(node2.isFalse());
2312:       assertFalse(node2.isContinue());
2313:       assertFalse(node2.isWhile());
2314:       assertFalse(node2.isAssignAdd());
2315:       assertFalse(node2.isDo());
2316:       assertFalse(node2.isAdd());
2317:       assertEquals((-1), node2.getSourcePosition());
2318:       assertFalse(node2.isOr());
2319:       assertFalse(node2.isCall());
2320:       assertFalse(node2.isGetElem());
2321:       assertFalse(node2.isDelProp());
2322:       assertFalse(node2.isBreak());
2323:       assertFalse(node2.isName());
2324:       assertFalse(node2.isVoid());
2325:       assertFalse(node2.isComma());
2326:       assertFalse(node2.isExprResult());
2327:       assertFalse(node2.isReturn());
2328:       assertFalse(node2.hasChildren());
2329:       assertFalse(node2.isTypeOf());
2330:       assertFalse(node2.isDec());
2331:       assertFalse(node2.isAssign());
2332:       assertEquals(40, node2.getType());
2333:       assertFalse(node2.isCatch());
2334:       assertFalse(node2.isDefaultCase());
2335:       assertFalse(node2.isTrue());
2336:       assertFalse(node2.isParamList());
2337:       assertFalse(node2.isDebugger());
2338:       assertFalse(node2.isSetterDef());
2339:       assertFalse(node2.isNull());
2340:       assertFalse(node2.isVar());
2341:       assertFalse(node2.isStringKey());
2342:       assertFalse(node2.isEmpty());
2343:       assertFalse(node2.isNew());
2344:       assertFalse(node2.isArrayLit());
2345:       assertFalse(node2.isFunction());
2346:       assertEquals(0, node2.getChildCount());
2347:       assertFalse(node2.hasMoreThanOneChild());
2348:       assertEquals((-1), node2.getLineno());
2349:       assertFalse(node2.isCase());
2350:       assertFalse(node2.isInc());
2351:       assertEquals((-1), node2.getCharno());
2352:       assertFalse(node2.isSwitch());
2353:       assertFalse(node2.isNE());
2354:       assertFalse(node2.isIn());
2355:       assertFalse(node2.isNumber());
2356:       assertFalse(node2.isGetterDef());
2357:       assertFalse(node2.isFor());
2358:       assertFalse(node2.isHook());
2359:       assertFalse(node2.isIf());
2360:       assertFalse(node2.hasOneChild());
2361:       assertTrue(node2.isString());
2362:       assertFalse(node2.isTry());
2363:       assertFalse(node2.isThis());
2364:       assertFalse(node2.isBlock());
2365:       assertFalse(node2.isWith());
2366:       assertFalse(node2.isRegExp());
2367:       assertFalse(node3.isCase());
2368:       assertFalse(node3.isString());
2369:       assertFalse(node3.isIn());
2370:       assertTrue(node3.hasChildren());
2371:       assertTrue(node3.hasMoreThanOneChild());
2372:       assertFalse(node3.isNE());
2373:       assertFalse(node3.isDelProp());
2374:       assertFalse(node3.isIf());
2375:       assertFalse(node3.isSwitch());
2376:       assertFalse(node3.isFor());
2377:       assertFalse(node3.isBreak());
2378:       assertEquals(53, node3.getType());
2379:       assertFalse(node3.isGetterDef());
2380:       assertFalse(node3.isTry());
2381:       assertEquals(16, node3.getCharno());
2382:       assertFalse(node3.isComma());
2383:       assertFalse(node3.isThis());
2384:       assertFalse(node3.isGetProp());
2385:       assertFalse(node3.isHook());
2386:       assertFalse(node3.isScript());
2387:       assertFalse(node3.isVoid());
2388:       assertFalse(node3.isTrue());
2389:       assertFalse(node3.isExprResult());
2390:       assertFalse(node3.isNull());
2391:       assertFalse(node3.isArrayLit());
2392:       assertFalse(node3.isParamList());
2393:       assertFalse(node3.isLabelName());
2394:       assertFalse(node3.isEmpty());
2395:       assertFalse(node3.isNew());
2396:       assertFalse(node3.isAdd());
2397:       assertFalse(node3.isLabel());
2398:       assertEquals(65552, node3.getSourcePosition());
2399:       assertFalse(node3.isVar());
2400:       assertFalse(node3.isAssignAdd());
2401:       assertFalse(node3.isDefaultCase());
2402:       assertFalse(node3.isDo());
2403:       assertFalse(node3.isContinue());
2404:       assertFalse(node3.isOr());
2405:       assertFalse(node3.isStringKey());
2406:       assertFalse(node3.isName());
2407:       assertFalse(node3.isGetElem());
2408:       assertFalse(node3.isAssign());
2409:       assertFalse(node3.isCall());
2410:       assertFalse(node3.isNumber());
2411:       assertFalse(node3.isDec());
2412:       assertFalse(node3.isTypeOf());
2413:       assertFalse(node3.isBlock());
2414:       assertFalse(node3.isReturn());
2415:       assertFalse(node3.hasOneChild());
2416:       assertFalse(node3.isWhile());
2417:       assertFalse(node3.isNot());
2418:       assertFalse(node3.isRegExp());
2419:       assertFalse(node3.isInstanceOf());
2420:       assertFalse(node3.isCatch());
2421:       assertFalse(node3.isFunction());
2422:       assertFalse(node3.isObjectLit());
2423:       assertFalse(node3.isWith());
2424:       assertFalse(node3.isDebugger());
2425:       assertFalse(node3.isAnd());
2426:       assertFalse(node3.isFalse());
2427:       assertFalse(node3.isThrow());
2428:       assertFalse(node3.isCast());
2429:       assertFalse(node3.isSetterDef());
2430:       assertFalse(node3.isInc());
2431:       assertEquals(16, node3.getLineno());
2432:       assertEquals(2, node3.getChildCount());
2433:       assertEquals(48, Node.DIRECTIVES);
2434:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2435:       assertEquals(39, Node.EMPTY_BLOCK);
2436:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2437:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2438:       assertEquals(50, Node.FREE_CALL);
2439:       assertEquals(4095, Node.COLUMN_MASK);
2440:       assertEquals(8, Node.FLAG_NO_THROWS);
2441:       assertEquals(40, Node.ORIGINALNAME_PROP);
2442:       assertEquals(57, Node.REFLECTED_OBJECT);
2443:       assertEquals(43, Node.IS_CONSTANT_NAME);
2444:       assertEquals(54, Node.SLASH_V);
2445:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2446:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2447:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2448:       assertEquals(1, Node.DECR_FLAG);
2449:       assertEquals(12, Node.COLUMN_BITS);
2450:       assertEquals(32, Node.INCRDECR_PROP);
2451:       assertEquals(37, Node.OPT_ARG_NAME);
2452:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2453:       assertEquals(47, Node.IS_DISPATCHER);
2454:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2455:       assertEquals(2, Node.POST_FLAG);
2456:       assertEquals(46, Node.IS_NAMESPACE);
2457:       assertEquals(56, Node.CHANGE_TIME);
2458:       assertEquals(49, Node.DIRECT_EVAL);
2459:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2460:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2461:       assertEquals(53, Node.INPUT_ID);
2462:       assertEquals(36, Node.QUOTED_PROP);
2463:       assertEquals(30, Node.VAR_ARGS_NAME);
2464:       assertEquals(52, Node.LENGTH);
2465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2466:       assertEquals(55, Node.INFERRED_FUNCTION);
2467:       assertEquals(29, Node.JSDOC_INFO_PROP);
2468:       assertEquals(57, Node.LAST_PROP);
2469:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2470:       assertEquals(29, Node.JSDOC_INFO_PROP);
2471:       assertEquals(2, Node.POST_FLAG);
2472:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2473:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2474:       assertEquals(47, Node.IS_DISPATCHER);
2475:       assertEquals(53, Node.INPUT_ID);
2476:       assertEquals(32, Node.INCRDECR_PROP);
2477:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2478:       assertEquals(55, Node.INFERRED_FUNCTION);
2479:       assertEquals(12, Node.COLUMN_BITS);
2480:       assertEquals(36, Node.QUOTED_PROP);
2481:       assertEquals(4095, Node.COLUMN_MASK);
2482:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2483:       assertEquals(48, Node.DIRECTIVES);
2484:       assertEquals(37, Node.OPT_ARG_NAME);
2485:       assertEquals(56, Node.CHANGE_TIME);
2486:       assertEquals(49, Node.DIRECT_EVAL);
2487:       assertEquals(40, Node.ORIGINALNAME_PROP);
2488:       assertEquals(57, Node.REFLECTED_OBJECT);
2489:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2490:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2491:       assertEquals(50, Node.FREE_CALL);
2492:       assertEquals(52, Node.LENGTH);
2493:       assertEquals(8, Node.FLAG_NO_THROWS);
2494:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2495:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2496:       assertEquals(39, Node.EMPTY_BLOCK);
2497:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2498:       assertEquals(57, Node.LAST_PROP);
2499:       assertEquals(1, Node.DECR_FLAG);
2500:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2501:       assertEquals(30, Node.VAR_ARGS_NAME);
2502:       assertEquals(54, Node.SLASH_V);
2503:       assertEquals(46, Node.IS_NAMESPACE);
2504:       assertEquals(43, Node.IS_CONSTANT_NAME);
2505:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2506:       assertEquals(40, Node.ORIGINALNAME_PROP);
2507:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2508:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2509:       assertEquals(39, Node.EMPTY_BLOCK);
2510:       assertEquals(48, Node.DIRECTIVES);
2511:       assertEquals(52, Node.LENGTH);
2512:       assertEquals(57, Node.REFLECTED_OBJECT);
2513:       assertEquals(54, Node.SLASH_V);
2514:       assertEquals(55, Node.INFERRED_FUNCTION);
2515:       assertEquals(8, Node.FLAG_NO_THROWS);
2516:       assertEquals(50, Node.FREE_CALL);
2517:       assertEquals(30, Node.VAR_ARGS_NAME);
2518:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2519:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2520:       assertEquals(43, Node.IS_CONSTANT_NAME);
2521:       assertEquals(57, Node.LAST_PROP);
2522:       assertEquals(2, Node.POST_FLAG);
2523:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2524:       assertEquals(56, Node.CHANGE_TIME);
2525:       assertEquals(47, Node.IS_DISPATCHER);
2526:       assertEquals(29, Node.JSDOC_INFO_PROP);
2527:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2528:       assertEquals(37, Node.OPT_ARG_NAME);
2529:       
2530:       // Undeclared exception!
2531:       try { 
2532:         node2.addChildToFront(node0);
2533:         fail("Expecting exception: IllegalArgumentException");
2534:       
2535:       } catch(IllegalArgumentException e) {
2536:          //
2537:          // no message in exception (getMessage() returned null)
2538:          //
2539:          verifyException("com.google.common.base.Preconditions", e);
2540:       }
2541:   }
2542: }
RegularFileObject[/tmp/EvoSuite_146_1628159320995/com/google/javascript/rhino/Node_146_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_146_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_146_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_146_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.NamedType",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.JSDocInfo$Marker",
356:       "com.google.common.collect.ImmutableSet",
357:       "com.google.common.collect.EmptyImmutableSet",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 10:28:41.548 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertNotNull(node0);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);

boolean boolean0 = node0.isWhile();
assertFalse(boolean0);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);

boolean boolean1 = node0.isTypeOf();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);

boolean boolean2 = node0.isTypeOf();
assertFalse(boolean2);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);

boolean boolean3 = node0.isAssign();
assertFalse(boolean3);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);

MockPrintStream mockPrintStream0 = new MockPrintStream("T*");
assertNotNull(mockPrintStream0);

Node node1 = Node.newString("");
assertNotNull(node1);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertTrue(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssign());
assertFalse(node1.isNull());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
assertNull(node_NodeMismatch0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertTrue(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssign());
assertFalse(node1.isNull());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node2 = node1.useSourceInfoIfMissingFrom(node0);
assertNotNull(node2);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertSame(node2, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertTrue(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssign());
assertFalse(node1.isNull());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertEquals(40, node2.getType());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.hasOneChild());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Node node3 = new Node(53, node0, node1, node2, 16, 16);
assertNotNull(node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertTrue(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssign());
assertFalse(node1.isNull());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertEquals(40, node2.getType());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.hasOneChild());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node3.isCase());
assertFalse(node3.isString());
assertFalse(node3.isIn());
assertTrue(node3.hasChildren());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isNE());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isSwitch());
assertFalse(node3.isFor());
assertFalse(node3.isBreak());
assertEquals(53, node3.getType());
assertFalse(node3.isGetterDef());
assertFalse(node3.isTry());
assertEquals(16, node3.getCharno());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.isHook());
assertFalse(node3.isScript());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isNull());
assertFalse(node3.isArrayLit());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isEmpty());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isLabel());
assertEquals(65552, node3.getSourcePosition());
assertFalse(node3.isVar());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isCall());
assertFalse(node3.isNumber());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBlock());
assertFalse(node3.isReturn());
assertFalse(node3.hasOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isNot());
assertFalse(node3.isRegExp());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isWith());
assertFalse(node3.isDebugger());
assertFalse(node3.isAnd());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertEquals(16, node3.getLineno());
assertEquals(2, node3.getChildCount());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

node3.setWasEmptyNode(false);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertSame(node2, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertTrue(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssign());
assertFalse(node1.isNull());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertEquals(40, node2.getType());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.hasOneChild());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node3.isCase());
assertFalse(node3.isString());
assertFalse(node3.isIn());
assertTrue(node3.hasChildren());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isNE());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isSwitch());
assertFalse(node3.isFor());
assertFalse(node3.isBreak());
assertEquals(53, node3.getType());
assertFalse(node3.isGetterDef());
assertFalse(node3.isTry());
assertEquals(16, node3.getCharno());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.isHook());
assertFalse(node3.isScript());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isNull());
assertFalse(node3.isArrayLit());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isEmpty());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isLabel());
assertEquals(65552, node3.getSourcePosition());
assertFalse(node3.isVar());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isCall());
assertFalse(node3.isNumber());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBlock());
assertFalse(node3.isReturn());
assertFalse(node3.hasOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isNot());
assertFalse(node3.isRegExp());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isWith());
assertFalse(node3.isDebugger());
assertFalse(node3.isAnd());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertEquals(16, node3.getLineno());
assertEquals(2, node3.getChildCount());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);

boolean boolean4 = node3.isVoid();
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertSame(node2, node1);
assertFalse(boolean4);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertTrue(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isAssign());
assertFalse(node1.isNull());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertEquals(40, node2.getType());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.hasOneChild());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node3.isCase());
assertFalse(node3.isString());
assertFalse(node3.isIn());
assertTrue(node3.hasChildren());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isNE());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isSwitch());
assertFalse(node3.isFor());
assertFalse(node3.isBreak());
assertEquals(53, node3.getType());
assertFalse(node3.isGetterDef());
assertFalse(node3.isTry());
assertEquals(16, node3.getCharno());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.isHook());
assertFalse(node3.isScript());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isNull());
assertFalse(node3.isArrayLit());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isEmpty());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isLabel());
assertEquals(65552, node3.getSourcePosition());
assertFalse(node3.isVar());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isCall());
assertFalse(node3.isNumber());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBlock());
assertFalse(node3.isReturn());
assertFalse(node3.hasOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isNot());
assertFalse(node3.isRegExp());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isWith());
assertFalse(node3.isDebugger());
assertFalse(node3.isAnd());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertEquals(16, node3.getLineno());
assertEquals(2, node3.getChildCount());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);

node2.addChildToFront(node0);

[MASTER] 10:28:41.949 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_147_1628159321549/com/google/javascript/rhino/Node_147_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_147_1628159321549/com/google/javascript/rhino/Node_147_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:41.949 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:41.949 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:41.949 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 512
[MASTER] 10:28:41.950 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_147_1628159321549/com/google/javascript/rhino/Node_147_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.Set;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_147_tmp__ESTest extends Node_147_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("");
22:       assertNotNull(node0);
23:       assertFalse(node0.isIf());
24:       assertFalse(node0.isFor());
25:       assertFalse(node0.isNE());
26:       assertFalse(node0.isEmpty());
27:       assertFalse(node0.isGetterDef());
28:       assertFalse(node0.isArrayLit());
29:       assertFalse(node0.isDelProp());
30:       assertFalse(node0.isVoid());
31:       assertFalse(node0.isRegExp());
32:       assertFalse(node0.isSwitch());
33:       assertEquals((-1), node0.getCharno());
34:       assertFalse(node0.isDebugger());
35:       assertFalse(node0.isHook());
36:       assertFalse(node0.isCase());
37:       assertFalse(node0.isTry());
38:       assertFalse(node0.isSetterDef());
39:       assertFalse(node0.isThis());
40:       assertFalse(node0.isFalse());
41:       assertFalse(node0.isInstanceOf());
42:       assertFalse(node0.isCatch());
43:       assertFalse(node0.isAnd());
44:       assertFalse(node0.isInc());
45:       assertEquals(40, node0.getType());
46:       assertFalse(node0.isContinue());
47:       assertFalse(node0.isFunction());
48:       assertFalse(node0.isIn());
49:       assertFalse(node0.isThrow());
50:       assertFalse(node0.isNumber());
51:       assertEquals((-1), node0.getSourcePosition());
52:       assertFalse(node0.isDec());
53:       assertFalse(node0.isTypeOf());
54:       assertFalse(node0.hasChildren());
55:       assertFalse(node0.isLabel());
56:       assertFalse(node0.isOr());
57:       assertFalse(node0.isAssign());
58:       assertFalse(node0.hasMoreThanOneChild());
59:       assertFalse(node0.isCast());
60:       assertFalse(node0.isGetElem());
61:       assertEquals((-1), node0.getLineno());
62:       assertFalse(node0.isLabelName());
63:       assertFalse(node0.isExprResult());
64:       assertFalse(node0.isWhile());
65:       assertFalse(node0.isScript());
66:       assertFalse(node0.isBlock());
67:       assertFalse(node0.isWith());
68:       assertFalse(node0.isObjectLit());
69:       assertFalse(node0.isNot());
70:       assertFalse(node0.hasOneChild());
71:       assertFalse(node0.isReturn());
72:       assertTrue(node0.isString());
73:       assertFalse(node0.isGetProp());
74:       assertFalse(node0.isNull());
75:       assertFalse(node0.isBreak());
76:       assertFalse(node0.isParamList());
77:       assertFalse(node0.isComma());
78:       assertEquals(0, node0.getChildCount());
79:       assertFalse(node0.isCall());
80:       assertFalse(node0.isStringKey());
81:       assertFalse(node0.isName());
82:       assertFalse(node0.isDefaultCase());
83:       assertFalse(node0.isTrue());
84:       assertFalse(node0.isVar());
85:       assertFalse(node0.isAdd());
86:       assertFalse(node0.isNew());
87:       assertFalse(node0.isAssignAdd());
88:       assertFalse(node0.isDo());
89:       
90:       boolean boolean0 = node0.isWhile();
91:       assertFalse(boolean0);
92:       assertFalse(node0.isIf());
93:       assertFalse(node0.isFor());
94:       assertFalse(node0.isNE());
95:       assertFalse(node0.isEmpty());
96:       assertFalse(node0.isGetterDef());
97:       assertFalse(node0.isArrayLit());
98:       assertFalse(node0.isDelProp());
99:       assertFalse(node0.isVoid());
100:       assertFalse(node0.isRegExp());
101:       assertFalse(node0.isSwitch());
102:       assertEquals((-1), node0.getCharno());
103:       assertFalse(node0.isDebugger());
104:       assertFalse(node0.isHook());
105:       assertFalse(node0.isCase());
106:       assertFalse(node0.isTry());
107:       assertFalse(node0.isSetterDef());
108:       assertFalse(node0.isThis());
109:       assertFalse(node0.isFalse());
110:       assertFalse(node0.isInstanceOf());
111:       assertFalse(node0.isCatch());
112:       assertFalse(node0.isAnd());
113:       assertFalse(node0.isInc());
114:       assertEquals(40, node0.getType());
115:       assertFalse(node0.isContinue());
116:       assertFalse(node0.isFunction());
117:       assertFalse(node0.isIn());
118:       assertFalse(node0.isThrow());
119:       assertFalse(node0.isNumber());
120:       assertEquals((-1), node0.getSourcePosition());
121:       assertFalse(node0.isDec());
122:       assertFalse(node0.isTypeOf());
123:       assertFalse(node0.hasChildren());
124:       assertFalse(node0.isLabel());
125:       assertFalse(node0.isOr());
126:       assertFalse(node0.isAssign());
127:       assertFalse(node0.hasMoreThanOneChild());
128:       assertFalse(node0.isCast());
129:       assertFalse(node0.isGetElem());
130:       assertEquals((-1), node0.getLineno());
131:       assertFalse(node0.isLabelName());
132:       assertFalse(node0.isExprResult());
133:       assertFalse(node0.isWhile());
134:       assertFalse(node0.isScript());
135:       assertFalse(node0.isBlock());
136:       assertFalse(node0.isWith());
137:       assertFalse(node0.isObjectLit());
138:       assertFalse(node0.isNot());
139:       assertFalse(node0.hasOneChild());
140:       assertFalse(node0.isReturn());
141:       assertTrue(node0.isString());
142:       assertFalse(node0.isGetProp());
143:       assertFalse(node0.isNull());
144:       assertFalse(node0.isBreak());
145:       assertFalse(node0.isParamList());
146:       assertFalse(node0.isComma());
147:       assertEquals(0, node0.getChildCount());
148:       assertFalse(node0.isCall());
149:       assertFalse(node0.isStringKey());
150:       assertFalse(node0.isName());
151:       assertFalse(node0.isDefaultCase());
152:       assertFalse(node0.isTrue());
153:       assertFalse(node0.isVar());
154:       assertFalse(node0.isAdd());
155:       assertFalse(node0.isNew());
156:       assertFalse(node0.isAssignAdd());
157:       assertFalse(node0.isDo());
158:       
159:       boolean boolean1 = node0.isTypeOf();
160:       assertFalse(boolean1);
161:       assertTrue(boolean1 == boolean0);
162:       assertFalse(node0.isIf());
163:       assertFalse(node0.isFor());
164:       assertFalse(node0.isNE());
165:       assertFalse(node0.isEmpty());
166:       assertFalse(node0.isGetterDef());
167:       assertFalse(node0.isArrayLit());
168:       assertFalse(node0.isDelProp());
169:       assertFalse(node0.isVoid());
170:       assertFalse(node0.isRegExp());
171:       assertFalse(node0.isSwitch());
172:       assertEquals((-1), node0.getCharno());
173:       assertFalse(node0.isDebugger());
174:       assertFalse(node0.isHook());
175:       assertFalse(node0.isCase());
176:       assertFalse(node0.isTry());
177:       assertFalse(node0.isSetterDef());
178:       assertFalse(node0.isThis());
179:       assertFalse(node0.isFalse());
180:       assertFalse(node0.isInstanceOf());
181:       assertFalse(node0.isCatch());
182:       assertFalse(node0.isAnd());
183:       assertFalse(node0.isInc());
184:       assertEquals(40, node0.getType());
185:       assertFalse(node0.isContinue());
186:       assertFalse(node0.isFunction());
187:       assertFalse(node0.isIn());
188:       assertFalse(node0.isThrow());
189:       assertFalse(node0.isNumber());
190:       assertEquals((-1), node0.getSourcePosition());
191:       assertFalse(node0.isDec());
192:       assertFalse(node0.isTypeOf());
193:       assertFalse(node0.hasChildren());
194:       assertFalse(node0.isLabel());
195:       assertFalse(node0.isOr());
196:       assertFalse(node0.isAssign());
197:       assertFalse(node0.hasMoreThanOneChild());
198:       assertFalse(node0.isCast());
199:       assertFalse(node0.isGetElem());
200:       assertEquals((-1), node0.getLineno());
201:       assertFalse(node0.isLabelName());
202:       assertFalse(node0.isExprResult());
203:       assertFalse(node0.isWhile());
204:       assertFalse(node0.isScript());
205:       assertFalse(node0.isBlock());
206:       assertFalse(node0.isWith());
207:       assertFalse(node0.isObjectLit());
208:       assertFalse(node0.isNot());
209:       assertFalse(node0.hasOneChild());
210:       assertFalse(node0.isReturn());
211:       assertTrue(node0.isString());
212:       assertFalse(node0.isGetProp());
213:       assertFalse(node0.isNull());
214:       assertFalse(node0.isBreak());
215:       assertFalse(node0.isParamList());
216:       assertFalse(node0.isComma());
217:       assertEquals(0, node0.getChildCount());
218:       assertFalse(node0.isCall());
219:       assertFalse(node0.isStringKey());
220:       assertFalse(node0.isName());
221:       assertFalse(node0.isDefaultCase());
222:       assertFalse(node0.isTrue());
223:       assertFalse(node0.isVar());
224:       assertFalse(node0.isAdd());
225:       assertFalse(node0.isNew());
226:       assertFalse(node0.isAssignAdd());
227:       assertFalse(node0.isDo());
228:       
229:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
230:       assertNotNull(node_SideEffectFlags0);
231:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
232:       assertEquals(0, node_SideEffectFlags0.valueOf());
233:       
234:       Node node1 = Node.newNumber((double) 49);
235:       assertNotNull(node1);
236:       assertFalse(node1.equals((Object)node0));
237:       assertFalse(node1.hasOneChild());
238:       assertFalse(node1.isLabelName());
239:       assertFalse(node1.isAssign());
240:       assertFalse(node1.isGetElem());
241:       assertFalse(node1.isCast());
242:       assertFalse(node1.isDec());
243:       assertFalse(node1.isTypeOf());
244:       assertFalse(node1.isReturn());
245:       assertFalse(node1.isAssignAdd());
246:       assertFalse(node1.isLabel());
247:       assertFalse(node1.hasChildren());
248:       assertFalse(node1.hasMoreThanOneChild());
249:       assertFalse(node1.isDo());
250:       assertFalse(node1.isWith());
251:       assertEquals((-1), node1.getLineno());
252:       assertFalse(node1.isInstanceOf());
253:       assertFalse(node1.isExprResult());
254:       assertFalse(node1.isOr());
255:       assertFalse(node1.isCall());
256:       assertFalse(node1.isName());
257:       assertFalse(node1.isFalse());
258:       assertFalse(node1.isBreak());
259:       assertFalse(node1.isSetterDef());
260:       assertFalse(node1.isComma());
261:       assertFalse(node1.isInc());
262:       assertFalse(node1.isGetProp());
263:       assertFalse(node1.isWhile());
264:       assertFalse(node1.isThrow());
265:       assertFalse(node1.isContinue());
266:       assertFalse(node1.isAnd());
267:       assertFalse(node1.isNot());
268:       assertFalse(node1.isObjectLit());
269:       assertTrue(node1.isNumber());
270:       assertFalse(node1.isString());
271:       assertFalse(node1.isDebugger());
272:       assertEquals((-1), node1.getSourcePosition());
273:       assertFalse(node1.isArrayLit());
274:       assertFalse(node1.isEmpty());
275:       assertFalse(node1.isFunction());
276:       assertFalse(node1.isTry());
277:       assertFalse(node1.isRegExp());
278:       assertFalse(node1.isDefaultCase());
279:       assertFalse(node1.isFor());
280:       assertFalse(node1.isCatch());
281:       assertFalse(node1.isIn());
282:       assertFalse(node1.isTrue());
283:       assertFalse(node1.isDelProp());
284:       assertFalse(node1.isVoid());
285:       assertFalse(node1.isIf());
286:       assertFalse(node1.isNull());
287:       assertFalse(node1.isNE());
288:       assertFalse(node1.isAdd());
289:       assertFalse(node1.isThis());
290:       assertFalse(node1.isNew());
291:       assertEquals(39, node1.getType());
292:       assertFalse(node1.isBlock());
293:       assertFalse(node1.isHook());
294:       assertFalse(node1.isVar());
295:       assertFalse(node1.isCase());
296:       assertEquals(0, node1.getChildCount());
297:       assertFalse(node1.isScript());
298:       assertFalse(node1.isSwitch());
299:       assertFalse(node1.isParamList());
300:       assertEquals((-1), node1.getCharno());
301:       assertFalse(node1.isGetterDef());
302:       assertFalse(node1.isStringKey());
303:       
304:       node0.removeProp(657);
305:       assertFalse(node0.equals((Object)node1));
306:       assertFalse(node0.isIf());
307:       assertFalse(node0.isFor());
308:       assertFalse(node0.isNE());
309:       assertFalse(node0.isEmpty());
310:       assertFalse(node0.isGetterDef());
311:       assertFalse(node0.isArrayLit());
312:       assertFalse(node0.isDelProp());
313:       assertFalse(node0.isVoid());
314:       assertFalse(node0.isRegExp());
315:       assertFalse(node0.isSwitch());
316:       assertEquals((-1), node0.getCharno());
317:       assertFalse(node0.isDebugger());
318:       assertFalse(node0.isHook());
319:       assertFalse(node0.isCase());
320:       assertFalse(node0.isTry());
321:       assertFalse(node0.isSetterDef());
322:       assertFalse(node0.isThis());
323:       assertFalse(node0.isFalse());
324:       assertFalse(node0.isInstanceOf());
325:       assertFalse(node0.isCatch());
326:       assertFalse(node0.isAnd());
327:       assertFalse(node0.isInc());
328:       assertEquals(40, node0.getType());
329:       assertFalse(node0.isContinue());
330:       assertFalse(node0.isFunction());
331:       assertFalse(node0.isIn());
332:       assertFalse(node0.isThrow());
333:       assertFalse(node0.isNumber());
334:       assertEquals((-1), node0.getSourcePosition());
335:       assertFalse(node0.isDec());
336:       assertFalse(node0.isTypeOf());
337:       assertFalse(node0.hasChildren());
338:       assertFalse(node0.isLabel());
339:       assertFalse(node0.isOr());
340:       assertFalse(node0.isAssign());
341:       assertFalse(node0.hasMoreThanOneChild());
342:       assertFalse(node0.isCast());
343:       assertFalse(node0.isGetElem());
344:       assertEquals((-1), node0.getLineno());
345:       assertFalse(node0.isLabelName());
346:       assertFalse(node0.isExprResult());
347:       assertFalse(node0.isWhile());
348:       assertFalse(node0.isScript());
349:       assertFalse(node0.isBlock());
350:       assertFalse(node0.isWith());
351:       assertFalse(node0.isObjectLit());
352:       assertFalse(node0.isNot());
353:       assertFalse(node0.hasOneChild());
354:       assertFalse(node0.isReturn());
355:       assertTrue(node0.isString());
356:       assertFalse(node0.isGetProp());
357:       assertFalse(node0.isNull());
358:       assertFalse(node0.isBreak());
359:       assertFalse(node0.isParamList());
360:       assertFalse(node0.isComma());
361:       assertEquals(0, node0.getChildCount());
362:       assertFalse(node0.isCall());
363:       assertFalse(node0.isStringKey());
364:       assertFalse(node0.isName());
365:       assertFalse(node0.isDefaultCase());
366:       assertFalse(node0.isTrue());
367:       assertFalse(node0.isVar());
368:       assertFalse(node0.isAdd());
369:       assertFalse(node0.isNew());
370:       assertFalse(node0.isAssignAdd());
371:       assertFalse(node0.isDo());
372:       
373:       Node node2 = new Node(657, node0, node0, node0, node0);
374:       assertNotNull(node2);
375:       assertFalse(node0.equals((Object)node1));
376:       assertFalse(node2.equals((Object)node1));
377:       assertFalse(node2.equals((Object)node0));
378:       assertFalse(node0.isIf());
379:       assertFalse(node0.isFor());
380:       assertFalse(node0.isNE());
381:       assertFalse(node0.isEmpty());
382:       assertFalse(node0.isGetterDef());
383:       assertFalse(node0.isArrayLit());
384:       assertFalse(node0.isDelProp());
385:       assertFalse(node0.isVoid());
386:       assertFalse(node0.isRegExp());
387:       assertFalse(node0.isSwitch());
388:       assertEquals((-1), node0.getCharno());
389:       assertFalse(node0.isDebugger());
390:       assertFalse(node0.isHook());
391:       assertFalse(node0.isCase());
392:       assertFalse(node0.isTry());
393:       assertFalse(node0.isSetterDef());
394:       assertFalse(node0.isThis());
395:       assertFalse(node0.isFalse());
396:       assertFalse(node0.isInstanceOf());
397:       assertFalse(node0.isCatch());
398:       assertFalse(node0.isAnd());
399:       assertFalse(node0.isInc());
400:       assertEquals(40, node0.getType());
401:       assertFalse(node0.isContinue());
402:       assertFalse(node0.isFunction());
403:       assertFalse(node0.isIn());
404:       assertFalse(node0.isThrow());
405:       assertFalse(node0.isNumber());
406:       assertEquals((-1), node0.getSourcePosition());
407:       assertFalse(node0.isDec());
408:       assertFalse(node0.isTypeOf());
409:       assertFalse(node0.hasChildren());
410:       assertFalse(node0.isLabel());
411:       assertFalse(node0.isOr());
412:       assertFalse(node0.isAssign());
413:       assertFalse(node0.hasMoreThanOneChild());
414:       assertFalse(node0.isCast());
415:       assertFalse(node0.isGetElem());
416:       assertEquals((-1), node0.getLineno());
417:       assertFalse(node0.isLabelName());
418:       assertFalse(node0.isExprResult());
419:       assertFalse(node0.isWhile());
420:       assertFalse(node0.isScript());
421:       assertFalse(node0.isBlock());
422:       assertFalse(node0.isWith());
423:       assertFalse(node0.isObjectLit());
424:       assertFalse(node0.isNot());
425:       assertFalse(node0.hasOneChild());
426:       assertFalse(node0.isReturn());
427:       assertTrue(node0.isString());
428:       assertFalse(node0.isGetProp());
429:       assertFalse(node0.isNull());
430:       assertFalse(node0.isBreak());
431:       assertFalse(node0.isParamList());
432:       assertFalse(node0.isComma());
433:       assertEquals(0, node0.getChildCount());
434:       assertFalse(node0.isCall());
435:       assertFalse(node0.isStringKey());
436:       assertFalse(node0.isName());
437:       assertFalse(node0.isDefaultCase());
438:       assertFalse(node0.isTrue());
439:       assertFalse(node0.isVar());
440:       assertFalse(node0.isAdd());
441:       assertFalse(node0.isNew());
442:       assertFalse(node0.isAssignAdd());
443:       assertFalse(node0.isDo());
444:       assertFalse(node2.isFalse());
445:       assertFalse(node2.isBreak());
446:       assertEquals((-1), node2.getCharno());
447:       assertFalse(node2.isSwitch());
448:       assertFalse(node2.isAnd());
449:       assertFalse(node2.isIn());
450:       assertEquals(657, node2.getType());
451:       assertFalse(node2.isInc());
452:       assertFalse(node2.isThrow());
453:       assertFalse(node2.isArrayLit());
454:       assertFalse(node2.isLabelName());
455:       assertFalse(node2.isGetterDef());
456:       assertFalse(node2.isNumber());
457:       assertEquals((-1), node2.getLineno());
458:       assertFalse(node2.isIf());
459:       assertFalse(node2.isNE());
460:       assertFalse(node2.hasMoreThanOneChild());
461:       assertFalse(node2.isCase());
462:       assertFalse(node2.isWith());
463:       assertFalse(node2.isScript());
464:       assertTrue(node2.hasChildren());
465:       assertFalse(node2.isCatch());
466:       assertFalse(node2.isInstanceOf());
467:       assertFalse(node2.isThis());
468:       assertFalse(node2.isTry());
469:       assertFalse(node2.isRegExp());
470:       assertEquals(1, node2.getChildCount());
471:       assertFalse(node2.isHook());
472:       assertFalse(node2.isBlock());
473:       assertFalse(node2.isFor());
474:       assertFalse(node2.isCall());
475:       assertFalse(node2.isName());
476:       assertFalse(node2.isAdd());
477:       assertFalse(node2.isParamList());
478:       assertFalse(node2.isNull());
479:       assertFalse(node2.isStringKey());
480:       assertFalse(node2.isContinue());
481:       assertFalse(node2.isDo());
482:       assertFalse(node2.isSetterDef());
483:       assertFalse(node2.isFunction());
484:       assertFalse(node2.isLabel());
485:       assertFalse(node2.isNew());
486:       assertFalse(node2.isDefaultCase());
487:       assertFalse(node2.isVar());
488:       assertFalse(node2.isAssignAdd());
489:       assertFalse(node2.isGetElem());
490:       assertFalse(node2.isAssign());
491:       assertFalse(node2.isEmpty());
492:       assertFalse(node2.isCast());
493:       assertFalse(node2.isTrue());
494:       assertFalse(node2.isVoid());
495:       assertFalse(node2.isExprResult());
496:       assertFalse(node2.isDebugger());
497:       assertEquals((-1), node2.getSourcePosition());
498:       assertFalse(node2.isOr());
499:       assertFalse(node2.isDelProp());
500:       assertFalse(node2.isObjectLit());
501:       assertFalse(node2.isNot());
502:       assertFalse(node2.isString());
503:       assertFalse(node2.isGetProp());
504:       assertFalse(node2.isTypeOf());
505:       assertFalse(node2.isComma());
506:       assertFalse(node2.isDec());
507:       assertFalse(node2.isWhile());
508:       assertTrue(node2.hasOneChild());
509:       assertFalse(node2.isReturn());
510:       
511:       Iterable<Node> iterable0 = node0.children();
512:       assertFalse(iterable0.contains(node1));
513:       assertNotNull(iterable0);
514:       assertFalse(node0.equals((Object)node1));
515:       assertFalse(node0.equals((Object)node2));
516:       assertFalse(node0.isIf());
517:       assertFalse(node0.isFor());
518:       assertFalse(node0.isNE());
519:       assertFalse(node0.isEmpty());
520:       assertFalse(node0.isGetterDef());
521:       assertFalse(node0.isArrayLit());
522:       assertFalse(node0.isDelProp());
523:       assertFalse(node0.isVoid());
524:       assertFalse(node0.isRegExp());
525:       assertFalse(node0.isSwitch());
526:       assertEquals((-1), node0.getCharno());
527:       assertFalse(node0.isDebugger());
528:       assertFalse(node0.isHook());
529:       assertFalse(node0.isCase());
530:       assertFalse(node0.isTry());
531:       assertFalse(node0.isSetterDef());
532:       assertFalse(node0.isThis());
533:       assertFalse(node0.isFalse());
534:       assertFalse(node0.isInstanceOf());
535:       assertFalse(node0.isCatch());
536:       assertFalse(node0.isAnd());
537:       assertFalse(node0.isInc());
538:       assertEquals(40, node0.getType());
539:       assertFalse(node0.isContinue());
540:       assertFalse(node0.isFunction());
541:       assertFalse(node0.isIn());
542:       assertFalse(node0.isThrow());
543:       assertFalse(node0.isNumber());
544:       assertEquals((-1), node0.getSourcePosition());
545:       assertFalse(node0.isDec());
546:       assertFalse(node0.isTypeOf());
547:       assertFalse(node0.hasChildren());
548:       assertFalse(node0.isLabel());
549:       assertFalse(node0.isOr());
550:       assertFalse(node0.isAssign());
551:       assertFalse(node0.hasMoreThanOneChild());
552:       assertFalse(node0.isCast());
553:       assertFalse(node0.isGetElem());
554:       assertEquals((-1), node0.getLineno());
555:       assertFalse(node0.isLabelName());
556:       assertFalse(node0.isExprResult());
557:       assertFalse(node0.isWhile());
558:       assertFalse(node0.isScript());
559:       assertFalse(node0.isBlock());
560:       assertFalse(node0.isWith());
561:       assertFalse(node0.isObjectLit());
562:       assertFalse(node0.isNot());
563:       assertFalse(node0.hasOneChild());
564:       assertFalse(node0.isReturn());
565:       assertTrue(node0.isString());
566:       assertFalse(node0.isGetProp());
567:       assertFalse(node0.isNull());
568:       assertFalse(node0.isBreak());
569:       assertFalse(node0.isParamList());
570:       assertFalse(node0.isComma());
571:       assertEquals(0, node0.getChildCount());
572:       assertFalse(node0.isCall());
573:       assertFalse(node0.isStringKey());
574:       assertFalse(node0.isName());
575:       assertFalse(node0.isDefaultCase());
576:       assertFalse(node0.isTrue());
577:       assertFalse(node0.isVar());
578:       assertFalse(node0.isAdd());
579:       assertFalse(node0.isNew());
580:       assertFalse(node0.isAssignAdd());
581:       assertFalse(node0.isDo());
582:       
583:       Node node3 = node1.useSourceInfoFromForTree(node2);
584:       assertNotNull(node3);
585:       assertSame(node1, node3);
586:       assertSame(node3, node1);
587:       assertFalse(node0.equals((Object)node1));
588:       assertFalse(node0.equals((Object)node2));
589:       assertFalse(node1.equals((Object)node2));
590:       assertFalse(node1.equals((Object)node0));
591:       assertFalse(node2.equals((Object)node1));
592:       assertFalse(node2.equals((Object)node0));
593:       assertFalse(node3.equals((Object)node0));
594:       assertFalse(node3.equals((Object)node2));
595:       assertFalse(node0.isIf());
596:       assertFalse(node0.isFor());
597:       assertFalse(node0.isNE());
598:       assertFalse(node0.isEmpty());
599:       assertFalse(node0.isGetterDef());
600:       assertFalse(node0.isArrayLit());
601:       assertFalse(node0.isDelProp());
602:       assertFalse(node0.isVoid());
603:       assertFalse(node0.isRegExp());
604:       assertFalse(node0.isSwitch());
605:       assertEquals((-1), node0.getCharno());
606:       assertFalse(node0.isDebugger());
607:       assertFalse(node0.isHook());
608:       assertFalse(node0.isCase());
609:       assertFalse(node0.isTry());
610:       assertFalse(node0.isSetterDef());
611:       assertFalse(node0.isThis());
612:       assertFalse(node0.isFalse());
613:       assertFalse(node0.isInstanceOf());
614:       assertFalse(node0.isCatch());
615:       assertFalse(node0.isAnd());
616:       assertFalse(node0.isInc());
617:       assertEquals(40, node0.getType());
618:       assertFalse(node0.isContinue());
619:       assertFalse(node0.isFunction());
620:       assertFalse(node0.isIn());
621:       assertFalse(node0.isThrow());
622:       assertFalse(node0.isNumber());
623:       assertEquals((-1), node0.getSourcePosition());
624:       assertFalse(node0.isDec());
625:       assertFalse(node0.isTypeOf());
626:       assertFalse(node0.hasChildren());
627:       assertFalse(node0.isLabel());
628:       assertFalse(node0.isOr());
629:       assertFalse(node0.isAssign());
630:       assertFalse(node0.hasMoreThanOneChild());
631:       assertFalse(node0.isCast());
632:       assertFalse(node0.isGetElem());
633:       assertEquals((-1), node0.getLineno());
634:       assertFalse(node0.isLabelName());
635:       assertFalse(node0.isExprResult());
636:       assertFalse(node0.isWhile());
637:       assertFalse(node0.isScript());
638:       assertFalse(node0.isBlock());
639:       assertFalse(node0.isWith());
640:       assertFalse(node0.isObjectLit());
641:       assertFalse(node0.isNot());
642:       assertFalse(node0.hasOneChild());
643:       assertFalse(node0.isReturn());
644:       assertTrue(node0.isString());
645:       assertFalse(node0.isGetProp());
646:       assertFalse(node0.isNull());
647:       assertFalse(node0.isBreak());
648:       assertFalse(node0.isParamList());
649:       assertFalse(node0.isComma());
650:       assertEquals(0, node0.getChildCount());
651:       assertFalse(node0.isCall());
652:       assertFalse(node0.isStringKey());
653:       assertFalse(node0.isName());
654:       assertFalse(node0.isDefaultCase());
655:       assertFalse(node0.isTrue());
656:       assertFalse(node0.isVar());
657:       assertFalse(node0.isAdd());
658:       assertFalse(node0.isNew());
659:       assertFalse(node0.isAssignAdd());
660:       assertFalse(node0.isDo());
661:       assertFalse(node1.hasOneChild());
662:       assertFalse(node1.isLabelName());
663:       assertFalse(node1.isAssign());
664:       assertFalse(node1.isGetElem());
665:       assertFalse(node1.isCast());
666:       assertFalse(node1.isDec());
667:       assertFalse(node1.isTypeOf());
668:       assertFalse(node1.isReturn());
669:       assertFalse(node1.isAssignAdd());
670:       assertFalse(node1.isLabel());
671:       assertFalse(node1.hasChildren());
672:       assertFalse(node1.hasMoreThanOneChild());
673:       assertFalse(node1.isDo());
674:       assertFalse(node1.isWith());
675:       assertEquals((-1), node1.getLineno());
676:       assertFalse(node1.isInstanceOf());
677:       assertFalse(node1.isExprResult());
678:       assertFalse(node1.isOr());
679:       assertFalse(node1.isCall());
680:       assertFalse(node1.isName());
681:       assertFalse(node1.isFalse());
682:       assertFalse(node1.isBreak());
683:       assertFalse(node1.isSetterDef());
684:       assertFalse(node1.isComma());
685:       assertFalse(node1.isInc());
686:       assertFalse(node1.isGetProp());
687:       assertFalse(node1.isWhile());
688:       assertFalse(node1.isThrow());
689:       assertFalse(node1.isContinue());
690:       assertFalse(node1.isAnd());
691:       assertFalse(node1.isNot());
692:       assertFalse(node1.isObjectLit());
693:       assertTrue(node1.isNumber());
694:       assertFalse(node1.isString());
695:       assertFalse(node1.isDebugger());
696:       assertEquals((-1), node1.getSourcePosition());
697:       assertFalse(node1.isArrayLit());
698:       assertFalse(node1.isEmpty());
699:       assertFalse(node1.isFunction());
700:       assertFalse(node1.isTry());
701:       assertFalse(node1.isRegExp());
702:       assertFalse(node1.isDefaultCase());
703:       assertFalse(node1.isFor());
704:       assertFalse(node1.isCatch());
705:       assertFalse(node1.isIn());
706:       assertFalse(node1.isTrue());
707:       assertFalse(node1.isDelProp());
708:       assertFalse(node1.isVoid());
709:       assertFalse(node1.isIf());
710:       assertFalse(node1.isNull());
711:       assertFalse(node1.isNE());
712:       assertFalse(node1.isAdd());
713:       assertFalse(node1.isThis());
714:       assertFalse(node1.isNew());
715:       assertEquals(39, node1.getType());
716:       assertFalse(node1.isBlock());
717:       assertFalse(node1.isHook());
718:       assertFalse(node1.isVar());
719:       assertFalse(node1.isCase());
720:       assertEquals(0, node1.getChildCount());
721:       assertFalse(node1.isScript());
722:       assertFalse(node1.isSwitch());
723:       assertFalse(node1.isParamList());
724:       assertEquals((-1), node1.getCharno());
725:       assertFalse(node1.isGetterDef());
726:       assertFalse(node1.isStringKey());
727:       assertFalse(node2.isFalse());
728:       assertFalse(node2.isBreak());
729:       assertEquals((-1), node2.getCharno());
730:       assertFalse(node2.isSwitch());
731:       assertFalse(node2.isAnd());
732:       assertFalse(node2.isIn());
733:       assertEquals(657, node2.getType());
734:       assertFalse(node2.isInc());
735:       assertFalse(node2.isThrow());
736:       assertFalse(node2.isArrayLit());
737:       assertFalse(node2.isLabelName());
738:       assertFalse(node2.isGetterDef());
739:       assertFalse(node2.isNumber());
740:       assertEquals((-1), node2.getLineno());
741:       assertFalse(node2.isIf());
742:       assertFalse(node2.isNE());
743:       assertFalse(node2.hasMoreThanOneChild());
744:       assertFalse(node2.isCase());
745:       assertFalse(node2.isWith());
746:       assertFalse(node2.isScript());
747:       assertTrue(node2.hasChildren());
748:       assertFalse(node2.isCatch());
749:       assertFalse(node2.isInstanceOf());
750:       assertFalse(node2.isThis());
751:       assertFalse(node2.isTry());
752:       assertFalse(node2.isRegExp());
753:       assertEquals(1, node2.getChildCount());
754:       assertFalse(node2.isHook());
755:       assertFalse(node2.isBlock());
756:       assertFalse(node2.isFor());
757:       assertFalse(node2.isCall());
758:       assertFalse(node2.isName());
759:       assertFalse(node2.isAdd());
760:       assertFalse(node2.isParamList());
761:       assertFalse(node2.isNull());
762:       assertFalse(node2.isStringKey());
763:       assertFalse(node2.isContinue());
764:       assertFalse(node2.isDo());
765:       assertFalse(node2.isSetterDef());
766:       assertFalse(node2.isFunction());
767:       assertFalse(node2.isLabel());
768:       assertFalse(node2.isNew());
769:       assertFalse(node2.isDefaultCase());
770:       assertFalse(node2.isVar());
771:       assertFalse(node2.isAssignAdd());
772:       assertFalse(node2.isGetElem());
773:       assertFalse(node2.isAssign());
774:       assertFalse(node2.isEmpty());
775:       assertFalse(node2.isCast());
776:       assertFalse(node2.isTrue());
777:       assertFalse(node2.isVoid());
778:       assertFalse(node2.isExprResult());
779:       assertFalse(node2.isDebugger());
780:       assertEquals((-1), node2.getSourcePosition());
781:       assertFalse(node2.isOr());
782:       assertFalse(node2.isDelProp());
783:       assertFalse(node2.isObjectLit());
784:       assertFalse(node2.isNot());
785:       assertFalse(node2.isString());
786:       assertFalse(node2.isGetProp());
787:       assertFalse(node2.isTypeOf());
788:       assertFalse(node2.isComma());
789:       assertFalse(node2.isDec());
790:       assertFalse(node2.isWhile());
791:       assertTrue(node2.hasOneChild());
792:       assertFalse(node2.isReturn());
793:       assertFalse(node3.isComma());
794:       assertFalse(node3.isThrow());
795:       assertFalse(node3.isThis());
796:       assertFalse(node3.isObjectLit());
797:       assertFalse(node3.isGetProp());
798:       assertFalse(node3.isScript());
799:       assertFalse(node3.isInc());
800:       assertFalse(node3.isHook());
801:       assertFalse(node3.isWith());
802:       assertFalse(node3.isBreak());
803:       assertFalse(node3.isInstanceOf());
804:       assertFalse(node3.isGetElem());
805:       assertFalse(node3.isExprResult());
806:       assertFalse(node3.isNE());
807:       assertEquals((-1), node3.getSourcePosition());
808:       assertFalse(node3.isIf());
809:       assertFalse(node3.isDec());
810:       assertFalse(node3.isTypeOf());
811:       assertFalse(node3.isAssign());
812:       assertFalse(node3.hasChildren());
813:       assertFalse(node3.isReturn());
814:       assertFalse(node3.isIn());
815:       assertTrue(node3.isNumber());
816:       assertFalse(node3.isString());
817:       assertFalse(node3.isDebugger());
818:       assertFalse(node3.isFunction());
819:       assertFalse(node3.isNot());
820:       assertFalse(node3.isCast());
821:       assertFalse(node3.isContinue());
822:       assertFalse(node3.isAnd());
823:       assertFalse(node3.isFalse());
824:       assertFalse(node3.isSetterDef());
825:       assertFalse(node3.isParamList());
826:       assertFalse(node3.isStringKey());
827:       assertFalse(node3.isNull());
828:       assertFalse(node3.isVar());
829:       assertFalse(node3.isNew());
830:       assertFalse(node3.isAdd());
831:       assertFalse(node3.isVoid());
832:       assertFalse(node3.isRegExp());
833:       assertEquals(39, node3.getType());
834:       assertFalse(node3.isWhile());
835:       assertFalse(node3.isBlock());
836:       assertFalse(node3.isTrue());
837:       assertFalse(node3.hasMoreThanOneChild());
838:       assertFalse(node3.isCatch());
839:       assertFalse(node3.isName());
840:       assertEquals((-1), node3.getLineno());
841:       assertFalse(node3.isCall());
842:       assertFalse(node3.isGetterDef());
843:       assertFalse(node3.isDelProp());
844:       assertFalse(node3.isAssignAdd());
845:       assertFalse(node3.isOr());
846:       assertFalse(node3.isLabel());
847:       assertFalse(node3.isFor());
848:       assertFalse(node3.hasOneChild());
849:       assertFalse(node3.isDo());
850:       assertFalse(node3.isTry());
851:       assertFalse(node3.isEmpty());
852:       assertFalse(node3.isCase());
853:       assertFalse(node3.isSwitch());
854:       assertEquals((-1), node3.getCharno());
855:       assertFalse(node3.isDefaultCase());
856:       assertFalse(node3.isArrayLit());
857:       assertEquals(0, node3.getChildCount());
858:       assertFalse(node3.isLabelName());
859:       
860:       int int0 = Node.extractLineno(8388608);
861:       assertEquals(2048, int0);
862:       
863:       String string0 = node1.getSourceFileName();
864:       assertNull(string0);
865:       assertSame(node1, node3);
866:       assertFalse(node1.equals((Object)node2));
867:       assertFalse(node1.equals((Object)node0));
868:       assertFalse(node1.hasOneChild());
869:       assertFalse(node1.isLabelName());
870:       assertFalse(node1.isAssign());
871:       assertFalse(node1.isGetElem());
872:       assertFalse(node1.isCast());
873:       assertFalse(node1.isDec());
874:       assertFalse(node1.isTypeOf());
875:       assertFalse(node1.isReturn());
876:       assertFalse(node1.isAssignAdd());
877:       assertFalse(node1.isLabel());
878:       assertFalse(node1.hasChildren());
879:       assertFalse(node1.hasMoreThanOneChild());
880:       assertFalse(node1.isDo());
881:       assertFalse(node1.isWith());
882:       assertEquals((-1), node1.getLineno());
883:       assertFalse(node1.isInstanceOf());
884:       assertFalse(node1.isExprResult());
885:       assertFalse(node1.isOr());
886:       assertFalse(node1.isCall());
887:       assertFalse(node1.isName());
888:       assertFalse(node1.isFalse());
889:       assertFalse(node1.isBreak());
890:       assertFalse(node1.isSetterDef());
891:       assertFalse(node1.isComma());
892:       assertFalse(node1.isInc());
893:       assertFalse(node1.isGetProp());
894:       assertFalse(node1.isWhile());
895:       assertFalse(node1.isThrow());
896:       assertFalse(node1.isContinue());
897:       assertFalse(node1.isAnd());
898:       assertFalse(node1.isNot());
899:       assertFalse(node1.isObjectLit());
900:       assertTrue(node1.isNumber());
901:       assertFalse(node1.isString());
902:       assertFalse(node1.isDebugger());
903:       assertEquals((-1), node1.getSourcePosition());
904:       assertFalse(node1.isArrayLit());
905:       assertFalse(node1.isEmpty());
906:       assertFalse(node1.isFunction());
907:       assertFalse(node1.isTry());
908:       assertFalse(node1.isRegExp());
909:       assertFalse(node1.isDefaultCase());
910:       assertFalse(node1.isFor());
911:       assertFalse(node1.isCatch());
912:       assertFalse(node1.isIn());
913:       assertFalse(node1.isTrue());
914:       assertFalse(node1.isDelProp());
915:       assertFalse(node1.isVoid());
916:       assertFalse(node1.isIf());
917:       assertFalse(node1.isNull());
918:       assertFalse(node1.isNE());
919:       assertFalse(node1.isAdd());
920:       assertFalse(node1.isThis());
921:       assertFalse(node1.isNew());
922:       assertEquals(39, node1.getType());
923:       assertFalse(node1.isBlock());
924:       assertFalse(node1.isHook());
925:       assertFalse(node1.isVar());
926:       assertFalse(node1.isCase());
927:       assertEquals(0, node1.getChildCount());
928:       assertFalse(node1.isScript());
929:       assertFalse(node1.isSwitch());
930:       assertFalse(node1.isParamList());
931:       assertEquals((-1), node1.getCharno());
932:       assertFalse(node1.isGetterDef());
933:       assertFalse(node1.isStringKey());
934:       
935:       boolean boolean2 = node0.isParamList();
936:       assertFalse(boolean2);
937:       assertFalse(node0.equals((Object)node3));
938:       assertFalse(node0.equals((Object)node1));
939:       assertFalse(node0.equals((Object)node2));
940:       assertTrue(boolean2 == boolean0);
941:       assertTrue(boolean2 == boolean1);
942:       assertFalse(node0.isIf());
943:       assertFalse(node0.isFor());
944:       assertFalse(node0.isNE());
945:       assertFalse(node0.isEmpty());
946:       assertFalse(node0.isGetterDef());
947:       assertFalse(node0.isArrayLit());
948:       assertFalse(node0.isDelProp());
949:       assertFalse(node0.isVoid());
950:       assertFalse(node0.isRegExp());
951:       assertFalse(node0.isSwitch());
952:       assertEquals((-1), node0.getCharno());
953:       assertFalse(node0.isDebugger());
954:       assertFalse(node0.isHook());
955:       assertFalse(node0.isCase());
956:       assertFalse(node0.isTry());
957:       assertFalse(node0.isSetterDef());
958:       assertFalse(node0.isThis());
959:       assertFalse(node0.isFalse());
960:       assertFalse(node0.isInstanceOf());
961:       assertFalse(node0.isCatch());
962:       assertFalse(node0.isAnd());
963:       assertFalse(node0.isInc());
964:       assertEquals(40, node0.getType());
965:       assertFalse(node0.isContinue());
966:       assertFalse(node0.isFunction());
967:       assertFalse(node0.isIn());
968:       assertFalse(node0.isThrow());
969:       assertFalse(node0.isNumber());
970:       assertEquals((-1), node0.getSourcePosition());
971:       assertFalse(node0.isDec());
972:       assertFalse(node0.isTypeOf());
973:       assertFalse(node0.hasChildren());
974:       assertFalse(node0.isLabel());
975:       assertFalse(node0.isOr());
976:       assertFalse(node0.isAssign());
977:       assertFalse(node0.hasMoreThanOneChild());
978:       assertFalse(node0.isCast());
979:       assertFalse(node0.isGetElem());
980:       assertEquals((-1), node0.getLineno());
981:       assertFalse(node0.isLabelName());
982:       assertFalse(node0.isExprResult());
983:       assertFalse(node0.isWhile());
984:       assertFalse(node0.isScript());
985:       assertFalse(node0.isBlock());
986:       assertFalse(node0.isWith());
987:       assertFalse(node0.isObjectLit());
988:       assertFalse(node0.isNot());
989:       assertFalse(node0.hasOneChild());
990:       assertFalse(node0.isReturn());
991:       assertTrue(node0.isString());
992:       assertFalse(node0.isGetProp());
993:       assertFalse(node0.isNull());
994:       assertFalse(node0.isBreak());
995:       assertFalse(node0.isParamList());
996:       assertFalse(node0.isComma());
997:       assertEquals(0, node0.getChildCount());
998:       assertFalse(node0.isCall());
999:       assertFalse(node0.isStringKey());
1000:       assertFalse(node0.isName());
1001:       assertFalse(node0.isDefaultCase());
1002:       assertFalse(node0.isTrue());
1003:       assertFalse(node0.isVar());
1004:       assertFalse(node0.isAdd());
1005:       assertFalse(node0.isNew());
1006:       assertFalse(node0.isAssignAdd());
1007:       assertFalse(node0.isDo());
1008:       
1009:       Node node4 = Node.newString("", 1, 39);
1010:       assertNotNull(node4);
1011:       assertNotSame(node4, node0);
1012:       assertFalse(node4.equals((Object)node3));
1013:       assertFalse(node4.equals((Object)node0));
1014:       assertFalse(node4.equals((Object)node1));
1015:       assertFalse(node4.equals((Object)node2));
1016:       assertFalse(node4.isSetterDef());
1017:       assertFalse(node4.isParamList());
1018:       assertFalse(node4.isNull());
1019:       assertFalse(node4.isName());
1020:       assertFalse(node4.isStringKey());
1021:       assertFalse(node4.isDebugger());
1022:       assertFalse(node4.isAdd());
1023:       assertFalse(node4.isDo());
1024:       assertFalse(node4.isNew());
1025:       assertFalse(node4.isDefaultCase());
1026:       assertFalse(node4.isVar());
1027:       assertFalse(node4.isContinue());
1028:       assertFalse(node4.isArrayLit());
1029:       assertEquals(40, node4.getType());
1030:       assertFalse(node4.isLabel());
1031:       assertEquals(0, node4.getChildCount());
1032:       assertFalse(node4.isFunction());
1033:       assertFalse(node4.isNE());
1034:       assertFalse(node4.isLabelName());
1035:       assertFalse(node4.isIf());
1036:       assertFalse(node4.hasOneChild());
1037:       assertFalse(node4.isNumber());
1038:       assertFalse(node4.isIn());
1039:       assertFalse(node4.isGetterDef());
1040:       assertFalse(node4.isBlock());
1041:       assertFalse(node4.isScript());
1042:       assertFalse(node4.isTry());
1043:       assertFalse(node4.isCase());
1044:       assertEquals(4135, node4.getSourcePosition());
1045:       assertTrue(node4.isString());
1046:       assertFalse(node4.hasMoreThanOneChild());
1047:       assertFalse(node4.isCatch());
1048:       assertFalse(node4.isHook());
1049:       assertFalse(node4.isInstanceOf());
1050:       assertFalse(node4.isFor());
1051:       assertFalse(node4.isWith());
1052:       assertFalse(node4.isRegExp());
1053:       assertFalse(node4.isComma());
1054:       assertFalse(node4.isBreak());
1055:       assertFalse(node4.isGetProp());
1056:       assertFalse(node4.isThis());
1057:       assertFalse(node4.isAnd());
1058:       assertFalse(node4.isNot());
1059:       assertFalse(node4.isObjectLit());
1060:       assertFalse(node4.isSwitch());
1061:       assertFalse(node4.isInc());
1062:       assertFalse(node4.isCast());
1063:       assertFalse(node4.isThrow());
1064:       assertFalse(node4.isFalse());
1065:       assertFalse(node4.hasChildren());
1066:       assertEquals(1, node4.getLineno());
1067:       assertFalse(node4.isAssignAdd());
1068:       assertFalse(node4.isDelProp());
1069:       assertFalse(node4.isOr());
1070:       assertFalse(node4.isEmpty());
1071:       assertFalse(node4.isTrue());
1072:       assertFalse(node4.isExprResult());
1073:       assertFalse(node4.isWhile());
1074:       assertFalse(node4.isVoid());
1075:       assertEquals(39, node4.getCharno());
1076:       assertFalse(node4.isCall());
1077:       assertFalse(node4.isGetElem());
1078:       assertFalse(node4.isReturn());
1079:       assertFalse(node4.isAssign());
1080:       assertFalse(node4.isDec());
1081:       assertFalse(node4.isTypeOf());
1082:       
1083:       node4.detachChildren();
1084:       assertNotSame(node4, node0);
1085:       assertFalse(node4.equals((Object)node3));
1086:       assertFalse(node4.equals((Object)node0));
1087:       assertFalse(node4.equals((Object)node1));
1088:       assertFalse(node4.equals((Object)node2));
1089:       assertFalse(node4.isSetterDef());
1090:       assertFalse(node4.isParamList());
1091:       assertFalse(node4.isNull());
1092:       assertFalse(node4.isName());
1093:       assertFalse(node4.isStringKey());
1094:       assertFalse(node4.isDebugger());
1095:       assertFalse(node4.isAdd());
1096:       assertFalse(node4.isDo());
1097:       assertFalse(node4.isNew());
1098:       assertFalse(node4.isDefaultCase());
1099:       assertFalse(node4.isVar());
1100:       assertFalse(node4.isContinue());
1101:       assertFalse(node4.isArrayLit());
1102:       assertEquals(40, node4.getType());
1103:       assertFalse(node4.isLabel());
1104:       assertEquals(0, node4.getChildCount());
1105:       assertFalse(node4.isFunction());
1106:       assertFalse(node4.isNE());
1107:       assertFalse(node4.isLabelName());
1108:       assertFalse(node4.isIf());
1109:       assertFalse(node4.hasOneChild());
1110:       assertFalse(node4.isNumber());
1111:       assertFalse(node4.isIn());
1112:       assertFalse(node4.isGetterDef());
1113:       assertFalse(node4.isBlock());
1114:       assertFalse(node4.isScript());
1115:       assertFalse(node4.isTry());
1116:       assertFalse(node4.isCase());
1117:       assertEquals(4135, node4.getSourcePosition());
1118:       assertTrue(node4.isString());
1119:       assertFalse(node4.hasMoreThanOneChild());
1120:       assertFalse(node4.isCatch());
1121:       assertFalse(node4.isHook());
1122:       assertFalse(node4.isInstanceOf());
1123:       assertFalse(node4.isFor());
1124:       assertFalse(node4.isWith());
1125:       assertFalse(node4.isRegExp());
1126:       assertFalse(node4.isComma());
1127:       assertFalse(node4.isBreak());
1128:       assertFalse(node4.isGetProp());
1129:       assertFalse(node4.isThis());
1130:       assertFalse(node4.isAnd());
1131:       assertFalse(node4.isNot());
1132:       assertFalse(node4.isObjectLit());
1133:       assertFalse(node4.isSwitch());
1134:       assertFalse(node4.isInc());
1135:       assertFalse(node4.isCast());
1136:       assertFalse(node4.isThrow());
1137:       assertFalse(node4.isFalse());
1138:       assertFalse(node4.hasChildren());
1139:       assertEquals(1, node4.getLineno());
1140:       assertFalse(node4.isAssignAdd());
1141:       assertFalse(node4.isDelProp());
1142:       assertFalse(node4.isOr());
1143:       assertFalse(node4.isEmpty());
1144:       assertFalse(node4.isTrue());
1145:       assertFalse(node4.isExprResult());
1146:       assertFalse(node4.isWhile());
1147:       assertFalse(node4.isVoid());
1148:       assertEquals(39, node4.getCharno());
1149:       assertFalse(node4.isCall());
1150:       assertFalse(node4.isGetElem());
1151:       assertFalse(node4.isReturn());
1152:       assertFalse(node4.isAssign());
1153:       assertFalse(node4.isDec());
1154:       assertFalse(node4.isTypeOf());
1155:       
1156:       Node node5 = node0.copyInformationFromForTree(node1);
1157:       assertNotNull(node5);
1158:       assertNotSame(node0, node4);
1159:       assertSame(node0, node5);
1160:       assertSame(node1, node3);
1161:       assertNotSame(node5, node4);
1162:       assertSame(node5, node0);
1163:       assertFalse(node0.equals((Object)node3));
1164:       assertFalse(node0.equals((Object)node4));
1165:       assertFalse(node0.equals((Object)node1));
1166:       assertFalse(node0.equals((Object)node2));
1167:       assertFalse(node1.equals((Object)node2));
1168:       assertFalse(node1.equals((Object)node4));
1169:       assertFalse(node1.equals((Object)node0));
1170:       assertFalse(node5.equals((Object)node3));
1171:       assertFalse(node5.equals((Object)node4));
1172:       assertFalse(node5.equals((Object)node1));
1173:       assertFalse(node5.equals((Object)node2));
1174:       assertFalse(node0.isIf());
1175:       assertFalse(node0.isFor());
1176:       assertFalse(node0.isNE());
1177:       assertFalse(node0.isEmpty());
1178:       assertFalse(node0.isGetterDef());
1179:       assertFalse(node0.isArrayLit());
1180:       assertFalse(node0.isDelProp());
1181:       assertFalse(node0.isVoid());
1182:       assertFalse(node0.isRegExp());
1183:       assertFalse(node0.isSwitch());
1184:       assertEquals((-1), node0.getCharno());
1185:       assertFalse(node0.isDebugger());
1186:       assertFalse(node0.isHook());
1187:       assertFalse(node0.isCase());
1188:       assertFalse(node0.isTry());
1189:       assertFalse(node0.isSetterDef());
1190:       assertFalse(node0.isThis());
1191:       assertFalse(node0.isFalse());
1192:       assertFalse(node0.isInstanceOf());
1193:       assertFalse(node0.isCatch());
1194:       assertFalse(node0.isAnd());
1195:       assertFalse(node0.isInc());
1196:       assertEquals(40, node0.getType());
1197:       assertFalse(node0.isContinue());
1198:       assertFalse(node0.isFunction());
1199:       assertFalse(node0.isIn());
1200:       assertFalse(node0.isThrow());
1201:       assertFalse(node0.isNumber());
1202:       assertEquals((-1), node0.getSourcePosition());
1203:       assertFalse(node0.isDec());
1204:       assertFalse(node0.isTypeOf());
1205:       assertFalse(node0.hasChildren());
1206:       assertFalse(node0.isLabel());
1207:       assertFalse(node0.isOr());
1208:       assertFalse(node0.isAssign());
1209:       assertFalse(node0.hasMoreThanOneChild());
1210:       assertFalse(node0.isCast());
1211:       assertFalse(node0.isGetElem());
1212:       assertEquals((-1), node0.getLineno());
1213:       assertFalse(node0.isLabelName());
1214:       assertFalse(node0.isExprResult());
1215:       assertFalse(node0.isWhile());
1216:       assertFalse(node0.isScript());
1217:       assertFalse(node0.isBlock());
1218:       assertFalse(node0.isWith());
1219:       assertFalse(node0.isObjectLit());
1220:       assertFalse(node0.isNot());
1221:       assertFalse(node0.hasOneChild());
1222:       assertFalse(node0.isReturn());
1223:       assertTrue(node0.isString());
1224:       assertFalse(node0.isGetProp());
1225:       assertFalse(node0.isNull());
1226:       assertFalse(node0.isBreak());
1227:       assertFalse(node0.isParamList());
1228:       assertFalse(node0.isComma());
1229:       assertEquals(0, node0.getChildCount());
1230:       assertFalse(node0.isCall());
1231:       assertFalse(node0.isStringKey());
1232:       assertFalse(node0.isName());
1233:       assertFalse(node0.isDefaultCase());
1234:       assertFalse(node0.isTrue());
1235:       assertFalse(node0.isVar());
1236:       assertFalse(node0.isAdd());
1237:       assertFalse(node0.isNew());
1238:       assertFalse(node0.isAssignAdd());
1239:       assertFalse(node0.isDo());
1240:       assertFalse(node1.hasOneChild());
1241:       assertFalse(node1.isLabelName());
1242:       assertFalse(node1.isAssign());
1243:       assertFalse(node1.isGetElem());
1244:       assertFalse(node1.isCast());
1245:       assertFalse(node1.isDec());
1246:       assertFalse(node1.isTypeOf());
1247:       assertFalse(node1.isReturn());
1248:       assertFalse(node1.isAssignAdd());
1249:       assertFalse(node1.isLabel());
1250:       assertFalse(node1.hasChildren());
1251:       assertFalse(node1.hasMoreThanOneChild());
1252:       assertFalse(node1.isDo());
1253:       assertFalse(node1.isWith());
1254:       assertEquals((-1), node1.getLineno());
1255:       assertFalse(node1.isInstanceOf());
1256:       assertFalse(node1.isExprResult());
1257:       assertFalse(node1.isOr());
1258:       assertFalse(node1.isCall());
1259:       assertFalse(node1.isName());
1260:       assertFalse(node1.isFalse());
1261:       assertFalse(node1.isBreak());
1262:       assertFalse(node1.isSetterDef());
1263:       assertFalse(node1.isComma());
1264:       assertFalse(node1.isInc());
1265:       assertFalse(node1.isGetProp());
1266:       assertFalse(node1.isWhile());
1267:       assertFalse(node1.isThrow());
1268:       assertFalse(node1.isContinue());
1269:       assertFalse(node1.isAnd());
1270:       assertFalse(node1.isNot());
1271:       assertFalse(node1.isObjectLit());
1272:       assertTrue(node1.isNumber());
1273:       assertFalse(node1.isString());
1274:       assertFalse(node1.isDebugger());
1275:       assertEquals((-1), node1.getSourcePosition());
1276:       assertFalse(node1.isArrayLit());
1277:       assertFalse(node1.isEmpty());
1278:       assertFalse(node1.isFunction());
1279:       assertFalse(node1.isTry());
1280:       assertFalse(node1.isRegExp());
1281:       assertFalse(node1.isDefaultCase());
1282:       assertFalse(node1.isFor());
1283:       assertFalse(node1.isCatch());
1284:       assertFalse(node1.isIn());
1285:       assertFalse(node1.isTrue());
1286:       assertFalse(node1.isDelProp());
1287:       assertFalse(node1.isVoid());
1288:       assertFalse(node1.isIf());
1289:       assertFalse(node1.isNull());
1290:       assertFalse(node1.isNE());
1291:       assertFalse(node1.isAdd());
1292:       assertFalse(node1.isThis());
1293:       assertFalse(node1.isNew());
1294:       assertEquals(39, node1.getType());
1295:       assertFalse(node1.isBlock());
1296:       assertFalse(node1.isHook());
1297:       assertFalse(node1.isVar());
1298:       assertFalse(node1.isCase());
1299:       assertEquals(0, node1.getChildCount());
1300:       assertFalse(node1.isScript());
1301:       assertFalse(node1.isSwitch());
1302:       assertFalse(node1.isParamList());
1303:       assertEquals((-1), node1.getCharno());
1304:       assertFalse(node1.isGetterDef());
1305:       assertFalse(node1.isStringKey());
1306:       assertFalse(node5.isInc());
1307:       assertEquals((-1), node5.getCharno());
1308:       assertFalse(node5.isSwitch());
1309:       assertFalse(node5.isGetterDef());
1310:       assertFalse(node5.isDelProp());
1311:       assertFalse(node5.isComma());
1312:       assertFalse(node5.isThis());
1313:       assertFalse(node5.isBreak());
1314:       assertFalse(node5.isGetProp());
1315:       assertFalse(node5.isHook());
1316:       assertFalse(node5.isCase());
1317:       assertFalse(node5.isFor());
1318:       assertFalse(node5.isTry());
1319:       assertFalse(node5.isScript());
1320:       assertFalse(node5.isTrue());
1321:       assertFalse(node5.isExprResult());
1322:       assertFalse(node5.isArrayLit());
1323:       assertFalse(node5.isLabelName());
1324:       assertFalse(node5.isVoid());
1325:       assertFalse(node5.isParamList());
1326:       assertFalse(node5.isNull());
1327:       assertFalse(node5.isOr());
1328:       assertFalse(node5.isEmpty());
1329:       assertFalse(node5.isVar());
1330:       assertEquals(0, node5.getChildCount());
1331:       assertFalse(node5.isLabel());
1332:       assertFalse(node5.isNew());
1333:       assertFalse(node5.isDo());
1334:       assertFalse(node5.isAssignAdd());
1335:       assertFalse(node5.isDefaultCase());
1336:       assertFalse(node5.isAdd());
1337:       assertFalse(node5.isContinue());
1338:       assertFalse(node5.hasMoreThanOneChild());
1339:       assertFalse(node5.isCall());
1340:       assertEquals((-1), node5.getLineno());
1341:       assertFalse(node5.isStringKey());
1342:       assertFalse(node5.isName());
1343:       assertFalse(node5.isNumber());
1344:       assertEquals((-1), node5.getSourcePosition());
1345:       assertFalse(node5.isDec());
1346:       assertFalse(node5.isTypeOf());
1347:       assertFalse(node5.hasChildren());
1348:       assertFalse(node5.isGetElem());
1349:       assertFalse(node5.isAssign());
1350:       assertFalse(node5.hasOneChild());
1351:       assertFalse(node5.isReturn());
1352:       assertFalse(node5.isBlock());
1353:       assertTrue(node5.isString());
1354:       assertFalse(node5.isWhile());
1355:       assertFalse(node5.isRegExp());
1356:       assertFalse(node5.isDebugger());
1357:       assertFalse(node5.isNot());
1358:       assertFalse(node5.isObjectLit());
1359:       assertFalse(node5.isCatch());
1360:       assertFalse(node5.isWith());
1361:       assertFalse(node5.isFunction());
1362:       assertFalse(node5.isInstanceOf());
1363:       assertFalse(node5.isCast());
1364:       assertFalse(node5.isIf());
1365:       assertFalse(node5.isAnd());
1366:       assertFalse(node5.isNE());
1367:       assertFalse(node5.isSetterDef());
1368:       assertFalse(node5.isFalse());
1369:       assertFalse(node5.isIn());
1370:       assertEquals(40, node5.getType());
1371:       assertFalse(node5.isThrow());
1372:       
1373:       Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
1374:       assertNotNull(node_NodeMismatch0);
1375:       assertNotSame(node0, node4);
1376:       assertSame(node0, node5);
1377:       assertFalse(node0.equals((Object)node3));
1378:       assertFalse(node0.equals((Object)node4));
1379:       assertFalse(node0.equals((Object)node1));
1380:       assertFalse(node0.equals((Object)node2));
1381:       assertFalse(node2.equals((Object)node5));
1382:       assertFalse(node2.equals((Object)node1));
1383:       assertFalse(node2.equals((Object)node4));
1384:       assertFalse(node2.equals((Object)node3));
1385:       assertFalse(node2.equals((Object)node0));
1386:       assertFalse(node0.isIf());
1387:       assertFalse(node0.isFor());
1388:       assertFalse(node0.isNE());
1389:       assertFalse(node0.isEmpty());
1390:       assertFalse(node0.isGetterDef());
1391:       assertFalse(node0.isArrayLit());
1392:       assertFalse(node0.isDelProp());
1393:       assertFalse(node0.isVoid());
1394:       assertFalse(node0.isRegExp());
1395:       assertFalse(node0.isSwitch());
1396:       assertEquals((-1), node0.getCharno());
1397:       assertFalse(node0.isDebugger());
1398:       assertFalse(node0.isHook());
1399:       assertFalse(node0.isCase());
1400:       assertFalse(node0.isTry());
1401:       assertFalse(node0.isSetterDef());
1402:       assertFalse(node0.isThis());
1403:       assertFalse(node0.isFalse());
1404:       assertFalse(node0.isInstanceOf());
1405:       assertFalse(node0.isCatch());
1406:       assertFalse(node0.isAnd());
1407:       assertFalse(node0.isInc());
1408:       assertEquals(40, node0.getType());
1409:       assertFalse(node0.isContinue());
1410:       assertFalse(node0.isFunction());
1411:       assertFalse(node0.isIn());
1412:       assertFalse(node0.isThrow());
1413:       assertFalse(node0.isNumber());
1414:       assertEquals((-1), node0.getSourcePosition());
1415:       assertFalse(node0.isDec());
1416:       assertFalse(node0.isTypeOf());
1417:       assertFalse(node0.hasChildren());
1418:       assertFalse(node0.isLabel());
1419:       assertFalse(node0.isOr());
1420:       assertFalse(node0.isAssign());
1421:       assertFalse(node0.hasMoreThanOneChild());
1422:       assertFalse(node0.isCast());
1423:       assertFalse(node0.isGetElem());
1424:       assertEquals((-1), node0.getLineno());
1425:       assertFalse(node0.isLabelName());
1426:       assertFalse(node0.isExprResult());
1427:       assertFalse(node0.isWhile());
1428:       assertFalse(node0.isScript());
1429:       assertFalse(node0.isBlock());
1430:       assertFalse(node0.isWith());
1431:       assertFalse(node0.isObjectLit());
1432:       assertFalse(node0.isNot());
1433:       assertFalse(node0.hasOneChild());
1434:       assertFalse(node0.isReturn());
1435:       assertTrue(node0.isString());
1436:       assertFalse(node0.isGetProp());
1437:       assertFalse(node0.isNull());
1438:       assertFalse(node0.isBreak());
1439:       assertFalse(node0.isParamList());
1440:       assertFalse(node0.isComma());
1441:       assertEquals(0, node0.getChildCount());
1442:       assertFalse(node0.isCall());
1443:       assertFalse(node0.isStringKey());
1444:       assertFalse(node0.isName());
1445:       assertFalse(node0.isDefaultCase());
1446:       assertFalse(node0.isTrue());
1447:       assertFalse(node0.isVar());
1448:       assertFalse(node0.isAdd());
1449:       assertFalse(node0.isNew());
1450:       assertFalse(node0.isAssignAdd());
1451:       assertFalse(node0.isDo());
1452:       assertFalse(node2.isFalse());
1453:       assertFalse(node2.isBreak());
1454:       assertEquals((-1), node2.getCharno());
1455:       assertFalse(node2.isSwitch());
1456:       assertFalse(node2.isAnd());
1457:       assertFalse(node2.isIn());
1458:       assertEquals(657, node2.getType());
1459:       assertFalse(node2.isInc());
1460:       assertFalse(node2.isThrow());
1461:       assertFalse(node2.isArrayLit());
1462:       assertFalse(node2.isLabelName());
1463:       assertFalse(node2.isGetterDef());
1464:       assertFalse(node2.isNumber());
1465:       assertEquals((-1), node2.getLineno());
1466:       assertFalse(node2.isIf());
1467:       assertFalse(node2.isNE());
1468:       assertFalse(node2.hasMoreThanOneChild());
1469:       assertFalse(node2.isCase());
1470:       assertFalse(node2.isWith());
1471:       assertFalse(node2.isScript());
1472:       assertTrue(node2.hasChildren());
1473:       assertFalse(node2.isCatch());
1474:       assertFalse(node2.isInstanceOf());
1475:       assertFalse(node2.isThis());
1476:       assertFalse(node2.isTry());
1477:       assertFalse(node2.isRegExp());
1478:       assertEquals(1, node2.getChildCount());
1479:       assertFalse(node2.isHook());
1480:       assertFalse(node2.isBlock());
1481:       assertFalse(node2.isFor());
1482:       assertFalse(node2.isCall());
1483:       assertFalse(node2.isName());
1484:       assertFalse(node2.isAdd());
1485:       assertFalse(node2.isParamList());
1486:       assertFalse(node2.isNull());
1487:       assertFalse(node2.isStringKey());
1488:       assertFalse(node2.isContinue());
1489:       assertFalse(node2.isDo());
1490:       assertFalse(node2.isSetterDef());
1491:       assertFalse(node2.isFunction());
1492:       assertFalse(node2.isLabel());
1493:       assertFalse(node2.isNew());
1494:       assertFalse(node2.isDefaultCase());
1495:       assertFalse(node2.isVar());
1496:       assertFalse(node2.isAssignAdd());
1497:       assertFalse(node2.isGetElem());
1498:       assertFalse(node2.isAssign());
1499:       assertFalse(node2.isEmpty());
1500:       assertFalse(node2.isCast());
1501:       assertFalse(node2.isTrue());
1502:       assertFalse(node2.isVoid());
1503:       assertFalse(node2.isExprResult());
1504:       assertFalse(node2.isDebugger());
1505:       assertEquals((-1), node2.getSourcePosition());
1506:       assertFalse(node2.isOr());
1507:       assertFalse(node2.isDelProp());
1508:       assertFalse(node2.isObjectLit());
1509:       assertFalse(node2.isNot());
1510:       assertFalse(node2.isString());
1511:       assertFalse(node2.isGetProp());
1512:       assertFalse(node2.isTypeOf());
1513:       assertFalse(node2.isComma());
1514:       assertFalse(node2.isDec());
1515:       assertFalse(node2.isWhile());
1516:       assertTrue(node2.hasOneChild());
1517:       assertFalse(node2.isReturn());
1518:       
1519:       int int1 = node5.getIndexOfChild(node0);
1520:       assertNotSame(node0, node4);
1521:       assertSame(node0, node5);
1522:       assertSame(node1, node3);
1523:       assertNotSame(node5, node4);
1524:       assertSame(node5, node0);
1525:       assertEquals((-1), int1);
1526:       assertFalse(int1 == int0);
1527:       assertFalse(node0.equals((Object)node3));
1528:       assertFalse(node0.equals((Object)node4));
1529:       assertFalse(node0.equals((Object)node1));
1530:       assertFalse(node0.equals((Object)node2));
1531:       assertFalse(node1.equals((Object)node5));
1532:       assertFalse(node1.equals((Object)node2));
1533:       assertFalse(node1.equals((Object)node4));
1534:       assertFalse(node1.equals((Object)node0));
1535:       assertFalse(node5.equals((Object)node3));
1536:       assertFalse(node5.equals((Object)node4));
1537:       assertFalse(node5.equals((Object)node1));
1538:       assertFalse(node5.equals((Object)node2));
1539:       assertFalse(node0.isIf());
1540:       assertFalse(node0.isFor());
1541:       assertFalse(node0.isNE());
1542:       assertFalse(node0.isEmpty());
1543:       assertFalse(node0.isGetterDef());
1544:       assertFalse(node0.isArrayLit());
1545:       assertFalse(node0.isDelProp());
1546:       assertFalse(node0.isVoid());
1547:       assertFalse(node0.isRegExp());
1548:       assertFalse(node0.isSwitch());
1549:       assertEquals((-1), node0.getCharno());
1550:       assertFalse(node0.isDebugger());
1551:       assertFalse(node0.isHook());
1552:       assertFalse(node0.isCase());
1553:       assertFalse(node0.isTry());
1554:       assertFalse(node0.isSetterDef());
1555:       assertFalse(node0.isThis());
1556:       assertFalse(node0.isFalse());
1557:       assertFalse(node0.isInstanceOf());
1558:       assertFalse(node0.isCatch());
1559:       assertFalse(node0.isAnd());
1560:       assertFalse(node0.isInc());
1561:       assertEquals(40, node0.getType());
1562:       assertFalse(node0.isContinue());
1563:       assertFalse(node0.isFunction());
1564:       assertFalse(node0.isIn());
1565:       assertFalse(node0.isThrow());
1566:       assertFalse(node0.isNumber());
1567:       assertEquals((-1), node0.getSourcePosition());
1568:       assertFalse(node0.isDec());
1569:       assertFalse(node0.isTypeOf());
1570:       assertFalse(node0.hasChildren());
1571:       assertFalse(node0.isLabel());
1572:       assertFalse(node0.isOr());
1573:       assertFalse(node0.isAssign());
1574:       assertFalse(node0.hasMoreThanOneChild());
1575:       assertFalse(node0.isCast());
1576:       assertFalse(node0.isGetElem());
1577:       assertEquals((-1), node0.getLineno());
1578:       assertFalse(node0.isLabelName());
1579:       assertFalse(node0.isExprResult());
1580:       assertFalse(node0.isWhile());
1581:       assertFalse(node0.isScript());
1582:       assertFalse(node0.isBlock());
1583:       assertFalse(node0.isWith());
1584:       assertFalse(node0.isObjectLit());
1585:       assertFalse(node0.isNot());
1586:       assertFalse(node0.hasOneChild());
1587:       assertFalse(node0.isReturn());
1588:       assertTrue(node0.isString());
1589:       assertFalse(node0.isGetProp());
1590:       assertFalse(node0.isNull());
1591:       assertFalse(node0.isBreak());
1592:       assertFalse(node0.isParamList());
1593:       assertFalse(node0.isComma());
1594:       assertEquals(0, node0.getChildCount());
1595:       assertFalse(node0.isCall());
1596:       assertFalse(node0.isStringKey());
1597:       assertFalse(node0.isName());
1598:       assertFalse(node0.isDefaultCase());
1599:       assertFalse(node0.isTrue());
1600:       assertFalse(node0.isVar());
1601:       assertFalse(node0.isAdd());
1602:       assertFalse(node0.isNew());
1603:       assertFalse(node0.isAssignAdd());
1604:       assertFalse(node0.isDo());
1605:       assertFalse(node1.hasOneChild());
1606:       assertFalse(node1.isLabelName());
1607:       assertFalse(node1.isAssign());
1608:       assertFalse(node1.isGetElem());
1609:       assertFalse(node1.isCast());
1610:       assertFalse(node1.isDec());
1611:       assertFalse(node1.isTypeOf());
1612:       assertFalse(node1.isReturn());
1613:       assertFalse(node1.isAssignAdd());
1614:       assertFalse(node1.isLabel());
1615:       assertFalse(node1.hasChildren());
1616:       assertFalse(node1.hasMoreThanOneChild());
1617:       assertFalse(node1.isDo());
1618:       assertFalse(node1.isWith());
1619:       assertEquals((-1), node1.getLineno());
1620:       assertFalse(node1.isInstanceOf());
1621:       assertFalse(node1.isExprResult());
1622:       assertFalse(node1.isOr());
1623:       assertFalse(node1.isCall());
1624:       assertFalse(node1.isName());
1625:       assertFalse(node1.isFalse());
1626:       assertFalse(node1.isBreak());
1627:       assertFalse(node1.isSetterDef());
1628:       assertFalse(node1.isComma());
1629:       assertFalse(node1.isInc());
1630:       assertFalse(node1.isGetProp());
1631:       assertFalse(node1.isWhile());
1632:       assertFalse(node1.isThrow());
1633:       assertFalse(node1.isContinue());
1634:       assertFalse(node1.isAnd());
1635:       assertFalse(node1.isNot());
1636:       assertFalse(node1.isObjectLit());
1637:       assertTrue(node1.isNumber());
1638:       assertFalse(node1.isString());
1639:       assertFalse(node1.isDebugger());
1640:       assertEquals((-1), node1.getSourcePosition());
1641:       assertFalse(node1.isArrayLit());
1642:       assertFalse(node1.isEmpty());
1643:       assertFalse(node1.isFunction());
1644:       assertFalse(node1.isTry());
1645:       assertFalse(node1.isRegExp());
1646:       assertFalse(node1.isDefaultCase());
1647:       assertFalse(node1.isFor());
1648:       assertFalse(node1.isCatch());
1649:       assertFalse(node1.isIn());
1650:       assertFalse(node1.isTrue());
1651:       assertFalse(node1.isDelProp());
1652:       assertFalse(node1.isVoid());
1653:       assertFalse(node1.isIf());
1654:       assertFalse(node1.isNull());
1655:       assertFalse(node1.isNE());
1656:       assertFalse(node1.isAdd());
1657:       assertFalse(node1.isThis());
1658:       assertFalse(node1.isNew());
1659:       assertEquals(39, node1.getType());
1660:       assertFalse(node1.isBlock());
1661:       assertFalse(node1.isHook());
1662:       assertFalse(node1.isVar());
1663:       assertFalse(node1.isCase());
1664:       assertEquals(0, node1.getChildCount());
1665:       assertFalse(node1.isScript());
1666:       assertFalse(node1.isSwitch());
1667:       assertFalse(node1.isParamList());
1668:       assertEquals((-1), node1.getCharno());
1669:       assertFalse(node1.isGetterDef());
1670:       assertFalse(node1.isStringKey());
1671:       assertFalse(node5.isInc());
1672:       assertEquals((-1), node5.getCharno());
1673:       assertFalse(node5.isSwitch());
1674:       assertFalse(node5.isGetterDef());
1675:       assertFalse(node5.isDelProp());
1676:       assertFalse(node5.isComma());
1677:       assertFalse(node5.isThis());
1678:       assertFalse(node5.isBreak());
1679:       assertFalse(node5.isGetProp());
1680:       assertFalse(node5.isHook());
1681:       assertFalse(node5.isCase());
1682:       assertFalse(node5.isFor());
1683:       assertFalse(node5.isTry());
1684:       assertFalse(node5.isScript());
1685:       assertFalse(node5.isTrue());
1686:       assertFalse(node5.isExprResult());
1687:       assertFalse(node5.isArrayLit());
1688:       assertFalse(node5.isLabelName());
1689:       assertFalse(node5.isVoid());
1690:       assertFalse(node5.isParamList());
1691:       assertFalse(node5.isNull());
1692:       assertFalse(node5.isOr());
1693:       assertFalse(node5.isEmpty());
1694:       assertFalse(node5.isVar());
1695:       assertEquals(0, node5.getChildCount());
1696:       assertFalse(node5.isLabel());
1697:       assertFalse(node5.isNew());
1698:       assertFalse(node5.isDo());
1699:       assertFalse(node5.isAssignAdd());
1700:       assertFalse(node5.isDefaultCase());
1701:       assertFalse(node5.isAdd());
1702:       assertFalse(node5.isContinue());
1703:       assertFalse(node5.hasMoreThanOneChild());
1704:       assertFalse(node5.isCall());
1705:       assertEquals((-1), node5.getLineno());
1706:       assertFalse(node5.isStringKey());
1707:       assertFalse(node5.isName());
1708:       assertFalse(node5.isNumber());
1709:       assertEquals((-1), node5.getSourcePosition());
1710:       assertFalse(node5.isDec());
1711:       assertFalse(node5.isTypeOf());
1712:       assertFalse(node5.hasChildren());
1713:       assertFalse(node5.isGetElem());
1714:       assertFalse(node5.isAssign());
1715:       assertFalse(node5.hasOneChild());
1716:       assertFalse(node5.isReturn());
1717:       assertFalse(node5.isBlock());
1718:       assertTrue(node5.isString());
1719:       assertFalse(node5.isWhile());
1720:       assertFalse(node5.isRegExp());
1721:       assertFalse(node5.isDebugger());
1722:       assertFalse(node5.isNot());
1723:       assertFalse(node5.isObjectLit());
1724:       assertFalse(node5.isCatch());
1725:       assertFalse(node5.isWith());
1726:       assertFalse(node5.isFunction());
1727:       assertFalse(node5.isInstanceOf());
1728:       assertFalse(node5.isCast());
1729:       assertFalse(node5.isIf());
1730:       assertFalse(node5.isAnd());
1731:       assertFalse(node5.isNE());
1732:       assertFalse(node5.isSetterDef());
1733:       assertFalse(node5.isFalse());
1734:       assertFalse(node5.isIn());
1735:       assertEquals(40, node5.getType());
1736:       assertFalse(node5.isThrow());
1737:       
1738:       Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
1739:       assertNotNull(node_SideEffectFlags1);
1740:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
1741:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1742:       assertEquals(0, node_SideEffectFlags1.valueOf());
1743:       
1744:       Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
1745:       assertNotNull(node_SideEffectFlags2);
1746:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
1747:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
1748:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1749:       assertEquals(0, node_SideEffectFlags2.valueOf());
1750:       
1751:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
1752:       assertNotNull(node_SideEffectFlags3);
1753:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1754:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
1755:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
1756:       assertNotSame(node_SideEffectFlags3, node_SideEffectFlags1);
1757:       assertNotSame(node_SideEffectFlags3, node_SideEffectFlags0);
1758:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1759:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
1760:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
1761:       assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags1));
1762:       assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags0));
1763:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1764:       assertEquals(31, node_SideEffectFlags2.valueOf());
1765:       assertEquals(31, node_SideEffectFlags3.valueOf());
1766:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1767:       
1768:       boolean boolean3 = node1.hasChildren();
1769:       assertSame(node1, node3);
1770:       assertFalse(boolean3);
1771:       assertTrue(boolean3 == boolean0);
1772:       assertTrue(boolean3 == boolean2);
1773:       assertTrue(boolean3 == boolean1);
1774:       assertFalse(node1.equals((Object)node5));
1775:       assertFalse(node1.equals((Object)node2));
1776:       assertFalse(node1.equals((Object)node4));
1777:       assertFalse(node1.equals((Object)node0));
1778:       assertFalse(node1.hasOneChild());
1779:       assertFalse(node1.isLabelName());
1780:       assertFalse(node1.isAssign());
1781:       assertFalse(node1.isGetElem());
1782:       assertFalse(node1.isCast());
1783:       assertFalse(node1.isDec());
1784:       assertFalse(node1.isTypeOf());
1785:       assertFalse(node1.isReturn());
1786:       assertFalse(node1.isAssignAdd());
1787:       assertFalse(node1.isLabel());
1788:       assertFalse(node1.hasChildren());
1789:       assertFalse(node1.hasMoreThanOneChild());
1790:       assertFalse(node1.isDo());
1791:       assertFalse(node1.isWith());
1792:       assertEquals((-1), node1.getLineno());
1793:       assertFalse(node1.isInstanceOf());
1794:       assertFalse(node1.isExprResult());
1795:       assertFalse(node1.isOr());
1796:       assertFalse(node1.isCall());
1797:       assertFalse(node1.isName());
1798:       assertFalse(node1.isFalse());
1799:       assertFalse(node1.isBreak());
1800:       assertFalse(node1.isSetterDef());
1801:       assertFalse(node1.isComma());
1802:       assertFalse(node1.isInc());
1803:       assertFalse(node1.isGetProp());
1804:       assertFalse(node1.isWhile());
1805:       assertFalse(node1.isThrow());
1806:       assertFalse(node1.isContinue());
1807:       assertFalse(node1.isAnd());
1808:       assertFalse(node1.isNot());
1809:       assertFalse(node1.isObjectLit());
1810:       assertTrue(node1.isNumber());
1811:       assertFalse(node1.isString());
1812:       assertFalse(node1.isDebugger());
1813:       assertEquals((-1), node1.getSourcePosition());
1814:       assertFalse(node1.isArrayLit());
1815:       assertFalse(node1.isEmpty());
1816:       assertFalse(node1.isFunction());
1817:       assertFalse(node1.isTry());
1818:       assertFalse(node1.isRegExp());
1819:       assertFalse(node1.isDefaultCase());
1820:       assertFalse(node1.isFor());
1821:       assertFalse(node1.isCatch());
1822:       assertFalse(node1.isIn());
1823:       assertFalse(node1.isTrue());
1824:       assertFalse(node1.isDelProp());
1825:       assertFalse(node1.isVoid());
1826:       assertFalse(node1.isIf());
1827:       assertFalse(node1.isNull());
1828:       assertFalse(node1.isNE());
1829:       assertFalse(node1.isAdd());
1830:       assertFalse(node1.isThis());
1831:       assertFalse(node1.isNew());
1832:       assertEquals(39, node1.getType());
1833:       assertFalse(node1.isBlock());
1834:       assertFalse(node1.isHook());
1835:       assertFalse(node1.isVar());
1836:       assertFalse(node1.isCase());
1837:       assertEquals(0, node1.getChildCount());
1838:       assertFalse(node1.isScript());
1839:       assertFalse(node1.isSwitch());
1840:       assertFalse(node1.isParamList());
1841:       assertEquals((-1), node1.getCharno());
1842:       assertFalse(node1.isGetterDef());
1843:       assertFalse(node1.isStringKey());
1844:       
1845:       node_SideEffectFlags3.clearSideEffectFlags();
1846:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1847:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
1848:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
1849:       assertNotSame(node_SideEffectFlags3, node_SideEffectFlags1);
1850:       assertNotSame(node_SideEffectFlags3, node_SideEffectFlags0);
1851:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1852:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
1853:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
1854:       assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags1));
1855:       assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags0));
1856:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1857:       assertEquals(31, node_SideEffectFlags2.valueOf());
1858:       assertEquals(31, node_SideEffectFlags3.valueOf());
1859:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1860:       
1861:       String string1 = node0.checkTreeEquals(node5);
1862:       assertNull(string1);
1863:       assertNotSame(node0, node4);
1864:       assertSame(node0, node5);
1865:       assertSame(node1, node3);
1866:       assertNotSame(node5, node4);
1867:       assertSame(node5, node0);
1868:       assertFalse(node0.equals((Object)node3));
1869:       assertFalse(node0.equals((Object)node4));
1870:       assertFalse(node0.equals((Object)node1));
1871:       assertFalse(node0.equals((Object)node2));
1872:       assertFalse(node1.equals((Object)node5));
1873:       assertFalse(node1.equals((Object)node2));
1874:       assertFalse(node1.equals((Object)node4));
1875:       assertFalse(node1.equals((Object)node0));
1876:       assertFalse(node5.equals((Object)node3));
1877:       assertFalse(node5.equals((Object)node4));
1878:       assertFalse(node5.equals((Object)node1));
1879:       assertFalse(node5.equals((Object)node2));
1880:       assertFalse(node0.isIf());
1881:       assertFalse(node0.isFor());
1882:       assertFalse(node0.isNE());
1883:       assertFalse(node0.isEmpty());
1884:       assertFalse(node0.isGetterDef());
1885:       assertFalse(node0.isArrayLit());
1886:       assertFalse(node0.isDelProp());
1887:       assertFalse(node0.isVoid());
1888:       assertFalse(node0.isRegExp());
1889:       assertFalse(node0.isSwitch());
1890:       assertEquals((-1), node0.getCharno());
1891:       assertFalse(node0.isDebugger());
1892:       assertFalse(node0.isHook());
1893:       assertFalse(node0.isCase());
1894:       assertFalse(node0.isTry());
1895:       assertFalse(node0.isSetterDef());
1896:       assertFalse(node0.isThis());
1897:       assertFalse(node0.isFalse());
1898:       assertFalse(node0.isInstanceOf());
1899:       assertFalse(node0.isCatch());
1900:       assertFalse(node0.isAnd());
1901:       assertFalse(node0.isInc());
1902:       assertEquals(40, node0.getType());
1903:       assertFalse(node0.isContinue());
1904:       assertFalse(node0.isFunction());
1905:       assertFalse(node0.isIn());
1906:       assertFalse(node0.isThrow());
1907:       assertFalse(node0.isNumber());
1908:       assertEquals((-1), node0.getSourcePosition());
1909:       assertFalse(node0.isDec());
1910:       assertFalse(node0.isTypeOf());
1911:       assertFalse(node0.hasChildren());
1912:       assertFalse(node0.isLabel());
1913:       assertFalse(node0.isOr());
1914:       assertFalse(node0.isAssign());
1915:       assertFalse(node0.hasMoreThanOneChild());
1916:       assertFalse(node0.isCast());
1917:       assertFalse(node0.isGetElem());
1918:       assertEquals((-1), node0.getLineno());
1919:       assertFalse(node0.isLabelName());
1920:       assertFalse(node0.isExprResult());
1921:       assertFalse(node0.isWhile());
1922:       assertFalse(node0.isScript());
1923:       assertFalse(node0.isBlock());
1924:       assertFalse(node0.isWith());
1925:       assertFalse(node0.isObjectLit());
1926:       assertFalse(node0.isNot());
1927:       assertFalse(node0.hasOneChild());
1928:       assertFalse(node0.isReturn());
1929:       assertTrue(node0.isString());
1930:       assertFalse(node0.isGetProp());
1931:       assertFalse(node0.isNull());
1932:       assertFalse(node0.isBreak());
1933:       assertFalse(node0.isParamList());
1934:       assertFalse(node0.isComma());
1935:       assertEquals(0, node0.getChildCount());
1936:       assertFalse(node0.isCall());
1937:       assertFalse(node0.isStringKey());
1938:       assertFalse(node0.isName());
1939:       assertFalse(node0.isDefaultCase());
1940:       assertFalse(node0.isTrue());
1941:       assertFalse(node0.isVar());
1942:       assertFalse(node0.isAdd());
1943:       assertFalse(node0.isNew());
1944:       assertFalse(node0.isAssignAdd());
1945:       assertFalse(node0.isDo());
1946:       assertFalse(node1.hasOneChild());
1947:       assertFalse(node1.isLabelName());
1948:       assertFalse(node1.isAssign());
1949:       assertFalse(node1.isGetElem());
1950:       assertFalse(node1.isCast());
1951:       assertFalse(node1.isDec());
1952:       assertFalse(node1.isTypeOf());
1953:       assertFalse(node1.isReturn());
1954:       assertFalse(node1.isAssignAdd());
1955:       assertFalse(node1.isLabel());
1956:       assertFalse(node1.hasChildren());
1957:       assertFalse(node1.hasMoreThanOneChild());
1958:       assertFalse(node1.isDo());
1959:       assertFalse(node1.isWith());
1960:       assertEquals((-1), node1.getLineno());
1961:       assertFalse(node1.isInstanceOf());
1962:       assertFalse(node1.isExprResult());
1963:       assertFalse(node1.isOr());
1964:       assertFalse(node1.isCall());
1965:       assertFalse(node1.isName());
1966:       assertFalse(node1.isFalse());
1967:       assertFalse(node1.isBreak());
1968:       assertFalse(node1.isSetterDef());
1969:       assertFalse(node1.isComma());
1970:       assertFalse(node1.isInc());
1971:       assertFalse(node1.isGetProp());
1972:       assertFalse(node1.isWhile());
1973:       assertFalse(node1.isThrow());
1974:       assertFalse(node1.isContinue());
1975:       assertFalse(node1.isAnd());
1976:       assertFalse(node1.isNot());
1977:       assertFalse(node1.isObjectLit());
1978:       assertTrue(node1.isNumber());
1979:       assertFalse(node1.isString());
1980:       assertFalse(node1.isDebugger());
1981:       assertEquals((-1), node1.getSourcePosition());
1982:       assertFalse(node1.isArrayLit());
1983:       assertFalse(node1.isEmpty());
1984:       assertFalse(node1.isFunction());
1985:       assertFalse(node1.isTry());
1986:       assertFalse(node1.isRegExp());
1987:       assertFalse(node1.isDefaultCase());
1988:       assertFalse(node1.isFor());
1989:       assertFalse(node1.isCatch());
1990:       assertFalse(node1.isIn());
1991:       assertFalse(node1.isTrue());
1992:       assertFalse(node1.isDelProp());
1993:       assertFalse(node1.isVoid());
1994:       assertFalse(node1.isIf());
1995:       assertFalse(node1.isNull());
1996:       assertFalse(node1.isNE());
1997:       assertFalse(node1.isAdd());
1998:       assertFalse(node1.isThis());
1999:       assertFalse(node1.isNew());
2000:       assertEquals(39, node1.getType());
2001:       assertFalse(node1.isBlock());
2002:       assertFalse(node1.isHook());
2003:       assertFalse(node1.isVar());
2004:       assertFalse(node1.isCase());
2005:       assertEquals(0, node1.getChildCount());
2006:       assertFalse(node1.isScript());
2007:       assertFalse(node1.isSwitch());
2008:       assertFalse(node1.isParamList());
2009:       assertEquals((-1), node1.getCharno());
2010:       assertFalse(node1.isGetterDef());
2011:       assertFalse(node1.isStringKey());
2012:       assertFalse(node5.isInc());
2013:       assertEquals((-1), node5.getCharno());
2014:       assertFalse(node5.isSwitch());
2015:       assertFalse(node5.isGetterDef());
2016:       assertFalse(node5.isDelProp());
2017:       assertFalse(node5.isComma());
2018:       assertFalse(node5.isThis());
2019:       assertFalse(node5.isBreak());
2020:       assertFalse(node5.isGetProp());
2021:       assertFalse(node5.isHook());
2022:       assertFalse(node5.isCase());
2023:       assertFalse(node5.isFor());
2024:       assertFalse(node5.isTry());
2025:       assertFalse(node5.isScript());
2026:       assertFalse(node5.isTrue());
2027:       assertFalse(node5.isExprResult());
2028:       assertFalse(node5.isArrayLit());
2029:       assertFalse(node5.isLabelName());
2030:       assertFalse(node5.isVoid());
2031:       assertFalse(node5.isParamList());
2032:       assertFalse(node5.isNull());
2033:       assertFalse(node5.isOr());
2034:       assertFalse(node5.isEmpty());
2035:       assertFalse(node5.isVar());
2036:       assertEquals(0, node5.getChildCount());
2037:       assertFalse(node5.isLabel());
2038:       assertFalse(node5.isNew());
2039:       assertFalse(node5.isDo());
2040:       assertFalse(node5.isAssignAdd());
2041:       assertFalse(node5.isDefaultCase());
2042:       assertFalse(node5.isAdd());
2043:       assertFalse(node5.isContinue());
2044:       assertFalse(node5.hasMoreThanOneChild());
2045:       assertFalse(node5.isCall());
2046:       assertEquals((-1), node5.getLineno());
2047:       assertFalse(node5.isStringKey());
2048:       assertFalse(node5.isName());
2049:       assertFalse(node5.isNumber());
2050:       assertEquals((-1), node5.getSourcePosition());
2051:       assertFalse(node5.isDec());
2052:       assertFalse(node5.isTypeOf());
2053:       assertFalse(node5.hasChildren());
2054:       assertFalse(node5.isGetElem());
2055:       assertFalse(node5.isAssign());
2056:       assertFalse(node5.hasOneChild());
2057:       assertFalse(node5.isReturn());
2058:       assertFalse(node5.isBlock());
2059:       assertTrue(node5.isString());
2060:       assertFalse(node5.isWhile());
2061:       assertFalse(node5.isRegExp());
2062:       assertFalse(node5.isDebugger());
2063:       assertFalse(node5.isNot());
2064:       assertFalse(node5.isObjectLit());
2065:       assertFalse(node5.isCatch());
2066:       assertFalse(node5.isWith());
2067:       assertFalse(node5.isFunction());
2068:       assertFalse(node5.isInstanceOf());
2069:       assertFalse(node5.isCast());
2070:       assertFalse(node5.isIf());
2071:       assertFalse(node5.isAnd());
2072:       assertFalse(node5.isNE());
2073:       assertFalse(node5.isSetterDef());
2074:       assertFalse(node5.isFalse());
2075:       assertFalse(node5.isIn());
2076:       assertEquals(40, node5.getType());
2077:       assertFalse(node5.isThrow());
2078:       
2079:       Set<String> set0 = node2.getDirectives();
2080:       assertNull(set0);
2081:       assertNotSame(node0, node4);
2082:       assertSame(node0, node5);
2083:       assertFalse(node0.equals((Object)node3));
2084:       assertFalse(node0.equals((Object)node4));
2085:       assertFalse(node0.equals((Object)node1));
2086:       assertFalse(node0.equals((Object)node2));
2087:       assertFalse(node2.equals((Object)node5));
2088:       assertFalse(node2.equals((Object)node1));
2089:       assertFalse(node2.equals((Object)node4));
2090:       assertFalse(node2.equals((Object)node3));
2091:       assertFalse(node2.equals((Object)node0));
2092:       assertFalse(node0.isIf());
2093:       assertFalse(node0.isFor());
2094:       assertFalse(node0.isNE());
2095:       assertFalse(node0.isEmpty());
2096:       assertFalse(node0.isGetterDef());
2097:       assertFalse(node0.isArrayLit());
2098:       assertFalse(node0.isDelProp());
2099:       assertFalse(node0.isVoid());
2100:       assertFalse(node0.isRegExp());
2101:       assertFalse(node0.isSwitch());
2102:       assertEquals((-1), node0.getCharno());
2103:       assertFalse(node0.isDebugger());
2104:       assertFalse(node0.isHook());
2105:       assertFalse(node0.isCase());
2106:       assertFalse(node0.isTry());
2107:       assertFalse(node0.isSetterDef());
2108:       assertFalse(node0.isThis());
2109:       assertFalse(node0.isFalse());
2110:       assertFalse(node0.isInstanceOf());
2111:       assertFalse(node0.isCatch());
2112:       assertFalse(node0.isAnd());
2113:       assertFalse(node0.isInc());
2114:       assertEquals(40, node0.getType());
2115:       assertFalse(node0.isContinue());
2116:       assertFalse(node0.isFunction());
2117:       assertFalse(node0.isIn());
2118:       assertFalse(node0.isThrow());
2119:       assertFalse(node0.isNumber());
2120:       assertEquals((-1), node0.getSourcePosition());
2121:       assertFalse(node0.isDec());
2122:       assertFalse(node0.isTypeOf());
2123:       assertFalse(node0.hasChildren());
2124:       assertFalse(node0.isLabel());
2125:       assertFalse(node0.isOr());
2126:       assertFalse(node0.isAssign());
2127:       assertFalse(node0.hasMoreThanOneChild());
2128:       assertFalse(node0.isCast());
2129:       assertFalse(node0.isGetElem());
2130:       assertEquals((-1), node0.getLineno());
2131:       assertFalse(node0.isLabelName());
2132:       assertFalse(node0.isExprResult());
2133:       assertFalse(node0.isWhile());
2134:       assertFalse(node0.isScript());
2135:       assertFalse(node0.isBlock());
2136:       assertFalse(node0.isWith());
2137:       assertFalse(node0.isObjectLit());
2138:       assertFalse(node0.isNot());
2139:       assertFalse(node0.hasOneChild());
2140:       assertFalse(node0.isReturn());
2141:       assertTrue(node0.isString());
2142:       assertFalse(node0.isGetProp());
2143:       assertFalse(node0.isNull());
2144:       assertFalse(node0.isBreak());
2145:       assertFalse(node0.isParamList());
2146:       assertFalse(node0.isComma());
2147:       assertEquals(0, node0.getChildCount());
2148:       assertFalse(node0.isCall());
2149:       assertFalse(node0.isStringKey());
2150:       assertFalse(node0.isName());
2151:       assertFalse(node0.isDefaultCase());
2152:       assertFalse(node0.isTrue());
2153:       assertFalse(node0.isVar());
2154:       assertFalse(node0.isAdd());
2155:       assertFalse(node0.isNew());
2156:       assertFalse(node0.isAssignAdd());
2157:       assertFalse(node0.isDo());
2158:       assertFalse(node2.isFalse());
2159:       assertFalse(node2.isBreak());
2160:       assertEquals((-1), node2.getCharno());
2161:       assertFalse(node2.isSwitch());
2162:       assertFalse(node2.isAnd());
2163:       assertFalse(node2.isIn());
2164:       assertEquals(657, node2.getType());
2165:       assertFalse(node2.isInc());
2166:       assertFalse(node2.isThrow());
2167:       assertFalse(node2.isArrayLit());
2168:       assertFalse(node2.isLabelName());
2169:       assertFalse(node2.isGetterDef());
2170:       assertFalse(node2.isNumber());
2171:       assertEquals((-1), node2.getLineno());
2172:       assertFalse(node2.isIf());
2173:       assertFalse(node2.isNE());
2174:       assertFalse(node2.hasMoreThanOneChild());
2175:       assertFalse(node2.isCase());
2176:       assertFalse(node2.isWith());
2177:       assertFalse(node2.isScript());
2178:       assertTrue(node2.hasChildren());
2179:       assertFalse(node2.isCatch());
2180:       assertFalse(node2.isInstanceOf());
2181:       assertFalse(node2.isThis());
2182:       assertFalse(node2.isTry());
2183:       assertFalse(node2.isRegExp());
2184:       assertEquals(1, node2.getChildCount());
2185:       assertFalse(node2.isHook());
2186:       assertFalse(node2.isBlock());
2187:       assertFalse(node2.isFor());
2188:       assertFalse(node2.isCall());
2189:       assertFalse(node2.isName());
2190:       assertFalse(node2.isAdd());
2191:       assertFalse(node2.isParamList());
2192:       assertFalse(node2.isNull());
2193:       assertFalse(node2.isStringKey());
2194:       assertFalse(node2.isContinue());
2195:       assertFalse(node2.isDo());
2196:       assertFalse(node2.isSetterDef());
2197:       assertFalse(node2.isFunction());
2198:       assertFalse(node2.isLabel());
2199:       assertFalse(node2.isNew());
2200:       assertFalse(node2.isDefaultCase());
2201:       assertFalse(node2.isVar());
2202:       assertFalse(node2.isAssignAdd());
2203:       assertFalse(node2.isGetElem());
2204:       assertFalse(node2.isAssign());
2205:       assertFalse(node2.isEmpty());
2206:       assertFalse(node2.isCast());
2207:       assertFalse(node2.isTrue());
2208:       assertFalse(node2.isVoid());
2209:       assertFalse(node2.isExprResult());
2210:       assertFalse(node2.isDebugger());
2211:       assertEquals((-1), node2.getSourcePosition());
2212:       assertFalse(node2.isOr());
2213:       assertFalse(node2.isDelProp());
2214:       assertFalse(node2.isObjectLit());
2215:       assertFalse(node2.isNot());
2216:       assertFalse(node2.isString());
2217:       assertFalse(node2.isGetProp());
2218:       assertFalse(node2.isTypeOf());
2219:       assertFalse(node2.isComma());
2220:       assertFalse(node2.isDec());
2221:       assertFalse(node2.isWhile());
2222:       assertTrue(node2.hasOneChild());
2223:       assertFalse(node2.isReturn());
2224:       
2225:       node3.setWasEmptyNode(false);
2226:       assertNotSame(node0, node4);
2227:       assertSame(node0, node5);
2228:       assertSame(node1, node3);
2229:       assertSame(node3, node1);
2230:       assertFalse(node0.equals((Object)node3));
2231:       assertFalse(node0.equals((Object)node4));
2232:       assertFalse(node0.equals((Object)node1));
2233:       assertFalse(node0.equals((Object)node2));
2234:       assertFalse(node1.equals((Object)node5));
2235:       assertFalse(node1.equals((Object)node2));
2236:       assertFalse(node1.equals((Object)node4));
2237:       assertFalse(node1.equals((Object)node0));
2238:       assertFalse(node2.equals((Object)node5));
2239:       assertFalse(node2.equals((Object)node1));
2240:       assertFalse(node2.equals((Object)node4));
2241:       assertFalse(node2.equals((Object)node3));
2242:       assertFalse(node2.equals((Object)node0));
2243:       assertFalse(node3.equals((Object)node0));
2244:       assertFalse(node3.equals((Object)node4));
2245:       assertFalse(node3.equals((Object)node5));
2246:       assertFalse(node3.equals((Object)node2));
2247:       assertFalse(node0.isIf());
2248:       assertFalse(node0.isFor());
2249:       assertFalse(node0.isNE());
2250:       assertFalse(node0.isEmpty());
2251:       assertFalse(node0.isGetterDef());
2252:       assertFalse(node0.isArrayLit());
2253:       assertFalse(node0.isDelProp());
2254:       assertFalse(node0.isVoid());
2255:       assertFalse(node0.isRegExp());
2256:       assertFalse(node0.isSwitch());
2257:       assertEquals((-1), node0.getCharno());
2258:       assertFalse(node0.isDebugger());
2259:       assertFalse(node0.isHook());
2260:       assertFalse(node0.isCase());
2261:       assertFalse(node0.isTry());
2262:       assertFalse(node0.isSetterDef());
2263:       assertFalse(node0.isThis());
2264:       assertFalse(node0.isFalse());
2265:       assertFalse(node0.isInstanceOf());
2266:       assertFalse(node0.isCatch());
2267:       assertFalse(node0.isAnd());
2268:       assertFalse(node0.isInc());
2269:       assertEquals(40, node0.getType());
2270:       assertFalse(node0.isContinue());
2271:       assertFalse(node0.isFunction());
2272:       assertFalse(node0.isIn());
2273:       assertFalse(node0.isThrow());
2274:       assertFalse(node0.isNumber());
2275:       assertEquals((-1), node0.getSourcePosition());
2276:       assertFalse(node0.isDec());
2277:       assertFalse(node0.isTypeOf());
2278:       assertFalse(node0.hasChildren());
2279:       assertFalse(node0.isLabel());
2280:       assertFalse(node0.isOr());
2281:       assertFalse(node0.isAssign());
2282:       assertFalse(node0.hasMoreThanOneChild());
2283:       assertFalse(node0.isCast());
2284:       assertFalse(node0.isGetElem());
2285:       assertEquals((-1), node0.getLineno());
2286:       assertFalse(node0.isLabelName());
2287:       assertFalse(node0.isExprResult());
2288:       assertFalse(node0.isWhile());
2289:       assertFalse(node0.isScript());
2290:       assertFalse(node0.isBlock());
2291:       assertFalse(node0.isWith());
2292:       assertFalse(node0.isObjectLit());
2293:       assertFalse(node0.isNot());
2294:       assertFalse(node0.hasOneChild());
2295:       assertFalse(node0.isReturn());
2296:       assertTrue(node0.isString());
2297:       assertFalse(node0.isGetProp());
2298:       assertFalse(node0.isNull());
2299:       assertFalse(node0.isBreak());
2300:       assertFalse(node0.isParamList());
2301:       assertFalse(node0.isComma());
2302:       assertEquals(0, node0.getChildCount());
2303:       assertFalse(node0.isCall());
2304:       assertFalse(node0.isStringKey());
2305:       assertFalse(node0.isName());
2306:       assertFalse(node0.isDefaultCase());
2307:       assertFalse(node0.isTrue());
2308:       assertFalse(node0.isVar());
2309:       assertFalse(node0.isAdd());
2310:       assertFalse(node0.isNew());
2311:       assertFalse(node0.isAssignAdd());
2312:       assertFalse(node0.isDo());
2313:       assertFalse(node1.hasOneChild());
2314:       assertFalse(node1.isLabelName());
2315:       assertFalse(node1.isAssign());
2316:       assertFalse(node1.isGetElem());
2317:       assertFalse(node1.isCast());
2318:       assertFalse(node1.isDec());
2319:       assertFalse(node1.isTypeOf());
2320:       assertFalse(node1.isReturn());
2321:       assertFalse(node1.isAssignAdd());
2322:       assertFalse(node1.isLabel());
2323:       assertFalse(node1.hasChildren());
2324:       assertFalse(node1.hasMoreThanOneChild());
2325:       assertFalse(node1.isDo());
2326:       assertFalse(node1.isWith());
2327:       assertEquals((-1), node1.getLineno());
2328:       assertFalse(node1.isInstanceOf());
2329:       assertFalse(node1.isExprResult());
2330:       assertFalse(node1.isOr());
2331:       assertFalse(node1.isCall());
2332:       assertFalse(node1.isName());
2333:       assertFalse(node1.isFalse());
2334:       assertFalse(node1.isBreak());
2335:       assertFalse(node1.isSetterDef());
2336:       assertFalse(node1.isComma());
2337:       assertFalse(node1.isInc());
2338:       assertFalse(node1.isGetProp());
2339:       assertFalse(node1.isWhile());
2340:       assertFalse(node1.isThrow());
2341:       assertFalse(node1.isContinue());
2342:       assertFalse(node1.isAnd());
2343:       assertFalse(node1.isNot());
2344:       assertFalse(node1.isObjectLit());
2345:       assertTrue(node1.isNumber());
2346:       assertFalse(node1.isString());
2347:       assertFalse(node1.isDebugger());
2348:       assertEquals((-1), node1.getSourcePosition());
2349:       assertFalse(node1.isArrayLit());
2350:       assertFalse(node1.isEmpty());
2351:       assertFalse(node1.isFunction());
2352:       assertFalse(node1.isTry());
2353:       assertFalse(node1.isRegExp());
2354:       assertFalse(node1.isDefaultCase());
2355:       assertFalse(node1.isFor());
2356:       assertFalse(node1.isCatch());
2357:       assertFalse(node1.isIn());
2358:       assertFalse(node1.isTrue());
2359:       assertFalse(node1.isDelProp());
2360:       assertFalse(node1.isVoid());
2361:       assertFalse(node1.isIf());
2362:       assertFalse(node1.isNull());
2363:       assertFalse(node1.isNE());
2364:       assertFalse(node1.isAdd());
2365:       assertFalse(node1.isThis());
2366:       assertFalse(node1.isNew());
2367:       assertEquals(39, node1.getType());
2368:       assertFalse(node1.isBlock());
2369:       assertFalse(node1.isHook());
2370:       assertFalse(node1.isVar());
2371:       assertFalse(node1.isCase());
2372:       assertEquals(0, node1.getChildCount());
2373:       assertFalse(node1.isScript());
2374:       assertFalse(node1.isSwitch());
2375:       assertFalse(node1.isParamList());
2376:       assertEquals((-1), node1.getCharno());
2377:       assertFalse(node1.isGetterDef());
2378:       assertFalse(node1.isStringKey());
2379:       assertFalse(node2.isFalse());
2380:       assertFalse(node2.isBreak());
2381:       assertEquals((-1), node2.getCharno());
2382:       assertFalse(node2.isSwitch());
2383:       assertFalse(node2.isAnd());
2384:       assertFalse(node2.isIn());
2385:       assertEquals(657, node2.getType());
2386:       assertFalse(node2.isInc());
2387:       assertFalse(node2.isThrow());
2388:       assertFalse(node2.isArrayLit());
2389:       assertFalse(node2.isLabelName());
2390:       assertFalse(node2.isGetterDef());
2391:       assertFalse(node2.isNumber());
2392:       assertEquals((-1), node2.getLineno());
2393:       assertFalse(node2.isIf());
2394:       assertFalse(node2.isNE());
2395:       assertFalse(node2.hasMoreThanOneChild());
2396:       assertFalse(node2.isCase());
2397:       assertFalse(node2.isWith());
2398:       assertFalse(node2.isScript());
2399:       assertTrue(node2.hasChildren());
2400:       assertFalse(node2.isCatch());
2401:       assertFalse(node2.isInstanceOf());
2402:       assertFalse(node2.isThis());
2403:       assertFalse(node2.isTry());
2404:       assertFalse(node2.isRegExp());
2405:       assertEquals(1, node2.getChildCount());
2406:       assertFalse(node2.isHook());
2407:       assertFalse(node2.isBlock());
2408:       assertFalse(node2.isFor());
2409:       assertFalse(node2.isCall());
2410:       assertFalse(node2.isName());
2411:       assertFalse(node2.isAdd());
2412:       assertFalse(node2.isParamList());
2413:       assertFalse(node2.isNull());
2414:       assertFalse(node2.isStringKey());
2415:       assertFalse(node2.isContinue());
2416:       assertFalse(node2.isDo());
2417:       assertFalse(node2.isSetterDef());
2418:       assertFalse(node2.isFunction());
2419:       assertFalse(node2.isLabel());
2420:       assertFalse(node2.isNew());
2421:       assertFalse(node2.isDefaultCase());
2422:       assertFalse(node2.isVar());
2423:       assertFalse(node2.isAssignAdd());
2424:       assertFalse(node2.isGetElem());
2425:       assertFalse(node2.isAssign());
2426:       assertFalse(node2.isEmpty());
2427:       assertFalse(node2.isCast());
2428:       assertFalse(node2.isTrue());
2429:       assertFalse(node2.isVoid());
2430:       assertFalse(node2.isExprResult());
2431:       assertFalse(node2.isDebugger());
2432:       assertEquals((-1), node2.getSourcePosition());
2433:       assertFalse(node2.isOr());
2434:       assertFalse(node2.isDelProp());
2435:       assertFalse(node2.isObjectLit());
2436:       assertFalse(node2.isNot());
2437:       assertFalse(node2.isString());
2438:       assertFalse(node2.isGetProp());
2439:       assertFalse(node2.isTypeOf());
2440:       assertFalse(node2.isComma());
2441:       assertFalse(node2.isDec());
2442:       assertFalse(node2.isWhile());
2443:       assertTrue(node2.hasOneChild());
2444:       assertFalse(node2.isReturn());
2445:       assertFalse(node3.isComma());
2446:       assertFalse(node3.isThrow());
2447:       assertFalse(node3.isThis());
2448:       assertFalse(node3.isObjectLit());
2449:       assertFalse(node3.isGetProp());
2450:       assertFalse(node3.isScript());
2451:       assertFalse(node3.isInc());
2452:       assertFalse(node3.isHook());
2453:       assertFalse(node3.isWith());
2454:       assertFalse(node3.isBreak());
2455:       assertFalse(node3.isInstanceOf());
2456:       assertFalse(node3.isGetElem());
2457:       assertFalse(node3.isExprResult());
2458:       assertFalse(node3.isNE());
2459:       assertEquals((-1), node3.getSourcePosition());
2460:       assertFalse(node3.isIf());
2461:       assertFalse(node3.isDec());
2462:       assertFalse(node3.isTypeOf());
2463:       assertFalse(node3.isAssign());
2464:       assertFalse(node3.hasChildren());
2465:       assertFalse(node3.isReturn());
2466:       assertFalse(node3.isIn());
2467:       assertTrue(node3.isNumber());
2468:       assertFalse(node3.isString());
2469:       assertFalse(node3.isDebugger());
2470:       assertFalse(node3.isFunction());
2471:       assertFalse(node3.isNot());
2472:       assertFalse(node3.isCast());
2473:       assertFalse(node3.isContinue());
2474:       assertFalse(node3.isAnd());
2475:       assertFalse(node3.isFalse());
2476:       assertFalse(node3.isSetterDef());
2477:       assertFalse(node3.isParamList());
2478:       assertFalse(node3.isStringKey());
2479:       assertFalse(node3.isNull());
2480:       assertFalse(node3.isVar());
2481:       assertFalse(node3.isNew());
2482:       assertFalse(node3.isAdd());
2483:       assertFalse(node3.isVoid());
2484:       assertFalse(node3.isRegExp());
2485:       assertEquals(39, node3.getType());
2486:       assertFalse(node3.isWhile());
2487:       assertFalse(node3.isBlock());
2488:       assertFalse(node3.isTrue());
2489:       assertFalse(node3.hasMoreThanOneChild());
2490:       assertFalse(node3.isCatch());
2491:       assertFalse(node3.isName());
2492:       assertEquals((-1), node3.getLineno());
2493:       assertFalse(node3.isCall());
2494:       assertFalse(node3.isGetterDef());
2495:       assertFalse(node3.isDelProp());
2496:       assertFalse(node3.isAssignAdd());
2497:       assertFalse(node3.isOr());
2498:       assertFalse(node3.isLabel());
2499:       assertFalse(node3.isFor());
2500:       assertFalse(node3.hasOneChild());
2501:       assertFalse(node3.isDo());
2502:       assertFalse(node3.isTry());
2503:       assertFalse(node3.isEmpty());
2504:       assertFalse(node3.isCase());
2505:       assertFalse(node3.isSwitch());
2506:       assertEquals((-1), node3.getCharno());
2507:       assertFalse(node3.isDefaultCase());
2508:       assertFalse(node3.isArrayLit());
2509:       assertEquals(0, node3.getChildCount());
2510:       assertFalse(node3.isLabelName());
2511:       
2512:       boolean boolean4 = node3.wasEmptyNode();
2513:       assertNotSame(node0, node4);
2514:       assertSame(node0, node5);
2515:       assertSame(node1, node3);
2516:       assertSame(node3, node1);
2517:       assertFalse(boolean4);
2518:       assertFalse(node0.equals((Object)node3));
2519:       assertFalse(node0.equals((Object)node4));
2520:       assertFalse(node0.equals((Object)node1));
2521:       assertFalse(node0.equals((Object)node2));
2522:       assertFalse(node1.equals((Object)node5));
2523:       assertFalse(node1.equals((Object)node2));
2524:       assertFalse(node1.equals((Object)node4));
2525:       assertFalse(node1.equals((Object)node0));
2526:       assertFalse(node2.equals((Object)node5));
2527:       assertFalse(node2.equals((Object)node1));
2528:       assertFalse(node2.equals((Object)node4));
2529:       assertFalse(node2.equals((Object)node3));
2530:       assertFalse(node2.equals((Object)node0));
2531:       assertFalse(node3.equals((Object)node0));
2532:       assertFalse(node3.equals((Object)node4));
2533:       assertFalse(node3.equals((Object)node5));
2534:       assertFalse(node3.equals((Object)node2));
2535:       assertTrue(boolean4 == boolean1);
2536:       assertTrue(boolean4 == boolean3);
2537:       assertTrue(boolean4 == boolean0);
2538:       assertTrue(boolean4 == boolean2);
2539:       assertFalse(node0.isIf());
2540:       assertFalse(node0.isFor());
2541:       assertFalse(node0.isNE());
2542:       assertFalse(node0.isEmpty());
2543:       assertFalse(node0.isGetterDef());
2544:       assertFalse(node0.isArrayLit());
2545:       assertFalse(node0.isDelProp());
2546:   }
2547: }
RegularFileObject[/tmp/EvoSuite_147_1628159321549/com/google/javascript/rhino/Node_147_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_147_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_147_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_147_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.NamedType",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.JSDocInfo$Marker",
356:       "com.google.common.collect.ImmutableSet",
357:       "com.google.common.collect.EmptyImmutableSet",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 10:28:42.119 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertNotNull(node0);
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());

boolean boolean0 = node0.isWhile();
assertFalse(boolean0);
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());

boolean boolean1 = node0.isTypeOf();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node node1 = Node.newNumber((double) 49);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());

node0.removeProp(657);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());

Node node2 = new Node(657, node0, node0, node0, node0);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertEquals(657, node2.getType());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isLabel());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertTrue(node2.hasOneChild());
assertFalse(node2.isReturn());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());

Node node3 = node1.useSourceInfoFromForTree(node2);
assertNotNull(node3);
assertSame(node1, node3);
assertSame(node3, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertEquals(657, node2.getType());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isLabel());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertTrue(node2.hasOneChild());
assertFalse(node2.isReturn());
assertFalse(node3.isComma());
assertFalse(node3.isThrow());
assertFalse(node3.isThis());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isScript());
assertFalse(node3.isInc());
assertFalse(node3.isHook());
assertFalse(node3.isWith());
assertFalse(node3.isBreak());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isNE());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isIf());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertTrue(node3.isNumber());
assertFalse(node3.isString());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isNot());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isAnd());
assertFalse(node3.isFalse());
assertFalse(node3.isSetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertEquals(39, node3.getType());
assertFalse(node3.isWhile());
assertFalse(node3.isBlock());
assertFalse(node3.isTrue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isName());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCall());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isFor());
assertFalse(node3.hasOneChild());
assertFalse(node3.isDo());
assertFalse(node3.isTry());
assertFalse(node3.isEmpty());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isArrayLit());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabelName());

int int0 = Node.extractLineno(8388608);
assertEquals(2048, int0);

String string0 = node1.getSourceFileName();
assertNull(string0);
assertSame(node1, node3);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());

boolean boolean2 = node0.isParamList();
assertFalse(boolean2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());

Node node4 = Node.newString("", 1, 39);
assertNotNull(node4);
assertNotSame(node4, node0);
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.isSetterDef());
assertFalse(node4.isParamList());
assertFalse(node4.isNull());
assertFalse(node4.isName());
assertFalse(node4.isStringKey());
assertFalse(node4.isDebugger());
assertFalse(node4.isAdd());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVar());
assertFalse(node4.isContinue());
assertFalse(node4.isArrayLit());
assertEquals(40, node4.getType());
assertFalse(node4.isLabel());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isFunction());
assertFalse(node4.isNE());
assertFalse(node4.isLabelName());
assertFalse(node4.isIf());
assertFalse(node4.hasOneChild());
assertFalse(node4.isNumber());
assertFalse(node4.isIn());
assertFalse(node4.isGetterDef());
assertFalse(node4.isBlock());
assertFalse(node4.isScript());
assertFalse(node4.isTry());
assertFalse(node4.isCase());
assertEquals(4135, node4.getSourcePosition());
assertTrue(node4.isString());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCatch());
assertFalse(node4.isHook());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isFor());
assertFalse(node4.isWith());
assertFalse(node4.isRegExp());
assertFalse(node4.isComma());
assertFalse(node4.isBreak());
assertFalse(node4.isGetProp());
assertFalse(node4.isThis());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isSwitch());
assertFalse(node4.isInc());
assertFalse(node4.isCast());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.hasChildren());
assertEquals(1, node4.getLineno());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDelProp());
assertFalse(node4.isOr());
assertFalse(node4.isEmpty());
assertFalse(node4.isTrue());
assertFalse(node4.isExprResult());
assertFalse(node4.isWhile());
assertFalse(node4.isVoid());
assertEquals(39, node4.getCharno());
assertFalse(node4.isCall());
assertFalse(node4.isGetElem());
assertFalse(node4.isReturn());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());

node4.detachChildren();
assertNotSame(node4, node0);
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.isSetterDef());
assertFalse(node4.isParamList());
assertFalse(node4.isNull());
assertFalse(node4.isName());
assertFalse(node4.isStringKey());
assertFalse(node4.isDebugger());
assertFalse(node4.isAdd());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVar());
assertFalse(node4.isContinue());
assertFalse(node4.isArrayLit());
assertEquals(40, node4.getType());
assertFalse(node4.isLabel());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isFunction());
assertFalse(node4.isNE());
assertFalse(node4.isLabelName());
assertFalse(node4.isIf());
assertFalse(node4.hasOneChild());
assertFalse(node4.isNumber());
assertFalse(node4.isIn());
assertFalse(node4.isGetterDef());
assertFalse(node4.isBlock());
assertFalse(node4.isScript());
assertFalse(node4.isTry());
assertFalse(node4.isCase());
assertEquals(4135, node4.getSourcePosition());
assertTrue(node4.isString());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCatch());
assertFalse(node4.isHook());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isFor());
assertFalse(node4.isWith());
assertFalse(node4.isRegExp());
assertFalse(node4.isComma());
assertFalse(node4.isBreak());
assertFalse(node4.isGetProp());
assertFalse(node4.isThis());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isSwitch());
assertFalse(node4.isInc());
assertFalse(node4.isCast());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.hasChildren());
assertEquals(1, node4.getLineno());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDelProp());
assertFalse(node4.isOr());
assertFalse(node4.isEmpty());
assertFalse(node4.isTrue());
assertFalse(node4.isExprResult());
assertFalse(node4.isWhile());
assertFalse(node4.isVoid());
assertEquals(39, node4.getCharno());
assertFalse(node4.isCall());
assertFalse(node4.isGetElem());
assertFalse(node4.isReturn());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());

Node node5 = node0.copyInformationFromForTree(node1);
assertNotNull(node5);
assertNotSame(node0, node4);
assertSame(node0, node5);
assertSame(node1, node3);
assertNotSame(node5, node4);
assertSame(node5, node0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node5.isInc());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isSwitch());
assertFalse(node5.isGetterDef());
assertFalse(node5.isDelProp());
assertFalse(node5.isComma());
assertFalse(node5.isThis());
assertFalse(node5.isBreak());
assertFalse(node5.isGetProp());
assertFalse(node5.isHook());
assertFalse(node5.isCase());
assertFalse(node5.isFor());
assertFalse(node5.isTry());
assertFalse(node5.isScript());
assertFalse(node5.isTrue());
assertFalse(node5.isExprResult());
assertFalse(node5.isArrayLit());
assertFalse(node5.isLabelName());
assertFalse(node5.isVoid());
assertFalse(node5.isParamList());
assertFalse(node5.isNull());
assertFalse(node5.isOr());
assertFalse(node5.isEmpty());
assertFalse(node5.isVar());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isLabel());
assertFalse(node5.isNew());
assertFalse(node5.isDo());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isAdd());
assertFalse(node5.isContinue());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCall());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isStringKey());
assertFalse(node5.isName());
assertFalse(node5.isNumber());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isDec());
assertFalse(node5.isTypeOf());
assertFalse(node5.hasChildren());
assertFalse(node5.isGetElem());
assertFalse(node5.isAssign());
assertFalse(node5.hasOneChild());
assertFalse(node5.isReturn());
assertFalse(node5.isBlock());
assertTrue(node5.isString());
assertFalse(node5.isWhile());
assertFalse(node5.isRegExp());
assertFalse(node5.isDebugger());
assertFalse(node5.isNot());
assertFalse(node5.isObjectLit());
assertFalse(node5.isCatch());
assertFalse(node5.isWith());
assertFalse(node5.isFunction());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isCast());
assertFalse(node5.isIf());
assertFalse(node5.isAnd());
assertFalse(node5.isNE());
assertFalse(node5.isSetterDef());
assertFalse(node5.isFalse());
assertFalse(node5.isIn());
assertEquals(40, node5.getType());
assertFalse(node5.isThrow());

Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
assertNotNull(node_NodeMismatch0);
assertNotSame(node0, node4);
assertSame(node0, node5);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertEquals(657, node2.getType());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isLabel());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertTrue(node2.hasOneChild());
assertFalse(node2.isReturn());

int int1 = node5.getIndexOfChild(node0);
assertNotSame(node0, node4);
assertSame(node0, node5);
assertSame(node1, node3);
assertNotSame(node5, node4);
assertSame(node5, node0);
assertEquals((-1), int1);
assertFalse(int1 == int0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node5.isInc());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isSwitch());
assertFalse(node5.isGetterDef());
assertFalse(node5.isDelProp());
assertFalse(node5.isComma());
assertFalse(node5.isThis());
assertFalse(node5.isBreak());
assertFalse(node5.isGetProp());
assertFalse(node5.isHook());
assertFalse(node5.isCase());
assertFalse(node5.isFor());
assertFalse(node5.isTry());
assertFalse(node5.isScript());
assertFalse(node5.isTrue());
assertFalse(node5.isExprResult());
assertFalse(node5.isArrayLit());
assertFalse(node5.isLabelName());
assertFalse(node5.isVoid());
assertFalse(node5.isParamList());
assertFalse(node5.isNull());
assertFalse(node5.isOr());
assertFalse(node5.isEmpty());
assertFalse(node5.isVar());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isLabel());
assertFalse(node5.isNew());
assertFalse(node5.isDo());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isAdd());
assertFalse(node5.isContinue());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCall());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isStringKey());
assertFalse(node5.isName());
assertFalse(node5.isNumber());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isDec());
assertFalse(node5.isTypeOf());
assertFalse(node5.hasChildren());
assertFalse(node5.isGetElem());
assertFalse(node5.isAssign());
assertFalse(node5.hasOneChild());
assertFalse(node5.isReturn());
assertFalse(node5.isBlock());
assertTrue(node5.isString());
assertFalse(node5.isWhile());
assertFalse(node5.isRegExp());
assertFalse(node5.isDebugger());
assertFalse(node5.isNot());
assertFalse(node5.isObjectLit());
assertFalse(node5.isCatch());
assertFalse(node5.isWith());
assertFalse(node5.isFunction());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isCast());
assertFalse(node5.isIf());
assertFalse(node5.isAnd());
assertFalse(node5.isNE());
assertFalse(node5.isSetterDef());
assertFalse(node5.isFalse());
assertFalse(node5.isIn());
assertEquals(40, node5.getType());
assertFalse(node5.isThrow());

Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags1);
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());

Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags2);
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags2.valueOf());
assertEquals(31, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());

boolean boolean3 = node1.hasChildren();
assertSame(node1, node3);
assertFalse(boolean3);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());

node_SideEffectFlags3.clearSideEffectFlags();
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags2.valueOf());
assertEquals(31, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());

String string1 = node0.checkTreeEquals(node5);
assertNull(string1);
assertNotSame(node0, node4);
assertSame(node0, node5);
assertSame(node1, node3);
assertNotSame(node5, node4);
assertSame(node5, node0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node5.isInc());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isSwitch());
assertFalse(node5.isGetterDef());
assertFalse(node5.isDelProp());
assertFalse(node5.isComma());
assertFalse(node5.isThis());
assertFalse(node5.isBreak());
assertFalse(node5.isGetProp());
assertFalse(node5.isHook());
assertFalse(node5.isCase());
assertFalse(node5.isFor());
assertFalse(node5.isTry());
assertFalse(node5.isScript());
assertFalse(node5.isTrue());
assertFalse(node5.isExprResult());
assertFalse(node5.isArrayLit());
assertFalse(node5.isLabelName());
assertFalse(node5.isVoid());
assertFalse(node5.isParamList());
assertFalse(node5.isNull());
assertFalse(node5.isOr());
assertFalse(node5.isEmpty());
assertFalse(node5.isVar());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isLabel());
assertFalse(node5.isNew());
assertFalse(node5.isDo());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isAdd());
assertFalse(node5.isContinue());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCall());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isStringKey());
assertFalse(node5.isName());
assertFalse(node5.isNumber());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isDec());
assertFalse(node5.isTypeOf());
assertFalse(node5.hasChildren());
assertFalse(node5.isGetElem());
assertFalse(node5.isAssign());
assertFalse(node5.hasOneChild());
assertFalse(node5.isReturn());
assertFalse(node5.isBlock());
assertTrue(node5.isString());
assertFalse(node5.isWhile());
assertFalse(node5.isRegExp());
assertFalse(node5.isDebugger());
assertFalse(node5.isNot());
assertFalse(node5.isObjectLit());
assertFalse(node5.isCatch());
assertFalse(node5.isWith());
assertFalse(node5.isFunction());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isCast());
assertFalse(node5.isIf());
assertFalse(node5.isAnd());
assertFalse(node5.isNE());
assertFalse(node5.isSetterDef());
assertFalse(node5.isFalse());
assertFalse(node5.isIn());
assertEquals(40, node5.getType());
assertFalse(node5.isThrow());

Set<String> set0 = node2.getDirectives();
assertNull(set0);
assertNotSame(node0, node4);
assertSame(node0, node5);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertEquals(657, node2.getType());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isLabel());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertTrue(node2.hasOneChild());
assertFalse(node2.isReturn());

node3.setWasEmptyNode(false);
assertNotSame(node0, node4);
assertSame(node0, node5);
assertSame(node1, node3);
assertSame(node3, node1);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertEquals(657, node2.getType());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isLabel());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertTrue(node2.hasOneChild());
assertFalse(node2.isReturn());
assertFalse(node3.isComma());
assertFalse(node3.isThrow());
assertFalse(node3.isThis());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isScript());
assertFalse(node3.isInc());
assertFalse(node3.isHook());
assertFalse(node3.isWith());
assertFalse(node3.isBreak());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isNE());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isIf());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertTrue(node3.isNumber());
assertFalse(node3.isString());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isNot());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isAnd());
assertFalse(node3.isFalse());
assertFalse(node3.isSetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertEquals(39, node3.getType());
assertFalse(node3.isWhile());
assertFalse(node3.isBlock());
assertFalse(node3.isTrue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isName());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCall());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isFor());
assertFalse(node3.hasOneChild());
assertFalse(node3.isDo());
assertFalse(node3.isTry());
assertFalse(node3.isEmpty());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isArrayLit());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabelName());

boolean boolean4 = node3.wasEmptyNode();
assertNotSame(node0, node4);
assertSame(node0, node5);
assertSame(node1, node3);
assertSame(node3, node1);
assertFalse(boolean4);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node2));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());


[MASTER] 10:28:44.171 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_161_1628159324147/com/google/javascript/rhino/Node_161_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_161_1628159324147/com/google/javascript/rhino/Node_161_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:44.171 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:44.171 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:44.172 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 339
[MASTER] 10:28:44.172 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_161_1628159324147/com/google/javascript/rhino/Node_161_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:44 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_161_tmp__ESTest extends Node_161_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       String string0 = "";
22:       Node node0 = Node.newString("");
23:       assertNotNull(node0);
24:       assertFalse(node0.isAssignAdd());
25:       assertEquals((-1), node0.getLineno());
26:       assertFalse(node0.isGetElem());
27:       assertFalse(node0.hasMoreThanOneChild());
28:       assertFalse(node0.isCast());
29:       assertFalse(node0.isContinue());
30:       assertFalse(node0.isWhile());
31:       assertFalse(node0.isDec());
32:       assertFalse(node0.isTypeOf());
33:       assertFalse(node0.isAssign());
34:       assertFalse(node0.isReturn());
35:       assertFalse(node0.isLabel());
36:       assertFalse(node0.hasChildren());
37:       assertFalse(node0.isNew());
38:       assertFalse(node0.isAdd());
39:       assertFalse(node0.isExprResult());
40:       assertFalse(node0.isDo());
41:       assertFalse(node0.isName());
42:       assertFalse(node0.isNull());
43:       assertFalse(node0.isOr());
44:       assertFalse(node0.isGetProp());
45:       assertFalse(node0.isSetterDef());
46:       assertFalse(node0.isBreak());
47:       assertFalse(node0.isThrow());
48:       assertFalse(node0.isFalse());
49:       assertFalse(node0.isCall());
50:       assertEquals(40, node0.getType());
51:       assertFalse(node0.isComma());
52:       assertFalse(node0.isFunction());
53:       assertFalse(node0.isNot());
54:       assertFalse(node0.isObjectLit());
55:       assertFalse(node0.isAnd());
56:       assertEquals((-1), node0.getSourcePosition());
57:       assertFalse(node0.isDebugger());
58:       assertFalse(node0.isNE());
59:       assertFalse(node0.isIf());
60:       assertFalse(node0.isDelProp());
61:       assertFalse(node0.isFor());
62:       assertFalse(node0.isTrue());
63:       assertFalse(node0.isVoid());
64:       assertFalse(node0.isDefaultCase());
65:       assertFalse(node0.isInc());
66:       assertFalse(node0.isEmpty());
67:       assertFalse(node0.isIn());
68:       assertFalse(node0.isParamList());
69:       assertFalse(node0.isInstanceOf());
70:       assertFalse(node0.isCatch());
71:       assertFalse(node0.isWith());
72:       assertFalse(node0.isHook());
73:       assertEquals(0, node0.getChildCount());
74:       assertFalse(node0.isVar());
75:       assertFalse(node0.isRegExp());
76:       assertFalse(node0.isThis());
77:       assertFalse(node0.isBlock());
78:       assertFalse(node0.isTry());
79:       assertTrue(node0.isString());
80:       assertFalse(node0.isSwitch());
81:       assertFalse(node0.hasOneChild());
82:       assertFalse(node0.isScript());
83:       assertFalse(node0.isArrayLit());
84:       assertFalse(node0.isCase());
85:       assertFalse(node0.isStringKey());
86:       assertFalse(node0.isLabelName());
87:       assertFalse(node0.isNumber());
88:       assertFalse(node0.isGetterDef());
89:       assertEquals((-1), node0.getCharno());
90:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
91:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
92:       assertEquals(53, Node.INPUT_ID);
93:       assertEquals(47, Node.IS_DISPATCHER);
94:       assertEquals(2, Node.POST_FLAG);
95:       assertEquals(4095, Node.COLUMN_MASK);
96:       assertEquals(55, Node.INFERRED_FUNCTION);
97:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
98:       assertEquals(48, Node.DIRECTIVES);
99:       assertEquals(39, Node.EMPTY_BLOCK);
100:       assertEquals(49, Node.DIRECT_EVAL);
101:       assertEquals(37, Node.OPT_ARG_NAME);
102:       assertEquals(15, Node.NO_SIDE_EFFECTS);
103:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
104:       assertEquals(29, Node.JSDOC_INFO_PROP);
105:       assertEquals(56, Node.CHANGE_TIME);
106:       assertEquals(8, Node.FLAG_NO_THROWS);
107:       assertEquals(36, Node.QUOTED_PROP);
108:       assertEquals(52, Node.LENGTH);
109:       assertEquals(57, Node.REFLECTED_OBJECT);
110:       assertEquals(40, Node.ORIGINALNAME_PROP);
111:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
112:       assertEquals(57, Node.LAST_PROP);
113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
114:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
115:       assertEquals(30, Node.VAR_ARGS_NAME);
116:       assertEquals(32, Node.INCRDECR_PROP);
117:       assertEquals(46, Node.IS_NAMESPACE);
118:       assertEquals(12, Node.COLUMN_BITS);
119:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
120:       assertEquals(1, Node.DECR_FLAG);
121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
122:       assertEquals(43, Node.IS_CONSTANT_NAME);
123:       assertEquals(54, Node.SLASH_V);
124:       assertEquals(50, Node.FREE_CALL);
125:       assertEquals(51, Node.STATIC_SOURCE_FILE);
126:       
127:       boolean boolean0 = node0.isWhile();
128:       assertFalse(boolean0);
129:       assertFalse(node0.isAssignAdd());
130:       assertEquals((-1), node0.getLineno());
131:       assertFalse(node0.isGetElem());
132:       assertFalse(node0.hasMoreThanOneChild());
133:       assertFalse(node0.isCast());
134:       assertFalse(node0.isContinue());
135:       assertFalse(node0.isWhile());
136:       assertFalse(node0.isDec());
137:       assertFalse(node0.isTypeOf());
138:       assertFalse(node0.isAssign());
139:       assertFalse(node0.isReturn());
140:       assertFalse(node0.isLabel());
141:       assertFalse(node0.hasChildren());
142:       assertFalse(node0.isNew());
143:       assertFalse(node0.isAdd());
144:       assertFalse(node0.isExprResult());
145:       assertFalse(node0.isDo());
146:       assertFalse(node0.isName());
147:       assertFalse(node0.isNull());
148:       assertFalse(node0.isOr());
149:       assertFalse(node0.isGetProp());
150:       assertFalse(node0.isSetterDef());
151:       assertFalse(node0.isBreak());
152:       assertFalse(node0.isThrow());
153:       assertFalse(node0.isFalse());
154:       assertFalse(node0.isCall());
155:       assertEquals(40, node0.getType());
156:       assertFalse(node0.isComma());
157:       assertFalse(node0.isFunction());
158:       assertFalse(node0.isNot());
159:       assertFalse(node0.isObjectLit());
160:       assertFalse(node0.isAnd());
161:       assertEquals((-1), node0.getSourcePosition());
162:       assertFalse(node0.isDebugger());
163:       assertFalse(node0.isNE());
164:       assertFalse(node0.isIf());
165:       assertFalse(node0.isDelProp());
166:       assertFalse(node0.isFor());
167:       assertFalse(node0.isTrue());
168:       assertFalse(node0.isVoid());
169:       assertFalse(node0.isDefaultCase());
170:       assertFalse(node0.isInc());
171:       assertFalse(node0.isEmpty());
172:       assertFalse(node0.isIn());
173:       assertFalse(node0.isParamList());
174:       assertFalse(node0.isInstanceOf());
175:       assertFalse(node0.isCatch());
176:       assertFalse(node0.isWith());
177:       assertFalse(node0.isHook());
178:       assertEquals(0, node0.getChildCount());
179:       assertFalse(node0.isVar());
180:       assertFalse(node0.isRegExp());
181:       assertFalse(node0.isThis());
182:       assertFalse(node0.isBlock());
183:       assertFalse(node0.isTry());
184:       assertTrue(node0.isString());
185:       assertFalse(node0.isSwitch());
186:       assertFalse(node0.hasOneChild());
187:       assertFalse(node0.isScript());
188:       assertFalse(node0.isArrayLit());
189:       assertFalse(node0.isCase());
190:       assertFalse(node0.isStringKey());
191:       assertFalse(node0.isLabelName());
192:       assertFalse(node0.isNumber());
193:       assertFalse(node0.isGetterDef());
194:       assertEquals((-1), node0.getCharno());
195:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
196:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
197:       assertEquals(53, Node.INPUT_ID);
198:       assertEquals(47, Node.IS_DISPATCHER);
199:       assertEquals(2, Node.POST_FLAG);
200:       assertEquals(4095, Node.COLUMN_MASK);
201:       assertEquals(55, Node.INFERRED_FUNCTION);
202:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
203:       assertEquals(48, Node.DIRECTIVES);
204:       assertEquals(39, Node.EMPTY_BLOCK);
205:       assertEquals(49, Node.DIRECT_EVAL);
206:       assertEquals(37, Node.OPT_ARG_NAME);
207:       assertEquals(15, Node.NO_SIDE_EFFECTS);
208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
209:       assertEquals(29, Node.JSDOC_INFO_PROP);
210:       assertEquals(56, Node.CHANGE_TIME);
211:       assertEquals(8, Node.FLAG_NO_THROWS);
212:       assertEquals(36, Node.QUOTED_PROP);
213:       assertEquals(52, Node.LENGTH);
214:       assertEquals(57, Node.REFLECTED_OBJECT);
215:       assertEquals(40, Node.ORIGINALNAME_PROP);
216:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
217:       assertEquals(57, Node.LAST_PROP);
218:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
219:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
220:       assertEquals(30, Node.VAR_ARGS_NAME);
221:       assertEquals(32, Node.INCRDECR_PROP);
222:       assertEquals(46, Node.IS_NAMESPACE);
223:       assertEquals(12, Node.COLUMN_BITS);
224:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
225:       assertEquals(1, Node.DECR_FLAG);
226:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
227:       assertEquals(43, Node.IS_CONSTANT_NAME);
228:       assertEquals(54, Node.SLASH_V);
229:       assertEquals(50, Node.FREE_CALL);
230:       assertEquals(51, Node.STATIC_SOURCE_FILE);
231:       
232:       boolean boolean1 = node0.isTypeOf();
233:       assertFalse(boolean1);
234:       assertTrue(boolean1 == boolean0);
235:       assertFalse(node0.isAssignAdd());
236:       assertEquals((-1), node0.getLineno());
237:       assertFalse(node0.isGetElem());
238:       assertFalse(node0.hasMoreThanOneChild());
239:       assertFalse(node0.isCast());
240:       assertFalse(node0.isContinue());
241:       assertFalse(node0.isWhile());
242:       assertFalse(node0.isDec());
243:       assertFalse(node0.isTypeOf());
244:       assertFalse(node0.isAssign());
245:       assertFalse(node0.isReturn());
246:       assertFalse(node0.isLabel());
247:       assertFalse(node0.hasChildren());
248:       assertFalse(node0.isNew());
249:       assertFalse(node0.isAdd());
250:       assertFalse(node0.isExprResult());
251:       assertFalse(node0.isDo());
252:       assertFalse(node0.isName());
253:       assertFalse(node0.isNull());
254:       assertFalse(node0.isOr());
255:       assertFalse(node0.isGetProp());
256:       assertFalse(node0.isSetterDef());
257:       assertFalse(node0.isBreak());
258:       assertFalse(node0.isThrow());
259:       assertFalse(node0.isFalse());
260:       assertFalse(node0.isCall());
261:       assertEquals(40, node0.getType());
262:       assertFalse(node0.isComma());
263:       assertFalse(node0.isFunction());
264:       assertFalse(node0.isNot());
265:       assertFalse(node0.isObjectLit());
266:       assertFalse(node0.isAnd());
267:       assertEquals((-1), node0.getSourcePosition());
268:       assertFalse(node0.isDebugger());
269:       assertFalse(node0.isNE());
270:       assertFalse(node0.isIf());
271:       assertFalse(node0.isDelProp());
272:       assertFalse(node0.isFor());
273:       assertFalse(node0.isTrue());
274:       assertFalse(node0.isVoid());
275:       assertFalse(node0.isDefaultCase());
276:       assertFalse(node0.isInc());
277:       assertFalse(node0.isEmpty());
278:       assertFalse(node0.isIn());
279:       assertFalse(node0.isParamList());
280:       assertFalse(node0.isInstanceOf());
281:       assertFalse(node0.isCatch());
282:       assertFalse(node0.isWith());
283:       assertFalse(node0.isHook());
284:       assertEquals(0, node0.getChildCount());
285:       assertFalse(node0.isVar());
286:       assertFalse(node0.isRegExp());
287:       assertFalse(node0.isThis());
288:       assertFalse(node0.isBlock());
289:       assertFalse(node0.isTry());
290:       assertTrue(node0.isString());
291:       assertFalse(node0.isSwitch());
292:       assertFalse(node0.hasOneChild());
293:       assertFalse(node0.isScript());
294:       assertFalse(node0.isArrayLit());
295:       assertFalse(node0.isCase());
296:       assertFalse(node0.isStringKey());
297:       assertFalse(node0.isLabelName());
298:       assertFalse(node0.isNumber());
299:       assertFalse(node0.isGetterDef());
300:       assertEquals((-1), node0.getCharno());
301:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
302:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
303:       assertEquals(53, Node.INPUT_ID);
304:       assertEquals(47, Node.IS_DISPATCHER);
305:       assertEquals(2, Node.POST_FLAG);
306:       assertEquals(4095, Node.COLUMN_MASK);
307:       assertEquals(55, Node.INFERRED_FUNCTION);
308:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
309:       assertEquals(48, Node.DIRECTIVES);
310:       assertEquals(39, Node.EMPTY_BLOCK);
311:       assertEquals(49, Node.DIRECT_EVAL);
312:       assertEquals(37, Node.OPT_ARG_NAME);
313:       assertEquals(15, Node.NO_SIDE_EFFECTS);
314:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
315:       assertEquals(29, Node.JSDOC_INFO_PROP);
316:       assertEquals(56, Node.CHANGE_TIME);
317:       assertEquals(8, Node.FLAG_NO_THROWS);
318:       assertEquals(36, Node.QUOTED_PROP);
319:       assertEquals(52, Node.LENGTH);
320:       assertEquals(57, Node.REFLECTED_OBJECT);
321:       assertEquals(40, Node.ORIGINALNAME_PROP);
322:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
323:       assertEquals(57, Node.LAST_PROP);
324:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
325:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
326:       assertEquals(30, Node.VAR_ARGS_NAME);
327:       assertEquals(32, Node.INCRDECR_PROP);
328:       assertEquals(46, Node.IS_NAMESPACE);
329:       assertEquals(12, Node.COLUMN_BITS);
330:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
331:       assertEquals(1, Node.DECR_FLAG);
332:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
333:       assertEquals(43, Node.IS_CONSTANT_NAME);
334:       assertEquals(54, Node.SLASH_V);
335:       assertEquals(50, Node.FREE_CALL);
336:       assertEquals(51, Node.STATIC_SOURCE_FILE);
337:       
338:       Iterable<Node> iterable0 = node0.children();
339:       assertFalse(iterable0.contains(node0));
340:       assertNotNull(iterable0);
341:       assertFalse(node0.isAssignAdd());
342:       assertEquals((-1), node0.getLineno());
343:       assertFalse(node0.isGetElem());
344:       assertFalse(node0.hasMoreThanOneChild());
345:       assertFalse(node0.isCast());
346:       assertFalse(node0.isContinue());
347:       assertFalse(node0.isWhile());
348:       assertFalse(node0.isDec());
349:       assertFalse(node0.isTypeOf());
350:       assertFalse(node0.isAssign());
351:       assertFalse(node0.isReturn());
352:       assertFalse(node0.isLabel());
353:       assertFalse(node0.hasChildren());
354:       assertFalse(node0.isNew());
355:       assertFalse(node0.isAdd());
356:       assertFalse(node0.isExprResult());
357:       assertFalse(node0.isDo());
358:       assertFalse(node0.isName());
359:       assertFalse(node0.isNull());
360:       assertFalse(node0.isOr());
361:       assertFalse(node0.isGetProp());
362:       assertFalse(node0.isSetterDef());
363:       assertFalse(node0.isBreak());
364:       assertFalse(node0.isThrow());
365:       assertFalse(node0.isFalse());
366:       assertFalse(node0.isCall());
367:       assertEquals(40, node0.getType());
368:       assertFalse(node0.isComma());
369:       assertFalse(node0.isFunction());
370:       assertFalse(node0.isNot());
371:       assertFalse(node0.isObjectLit());
372:       assertFalse(node0.isAnd());
373:       assertEquals((-1), node0.getSourcePosition());
374:       assertFalse(node0.isDebugger());
375:       assertFalse(node0.isNE());
376:       assertFalse(node0.isIf());
377:       assertFalse(node0.isDelProp());
378:       assertFalse(node0.isFor());
379:       assertFalse(node0.isTrue());
380:       assertFalse(node0.isVoid());
381:       assertFalse(node0.isDefaultCase());
382:       assertFalse(node0.isInc());
383:       assertFalse(node0.isEmpty());
384:       assertFalse(node0.isIn());
385:       assertFalse(node0.isParamList());
386:       assertFalse(node0.isInstanceOf());
387:       assertFalse(node0.isCatch());
388:       assertFalse(node0.isWith());
389:       assertFalse(node0.isHook());
390:       assertEquals(0, node0.getChildCount());
391:       assertFalse(node0.isVar());
392:       assertFalse(node0.isRegExp());
393:       assertFalse(node0.isThis());
394:       assertFalse(node0.isBlock());
395:       assertFalse(node0.isTry());
396:       assertTrue(node0.isString());
397:       assertFalse(node0.isSwitch());
398:       assertFalse(node0.hasOneChild());
399:       assertFalse(node0.isScript());
400:       assertFalse(node0.isArrayLit());
401:       assertFalse(node0.isCase());
402:       assertFalse(node0.isStringKey());
403:       assertFalse(node0.isLabelName());
404:       assertFalse(node0.isNumber());
405:       assertFalse(node0.isGetterDef());
406:       assertEquals((-1), node0.getCharno());
407:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
408:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
409:       assertEquals(53, Node.INPUT_ID);
410:       assertEquals(47, Node.IS_DISPATCHER);
411:       assertEquals(2, Node.POST_FLAG);
412:       assertEquals(4095, Node.COLUMN_MASK);
413:       assertEquals(55, Node.INFERRED_FUNCTION);
414:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
415:       assertEquals(48, Node.DIRECTIVES);
416:       assertEquals(39, Node.EMPTY_BLOCK);
417:       assertEquals(49, Node.DIRECT_EVAL);
418:       assertEquals(37, Node.OPT_ARG_NAME);
419:       assertEquals(15, Node.NO_SIDE_EFFECTS);
420:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
421:       assertEquals(29, Node.JSDOC_INFO_PROP);
422:       assertEquals(56, Node.CHANGE_TIME);
423:       assertEquals(8, Node.FLAG_NO_THROWS);
424:       assertEquals(36, Node.QUOTED_PROP);
425:       assertEquals(52, Node.LENGTH);
426:       assertEquals(57, Node.REFLECTED_OBJECT);
427:       assertEquals(40, Node.ORIGINALNAME_PROP);
428:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
429:       assertEquals(57, Node.LAST_PROP);
430:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
431:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
432:       assertEquals(30, Node.VAR_ARGS_NAME);
433:       assertEquals(32, Node.INCRDECR_PROP);
434:       assertEquals(46, Node.IS_NAMESPACE);
435:       assertEquals(12, Node.COLUMN_BITS);
436:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
437:       assertEquals(1, Node.DECR_FLAG);
438:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
439:       assertEquals(43, Node.IS_CONSTANT_NAME);
440:       assertEquals(54, Node.SLASH_V);
441:       assertEquals(50, Node.FREE_CALL);
442:       assertEquals(51, Node.STATIC_SOURCE_FILE);
443:       
444:       Node node1 = null;
445:       try {
446:         node1 = new Node(54, (Node[]) null, 0, 16);
447:         fail("Expecting exception: NullPointerException");
448:       
449:       } catch(NullPointerException e) {
450:          //
451:          // no message in exception (getMessage() returned null)
452:          //
453:          verifyException("com.google.javascript.rhino.Node", e);
454:       }
455:   }
456: }
RegularFileObject[/tmp/EvoSuite_161_1628159324147/com/google/javascript/rhino/Node_161_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:44 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_161_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_161_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_161_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.NamedType",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.JSDocInfo$Marker",
356:       "com.google.common.collect.ImmutableSet",
357:       "com.google.common.collect.EmptyImmutableSet",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 10:28:44.176 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = "";
Node node0 = Node.newString("");
assertNotNull(node0);
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean0 = node0.isWhile();
assertFalse(boolean0);
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean1 = node0.isTypeOf();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node node1 = new Node(54, (Node[]) null, 0, 16);

[MASTER] 10:28:44.731 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_165_1628159324362/com/google/javascript/rhino/Node_165_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_165_1628159324362/com/google/javascript/rhino/Node_165_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:44.731 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:44.731 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:44.731 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 512
[MASTER] 10:28:44.732 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_165_1628159324362/com/google/javascript/rhino/Node_165_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:44 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.Set;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_165_tmp__ESTest extends Node_165_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("");
22:       assertNotNull(node0);
23:       assertFalse(node0.isDo());
24:       assertFalse(node0.isContinue());
25:       assertFalse(node0.isWhile());
26:       assertFalse(node0.isNew());
27:       assertEquals((-1), node0.getLineno());
28:       assertFalse(node0.isOr());
29:       assertFalse(node0.isAdd());
30:       assertEquals((-1), node0.getSourcePosition());
31:       assertFalse(node0.isLabelName());
32:       assertFalse(node0.isStringKey());
33:       assertFalse(node0.isSetterDef());
34:       assertFalse(node0.isCast());
35:       assertFalse(node0.isAssignAdd());
36:       assertFalse(node0.isLabel());
37:       assertFalse(node0.isVar());
38:       assertEquals(0, node0.getChildCount());
39:       assertFalse(node0.isWith());
40:       assertEquals(40, node0.getType());
41:       assertFalse(node0.isCatch());
42:       assertFalse(node0.isScript());
43:       assertFalse(node0.isParamList());
44:       assertFalse(node0.isFor());
45:       assertFalse(node0.isGetterDef());
46:       assertFalse(node0.isIf());
47:       assertFalse(node0.isNumber());
48:       assertFalse(node0.hasOneChild());
49:       assertFalse(node0.isTry());
50:       assertFalse(node0.isBlock());
51:       assertTrue(node0.isString());
52:       assertFalse(node0.isInstanceOf());
53:       assertFalse(node0.hasMoreThanOneChild());
54:       assertFalse(node0.isRegExp());
55:       assertFalse(node0.isThis());
56:       assertFalse(node0.isHook());
57:       assertFalse(node0.isSwitch());
58:       assertFalse(node0.isInc());
59:       assertFalse(node0.isCase());
60:       assertFalse(node0.isIn());
61:       assertFalse(node0.isNE());
62:       assertEquals((-1), node0.getCharno());
63:       assertFalse(node0.isEmpty());
64:       assertFalse(node0.isThrow());
65:       assertFalse(node0.isFalse());
66:       assertFalse(node0.isArrayLit());
67:       assertFalse(node0.isFunction());
68:       assertFalse(node0.isNot());
69:       assertFalse(node0.isDefaultCase());
70:       assertFalse(node0.isAnd());
71:       assertFalse(node0.isExprResult());
72:       assertFalse(node0.isVoid());
73:       assertFalse(node0.isNull());
74:       assertFalse(node0.isTrue());
75:       assertFalse(node0.isObjectLit());
76:       assertFalse(node0.isDebugger());
77:       assertFalse(node0.isAssign());
78:       assertFalse(node0.isName());
79:       assertFalse(node0.isGetElem());
80:       assertFalse(node0.isDelProp());
81:       assertFalse(node0.isCall());
82:       assertFalse(node0.isBreak());
83:       assertFalse(node0.isGetProp());
84:       assertFalse(node0.isReturn());
85:       assertFalse(node0.isTypeOf());
86:       assertFalse(node0.isDec());
87:       assertFalse(node0.hasChildren());
88:       assertFalse(node0.isComma());
89:       
90:       boolean boolean0 = node0.isWhile();
91:       assertFalse(boolean0);
92:       assertFalse(node0.isDo());
93:       assertFalse(node0.isContinue());
94:       assertFalse(node0.isWhile());
95:       assertFalse(node0.isNew());
96:       assertEquals((-1), node0.getLineno());
97:       assertFalse(node0.isOr());
98:       assertFalse(node0.isAdd());
99:       assertEquals((-1), node0.getSourcePosition());
100:       assertFalse(node0.isLabelName());
101:       assertFalse(node0.isStringKey());
102:       assertFalse(node0.isSetterDef());
103:       assertFalse(node0.isCast());
104:       assertFalse(node0.isAssignAdd());
105:       assertFalse(node0.isLabel());
106:       assertFalse(node0.isVar());
107:       assertEquals(0, node0.getChildCount());
108:       assertFalse(node0.isWith());
109:       assertEquals(40, node0.getType());
110:       assertFalse(node0.isCatch());
111:       assertFalse(node0.isScript());
112:       assertFalse(node0.isParamList());
113:       assertFalse(node0.isFor());
114:       assertFalse(node0.isGetterDef());
115:       assertFalse(node0.isIf());
116:       assertFalse(node0.isNumber());
117:       assertFalse(node0.hasOneChild());
118:       assertFalse(node0.isTry());
119:       assertFalse(node0.isBlock());
120:       assertTrue(node0.isString());
121:       assertFalse(node0.isInstanceOf());
122:       assertFalse(node0.hasMoreThanOneChild());
123:       assertFalse(node0.isRegExp());
124:       assertFalse(node0.isThis());
125:       assertFalse(node0.isHook());
126:       assertFalse(node0.isSwitch());
127:       assertFalse(node0.isInc());
128:       assertFalse(node0.isCase());
129:       assertFalse(node0.isIn());
130:       assertFalse(node0.isNE());
131:       assertEquals((-1), node0.getCharno());
132:       assertFalse(node0.isEmpty());
133:       assertFalse(node0.isThrow());
134:       assertFalse(node0.isFalse());
135:       assertFalse(node0.isArrayLit());
136:       assertFalse(node0.isFunction());
137:       assertFalse(node0.isNot());
138:       assertFalse(node0.isDefaultCase());
139:       assertFalse(node0.isAnd());
140:       assertFalse(node0.isExprResult());
141:       assertFalse(node0.isVoid());
142:       assertFalse(node0.isNull());
143:       assertFalse(node0.isTrue());
144:       assertFalse(node0.isObjectLit());
145:       assertFalse(node0.isDebugger());
146:       assertFalse(node0.isAssign());
147:       assertFalse(node0.isName());
148:       assertFalse(node0.isGetElem());
149:       assertFalse(node0.isDelProp());
150:       assertFalse(node0.isCall());
151:       assertFalse(node0.isBreak());
152:       assertFalse(node0.isGetProp());
153:       assertFalse(node0.isReturn());
154:       assertFalse(node0.isTypeOf());
155:       assertFalse(node0.isDec());
156:       assertFalse(node0.hasChildren());
157:       assertFalse(node0.isComma());
158:       
159:       boolean boolean1 = node0.isTypeOf();
160:       assertFalse(boolean1);
161:       assertTrue(boolean1 == boolean0);
162:       assertFalse(node0.isDo());
163:       assertFalse(node0.isContinue());
164:       assertFalse(node0.isWhile());
165:       assertFalse(node0.isNew());
166:       assertEquals((-1), node0.getLineno());
167:       assertFalse(node0.isOr());
168:       assertFalse(node0.isAdd());
169:       assertEquals((-1), node0.getSourcePosition());
170:       assertFalse(node0.isLabelName());
171:       assertFalse(node0.isStringKey());
172:       assertFalse(node0.isSetterDef());
173:       assertFalse(node0.isCast());
174:       assertFalse(node0.isAssignAdd());
175:       assertFalse(node0.isLabel());
176:       assertFalse(node0.isVar());
177:       assertEquals(0, node0.getChildCount());
178:       assertFalse(node0.isWith());
179:       assertEquals(40, node0.getType());
180:       assertFalse(node0.isCatch());
181:       assertFalse(node0.isScript());
182:       assertFalse(node0.isParamList());
183:       assertFalse(node0.isFor());
184:       assertFalse(node0.isGetterDef());
185:       assertFalse(node0.isIf());
186:       assertFalse(node0.isNumber());
187:       assertFalse(node0.hasOneChild());
188:       assertFalse(node0.isTry());
189:       assertFalse(node0.isBlock());
190:       assertTrue(node0.isString());
191:       assertFalse(node0.isInstanceOf());
192:       assertFalse(node0.hasMoreThanOneChild());
193:       assertFalse(node0.isRegExp());
194:       assertFalse(node0.isThis());
195:       assertFalse(node0.isHook());
196:       assertFalse(node0.isSwitch());
197:       assertFalse(node0.isInc());
198:       assertFalse(node0.isCase());
199:       assertFalse(node0.isIn());
200:       assertFalse(node0.isNE());
201:       assertEquals((-1), node0.getCharno());
202:       assertFalse(node0.isEmpty());
203:       assertFalse(node0.isThrow());
204:       assertFalse(node0.isFalse());
205:       assertFalse(node0.isArrayLit());
206:       assertFalse(node0.isFunction());
207:       assertFalse(node0.isNot());
208:       assertFalse(node0.isDefaultCase());
209:       assertFalse(node0.isAnd());
210:       assertFalse(node0.isExprResult());
211:       assertFalse(node0.isVoid());
212:       assertFalse(node0.isNull());
213:       assertFalse(node0.isTrue());
214:       assertFalse(node0.isObjectLit());
215:       assertFalse(node0.isDebugger());
216:       assertFalse(node0.isAssign());
217:       assertFalse(node0.isName());
218:       assertFalse(node0.isGetElem());
219:       assertFalse(node0.isDelProp());
220:       assertFalse(node0.isCall());
221:       assertFalse(node0.isBreak());
222:       assertFalse(node0.isGetProp());
223:       assertFalse(node0.isReturn());
224:       assertFalse(node0.isTypeOf());
225:       assertFalse(node0.isDec());
226:       assertFalse(node0.hasChildren());
227:       assertFalse(node0.isComma());
228:       
229:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
230:       assertNotNull(node_SideEffectFlags0);
231:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
232:       assertEquals(0, node_SideEffectFlags0.valueOf());
233:       
234:       Node node1 = Node.newNumber((double) 49);
235:       assertNotNull(node1);
236:       assertFalse(node1.equals((Object)node0));
237:       assertFalse(node1.isDefaultCase());
238:       assertFalse(node1.isRegExp());
239:       assertFalse(node1.isFunction());
240:       assertFalse(node1.isCatch());
241:       assertFalse(node1.isArrayLit());
242:       assertFalse(node1.isVoid());
243:       assertFalse(node1.isTrue());
244:       assertFalse(node1.isParamList());
245:       assertFalse(node1.isDebugger());
246:       assertFalse(node1.isNull());
247:       assertFalse(node1.isGetterDef());
248:       assertFalse(node1.isDelProp());
249:       assertFalse(node1.isIf());
250:       assertFalse(node1.isName());
251:       assertFalse(node1.isCall());
252:       assertFalse(node1.isTry());
253:       assertTrue(node1.isNumber());
254:       assertFalse(node1.isBlock());
255:       assertFalse(node1.isFor());
256:       assertFalse(node1.isWhile());
257:       assertFalse(node1.isString());
258:       assertEquals(39, node1.getType());
259:       assertFalse(node1.isContinue());
260:       assertFalse(node1.isInc());
261:       assertFalse(node1.hasMoreThanOneChild());
262:       assertEquals((-1), node1.getLineno());
263:       assertFalse(node1.isIn());
264:       assertFalse(node1.isNE());
265:       assertFalse(node1.isSetterDef());
266:       assertFalse(node1.isFalse());
267:       assertFalse(node1.isCast());
268:       assertFalse(node1.isThrow());
269:       assertFalse(node1.isWith());
270:       assertFalse(node1.isNot());
271:       assertFalse(node1.isExprResult());
272:       assertFalse(node1.isObjectLit());
273:       assertFalse(node1.isScript());
274:       assertFalse(node1.isInstanceOf());
275:       assertFalse(node1.isAnd());
276:       assertFalse(node1.isBreak());
277:       assertFalse(node1.hasChildren());
278:       assertEquals((-1), node1.getSourcePosition());
279:       assertFalse(node1.isTypeOf());
280:       assertFalse(node1.isComma());
281:       assertFalse(node1.isDec());
282:       assertFalse(node1.isAssign());
283:       assertFalse(node1.isGetProp());
284:       assertFalse(node1.isGetElem());
285:       assertFalse(node1.isReturn());
286:       assertFalse(node1.isHook());
287:       assertFalse(node1.hasOneChild());
288:       assertFalse(node1.isThis());
289:       assertFalse(node1.isCase());
290:       assertFalse(node1.isDo());
291:       assertFalse(node1.isAdd());
292:       assertFalse(node1.isOr());
293:       assertEquals((-1), node1.getCharno());
294:       assertFalse(node1.isSwitch());
295:       assertFalse(node1.isStringKey());
296:       assertFalse(node1.isLabelName());
297:       assertFalse(node1.isEmpty());
298:       assertFalse(node1.isAssignAdd());
299:       assertFalse(node1.isLabel());
300:       assertFalse(node1.isNew());
301:       assertEquals(0, node1.getChildCount());
302:       assertFalse(node1.isVar());
303:       
304:       node0.removeProp(657);
305:       assertFalse(node0.equals((Object)node1));
306:       assertFalse(node0.isDo());
307:       assertFalse(node0.isContinue());
308:       assertFalse(node0.isWhile());
309:       assertFalse(node0.isNew());
310:       assertEquals((-1), node0.getLineno());
311:       assertFalse(node0.isOr());
312:       assertFalse(node0.isAdd());
313:       assertEquals((-1), node0.getSourcePosition());
314:       assertFalse(node0.isLabelName());
315:       assertFalse(node0.isStringKey());
316:       assertFalse(node0.isSetterDef());
317:       assertFalse(node0.isCast());
318:       assertFalse(node0.isAssignAdd());
319:       assertFalse(node0.isLabel());
320:       assertFalse(node0.isVar());
321:       assertEquals(0, node0.getChildCount());
322:       assertFalse(node0.isWith());
323:       assertEquals(40, node0.getType());
324:       assertFalse(node0.isCatch());
325:       assertFalse(node0.isScript());
326:       assertFalse(node0.isParamList());
327:       assertFalse(node0.isFor());
328:       assertFalse(node0.isGetterDef());
329:       assertFalse(node0.isIf());
330:       assertFalse(node0.isNumber());
331:       assertFalse(node0.hasOneChild());
332:       assertFalse(node0.isTry());
333:       assertFalse(node0.isBlock());
334:       assertTrue(node0.isString());
335:       assertFalse(node0.isInstanceOf());
336:       assertFalse(node0.hasMoreThanOneChild());
337:       assertFalse(node0.isRegExp());
338:       assertFalse(node0.isThis());
339:       assertFalse(node0.isHook());
340:       assertFalse(node0.isSwitch());
341:       assertFalse(node0.isInc());
342:       assertFalse(node0.isCase());
343:       assertFalse(node0.isIn());
344:       assertFalse(node0.isNE());
345:       assertEquals((-1), node0.getCharno());
346:       assertFalse(node0.isEmpty());
347:       assertFalse(node0.isThrow());
348:       assertFalse(node0.isFalse());
349:       assertFalse(node0.isArrayLit());
350:       assertFalse(node0.isFunction());
351:       assertFalse(node0.isNot());
352:       assertFalse(node0.isDefaultCase());
353:       assertFalse(node0.isAnd());
354:       assertFalse(node0.isExprResult());
355:       assertFalse(node0.isVoid());
356:       assertFalse(node0.isNull());
357:       assertFalse(node0.isTrue());
358:       assertFalse(node0.isObjectLit());
359:       assertFalse(node0.isDebugger());
360:       assertFalse(node0.isAssign());
361:       assertFalse(node0.isName());
362:       assertFalse(node0.isGetElem());
363:       assertFalse(node0.isDelProp());
364:       assertFalse(node0.isCall());
365:       assertFalse(node0.isBreak());
366:       assertFalse(node0.isGetProp());
367:       assertFalse(node0.isReturn());
368:       assertFalse(node0.isTypeOf());
369:       assertFalse(node0.isDec());
370:       assertFalse(node0.hasChildren());
371:       assertFalse(node0.isComma());
372:       
373:       Node node2 = new Node(657, node0, node0, node0, node0);
374:       assertNotNull(node2);
375:       assertFalse(node0.equals((Object)node1));
376:       assertFalse(node2.equals((Object)node0));
377:       assertFalse(node2.equals((Object)node1));
378:       assertFalse(node0.isDo());
379:       assertFalse(node0.isContinue());
380:       assertFalse(node0.isWhile());
381:       assertFalse(node0.isNew());
382:       assertEquals((-1), node0.getLineno());
383:       assertFalse(node0.isOr());
384:       assertFalse(node0.isAdd());
385:       assertEquals((-1), node0.getSourcePosition());
386:       assertFalse(node0.isLabelName());
387:       assertFalse(node0.isStringKey());
388:       assertFalse(node0.isSetterDef());
389:       assertFalse(node0.isCast());
390:       assertFalse(node0.isAssignAdd());
391:       assertFalse(node0.isLabel());
392:       assertFalse(node0.isVar());
393:       assertEquals(0, node0.getChildCount());
394:       assertFalse(node0.isWith());
395:       assertEquals(40, node0.getType());
396:       assertFalse(node0.isCatch());
397:       assertFalse(node0.isScript());
398:       assertFalse(node0.isParamList());
399:       assertFalse(node0.isFor());
400:       assertFalse(node0.isGetterDef());
401:       assertFalse(node0.isIf());
402:       assertFalse(node0.isNumber());
403:       assertFalse(node0.hasOneChild());
404:       assertFalse(node0.isTry());
405:       assertFalse(node0.isBlock());
406:       assertTrue(node0.isString());
407:       assertFalse(node0.isInstanceOf());
408:       assertFalse(node0.hasMoreThanOneChild());
409:       assertFalse(node0.isRegExp());
410:       assertFalse(node0.isThis());
411:       assertFalse(node0.isHook());
412:       assertFalse(node0.isSwitch());
413:       assertFalse(node0.isInc());
414:       assertFalse(node0.isCase());
415:       assertFalse(node0.isIn());
416:       assertFalse(node0.isNE());
417:       assertEquals((-1), node0.getCharno());
418:       assertFalse(node0.isEmpty());
419:       assertFalse(node0.isThrow());
420:       assertFalse(node0.isFalse());
421:       assertFalse(node0.isArrayLit());
422:       assertFalse(node0.isFunction());
423:       assertFalse(node0.isNot());
424:       assertFalse(node0.isDefaultCase());
425:       assertFalse(node0.isAnd());
426:       assertFalse(node0.isExprResult());
427:       assertFalse(node0.isVoid());
428:       assertFalse(node0.isNull());
429:       assertFalse(node0.isTrue());
430:       assertFalse(node0.isObjectLit());
431:       assertFalse(node0.isDebugger());
432:       assertFalse(node0.isAssign());
433:       assertFalse(node0.isName());
434:       assertFalse(node0.isGetElem());
435:       assertFalse(node0.isDelProp());
436:       assertFalse(node0.isCall());
437:       assertFalse(node0.isBreak());
438:       assertFalse(node0.isGetProp());
439:       assertFalse(node0.isReturn());
440:       assertFalse(node0.isTypeOf());
441:       assertFalse(node0.isDec());
442:       assertFalse(node0.hasChildren());
443:       assertFalse(node0.isComma());
444:       assertFalse(node2.isCase());
445:       assertFalse(node2.isString());
446:       assertFalse(node2.isIn());
447:       assertFalse(node2.isInc());
448:       assertEquals(1, node2.getChildCount());
449:       assertFalse(node2.isHook());
450:       assertFalse(node2.isFalse());
451:       assertFalse(node2.isThrow());
452:       assertFalse(node2.isGetterDef());
453:       assertFalse(node2.isDebugger());
454:       assertEquals((-1), node2.getCharno());
455:       assertFalse(node2.isArrayLit());
456:       assertFalse(node2.isAnd());
457:       assertFalse(node2.isSwitch());
458:       assertFalse(node2.isNot());
459:       assertFalse(node2.isObjectLit());
460:       assertEquals(657, node2.getType());
461:       assertFalse(node2.isComma());
462:       assertFalse(node2.isGetProp());
463:       assertFalse(node2.isDefaultCase());
464:       assertFalse(node2.isName());
465:       assertFalse(node2.isGetElem());
466:       assertFalse(node2.isEmpty());
467:       assertFalse(node2.isAssign());
468:       assertFalse(node2.isCall());
469:       assertTrue(node2.hasOneChild());
470:       assertFalse(node2.isBreak());
471:       assertFalse(node2.isDec());
472:       assertFalse(node2.isTypeOf());
473:       assertFalse(node2.isOr());
474:       assertFalse(node2.isVoid());
475:       assertFalse(node2.isTrue());
476:       assertFalse(node2.isExprResult());
477:       assertFalse(node2.isNull());
478:       assertFalse(node2.isDelProp());
479:       assertFalse(node2.isDo());
480:       assertFalse(node2.isContinue());
481:       assertFalse(node2.hasMoreThanOneChild());
482:       assertFalse(node2.isNew());
483:       assertFalse(node2.isBlock());
484:       assertFalse(node2.isAdd());
485:       assertFalse(node2.isReturn());
486:       assertFalse(node2.isLabel());
487:       assertFalse(node2.isVar());
488:       assertFalse(node2.isWhile());
489:       assertFalse(node2.isAssignAdd());
490:       assertFalse(node2.isStringKey());
491:       assertFalse(node2.isLabelName());
492:       assertFalse(node2.isNumber());
493:       assertEquals((-1), node2.getSourcePosition());
494:       assertFalse(node2.isCast());
495:       assertFalse(node2.isParamList());
496:       assertFalse(node2.isRegExp());
497:       assertFalse(node2.isInstanceOf());
498:       assertFalse(node2.isCatch());
499:       assertFalse(node2.isScript());
500:       assertFalse(node2.isFunction());
501:       assertFalse(node2.isWith());
502:       assertFalse(node2.isTry());
503:       assertFalse(node2.isSetterDef());
504:       assertFalse(node2.isThis());
505:       assertFalse(node2.isFor());
506:       assertTrue(node2.hasChildren());
507:       assertEquals((-1), node2.getLineno());
508:       assertFalse(node2.isNE());
509:       assertFalse(node2.isIf());
510:       
511:       Iterable<Node> iterable0 = node0.children();
512:       assertFalse(iterable0.contains(node2));
513:       assertNotNull(iterable0);
514:       assertFalse(node0.equals((Object)node1));
515:       assertFalse(node0.equals((Object)node2));
516:       assertFalse(node0.isDo());
517:       assertFalse(node0.isContinue());
518:       assertFalse(node0.isWhile());
519:       assertFalse(node0.isNew());
520:       assertEquals((-1), node0.getLineno());
521:       assertFalse(node0.isOr());
522:       assertFalse(node0.isAdd());
523:       assertEquals((-1), node0.getSourcePosition());
524:       assertFalse(node0.isLabelName());
525:       assertFalse(node0.isStringKey());
526:       assertFalse(node0.isSetterDef());
527:       assertFalse(node0.isCast());
528:       assertFalse(node0.isAssignAdd());
529:       assertFalse(node0.isLabel());
530:       assertFalse(node0.isVar());
531:       assertEquals(0, node0.getChildCount());
532:       assertFalse(node0.isWith());
533:       assertEquals(40, node0.getType());
534:       assertFalse(node0.isCatch());
535:       assertFalse(node0.isScript());
536:       assertFalse(node0.isParamList());
537:       assertFalse(node0.isFor());
538:       assertFalse(node0.isGetterDef());
539:       assertFalse(node0.isIf());
540:       assertFalse(node0.isNumber());
541:       assertFalse(node0.hasOneChild());
542:       assertFalse(node0.isTry());
543:       assertFalse(node0.isBlock());
544:       assertTrue(node0.isString());
545:       assertFalse(node0.isInstanceOf());
546:       assertFalse(node0.hasMoreThanOneChild());
547:       assertFalse(node0.isRegExp());
548:       assertFalse(node0.isThis());
549:       assertFalse(node0.isHook());
550:       assertFalse(node0.isSwitch());
551:       assertFalse(node0.isInc());
552:       assertFalse(node0.isCase());
553:       assertFalse(node0.isIn());
554:       assertFalse(node0.isNE());
555:       assertEquals((-1), node0.getCharno());
556:       assertFalse(node0.isEmpty());
557:       assertFalse(node0.isThrow());
558:       assertFalse(node0.isFalse());
559:       assertFalse(node0.isArrayLit());
560:       assertFalse(node0.isFunction());
561:       assertFalse(node0.isNot());
562:       assertFalse(node0.isDefaultCase());
563:       assertFalse(node0.isAnd());
564:       assertFalse(node0.isExprResult());
565:       assertFalse(node0.isVoid());
566:       assertFalse(node0.isNull());
567:       assertFalse(node0.isTrue());
568:       assertFalse(node0.isObjectLit());
569:       assertFalse(node0.isDebugger());
570:       assertFalse(node0.isAssign());
571:       assertFalse(node0.isName());
572:       assertFalse(node0.isGetElem());
573:       assertFalse(node0.isDelProp());
574:       assertFalse(node0.isCall());
575:       assertFalse(node0.isBreak());
576:       assertFalse(node0.isGetProp());
577:       assertFalse(node0.isReturn());
578:       assertFalse(node0.isTypeOf());
579:       assertFalse(node0.isDec());
580:       assertFalse(node0.hasChildren());
581:       assertFalse(node0.isComma());
582:       
583:       Node node3 = node1.useSourceInfoFromForTree(node2);
584:       assertNotNull(node3);
585:       assertSame(node1, node3);
586:       assertSame(node3, node1);
587:       assertFalse(node0.equals((Object)node1));
588:       assertFalse(node0.equals((Object)node2));
589:       assertFalse(node1.equals((Object)node2));
590:       assertFalse(node1.equals((Object)node0));
591:       assertFalse(node2.equals((Object)node0));
592:       assertFalse(node2.equals((Object)node1));
593:       assertFalse(node3.equals((Object)node0));
594:       assertFalse(node3.equals((Object)node2));
595:       assertFalse(node0.isDo());
596:       assertFalse(node0.isContinue());
597:       assertFalse(node0.isWhile());
598:       assertFalse(node0.isNew());
599:       assertEquals((-1), node0.getLineno());
600:       assertFalse(node0.isOr());
601:       assertFalse(node0.isAdd());
602:       assertEquals((-1), node0.getSourcePosition());
603:       assertFalse(node0.isLabelName());
604:       assertFalse(node0.isStringKey());
605:       assertFalse(node0.isSetterDef());
606:       assertFalse(node0.isCast());
607:       assertFalse(node0.isAssignAdd());
608:       assertFalse(node0.isLabel());
609:       assertFalse(node0.isVar());
610:       assertEquals(0, node0.getChildCount());
611:       assertFalse(node0.isWith());
612:       assertEquals(40, node0.getType());
613:       assertFalse(node0.isCatch());
614:       assertFalse(node0.isScript());
615:       assertFalse(node0.isParamList());
616:       assertFalse(node0.isFor());
617:       assertFalse(node0.isGetterDef());
618:       assertFalse(node0.isIf());
619:       assertFalse(node0.isNumber());
620:       assertFalse(node0.hasOneChild());
621:       assertFalse(node0.isTry());
622:       assertFalse(node0.isBlock());
623:       assertTrue(node0.isString());
624:       assertFalse(node0.isInstanceOf());
625:       assertFalse(node0.hasMoreThanOneChild());
626:       assertFalse(node0.isRegExp());
627:       assertFalse(node0.isThis());
628:       assertFalse(node0.isHook());
629:       assertFalse(node0.isSwitch());
630:       assertFalse(node0.isInc());
631:       assertFalse(node0.isCase());
632:       assertFalse(node0.isIn());
633:       assertFalse(node0.isNE());
634:       assertEquals((-1), node0.getCharno());
635:       assertFalse(node0.isEmpty());
636:       assertFalse(node0.isThrow());
637:       assertFalse(node0.isFalse());
638:       assertFalse(node0.isArrayLit());
639:       assertFalse(node0.isFunction());
640:       assertFalse(node0.isNot());
641:       assertFalse(node0.isDefaultCase());
642:       assertFalse(node0.isAnd());
643:       assertFalse(node0.isExprResult());
644:       assertFalse(node0.isVoid());
645:       assertFalse(node0.isNull());
646:       assertFalse(node0.isTrue());
647:       assertFalse(node0.isObjectLit());
648:       assertFalse(node0.isDebugger());
649:       assertFalse(node0.isAssign());
650:       assertFalse(node0.isName());
651:       assertFalse(node0.isGetElem());
652:       assertFalse(node0.isDelProp());
653:       assertFalse(node0.isCall());
654:       assertFalse(node0.isBreak());
655:       assertFalse(node0.isGetProp());
656:       assertFalse(node0.isReturn());
657:       assertFalse(node0.isTypeOf());
658:       assertFalse(node0.isDec());
659:       assertFalse(node0.hasChildren());
660:       assertFalse(node0.isComma());
661:       assertFalse(node1.isDefaultCase());
662:       assertFalse(node1.isRegExp());
663:       assertFalse(node1.isFunction());
664:       assertFalse(node1.isCatch());
665:       assertFalse(node1.isArrayLit());
666:       assertFalse(node1.isVoid());
667:       assertFalse(node1.isTrue());
668:       assertFalse(node1.isParamList());
669:       assertFalse(node1.isDebugger());
670:       assertFalse(node1.isNull());
671:       assertFalse(node1.isGetterDef());
672:       assertFalse(node1.isDelProp());
673:       assertFalse(node1.isIf());
674:       assertFalse(node1.isName());
675:       assertFalse(node1.isCall());
676:       assertFalse(node1.isTry());
677:       assertTrue(node1.isNumber());
678:       assertFalse(node1.isBlock());
679:       assertFalse(node1.isFor());
680:       assertFalse(node1.isWhile());
681:       assertFalse(node1.isString());
682:       assertEquals(39, node1.getType());
683:       assertFalse(node1.isContinue());
684:       assertFalse(node1.isInc());
685:       assertFalse(node1.hasMoreThanOneChild());
686:       assertEquals((-1), node1.getLineno());
687:       assertFalse(node1.isIn());
688:       assertFalse(node1.isNE());
689:       assertFalse(node1.isSetterDef());
690:       assertFalse(node1.isFalse());
691:       assertFalse(node1.isCast());
692:       assertFalse(node1.isThrow());
693:       assertFalse(node1.isWith());
694:       assertFalse(node1.isNot());
695:       assertFalse(node1.isExprResult());
696:       assertFalse(node1.isObjectLit());
697:       assertFalse(node1.isScript());
698:       assertFalse(node1.isInstanceOf());
699:       assertFalse(node1.isAnd());
700:       assertFalse(node1.isBreak());
701:       assertFalse(node1.hasChildren());
702:       assertEquals((-1), node1.getSourcePosition());
703:       assertFalse(node1.isTypeOf());
704:       assertFalse(node1.isComma());
705:       assertFalse(node1.isDec());
706:       assertFalse(node1.isAssign());
707:       assertFalse(node1.isGetProp());
708:       assertFalse(node1.isGetElem());
709:       assertFalse(node1.isReturn());
710:       assertFalse(node1.isHook());
711:       assertFalse(node1.hasOneChild());
712:       assertFalse(node1.isThis());
713:       assertFalse(node1.isCase());
714:       assertFalse(node1.isDo());
715:       assertFalse(node1.isAdd());
716:       assertFalse(node1.isOr());
717:       assertEquals((-1), node1.getCharno());
718:       assertFalse(node1.isSwitch());
719:       assertFalse(node1.isStringKey());
720:       assertFalse(node1.isLabelName());
721:       assertFalse(node1.isEmpty());
722:       assertFalse(node1.isAssignAdd());
723:       assertFalse(node1.isLabel());
724:       assertFalse(node1.isNew());
725:       assertEquals(0, node1.getChildCount());
726:       assertFalse(node1.isVar());
727:       assertFalse(node2.isCase());
728:       assertFalse(node2.isString());
729:       assertFalse(node2.isIn());
730:       assertFalse(node2.isInc());
731:       assertEquals(1, node2.getChildCount());
732:       assertFalse(node2.isHook());
733:       assertFalse(node2.isFalse());
734:       assertFalse(node2.isThrow());
735:       assertFalse(node2.isGetterDef());
736:       assertFalse(node2.isDebugger());
737:       assertEquals((-1), node2.getCharno());
738:       assertFalse(node2.isArrayLit());
739:       assertFalse(node2.isAnd());
740:       assertFalse(node2.isSwitch());
741:       assertFalse(node2.isNot());
742:       assertFalse(node2.isObjectLit());
743:       assertEquals(657, node2.getType());
744:       assertFalse(node2.isComma());
745:       assertFalse(node2.isGetProp());
746:       assertFalse(node2.isDefaultCase());
747:       assertFalse(node2.isName());
748:       assertFalse(node2.isGetElem());
749:       assertFalse(node2.isEmpty());
750:       assertFalse(node2.isAssign());
751:       assertFalse(node2.isCall());
752:       assertTrue(node2.hasOneChild());
753:       assertFalse(node2.isBreak());
754:       assertFalse(node2.isDec());
755:       assertFalse(node2.isTypeOf());
756:       assertFalse(node2.isOr());
757:       assertFalse(node2.isVoid());
758:       assertFalse(node2.isTrue());
759:       assertFalse(node2.isExprResult());
760:       assertFalse(node2.isNull());
761:       assertFalse(node2.isDelProp());
762:       assertFalse(node2.isDo());
763:       assertFalse(node2.isContinue());
764:       assertFalse(node2.hasMoreThanOneChild());
765:       assertFalse(node2.isNew());
766:       assertFalse(node2.isBlock());
767:       assertFalse(node2.isAdd());
768:       assertFalse(node2.isReturn());
769:       assertFalse(node2.isLabel());
770:       assertFalse(node2.isVar());
771:       assertFalse(node2.isWhile());
772:       assertFalse(node2.isAssignAdd());
773:       assertFalse(node2.isStringKey());
774:       assertFalse(node2.isLabelName());
775:       assertFalse(node2.isNumber());
776:       assertEquals((-1), node2.getSourcePosition());
777:       assertFalse(node2.isCast());
778:       assertFalse(node2.isParamList());
779:       assertFalse(node2.isRegExp());
780:       assertFalse(node2.isInstanceOf());
781:       assertFalse(node2.isCatch());
782:       assertFalse(node2.isScript());
783:       assertFalse(node2.isFunction());
784:       assertFalse(node2.isWith());
785:       assertFalse(node2.isTry());
786:       assertFalse(node2.isSetterDef());
787:       assertFalse(node2.isThis());
788:       assertFalse(node2.isFor());
789:       assertTrue(node2.hasChildren());
790:       assertEquals((-1), node2.getLineno());
791:       assertFalse(node2.isNE());
792:       assertFalse(node2.isIf());
793:       assertFalse(node3.isIn());
794:       assertFalse(node3.isSwitch());
795:       assertFalse(node3.isNE());
796:       assertFalse(node3.isIf());
797:       assertFalse(node3.isDelProp());
798:       assertFalse(node3.isHook());
799:       assertFalse(node3.isFor());
800:       assertEquals((-1), node3.getCharno());
801:       assertFalse(node3.isGetterDef());
802:       assertFalse(node3.isDebugger());
803:       assertFalse(node3.isThis());
804:       assertFalse(node3.isString());
805:       assertFalse(node3.isTry());
806:       assertFalse(node3.isGetProp());
807:       assertFalse(node3.isCase());
808:       assertTrue(node3.isNumber());
809:       assertFalse(node3.isAnd());
810:       assertFalse(node3.isCatch());
811:       assertFalse(node3.isInstanceOf());
812:       assertFalse(node3.isNot());
813:       assertFalse(node3.isWith());
814:       assertFalse(node3.isObjectLit());
815:       assertFalse(node3.isRegExp());
816:       assertFalse(node3.isFunction());
817:       assertFalse(node3.isCast());
818:       assertFalse(node3.isThrow());
819:       assertFalse(node3.isFalse());
820:       assertFalse(node3.isSetterDef());
821:       assertFalse(node3.isInc());
822:       assertFalse(node3.hasMoreThanOneChild());
823:       assertFalse(node3.isContinue());
824:       assertFalse(node3.isOr());
825:       assertEquals(39, node3.getType());
826:       assertFalse(node3.isLabel());
827:       assertFalse(node3.isReturn());
828:       assertFalse(node3.isTypeOf());
829:       assertFalse(node3.isLabelName());
830:       assertFalse(node3.isGetElem());
831:       assertEquals((-1), node3.getLineno());
832:       assertFalse(node3.isCall());
833:       assertFalse(node3.isStringKey());
834:       assertFalse(node3.isAssign());
835:       assertFalse(node3.isBlock());
836:       assertFalse(node3.hasChildren());
837:       assertEquals((-1), node3.getSourcePosition());
838:       assertFalse(node3.isDec());
839:       assertFalse(node3.isScript());
840:       assertFalse(node3.isWhile());
841:       assertFalse(node3.hasOneChild());
842:       assertEquals(0, node3.getChildCount());
843:       assertFalse(node3.isComma());
844:       assertFalse(node3.isNull());
845:       assertFalse(node3.isTrue());
846:       assertFalse(node3.isExprResult());
847:       assertFalse(node3.isParamList());
848:       assertFalse(node3.isName());
849:       assertFalse(node3.isBreak());
850:       assertFalse(node3.isVoid());
851:       assertFalse(node3.isVar());
852:       assertFalse(node3.isArrayLit());
853:       assertFalse(node3.isDefaultCase());
854:       assertFalse(node3.isAssignAdd());
855:       assertFalse(node3.isDo());
856:       assertFalse(node3.isAdd());
857:       assertFalse(node3.isEmpty());
858:       assertFalse(node3.isNew());
859:       
860:       int int0 = Node.extractLineno(8388608);
861:       assertEquals(2048, int0);
862:       
863:       String string0 = node1.getSourceFileName();
864:       assertNull(string0);
865:       assertSame(node1, node3);
866:       assertFalse(node1.equals((Object)node2));
867:       assertFalse(node1.equals((Object)node0));
868:       assertFalse(node1.isDefaultCase());
869:       assertFalse(node1.isRegExp());
870:       assertFalse(node1.isFunction());
871:       assertFalse(node1.isCatch());
872:       assertFalse(node1.isArrayLit());
873:       assertFalse(node1.isVoid());
874:       assertFalse(node1.isTrue());
875:       assertFalse(node1.isParamList());
876:       assertFalse(node1.isDebugger());
877:       assertFalse(node1.isNull());
878:       assertFalse(node1.isGetterDef());
879:       assertFalse(node1.isDelProp());
880:       assertFalse(node1.isIf());
881:       assertFalse(node1.isName());
882:       assertFalse(node1.isCall());
883:       assertFalse(node1.isTry());
884:       assertTrue(node1.isNumber());
885:       assertFalse(node1.isBlock());
886:       assertFalse(node1.isFor());
887:       assertFalse(node1.isWhile());
888:       assertFalse(node1.isString());
889:       assertEquals(39, node1.getType());
890:       assertFalse(node1.isContinue());
891:       assertFalse(node1.isInc());
892:       assertFalse(node1.hasMoreThanOneChild());
893:       assertEquals((-1), node1.getLineno());
894:       assertFalse(node1.isIn());
895:       assertFalse(node1.isNE());
896:       assertFalse(node1.isSetterDef());
897:       assertFalse(node1.isFalse());
898:       assertFalse(node1.isCast());
899:       assertFalse(node1.isThrow());
900:       assertFalse(node1.isWith());
901:       assertFalse(node1.isNot());
902:       assertFalse(node1.isExprResult());
903:       assertFalse(node1.isObjectLit());
904:       assertFalse(node1.isScript());
905:       assertFalse(node1.isInstanceOf());
906:       assertFalse(node1.isAnd());
907:       assertFalse(node1.isBreak());
908:       assertFalse(node1.hasChildren());
909:       assertEquals((-1), node1.getSourcePosition());
910:       assertFalse(node1.isTypeOf());
911:       assertFalse(node1.isComma());
912:       assertFalse(node1.isDec());
913:       assertFalse(node1.isAssign());
914:       assertFalse(node1.isGetProp());
915:       assertFalse(node1.isGetElem());
916:       assertFalse(node1.isReturn());
917:       assertFalse(node1.isHook());
918:       assertFalse(node1.hasOneChild());
919:       assertFalse(node1.isThis());
920:       assertFalse(node1.isCase());
921:       assertFalse(node1.isDo());
922:       assertFalse(node1.isAdd());
923:       assertFalse(node1.isOr());
924:       assertEquals((-1), node1.getCharno());
925:       assertFalse(node1.isSwitch());
926:       assertFalse(node1.isStringKey());
927:       assertFalse(node1.isLabelName());
928:       assertFalse(node1.isEmpty());
929:       assertFalse(node1.isAssignAdd());
930:       assertFalse(node1.isLabel());
931:       assertFalse(node1.isNew());
932:       assertEquals(0, node1.getChildCount());
933:       assertFalse(node1.isVar());
934:       
935:       boolean boolean2 = node0.isParamList();
936:       assertFalse(boolean2);
937:       assertFalse(node0.equals((Object)node1));
938:       assertFalse(node0.equals((Object)node3));
939:       assertFalse(node0.equals((Object)node2));
940:       assertTrue(boolean2 == boolean0);
941:       assertTrue(boolean2 == boolean1);
942:       assertFalse(node0.isDo());
943:       assertFalse(node0.isContinue());
944:       assertFalse(node0.isWhile());
945:       assertFalse(node0.isNew());
946:       assertEquals((-1), node0.getLineno());
947:       assertFalse(node0.isOr());
948:       assertFalse(node0.isAdd());
949:       assertEquals((-1), node0.getSourcePosition());
950:       assertFalse(node0.isLabelName());
951:       assertFalse(node0.isStringKey());
952:       assertFalse(node0.isSetterDef());
953:       assertFalse(node0.isCast());
954:       assertFalse(node0.isAssignAdd());
955:       assertFalse(node0.isLabel());
956:       assertFalse(node0.isVar());
957:       assertEquals(0, node0.getChildCount());
958:       assertFalse(node0.isWith());
959:       assertEquals(40, node0.getType());
960:       assertFalse(node0.isCatch());
961:       assertFalse(node0.isScript());
962:       assertFalse(node0.isParamList());
963:       assertFalse(node0.isFor());
964:       assertFalse(node0.isGetterDef());
965:       assertFalse(node0.isIf());
966:       assertFalse(node0.isNumber());
967:       assertFalse(node0.hasOneChild());
968:       assertFalse(node0.isTry());
969:       assertFalse(node0.isBlock());
970:       assertTrue(node0.isString());
971:       assertFalse(node0.isInstanceOf());
972:       assertFalse(node0.hasMoreThanOneChild());
973:       assertFalse(node0.isRegExp());
974:       assertFalse(node0.isThis());
975:       assertFalse(node0.isHook());
976:       assertFalse(node0.isSwitch());
977:       assertFalse(node0.isInc());
978:       assertFalse(node0.isCase());
979:       assertFalse(node0.isIn());
980:       assertFalse(node0.isNE());
981:       assertEquals((-1), node0.getCharno());
982:       assertFalse(node0.isEmpty());
983:       assertFalse(node0.isThrow());
984:       assertFalse(node0.isFalse());
985:       assertFalse(node0.isArrayLit());
986:       assertFalse(node0.isFunction());
987:       assertFalse(node0.isNot());
988:       assertFalse(node0.isDefaultCase());
989:       assertFalse(node0.isAnd());
990:       assertFalse(node0.isExprResult());
991:       assertFalse(node0.isVoid());
992:       assertFalse(node0.isNull());
993:       assertFalse(node0.isTrue());
994:       assertFalse(node0.isObjectLit());
995:       assertFalse(node0.isDebugger());
996:       assertFalse(node0.isAssign());
997:       assertFalse(node0.isName());
998:       assertFalse(node0.isGetElem());
999:       assertFalse(node0.isDelProp());
1000:       assertFalse(node0.isCall());
1001:       assertFalse(node0.isBreak());
1002:       assertFalse(node0.isGetProp());
1003:       assertFalse(node0.isReturn());
1004:       assertFalse(node0.isTypeOf());
1005:       assertFalse(node0.isDec());
1006:       assertFalse(node0.hasChildren());
1007:       assertFalse(node0.isComma());
1008:       
1009:       Node node4 = Node.newString("", 1, 39);
1010:       assertNotNull(node4);
1011:       assertNotSame(node4, node0);
1012:       assertFalse(node4.equals((Object)node3));
1013:       assertFalse(node4.equals((Object)node2));
1014:       assertFalse(node4.equals((Object)node1));
1015:       assertFalse(node4.equals((Object)node0));
1016:       assertEquals(1, node4.getLineno());
1017:       assertFalse(node4.isNE());
1018:       assertFalse(node4.isIf());
1019:       assertFalse(node4.isDelProp());
1020:       assertFalse(node4.isFor());
1021:       assertFalse(node4.isTry());
1022:       assertFalse(node4.isFunction());
1023:       assertFalse(node4.isSwitch());
1024:       assertFalse(node4.isArrayLit());
1025:       assertFalse(node4.isCase());
1026:       assertFalse(node4.isGetterDef());
1027:       assertFalse(node4.isDebugger());
1028:       assertFalse(node4.isGetProp());
1029:       assertFalse(node4.isParamList());
1030:       assertEquals(39, node4.getCharno());
1031:       assertFalse(node4.isBreak());
1032:       assertFalse(node4.isCall());
1033:       assertEquals(0, node4.getChildCount());
1034:       assertFalse(node4.isVar());
1035:       assertFalse(node4.isComma());
1036:       assertFalse(node4.isTrue());
1037:       assertFalse(node4.isAdd());
1038:       assertFalse(node4.isVoid());
1039:       assertFalse(node4.isExprResult());
1040:       assertFalse(node4.isDefaultCase());
1041:       assertFalse(node4.isDo());
1042:       assertFalse(node4.isNew());
1043:       assertFalse(node4.isName());
1044:       assertFalse(node4.isEmpty());
1045:       assertFalse(node4.isNull());
1046:       assertFalse(node4.isOr());
1047:       assertFalse(node4.isAssignAdd());
1048:       assertFalse(node4.isLabelName());
1049:       assertFalse(node4.isGetElem());
1050:       assertFalse(node4.hasMoreThanOneChild());
1051:       assertFalse(node4.isCast());
1052:       assertFalse(node4.isContinue());
1053:       assertFalse(node4.isWhile());
1054:       assertFalse(node4.isDec());
1055:       assertFalse(node4.hasChildren());
1056:       assertFalse(node4.isTypeOf());
1057:       assertFalse(node4.isAssign());
1058:       assertFalse(node4.isReturn());
1059:       assertFalse(node4.isLabel());
1060:       assertFalse(node4.isBlock());
1061:       assertTrue(node4.isString());
1062:       assertFalse(node4.hasOneChild());
1063:       assertFalse(node4.isScript());
1064:       assertFalse(node4.isStringKey());
1065:       assertFalse(node4.isObjectLit());
1066:       assertFalse(node4.isAnd());
1067:       assertFalse(node4.isNumber());
1068:       assertFalse(node4.isNot());
1069:       assertFalse(node4.isInstanceOf());
1070:       assertFalse(node4.isSetterDef());
1071:       assertFalse(node4.isThrow());
1072:       assertFalse(node4.isFalse());
1073:       assertEquals(40, node4.getType());
1074:       assertFalse(node4.isCatch());
1075:       assertFalse(node4.isWith());
1076:       assertFalse(node4.isHook());
1077:       assertFalse(node4.isRegExp());
1078:       assertFalse(node4.isThis());
1079:       assertEquals(4135, node4.getSourcePosition());
1080:       assertFalse(node4.isInc());
1081:       assertFalse(node4.isIn());
1082:       
1083:       node4.detachChildren();
1084:       assertNotSame(node4, node0);
1085:       assertFalse(node4.equals((Object)node3));
1086:       assertFalse(node4.equals((Object)node2));
1087:       assertFalse(node4.equals((Object)node1));
1088:       assertFalse(node4.equals((Object)node0));
1089:       assertEquals(1, node4.getLineno());
1090:       assertFalse(node4.isNE());
1091:       assertFalse(node4.isIf());
1092:       assertFalse(node4.isDelProp());
1093:       assertFalse(node4.isFor());
1094:       assertFalse(node4.isTry());
1095:       assertFalse(node4.isFunction());
1096:       assertFalse(node4.isSwitch());
1097:       assertFalse(node4.isArrayLit());
1098:       assertFalse(node4.isCase());
1099:       assertFalse(node4.isGetterDef());
1100:       assertFalse(node4.isDebugger());
1101:       assertFalse(node4.isGetProp());
1102:       assertFalse(node4.isParamList());
1103:       assertEquals(39, node4.getCharno());
1104:       assertFalse(node4.isBreak());
1105:       assertFalse(node4.isCall());
1106:       assertEquals(0, node4.getChildCount());
1107:       assertFalse(node4.isVar());
1108:       assertFalse(node4.isComma());
1109:       assertFalse(node4.isTrue());
1110:       assertFalse(node4.isAdd());
1111:       assertFalse(node4.isVoid());
1112:       assertFalse(node4.isExprResult());
1113:       assertFalse(node4.isDefaultCase());
1114:       assertFalse(node4.isDo());
1115:       assertFalse(node4.isNew());
1116:       assertFalse(node4.isName());
1117:       assertFalse(node4.isEmpty());
1118:       assertFalse(node4.isNull());
1119:       assertFalse(node4.isOr());
1120:       assertFalse(node4.isAssignAdd());
1121:       assertFalse(node4.isLabelName());
1122:       assertFalse(node4.isGetElem());
1123:       assertFalse(node4.hasMoreThanOneChild());
1124:       assertFalse(node4.isCast());
1125:       assertFalse(node4.isContinue());
1126:       assertFalse(node4.isWhile());
1127:       assertFalse(node4.isDec());
1128:       assertFalse(node4.hasChildren());
1129:       assertFalse(node4.isTypeOf());
1130:       assertFalse(node4.isAssign());
1131:       assertFalse(node4.isReturn());
1132:       assertFalse(node4.isLabel());
1133:       assertFalse(node4.isBlock());
1134:       assertTrue(node4.isString());
1135:       assertFalse(node4.hasOneChild());
1136:       assertFalse(node4.isScript());
1137:       assertFalse(node4.isStringKey());
1138:       assertFalse(node4.isObjectLit());
1139:       assertFalse(node4.isAnd());
1140:       assertFalse(node4.isNumber());
1141:       assertFalse(node4.isNot());
1142:       assertFalse(node4.isInstanceOf());
1143:       assertFalse(node4.isSetterDef());
1144:       assertFalse(node4.isThrow());
1145:       assertFalse(node4.isFalse());
1146:       assertEquals(40, node4.getType());
1147:       assertFalse(node4.isCatch());
1148:       assertFalse(node4.isWith());
1149:       assertFalse(node4.isHook());
1150:       assertFalse(node4.isRegExp());
1151:       assertFalse(node4.isThis());
1152:       assertEquals(4135, node4.getSourcePosition());
1153:       assertFalse(node4.isInc());
1154:       assertFalse(node4.isIn());
1155:       
1156:       Node node5 = node0.copyInformationFromForTree(node1);
1157:       assertNotNull(node5);
1158:       assertSame(node0, node5);
1159:       assertNotSame(node0, node4);
1160:       assertSame(node1, node3);
1161:       assertNotSame(node5, node4);
1162:       assertSame(node5, node0);
1163:       assertFalse(node0.equals((Object)node1));
1164:       assertFalse(node0.equals((Object)node3));
1165:       assertFalse(node0.equals((Object)node4));
1166:       assertFalse(node0.equals((Object)node2));
1167:       assertFalse(node1.equals((Object)node2));
1168:       assertFalse(node1.equals((Object)node4));
1169:       assertFalse(node1.equals((Object)node0));
1170:       assertFalse(node5.equals((Object)node2));
1171:       assertFalse(node5.equals((Object)node4));
1172:       assertFalse(node5.equals((Object)node1));
1173:       assertFalse(node5.equals((Object)node3));
1174:       assertFalse(node0.isDo());
1175:       assertFalse(node0.isContinue());
1176:       assertFalse(node0.isWhile());
1177:       assertFalse(node0.isNew());
1178:       assertEquals((-1), node0.getLineno());
1179:       assertFalse(node0.isOr());
1180:       assertFalse(node0.isAdd());
1181:       assertEquals((-1), node0.getSourcePosition());
1182:       assertFalse(node0.isLabelName());
1183:       assertFalse(node0.isStringKey());
1184:       assertFalse(node0.isSetterDef());
1185:       assertFalse(node0.isCast());
1186:       assertFalse(node0.isAssignAdd());
1187:       assertFalse(node0.isLabel());
1188:       assertFalse(node0.isVar());
1189:       assertEquals(0, node0.getChildCount());
1190:       assertFalse(node0.isWith());
1191:       assertEquals(40, node0.getType());
1192:       assertFalse(node0.isCatch());
1193:       assertFalse(node0.isScript());
1194:       assertFalse(node0.isParamList());
1195:       assertFalse(node0.isFor());
1196:       assertFalse(node0.isGetterDef());
1197:       assertFalse(node0.isIf());
1198:       assertFalse(node0.isNumber());
1199:       assertFalse(node0.hasOneChild());
1200:       assertFalse(node0.isTry());
1201:       assertFalse(node0.isBlock());
1202:       assertTrue(node0.isString());
1203:       assertFalse(node0.isInstanceOf());
1204:       assertFalse(node0.hasMoreThanOneChild());
1205:       assertFalse(node0.isRegExp());
1206:       assertFalse(node0.isThis());
1207:       assertFalse(node0.isHook());
1208:       assertFalse(node0.isSwitch());
1209:       assertFalse(node0.isInc());
1210:       assertFalse(node0.isCase());
1211:       assertFalse(node0.isIn());
1212:       assertFalse(node0.isNE());
1213:       assertEquals((-1), node0.getCharno());
1214:       assertFalse(node0.isEmpty());
1215:       assertFalse(node0.isThrow());
1216:       assertFalse(node0.isFalse());
1217:       assertFalse(node0.isArrayLit());
1218:       assertFalse(node0.isFunction());
1219:       assertFalse(node0.isNot());
1220:       assertFalse(node0.isDefaultCase());
1221:       assertFalse(node0.isAnd());
1222:       assertFalse(node0.isExprResult());
1223:       assertFalse(node0.isVoid());
1224:       assertFalse(node0.isNull());
1225:       assertFalse(node0.isTrue());
1226:       assertFalse(node0.isObjectLit());
1227:       assertFalse(node0.isDebugger());
1228:       assertFalse(node0.isAssign());
1229:       assertFalse(node0.isName());
1230:       assertFalse(node0.isGetElem());
1231:       assertFalse(node0.isDelProp());
1232:       assertFalse(node0.isCall());
1233:       assertFalse(node0.isBreak());
1234:       assertFalse(node0.isGetProp());
1235:       assertFalse(node0.isReturn());
1236:       assertFalse(node0.isTypeOf());
1237:       assertFalse(node0.isDec());
1238:       assertFalse(node0.hasChildren());
1239:       assertFalse(node0.isComma());
1240:       assertFalse(node1.isDefaultCase());
1241:       assertFalse(node1.isRegExp());
1242:       assertFalse(node1.isFunction());
1243:       assertFalse(node1.isCatch());
1244:       assertFalse(node1.isArrayLit());
1245:       assertFalse(node1.isVoid());
1246:       assertFalse(node1.isTrue());
1247:       assertFalse(node1.isParamList());
1248:       assertFalse(node1.isDebugger());
1249:       assertFalse(node1.isNull());
1250:       assertFalse(node1.isGetterDef());
1251:       assertFalse(node1.isDelProp());
1252:       assertFalse(node1.isIf());
1253:       assertFalse(node1.isName());
1254:       assertFalse(node1.isCall());
1255:       assertFalse(node1.isTry());
1256:       assertTrue(node1.isNumber());
1257:       assertFalse(node1.isBlock());
1258:       assertFalse(node1.isFor());
1259:       assertFalse(node1.isWhile());
1260:       assertFalse(node1.isString());
1261:       assertEquals(39, node1.getType());
1262:       assertFalse(node1.isContinue());
1263:       assertFalse(node1.isInc());
1264:       assertFalse(node1.hasMoreThanOneChild());
1265:       assertEquals((-1), node1.getLineno());
1266:       assertFalse(node1.isIn());
1267:       assertFalse(node1.isNE());
1268:       assertFalse(node1.isSetterDef());
1269:       assertFalse(node1.isFalse());
1270:       assertFalse(node1.isCast());
1271:       assertFalse(node1.isThrow());
1272:       assertFalse(node1.isWith());
1273:       assertFalse(node1.isNot());
1274:       assertFalse(node1.isExprResult());
1275:       assertFalse(node1.isObjectLit());
1276:       assertFalse(node1.isScript());
1277:       assertFalse(node1.isInstanceOf());
1278:       assertFalse(node1.isAnd());
1279:       assertFalse(node1.isBreak());
1280:       assertFalse(node1.hasChildren());
1281:       assertEquals((-1), node1.getSourcePosition());
1282:       assertFalse(node1.isTypeOf());
1283:       assertFalse(node1.isComma());
1284:       assertFalse(node1.isDec());
1285:       assertFalse(node1.isAssign());
1286:       assertFalse(node1.isGetProp());
1287:       assertFalse(node1.isGetElem());
1288:       assertFalse(node1.isReturn());
1289:       assertFalse(node1.isHook());
1290:       assertFalse(node1.hasOneChild());
1291:       assertFalse(node1.isThis());
1292:       assertFalse(node1.isCase());
1293:       assertFalse(node1.isDo());
1294:       assertFalse(node1.isAdd());
1295:       assertFalse(node1.isOr());
1296:       assertEquals((-1), node1.getCharno());
1297:       assertFalse(node1.isSwitch());
1298:       assertFalse(node1.isStringKey());
1299:       assertFalse(node1.isLabelName());
1300:       assertFalse(node1.isEmpty());
1301:       assertFalse(node1.isAssignAdd());
1302:       assertFalse(node1.isLabel());
1303:       assertFalse(node1.isNew());
1304:       assertEquals(0, node1.getChildCount());
1305:       assertFalse(node1.isVar());
1306:       assertFalse(node5.hasMoreThanOneChild());
1307:       assertFalse(node5.isContinue());
1308:       assertEquals((-1), node5.getLineno());
1309:       assertFalse(node5.isWhile());
1310:       assertFalse(node5.isAssignAdd());
1311:       assertFalse(node5.isDo());
1312:       assertFalse(node5.isAdd());
1313:       assertFalse(node5.isNumber());
1314:       assertEquals((-1), node5.getSourcePosition());
1315:       assertFalse(node5.isOr());
1316:       assertFalse(node5.isCast());
1317:       assertFalse(node5.isStringKey());
1318:       assertFalse(node5.isVar());
1319:       assertFalse(node5.isNew());
1320:       assertFalse(node5.isLabelName());
1321:       assertFalse(node5.isLabel());
1322:       assertEquals(0, node5.getChildCount());
1323:       assertFalse(node5.isCatch());
1324:       assertEquals(40, node5.getType());
1325:       assertFalse(node5.isInstanceOf());
1326:       assertFalse(node5.isSetterDef());
1327:       assertFalse(node5.isParamList());
1328:       assertFalse(node5.isScript());
1329:       assertFalse(node5.isHook());
1330:       assertFalse(node5.isFor());
1331:       assertFalse(node5.isIf());
1332:       assertFalse(node5.hasOneChild());
1333:       assertFalse(node5.isTry());
1334:       assertTrue(node5.isString());
1335:       assertFalse(node5.isThis());
1336:       assertFalse(node5.isBlock());
1337:       assertFalse(node5.isWith());
1338:       assertFalse(node5.isRegExp());
1339:       assertFalse(node5.isCase());
1340:       assertFalse(node5.isSwitch());
1341:       assertFalse(node5.isInc());
1342:       assertEquals((-1), node5.getCharno());
1343:       assertFalse(node5.isNE());
1344:       assertFalse(node5.isIn());
1345:       assertFalse(node5.isGetterDef());
1346:       assertFalse(node5.isArrayLit());
1347:       assertFalse(node5.isThrow());
1348:       assertFalse(node5.isEmpty());
1349:       assertFalse(node5.isFunction());
1350:       assertFalse(node5.isFalse());
1351:       assertFalse(node5.isAnd());
1352:       assertFalse(node5.isDefaultCase());
1353:       assertFalse(node5.isDebugger());
1354:       assertFalse(node5.isGetProp());
1355:       assertFalse(node5.isNull());
1356:       assertFalse(node5.isTrue());
1357:       assertFalse(node5.isNot());
1358:       assertFalse(node5.isObjectLit());
1359:       assertFalse(node5.isGetElem());
1360:       assertFalse(node5.isCall());
1361:       assertFalse(node5.isBreak());
1362:       assertFalse(node5.isName());
1363:       assertFalse(node5.isDelProp());
1364:       assertFalse(node5.isVoid());
1365:       assertFalse(node5.isComma());
1366:       assertFalse(node5.isExprResult());
1367:       assertFalse(node5.isReturn());
1368:       assertFalse(node5.hasChildren());
1369:       assertFalse(node5.isDec());
1370:       assertFalse(node5.isAssign());
1371:       assertFalse(node5.isTypeOf());
1372:       
1373:       Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
1374:       assertNotNull(node_NodeMismatch0);
1375:       assertSame(node0, node5);
1376:       assertNotSame(node0, node4);
1377:       assertFalse(node0.equals((Object)node1));
1378:       assertFalse(node0.equals((Object)node3));
1379:       assertFalse(node0.equals((Object)node4));
1380:       assertFalse(node0.equals((Object)node2));
1381:       assertFalse(node2.equals((Object)node5));
1382:       assertFalse(node2.equals((Object)node3));
1383:       assertFalse(node2.equals((Object)node0));
1384:       assertFalse(node2.equals((Object)node1));
1385:       assertFalse(node2.equals((Object)node4));
1386:       assertFalse(node0.isDo());
1387:       assertFalse(node0.isContinue());
1388:       assertFalse(node0.isWhile());
1389:       assertFalse(node0.isNew());
1390:       assertEquals((-1), node0.getLineno());
1391:       assertFalse(node0.isOr());
1392:       assertFalse(node0.isAdd());
1393:       assertEquals((-1), node0.getSourcePosition());
1394:       assertFalse(node0.isLabelName());
1395:       assertFalse(node0.isStringKey());
1396:       assertFalse(node0.isSetterDef());
1397:       assertFalse(node0.isCast());
1398:       assertFalse(node0.isAssignAdd());
1399:       assertFalse(node0.isLabel());
1400:       assertFalse(node0.isVar());
1401:       assertEquals(0, node0.getChildCount());
1402:       assertFalse(node0.isWith());
1403:       assertEquals(40, node0.getType());
1404:       assertFalse(node0.isCatch());
1405:       assertFalse(node0.isScript());
1406:       assertFalse(node0.isParamList());
1407:       assertFalse(node0.isFor());
1408:       assertFalse(node0.isGetterDef());
1409:       assertFalse(node0.isIf());
1410:       assertFalse(node0.isNumber());
1411:       assertFalse(node0.hasOneChild());
1412:       assertFalse(node0.isTry());
1413:       assertFalse(node0.isBlock());
1414:       assertTrue(node0.isString());
1415:       assertFalse(node0.isInstanceOf());
1416:       assertFalse(node0.hasMoreThanOneChild());
1417:       assertFalse(node0.isRegExp());
1418:       assertFalse(node0.isThis());
1419:       assertFalse(node0.isHook());
1420:       assertFalse(node0.isSwitch());
1421:       assertFalse(node0.isInc());
1422:       assertFalse(node0.isCase());
1423:       assertFalse(node0.isIn());
1424:       assertFalse(node0.isNE());
1425:       assertEquals((-1), node0.getCharno());
1426:       assertFalse(node0.isEmpty());
1427:       assertFalse(node0.isThrow());
1428:       assertFalse(node0.isFalse());
1429:       assertFalse(node0.isArrayLit());
1430:       assertFalse(node0.isFunction());
1431:       assertFalse(node0.isNot());
1432:       assertFalse(node0.isDefaultCase());
1433:       assertFalse(node0.isAnd());
1434:       assertFalse(node0.isExprResult());
1435:       assertFalse(node0.isVoid());
1436:       assertFalse(node0.isNull());
1437:       assertFalse(node0.isTrue());
1438:       assertFalse(node0.isObjectLit());
1439:       assertFalse(node0.isDebugger());
1440:       assertFalse(node0.isAssign());
1441:       assertFalse(node0.isName());
1442:       assertFalse(node0.isGetElem());
1443:       assertFalse(node0.isDelProp());
1444:       assertFalse(node0.isCall());
1445:       assertFalse(node0.isBreak());
1446:       assertFalse(node0.isGetProp());
1447:       assertFalse(node0.isReturn());
1448:       assertFalse(node0.isTypeOf());
1449:       assertFalse(node0.isDec());
1450:       assertFalse(node0.hasChildren());
1451:       assertFalse(node0.isComma());
1452:       assertFalse(node2.isCase());
1453:       assertFalse(node2.isString());
1454:       assertFalse(node2.isIn());
1455:       assertFalse(node2.isInc());
1456:       assertEquals(1, node2.getChildCount());
1457:       assertFalse(node2.isHook());
1458:       assertFalse(node2.isFalse());
1459:       assertFalse(node2.isThrow());
1460:       assertFalse(node2.isGetterDef());
1461:       assertFalse(node2.isDebugger());
1462:       assertEquals((-1), node2.getCharno());
1463:       assertFalse(node2.isArrayLit());
1464:       assertFalse(node2.isAnd());
1465:       assertFalse(node2.isSwitch());
1466:       assertFalse(node2.isNot());
1467:       assertFalse(node2.isObjectLit());
1468:       assertEquals(657, node2.getType());
1469:       assertFalse(node2.isComma());
1470:       assertFalse(node2.isGetProp());
1471:       assertFalse(node2.isDefaultCase());
1472:       assertFalse(node2.isName());
1473:       assertFalse(node2.isGetElem());
1474:       assertFalse(node2.isEmpty());
1475:       assertFalse(node2.isAssign());
1476:       assertFalse(node2.isCall());
1477:       assertTrue(node2.hasOneChild());
1478:       assertFalse(node2.isBreak());
1479:       assertFalse(node2.isDec());
1480:       assertFalse(node2.isTypeOf());
1481:       assertFalse(node2.isOr());
1482:       assertFalse(node2.isVoid());
1483:       assertFalse(node2.isTrue());
1484:       assertFalse(node2.isExprResult());
1485:       assertFalse(node2.isNull());
1486:       assertFalse(node2.isDelProp());
1487:       assertFalse(node2.isDo());
1488:       assertFalse(node2.isContinue());
1489:       assertFalse(node2.hasMoreThanOneChild());
1490:       assertFalse(node2.isNew());
1491:       assertFalse(node2.isBlock());
1492:       assertFalse(node2.isAdd());
1493:       assertFalse(node2.isReturn());
1494:       assertFalse(node2.isLabel());
1495:       assertFalse(node2.isVar());
1496:       assertFalse(node2.isWhile());
1497:       assertFalse(node2.isAssignAdd());
1498:       assertFalse(node2.isStringKey());
1499:       assertFalse(node2.isLabelName());
1500:       assertFalse(node2.isNumber());
1501:       assertEquals((-1), node2.getSourcePosition());
1502:       assertFalse(node2.isCast());
1503:       assertFalse(node2.isParamList());
1504:       assertFalse(node2.isRegExp());
1505:       assertFalse(node2.isInstanceOf());
1506:       assertFalse(node2.isCatch());
1507:       assertFalse(node2.isScript());
1508:       assertFalse(node2.isFunction());
1509:       assertFalse(node2.isWith());
1510:       assertFalse(node2.isTry());
1511:       assertFalse(node2.isSetterDef());
1512:       assertFalse(node2.isThis());
1513:       assertFalse(node2.isFor());
1514:       assertTrue(node2.hasChildren());
1515:       assertEquals((-1), node2.getLineno());
1516:       assertFalse(node2.isNE());
1517:       assertFalse(node2.isIf());
1518:       
1519:       int int1 = node5.getIndexOfChild(node0);
1520:       assertSame(node0, node5);
1521:       assertNotSame(node0, node4);
1522:       assertSame(node1, node3);
1523:       assertNotSame(node5, node4);
1524:       assertSame(node5, node0);
1525:       assertEquals((-1), int1);
1526:       assertFalse(int1 == int0);
1527:       assertFalse(node0.equals((Object)node1));
1528:       assertFalse(node0.equals((Object)node3));
1529:       assertFalse(node0.equals((Object)node4));
1530:       assertFalse(node0.equals((Object)node2));
1531:       assertFalse(node1.equals((Object)node2));
1532:       assertFalse(node1.equals((Object)node4));
1533:       assertFalse(node1.equals((Object)node5));
1534:       assertFalse(node1.equals((Object)node0));
1535:       assertFalse(node5.equals((Object)node2));
1536:       assertFalse(node5.equals((Object)node4));
1537:       assertFalse(node5.equals((Object)node1));
1538:       assertFalse(node5.equals((Object)node3));
1539:       assertFalse(node0.isDo());
1540:       assertFalse(node0.isContinue());
1541:       assertFalse(node0.isWhile());
1542:       assertFalse(node0.isNew());
1543:       assertEquals((-1), node0.getLineno());
1544:       assertFalse(node0.isOr());
1545:       assertFalse(node0.isAdd());
1546:       assertEquals((-1), node0.getSourcePosition());
1547:       assertFalse(node0.isLabelName());
1548:       assertFalse(node0.isStringKey());
1549:       assertFalse(node0.isSetterDef());
1550:       assertFalse(node0.isCast());
1551:       assertFalse(node0.isAssignAdd());
1552:       assertFalse(node0.isLabel());
1553:       assertFalse(node0.isVar());
1554:       assertEquals(0, node0.getChildCount());
1555:       assertFalse(node0.isWith());
1556:       assertEquals(40, node0.getType());
1557:       assertFalse(node0.isCatch());
1558:       assertFalse(node0.isScript());
1559:       assertFalse(node0.isParamList());
1560:       assertFalse(node0.isFor());
1561:       assertFalse(node0.isGetterDef());
1562:       assertFalse(node0.isIf());
1563:       assertFalse(node0.isNumber());
1564:       assertFalse(node0.hasOneChild());
1565:       assertFalse(node0.isTry());
1566:       assertFalse(node0.isBlock());
1567:       assertTrue(node0.isString());
1568:       assertFalse(node0.isInstanceOf());
1569:       assertFalse(node0.hasMoreThanOneChild());
1570:       assertFalse(node0.isRegExp());
1571:       assertFalse(node0.isThis());
1572:       assertFalse(node0.isHook());
1573:       assertFalse(node0.isSwitch());
1574:       assertFalse(node0.isInc());
1575:       assertFalse(node0.isCase());
1576:       assertFalse(node0.isIn());
1577:       assertFalse(node0.isNE());
1578:       assertEquals((-1), node0.getCharno());
1579:       assertFalse(node0.isEmpty());
1580:       assertFalse(node0.isThrow());
1581:       assertFalse(node0.isFalse());
1582:       assertFalse(node0.isArrayLit());
1583:       assertFalse(node0.isFunction());
1584:       assertFalse(node0.isNot());
1585:       assertFalse(node0.isDefaultCase());
1586:       assertFalse(node0.isAnd());
1587:       assertFalse(node0.isExprResult());
1588:       assertFalse(node0.isVoid());
1589:       assertFalse(node0.isNull());
1590:       assertFalse(node0.isTrue());
1591:       assertFalse(node0.isObjectLit());
1592:       assertFalse(node0.isDebugger());
1593:       assertFalse(node0.isAssign());
1594:       assertFalse(node0.isName());
1595:       assertFalse(node0.isGetElem());
1596:       assertFalse(node0.isDelProp());
1597:       assertFalse(node0.isCall());
1598:       assertFalse(node0.isBreak());
1599:       assertFalse(node0.isGetProp());
1600:       assertFalse(node0.isReturn());
1601:       assertFalse(node0.isTypeOf());
1602:       assertFalse(node0.isDec());
1603:       assertFalse(node0.hasChildren());
1604:       assertFalse(node0.isComma());
1605:       assertFalse(node1.isDefaultCase());
1606:       assertFalse(node1.isRegExp());
1607:       assertFalse(node1.isFunction());
1608:       assertFalse(node1.isCatch());
1609:       assertFalse(node1.isArrayLit());
1610:       assertFalse(node1.isVoid());
1611:       assertFalse(node1.isTrue());
1612:       assertFalse(node1.isParamList());
1613:       assertFalse(node1.isDebugger());
1614:       assertFalse(node1.isNull());
1615:       assertFalse(node1.isGetterDef());
1616:       assertFalse(node1.isDelProp());
1617:       assertFalse(node1.isIf());
1618:       assertFalse(node1.isName());
1619:       assertFalse(node1.isCall());
1620:       assertFalse(node1.isTry());
1621:       assertTrue(node1.isNumber());
1622:       assertFalse(node1.isBlock());
1623:       assertFalse(node1.isFor());
1624:       assertFalse(node1.isWhile());
1625:       assertFalse(node1.isString());
1626:       assertEquals(39, node1.getType());
1627:       assertFalse(node1.isContinue());
1628:       assertFalse(node1.isInc());
1629:       assertFalse(node1.hasMoreThanOneChild());
1630:       assertEquals((-1), node1.getLineno());
1631:       assertFalse(node1.isIn());
1632:       assertFalse(node1.isNE());
1633:       assertFalse(node1.isSetterDef());
1634:       assertFalse(node1.isFalse());
1635:       assertFalse(node1.isCast());
1636:       assertFalse(node1.isThrow());
1637:       assertFalse(node1.isWith());
1638:       assertFalse(node1.isNot());
1639:       assertFalse(node1.isExprResult());
1640:       assertFalse(node1.isObjectLit());
1641:       assertFalse(node1.isScript());
1642:       assertFalse(node1.isInstanceOf());
1643:       assertFalse(node1.isAnd());
1644:       assertFalse(node1.isBreak());
1645:       assertFalse(node1.hasChildren());
1646:       assertEquals((-1), node1.getSourcePosition());
1647:       assertFalse(node1.isTypeOf());
1648:       assertFalse(node1.isComma());
1649:       assertFalse(node1.isDec());
1650:       assertFalse(node1.isAssign());
1651:       assertFalse(node1.isGetProp());
1652:       assertFalse(node1.isGetElem());
1653:       assertFalse(node1.isReturn());
1654:       assertFalse(node1.isHook());
1655:       assertFalse(node1.hasOneChild());
1656:       assertFalse(node1.isThis());
1657:       assertFalse(node1.isCase());
1658:       assertFalse(node1.isDo());
1659:       assertFalse(node1.isAdd());
1660:       assertFalse(node1.isOr());
1661:       assertEquals((-1), node1.getCharno());
1662:       assertFalse(node1.isSwitch());
1663:       assertFalse(node1.isStringKey());
1664:       assertFalse(node1.isLabelName());
1665:       assertFalse(node1.isEmpty());
1666:       assertFalse(node1.isAssignAdd());
1667:       assertFalse(node1.isLabel());
1668:       assertFalse(node1.isNew());
1669:       assertEquals(0, node1.getChildCount());
1670:       assertFalse(node1.isVar());
1671:       assertFalse(node5.hasMoreThanOneChild());
1672:       assertFalse(node5.isContinue());
1673:       assertEquals((-1), node5.getLineno());
1674:       assertFalse(node5.isWhile());
1675:       assertFalse(node5.isAssignAdd());
1676:       assertFalse(node5.isDo());
1677:       assertFalse(node5.isAdd());
1678:       assertFalse(node5.isNumber());
1679:       assertEquals((-1), node5.getSourcePosition());
1680:       assertFalse(node5.isOr());
1681:       assertFalse(node5.isCast());
1682:       assertFalse(node5.isStringKey());
1683:       assertFalse(node5.isVar());
1684:       assertFalse(node5.isNew());
1685:       assertFalse(node5.isLabelName());
1686:       assertFalse(node5.isLabel());
1687:       assertEquals(0, node5.getChildCount());
1688:       assertFalse(node5.isCatch());
1689:       assertEquals(40, node5.getType());
1690:       assertFalse(node5.isInstanceOf());
1691:       assertFalse(node5.isSetterDef());
1692:       assertFalse(node5.isParamList());
1693:       assertFalse(node5.isScript());
1694:       assertFalse(node5.isHook());
1695:       assertFalse(node5.isFor());
1696:       assertFalse(node5.isIf());
1697:       assertFalse(node5.hasOneChild());
1698:       assertFalse(node5.isTry());
1699:       assertTrue(node5.isString());
1700:       assertFalse(node5.isThis());
1701:       assertFalse(node5.isBlock());
1702:       assertFalse(node5.isWith());
1703:       assertFalse(node5.isRegExp());
1704:       assertFalse(node5.isCase());
1705:       assertFalse(node5.isSwitch());
1706:       assertFalse(node5.isInc());
1707:       assertEquals((-1), node5.getCharno());
1708:       assertFalse(node5.isNE());
1709:       assertFalse(node5.isIn());
1710:       assertFalse(node5.isGetterDef());
1711:       assertFalse(node5.isArrayLit());
1712:       assertFalse(node5.isThrow());
1713:       assertFalse(node5.isEmpty());
1714:       assertFalse(node5.isFunction());
1715:       assertFalse(node5.isFalse());
1716:       assertFalse(node5.isAnd());
1717:       assertFalse(node5.isDefaultCase());
1718:       assertFalse(node5.isDebugger());
1719:       assertFalse(node5.isGetProp());
1720:       assertFalse(node5.isNull());
1721:       assertFalse(node5.isTrue());
1722:       assertFalse(node5.isNot());
1723:       assertFalse(node5.isObjectLit());
1724:       assertFalse(node5.isGetElem());
1725:       assertFalse(node5.isCall());
1726:       assertFalse(node5.isBreak());
1727:       assertFalse(node5.isName());
1728:       assertFalse(node5.isDelProp());
1729:       assertFalse(node5.isVoid());
1730:       assertFalse(node5.isComma());
1731:       assertFalse(node5.isExprResult());
1732:       assertFalse(node5.isReturn());
1733:       assertFalse(node5.hasChildren());
1734:       assertFalse(node5.isDec());
1735:       assertFalse(node5.isAssign());
1736:       assertFalse(node5.isTypeOf());
1737:       
1738:       Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
1739:       assertNotNull(node_SideEffectFlags1);
1740:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
1741:       assertEquals(0, node_SideEffectFlags1.valueOf());
1742:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1743:       
1744:       Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
1745:       assertNotNull(node_SideEffectFlags2);
1746:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
1747:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
1748:       assertEquals(0, node_SideEffectFlags2.valueOf());
1749:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1750:       
1751:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
1752:       assertNotNull(node_SideEffectFlags3);
1753:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
1754:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
1755:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1756:       assertNotSame(node_SideEffectFlags3, node_SideEffectFlags0);
1757:       assertNotSame(node_SideEffectFlags3, node_SideEffectFlags1);
1758:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1759:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
1760:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
1761:       assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags0));
1762:       assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags1));
1763:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1764:       assertEquals(31, node_SideEffectFlags2.valueOf());
1765:       assertEquals(31, node_SideEffectFlags3.valueOf());
1766:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1767:       
1768:       boolean boolean3 = node1.hasChildren();
1769:       assertSame(node1, node3);
1770:       assertFalse(boolean3);
1771:       assertTrue(boolean3 == boolean2);
1772:       assertTrue(boolean3 == boolean1);
1773:       assertTrue(boolean3 == boolean0);
1774:       assertFalse(node1.equals((Object)node2));
1775:       assertFalse(node1.equals((Object)node4));
1776:       assertFalse(node1.equals((Object)node5));
1777:       assertFalse(node1.equals((Object)node0));
1778:       assertFalse(node1.isDefaultCase());
1779:       assertFalse(node1.isRegExp());
1780:       assertFalse(node1.isFunction());
1781:       assertFalse(node1.isCatch());
1782:       assertFalse(node1.isArrayLit());
1783:       assertFalse(node1.isVoid());
1784:       assertFalse(node1.isTrue());
1785:       assertFalse(node1.isParamList());
1786:       assertFalse(node1.isDebugger());
1787:       assertFalse(node1.isNull());
1788:       assertFalse(node1.isGetterDef());
1789:       assertFalse(node1.isDelProp());
1790:       assertFalse(node1.isIf());
1791:       assertFalse(node1.isName());
1792:       assertFalse(node1.isCall());
1793:       assertFalse(node1.isTry());
1794:       assertTrue(node1.isNumber());
1795:       assertFalse(node1.isBlock());
1796:       assertFalse(node1.isFor());
1797:       assertFalse(node1.isWhile());
1798:       assertFalse(node1.isString());
1799:       assertEquals(39, node1.getType());
1800:       assertFalse(node1.isContinue());
1801:       assertFalse(node1.isInc());
1802:       assertFalse(node1.hasMoreThanOneChild());
1803:       assertEquals((-1), node1.getLineno());
1804:       assertFalse(node1.isIn());
1805:       assertFalse(node1.isNE());
1806:       assertFalse(node1.isSetterDef());
1807:       assertFalse(node1.isFalse());
1808:       assertFalse(node1.isCast());
1809:       assertFalse(node1.isThrow());
1810:       assertFalse(node1.isWith());
1811:       assertFalse(node1.isNot());
1812:       assertFalse(node1.isExprResult());
1813:       assertFalse(node1.isObjectLit());
1814:       assertFalse(node1.isScript());
1815:       assertFalse(node1.isInstanceOf());
1816:       assertFalse(node1.isAnd());
1817:       assertFalse(node1.isBreak());
1818:       assertFalse(node1.hasChildren());
1819:       assertEquals((-1), node1.getSourcePosition());
1820:       assertFalse(node1.isTypeOf());
1821:       assertFalse(node1.isComma());
1822:       assertFalse(node1.isDec());
1823:       assertFalse(node1.isAssign());
1824:       assertFalse(node1.isGetProp());
1825:       assertFalse(node1.isGetElem());
1826:       assertFalse(node1.isReturn());
1827:       assertFalse(node1.isHook());
1828:       assertFalse(node1.hasOneChild());
1829:       assertFalse(node1.isThis());
1830:       assertFalse(node1.isCase());
1831:       assertFalse(node1.isDo());
1832:       assertFalse(node1.isAdd());
1833:       assertFalse(node1.isOr());
1834:       assertEquals((-1), node1.getCharno());
1835:       assertFalse(node1.isSwitch());
1836:       assertFalse(node1.isStringKey());
1837:       assertFalse(node1.isLabelName());
1838:       assertFalse(node1.isEmpty());
1839:       assertFalse(node1.isAssignAdd());
1840:       assertFalse(node1.isLabel());
1841:       assertFalse(node1.isNew());
1842:       assertEquals(0, node1.getChildCount());
1843:       assertFalse(node1.isVar());
1844:       
1845:       node_SideEffectFlags3.clearSideEffectFlags();
1846:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
1847:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
1848:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1849:       assertNotSame(node_SideEffectFlags3, node_SideEffectFlags0);
1850:       assertNotSame(node_SideEffectFlags3, node_SideEffectFlags1);
1851:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1852:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
1853:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
1854:       assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags0));
1855:       assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags1));
1856:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1857:       assertEquals(31, node_SideEffectFlags2.valueOf());
1858:       assertEquals(31, node_SideEffectFlags3.valueOf());
1859:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1860:       
1861:       String string1 = node0.checkTreeEquals(node5);
1862:       assertNull(string1);
1863:       assertSame(node0, node5);
1864:       assertNotSame(node0, node4);
1865:       assertSame(node1, node3);
1866:       assertNotSame(node5, node4);
1867:       assertSame(node5, node0);
1868:       assertFalse(node0.equals((Object)node1));
1869:       assertFalse(node0.equals((Object)node3));
1870:       assertFalse(node0.equals((Object)node4));
1871:       assertFalse(node0.equals((Object)node2));
1872:       assertFalse(node1.equals((Object)node2));
1873:       assertFalse(node1.equals((Object)node4));
1874:       assertFalse(node1.equals((Object)node5));
1875:       assertFalse(node1.equals((Object)node0));
1876:       assertFalse(node5.equals((Object)node2));
1877:       assertFalse(node5.equals((Object)node4));
1878:       assertFalse(node5.equals((Object)node1));
1879:       assertFalse(node5.equals((Object)node3));
1880:       assertFalse(node0.isDo());
1881:       assertFalse(node0.isContinue());
1882:       assertFalse(node0.isWhile());
1883:       assertFalse(node0.isNew());
1884:       assertEquals((-1), node0.getLineno());
1885:       assertFalse(node0.isOr());
1886:       assertFalse(node0.isAdd());
1887:       assertEquals((-1), node0.getSourcePosition());
1888:       assertFalse(node0.isLabelName());
1889:       assertFalse(node0.isStringKey());
1890:       assertFalse(node0.isSetterDef());
1891:       assertFalse(node0.isCast());
1892:       assertFalse(node0.isAssignAdd());
1893:       assertFalse(node0.isLabel());
1894:       assertFalse(node0.isVar());
1895:       assertEquals(0, node0.getChildCount());
1896:       assertFalse(node0.isWith());
1897:       assertEquals(40, node0.getType());
1898:       assertFalse(node0.isCatch());
1899:       assertFalse(node0.isScript());
1900:       assertFalse(node0.isParamList());
1901:       assertFalse(node0.isFor());
1902:       assertFalse(node0.isGetterDef());
1903:       assertFalse(node0.isIf());
1904:       assertFalse(node0.isNumber());
1905:       assertFalse(node0.hasOneChild());
1906:       assertFalse(node0.isTry());
1907:       assertFalse(node0.isBlock());
1908:       assertTrue(node0.isString());
1909:       assertFalse(node0.isInstanceOf());
1910:       assertFalse(node0.hasMoreThanOneChild());
1911:       assertFalse(node0.isRegExp());
1912:       assertFalse(node0.isThis());
1913:       assertFalse(node0.isHook());
1914:       assertFalse(node0.isSwitch());
1915:       assertFalse(node0.isInc());
1916:       assertFalse(node0.isCase());
1917:       assertFalse(node0.isIn());
1918:       assertFalse(node0.isNE());
1919:       assertEquals((-1), node0.getCharno());
1920:       assertFalse(node0.isEmpty());
1921:       assertFalse(node0.isThrow());
1922:       assertFalse(node0.isFalse());
1923:       assertFalse(node0.isArrayLit());
1924:       assertFalse(node0.isFunction());
1925:       assertFalse(node0.isNot());
1926:       assertFalse(node0.isDefaultCase());
1927:       assertFalse(node0.isAnd());
1928:       assertFalse(node0.isExprResult());
1929:       assertFalse(node0.isVoid());
1930:       assertFalse(node0.isNull());
1931:       assertFalse(node0.isTrue());
1932:       assertFalse(node0.isObjectLit());
1933:       assertFalse(node0.isDebugger());
1934:       assertFalse(node0.isAssign());
1935:       assertFalse(node0.isName());
1936:       assertFalse(node0.isGetElem());
1937:       assertFalse(node0.isDelProp());
1938:       assertFalse(node0.isCall());
1939:       assertFalse(node0.isBreak());
1940:       assertFalse(node0.isGetProp());
1941:       assertFalse(node0.isReturn());
1942:       assertFalse(node0.isTypeOf());
1943:       assertFalse(node0.isDec());
1944:       assertFalse(node0.hasChildren());
1945:       assertFalse(node0.isComma());
1946:       assertFalse(node1.isDefaultCase());
1947:       assertFalse(node1.isRegExp());
1948:       assertFalse(node1.isFunction());
1949:       assertFalse(node1.isCatch());
1950:       assertFalse(node1.isArrayLit());
1951:       assertFalse(node1.isVoid());
1952:       assertFalse(node1.isTrue());
1953:       assertFalse(node1.isParamList());
1954:       assertFalse(node1.isDebugger());
1955:       assertFalse(node1.isNull());
1956:       assertFalse(node1.isGetterDef());
1957:       assertFalse(node1.isDelProp());
1958:       assertFalse(node1.isIf());
1959:       assertFalse(node1.isName());
1960:       assertFalse(node1.isCall());
1961:       assertFalse(node1.isTry());
1962:       assertTrue(node1.isNumber());
1963:       assertFalse(node1.isBlock());
1964:       assertFalse(node1.isFor());
1965:       assertFalse(node1.isWhile());
1966:       assertFalse(node1.isString());
1967:       assertEquals(39, node1.getType());
1968:       assertFalse(node1.isContinue());
1969:       assertFalse(node1.isInc());
1970:       assertFalse(node1.hasMoreThanOneChild());
1971:       assertEquals((-1), node1.getLineno());
1972:       assertFalse(node1.isIn());
1973:       assertFalse(node1.isNE());
1974:       assertFalse(node1.isSetterDef());
1975:       assertFalse(node1.isFalse());
1976:       assertFalse(node1.isCast());
1977:       assertFalse(node1.isThrow());
1978:       assertFalse(node1.isWith());
1979:       assertFalse(node1.isNot());
1980:       assertFalse(node1.isExprResult());
1981:       assertFalse(node1.isObjectLit());
1982:       assertFalse(node1.isScript());
1983:       assertFalse(node1.isInstanceOf());
1984:       assertFalse(node1.isAnd());
1985:       assertFalse(node1.isBreak());
1986:       assertFalse(node1.hasChildren());
1987:       assertEquals((-1), node1.getSourcePosition());
1988:       assertFalse(node1.isTypeOf());
1989:       assertFalse(node1.isComma());
1990:       assertFalse(node1.isDec());
1991:       assertFalse(node1.isAssign());
1992:       assertFalse(node1.isGetProp());
1993:       assertFalse(node1.isGetElem());
1994:       assertFalse(node1.isReturn());
1995:       assertFalse(node1.isHook());
1996:       assertFalse(node1.hasOneChild());
1997:       assertFalse(node1.isThis());
1998:       assertFalse(node1.isCase());
1999:       assertFalse(node1.isDo());
2000:       assertFalse(node1.isAdd());
2001:       assertFalse(node1.isOr());
2002:       assertEquals((-1), node1.getCharno());
2003:       assertFalse(node1.isSwitch());
2004:       assertFalse(node1.isStringKey());
2005:       assertFalse(node1.isLabelName());
2006:       assertFalse(node1.isEmpty());
2007:       assertFalse(node1.isAssignAdd());
2008:       assertFalse(node1.isLabel());
2009:       assertFalse(node1.isNew());
2010:       assertEquals(0, node1.getChildCount());
2011:       assertFalse(node1.isVar());
2012:       assertFalse(node5.hasMoreThanOneChild());
2013:       assertFalse(node5.isContinue());
2014:       assertEquals((-1), node5.getLineno());
2015:       assertFalse(node5.isWhile());
2016:       assertFalse(node5.isAssignAdd());
2017:       assertFalse(node5.isDo());
2018:       assertFalse(node5.isAdd());
2019:       assertFalse(node5.isNumber());
2020:       assertEquals((-1), node5.getSourcePosition());
2021:       assertFalse(node5.isOr());
2022:       assertFalse(node5.isCast());
2023:       assertFalse(node5.isStringKey());
2024:       assertFalse(node5.isVar());
2025:       assertFalse(node5.isNew());
2026:       assertFalse(node5.isLabelName());
2027:       assertFalse(node5.isLabel());
2028:       assertEquals(0, node5.getChildCount());
2029:       assertFalse(node5.isCatch());
2030:       assertEquals(40, node5.getType());
2031:       assertFalse(node5.isInstanceOf());
2032:       assertFalse(node5.isSetterDef());
2033:       assertFalse(node5.isParamList());
2034:       assertFalse(node5.isScript());
2035:       assertFalse(node5.isHook());
2036:       assertFalse(node5.isFor());
2037:       assertFalse(node5.isIf());
2038:       assertFalse(node5.hasOneChild());
2039:       assertFalse(node5.isTry());
2040:       assertTrue(node5.isString());
2041:       assertFalse(node5.isThis());
2042:       assertFalse(node5.isBlock());
2043:       assertFalse(node5.isWith());
2044:       assertFalse(node5.isRegExp());
2045:       assertFalse(node5.isCase());
2046:       assertFalse(node5.isSwitch());
2047:       assertFalse(node5.isInc());
2048:       assertEquals((-1), node5.getCharno());
2049:       assertFalse(node5.isNE());
2050:       assertFalse(node5.isIn());
2051:       assertFalse(node5.isGetterDef());
2052:       assertFalse(node5.isArrayLit());
2053:       assertFalse(node5.isThrow());
2054:       assertFalse(node5.isEmpty());
2055:       assertFalse(node5.isFunction());
2056:       assertFalse(node5.isFalse());
2057:       assertFalse(node5.isAnd());
2058:       assertFalse(node5.isDefaultCase());
2059:       assertFalse(node5.isDebugger());
2060:       assertFalse(node5.isGetProp());
2061:       assertFalse(node5.isNull());
2062:       assertFalse(node5.isTrue());
2063:       assertFalse(node5.isNot());
2064:       assertFalse(node5.isObjectLit());
2065:       assertFalse(node5.isGetElem());
2066:       assertFalse(node5.isCall());
2067:       assertFalse(node5.isBreak());
2068:       assertFalse(node5.isName());
2069:       assertFalse(node5.isDelProp());
2070:       assertFalse(node5.isVoid());
2071:       assertFalse(node5.isComma());
2072:       assertFalse(node5.isExprResult());
2073:       assertFalse(node5.isReturn());
2074:       assertFalse(node5.hasChildren());
2075:       assertFalse(node5.isDec());
2076:       assertFalse(node5.isAssign());
2077:       assertFalse(node5.isTypeOf());
2078:       
2079:       Set<String> set0 = node2.getDirectives();
2080:       assertNull(set0);
2081:       assertSame(node0, node5);
2082:       assertNotSame(node0, node4);
2083:       assertFalse(node0.equals((Object)node1));
2084:       assertFalse(node0.equals((Object)node3));
2085:       assertFalse(node0.equals((Object)node4));
2086:       assertFalse(node0.equals((Object)node2));
2087:       assertFalse(node2.equals((Object)node5));
2088:       assertFalse(node2.equals((Object)node3));
2089:       assertFalse(node2.equals((Object)node0));
2090:       assertFalse(node2.equals((Object)node1));
2091:       assertFalse(node2.equals((Object)node4));
2092:       assertFalse(node0.isDo());
2093:       assertFalse(node0.isContinue());
2094:       assertFalse(node0.isWhile());
2095:       assertFalse(node0.isNew());
2096:       assertEquals((-1), node0.getLineno());
2097:       assertFalse(node0.isOr());
2098:       assertFalse(node0.isAdd());
2099:       assertEquals((-1), node0.getSourcePosition());
2100:       assertFalse(node0.isLabelName());
2101:       assertFalse(node0.isStringKey());
2102:       assertFalse(node0.isSetterDef());
2103:       assertFalse(node0.isCast());
2104:       assertFalse(node0.isAssignAdd());
2105:       assertFalse(node0.isLabel());
2106:       assertFalse(node0.isVar());
2107:       assertEquals(0, node0.getChildCount());
2108:       assertFalse(node0.isWith());
2109:       assertEquals(40, node0.getType());
2110:       assertFalse(node0.isCatch());
2111:       assertFalse(node0.isScript());
2112:       assertFalse(node0.isParamList());
2113:       assertFalse(node0.isFor());
2114:       assertFalse(node0.isGetterDef());
2115:       assertFalse(node0.isIf());
2116:       assertFalse(node0.isNumber());
2117:       assertFalse(node0.hasOneChild());
2118:       assertFalse(node0.isTry());
2119:       assertFalse(node0.isBlock());
2120:       assertTrue(node0.isString());
2121:       assertFalse(node0.isInstanceOf());
2122:       assertFalse(node0.hasMoreThanOneChild());
2123:       assertFalse(node0.isRegExp());
2124:       assertFalse(node0.isThis());
2125:       assertFalse(node0.isHook());
2126:       assertFalse(node0.isSwitch());
2127:       assertFalse(node0.isInc());
2128:       assertFalse(node0.isCase());
2129:       assertFalse(node0.isIn());
2130:       assertFalse(node0.isNE());
2131:       assertEquals((-1), node0.getCharno());
2132:       assertFalse(node0.isEmpty());
2133:       assertFalse(node0.isThrow());
2134:       assertFalse(node0.isFalse());
2135:       assertFalse(node0.isArrayLit());
2136:       assertFalse(node0.isFunction());
2137:       assertFalse(node0.isNot());
2138:       assertFalse(node0.isDefaultCase());
2139:       assertFalse(node0.isAnd());
2140:       assertFalse(node0.isExprResult());
2141:       assertFalse(node0.isVoid());
2142:       assertFalse(node0.isNull());
2143:       assertFalse(node0.isTrue());
2144:       assertFalse(node0.isObjectLit());
2145:       assertFalse(node0.isDebugger());
2146:       assertFalse(node0.isAssign());
2147:       assertFalse(node0.isName());
2148:       assertFalse(node0.isGetElem());
2149:       assertFalse(node0.isDelProp());
2150:       assertFalse(node0.isCall());
2151:       assertFalse(node0.isBreak());
2152:       assertFalse(node0.isGetProp());
2153:       assertFalse(node0.isReturn());
2154:       assertFalse(node0.isTypeOf());
2155:       assertFalse(node0.isDec());
2156:       assertFalse(node0.hasChildren());
2157:       assertFalse(node0.isComma());
2158:       assertFalse(node2.isCase());
2159:       assertFalse(node2.isString());
2160:       assertFalse(node2.isIn());
2161:       assertFalse(node2.isInc());
2162:       assertEquals(1, node2.getChildCount());
2163:       assertFalse(node2.isHook());
2164:       assertFalse(node2.isFalse());
2165:       assertFalse(node2.isThrow());
2166:       assertFalse(node2.isGetterDef());
2167:       assertFalse(node2.isDebugger());
2168:       assertEquals((-1), node2.getCharno());
2169:       assertFalse(node2.isArrayLit());
2170:       assertFalse(node2.isAnd());
2171:       assertFalse(node2.isSwitch());
2172:       assertFalse(node2.isNot());
2173:       assertFalse(node2.isObjectLit());
2174:       assertEquals(657, node2.getType());
2175:       assertFalse(node2.isComma());
2176:       assertFalse(node2.isGetProp());
2177:       assertFalse(node2.isDefaultCase());
2178:       assertFalse(node2.isName());
2179:       assertFalse(node2.isGetElem());
2180:       assertFalse(node2.isEmpty());
2181:       assertFalse(node2.isAssign());
2182:       assertFalse(node2.isCall());
2183:       assertTrue(node2.hasOneChild());
2184:       assertFalse(node2.isBreak());
2185:       assertFalse(node2.isDec());
2186:       assertFalse(node2.isTypeOf());
2187:       assertFalse(node2.isOr());
2188:       assertFalse(node2.isVoid());
2189:       assertFalse(node2.isTrue());
2190:       assertFalse(node2.isExprResult());
2191:       assertFalse(node2.isNull());
2192:       assertFalse(node2.isDelProp());
2193:       assertFalse(node2.isDo());
2194:       assertFalse(node2.isContinue());
2195:       assertFalse(node2.hasMoreThanOneChild());
2196:       assertFalse(node2.isNew());
2197:       assertFalse(node2.isBlock());
2198:       assertFalse(node2.isAdd());
2199:       assertFalse(node2.isReturn());
2200:       assertFalse(node2.isLabel());
2201:       assertFalse(node2.isVar());
2202:       assertFalse(node2.isWhile());
2203:       assertFalse(node2.isAssignAdd());
2204:       assertFalse(node2.isStringKey());
2205:       assertFalse(node2.isLabelName());
2206:       assertFalse(node2.isNumber());
2207:       assertEquals((-1), node2.getSourcePosition());
2208:       assertFalse(node2.isCast());
2209:       assertFalse(node2.isParamList());
2210:       assertFalse(node2.isRegExp());
2211:       assertFalse(node2.isInstanceOf());
2212:       assertFalse(node2.isCatch());
2213:       assertFalse(node2.isScript());
2214:       assertFalse(node2.isFunction());
2215:       assertFalse(node2.isWith());
2216:       assertFalse(node2.isTry());
2217:       assertFalse(node2.isSetterDef());
2218:       assertFalse(node2.isThis());
2219:       assertFalse(node2.isFor());
2220:       assertTrue(node2.hasChildren());
2221:       assertEquals((-1), node2.getLineno());
2222:       assertFalse(node2.isNE());
2223:       assertFalse(node2.isIf());
2224:       
2225:       node3.setWasEmptyNode(false);
2226:       assertSame(node0, node5);
2227:       assertNotSame(node0, node4);
2228:       assertSame(node1, node3);
2229:       assertSame(node3, node1);
2230:       assertFalse(node0.equals((Object)node1));
2231:       assertFalse(node0.equals((Object)node3));
2232:       assertFalse(node0.equals((Object)node4));
2233:       assertFalse(node0.equals((Object)node2));
2234:       assertFalse(node1.equals((Object)node2));
2235:       assertFalse(node1.equals((Object)node4));
2236:       assertFalse(node1.equals((Object)node5));
2237:       assertFalse(node1.equals((Object)node0));
2238:       assertFalse(node2.equals((Object)node5));
2239:       assertFalse(node2.equals((Object)node3));
2240:       assertFalse(node2.equals((Object)node0));
2241:       assertFalse(node2.equals((Object)node1));
2242:       assertFalse(node2.equals((Object)node4));
2243:       assertFalse(node3.equals((Object)node0));
2244:       assertFalse(node3.equals((Object)node2));
2245:       assertFalse(node3.equals((Object)node5));
2246:       assertFalse(node3.equals((Object)node4));
2247:       assertFalse(node0.isDo());
2248:       assertFalse(node0.isContinue());
2249:       assertFalse(node0.isWhile());
2250:       assertFalse(node0.isNew());
2251:       assertEquals((-1), node0.getLineno());
2252:       assertFalse(node0.isOr());
2253:       assertFalse(node0.isAdd());
2254:       assertEquals((-1), node0.getSourcePosition());
2255:       assertFalse(node0.isLabelName());
2256:       assertFalse(node0.isStringKey());
2257:       assertFalse(node0.isSetterDef());
2258:       assertFalse(node0.isCast());
2259:       assertFalse(node0.isAssignAdd());
2260:       assertFalse(node0.isLabel());
2261:       assertFalse(node0.isVar());
2262:       assertEquals(0, node0.getChildCount());
2263:       assertFalse(node0.isWith());
2264:       assertEquals(40, node0.getType());
2265:       assertFalse(node0.isCatch());
2266:       assertFalse(node0.isScript());
2267:       assertFalse(node0.isParamList());
2268:       assertFalse(node0.isFor());
2269:       assertFalse(node0.isGetterDef());
2270:       assertFalse(node0.isIf());
2271:       assertFalse(node0.isNumber());
2272:       assertFalse(node0.hasOneChild());
2273:       assertFalse(node0.isTry());
2274:       assertFalse(node0.isBlock());
2275:       assertTrue(node0.isString());
2276:       assertFalse(node0.isInstanceOf());
2277:       assertFalse(node0.hasMoreThanOneChild());
2278:       assertFalse(node0.isRegExp());
2279:       assertFalse(node0.isThis());
2280:       assertFalse(node0.isHook());
2281:       assertFalse(node0.isSwitch());
2282:       assertFalse(node0.isInc());
2283:       assertFalse(node0.isCase());
2284:       assertFalse(node0.isIn());
2285:       assertFalse(node0.isNE());
2286:       assertEquals((-1), node0.getCharno());
2287:       assertFalse(node0.isEmpty());
2288:       assertFalse(node0.isThrow());
2289:       assertFalse(node0.isFalse());
2290:       assertFalse(node0.isArrayLit());
2291:       assertFalse(node0.isFunction());
2292:       assertFalse(node0.isNot());
2293:       assertFalse(node0.isDefaultCase());
2294:       assertFalse(node0.isAnd());
2295:       assertFalse(node0.isExprResult());
2296:       assertFalse(node0.isVoid());
2297:       assertFalse(node0.isNull());
2298:       assertFalse(node0.isTrue());
2299:       assertFalse(node0.isObjectLit());
2300:       assertFalse(node0.isDebugger());
2301:       assertFalse(node0.isAssign());
2302:       assertFalse(node0.isName());
2303:       assertFalse(node0.isGetElem());
2304:       assertFalse(node0.isDelProp());
2305:       assertFalse(node0.isCall());
2306:       assertFalse(node0.isBreak());
2307:       assertFalse(node0.isGetProp());
2308:       assertFalse(node0.isReturn());
2309:       assertFalse(node0.isTypeOf());
2310:       assertFalse(node0.isDec());
2311:       assertFalse(node0.hasChildren());
2312:       assertFalse(node0.isComma());
2313:       assertFalse(node1.isDefaultCase());
2314:       assertFalse(node1.isRegExp());
2315:       assertFalse(node1.isFunction());
2316:       assertFalse(node1.isCatch());
2317:       assertFalse(node1.isArrayLit());
2318:       assertFalse(node1.isVoid());
2319:       assertFalse(node1.isTrue());
2320:       assertFalse(node1.isParamList());
2321:       assertFalse(node1.isDebugger());
2322:       assertFalse(node1.isNull());
2323:       assertFalse(node1.isGetterDef());
2324:       assertFalse(node1.isDelProp());
2325:       assertFalse(node1.isIf());
2326:       assertFalse(node1.isName());
2327:       assertFalse(node1.isCall());
2328:       assertFalse(node1.isTry());
2329:       assertTrue(node1.isNumber());
2330:       assertFalse(node1.isBlock());
2331:       assertFalse(node1.isFor());
2332:       assertFalse(node1.isWhile());
2333:       assertFalse(node1.isString());
2334:       assertEquals(39, node1.getType());
2335:       assertFalse(node1.isContinue());
2336:       assertFalse(node1.isInc());
2337:       assertFalse(node1.hasMoreThanOneChild());
2338:       assertEquals((-1), node1.getLineno());
2339:       assertFalse(node1.isIn());
2340:       assertFalse(node1.isNE());
2341:       assertFalse(node1.isSetterDef());
2342:       assertFalse(node1.isFalse());
2343:       assertFalse(node1.isCast());
2344:       assertFalse(node1.isThrow());
2345:       assertFalse(node1.isWith());
2346:       assertFalse(node1.isNot());
2347:       assertFalse(node1.isExprResult());
2348:       assertFalse(node1.isObjectLit());
2349:       assertFalse(node1.isScript());
2350:       assertFalse(node1.isInstanceOf());
2351:       assertFalse(node1.isAnd());
2352:       assertFalse(node1.isBreak());
2353:       assertFalse(node1.hasChildren());
2354:       assertEquals((-1), node1.getSourcePosition());
2355:       assertFalse(node1.isTypeOf());
2356:       assertFalse(node1.isComma());
2357:       assertFalse(node1.isDec());
2358:       assertFalse(node1.isAssign());
2359:       assertFalse(node1.isGetProp());
2360:       assertFalse(node1.isGetElem());
2361:       assertFalse(node1.isReturn());
2362:       assertFalse(node1.isHook());
2363:       assertFalse(node1.hasOneChild());
2364:       assertFalse(node1.isThis());
2365:       assertFalse(node1.isCase());
2366:       assertFalse(node1.isDo());
2367:       assertFalse(node1.isAdd());
2368:       assertFalse(node1.isOr());
2369:       assertEquals((-1), node1.getCharno());
2370:       assertFalse(node1.isSwitch());
2371:       assertFalse(node1.isStringKey());
2372:       assertFalse(node1.isLabelName());
2373:       assertFalse(node1.isEmpty());
2374:       assertFalse(node1.isAssignAdd());
2375:       assertFalse(node1.isLabel());
2376:       assertFalse(node1.isNew());
2377:       assertEquals(0, node1.getChildCount());
2378:       assertFalse(node1.isVar());
2379:       assertFalse(node2.isCase());
2380:       assertFalse(node2.isString());
2381:       assertFalse(node2.isIn());
2382:       assertFalse(node2.isInc());
2383:       assertEquals(1, node2.getChildCount());
2384:       assertFalse(node2.isHook());
2385:       assertFalse(node2.isFalse());
2386:       assertFalse(node2.isThrow());
2387:       assertFalse(node2.isGetterDef());
2388:       assertFalse(node2.isDebugger());
2389:       assertEquals((-1), node2.getCharno());
2390:       assertFalse(node2.isArrayLit());
2391:       assertFalse(node2.isAnd());
2392:       assertFalse(node2.isSwitch());
2393:       assertFalse(node2.isNot());
2394:       assertFalse(node2.isObjectLit());
2395:       assertEquals(657, node2.getType());
2396:       assertFalse(node2.isComma());
2397:       assertFalse(node2.isGetProp());
2398:       assertFalse(node2.isDefaultCase());
2399:       assertFalse(node2.isName());
2400:       assertFalse(node2.isGetElem());
2401:       assertFalse(node2.isEmpty());
2402:       assertFalse(node2.isAssign());
2403:       assertFalse(node2.isCall());
2404:       assertTrue(node2.hasOneChild());
2405:       assertFalse(node2.isBreak());
2406:       assertFalse(node2.isDec());
2407:       assertFalse(node2.isTypeOf());
2408:       assertFalse(node2.isOr());
2409:       assertFalse(node2.isVoid());
2410:       assertFalse(node2.isTrue());
2411:       assertFalse(node2.isExprResult());
2412:       assertFalse(node2.isNull());
2413:       assertFalse(node2.isDelProp());
2414:       assertFalse(node2.isDo());
2415:       assertFalse(node2.isContinue());
2416:       assertFalse(node2.hasMoreThanOneChild());
2417:       assertFalse(node2.isNew());
2418:       assertFalse(node2.isBlock());
2419:       assertFalse(node2.isAdd());
2420:       assertFalse(node2.isReturn());
2421:       assertFalse(node2.isLabel());
2422:       assertFalse(node2.isVar());
2423:       assertFalse(node2.isWhile());
2424:       assertFalse(node2.isAssignAdd());
2425:       assertFalse(node2.isStringKey());
2426:       assertFalse(node2.isLabelName());
2427:       assertFalse(node2.isNumber());
2428:       assertEquals((-1), node2.getSourcePosition());
2429:       assertFalse(node2.isCast());
2430:       assertFalse(node2.isParamList());
2431:       assertFalse(node2.isRegExp());
2432:       assertFalse(node2.isInstanceOf());
2433:       assertFalse(node2.isCatch());
2434:       assertFalse(node2.isScript());
2435:       assertFalse(node2.isFunction());
2436:       assertFalse(node2.isWith());
2437:       assertFalse(node2.isTry());
2438:       assertFalse(node2.isSetterDef());
2439:       assertFalse(node2.isThis());
2440:       assertFalse(node2.isFor());
2441:       assertTrue(node2.hasChildren());
2442:       assertEquals((-1), node2.getLineno());
2443:       assertFalse(node2.isNE());
2444:       assertFalse(node2.isIf());
2445:       assertFalse(node3.isIn());
2446:       assertFalse(node3.isSwitch());
2447:       assertFalse(node3.isNE());
2448:       assertFalse(node3.isIf());
2449:       assertFalse(node3.isDelProp());
2450:       assertFalse(node3.isHook());
2451:       assertFalse(node3.isFor());
2452:       assertEquals((-1), node3.getCharno());
2453:       assertFalse(node3.isGetterDef());
2454:       assertFalse(node3.isDebugger());
2455:       assertFalse(node3.isThis());
2456:       assertFalse(node3.isString());
2457:       assertFalse(node3.isTry());
2458:       assertFalse(node3.isGetProp());
2459:       assertFalse(node3.isCase());
2460:       assertTrue(node3.isNumber());
2461:       assertFalse(node3.isAnd());
2462:       assertFalse(node3.isCatch());
2463:       assertFalse(node3.isInstanceOf());
2464:       assertFalse(node3.isNot());
2465:       assertFalse(node3.isWith());
2466:       assertFalse(node3.isObjectLit());
2467:       assertFalse(node3.isRegExp());
2468:       assertFalse(node3.isFunction());
2469:       assertFalse(node3.isCast());
2470:       assertFalse(node3.isThrow());
2471:       assertFalse(node3.isFalse());
2472:       assertFalse(node3.isSetterDef());
2473:       assertFalse(node3.isInc());
2474:       assertFalse(node3.hasMoreThanOneChild());
2475:       assertFalse(node3.isContinue());
2476:       assertFalse(node3.isOr());
2477:       assertEquals(39, node3.getType());
2478:       assertFalse(node3.isLabel());
2479:       assertFalse(node3.isReturn());
2480:       assertFalse(node3.isTypeOf());
2481:       assertFalse(node3.isLabelName());
2482:       assertFalse(node3.isGetElem());
2483:       assertEquals((-1), node3.getLineno());
2484:       assertFalse(node3.isCall());
2485:       assertFalse(node3.isStringKey());
2486:       assertFalse(node3.isAssign());
2487:       assertFalse(node3.isBlock());
2488:       assertFalse(node3.hasChildren());
2489:       assertEquals((-1), node3.getSourcePosition());
2490:       
2491:       boolean boolean4 = node3.wasEmptyNode();
2492:       assertSame(node0, node5);
2493:       assertNotSame(node0, node4);
2494:       assertSame(node1, node3);
2495:       assertSame(node3, node1);
2496:       assertFalse(boolean4);
2497:       assertFalse(node0.equals((Object)node1));
2498:       assertFalse(node0.equals((Object)node3));
2499:       assertFalse(node0.equals((Object)node4));
2500:       assertFalse(node0.equals((Object)node2));
2501:       assertFalse(node1.equals((Object)node2));
2502:       assertFalse(node1.equals((Object)node4));
2503:       assertFalse(node1.equals((Object)node5));
2504:       assertFalse(node1.equals((Object)node0));
2505:       assertFalse(node2.equals((Object)node5));
2506:       assertFalse(node2.equals((Object)node3));
2507:       assertFalse(node2.equals((Object)node0));
2508:       assertFalse(node2.equals((Object)node1));
2509:       assertFalse(node2.equals((Object)node4));
2510:       assertFalse(node3.equals((Object)node0));
2511:       assertFalse(node3.equals((Object)node2));
2512:       assertFalse(node3.equals((Object)node5));
2513:       assertFalse(node3.equals((Object)node4));
2514:       assertTrue(boolean4 == boolean0);
2515:       assertTrue(boolean4 == boolean3);
2516:       assertTrue(boolean4 == boolean2);
2517:       assertTrue(boolean4 == boolean1);
2518:       
2519:       boolean boolean5 = node3.isReturn();
2520:       assertSame(node0, node5);
2521:       assertNotSame(node0, node4);
2522:       assertSame(node1, node3);
2523:       assertSame(node3, node1);
2524:       assertFalse(boolean5);
2525:       assertFalse(node0.equals((Object)node1));
2526:       assertFalse(node0.equals((Object)node3));
2527:       assertFalse(node0.equals((Object)node4));
2528:       assertFalse(node0.equals((Object)node2));
2529:       assertFalse(node1.equals((Object)node2));
2530:       assertFalse(node1.equals((Object)node4));
2531:       assertFalse(node1.equals((Object)node5));
2532:       assertFalse(node1.equals((Object)node0));
2533:       assertFalse(node2.equals((Object)node5));
2534:       assertFalse(node2.equals((Object)node3));
2535:       assertFalse(node2.equals((Object)node0));
2536:       assertFalse(node2.equals((Object)node1));
2537:       assertFalse(node2.equals((Object)node4));
2538:       assertFalse(node3.equals((Object)node0));
2539:       assertFalse(node3.equals((Object)node2));
2540:       assertFalse(node3.equals((Object)node5));
2541:       assertFalse(node3.equals((Object)node4));
2542:       assertTrue(boolean5 == boolean4);
2543:       assertTrue(boolean5 == boolean0);
2544:       assertTrue(boolean5 == boolean3);
2545:       assertTrue(boolean5 == boolean2);
2546:       assertTrue(boolean5 == boolean1);
2547:   }
2548: }
RegularFileObject[/tmp/EvoSuite_165_1628159324362/com/google/javascript/rhino/Node_165_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:44 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_165_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_165_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_165_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.NamedType",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.JSDocInfo$Marker",
356:       "com.google.common.collect.ImmutableSet",
357:       "com.google.common.collect.EmptyImmutableSet",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 10:28:44.868 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertNotNull(node0);
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());

boolean boolean0 = node0.isWhile();
assertFalse(boolean0);
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());

boolean boolean1 = node0.isTypeOf();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node node1 = Node.newNumber((double) 49);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());

node0.removeProp(657);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());

Node node2 = new Node(657, node0, node0, node0, node0);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(657, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isCall());
assertTrue(node2.hasOneChild());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isNull());
assertFalse(node2.isDelProp());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isParamList());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node2));
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());

Node node3 = node1.useSourceInfoFromForTree(node2);
assertNotNull(node3);
assertSame(node1, node3);
assertSame(node3, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(657, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isCall());
assertTrue(node2.hasOneChild());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isNull());
assertFalse(node2.isDelProp());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isParamList());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node3.isIn());
assertFalse(node3.isSwitch());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isHook());
assertFalse(node3.isFor());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDebugger());
assertFalse(node3.isThis());
assertFalse(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isGetProp());
assertFalse(node3.isCase());
assertTrue(node3.isNumber());
assertFalse(node3.isAnd());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isObjectLit());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertEquals(39, node3.getType());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCall());
assertFalse(node3.isStringKey());
assertFalse(node3.isAssign());
assertFalse(node3.isBlock());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isScript());
assertFalse(node3.isWhile());
assertFalse(node3.hasOneChild());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isComma());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isParamList());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isVoid());
assertFalse(node3.isVar());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isNew());

int int0 = Node.extractLineno(8388608);
assertEquals(2048, int0);

String string0 = node1.getSourceFileName();
assertNull(string0);
assertSame(node1, node3);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());

boolean boolean2 = node0.isParamList();
assertFalse(boolean2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());

Node node4 = Node.newString("", 1, 39);
assertNotNull(node4);
assertNotSame(node4, node0);
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertEquals(1, node4.getLineno());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.isFunction());
assertFalse(node4.isSwitch());
assertFalse(node4.isArrayLit());
assertFalse(node4.isCase());
assertFalse(node4.isGetterDef());
assertFalse(node4.isDebugger());
assertFalse(node4.isGetProp());
assertFalse(node4.isParamList());
assertEquals(39, node4.getCharno());
assertFalse(node4.isBreak());
assertFalse(node4.isCall());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isVar());
assertFalse(node4.isComma());
assertFalse(node4.isTrue());
assertFalse(node4.isAdd());
assertFalse(node4.isVoid());
assertFalse(node4.isExprResult());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isName());
assertFalse(node4.isEmpty());
assertFalse(node4.isNull());
assertFalse(node4.isOr());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetElem());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCast());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssign());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertFalse(node4.isBlock());
assertTrue(node4.isString());
assertFalse(node4.hasOneChild());
assertFalse(node4.isScript());
assertFalse(node4.isStringKey());
assertFalse(node4.isObjectLit());
assertFalse(node4.isAnd());
assertFalse(node4.isNumber());
assertFalse(node4.isNot());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isSetterDef());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertEquals(40, node4.getType());
assertFalse(node4.isCatch());
assertFalse(node4.isWith());
assertFalse(node4.isHook());
assertFalse(node4.isRegExp());
assertFalse(node4.isThis());
assertEquals(4135, node4.getSourcePosition());
assertFalse(node4.isInc());
assertFalse(node4.isIn());

node4.detachChildren();
assertNotSame(node4, node0);
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertEquals(1, node4.getLineno());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.isFunction());
assertFalse(node4.isSwitch());
assertFalse(node4.isArrayLit());
assertFalse(node4.isCase());
assertFalse(node4.isGetterDef());
assertFalse(node4.isDebugger());
assertFalse(node4.isGetProp());
assertFalse(node4.isParamList());
assertEquals(39, node4.getCharno());
assertFalse(node4.isBreak());
assertFalse(node4.isCall());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isVar());
assertFalse(node4.isComma());
assertFalse(node4.isTrue());
assertFalse(node4.isAdd());
assertFalse(node4.isVoid());
assertFalse(node4.isExprResult());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isName());
assertFalse(node4.isEmpty());
assertFalse(node4.isNull());
assertFalse(node4.isOr());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetElem());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCast());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssign());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertFalse(node4.isBlock());
assertTrue(node4.isString());
assertFalse(node4.hasOneChild());
assertFalse(node4.isScript());
assertFalse(node4.isStringKey());
assertFalse(node4.isObjectLit());
assertFalse(node4.isAnd());
assertFalse(node4.isNumber());
assertFalse(node4.isNot());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isSetterDef());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertEquals(40, node4.getType());
assertFalse(node4.isCatch());
assertFalse(node4.isWith());
assertFalse(node4.isHook());
assertFalse(node4.isRegExp());
assertFalse(node4.isThis());
assertEquals(4135, node4.getSourcePosition());
assertFalse(node4.isInc());
assertFalse(node4.isIn());

Node node5 = node0.copyInformationFromForTree(node1);
assertNotNull(node5);
assertSame(node0, node5);
assertNotSame(node0, node4);
assertSame(node1, node3);
assertNotSame(node5, node4);
assertSame(node5, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isContinue());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isWhile());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDo());
assertFalse(node5.isAdd());
assertFalse(node5.isNumber());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isOr());
assertFalse(node5.isCast());
assertFalse(node5.isStringKey());
assertFalse(node5.isVar());
assertFalse(node5.isNew());
assertFalse(node5.isLabelName());
assertFalse(node5.isLabel());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isCatch());
assertEquals(40, node5.getType());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isSetterDef());
assertFalse(node5.isParamList());
assertFalse(node5.isScript());
assertFalse(node5.isHook());
assertFalse(node5.isFor());
assertFalse(node5.isIf());
assertFalse(node5.hasOneChild());
assertFalse(node5.isTry());
assertTrue(node5.isString());
assertFalse(node5.isThis());
assertFalse(node5.isBlock());
assertFalse(node5.isWith());
assertFalse(node5.isRegExp());
assertFalse(node5.isCase());
assertFalse(node5.isSwitch());
assertFalse(node5.isInc());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isNE());
assertFalse(node5.isIn());
assertFalse(node5.isGetterDef());
assertFalse(node5.isArrayLit());
assertFalse(node5.isThrow());
assertFalse(node5.isEmpty());
assertFalse(node5.isFunction());
assertFalse(node5.isFalse());
assertFalse(node5.isAnd());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isDebugger());
assertFalse(node5.isGetProp());
assertFalse(node5.isNull());
assertFalse(node5.isTrue());
assertFalse(node5.isNot());
assertFalse(node5.isObjectLit());
assertFalse(node5.isGetElem());
assertFalse(node5.isCall());
assertFalse(node5.isBreak());
assertFalse(node5.isName());
assertFalse(node5.isDelProp());
assertFalse(node5.isVoid());
assertFalse(node5.isComma());
assertFalse(node5.isExprResult());
assertFalse(node5.isReturn());
assertFalse(node5.hasChildren());
assertFalse(node5.isDec());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());

Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
assertNotNull(node_NodeMismatch0);
assertSame(node0, node5);
assertNotSame(node0, node4);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(657, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isCall());
assertTrue(node2.hasOneChild());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isNull());
assertFalse(node2.isDelProp());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isParamList());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());

int int1 = node5.getIndexOfChild(node0);
assertSame(node0, node5);
assertNotSame(node0, node4);
assertSame(node1, node3);
assertNotSame(node5, node4);
assertSame(node5, node0);
assertEquals((-1), int1);
assertFalse(int1 == int0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isContinue());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isWhile());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDo());
assertFalse(node5.isAdd());
assertFalse(node5.isNumber());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isOr());
assertFalse(node5.isCast());
assertFalse(node5.isStringKey());
assertFalse(node5.isVar());
assertFalse(node5.isNew());
assertFalse(node5.isLabelName());
assertFalse(node5.isLabel());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isCatch());
assertEquals(40, node5.getType());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isSetterDef());
assertFalse(node5.isParamList());
assertFalse(node5.isScript());
assertFalse(node5.isHook());
assertFalse(node5.isFor());
assertFalse(node5.isIf());
assertFalse(node5.hasOneChild());
assertFalse(node5.isTry());
assertTrue(node5.isString());
assertFalse(node5.isThis());
assertFalse(node5.isBlock());
assertFalse(node5.isWith());
assertFalse(node5.isRegExp());
assertFalse(node5.isCase());
assertFalse(node5.isSwitch());
assertFalse(node5.isInc());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isNE());
assertFalse(node5.isIn());
assertFalse(node5.isGetterDef());
assertFalse(node5.isArrayLit());
assertFalse(node5.isThrow());
assertFalse(node5.isEmpty());
assertFalse(node5.isFunction());
assertFalse(node5.isFalse());
assertFalse(node5.isAnd());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isDebugger());
assertFalse(node5.isGetProp());
assertFalse(node5.isNull());
assertFalse(node5.isTrue());
assertFalse(node5.isNot());
assertFalse(node5.isObjectLit());
assertFalse(node5.isGetElem());
assertFalse(node5.isCall());
assertFalse(node5.isBreak());
assertFalse(node5.isName());
assertFalse(node5.isDelProp());
assertFalse(node5.isVoid());
assertFalse(node5.isComma());
assertFalse(node5.isExprResult());
assertFalse(node5.isReturn());
assertFalse(node5.hasChildren());
assertFalse(node5.isDec());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());

Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags1);
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags2);
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
assertNotNull(node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags2.valueOf());
assertEquals(31, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());

boolean boolean3 = node1.hasChildren();
assertSame(node1, node3);
assertFalse(boolean3);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());

node_SideEffectFlags3.clearSideEffectFlags();
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags2.valueOf());
assertEquals(31, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());

String string1 = node0.checkTreeEquals(node5);
assertNull(string1);
assertSame(node0, node5);
assertNotSame(node0, node4);
assertSame(node1, node3);
assertNotSame(node5, node4);
assertSame(node5, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isContinue());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isWhile());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDo());
assertFalse(node5.isAdd());
assertFalse(node5.isNumber());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isOr());
assertFalse(node5.isCast());
assertFalse(node5.isStringKey());
assertFalse(node5.isVar());
assertFalse(node5.isNew());
assertFalse(node5.isLabelName());
assertFalse(node5.isLabel());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isCatch());
assertEquals(40, node5.getType());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isSetterDef());
assertFalse(node5.isParamList());
assertFalse(node5.isScript());
assertFalse(node5.isHook());
assertFalse(node5.isFor());
assertFalse(node5.isIf());
assertFalse(node5.hasOneChild());
assertFalse(node5.isTry());
assertTrue(node5.isString());
assertFalse(node5.isThis());
assertFalse(node5.isBlock());
assertFalse(node5.isWith());
assertFalse(node5.isRegExp());
assertFalse(node5.isCase());
assertFalse(node5.isSwitch());
assertFalse(node5.isInc());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isNE());
assertFalse(node5.isIn());
assertFalse(node5.isGetterDef());
assertFalse(node5.isArrayLit());
assertFalse(node5.isThrow());
assertFalse(node5.isEmpty());
assertFalse(node5.isFunction());
assertFalse(node5.isFalse());
assertFalse(node5.isAnd());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isDebugger());
assertFalse(node5.isGetProp());
assertFalse(node5.isNull());
assertFalse(node5.isTrue());
assertFalse(node5.isNot());
assertFalse(node5.isObjectLit());
assertFalse(node5.isGetElem());
assertFalse(node5.isCall());
assertFalse(node5.isBreak());
assertFalse(node5.isName());
assertFalse(node5.isDelProp());
assertFalse(node5.isVoid());
assertFalse(node5.isComma());
assertFalse(node5.isExprResult());
assertFalse(node5.isReturn());
assertFalse(node5.hasChildren());
assertFalse(node5.isDec());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());

Set<String> set0 = node2.getDirectives();
assertNull(set0);
assertSame(node0, node5);
assertNotSame(node0, node4);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(657, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isCall());
assertTrue(node2.hasOneChild());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isNull());
assertFalse(node2.isDelProp());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isParamList());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());

node3.setWasEmptyNode(false);
assertSame(node0, node5);
assertNotSame(node0, node4);
assertSame(node1, node3);
assertSame(node3, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node4));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(657, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isCall());
assertTrue(node2.hasOneChild());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isNull());
assertFalse(node2.isDelProp());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isParamList());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node3.isIn());
assertFalse(node3.isSwitch());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isHook());
assertFalse(node3.isFor());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDebugger());
assertFalse(node3.isThis());
assertFalse(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isGetProp());
assertFalse(node3.isCase());
assertTrue(node3.isNumber());
assertFalse(node3.isAnd());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isObjectLit());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertEquals(39, node3.getType());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCall());
assertFalse(node3.isStringKey());
assertFalse(node3.isAssign());
assertFalse(node3.isBlock());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());

boolean boolean4 = node3.wasEmptyNode();
assertSame(node0, node5);
assertNotSame(node0, node4);
assertSame(node1, node3);
assertSame(node3, node1);
assertFalse(boolean4);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node4));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);

boolean boolean5 = node3.isReturn();
assertSame(node0, node5);
assertNotSame(node0, node4);
assertSame(node1, node3);
assertSame(node3, node1);
assertFalse(boolean5);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node4));
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);


[MASTER] 10:28:45.293 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_168_1628159325264/com/google/javascript/rhino/Node_168_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_168_1628159325264/com/google/javascript/rhino/Node_168_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:45.293 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:45.293 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:45.293 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 240
[MASTER] 10:28:45.293 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_168_1628159325264/com/google/javascript/rhino/Node_168_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:45 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.EnumElementType;
14: import com.google.javascript.rhino.jstype.EnumType;
15: import com.google.javascript.rhino.jstype.JSType;
16: import com.google.javascript.rhino.jstype.JSTypeRegistry;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_168_tmp__ESTest extends Node_168_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
27:       assertNotNull(simpleErrorReporter0);
28:       
29:       String string0 = " [";
30:       Node node0 = Node.newString(" [");
31:       assertNotNull(node0);
32:       assertFalse(node0.isThrow());
33:       assertFalse(node0.isFalse());
34:       assertFalse(node0.isBreak());
35:       assertFalse(node0.isHook());
36:       assertFalse(node0.isComma());
37:       assertFalse(node0.isThis());
38:       assertFalse(node0.isNot());
39:       assertFalse(node0.isObjectLit());
40:       assertFalse(node0.isAnd());
41:       assertFalse(node0.isScript());
42:       assertFalse(node0.isCase());
43:       assertFalse(node0.isGetProp());
44:       assertFalse(node0.isSwitch());
45:       assertFalse(node0.isGetterDef());
46:       assertEquals((-1), node0.getCharno());
47:       assertFalse(node0.isGetElem());
48:       assertFalse(node0.isLabelName());
49:       assertFalse(node0.isEmpty());
50:       assertFalse(node0.isAssign());
51:       assertFalse(node0.isDelProp());
52:       assertFalse(node0.isArrayLit());
53:       assertFalse(node0.isExprResult());
54:       assertFalse(node0.isAssignAdd());
55:       assertFalse(node0.isDec());
56:       assertFalse(node0.isTypeOf());
57:       assertFalse(node0.isReturn());
58:       assertFalse(node0.isLabel());
59:       assertFalse(node0.hasChildren());
60:       assertFalse(node0.isDo());
61:       assertFalse(node0.isDefaultCase());
62:       assertFalse(node0.isTrue());
63:       assertFalse(node0.isAdd());
64:       assertFalse(node0.isVoid());
65:       assertFalse(node0.isNull());
66:       assertFalse(node0.isOr());
67:       assertFalse(node0.isStringKey());
68:       assertFalse(node0.isCall());
69:       assertFalse(node0.isName());
70:       assertFalse(node0.isSetterDef());
71:       assertFalse(node0.isNew());
72:       assertFalse(node0.isBlock());
73:       assertTrue(node0.isString());
74:       assertEquals(0, node0.getChildCount());
75:       assertFalse(node0.isVar());
76:       assertFalse(node0.isContinue());
77:       assertFalse(node0.isWhile());
78:       assertFalse(node0.isParamList());
79:       assertFalse(node0.isNumber());
80:       assertEquals((-1), node0.getSourcePosition());
81:       assertFalse(node0.isDebugger());
82:       assertFalse(node0.isFor());
83:       assertFalse(node0.isCast());
84:       assertFalse(node0.isIf());
85:       assertFalse(node0.hasOneChild());
86:       assertFalse(node0.isTry());
87:       assertFalse(node0.isFunction());
88:       assertFalse(node0.isRegExp());
89:       assertEquals(40, node0.getType());
90:       assertFalse(node0.hasMoreThanOneChild());
91:       assertFalse(node0.isCatch());
92:       assertFalse(node0.isWith());
93:       assertFalse(node0.isInstanceOf());
94:       assertEquals((-1), node0.getLineno());
95:       assertFalse(node0.isInc());
96:       assertFalse(node0.isNE());
97:       assertFalse(node0.isIn());
98:       assertEquals(57, Node.LAST_PROP);
99:       assertEquals(15, Node.NO_SIDE_EFFECTS);
100:       assertEquals(49, Node.DIRECT_EVAL);
101:       assertEquals(1, Node.DECR_FLAG);
102:       assertEquals(32, Node.INCRDECR_PROP);
103:       assertEquals(12, Node.COLUMN_BITS);
104:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
105:       assertEquals(2, Node.POST_FLAG);
106:       assertEquals(30, Node.VAR_ARGS_NAME);
107:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
108:       assertEquals(40, Node.ORIGINALNAME_PROP);
109:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
110:       assertEquals(46, Node.IS_NAMESPACE);
111:       assertEquals(54, Node.SLASH_V);
112:       assertEquals(50, Node.FREE_CALL);
113:       assertEquals(51, Node.STATIC_SOURCE_FILE);
114:       assertEquals(43, Node.IS_CONSTANT_NAME);
115:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
117:       assertEquals(53, Node.INPUT_ID);
118:       assertEquals(4095, Node.COLUMN_MASK);
119:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
120:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
123:       assertEquals(29, Node.JSDOC_INFO_PROP);
124:       assertEquals(56, Node.CHANGE_TIME);
125:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
126:       assertEquals(48, Node.DIRECTIVES);
127:       assertEquals(39, Node.EMPTY_BLOCK);
128:       assertEquals(37, Node.OPT_ARG_NAME);
129:       assertEquals(52, Node.LENGTH);
130:       assertEquals(57, Node.REFLECTED_OBJECT);
131:       assertEquals(55, Node.INFERRED_FUNCTION);
132:       assertEquals(8, Node.FLAG_NO_THROWS);
133:       assertEquals(36, Node.QUOTED_PROP);
134:       
135:       node0.setCharno(0);
136:       assertFalse(node0.isThrow());
137:       assertFalse(node0.isFalse());
138:       assertFalse(node0.isBreak());
139:       assertFalse(node0.isHook());
140:       assertFalse(node0.isComma());
141:       assertFalse(node0.isThis());
142:       assertFalse(node0.isNot());
143:       assertFalse(node0.isObjectLit());
144:       assertFalse(node0.isAnd());
145:       assertFalse(node0.isScript());
146:       assertFalse(node0.isCase());
147:       assertFalse(node0.isGetProp());
148:       assertFalse(node0.isSwitch());
149:       assertFalse(node0.isGetterDef());
150:       assertEquals((-1), node0.getCharno());
151:       assertFalse(node0.isGetElem());
152:       assertFalse(node0.isLabelName());
153:       assertFalse(node0.isEmpty());
154:       assertFalse(node0.isAssign());
155:       assertFalse(node0.isDelProp());
156:       assertFalse(node0.isArrayLit());
157:       assertFalse(node0.isExprResult());
158:       assertFalse(node0.isAssignAdd());
159:       assertFalse(node0.isDec());
160:       assertFalse(node0.isTypeOf());
161:       assertFalse(node0.isReturn());
162:       assertFalse(node0.isLabel());
163:       assertFalse(node0.hasChildren());
164:       assertFalse(node0.isDo());
165:       assertFalse(node0.isDefaultCase());
166:       assertFalse(node0.isTrue());
167:       assertFalse(node0.isAdd());
168:       assertFalse(node0.isVoid());
169:       assertFalse(node0.isNull());
170:       assertFalse(node0.isOr());
171:       assertFalse(node0.isStringKey());
172:       assertFalse(node0.isCall());
173:       assertFalse(node0.isName());
174:       assertFalse(node0.isSetterDef());
175:       assertFalse(node0.isNew());
176:       assertFalse(node0.isBlock());
177:       assertTrue(node0.isString());
178:       assertEquals(0, node0.getChildCount());
179:       assertFalse(node0.isVar());
180:       assertFalse(node0.isContinue());
181:       assertFalse(node0.isWhile());
182:       assertFalse(node0.isParamList());
183:       assertFalse(node0.isNumber());
184:       assertEquals((-1), node0.getSourcePosition());
185:       assertFalse(node0.isDebugger());
186:       assertFalse(node0.isFor());
187:       assertFalse(node0.isCast());
188:       assertFalse(node0.isIf());
189:       assertFalse(node0.hasOneChild());
190:       assertFalse(node0.isTry());
191:       assertFalse(node0.isFunction());
192:       assertFalse(node0.isRegExp());
193:       assertEquals(40, node0.getType());
194:       assertFalse(node0.hasMoreThanOneChild());
195:       assertFalse(node0.isCatch());
196:       assertFalse(node0.isWith());
197:       assertFalse(node0.isInstanceOf());
198:       assertEquals((-1), node0.getLineno());
199:       assertFalse(node0.isInc());
200:       assertFalse(node0.isNE());
201:       assertFalse(node0.isIn());
202:       assertEquals(57, Node.LAST_PROP);
203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
204:       assertEquals(49, Node.DIRECT_EVAL);
205:       assertEquals(1, Node.DECR_FLAG);
206:       assertEquals(32, Node.INCRDECR_PROP);
207:       assertEquals(12, Node.COLUMN_BITS);
208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
209:       assertEquals(2, Node.POST_FLAG);
210:       assertEquals(30, Node.VAR_ARGS_NAME);
211:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
212:       assertEquals(40, Node.ORIGINALNAME_PROP);
213:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
214:       assertEquals(46, Node.IS_NAMESPACE);
215:       assertEquals(54, Node.SLASH_V);
216:       assertEquals(50, Node.FREE_CALL);
217:       assertEquals(51, Node.STATIC_SOURCE_FILE);
218:       assertEquals(43, Node.IS_CONSTANT_NAME);
219:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
220:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
221:       assertEquals(53, Node.INPUT_ID);
222:       assertEquals(4095, Node.COLUMN_MASK);
223:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
225:       assertEquals(47, Node.IS_DISPATCHER);
226:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
227:       assertEquals(29, Node.JSDOC_INFO_PROP);
228:       assertEquals(56, Node.CHANGE_TIME);
229:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
230:       assertEquals(48, Node.DIRECTIVES);
231:       assertEquals(39, Node.EMPTY_BLOCK);
232:       assertEquals(37, Node.OPT_ARG_NAME);
233:       assertEquals(52, Node.LENGTH);
234:       assertEquals(57, Node.REFLECTED_OBJECT);
235:       assertEquals(55, Node.INFERRED_FUNCTION);
236:       assertEquals(8, Node.FLAG_NO_THROWS);
237:       assertEquals(36, Node.QUOTED_PROP);
238:       
239:       Iterable<Node> iterable0 = node0.children();
240:       assertFalse(iterable0.contains(node0));
241:       assertNotNull(iterable0);
242:       assertFalse(node0.isThrow());
243:       assertFalse(node0.isFalse());
244:       assertFalse(node0.isBreak());
245:       assertFalse(node0.isHook());
246:       assertFalse(node0.isComma());
247:       assertFalse(node0.isThis());
248:       assertFalse(node0.isNot());
249:       assertFalse(node0.isObjectLit());
250:       assertFalse(node0.isAnd());
251:       assertFalse(node0.isScript());
252:       assertFalse(node0.isCase());
253:       assertFalse(node0.isGetProp());
254:       assertFalse(node0.isSwitch());
255:       assertFalse(node0.isGetterDef());
256:       assertEquals((-1), node0.getCharno());
257:       assertFalse(node0.isGetElem());
258:       assertFalse(node0.isLabelName());
259:       assertFalse(node0.isEmpty());
260:       assertFalse(node0.isAssign());
261:       assertFalse(node0.isDelProp());
262:       assertFalse(node0.isArrayLit());
263:       assertFalse(node0.isExprResult());
264:       assertFalse(node0.isAssignAdd());
265:       assertFalse(node0.isDec());
266:       assertFalse(node0.isTypeOf());
267:       assertFalse(node0.isReturn());
268:       assertFalse(node0.isLabel());
269:       assertFalse(node0.hasChildren());
270:       assertFalse(node0.isDo());
271:       assertFalse(node0.isDefaultCase());
272:       assertFalse(node0.isTrue());
273:       assertFalse(node0.isAdd());
274:       assertFalse(node0.isVoid());
275:       assertFalse(node0.isNull());
276:       assertFalse(node0.isOr());
277:       assertFalse(node0.isStringKey());
278:       assertFalse(node0.isCall());
279:       assertFalse(node0.isName());
280:       assertFalse(node0.isSetterDef());
281:       assertFalse(node0.isNew());
282:       assertFalse(node0.isBlock());
283:       assertTrue(node0.isString());
284:       assertEquals(0, node0.getChildCount());
285:       assertFalse(node0.isVar());
286:       assertFalse(node0.isContinue());
287:       assertFalse(node0.isWhile());
288:       assertFalse(node0.isParamList());
289:       assertFalse(node0.isNumber());
290:       assertEquals((-1), node0.getSourcePosition());
291:       assertFalse(node0.isDebugger());
292:       assertFalse(node0.isFor());
293:       assertFalse(node0.isCast());
294:       assertFalse(node0.isIf());
295:       assertFalse(node0.hasOneChild());
296:       assertFalse(node0.isTry());
297:       assertFalse(node0.isFunction());
298:       assertFalse(node0.isRegExp());
299:       assertEquals(40, node0.getType());
300:       assertFalse(node0.hasMoreThanOneChild());
301:       assertFalse(node0.isCatch());
302:       assertFalse(node0.isWith());
303:       assertFalse(node0.isInstanceOf());
304:       assertEquals((-1), node0.getLineno());
305:       assertFalse(node0.isInc());
306:       assertFalse(node0.isNE());
307:       assertFalse(node0.isIn());
308:       assertEquals(57, Node.LAST_PROP);
309:       assertEquals(15, Node.NO_SIDE_EFFECTS);
310:       assertEquals(49, Node.DIRECT_EVAL);
311:       assertEquals(1, Node.DECR_FLAG);
312:       assertEquals(32, Node.INCRDECR_PROP);
313:       assertEquals(12, Node.COLUMN_BITS);
314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
315:       assertEquals(2, Node.POST_FLAG);
316:       assertEquals(30, Node.VAR_ARGS_NAME);
317:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
318:       assertEquals(40, Node.ORIGINALNAME_PROP);
319:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
320:       assertEquals(46, Node.IS_NAMESPACE);
321:       assertEquals(54, Node.SLASH_V);
322:       assertEquals(50, Node.FREE_CALL);
323:       assertEquals(51, Node.STATIC_SOURCE_FILE);
324:       assertEquals(43, Node.IS_CONSTANT_NAME);
325:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
326:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
327:       assertEquals(53, Node.INPUT_ID);
328:       assertEquals(4095, Node.COLUMN_MASK);
329:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
330:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
331:       assertEquals(47, Node.IS_DISPATCHER);
332:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
333:       assertEquals(29, Node.JSDOC_INFO_PROP);
334:       assertEquals(56, Node.CHANGE_TIME);
335:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
336:       assertEquals(48, Node.DIRECTIVES);
337:       assertEquals(39, Node.EMPTY_BLOCK);
338:       assertEquals(37, Node.OPT_ARG_NAME);
339:       assertEquals(52, Node.LENGTH);
340:       assertEquals(57, Node.REFLECTED_OBJECT);
341:       assertEquals(55, Node.INFERRED_FUNCTION);
342:       assertEquals(8, Node.FLAG_NO_THROWS);
343:       assertEquals(36, Node.QUOTED_PROP);
344:       
345:       Node node1 = null;
346:       // Undeclared exception!
347:       try { 
348:         node0.useSourceInfoFromForTree((Node) null);
349:         fail("Expecting exception: NullPointerException");
350:       
351:       } catch(NullPointerException e) {
352:          //
353:          // no message in exception (getMessage() returned null)
354:          //
355:          verifyException("com.google.javascript.rhino.Node", e);
356:       }
357:   }
358: }
RegularFileObject[/tmp/EvoSuite_168_1628159325264/com/google/javascript/rhino/Node_168_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:45 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_168_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_168_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_168_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.NamedType",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.JSDocInfo$Marker",
356:       "com.google.common.collect.ImmutableSet",
357:       "com.google.common.collect.EmptyImmutableSet",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 10:28:45.296 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

String string0 = " [";
Node node0 = Node.newString(" [");
assertNotNull(node0);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

node0.setCharno(0);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

Node node1 = null;
node0.useSourceInfoFromForTree((Node) null);

[MASTER] 10:28:48.185 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_178_1628159328139/com/google/javascript/rhino/Node_178_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_178_1628159328139/com/google/javascript/rhino/Node_178_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:48.185 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:48.185 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:48.185 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 252
[MASTER] 10:28:48.186 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_178_1628159328139/com/google/javascript/rhino/Node_178_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:48 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.util.ArrayList;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_178_tmp__ESTest extends Node_178_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = Node.newString("change_time");
26:       assertNotNull(node0);
27:       assertFalse(node0.hasChildren());
28:       assertFalse(node0.isGetElem());
29:       assertFalse(node0.isCast());
30:       assertFalse(node0.isNumber());
31:       assertEquals((-1), node0.getSourcePosition());
32:       assertFalse(node0.isDec());
33:       assertFalse(node0.isOr());
34:       assertFalse(node0.isAssign());
35:       assertFalse(node0.isTypeOf());
36:       assertEquals((-1), node0.getLineno());
37:       assertFalse(node0.isExprResult());
38:       assertFalse(node0.isLabelName());
39:       assertFalse(node0.isContinue());
40:       assertFalse(node0.isAssignAdd());
41:       assertFalse(node0.isLabel());
42:       assertFalse(node0.isVar());
43:       assertFalse(node0.isAdd());
44:       assertFalse(node0.isNew());
45:       assertFalse(node0.isDo());
46:       assertFalse(node0.isBreak());
47:       assertFalse(node0.isThrow());
48:       assertFalse(node0.isCall());
49:       assertFalse(node0.isNull());
50:       assertFalse(node0.isComma());
51:       assertFalse(node0.isFalse());
52:       assertFalse(node0.isAnd());
53:       assertFalse(node0.isName());
54:       assertFalse(node0.isWhile());
55:       assertFalse(node0.isDebugger());
56:       assertFalse(node0.isNot());
57:       assertFalse(node0.isObjectLit());
58:       assertFalse(node0.isReturn());
59:       assertFalse(node0.isGetProp());
60:       assertFalse(node0.isIf());
61:       assertFalse(node0.isFor());
62:       assertFalse(node0.isNE());
63:       assertFalse(node0.isEmpty());
64:       assertFalse(node0.isGetterDef());
65:       assertFalse(node0.isTrue());
66:       assertFalse(node0.isArrayLit());
67:       assertFalse(node0.isDelProp());
68:       assertFalse(node0.isVoid());
69:       assertEquals(40, node0.getType());
70:       assertFalse(node0.isFunction());
71:       assertEquals(0, node0.getChildCount());
72:       assertFalse(node0.isIn());
73:       assertFalse(node0.isSetterDef());
74:       assertFalse(node0.isInc());
75:       assertFalse(node0.isDefaultCase());
76:       assertFalse(node0.isStringKey());
77:       assertFalse(node0.isThis());
78:       assertFalse(node0.isInstanceOf());
79:       assertFalse(node0.isSwitch());
80:       assertFalse(node0.isParamList());
81:       assertFalse(node0.isWith());
82:       assertFalse(node0.isCase());
83:       assertFalse(node0.isScript());
84:       assertFalse(node0.hasMoreThanOneChild());
85:       assertFalse(node0.isCatch());
86:       assertEquals((-1), node0.getCharno());
87:       assertFalse(node0.isRegExp());
88:       assertFalse(node0.isBlock());
89:       assertFalse(node0.isHook());
90:       assertFalse(node0.hasOneChild());
91:       assertFalse(node0.isTry());
92:       assertTrue(node0.isString());
93:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
94:       assertEquals(43, Node.IS_CONSTANT_NAME);
95:       assertEquals(36, Node.QUOTED_PROP);
96:       assertEquals(53, Node.INPUT_ID);
97:       assertEquals(4095, Node.COLUMN_MASK);
98:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
99:       assertEquals(48, Node.DIRECTIVES);
100:       assertEquals(2, Node.POST_FLAG);
101:       assertEquals(56, Node.CHANGE_TIME);
102:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
103:       assertEquals(47, Node.IS_DISPATCHER);
104:       assertEquals(39, Node.EMPTY_BLOCK);
105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
106:       assertEquals(29, Node.JSDOC_INFO_PROP);
107:       assertEquals(8, Node.FLAG_NO_THROWS);
108:       assertEquals(55, Node.INFERRED_FUNCTION);
109:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
110:       assertEquals(57, Node.LAST_PROP);
111:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
112:       assertEquals(54, Node.SLASH_V);
113:       assertEquals(15, Node.NO_SIDE_EFFECTS);
114:       assertEquals(30, Node.VAR_ARGS_NAME);
115:       assertEquals(52, Node.LENGTH);
116:       assertEquals(51, Node.STATIC_SOURCE_FILE);
117:       assertEquals(46, Node.IS_NAMESPACE);
118:       assertEquals(40, Node.ORIGINALNAME_PROP);
119:       assertEquals(57, Node.REFLECTED_OBJECT);
120:       assertEquals(49, Node.DIRECT_EVAL);
121:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
122:       assertEquals(37, Node.OPT_ARG_NAME);
123:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
124:       assertEquals(50, Node.FREE_CALL);
125:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
126:       assertEquals(12, Node.COLUMN_BITS);
127:       assertEquals(32, Node.INCRDECR_PROP);
128:       assertEquals(1, Node.DECR_FLAG);
129:       
130:       node0.setLength(1953);
131:       assertFalse(node0.hasChildren());
132:       assertFalse(node0.isGetElem());
133:       assertFalse(node0.isCast());
134:       assertFalse(node0.isNumber());
135:       assertEquals((-1), node0.getSourcePosition());
136:       assertFalse(node0.isDec());
137:       assertFalse(node0.isOr());
138:       assertFalse(node0.isAssign());
139:       assertFalse(node0.isTypeOf());
140:       assertEquals((-1), node0.getLineno());
141:       assertFalse(node0.isExprResult());
142:       assertFalse(node0.isLabelName());
143:       assertFalse(node0.isContinue());
144:       assertFalse(node0.isAssignAdd());
145:       assertFalse(node0.isLabel());
146:       assertFalse(node0.isVar());
147:       assertFalse(node0.isAdd());
148:       assertFalse(node0.isNew());
149:       assertFalse(node0.isDo());
150:       assertFalse(node0.isBreak());
151:       assertFalse(node0.isThrow());
152:       assertFalse(node0.isCall());
153:       assertFalse(node0.isNull());
154:       assertFalse(node0.isComma());
155:       assertFalse(node0.isFalse());
156:       assertFalse(node0.isAnd());
157:       assertFalse(node0.isName());
158:       assertFalse(node0.isWhile());
159:       assertFalse(node0.isDebugger());
160:       assertFalse(node0.isNot());
161:       assertFalse(node0.isObjectLit());
162:       assertFalse(node0.isReturn());
163:       assertFalse(node0.isGetProp());
164:       assertFalse(node0.isIf());
165:       assertFalse(node0.isFor());
166:       assertFalse(node0.isNE());
167:       assertFalse(node0.isEmpty());
168:       assertFalse(node0.isGetterDef());
169:       assertFalse(node0.isTrue());
170:       assertFalse(node0.isArrayLit());
171:       assertFalse(node0.isDelProp());
172:       assertFalse(node0.isVoid());
173:       assertEquals(40, node0.getType());
174:       assertFalse(node0.isFunction());
175:       assertEquals(0, node0.getChildCount());
176:       assertFalse(node0.isIn());
177:       assertFalse(node0.isSetterDef());
178:       assertFalse(node0.isInc());
179:       assertFalse(node0.isDefaultCase());
180:       assertFalse(node0.isStringKey());
181:       assertFalse(node0.isThis());
182:       assertFalse(node0.isInstanceOf());
183:       assertFalse(node0.isSwitch());
184:       assertFalse(node0.isParamList());
185:       assertFalse(node0.isWith());
186:       assertFalse(node0.isCase());
187:       assertFalse(node0.isScript());
188:       assertFalse(node0.hasMoreThanOneChild());
189:       assertFalse(node0.isCatch());
190:       assertEquals((-1), node0.getCharno());
191:       assertFalse(node0.isRegExp());
192:       assertFalse(node0.isBlock());
193:       assertFalse(node0.isHook());
194:       assertFalse(node0.hasOneChild());
195:       assertFalse(node0.isTry());
196:       assertTrue(node0.isString());
197:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
198:       assertEquals(43, Node.IS_CONSTANT_NAME);
199:       assertEquals(36, Node.QUOTED_PROP);
200:       assertEquals(53, Node.INPUT_ID);
201:       assertEquals(4095, Node.COLUMN_MASK);
202:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
203:       assertEquals(48, Node.DIRECTIVES);
204:       assertEquals(2, Node.POST_FLAG);
205:       assertEquals(56, Node.CHANGE_TIME);
206:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
207:       assertEquals(47, Node.IS_DISPATCHER);
208:       assertEquals(39, Node.EMPTY_BLOCK);
209:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
210:       assertEquals(29, Node.JSDOC_INFO_PROP);
211:       assertEquals(8, Node.FLAG_NO_THROWS);
212:       assertEquals(55, Node.INFERRED_FUNCTION);
213:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
214:       assertEquals(57, Node.LAST_PROP);
215:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
216:       assertEquals(54, Node.SLASH_V);
217:       assertEquals(15, Node.NO_SIDE_EFFECTS);
218:       assertEquals(30, Node.VAR_ARGS_NAME);
219:       assertEquals(52, Node.LENGTH);
220:       assertEquals(51, Node.STATIC_SOURCE_FILE);
221:       assertEquals(46, Node.IS_NAMESPACE);
222:       assertEquals(40, Node.ORIGINALNAME_PROP);
223:       assertEquals(57, Node.REFLECTED_OBJECT);
224:       assertEquals(49, Node.DIRECT_EVAL);
225:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
226:       assertEquals(37, Node.OPT_ARG_NAME);
227:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
228:       assertEquals(50, Node.FREE_CALL);
229:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
230:       assertEquals(12, Node.COLUMN_BITS);
231:       assertEquals(32, Node.INCRDECR_PROP);
232:       assertEquals(1, Node.DECR_FLAG);
233:       
234:       int int0 = Node.IS_DISPATCHER;
235:       assertEquals(47, int0);
236:       
237:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
238:       assertNotNull(node_SideEffectFlags0);
239:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
240:       assertEquals(0, node_SideEffectFlags0.valueOf());
241:       
242:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
243:       assertNotNull(node_SideEffectFlags1);
244:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
245:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
246:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
247:       assertEquals(0, node_SideEffectFlags0.valueOf());
248:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
249:       assertEquals(0, node_SideEffectFlags1.valueOf());
250:       
251:       Iterable<Node> iterable0 = node0.children();
252:       assertFalse(iterable0.contains(node0));
253:       assertNotNull(iterable0);
254:       assertFalse(node0.hasChildren());
255:       assertFalse(node0.isGetElem());
256:       assertFalse(node0.isCast());
257:       assertFalse(node0.isNumber());
258:       assertEquals((-1), node0.getSourcePosition());
259:       assertFalse(node0.isDec());
260:       assertFalse(node0.isOr());
261:       assertFalse(node0.isAssign());
262:       assertFalse(node0.isTypeOf());
263:       assertEquals((-1), node0.getLineno());
264:       assertFalse(node0.isExprResult());
265:       assertFalse(node0.isLabelName());
266:       assertFalse(node0.isContinue());
267:       assertFalse(node0.isAssignAdd());
268:       assertFalse(node0.isLabel());
269:       assertFalse(node0.isVar());
270:       assertFalse(node0.isAdd());
271:       assertFalse(node0.isNew());
272:       assertFalse(node0.isDo());
273:       assertFalse(node0.isBreak());
274:       assertFalse(node0.isThrow());
275:       assertFalse(node0.isCall());
276:       assertFalse(node0.isNull());
277:       assertFalse(node0.isComma());
278:       assertFalse(node0.isFalse());
279:       assertFalse(node0.isAnd());
280:       assertFalse(node0.isName());
281:       assertFalse(node0.isWhile());
282:       assertFalse(node0.isDebugger());
283:       assertFalse(node0.isNot());
284:       assertFalse(node0.isObjectLit());
285:       assertFalse(node0.isReturn());
286:       assertFalse(node0.isGetProp());
287:       assertFalse(node0.isIf());
288:       assertFalse(node0.isFor());
289:       assertFalse(node0.isNE());
290:       assertFalse(node0.isEmpty());
291:       assertFalse(node0.isGetterDef());
292:       assertFalse(node0.isTrue());
293:       assertFalse(node0.isArrayLit());
294:       assertFalse(node0.isDelProp());
295:       assertFalse(node0.isVoid());
296:       assertEquals(40, node0.getType());
297:       assertFalse(node0.isFunction());
298:       assertEquals(0, node0.getChildCount());
299:       assertFalse(node0.isIn());
300:       assertFalse(node0.isSetterDef());
301:       assertFalse(node0.isInc());
302:       assertFalse(node0.isDefaultCase());
303:       assertFalse(node0.isStringKey());
304:       assertFalse(node0.isThis());
305:       assertFalse(node0.isInstanceOf());
306:       assertFalse(node0.isSwitch());
307:       assertFalse(node0.isParamList());
308:       assertFalse(node0.isWith());
309:       assertFalse(node0.isCase());
310:       assertFalse(node0.isScript());
311:       assertFalse(node0.hasMoreThanOneChild());
312:       assertFalse(node0.isCatch());
313:       assertEquals((-1), node0.getCharno());
314:       assertFalse(node0.isRegExp());
315:       assertFalse(node0.isBlock());
316:       assertFalse(node0.isHook());
317:       assertFalse(node0.hasOneChild());
318:       assertFalse(node0.isTry());
319:       assertTrue(node0.isString());
320:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
321:       assertEquals(43, Node.IS_CONSTANT_NAME);
322:       assertEquals(36, Node.QUOTED_PROP);
323:       assertEquals(53, Node.INPUT_ID);
324:       assertEquals(4095, Node.COLUMN_MASK);
325:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
326:       assertEquals(48, Node.DIRECTIVES);
327:       assertEquals(2, Node.POST_FLAG);
328:       assertEquals(56, Node.CHANGE_TIME);
329:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
330:       assertEquals(47, Node.IS_DISPATCHER);
331:       assertEquals(39, Node.EMPTY_BLOCK);
332:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
333:       assertEquals(29, Node.JSDOC_INFO_PROP);
334:       assertEquals(8, Node.FLAG_NO_THROWS);
335:       assertEquals(55, Node.INFERRED_FUNCTION);
336:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
337:       assertEquals(57, Node.LAST_PROP);
338:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
339:       assertEquals(54, Node.SLASH_V);
340:       assertEquals(15, Node.NO_SIDE_EFFECTS);
341:       assertEquals(30, Node.VAR_ARGS_NAME);
342:       assertEquals(52, Node.LENGTH);
343:       assertEquals(51, Node.STATIC_SOURCE_FILE);
344:       assertEquals(46, Node.IS_NAMESPACE);
345:       assertEquals(40, Node.ORIGINALNAME_PROP);
346:       assertEquals(57, Node.REFLECTED_OBJECT);
347:       assertEquals(49, Node.DIRECT_EVAL);
348:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
349:       assertEquals(37, Node.OPT_ARG_NAME);
350:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
351:       assertEquals(50, Node.FREE_CALL);
352:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
353:       assertEquals(12, Node.COLUMN_BITS);
354:       assertEquals(32, Node.INCRDECR_PROP);
355:       assertEquals(1, Node.DECR_FLAG);
356:       
357:       boolean boolean0 = node0.isVoid();
358:       assertFalse(boolean0);
359:       assertFalse(node0.hasChildren());
360:       assertFalse(node0.isGetElem());
361:       assertFalse(node0.isCast());
362:       assertFalse(node0.isNumber());
363:       assertEquals((-1), node0.getSourcePosition());
364:       assertFalse(node0.isDec());
365:       assertFalse(node0.isOr());
366:       assertFalse(node0.isAssign());
367:       assertFalse(node0.isTypeOf());
368:       assertEquals((-1), node0.getLineno());
369:       assertFalse(node0.isExprResult());
370:       assertFalse(node0.isLabelName());
371:       assertFalse(node0.isContinue());
372:       assertFalse(node0.isAssignAdd());
373:       assertFalse(node0.isLabel());
374:       assertFalse(node0.isVar());
375:       assertFalse(node0.isAdd());
376:       assertFalse(node0.isNew());
377:       assertFalse(node0.isDo());
378:       assertFalse(node0.isBreak());
379:       assertFalse(node0.isThrow());
380:       assertFalse(node0.isCall());
381:       assertFalse(node0.isNull());
382:       assertFalse(node0.isComma());
383:       assertFalse(node0.isFalse());
384:       assertFalse(node0.isAnd());
385:       assertFalse(node0.isName());
386:       assertFalse(node0.isWhile());
387:       assertFalse(node0.isDebugger());
388:       assertFalse(node0.isNot());
389:       assertFalse(node0.isObjectLit());
390:       assertFalse(node0.isReturn());
391:       assertFalse(node0.isGetProp());
392:       assertFalse(node0.isIf());
393:       assertFalse(node0.isFor());
394:       assertFalse(node0.isNE());
395:       assertFalse(node0.isEmpty());
396:       assertFalse(node0.isGetterDef());
397:       assertFalse(node0.isTrue());
398:       assertFalse(node0.isArrayLit());
399:       assertFalse(node0.isDelProp());
400:       assertFalse(node0.isVoid());
401:       assertEquals(40, node0.getType());
402:       assertFalse(node0.isFunction());
403:       assertEquals(0, node0.getChildCount());
404:       assertFalse(node0.isIn());
405:       assertFalse(node0.isSetterDef());
406:       assertFalse(node0.isInc());
407:       assertFalse(node0.isDefaultCase());
408:       assertFalse(node0.isStringKey());
409:       assertFalse(node0.isThis());
410:       assertFalse(node0.isInstanceOf());
411:       assertFalse(node0.isSwitch());
412:       assertFalse(node0.isParamList());
413:       assertFalse(node0.isWith());
414:       assertFalse(node0.isCase());
415:       assertFalse(node0.isScript());
416:       assertFalse(node0.hasMoreThanOneChild());
417:       assertFalse(node0.isCatch());
418:       assertEquals((-1), node0.getCharno());
419:       assertFalse(node0.isRegExp());
420:       assertFalse(node0.isBlock());
421:       assertFalse(node0.isHook());
422:       assertFalse(node0.hasOneChild());
423:       assertFalse(node0.isTry());
424:       assertTrue(node0.isString());
425:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
426:       assertEquals(43, Node.IS_CONSTANT_NAME);
427:       assertEquals(36, Node.QUOTED_PROP);
428:       assertEquals(53, Node.INPUT_ID);
429:       assertEquals(4095, Node.COLUMN_MASK);
430:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
431:       assertEquals(48, Node.DIRECTIVES);
432:       assertEquals(2, Node.POST_FLAG);
433:       assertEquals(56, Node.CHANGE_TIME);
434:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
435:       assertEquals(47, Node.IS_DISPATCHER);
436:       assertEquals(39, Node.EMPTY_BLOCK);
437:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
438:       assertEquals(29, Node.JSDOC_INFO_PROP);
439:       assertEquals(8, Node.FLAG_NO_THROWS);
440:       assertEquals(55, Node.INFERRED_FUNCTION);
441:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
442:       assertEquals(57, Node.LAST_PROP);
443:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
444:       assertEquals(54, Node.SLASH_V);
445:       assertEquals(15, Node.NO_SIDE_EFFECTS);
446:       assertEquals(30, Node.VAR_ARGS_NAME);
447:       assertEquals(52, Node.LENGTH);
448:       assertEquals(51, Node.STATIC_SOURCE_FILE);
449:       assertEquals(46, Node.IS_NAMESPACE);
450:       assertEquals(40, Node.ORIGINALNAME_PROP);
451:       assertEquals(57, Node.REFLECTED_OBJECT);
452:       assertEquals(49, Node.DIRECT_EVAL);
453:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
454:       assertEquals(37, Node.OPT_ARG_NAME);
455:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
456:       assertEquals(50, Node.FREE_CALL);
457:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
458:       assertEquals(12, Node.COLUMN_BITS);
459:       assertEquals(32, Node.INCRDECR_PROP);
460:       assertEquals(1, Node.DECR_FLAG);
461:       
462:       boolean boolean1 = node0.isDebugger();
463:       assertFalse(boolean1);
464:       assertTrue(boolean1 == boolean0);
465:       assertFalse(node0.hasChildren());
466:       assertFalse(node0.isGetElem());
467:       assertFalse(node0.isCast());
468:       assertFalse(node0.isNumber());
469:       assertEquals((-1), node0.getSourcePosition());
470:       assertFalse(node0.isDec());
471:       assertFalse(node0.isOr());
472:       assertFalse(node0.isAssign());
473:       assertFalse(node0.isTypeOf());
474:       assertEquals((-1), node0.getLineno());
475:       assertFalse(node0.isExprResult());
476:       assertFalse(node0.isLabelName());
477:       assertFalse(node0.isContinue());
478:       assertFalse(node0.isAssignAdd());
479:       assertFalse(node0.isLabel());
480:       assertFalse(node0.isVar());
481:       assertFalse(node0.isAdd());
482:       assertFalse(node0.isNew());
483:       assertFalse(node0.isDo());
484:       assertFalse(node0.isBreak());
485:       assertFalse(node0.isThrow());
486:       assertFalse(node0.isCall());
487:       assertFalse(node0.isNull());
488:       assertFalse(node0.isComma());
489:       assertFalse(node0.isFalse());
490:       assertFalse(node0.isAnd());
491:       assertFalse(node0.isName());
492:       assertFalse(node0.isWhile());
493:       assertFalse(node0.isDebugger());
494:       assertFalse(node0.isNot());
495:       assertFalse(node0.isObjectLit());
496:       assertFalse(node0.isReturn());
497:       assertFalse(node0.isGetProp());
498:       assertFalse(node0.isIf());
499:       assertFalse(node0.isFor());
500:       assertFalse(node0.isNE());
501:       assertFalse(node0.isEmpty());
502:       assertFalse(node0.isGetterDef());
503:       assertFalse(node0.isTrue());
504:       assertFalse(node0.isArrayLit());
505:       assertFalse(node0.isDelProp());
506:       assertFalse(node0.isVoid());
507:       assertEquals(40, node0.getType());
508:       assertFalse(node0.isFunction());
509:       assertEquals(0, node0.getChildCount());
510:       assertFalse(node0.isIn());
511:       assertFalse(node0.isSetterDef());
512:       assertFalse(node0.isInc());
513:       assertFalse(node0.isDefaultCase());
514:       assertFalse(node0.isStringKey());
515:       assertFalse(node0.isThis());
516:       assertFalse(node0.isInstanceOf());
517:       assertFalse(node0.isSwitch());
518:       assertFalse(node0.isParamList());
519:       assertFalse(node0.isWith());
520:       assertFalse(node0.isCase());
521:       assertFalse(node0.isScript());
522:       assertFalse(node0.hasMoreThanOneChild());
523:       assertFalse(node0.isCatch());
524:       assertEquals((-1), node0.getCharno());
525:       assertFalse(node0.isRegExp());
526:       assertFalse(node0.isBlock());
527:       assertFalse(node0.isHook());
528:       assertFalse(node0.hasOneChild());
529:       assertFalse(node0.isTry());
530:       assertTrue(node0.isString());
531:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
532:       assertEquals(43, Node.IS_CONSTANT_NAME);
533:       assertEquals(36, Node.QUOTED_PROP);
534:       assertEquals(53, Node.INPUT_ID);
535:       assertEquals(4095, Node.COLUMN_MASK);
536:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
537:       assertEquals(48, Node.DIRECTIVES);
538:       assertEquals(2, Node.POST_FLAG);
539:       assertEquals(56, Node.CHANGE_TIME);
540:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
541:       assertEquals(47, Node.IS_DISPATCHER);
542:       assertEquals(39, Node.EMPTY_BLOCK);
543:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
544:       assertEquals(29, Node.JSDOC_INFO_PROP);
545:       assertEquals(8, Node.FLAG_NO_THROWS);
546:       assertEquals(55, Node.INFERRED_FUNCTION);
547:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
548:       assertEquals(57, Node.LAST_PROP);
549:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
550:       assertEquals(54, Node.SLASH_V);
551:       assertEquals(15, Node.NO_SIDE_EFFECTS);
552:       assertEquals(30, Node.VAR_ARGS_NAME);
553:       assertEquals(52, Node.LENGTH);
554:       assertEquals(51, Node.STATIC_SOURCE_FILE);
555:       assertEquals(46, Node.IS_NAMESPACE);
556:       assertEquals(40, Node.ORIGINALNAME_PROP);
557:       assertEquals(57, Node.REFLECTED_OBJECT);
558:       assertEquals(49, Node.DIRECT_EVAL);
559:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
560:       assertEquals(37, Node.OPT_ARG_NAME);
561:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
562:       assertEquals(50, Node.FREE_CALL);
563:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
564:       assertEquals(12, Node.COLUMN_BITS);
565:       assertEquals(32, Node.INCRDECR_PROP);
566:       assertEquals(1, Node.DECR_FLAG);
567:       
568:       boolean boolean2 = node0.isCall();
569:       assertFalse(boolean2);
570:       assertTrue(boolean2 == boolean0);
571:       assertTrue(boolean2 == boolean1);
572:       assertFalse(node0.hasChildren());
573:       assertFalse(node0.isGetElem());
574:       assertFalse(node0.isCast());
575:       assertFalse(node0.isNumber());
576:       assertEquals((-1), node0.getSourcePosition());
577:       assertFalse(node0.isDec());
578:       assertFalse(node0.isOr());
579:       assertFalse(node0.isAssign());
580:       assertFalse(node0.isTypeOf());
581:       assertEquals((-1), node0.getLineno());
582:       assertFalse(node0.isExprResult());
583:       assertFalse(node0.isLabelName());
584:       assertFalse(node0.isContinue());
585:       assertFalse(node0.isAssignAdd());
586:       assertFalse(node0.isLabel());
587:       assertFalse(node0.isVar());
588:       assertFalse(node0.isAdd());
589:       assertFalse(node0.isNew());
590:       assertFalse(node0.isDo());
591:       assertFalse(node0.isBreak());
592:       assertFalse(node0.isThrow());
593:       assertFalse(node0.isCall());
594:       assertFalse(node0.isNull());
595:       assertFalse(node0.isComma());
596:       assertFalse(node0.isFalse());
597:       assertFalse(node0.isAnd());
598:       assertFalse(node0.isName());
599:       assertFalse(node0.isWhile());
600:       assertFalse(node0.isDebugger());
601:       assertFalse(node0.isNot());
602:       assertFalse(node0.isObjectLit());
603:       assertFalse(node0.isReturn());
604:       assertFalse(node0.isGetProp());
605:       assertFalse(node0.isIf());
606:       assertFalse(node0.isFor());
607:       assertFalse(node0.isNE());
608:       assertFalse(node0.isEmpty());
609:       assertFalse(node0.isGetterDef());
610:       assertFalse(node0.isTrue());
611:       assertFalse(node0.isArrayLit());
612:       assertFalse(node0.isDelProp());
613:       assertFalse(node0.isVoid());
614:       assertEquals(40, node0.getType());
615:       assertFalse(node0.isFunction());
616:       assertEquals(0, node0.getChildCount());
617:       assertFalse(node0.isIn());
618:       assertFalse(node0.isSetterDef());
619:       assertFalse(node0.isInc());
620:       assertFalse(node0.isDefaultCase());
621:       assertFalse(node0.isStringKey());
622:       assertFalse(node0.isThis());
623:       assertFalse(node0.isInstanceOf());
624:       assertFalse(node0.isSwitch());
625:       assertFalse(node0.isParamList());
626:       assertFalse(node0.isWith());
627:       assertFalse(node0.isCase());
628:       assertFalse(node0.isScript());
629:       assertFalse(node0.hasMoreThanOneChild());
630:       assertFalse(node0.isCatch());
631:       assertEquals((-1), node0.getCharno());
632:       assertFalse(node0.isRegExp());
633:       assertFalse(node0.isBlock());
634:       assertFalse(node0.isHook());
635:       assertFalse(node0.hasOneChild());
636:       assertFalse(node0.isTry());
637:       assertTrue(node0.isString());
638:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
639:       assertEquals(43, Node.IS_CONSTANT_NAME);
640:       assertEquals(36, Node.QUOTED_PROP);
641:       assertEquals(53, Node.INPUT_ID);
642:       assertEquals(4095, Node.COLUMN_MASK);
643:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
644:       assertEquals(48, Node.DIRECTIVES);
645:       assertEquals(2, Node.POST_FLAG);
646:       assertEquals(56, Node.CHANGE_TIME);
647:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
648:       assertEquals(47, Node.IS_DISPATCHER);
649:       assertEquals(39, Node.EMPTY_BLOCK);
650:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
651:       assertEquals(29, Node.JSDOC_INFO_PROP);
652:       assertEquals(8, Node.FLAG_NO_THROWS);
653:       assertEquals(55, Node.INFERRED_FUNCTION);
654:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
655:       assertEquals(57, Node.LAST_PROP);
656:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
657:       assertEquals(54, Node.SLASH_V);
658:       assertEquals(15, Node.NO_SIDE_EFFECTS);
659:       assertEquals(30, Node.VAR_ARGS_NAME);
660:       assertEquals(52, Node.LENGTH);
661:       assertEquals(51, Node.STATIC_SOURCE_FILE);
662:       assertEquals(46, Node.IS_NAMESPACE);
663:       assertEquals(40, Node.ORIGINALNAME_PROP);
664:       assertEquals(57, Node.REFLECTED_OBJECT);
665:       assertEquals(49, Node.DIRECT_EVAL);
666:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
667:       assertEquals(37, Node.OPT_ARG_NAME);
668:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
669:       assertEquals(50, Node.FREE_CALL);
670:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
671:       assertEquals(12, Node.COLUMN_BITS);
672:       assertEquals(32, Node.INCRDECR_PROP);
673:       assertEquals(1, Node.DECR_FLAG);
674:       
675:       Node node1 = new Node((-2846));
676:       assertNotNull(node1);
677:       assertFalse(node1.equals((Object)node0));
678:       assertFalse(node1.isComma());
679:       assertFalse(node1.isThis());
680:       assertFalse(node1.isBreak());
681:       assertFalse(node1.isGetProp());
682:       assertFalse(node1.isThrow());
683:       assertFalse(node1.isHook());
684:       assertFalse(node1.isInstanceOf());
685:       assertFalse(node1.isFalse());
686:       assertFalse(node1.isWith());
687:       assertFalse(node1.isInc());
688:       assertFalse(node1.isExprResult());
689:       assertFalse(node1.isIn());
690:       assertFalse(node1.isNumber());
691:       assertFalse(node1.isGetterDef());
692:       assertFalse(node1.isNE());
693:       assertFalse(node1.isFor());
694:       assertFalse(node1.isLabelName());
695:       assertFalse(node1.isAssignAdd());
696:       assertFalse(node1.isIf());
697:       assertFalse(node1.isArrayLit());
698:       assertEquals((-1), node1.getLineno());
699:       assertFalse(node1.isLabel());
700:       assertFalse(node1.hasMoreThanOneChild());
701:       assertFalse(node1.isRegExp());
702:       assertFalse(node1.isScript());
703:       assertEquals((-1), node1.getCharno());
704:       assertFalse(node1.isBlock());
705:       assertFalse(node1.isCase());
706:       assertFalse(node1.isTry());
707:       assertFalse(node1.isSwitch());
708:       assertFalse(node1.hasOneChild());
709:       assertFalse(node1.isNull());
710:       assertFalse(node1.isSetterDef());
711:       assertFalse(node1.isStringKey());
712:       assertFalse(node1.isName());
713:       assertFalse(node1.isParamList());
714:       assertFalse(node1.isVar());
715:       assertFalse(node1.isCatch());
716:       assertEquals(0, node1.getChildCount());
717:       assertFalse(node1.isCall());
718:       assertFalse(node1.isTrue());
719:       assertFalse(node1.isNew());
720:       assertFalse(node1.isDo());
721:       assertFalse(node1.isVoid());
722:       assertFalse(node1.isDefaultCase());
723:       assertFalse(node1.isAdd());
724:       assertFalse(node1.isOr());
725:       assertFalse(node1.isEmpty());
726:       assertEquals((-1), node1.getSourcePosition());
727:       assertFalse(node1.isDec());
728:       assertFalse(node1.isTypeOf());
729:       assertFalse(node1.isDelProp());
730:       assertFalse(node1.hasChildren());
731:       assertFalse(node1.isCast());
732:       assertFalse(node1.isReturn());
733:       assertEquals((-2846), node1.getType());
734:       assertFalse(node1.isGetElem());
735:       assertFalse(node1.isAssign());
736:       assertFalse(node1.isFunction());
737:       assertFalse(node1.isContinue());
738:       assertFalse(node1.isDebugger());
739:       assertFalse(node1.isWhile());
740:       assertFalse(node1.isAnd());
741:       assertFalse(node1.isNot());
742:       assertFalse(node1.isString());
743:       assertFalse(node1.isObjectLit());
744:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
745:       assertEquals(54, Node.SLASH_V);
746:       assertEquals(57, Node.LAST_PROP);
747:       assertEquals(57, Node.REFLECTED_OBJECT);
748:       assertEquals(40, Node.ORIGINALNAME_PROP);
749:       assertEquals(30, Node.VAR_ARGS_NAME);
750:       assertEquals(49, Node.DIRECT_EVAL);
751:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
752:       assertEquals(48, Node.DIRECTIVES);
753:       assertEquals(2, Node.POST_FLAG);
754:       assertEquals(39, Node.EMPTY_BLOCK);
755:       assertEquals(37, Node.OPT_ARG_NAME);
756:       assertEquals(47, Node.IS_DISPATCHER);
757:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
758:       assertEquals(56, Node.CHANGE_TIME);
759:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
760:       assertEquals(15, Node.NO_SIDE_EFFECTS);
761:       assertEquals(55, Node.INFERRED_FUNCTION);
762:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
763:       assertEquals(29, Node.JSDOC_INFO_PROP);
764:       assertEquals(52, Node.LENGTH);
765:       assertEquals(8, Node.FLAG_NO_THROWS);
766:       assertEquals(53, Node.INPUT_ID);
767:       assertEquals(36, Node.QUOTED_PROP);
768:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
769:       assertEquals(43, Node.IS_CONSTANT_NAME);
770:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
771:       assertEquals(4095, Node.COLUMN_MASK);
772:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
773:       assertEquals(12, Node.COLUMN_BITS);
774:       assertEquals(32, Node.INCRDECR_PROP);
775:       assertEquals(46, Node.IS_NAMESPACE);
776:       assertEquals(1, Node.DECR_FLAG);
777:       assertEquals(50, Node.FREE_CALL);
778:       assertEquals(51, Node.STATIC_SOURCE_FILE);
779:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
780:       
781:       // Undeclared exception!
782:       try { 
783:         node0.getChildBefore(node1);
784:         fail("Expecting exception: NullPointerException");
785:       
786:       } catch(NullPointerException e) {
787:          //
788:          // no message in exception (getMessage() returned null)
789:          //
790:          verifyException("com.google.javascript.rhino.Node", e);
791:       }
792:   }
793: }
RegularFileObject[/tmp/EvoSuite_178_1628159328139/com/google/javascript/rhino/Node_178_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:48 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_178_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_178_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_178_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.NamedType",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.JSDocInfo$Marker",
356:       "com.google.common.collect.ImmutableSet",
357:       "com.google.common.collect.EmptyImmutableSet",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 10:28:48.197 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("change_time");
assertNotNull(node0);
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

node0.setLength(1953);
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

int int0 = Node.IS_DISPATCHER;
assertEquals(47, int0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

boolean boolean0 = node0.isVoid();
assertFalse(boolean0);
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

boolean boolean1 = node0.isDebugger();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

boolean boolean2 = node0.isCall();
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

Node node1 = new Node((-2846));
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertEquals((-2846), node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

node0.getChildBefore(node1);

[MASTER] 10:28:54.586 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_212_1628159334213/com/google/javascript/rhino/Node_212_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_212_1628159334213/com/google/javascript/rhino/Node_212_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:54.586 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:54.586 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:54.586 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1206
[MASTER] 10:28:54.588 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_212_1628159334213/com/google/javascript/rhino/Node_212_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:54 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_212_tmp__ESTest extends Node_212_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newString("BITNOT", 2786, (-824));
24:       assertNotNull(node0);
25:       assertFalse(node0.isCast());
26:       assertFalse(node0.hasOneChild());
27:       assertFalse(node0.isLabelName());
28:       assertFalse(node0.isAssign());
29:       assertFalse(node0.isGetElem());
30:       assertFalse(node0.isExprResult());
31:       assertFalse(node0.isNumber());
32:       assertEquals((-1), node0.getSourcePosition());
33:       assertFalse(node0.isOr());
34:       assertFalse(node0.isContinue());
35:       assertFalse(node0.isAnd());
36:       assertFalse(node0.isDo());
37:       assertFalse(node0.isNew());
38:       assertFalse(node0.isAssignAdd());
39:       assertFalse(node0.isLabel());
40:       assertFalse(node0.isThrow());
41:       assertFalse(node0.isVar());
42:       assertFalse(node0.isFalse());
43:       assertFalse(node0.isName());
44:       assertFalse(node0.isBreak());
45:       assertFalse(node0.isCall());
46:       assertFalse(node0.isAdd());
47:       assertFalse(node0.isNull());
48:       assertFalse(node0.isNot());
49:       assertFalse(node0.isObjectLit());
50:       assertFalse(node0.isGetProp());
51:       assertFalse(node0.isComma());
52:       assertFalse(node0.isDec());
53:       assertFalse(node0.isTypeOf());
54:       assertFalse(node0.isReturn());
55:       assertFalse(node0.isWhile());
56:       assertFalse(node0.hasChildren());
57:       assertFalse(node0.isArrayLit());
58:       assertFalse(node0.isEmpty());
59:       assertFalse(node0.isDebugger());
60:       assertFalse(node0.isGetterDef());
61:       assertFalse(node0.isDelProp());
62:       assertFalse(node0.isVoid());
63:       assertFalse(node0.isIf());
64:       assertFalse(node0.isTrue());
65:       assertFalse(node0.isNE());
66:       assertEquals(0, node0.getChildCount());
67:       assertFalse(node0.isIn());
68:       assertFalse(node0.isSetterDef());
69:       assertFalse(node0.isInc());
70:       assertFalse(node0.isFunction());
71:       assertFalse(node0.isDefaultCase());
72:       assertEquals(40, node0.getType());
73:       assertFalse(node0.isSwitch());
74:       assertFalse(node0.isParamList());
75:       assertEquals((-1), node0.getCharno());
76:       assertFalse(node0.isStringKey());
77:       assertFalse(node0.hasMoreThanOneChild());
78:       assertFalse(node0.isCatch());
79:       assertFalse(node0.isWith());
80:       assertEquals((-1), node0.getLineno());
81:       assertFalse(node0.isCase());
82:       assertFalse(node0.isInstanceOf());
83:       assertFalse(node0.isScript());
84:       assertFalse(node0.isThis());
85:       assertFalse(node0.isTry());
86:       assertFalse(node0.isRegExp());
87:       assertTrue(node0.isString());
88:       assertFalse(node0.isBlock());
89:       assertFalse(node0.isHook());
90:       assertFalse(node0.isFor());
91:       assertEquals(55, Node.INFERRED_FUNCTION);
92:       assertEquals(4095, Node.COLUMN_MASK);
93:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
94:       assertEquals(53, Node.INPUT_ID);
95:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
96:       assertEquals(48, Node.DIRECTIVES);
97:       assertEquals(8, Node.FLAG_NO_THROWS);
98:       assertEquals(43, Node.IS_CONSTANT_NAME);
99:       assertEquals(36, Node.QUOTED_PROP);
100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
101:       assertEquals(29, Node.JSDOC_INFO_PROP);
102:       assertEquals(40, Node.ORIGINALNAME_PROP);
103:       assertEquals(39, Node.EMPTY_BLOCK);
104:       assertEquals(2, Node.POST_FLAG);
105:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
106:       assertEquals(47, Node.IS_DISPATCHER);
107:       assertEquals(30, Node.VAR_ARGS_NAME);
108:       assertEquals(49, Node.DIRECT_EVAL);
109:       assertEquals(1, Node.DECR_FLAG);
110:       assertEquals(57, Node.LAST_PROP);
111:       assertEquals(15, Node.NO_SIDE_EFFECTS);
112:       assertEquals(52, Node.LENGTH);
113:       assertEquals(56, Node.CHANGE_TIME);
114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
115:       assertEquals(46, Node.IS_NAMESPACE);
116:       assertEquals(54, Node.SLASH_V);
117:       assertEquals(57, Node.REFLECTED_OBJECT);
118:       assertEquals(50, Node.FREE_CALL);
119:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
121:       assertEquals(37, Node.OPT_ARG_NAME);
122:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
123:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
124:       assertEquals(32, Node.INCRDECR_PROP);
125:       assertEquals(12, Node.COLUMN_BITS);
126:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
127:       
128:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
129:       assertNull(staticSourceFile0);
130:       assertFalse(node0.isCast());
131:       assertFalse(node0.hasOneChild());
132:       assertFalse(node0.isLabelName());
133:       assertFalse(node0.isAssign());
134:       assertFalse(node0.isGetElem());
135:       assertFalse(node0.isExprResult());
136:       assertFalse(node0.isNumber());
137:       assertEquals((-1), node0.getSourcePosition());
138:       assertFalse(node0.isOr());
139:       assertFalse(node0.isContinue());
140:       assertFalse(node0.isAnd());
141:       assertFalse(node0.isDo());
142:       assertFalse(node0.isNew());
143:       assertFalse(node0.isAssignAdd());
144:       assertFalse(node0.isLabel());
145:       assertFalse(node0.isThrow());
146:       assertFalse(node0.isVar());
147:       assertFalse(node0.isFalse());
148:       assertFalse(node0.isName());
149:       assertFalse(node0.isBreak());
150:       assertFalse(node0.isCall());
151:       assertFalse(node0.isAdd());
152:       assertFalse(node0.isNull());
153:       assertFalse(node0.isNot());
154:       assertFalse(node0.isObjectLit());
155:       assertFalse(node0.isGetProp());
156:       assertFalse(node0.isComma());
157:       assertFalse(node0.isDec());
158:       assertFalse(node0.isTypeOf());
159:       assertFalse(node0.isReturn());
160:       assertFalse(node0.isWhile());
161:       assertFalse(node0.hasChildren());
162:       assertFalse(node0.isArrayLit());
163:       assertFalse(node0.isEmpty());
164:       assertFalse(node0.isDebugger());
165:       assertFalse(node0.isGetterDef());
166:       assertFalse(node0.isDelProp());
167:       assertFalse(node0.isVoid());
168:       assertFalse(node0.isIf());
169:       assertFalse(node0.isTrue());
170:       assertFalse(node0.isNE());
171:       assertEquals(0, node0.getChildCount());
172:       assertFalse(node0.isIn());
173:       assertFalse(node0.isSetterDef());
174:       assertFalse(node0.isInc());
175:       assertFalse(node0.isFunction());
176:       assertFalse(node0.isDefaultCase());
177:       assertEquals(40, node0.getType());
178:       assertFalse(node0.isSwitch());
179:       assertFalse(node0.isParamList());
180:       assertEquals((-1), node0.getCharno());
181:       assertFalse(node0.isStringKey());
182:       assertFalse(node0.hasMoreThanOneChild());
183:       assertFalse(node0.isCatch());
184:       assertFalse(node0.isWith());
185:       assertEquals((-1), node0.getLineno());
186:       assertFalse(node0.isCase());
187:       assertFalse(node0.isInstanceOf());
188:       assertFalse(node0.isScript());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.isTry());
191:       assertFalse(node0.isRegExp());
192:       assertTrue(node0.isString());
193:       assertFalse(node0.isBlock());
194:       assertFalse(node0.isHook());
195:       assertFalse(node0.isFor());
196:       assertEquals(55, Node.INFERRED_FUNCTION);
197:       assertEquals(4095, Node.COLUMN_MASK);
198:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
199:       assertEquals(53, Node.INPUT_ID);
200:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
201:       assertEquals(48, Node.DIRECTIVES);
202:       assertEquals(8, Node.FLAG_NO_THROWS);
203:       assertEquals(43, Node.IS_CONSTANT_NAME);
204:       assertEquals(36, Node.QUOTED_PROP);
205:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
206:       assertEquals(29, Node.JSDOC_INFO_PROP);
207:       assertEquals(40, Node.ORIGINALNAME_PROP);
208:       assertEquals(39, Node.EMPTY_BLOCK);
209:       assertEquals(2, Node.POST_FLAG);
210:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
211:       assertEquals(47, Node.IS_DISPATCHER);
212:       assertEquals(30, Node.VAR_ARGS_NAME);
213:       assertEquals(49, Node.DIRECT_EVAL);
214:       assertEquals(1, Node.DECR_FLAG);
215:       assertEquals(57, Node.LAST_PROP);
216:       assertEquals(15, Node.NO_SIDE_EFFECTS);
217:       assertEquals(52, Node.LENGTH);
218:       assertEquals(56, Node.CHANGE_TIME);
219:       assertEquals(51, Node.STATIC_SOURCE_FILE);
220:       assertEquals(46, Node.IS_NAMESPACE);
221:       assertEquals(54, Node.SLASH_V);
222:       assertEquals(57, Node.REFLECTED_OBJECT);
223:       assertEquals(50, Node.FREE_CALL);
224:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
225:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
226:       assertEquals(37, Node.OPT_ARG_NAME);
227:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
228:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
229:       assertEquals(32, Node.INCRDECR_PROP);
230:       assertEquals(12, Node.COLUMN_BITS);
231:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
232:       
233:       boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BITNOT");
234:       assertFalse(boolean0);
235:       
236:       node0.setStaticSourceFile((StaticSourceFile) null);
237:       assertFalse(node0.isCast());
238:       assertFalse(node0.hasOneChild());
239:       assertFalse(node0.isLabelName());
240:       assertFalse(node0.isAssign());
241:       assertFalse(node0.isGetElem());
242:       assertFalse(node0.isExprResult());
243:       assertFalse(node0.isNumber());
244:       assertEquals((-1), node0.getSourcePosition());
245:       assertFalse(node0.isOr());
246:       assertFalse(node0.isContinue());
247:       assertFalse(node0.isAnd());
248:       assertFalse(node0.isDo());
249:       assertFalse(node0.isNew());
250:       assertFalse(node0.isAssignAdd());
251:       assertFalse(node0.isLabel());
252:       assertFalse(node0.isThrow());
253:       assertFalse(node0.isVar());
254:       assertFalse(node0.isFalse());
255:       assertFalse(node0.isName());
256:       assertFalse(node0.isBreak());
257:       assertFalse(node0.isCall());
258:       assertFalse(node0.isAdd());
259:       assertFalse(node0.isNull());
260:       assertFalse(node0.isNot());
261:       assertFalse(node0.isObjectLit());
262:       assertFalse(node0.isGetProp());
263:       assertFalse(node0.isComma());
264:       assertFalse(node0.isDec());
265:       assertFalse(node0.isTypeOf());
266:       assertFalse(node0.isReturn());
267:       assertFalse(node0.isWhile());
268:       assertFalse(node0.hasChildren());
269:       assertFalse(node0.isArrayLit());
270:       assertFalse(node0.isEmpty());
271:       assertFalse(node0.isDebugger());
272:       assertFalse(node0.isGetterDef());
273:       assertFalse(node0.isDelProp());
274:       assertFalse(node0.isVoid());
275:       assertFalse(node0.isIf());
276:       assertFalse(node0.isTrue());
277:       assertFalse(node0.isNE());
278:       assertEquals(0, node0.getChildCount());
279:       assertFalse(node0.isIn());
280:       assertFalse(node0.isSetterDef());
281:       assertFalse(node0.isInc());
282:       assertFalse(node0.isFunction());
283:       assertFalse(node0.isDefaultCase());
284:       assertEquals(40, node0.getType());
285:       assertFalse(node0.isSwitch());
286:       assertFalse(node0.isParamList());
287:       assertEquals((-1), node0.getCharno());
288:       assertFalse(node0.isStringKey());
289:       assertFalse(node0.hasMoreThanOneChild());
290:       assertFalse(node0.isCatch());
291:       assertFalse(node0.isWith());
292:       assertEquals((-1), node0.getLineno());
293:       assertFalse(node0.isCase());
294:       assertFalse(node0.isInstanceOf());
295:       assertFalse(node0.isScript());
296:       assertFalse(node0.isThis());
297:       assertFalse(node0.isTry());
298:       assertFalse(node0.isRegExp());
299:       assertTrue(node0.isString());
300:       assertFalse(node0.isBlock());
301:       assertFalse(node0.isHook());
302:       assertFalse(node0.isFor());
303:       assertEquals(55, Node.INFERRED_FUNCTION);
304:       assertEquals(4095, Node.COLUMN_MASK);
305:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
306:       assertEquals(53, Node.INPUT_ID);
307:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
308:       assertEquals(48, Node.DIRECTIVES);
309:       assertEquals(8, Node.FLAG_NO_THROWS);
310:       assertEquals(43, Node.IS_CONSTANT_NAME);
311:       assertEquals(36, Node.QUOTED_PROP);
312:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
313:       assertEquals(29, Node.JSDOC_INFO_PROP);
314:       assertEquals(40, Node.ORIGINALNAME_PROP);
315:       assertEquals(39, Node.EMPTY_BLOCK);
316:       assertEquals(2, Node.POST_FLAG);
317:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
318:       assertEquals(47, Node.IS_DISPATCHER);
319:       assertEquals(30, Node.VAR_ARGS_NAME);
320:       assertEquals(49, Node.DIRECT_EVAL);
321:       assertEquals(1, Node.DECR_FLAG);
322:       assertEquals(57, Node.LAST_PROP);
323:       assertEquals(15, Node.NO_SIDE_EFFECTS);
324:       assertEquals(52, Node.LENGTH);
325:       assertEquals(56, Node.CHANGE_TIME);
326:       assertEquals(51, Node.STATIC_SOURCE_FILE);
327:       assertEquals(46, Node.IS_NAMESPACE);
328:       assertEquals(54, Node.SLASH_V);
329:       assertEquals(57, Node.REFLECTED_OBJECT);
330:       assertEquals(50, Node.FREE_CALL);
331:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
332:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
333:       assertEquals(37, Node.OPT_ARG_NAME);
334:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
335:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
336:       assertEquals(32, Node.INCRDECR_PROP);
337:       assertEquals(12, Node.COLUMN_BITS);
338:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
339:       
340:       String string0 = node0.getQualifiedName();
341:       assertNull(string0);
342:       assertFalse(node0.isCast());
343:       assertFalse(node0.hasOneChild());
344:       assertFalse(node0.isLabelName());
345:       assertFalse(node0.isAssign());
346:       assertFalse(node0.isGetElem());
347:       assertFalse(node0.isExprResult());
348:       assertFalse(node0.isNumber());
349:       assertEquals((-1), node0.getSourcePosition());
350:       assertFalse(node0.isOr());
351:       assertFalse(node0.isContinue());
352:       assertFalse(node0.isAnd());
353:       assertFalse(node0.isDo());
354:       assertFalse(node0.isNew());
355:       assertFalse(node0.isAssignAdd());
356:       assertFalse(node0.isLabel());
357:       assertFalse(node0.isThrow());
358:       assertFalse(node0.isVar());
359:       assertFalse(node0.isFalse());
360:       assertFalse(node0.isName());
361:       assertFalse(node0.isBreak());
362:       assertFalse(node0.isCall());
363:       assertFalse(node0.isAdd());
364:       assertFalse(node0.isNull());
365:       assertFalse(node0.isNot());
366:       assertFalse(node0.isObjectLit());
367:       assertFalse(node0.isGetProp());
368:       assertFalse(node0.isComma());
369:       assertFalse(node0.isDec());
370:       assertFalse(node0.isTypeOf());
371:       assertFalse(node0.isReturn());
372:       assertFalse(node0.isWhile());
373:       assertFalse(node0.hasChildren());
374:       assertFalse(node0.isArrayLit());
375:       assertFalse(node0.isEmpty());
376:       assertFalse(node0.isDebugger());
377:       assertFalse(node0.isGetterDef());
378:       assertFalse(node0.isDelProp());
379:       assertFalse(node0.isVoid());
380:       assertFalse(node0.isIf());
381:       assertFalse(node0.isTrue());
382:       assertFalse(node0.isNE());
383:       assertEquals(0, node0.getChildCount());
384:       assertFalse(node0.isIn());
385:       assertFalse(node0.isSetterDef());
386:       assertFalse(node0.isInc());
387:       assertFalse(node0.isFunction());
388:       assertFalse(node0.isDefaultCase());
389:       assertEquals(40, node0.getType());
390:       assertFalse(node0.isSwitch());
391:       assertFalse(node0.isParamList());
392:       assertEquals((-1), node0.getCharno());
393:       assertFalse(node0.isStringKey());
394:       assertFalse(node0.hasMoreThanOneChild());
395:       assertFalse(node0.isCatch());
396:       assertFalse(node0.isWith());
397:       assertEquals((-1), node0.getLineno());
398:       assertFalse(node0.isCase());
399:       assertFalse(node0.isInstanceOf());
400:       assertFalse(node0.isScript());
401:       assertFalse(node0.isThis());
402:       assertFalse(node0.isTry());
403:       assertFalse(node0.isRegExp());
404:       assertTrue(node0.isString());
405:       assertFalse(node0.isBlock());
406:       assertFalse(node0.isHook());
407:       assertFalse(node0.isFor());
408:       assertEquals(55, Node.INFERRED_FUNCTION);
409:       assertEquals(4095, Node.COLUMN_MASK);
410:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
411:       assertEquals(53, Node.INPUT_ID);
412:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
413:       assertEquals(48, Node.DIRECTIVES);
414:       assertEquals(8, Node.FLAG_NO_THROWS);
415:       assertEquals(43, Node.IS_CONSTANT_NAME);
416:       assertEquals(36, Node.QUOTED_PROP);
417:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
418:       assertEquals(29, Node.JSDOC_INFO_PROP);
419:       assertEquals(40, Node.ORIGINALNAME_PROP);
420:       assertEquals(39, Node.EMPTY_BLOCK);
421:       assertEquals(2, Node.POST_FLAG);
422:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
423:       assertEquals(47, Node.IS_DISPATCHER);
424:       assertEquals(30, Node.VAR_ARGS_NAME);
425:       assertEquals(49, Node.DIRECT_EVAL);
426:       assertEquals(1, Node.DECR_FLAG);
427:       assertEquals(57, Node.LAST_PROP);
428:       assertEquals(15, Node.NO_SIDE_EFFECTS);
429:       assertEquals(52, Node.LENGTH);
430:       assertEquals(56, Node.CHANGE_TIME);
431:       assertEquals(51, Node.STATIC_SOURCE_FILE);
432:       assertEquals(46, Node.IS_NAMESPACE);
433:       assertEquals(54, Node.SLASH_V);
434:       assertEquals(57, Node.REFLECTED_OBJECT);
435:       assertEquals(50, Node.FREE_CALL);
436:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
437:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
438:       assertEquals(37, Node.OPT_ARG_NAME);
439:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
440:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
441:       assertEquals(32, Node.INCRDECR_PROP);
442:       assertEquals(12, Node.COLUMN_BITS);
443:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
444:       
445:       boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
446:       assertFalse(boolean1);
447:       assertTrue(boolean1 == boolean0);
448:       
449:       boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
450:       assertFalse(boolean2);
451:       assertTrue(boolean2 == boolean0);
452:       assertTrue(boolean2 == boolean1);
453:       
454:       Node node1 = new Node(894, node0, node0, node0, 38, 8);
455:       assertNotNull(node1);
456:       assertFalse(node1.equals((Object)node0));
457:       assertFalse(node0.isCast());
458:       assertFalse(node0.hasOneChild());
459:       assertFalse(node0.isLabelName());
460:       assertFalse(node0.isAssign());
461:       assertFalse(node0.isGetElem());
462:       assertFalse(node0.isExprResult());
463:       assertFalse(node0.isNumber());
464:       assertEquals((-1), node0.getSourcePosition());
465:       assertFalse(node0.isOr());
466:       assertFalse(node0.isContinue());
467:       assertFalse(node0.isAnd());
468:       assertFalse(node0.isDo());
469:       assertFalse(node0.isNew());
470:       assertFalse(node0.isAssignAdd());
471:       assertFalse(node0.isLabel());
472:       assertFalse(node0.isThrow());
473:       assertFalse(node0.isVar());
474:       assertFalse(node0.isFalse());
475:       assertFalse(node0.isName());
476:       assertFalse(node0.isBreak());
477:       assertFalse(node0.isCall());
478:       assertFalse(node0.isAdd());
479:       assertFalse(node0.isNull());
480:       assertFalse(node0.isNot());
481:       assertFalse(node0.isObjectLit());
482:       assertFalse(node0.isGetProp());
483:       assertFalse(node0.isComma());
484:       assertFalse(node0.isDec());
485:       assertFalse(node0.isTypeOf());
486:       assertFalse(node0.isReturn());
487:       assertFalse(node0.isWhile());
488:       assertFalse(node0.hasChildren());
489:       assertFalse(node0.isArrayLit());
490:       assertFalse(node0.isEmpty());
491:       assertFalse(node0.isDebugger());
492:       assertFalse(node0.isGetterDef());
493:       assertFalse(node0.isDelProp());
494:       assertFalse(node0.isVoid());
495:       assertFalse(node0.isIf());
496:       assertFalse(node0.isTrue());
497:       assertFalse(node0.isNE());
498:       assertEquals(0, node0.getChildCount());
499:       assertFalse(node0.isIn());
500:       assertFalse(node0.isSetterDef());
501:       assertFalse(node0.isInc());
502:       assertFalse(node0.isFunction());
503:       assertFalse(node0.isDefaultCase());
504:       assertEquals(40, node0.getType());
505:       assertFalse(node0.isSwitch());
506:       assertFalse(node0.isParamList());
507:       assertEquals((-1), node0.getCharno());
508:       assertFalse(node0.isStringKey());
509:       assertFalse(node0.hasMoreThanOneChild());
510:       assertFalse(node0.isCatch());
511:       assertFalse(node0.isWith());
512:       assertEquals((-1), node0.getLineno());
513:       assertFalse(node0.isCase());
514:       assertFalse(node0.isInstanceOf());
515:       assertFalse(node0.isScript());
516:       assertFalse(node0.isThis());
517:       assertFalse(node0.isTry());
518:       assertFalse(node0.isRegExp());
519:       assertTrue(node0.isString());
520:       assertFalse(node0.isBlock());
521:       assertFalse(node0.isHook());
522:       assertFalse(node0.isFor());
523:       assertEquals(8, node1.getCharno());
524:       assertFalse(node1.isAnd());
525:       assertFalse(node1.isInstanceOf());
526:       assertFalse(node1.isWith());
527:       assertFalse(node1.isComma());
528:       assertFalse(node1.isObjectLit());
529:       assertFalse(node1.isNot());
530:       assertFalse(node1.isScript());
531:       assertFalse(node1.isThis());
532:       assertFalse(node1.isGetProp());
533:       assertFalse(node1.isHook());
534:       assertFalse(node1.isDec());
535:       assertFalse(node1.isAssign());
536:       assertFalse(node1.isTypeOf());
537:       assertFalse(node1.isBreak());
538:       assertFalse(node1.isExprResult());
539:       assertFalse(node1.isGetElem());
540:       assertFalse(node1.isIn());
541:       assertFalse(node1.isContinue());
542:       assertFalse(node1.isReturn());
543:       assertEquals(155656, node1.getSourcePosition());
544:       assertTrue(node1.hasOneChild());
545:       assertFalse(node1.isInc());
546:       assertFalse(node1.isWhile());
547:       assertFalse(node1.isString());
548:       assertFalse(node1.isThrow());
549:       assertFalse(node1.isCast());
550:       assertFalse(node1.isFalse());
551:       assertFalse(node1.isFunction());
552:       assertFalse(node1.isDebugger());
553:       assertFalse(node1.isCatch());
554:       assertFalse(node1.isDefaultCase());
555:       assertFalse(node1.isSetterDef());
556:       assertFalse(node1.isTry());
557:       assertFalse(node1.isCall());
558:       assertFalse(node1.isBlock());
559:       assertFalse(node1.isFor());
560:       assertEquals(38, node1.getLineno());
561:       assertFalse(node1.isNull());
562:       assertFalse(node1.isRegExp());
563:       assertFalse(node1.isIf());
564:       assertFalse(node1.isTrue());
565:       assertFalse(node1.isNE());
566:       assertFalse(node1.isName());
567:       assertEquals(894, node1.getType());
568:       assertFalse(node1.isDelProp());
569:       assertFalse(node1.isVoid());
570:       assertFalse(node1.hasMoreThanOneChild());
571:       assertTrue(node1.hasChildren());
572:       assertFalse(node1.isLabel());
573:       assertEquals(1, node1.getChildCount());
574:       assertFalse(node1.isOr());
575:       assertFalse(node1.isNumber());
576:       assertFalse(node1.isEmpty());
577:       assertFalse(node1.isNew());
578:       assertFalse(node1.isAdd());
579:       assertFalse(node1.isCase());
580:       assertFalse(node1.isAssignAdd());
581:       assertFalse(node1.isDo());
582:       assertFalse(node1.isArrayLit());
583:       assertFalse(node1.isVar());
584:       assertFalse(node1.isStringKey());
585:       assertFalse(node1.isGetterDef());
586:       assertFalse(node1.isSwitch());
587:       assertFalse(node1.isParamList());
588:       assertFalse(node1.isLabelName());
589:       assertEquals(55, Node.INFERRED_FUNCTION);
590:       assertEquals(4095, Node.COLUMN_MASK);
591:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
592:       assertEquals(53, Node.INPUT_ID);
593:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
594:       assertEquals(48, Node.DIRECTIVES);
595:       assertEquals(8, Node.FLAG_NO_THROWS);
596:       assertEquals(43, Node.IS_CONSTANT_NAME);
597:       assertEquals(36, Node.QUOTED_PROP);
598:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
599:       assertEquals(29, Node.JSDOC_INFO_PROP);
600:       assertEquals(40, Node.ORIGINALNAME_PROP);
601:       assertEquals(39, Node.EMPTY_BLOCK);
602:       assertEquals(2, Node.POST_FLAG);
603:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
604:       assertEquals(47, Node.IS_DISPATCHER);
605:       assertEquals(30, Node.VAR_ARGS_NAME);
606:       assertEquals(49, Node.DIRECT_EVAL);
607:       assertEquals(1, Node.DECR_FLAG);
608:       assertEquals(57, Node.LAST_PROP);
609:       assertEquals(15, Node.NO_SIDE_EFFECTS);
610:       assertEquals(52, Node.LENGTH);
611:       assertEquals(56, Node.CHANGE_TIME);
612:       assertEquals(51, Node.STATIC_SOURCE_FILE);
613:       assertEquals(46, Node.IS_NAMESPACE);
614:       assertEquals(54, Node.SLASH_V);
615:       assertEquals(57, Node.REFLECTED_OBJECT);
616:       assertEquals(50, Node.FREE_CALL);
617:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
618:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
619:       assertEquals(37, Node.OPT_ARG_NAME);
620:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
621:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
622:       assertEquals(32, Node.INCRDECR_PROP);
623:       assertEquals(12, Node.COLUMN_BITS);
624:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
625:       assertEquals(40, Node.ORIGINALNAME_PROP);
626:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
627:       assertEquals(57, Node.REFLECTED_OBJECT);
628:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
629:       assertEquals(52, Node.LENGTH);
630:       assertEquals(8, Node.FLAG_NO_THROWS);
631:       assertEquals(50, Node.FREE_CALL);
632:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
633:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
634:       assertEquals(39, Node.EMPTY_BLOCK);
635:       assertEquals(15, Node.NO_SIDE_EFFECTS);
636:       assertEquals(57, Node.LAST_PROP);
637:       assertEquals(55, Node.INFERRED_FUNCTION);
638:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
639:       assertEquals(12, Node.COLUMN_BITS);
640:       assertEquals(36, Node.QUOTED_PROP);
641:       assertEquals(4095, Node.COLUMN_MASK);
642:       assertEquals(48, Node.DIRECTIVES);
643:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
644:       assertEquals(37, Node.OPT_ARG_NAME);
645:       assertEquals(56, Node.CHANGE_TIME);
646:       assertEquals(49, Node.DIRECT_EVAL);
647:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
648:       assertEquals(29, Node.JSDOC_INFO_PROP);
649:       assertEquals(47, Node.IS_DISPATCHER);
650:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
651:       assertEquals(2, Node.POST_FLAG);
652:       assertEquals(53, Node.INPUT_ID);
653:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
654:       assertEquals(32, Node.INCRDECR_PROP);
655:       assertEquals(1, Node.DECR_FLAG);
656:       assertEquals(51, Node.STATIC_SOURCE_FILE);
657:       assertEquals(30, Node.VAR_ARGS_NAME);
658:       assertEquals(46, Node.IS_NAMESPACE);
659:       assertEquals(54, Node.SLASH_V);
660:       assertEquals(43, Node.IS_CONSTANT_NAME);
661:       
662:       Node node2 = node1.cloneNode();
663:       assertNotNull(node2);
664:       assertNotSame(node1, node2);
665:       assertNotSame(node2, node1);
666:       assertFalse(node0.equals((Object)node1));
667:       assertFalse(node1.equals((Object)node0));
668:       assertFalse(node2.equals((Object)node1));
669:       assertFalse(node2.equals((Object)node0));
670:       assertFalse(node0.isCast());
671:       assertFalse(node0.hasOneChild());
672:       assertFalse(node0.isLabelName());
673:       assertFalse(node0.isAssign());
674:       assertFalse(node0.isGetElem());
675:       assertFalse(node0.isExprResult());
676:       assertFalse(node0.isNumber());
677:       assertEquals((-1), node0.getSourcePosition());
678:       assertFalse(node0.isOr());
679:       assertFalse(node0.isContinue());
680:       assertFalse(node0.isAnd());
681:       assertFalse(node0.isDo());
682:       assertFalse(node0.isNew());
683:       assertFalse(node0.isAssignAdd());
684:       assertFalse(node0.isLabel());
685:       assertFalse(node0.isThrow());
686:       assertFalse(node0.isVar());
687:       assertFalse(node0.isFalse());
688:       assertFalse(node0.isName());
689:       assertFalse(node0.isBreak());
690:       assertFalse(node0.isCall());
691:       assertFalse(node0.isAdd());
692:       assertFalse(node0.isNull());
693:       assertFalse(node0.isNot());
694:       assertFalse(node0.isObjectLit());
695:       assertFalse(node0.isGetProp());
696:       assertFalse(node0.isComma());
697:       assertFalse(node0.isDec());
698:       assertFalse(node0.isTypeOf());
699:       assertFalse(node0.isReturn());
700:       assertFalse(node0.isWhile());
701:       assertFalse(node0.hasChildren());
702:       assertFalse(node0.isArrayLit());
703:       assertFalse(node0.isEmpty());
704:       assertFalse(node0.isDebugger());
705:       assertFalse(node0.isGetterDef());
706:       assertFalse(node0.isDelProp());
707:       assertFalse(node0.isVoid());
708:       assertFalse(node0.isIf());
709:       assertFalse(node0.isTrue());
710:       assertFalse(node0.isNE());
711:       assertEquals(0, node0.getChildCount());
712:       assertFalse(node0.isIn());
713:       assertFalse(node0.isSetterDef());
714:       assertFalse(node0.isInc());
715:       assertFalse(node0.isFunction());
716:       assertFalse(node0.isDefaultCase());
717:       assertEquals(40, node0.getType());
718:       assertFalse(node0.isSwitch());
719:       assertFalse(node0.isParamList());
720:       assertEquals((-1), node0.getCharno());
721:       assertFalse(node0.isStringKey());
722:       assertFalse(node0.hasMoreThanOneChild());
723:       assertFalse(node0.isCatch());
724:       assertFalse(node0.isWith());
725:       assertEquals((-1), node0.getLineno());
726:       assertFalse(node0.isCase());
727:       assertFalse(node0.isInstanceOf());
728:       assertFalse(node0.isScript());
729:       assertFalse(node0.isThis());
730:       assertFalse(node0.isTry());
731:       assertFalse(node0.isRegExp());
732:       assertTrue(node0.isString());
733:       assertFalse(node0.isBlock());
734:       assertFalse(node0.isHook());
735:       assertFalse(node0.isFor());
736:       assertEquals(8, node1.getCharno());
737:       assertFalse(node1.isAnd());
738:       assertFalse(node1.isInstanceOf());
739:       assertFalse(node1.isWith());
740:       assertFalse(node1.isComma());
741:       assertFalse(node1.isObjectLit());
742:       assertFalse(node1.isNot());
743:       assertFalse(node1.isScript());
744:       assertFalse(node1.isThis());
745:       assertFalse(node1.isGetProp());
746:       assertFalse(node1.isHook());
747:       assertFalse(node1.isDec());
748:       assertFalse(node1.isAssign());
749:       assertFalse(node1.isTypeOf());
750:       assertFalse(node1.isBreak());
751:       assertFalse(node1.isExprResult());
752:       assertFalse(node1.isGetElem());
753:       assertFalse(node1.isIn());
754:       assertFalse(node1.isContinue());
755:       assertFalse(node1.isReturn());
756:       assertEquals(155656, node1.getSourcePosition());
757:       assertTrue(node1.hasOneChild());
758:       assertFalse(node1.isInc());
759:       assertFalse(node1.isWhile());
760:       assertFalse(node1.isString());
761:       assertFalse(node1.isThrow());
762:       assertFalse(node1.isCast());
763:       assertFalse(node1.isFalse());
764:       assertFalse(node1.isFunction());
765:       assertFalse(node1.isDebugger());
766:       assertFalse(node1.isCatch());
767:       assertFalse(node1.isDefaultCase());
768:       assertFalse(node1.isSetterDef());
769:       assertFalse(node1.isTry());
770:       assertFalse(node1.isCall());
771:       assertFalse(node1.isBlock());
772:       assertFalse(node1.isFor());
773:       assertEquals(38, node1.getLineno());
774:       assertFalse(node1.isNull());
775:       assertFalse(node1.isRegExp());
776:       assertFalse(node1.isIf());
777:       assertFalse(node1.isTrue());
778:       assertFalse(node1.isNE());
779:       assertFalse(node1.isName());
780:       assertEquals(894, node1.getType());
781:       assertFalse(node1.isDelProp());
782:       assertFalse(node1.isVoid());
783:       assertFalse(node1.hasMoreThanOneChild());
784:       assertTrue(node1.hasChildren());
785:       assertFalse(node1.isLabel());
786:       assertEquals(1, node1.getChildCount());
787:       assertFalse(node1.isOr());
788:       assertFalse(node1.isNumber());
789:       assertFalse(node1.isEmpty());
790:       assertFalse(node1.isNew());
791:       assertFalse(node1.isAdd());
792:       assertFalse(node1.isCase());
793:       assertFalse(node1.isAssignAdd());
794:       assertFalse(node1.isDo());
795:       assertFalse(node1.isArrayLit());
796:       assertFalse(node1.isVar());
797:       assertFalse(node1.isStringKey());
798:       assertFalse(node1.isGetterDef());
799:       assertFalse(node1.isSwitch());
800:       assertFalse(node1.isParamList());
801:       assertFalse(node1.isLabelName());
802:       assertFalse(node2.isFalse());
803:       assertFalse(node2.isThrow());
804:       assertFalse(node2.isHook());
805:       assertFalse(node2.isComma());
806:       assertFalse(node2.isThis());
807:       assertFalse(node2.isInc());
808:       assertFalse(node2.isGetProp());
809:       assertFalse(node2.isCase());
810:       assertEquals(155656, node2.getSourcePosition());
811:       assertFalse(node2.isWith());
812:       assertFalse(node2.isInstanceOf());
813:       assertFalse(node2.isDelProp());
814:       assertEquals(8, node2.getCharno());
815:       assertFalse(node2.isExprResult());
816:       assertFalse(node2.isBreak());
817:       assertFalse(node2.isGetElem());
818:       assertFalse(node2.isAssign());
819:       assertFalse(node2.isIf());
820:       assertFalse(node2.isDec());
821:       assertFalse(node2.isTypeOf());
822:       assertEquals(38, node2.getLineno());
823:       assertFalse(node2.isNE());
824:       assertFalse(node2.hasChildren());
825:       assertFalse(node2.isIn());
826:       assertFalse(node2.isNot());
827:       assertFalse(node2.isString());
828:       assertFalse(node2.isObjectLit());
829:       assertFalse(node2.isContinue());
830:       assertFalse(node2.isAnd());
831:       assertFalse(node2.isDebugger());
832:       assertFalse(node2.isFunction());
833:       assertFalse(node2.isCast());
834:       assertFalse(node2.isStringKey());
835:       assertFalse(node2.isName());
836:       assertFalse(node2.isNull());
837:       assertFalse(node2.isVar());
838:       assertFalse(node2.isNew());
839:       assertFalse(node2.isBlock());
840:       assertFalse(node2.isAdd());
841:       assertFalse(node2.isSetterDef());
842:       assertFalse(node2.isWhile());
843:       assertFalse(node2.hasMoreThanOneChild());
844:       assertFalse(node2.isRegExp());
845:       assertFalse(node2.isTrue());
846:       assertFalse(node2.isReturn());
847:       assertFalse(node2.isVoid());
848:       assertFalse(node2.isCatch());
849:       assertFalse(node2.isCall());
850:       assertEquals(894, node2.getType());
851:       assertFalse(node2.isFor());
852:       assertFalse(node2.isLabelName());
853:       assertFalse(node2.isEmpty());
854:       assertFalse(node2.isNumber());
855:       assertFalse(node2.isGetterDef());
856:       assertFalse(node2.isOr());
857:       assertFalse(node2.isTry());
858:       assertFalse(node2.isAssignAdd());
859:       assertFalse(node2.hasOneChild());
860:       assertFalse(node2.isScript());
861:       assertFalse(node2.isDo());
862:       assertFalse(node2.isDefaultCase());
863:       assertEquals(0, node2.getChildCount());
864:       assertFalse(node2.isLabel());
865:       assertFalse(node2.isParamList());
866:       assertFalse(node2.isSwitch());
867:       assertFalse(node2.isArrayLit());
868:       assertEquals(55, Node.INFERRED_FUNCTION);
869:       assertEquals(4095, Node.COLUMN_MASK);
870:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
871:       assertEquals(53, Node.INPUT_ID);
872:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
873:       assertEquals(48, Node.DIRECTIVES);
874:       assertEquals(8, Node.FLAG_NO_THROWS);
875:       assertEquals(43, Node.IS_CONSTANT_NAME);
876:       assertEquals(36, Node.QUOTED_PROP);
877:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
878:       assertEquals(29, Node.JSDOC_INFO_PROP);
879:       assertEquals(40, Node.ORIGINALNAME_PROP);
880:       assertEquals(39, Node.EMPTY_BLOCK);
881:       assertEquals(2, Node.POST_FLAG);
882:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
883:       assertEquals(47, Node.IS_DISPATCHER);
884:       assertEquals(30, Node.VAR_ARGS_NAME);
885:       assertEquals(49, Node.DIRECT_EVAL);
886:       assertEquals(1, Node.DECR_FLAG);
887:       assertEquals(57, Node.LAST_PROP);
888:       assertEquals(15, Node.NO_SIDE_EFFECTS);
889:       assertEquals(52, Node.LENGTH);
890:       assertEquals(56, Node.CHANGE_TIME);
891:       assertEquals(51, Node.STATIC_SOURCE_FILE);
892:       assertEquals(46, Node.IS_NAMESPACE);
893:       assertEquals(54, Node.SLASH_V);
894:       assertEquals(57, Node.REFLECTED_OBJECT);
895:       assertEquals(50, Node.FREE_CALL);
896:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
897:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
898:       assertEquals(37, Node.OPT_ARG_NAME);
899:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
900:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
901:       assertEquals(32, Node.INCRDECR_PROP);
902:       assertEquals(12, Node.COLUMN_BITS);
903:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
904:       assertEquals(40, Node.ORIGINALNAME_PROP);
905:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
906:       assertEquals(57, Node.REFLECTED_OBJECT);
907:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
908:       assertEquals(52, Node.LENGTH);
909:       assertEquals(8, Node.FLAG_NO_THROWS);
910:       assertEquals(50, Node.FREE_CALL);
911:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
912:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
913:       assertEquals(39, Node.EMPTY_BLOCK);
914:       assertEquals(15, Node.NO_SIDE_EFFECTS);
915:       assertEquals(57, Node.LAST_PROP);
916:       assertEquals(55, Node.INFERRED_FUNCTION);
917:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
918:       assertEquals(12, Node.COLUMN_BITS);
919:       assertEquals(36, Node.QUOTED_PROP);
920:       assertEquals(4095, Node.COLUMN_MASK);
921:       assertEquals(48, Node.DIRECTIVES);
922:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
923:       assertEquals(37, Node.OPT_ARG_NAME);
924:       assertEquals(56, Node.CHANGE_TIME);
925:       assertEquals(49, Node.DIRECT_EVAL);
926:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
927:       assertEquals(29, Node.JSDOC_INFO_PROP);
928:       assertEquals(47, Node.IS_DISPATCHER);
929:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
930:       assertEquals(2, Node.POST_FLAG);
931:       assertEquals(53, Node.INPUT_ID);
932:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
933:       assertEquals(32, Node.INCRDECR_PROP);
934:       assertEquals(1, Node.DECR_FLAG);
935:       assertEquals(51, Node.STATIC_SOURCE_FILE);
936:       assertEquals(30, Node.VAR_ARGS_NAME);
937:       assertEquals(46, Node.IS_NAMESPACE);
938:       assertEquals(54, Node.SLASH_V);
939:       assertEquals(43, Node.IS_CONSTANT_NAME);
940:       assertEquals(15, Node.NO_SIDE_EFFECTS);
941:       assertEquals(57, Node.LAST_PROP);
942:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
943:       assertEquals(54, Node.SLASH_V);
944:       assertEquals(30, Node.VAR_ARGS_NAME);
945:       assertEquals(51, Node.STATIC_SOURCE_FILE);
946:       assertEquals(12, Node.COLUMN_BITS);
947:       assertEquals(32, Node.INCRDECR_PROP);
948:       assertEquals(52, Node.LENGTH);
949:       assertEquals(1, Node.DECR_FLAG);
950:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
951:       assertEquals(56, Node.CHANGE_TIME);
952:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
953:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
954:       assertEquals(29, Node.JSDOC_INFO_PROP);
955:       assertEquals(8, Node.FLAG_NO_THROWS);
956:       assertEquals(57, Node.REFLECTED_OBJECT);
957:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
958:       assertEquals(4095, Node.COLUMN_MASK);
959:       assertEquals(48, Node.DIRECTIVES);
960:       assertEquals(49, Node.DIRECT_EVAL);
961:       assertEquals(37, Node.OPT_ARG_NAME);
962:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
963:       assertEquals(43, Node.IS_CONSTANT_NAME);
964:       assertEquals(36, Node.QUOTED_PROP);
965:       assertEquals(55, Node.INFERRED_FUNCTION);
966:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
967:       assertEquals(53, Node.INPUT_ID);
968:       assertEquals(39, Node.EMPTY_BLOCK);
969:       assertEquals(47, Node.IS_DISPATCHER);
970:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
971:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
972:       assertEquals(50, Node.FREE_CALL);
973:       assertEquals(2, Node.POST_FLAG);
974:       assertEquals(46, Node.IS_NAMESPACE);
975:       assertEquals(40, Node.ORIGINALNAME_PROP);
976:       
977:       Node node3 = Node.newString(4095, "BITNOT");
978:       assertNotNull(node3);
979:       assertNotSame(node3, node0);
980:       assertFalse(node3.equals((Object)node2));
981:       assertFalse(node3.equals((Object)node0));
982:       assertFalse(node3.equals((Object)node1));
983:       assertFalse(node3.isExprResult());
984:       assertFalse(node3.hasOneChild());
985:       assertFalse(node3.isGetElem());
986:       assertFalse(node3.isLabelName());
987:       assertFalse(node3.isAssign());
988:       assertFalse(node3.isInstanceOf());
989:       assertFalse(node3.isDec());
990:       assertFalse(node3.isTypeOf());
991:       assertFalse(node3.isWith());
992:       assertFalse(node3.isCast());
993:       assertFalse(node3.isGetProp());
994:       assertFalse(node3.isComma());
995:       assertFalse(node3.isThis());
996:       assertFalse(node3.isReturn());
997:       assertEquals((-1), node3.getSourcePosition());
998:       assertFalse(node3.hasChildren());
999:       assertFalse(node3.isAnd());
1000:       assertFalse(node3.isObjectLit());
1001:       assertFalse(node3.isNot());
1002:       assertFalse(node3.isNumber());
1003:       assertFalse(node3.isScript());
1004:       assertFalse(node3.isBlock());
1005:       assertFalse(node3.isInc());
1006:       assertFalse(node3.isHook());
1007:       assertFalse(node3.isThrow());
1008:       assertFalse(node3.isFalse());
1009:       assertFalse(node3.hasMoreThanOneChild());
1010:       assertFalse(node3.isContinue());
1011:       assertFalse(node3.isSetterDef());
1012:       assertEquals((-1), node3.getLineno());
1013:       assertFalse(node3.isIf());
1014:       assertFalse(node3.isNE());
1015:       assertFalse(node3.isIn());
1016:       assertEquals(4095, node3.getType());
1017:       assertFalse(node3.isTrue());
1018:       assertFalse(node3.isTry());
1019:       assertFalse(node3.isVoid());
1020:       assertFalse(node3.isFunction());
1021:       assertFalse(node3.isDebugger());
1022:       assertFalse(node3.isDefaultCase());
1023:       assertFalse(node3.isFor());
1024:       assertFalse(node3.isArrayLit());
1025:       assertEquals(0, node3.getChildCount());
1026:       assertFalse(node3.isRegExp());
1027:       assertFalse(node3.isCatch());
1028:       assertFalse(node3.isParamList());
1029:       assertFalse(node3.isStringKey());
1030:       assertFalse(node3.isCase());
1031:       assertFalse(node3.isGetterDef());
1032:       assertFalse(node3.isString());
1033:       assertFalse(node3.isAdd());
1034:       assertFalse(node3.isNew());
1035:       assertEquals((-1), node3.getCharno());
1036:       assertFalse(node3.isVar());
1037:       assertFalse(node3.isSwitch());
1038:       assertFalse(node3.isWhile());
1039:       assertFalse(node3.isCall());
1040:       assertFalse(node3.isName());
1041:       assertFalse(node3.isBreak());
1042:       assertFalse(node3.isOr());
1043:       assertFalse(node3.isLabel());
1044:       assertFalse(node3.isNull());
1045:       assertFalse(node3.isDelProp());
1046:       assertFalse(node3.isAssignAdd());
1047:       assertFalse(node3.isEmpty());
1048:       assertFalse(node3.isDo());
1049:       assertEquals(48, Node.DIRECTIVES);
1050:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1051:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1052:       assertEquals(40, Node.ORIGINALNAME_PROP);
1053:       assertEquals(4095, Node.COLUMN_MASK);
1054:       assertEquals(54, Node.SLASH_V);
1055:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1056:       assertEquals(43, Node.IS_CONSTANT_NAME);
1057:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1058:       assertEquals(50, Node.FREE_CALL);
1059:       assertEquals(1, Node.DECR_FLAG);
1060:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1061:       assertEquals(32, Node.INCRDECR_PROP);
1062:       assertEquals(46, Node.IS_NAMESPACE);
1063:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1064:       assertEquals(12, Node.COLUMN_BITS);
1065:       assertEquals(56, Node.CHANGE_TIME);
1066:       assertEquals(47, Node.IS_DISPATCHER);
1067:       assertEquals(2, Node.POST_FLAG);
1068:       assertEquals(49, Node.DIRECT_EVAL);
1069:       assertEquals(30, Node.VAR_ARGS_NAME);
1070:       assertEquals(37, Node.OPT_ARG_NAME);
1071:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1072:       assertEquals(52, Node.LENGTH);
1073:       assertEquals(57, Node.REFLECTED_OBJECT);
1074:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1075:       assertEquals(57, Node.LAST_PROP);
1076:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1077:       assertEquals(36, Node.QUOTED_PROP);
1078:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1079:       assertEquals(8, Node.FLAG_NO_THROWS);
1080:       assertEquals(39, Node.EMPTY_BLOCK);
1081:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1082:       assertEquals(29, Node.JSDOC_INFO_PROP);
1083:       assertEquals(53, Node.INPUT_ID);
1084:       assertEquals(55, Node.INFERRED_FUNCTION);
1085:       
1086:       boolean boolean3 = node0.isRegExp();
1087:       assertNotSame(node0, node3);
1088:       assertFalse(boolean3);
1089:       assertFalse(node0.equals((Object)node1));
1090:       assertFalse(node0.equals((Object)node2));
1091:       assertFalse(node0.equals((Object)node3));
1092:       assertTrue(boolean3 == boolean1);
1093:       assertTrue(boolean3 == boolean0);
1094:       assertTrue(boolean3 == boolean2);
1095:       assertFalse(node0.isCast());
1096:       assertFalse(node0.hasOneChild());
1097:       assertFalse(node0.isLabelName());
1098:       assertFalse(node0.isAssign());
1099:       assertFalse(node0.isGetElem());
1100:       assertFalse(node0.isExprResult());
1101:       assertFalse(node0.isNumber());
1102:       assertEquals((-1), node0.getSourcePosition());
1103:       assertFalse(node0.isOr());
1104:       assertFalse(node0.isContinue());
1105:       assertFalse(node0.isAnd());
1106:       assertFalse(node0.isDo());
1107:       assertFalse(node0.isNew());
1108:       assertFalse(node0.isAssignAdd());
1109:       assertFalse(node0.isLabel());
1110:       assertFalse(node0.isThrow());
1111:       assertFalse(node0.isVar());
1112:       assertFalse(node0.isFalse());
1113:       assertFalse(node0.isName());
1114:       assertFalse(node0.isBreak());
1115:       assertFalse(node0.isCall());
1116:       assertFalse(node0.isAdd());
1117:       assertFalse(node0.isNull());
1118:       assertFalse(node0.isNot());
1119:       assertFalse(node0.isObjectLit());
1120:       assertFalse(node0.isGetProp());
1121:       assertFalse(node0.isComma());
1122:       assertFalse(node0.isDec());
1123:       assertFalse(node0.isTypeOf());
1124:       assertFalse(node0.isReturn());
1125:       assertFalse(node0.isWhile());
1126:       assertFalse(node0.hasChildren());
1127:       assertFalse(node0.isArrayLit());
1128:       assertFalse(node0.isEmpty());
1129:       assertFalse(node0.isDebugger());
1130:       assertFalse(node0.isGetterDef());
1131:       assertFalse(node0.isDelProp());
1132:       assertFalse(node0.isVoid());
1133:       assertFalse(node0.isIf());
1134:       assertFalse(node0.isTrue());
1135:       assertFalse(node0.isNE());
1136:       assertEquals(0, node0.getChildCount());
1137:       assertFalse(node0.isIn());
1138:       assertFalse(node0.isSetterDef());
1139:       assertFalse(node0.isInc());
1140:       assertFalse(node0.isFunction());
1141:       assertFalse(node0.isDefaultCase());
1142:       assertEquals(40, node0.getType());
1143:       assertFalse(node0.isSwitch());
1144:       assertFalse(node0.isParamList());
1145:       assertEquals((-1), node0.getCharno());
1146:       assertFalse(node0.isStringKey());
1147:       assertFalse(node0.hasMoreThanOneChild());
1148:       assertFalse(node0.isCatch());
1149:       assertFalse(node0.isWith());
1150:       assertEquals((-1), node0.getLineno());
1151:       assertFalse(node0.isCase());
1152:       assertFalse(node0.isInstanceOf());
1153:       assertFalse(node0.isScript());
1154:       assertFalse(node0.isThis());
1155:       assertFalse(node0.isTry());
1156:       assertFalse(node0.isRegExp());
1157:       assertTrue(node0.isString());
1158:       assertFalse(node0.isBlock());
1159:       assertFalse(node0.isHook());
1160:       assertFalse(node0.isFor());
1161:       assertEquals(55, Node.INFERRED_FUNCTION);
1162:       assertEquals(4095, Node.COLUMN_MASK);
1163:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1164:       assertEquals(53, Node.INPUT_ID);
1165:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1166:       assertEquals(48, Node.DIRECTIVES);
1167:       assertEquals(8, Node.FLAG_NO_THROWS);
1168:       assertEquals(43, Node.IS_CONSTANT_NAME);
1169:       assertEquals(36, Node.QUOTED_PROP);
1170:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1171:       assertEquals(29, Node.JSDOC_INFO_PROP);
1172:       assertEquals(40, Node.ORIGINALNAME_PROP);
1173:       assertEquals(39, Node.EMPTY_BLOCK);
1174:       assertEquals(2, Node.POST_FLAG);
1175:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1176:       assertEquals(47, Node.IS_DISPATCHER);
1177:       assertEquals(30, Node.VAR_ARGS_NAME);
1178:       assertEquals(49, Node.DIRECT_EVAL);
1179:       assertEquals(1, Node.DECR_FLAG);
1180:       assertEquals(57, Node.LAST_PROP);
1181:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1182:       assertEquals(52, Node.LENGTH);
1183:       assertEquals(56, Node.CHANGE_TIME);
1184:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1185:       assertEquals(46, Node.IS_NAMESPACE);
1186:       assertEquals(54, Node.SLASH_V);
1187:       assertEquals(57, Node.REFLECTED_OBJECT);
1188:       assertEquals(50, Node.FREE_CALL);
1189:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1190:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1191:       assertEquals(37, Node.OPT_ARG_NAME);
1192:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1193:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1194:       assertEquals(32, Node.INCRDECR_PROP);
1195:       assertEquals(12, Node.COLUMN_BITS);
1196:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1197:       
1198:       boolean boolean4 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
1199:       assertFalse(boolean4);
1200:       assertTrue(boolean4 == boolean0);
1201:       assertTrue(boolean4 == boolean1);
1202:       assertTrue(boolean4 == boolean2);
1203:       assertTrue(boolean4 == boolean3);
1204:       
1205:       Iterable<Node> iterable0 = node2.children();
1206:       assertFalse(iterable0.contains(node2));
1207:       assertNotNull(iterable0);
1208:       assertNotSame(node0, node3);
1209:       assertNotSame(node1, node2);
1210:       assertNotSame(node2, node1);
1211:       assertFalse(node0.equals((Object)node1));
1212:       assertFalse(node0.equals((Object)node2));
1213:       assertFalse(node0.equals((Object)node3));
1214:       assertFalse(node1.equals((Object)node0));
1215:       assertFalse(node1.equals((Object)node2));
1216:       assertFalse(node1.equals((Object)node3));
1217:       assertFalse(node2.equals((Object)node1));
1218:       assertFalse(node2.equals((Object)node3));
1219:       assertFalse(node2.equals((Object)node0));
1220:       assertFalse(node0.isCast());
1221:       assertFalse(node0.hasOneChild());
1222:       assertFalse(node0.isLabelName());
1223:       assertFalse(node0.isAssign());
1224:       assertFalse(node0.isGetElem());
1225:       assertFalse(node0.isExprResult());
1226:       assertFalse(node0.isNumber());
1227:       assertEquals((-1), node0.getSourcePosition());
1228:       assertFalse(node0.isOr());
1229:       assertFalse(node0.isContinue());
1230:       assertFalse(node0.isAnd());
1231:       assertFalse(node0.isDo());
1232:       assertFalse(node0.isNew());
1233:       assertFalse(node0.isAssignAdd());
1234:       assertFalse(node0.isLabel());
1235:       assertFalse(node0.isThrow());
1236:       assertFalse(node0.isVar());
1237:       assertFalse(node0.isFalse());
1238:       assertFalse(node0.isName());
1239:       assertFalse(node0.isBreak());
1240:       assertFalse(node0.isCall());
1241:       assertFalse(node0.isAdd());
1242:       assertFalse(node0.isNull());
1243:       assertFalse(node0.isNot());
1244:       assertFalse(node0.isObjectLit());
1245:       assertFalse(node0.isGetProp());
1246:       assertFalse(node0.isComma());
1247:       assertFalse(node0.isDec());
1248:       assertFalse(node0.isTypeOf());
1249:       assertFalse(node0.isReturn());
1250:       assertFalse(node0.isWhile());
1251:       assertFalse(node0.hasChildren());
1252:       assertFalse(node0.isArrayLit());
1253:       assertFalse(node0.isEmpty());
1254:       assertFalse(node0.isDebugger());
1255:       assertFalse(node0.isGetterDef());
1256:       assertFalse(node0.isDelProp());
1257:       assertFalse(node0.isVoid());
1258:       assertFalse(node0.isIf());
1259:       assertFalse(node0.isTrue());
1260:       assertFalse(node0.isNE());
1261:       assertEquals(0, node0.getChildCount());
1262:       assertFalse(node0.isIn());
1263:       assertFalse(node0.isSetterDef());
1264:       assertFalse(node0.isInc());
1265:       assertFalse(node0.isFunction());
1266:       assertFalse(node0.isDefaultCase());
1267:       assertEquals(40, node0.getType());
1268:       assertFalse(node0.isSwitch());
1269:       assertFalse(node0.isParamList());
1270:       assertEquals((-1), node0.getCharno());
1271:       assertFalse(node0.isStringKey());
1272:       assertFalse(node0.hasMoreThanOneChild());
1273:       assertFalse(node0.isCatch());
1274:       assertFalse(node0.isWith());
1275:       assertEquals((-1), node0.getLineno());
1276:       assertFalse(node0.isCase());
1277:       assertFalse(node0.isInstanceOf());
1278:       assertFalse(node0.isScript());
1279:       assertFalse(node0.isThis());
1280:       assertFalse(node0.isTry());
1281:       assertFalse(node0.isRegExp());
1282:       assertTrue(node0.isString());
1283:       assertFalse(node0.isBlock());
1284:       assertFalse(node0.isHook());
1285:       assertFalse(node0.isFor());
1286:       assertEquals(8, node1.getCharno());
1287:       assertFalse(node1.isAnd());
1288:       assertFalse(node1.isInstanceOf());
1289:       assertFalse(node1.isWith());
1290:       assertFalse(node1.isComma());
1291:       assertFalse(node1.isObjectLit());
1292:       assertFalse(node1.isNot());
1293:       assertFalse(node1.isScript());
1294:       assertFalse(node1.isThis());
1295:       assertFalse(node1.isGetProp());
1296:       assertFalse(node1.isHook());
1297:       assertFalse(node1.isDec());
1298:       assertFalse(node1.isAssign());
1299:       assertFalse(node1.isTypeOf());
1300:       assertFalse(node1.isBreak());
1301:       assertFalse(node1.isExprResult());
1302:       assertFalse(node1.isGetElem());
1303:       assertFalse(node1.isIn());
1304:       assertFalse(node1.isContinue());
1305:       assertFalse(node1.isReturn());
1306:       assertEquals(155656, node1.getSourcePosition());
1307:       assertTrue(node1.hasOneChild());
1308:       assertFalse(node1.isInc());
1309:       assertFalse(node1.isWhile());
1310:       assertFalse(node1.isString());
1311:       assertFalse(node1.isThrow());
1312:       assertFalse(node1.isCast());
1313:       assertFalse(node1.isFalse());
1314:       assertFalse(node1.isFunction());
1315:       assertFalse(node1.isDebugger());
1316:       assertFalse(node1.isCatch());
1317:       assertFalse(node1.isDefaultCase());
1318:       assertFalse(node1.isSetterDef());
1319:       assertFalse(node1.isTry());
1320:       assertFalse(node1.isCall());
1321:       assertFalse(node1.isBlock());
1322:       assertFalse(node1.isFor());
1323:       assertEquals(38, node1.getLineno());
1324:       assertFalse(node1.isNull());
1325:       assertFalse(node1.isRegExp());
1326:       assertFalse(node1.isIf());
1327:       assertFalse(node1.isTrue());
1328:       assertFalse(node1.isNE());
1329:       assertFalse(node1.isName());
1330:       assertEquals(894, node1.getType());
1331:       assertFalse(node1.isDelProp());
1332:       assertFalse(node1.isVoid());
1333:       assertFalse(node1.hasMoreThanOneChild());
1334:       assertTrue(node1.hasChildren());
1335:       assertFalse(node1.isLabel());
1336:       assertEquals(1, node1.getChildCount());
1337:       assertFalse(node1.isOr());
1338:       assertFalse(node1.isNumber());
1339:       assertFalse(node1.isEmpty());
1340:       assertFalse(node1.isNew());
1341:       assertFalse(node1.isAdd());
1342:       assertFalse(node1.isCase());
1343:       assertFalse(node1.isAssignAdd());
1344:       assertFalse(node1.isDo());
1345:       assertFalse(node1.isArrayLit());
1346:       assertFalse(node1.isVar());
1347:       assertFalse(node1.isStringKey());
1348:       assertFalse(node1.isGetterDef());
1349:       assertFalse(node1.isSwitch());
1350:       assertFalse(node1.isParamList());
1351:       assertFalse(node1.isLabelName());
1352:       assertFalse(node2.isFalse());
1353:       assertFalse(node2.isThrow());
1354:       assertFalse(node2.isHook());
1355:       assertFalse(node2.isComma());
1356:       assertFalse(node2.isThis());
1357:       assertFalse(node2.isInc());
1358:       assertFalse(node2.isGetProp());
1359:       assertFalse(node2.isCase());
1360:       assertEquals(155656, node2.getSourcePosition());
1361:       assertFalse(node2.isWith());
1362:       assertFalse(node2.isInstanceOf());
1363:       assertFalse(node2.isDelProp());
1364:       assertEquals(8, node2.getCharno());
1365:       assertFalse(node2.isExprResult());
1366:       assertFalse(node2.isBreak());
1367:       assertFalse(node2.isGetElem());
1368:       assertFalse(node2.isAssign());
1369:       assertFalse(node2.isIf());
1370:       assertFalse(node2.isDec());
1371:       assertFalse(node2.isTypeOf());
1372:       assertEquals(38, node2.getLineno());
1373:       assertFalse(node2.isNE());
1374:       assertFalse(node2.hasChildren());
1375:       assertFalse(node2.isIn());
1376:       assertFalse(node2.isNot());
1377:       assertFalse(node2.isString());
1378:       assertFalse(node2.isObjectLit());
1379:       assertFalse(node2.isContinue());
1380:       assertFalse(node2.isAnd());
1381:       assertFalse(node2.isDebugger());
1382:       assertFalse(node2.isFunction());
1383:       assertFalse(node2.isCast());
1384:       assertFalse(node2.isStringKey());
1385:       assertFalse(node2.isName());
1386:       assertFalse(node2.isNull());
1387:       assertFalse(node2.isVar());
1388:       assertFalse(node2.isNew());
1389:       assertFalse(node2.isBlock());
1390:       assertFalse(node2.isAdd());
1391:       assertFalse(node2.isSetterDef());
1392:       assertFalse(node2.isWhile());
1393:       assertFalse(node2.hasMoreThanOneChild());
1394:       assertFalse(node2.isRegExp());
1395:       assertFalse(node2.isTrue());
1396:       assertFalse(node2.isReturn());
1397:       assertFalse(node2.isVoid());
1398:       assertFalse(node2.isCatch());
1399:       assertFalse(node2.isCall());
1400:       assertEquals(894, node2.getType());
1401:       assertFalse(node2.isFor());
1402:       assertFalse(node2.isLabelName());
1403:       assertFalse(node2.isEmpty());
1404:       assertFalse(node2.isNumber());
1405:       assertFalse(node2.isGetterDef());
1406:       assertFalse(node2.isOr());
1407:       assertFalse(node2.isTry());
1408:       assertFalse(node2.isAssignAdd());
1409:       assertFalse(node2.hasOneChild());
1410:       assertFalse(node2.isScript());
1411:       assertFalse(node2.isDo());
1412:       assertFalse(node2.isDefaultCase());
1413:       assertEquals(0, node2.getChildCount());
1414:       assertFalse(node2.isLabel());
1415:       assertFalse(node2.isParamList());
1416:       assertFalse(node2.isSwitch());
1417:       assertFalse(node2.isArrayLit());
1418:       assertEquals(55, Node.INFERRED_FUNCTION);
1419:       assertEquals(4095, Node.COLUMN_MASK);
1420:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1421:       assertEquals(53, Node.INPUT_ID);
1422:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1423:       assertEquals(48, Node.DIRECTIVES);
1424:       assertEquals(8, Node.FLAG_NO_THROWS);
1425:       assertEquals(43, Node.IS_CONSTANT_NAME);
1426:       assertEquals(36, Node.QUOTED_PROP);
1427:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1428:       assertEquals(29, Node.JSDOC_INFO_PROP);
1429:       assertEquals(40, Node.ORIGINALNAME_PROP);
1430:       assertEquals(39, Node.EMPTY_BLOCK);
1431:       assertEquals(2, Node.POST_FLAG);
1432:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1433:       assertEquals(47, Node.IS_DISPATCHER);
1434:       assertEquals(30, Node.VAR_ARGS_NAME);
1435:       assertEquals(49, Node.DIRECT_EVAL);
1436:       assertEquals(1, Node.DECR_FLAG);
1437:       assertEquals(57, Node.LAST_PROP);
1438:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1439:       assertEquals(52, Node.LENGTH);
1440:       assertEquals(56, Node.CHANGE_TIME);
1441:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1442:       assertEquals(46, Node.IS_NAMESPACE);
1443:       assertEquals(54, Node.SLASH_V);
1444:       assertEquals(57, Node.REFLECTED_OBJECT);
1445:       assertEquals(50, Node.FREE_CALL);
1446:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1447:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1448:       assertEquals(37, Node.OPT_ARG_NAME);
1449:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1450:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1451:       assertEquals(32, Node.INCRDECR_PROP);
1452:       assertEquals(12, Node.COLUMN_BITS);
1453:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1454:       assertEquals(40, Node.ORIGINALNAME_PROP);
1455:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1456:       assertEquals(57, Node.REFLECTED_OBJECT);
1457:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1458:       assertEquals(52, Node.LENGTH);
1459:       assertEquals(8, Node.FLAG_NO_THROWS);
1460:       assertEquals(50, Node.FREE_CALL);
1461:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1462:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1463:       assertEquals(39, Node.EMPTY_BLOCK);
1464:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1465:       assertEquals(57, Node.LAST_PROP);
1466:       assertEquals(55, Node.INFERRED_FUNCTION);
1467:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1468:       assertEquals(12, Node.COLUMN_BITS);
1469:       assertEquals(36, Node.QUOTED_PROP);
1470:       assertEquals(4095, Node.COLUMN_MASK);
1471:       assertEquals(48, Node.DIRECTIVES);
1472:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1473:       assertEquals(37, Node.OPT_ARG_NAME);
1474:       assertEquals(56, Node.CHANGE_TIME);
1475:       assertEquals(49, Node.DIRECT_EVAL);
1476:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1477:       assertEquals(29, Node.JSDOC_INFO_PROP);
1478:       assertEquals(47, Node.IS_DISPATCHER);
1479:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1480:       assertEquals(2, Node.POST_FLAG);
1481:       assertEquals(53, Node.INPUT_ID);
1482:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1483:       assertEquals(32, Node.INCRDECR_PROP);
1484:       assertEquals(1, Node.DECR_FLAG);
1485:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1486:       assertEquals(30, Node.VAR_ARGS_NAME);
1487:       assertEquals(46, Node.IS_NAMESPACE);
1488:       assertEquals(54, Node.SLASH_V);
1489:       assertEquals(43, Node.IS_CONSTANT_NAME);
1490:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1491:       assertEquals(57, Node.LAST_PROP);
1492:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1493:       assertEquals(54, Node.SLASH_V);
1494:       assertEquals(30, Node.VAR_ARGS_NAME);
1495:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1496:       assertEquals(12, Node.COLUMN_BITS);
1497:       assertEquals(32, Node.INCRDECR_PROP);
1498:       
1499:       boolean boolean5 = node1.isBlock();
1500:       assertNotSame(node0, node3);
1501:       assertNotSame(node1, node2);
1502:       assertFalse(boolean5);
1503:       assertFalse(node0.equals((Object)node1));
1504:       assertFalse(node0.equals((Object)node2));
1505:       assertFalse(node0.equals((Object)node3));
1506:       assertFalse(node1.equals((Object)node0));
1507:       assertFalse(node1.equals((Object)node2));
1508:       assertFalse(node1.equals((Object)node3));
1509:       assertTrue(boolean5 == boolean4);
1510:       assertTrue(boolean5 == boolean3);
1511:       assertTrue(boolean5 == boolean0);
1512:       assertTrue(boolean5 == boolean2);
1513:       assertTrue(boolean5 == boolean1);
1514:       assertFalse(node0.isCast());
1515:       assertFalse(node0.hasOneChild());
1516:       assertFalse(node0.isLabelName());
1517:       assertFalse(node0.isAssign());
1518:       assertFalse(node0.isGetElem());
1519:       assertFalse(node0.isExprResult());
1520:       assertFalse(node0.isNumber());
1521:       assertEquals((-1), node0.getSourcePosition());
1522:       assertFalse(node0.isOr());
1523:       assertFalse(node0.isContinue());
1524:       assertFalse(node0.isAnd());
1525:       assertFalse(node0.isDo());
1526:       assertFalse(node0.isNew());
1527:       assertFalse(node0.isAssignAdd());
1528:       assertFalse(node0.isLabel());
1529:       assertFalse(node0.isThrow());
1530:       assertFalse(node0.isVar());
1531:       assertFalse(node0.isFalse());
1532:       assertFalse(node0.isName());
1533:       assertFalse(node0.isBreak());
1534:       assertFalse(node0.isCall());
1535:       assertFalse(node0.isAdd());
1536:       assertFalse(node0.isNull());
1537:       assertFalse(node0.isNot());
1538:       assertFalse(node0.isObjectLit());
1539:       assertFalse(node0.isGetProp());
1540:       assertFalse(node0.isComma());
1541:       assertFalse(node0.isDec());
1542:       assertFalse(node0.isTypeOf());
1543:       assertFalse(node0.isReturn());
1544:       assertFalse(node0.isWhile());
1545:       assertFalse(node0.hasChildren());
1546:       assertFalse(node0.isArrayLit());
1547:       assertFalse(node0.isEmpty());
1548:       assertFalse(node0.isDebugger());
1549:       assertFalse(node0.isGetterDef());
1550:       assertFalse(node0.isDelProp());
1551:       assertFalse(node0.isVoid());
1552:       assertFalse(node0.isIf());
1553:       assertFalse(node0.isTrue());
1554:       assertFalse(node0.isNE());
1555:       assertEquals(0, node0.getChildCount());
1556:       assertFalse(node0.isIn());
1557:       assertFalse(node0.isSetterDef());
1558:       assertFalse(node0.isInc());
1559:       assertFalse(node0.isFunction());
1560:       assertFalse(node0.isDefaultCase());
1561:       assertEquals(40, node0.getType());
1562:       assertFalse(node0.isSwitch());
1563:       assertFalse(node0.isParamList());
1564:       assertEquals((-1), node0.getCharno());
1565:       assertFalse(node0.isStringKey());
1566:       assertFalse(node0.hasMoreThanOneChild());
1567:       assertFalse(node0.isCatch());
1568:       assertFalse(node0.isWith());
1569:       assertEquals((-1), node0.getLineno());
1570:       assertFalse(node0.isCase());
1571:       assertFalse(node0.isInstanceOf());
1572:       assertFalse(node0.isScript());
1573:       assertFalse(node0.isThis());
1574:       assertFalse(node0.isTry());
1575:       assertFalse(node0.isRegExp());
1576:       assertTrue(node0.isString());
1577:       assertFalse(node0.isBlock());
1578:       assertFalse(node0.isHook());
1579:       assertFalse(node0.isFor());
1580:       assertEquals(8, node1.getCharno());
1581:       assertFalse(node1.isAnd());
1582:       assertFalse(node1.isInstanceOf());
1583:       assertFalse(node1.isWith());
1584:       assertFalse(node1.isComma());
1585:       assertFalse(node1.isObjectLit());
1586:       assertFalse(node1.isNot());
1587:       assertFalse(node1.isScript());
1588:       assertFalse(node1.isThis());
1589:       assertFalse(node1.isGetProp());
1590:       assertFalse(node1.isHook());
1591:       assertFalse(node1.isDec());
1592:       assertFalse(node1.isAssign());
1593:       assertFalse(node1.isTypeOf());
1594:       assertFalse(node1.isBreak());
1595:       assertFalse(node1.isExprResult());
1596:       assertFalse(node1.isGetElem());
1597:       assertFalse(node1.isIn());
1598:       assertFalse(node1.isContinue());
1599:       assertFalse(node1.isReturn());
1600:       assertEquals(155656, node1.getSourcePosition());
1601:       assertTrue(node1.hasOneChild());
1602:       assertFalse(node1.isInc());
1603:       assertFalse(node1.isWhile());
1604:       assertFalse(node1.isString());
1605:       assertFalse(node1.isThrow());
1606:       assertFalse(node1.isCast());
1607:       assertFalse(node1.isFalse());
1608:       assertFalse(node1.isFunction());
1609:       assertFalse(node1.isDebugger());
1610:       assertFalse(node1.isCatch());
1611:       assertFalse(node1.isDefaultCase());
1612:       assertFalse(node1.isSetterDef());
1613:       assertFalse(node1.isTry());
1614:       assertFalse(node1.isCall());
1615:       assertFalse(node1.isBlock());
1616:       assertFalse(node1.isFor());
1617:       assertEquals(38, node1.getLineno());
1618:       assertFalse(node1.isNull());
1619:       assertFalse(node1.isRegExp());
1620:       assertFalse(node1.isIf());
1621:       assertFalse(node1.isTrue());
1622:       assertFalse(node1.isNE());
1623:       assertFalse(node1.isName());
1624:       assertEquals(894, node1.getType());
1625:       assertFalse(node1.isDelProp());
1626:       assertFalse(node1.isVoid());
1627:       assertFalse(node1.hasMoreThanOneChild());
1628:       assertTrue(node1.hasChildren());
1629:       assertFalse(node1.isLabel());
1630:       assertEquals(1, node1.getChildCount());
1631:       assertFalse(node1.isOr());
1632:       assertFalse(node1.isNumber());
1633:       assertFalse(node1.isEmpty());
1634:       assertFalse(node1.isNew());
1635:       assertFalse(node1.isAdd());
1636:       assertFalse(node1.isCase());
1637:       assertFalse(node1.isAssignAdd());
1638:       assertFalse(node1.isDo());
1639:       assertFalse(node1.isArrayLit());
1640:       assertFalse(node1.isVar());
1641:       assertFalse(node1.isStringKey());
1642:       assertFalse(node1.isGetterDef());
1643:       assertFalse(node1.isSwitch());
1644:       assertFalse(node1.isParamList());
1645:       assertFalse(node1.isLabelName());
1646:       
1647:       boolean boolean6 = node2.isNoSideEffectsCall();
1648:       assertNotSame(node0, node3);
1649:       assertNotSame(node1, node2);
1650:       assertNotSame(node2, node1);
1651:       assertFalse(boolean6);
1652:       assertFalse(node0.equals((Object)node1));
1653:       assertFalse(node0.equals((Object)node2));
1654:       assertFalse(node0.equals((Object)node3));
1655:       assertFalse(node1.equals((Object)node0));
1656:       assertFalse(node1.equals((Object)node2));
1657:       assertFalse(node1.equals((Object)node3));
1658:       assertFalse(node2.equals((Object)node1));
1659:       assertFalse(node2.equals((Object)node3));
1660:       assertFalse(node2.equals((Object)node0));
1661:       assertTrue(boolean6 == boolean3);
1662:       assertTrue(boolean6 == boolean2);
1663:       assertTrue(boolean6 == boolean1);
1664:       assertTrue(boolean6 == boolean5);
1665:       assertTrue(boolean6 == boolean0);
1666:       assertTrue(boolean6 == boolean4);
1667:       assertFalse(node0.isCast());
1668:       assertFalse(node0.hasOneChild());
1669:       assertFalse(node0.isLabelName());
1670:       assertFalse(node0.isAssign());
1671:       assertFalse(node0.isGetElem());
1672:       assertFalse(node0.isExprResult());
1673:       assertFalse(node0.isNumber());
1674:       assertEquals((-1), node0.getSourcePosition());
1675:       assertFalse(node0.isOr());
1676:       assertFalse(node0.isContinue());
1677:       assertFalse(node0.isAnd());
1678:       assertFalse(node0.isDo());
1679:       assertFalse(node0.isNew());
1680:       assertFalse(node0.isAssignAdd());
1681:       assertFalse(node0.isLabel());
1682:       assertFalse(node0.isThrow());
1683:       assertFalse(node0.isVar());
1684:       assertFalse(node0.isFalse());
1685:       assertFalse(node0.isName());
1686:       assertFalse(node0.isBreak());
1687:       assertFalse(node0.isCall());
1688:       assertFalse(node0.isAdd());
1689:       assertFalse(node0.isNull());
1690:       assertFalse(node0.isNot());
1691:       assertFalse(node0.isObjectLit());
1692:       assertFalse(node0.isGetProp());
1693:       assertFalse(node0.isComma());
1694:       assertFalse(node0.isDec());
1695:       assertFalse(node0.isTypeOf());
1696:       assertFalse(node0.isReturn());
1697:       assertFalse(node0.isWhile());
1698:       assertFalse(node0.hasChildren());
1699:       assertFalse(node0.isArrayLit());
1700:       assertFalse(node0.isEmpty());
1701:       assertFalse(node0.isDebugger());
1702:       assertFalse(node0.isGetterDef());
1703:       assertFalse(node0.isDelProp());
1704:       assertFalse(node0.isVoid());
1705:       assertFalse(node0.isIf());
1706:       assertFalse(node0.isTrue());
1707:       assertFalse(node0.isNE());
1708:       assertEquals(0, node0.getChildCount());
1709:       assertFalse(node0.isIn());
1710:       assertFalse(node0.isSetterDef());
1711:       assertFalse(node0.isInc());
1712:       assertFalse(node0.isFunction());
1713:       assertFalse(node0.isDefaultCase());
1714:       assertEquals(40, node0.getType());
1715:       assertFalse(node0.isSwitch());
1716:       assertFalse(node0.isParamList());
1717:       assertEquals((-1), node0.getCharno());
1718:       assertFalse(node0.isStringKey());
1719:       assertFalse(node0.hasMoreThanOneChild());
1720:       assertFalse(node0.isCatch());
1721:       assertFalse(node0.isWith());
1722:       assertEquals((-1), node0.getLineno());
1723:       assertFalse(node0.isCase());
1724:       assertFalse(node0.isInstanceOf());
1725:       assertFalse(node0.isScript());
1726:       assertFalse(node0.isThis());
1727:       assertFalse(node0.isTry());
1728:       assertFalse(node0.isRegExp());
1729:       assertTrue(node0.isString());
1730:       assertFalse(node0.isBlock());
1731:       assertFalse(node0.isHook());
1732:       assertFalse(node0.isFor());
1733:       assertEquals(8, node1.getCharno());
1734:       assertFalse(node1.isAnd());
1735:       assertFalse(node1.isInstanceOf());
1736:       assertFalse(node1.isWith());
1737:       assertFalse(node1.isComma());
1738:       assertFalse(node1.isObjectLit());
1739:       assertFalse(node1.isNot());
1740:       assertFalse(node1.isScript());
1741:       assertFalse(node1.isThis());
1742:       assertFalse(node1.isGetProp());
1743:       assertFalse(node1.isHook());
1744:       assertFalse(node1.isDec());
1745:       assertFalse(node1.isAssign());
1746:       assertFalse(node1.isTypeOf());
1747:       assertFalse(node1.isBreak());
1748:       assertFalse(node1.isExprResult());
1749:       assertFalse(node1.isGetElem());
1750:       assertFalse(node1.isIn());
1751:       assertFalse(node1.isContinue());
1752:       assertFalse(node1.isReturn());
1753:       assertEquals(155656, node1.getSourcePosition());
1754:       assertTrue(node1.hasOneChild());
1755:       assertFalse(node1.isInc());
1756:       assertFalse(node1.isWhile());
1757:       assertFalse(node1.isString());
1758:       assertFalse(node1.isThrow());
1759:       assertFalse(node1.isCast());
1760:       assertFalse(node1.isFalse());
1761:       assertFalse(node1.isFunction());
1762:       assertFalse(node1.isDebugger());
1763:       assertFalse(node1.isCatch());
1764:       assertFalse(node1.isDefaultCase());
1765:       assertFalse(node1.isSetterDef());
1766:       assertFalse(node1.isTry());
1767:       assertFalse(node1.isCall());
1768:       assertFalse(node1.isBlock());
1769:       assertFalse(node1.isFor());
1770:       assertEquals(38, node1.getLineno());
1771:       assertFalse(node1.isNull());
1772:       assertFalse(node1.isRegExp());
1773:       assertFalse(node1.isIf());
1774:       assertFalse(node1.isTrue());
1775:       assertFalse(node1.isNE());
1776:       assertFalse(node1.isName());
1777:       assertEquals(894, node1.getType());
1778:       assertFalse(node1.isDelProp());
1779:       assertFalse(node1.isVoid());
1780:       assertFalse(node1.hasMoreThanOneChild());
1781:       assertTrue(node1.hasChildren());
1782:       assertFalse(node1.isLabel());
1783:       assertEquals(1, node1.getChildCount());
1784:       assertFalse(node1.isOr());
1785:       assertFalse(node1.isNumber());
1786:       assertFalse(node1.isEmpty());
1787:       assertFalse(node1.isNew());
1788:       assertFalse(node1.isAdd());
1789:       assertFalse(node1.isCase());
1790:       assertFalse(node1.isAssignAdd());
1791:       assertFalse(node1.isDo());
1792:       assertFalse(node1.isArrayLit());
1793:       assertFalse(node1.isVar());
1794:       assertFalse(node1.isStringKey());
1795:       assertFalse(node1.isGetterDef());
1796:       assertFalse(node1.isSwitch());
1797:       assertFalse(node1.isParamList());
1798:       assertFalse(node1.isLabelName());
1799:       assertFalse(node2.isFalse());
1800:       assertFalse(node2.isThrow());
1801:       assertFalse(node2.isHook());
1802:       assertFalse(node2.isComma());
1803:       assertFalse(node2.isThis());
1804:       assertFalse(node2.isInc());
1805:       assertFalse(node2.isGetProp());
1806:       assertFalse(node2.isCase());
1807:       assertEquals(155656, node2.getSourcePosition());
1808:       assertFalse(node2.isWith());
1809:       assertFalse(node2.isInstanceOf());
1810:       assertFalse(node2.isDelProp());
1811:       assertEquals(8, node2.getCharno());
1812:       assertFalse(node2.isExprResult());
1813:       assertFalse(node2.isBreak());
1814:       assertFalse(node2.isGetElem());
1815:       assertFalse(node2.isAssign());
1816:       assertFalse(node2.isIf());
1817:       assertFalse(node2.isDec());
1818:       assertFalse(node2.isTypeOf());
1819:       assertEquals(38, node2.getLineno());
1820:       assertFalse(node2.isNE());
1821:       assertFalse(node2.hasChildren());
1822:       assertFalse(node2.isIn());
1823:       assertFalse(node2.isNot());
1824:       assertFalse(node2.isString());
1825:       assertFalse(node2.isObjectLit());
1826:       assertFalse(node2.isContinue());
1827:       assertFalse(node2.isAnd());
1828:       assertFalse(node2.isDebugger());
1829:       assertFalse(node2.isFunction());
1830:       assertFalse(node2.isCast());
1831:       assertFalse(node2.isStringKey());
1832:       assertFalse(node2.isName());
1833:       assertFalse(node2.isNull());
1834:       assertFalse(node2.isVar());
1835:       assertFalse(node2.isNew());
1836:       assertFalse(node2.isBlock());
1837:       assertFalse(node2.isAdd());
1838:       assertFalse(node2.isSetterDef());
1839:       assertFalse(node2.isWhile());
1840:       assertFalse(node2.hasMoreThanOneChild());
1841:       assertFalse(node2.isRegExp());
1842:       assertFalse(node2.isTrue());
1843:       assertFalse(node2.isReturn());
1844:       assertFalse(node2.isVoid());
1845:       assertFalse(node2.isCatch());
1846:       assertFalse(node2.isCall());
1847:       assertEquals(894, node2.getType());
1848:       assertFalse(node2.isFor());
1849:       assertFalse(node2.isLabelName());
1850:       assertFalse(node2.isEmpty());
1851:       assertFalse(node2.isNumber());
1852:       assertFalse(node2.isGetterDef());
1853:       assertFalse(node2.isOr());
1854:       assertFalse(node2.isTry());
1855:       assertFalse(node2.isAssignAdd());
1856:       assertFalse(node2.hasOneChild());
1857:       assertFalse(node2.isScript());
1858:       assertFalse(node2.isDo());
1859:       assertFalse(node2.isDefaultCase());
1860:       assertEquals(0, node2.getChildCount());
1861:       assertFalse(node2.isLabel());
1862:       assertFalse(node2.isParamList());
1863:       assertFalse(node2.isSwitch());
1864:       assertFalse(node2.isArrayLit());
1865:       
1866:       boolean boolean7 = node1.isNoSideEffectsCall();
1867:       assertNotSame(node0, node3);
1868:       assertNotSame(node1, node2);
1869:       assertFalse(boolean7);
1870:       assertFalse(node0.equals((Object)node1));
1871:       assertFalse(node0.equals((Object)node2));
1872:       assertFalse(node0.equals((Object)node3));
1873:       assertFalse(node1.equals((Object)node0));
1874:       assertFalse(node1.equals((Object)node2));
1875:       assertFalse(node1.equals((Object)node3));
1876:       assertTrue(boolean7 == boolean3);
1877:       assertTrue(boolean7 == boolean4);
1878:       assertTrue(boolean7 == boolean5);
1879:       assertTrue(boolean7 == boolean0);
1880:       assertTrue(boolean7 == boolean1);
1881:       assertTrue(boolean7 == boolean6);
1882:       assertTrue(boolean7 == boolean2);
1883:       assertFalse(node0.isCast());
1884:       assertFalse(node0.hasOneChild());
1885:       assertFalse(node0.isLabelName());
1886:       assertFalse(node0.isAssign());
1887:       assertFalse(node0.isGetElem());
1888:       assertFalse(node0.isExprResult());
1889:       assertFalse(node0.isNumber());
1890:       assertEquals((-1), node0.getSourcePosition());
1891:       assertFalse(node0.isOr());
1892:       assertFalse(node0.isContinue());
1893:       assertFalse(node0.isAnd());
1894:       assertFalse(node0.isDo());
1895:       assertFalse(node0.isNew());
1896:       assertFalse(node0.isAssignAdd());
1897:       assertFalse(node0.isLabel());
1898:       assertFalse(node0.isThrow());
1899:       assertFalse(node0.isVar());
1900:       assertFalse(node0.isFalse());
1901:       assertFalse(node0.isName());
1902:       assertFalse(node0.isBreak());
1903:       assertFalse(node0.isCall());
1904:       assertFalse(node0.isAdd());
1905:       assertFalse(node0.isNull());
1906:       assertFalse(node0.isNot());
1907:       assertFalse(node0.isObjectLit());
1908:       assertFalse(node0.isGetProp());
1909:       assertFalse(node0.isComma());
1910:       assertFalse(node0.isDec());
1911:       assertFalse(node0.isTypeOf());
1912:       assertFalse(node0.isReturn());
1913:       assertFalse(node0.isWhile());
1914:       assertFalse(node0.hasChildren());
1915:       assertFalse(node0.isArrayLit());
1916:       assertFalse(node0.isEmpty());
1917:       assertFalse(node0.isDebugger());
1918:       assertFalse(node0.isGetterDef());
1919:       assertFalse(node0.isDelProp());
1920:       assertFalse(node0.isVoid());
1921:       assertFalse(node0.isIf());
1922:       assertFalse(node0.isTrue());
1923:       assertFalse(node0.isNE());
1924:       assertEquals(0, node0.getChildCount());
1925:       assertFalse(node0.isIn());
1926:       assertFalse(node0.isSetterDef());
1927:       assertFalse(node0.isInc());
1928:       assertFalse(node0.isFunction());
1929:       assertFalse(node0.isDefaultCase());
1930:       assertEquals(40, node0.getType());
1931:       assertFalse(node0.isSwitch());
1932:       assertFalse(node0.isParamList());
1933:       assertEquals((-1), node0.getCharno());
1934:       assertFalse(node0.isStringKey());
1935:       assertFalse(node0.hasMoreThanOneChild());
1936:       assertFalse(node0.isCatch());
1937:       assertFalse(node0.isWith());
1938:       assertEquals((-1), node0.getLineno());
1939:       assertFalse(node0.isCase());
1940:       assertFalse(node0.isInstanceOf());
1941:       assertFalse(node0.isScript());
1942:       assertFalse(node0.isThis());
1943:       assertFalse(node0.isTry());
1944:       assertFalse(node0.isRegExp());
1945:       assertTrue(node0.isString());
1946:       assertFalse(node0.isBlock());
1947:       assertFalse(node0.isHook());
1948:       assertFalse(node0.isFor());
1949:       assertEquals(8, node1.getCharno());
1950:       assertFalse(node1.isAnd());
1951:       assertFalse(node1.isInstanceOf());
1952:       assertFalse(node1.isWith());
1953:       assertFalse(node1.isComma());
1954:       assertFalse(node1.isObjectLit());
1955:       assertFalse(node1.isNot());
1956:       assertFalse(node1.isScript());
1957:       assertFalse(node1.isThis());
1958:       assertFalse(node1.isGetProp());
1959:       assertFalse(node1.isHook());
1960:       assertFalse(node1.isDec());
1961:       assertFalse(node1.isAssign());
1962:       assertFalse(node1.isTypeOf());
1963:       assertFalse(node1.isBreak());
1964:       assertFalse(node1.isExprResult());
1965:       assertFalse(node1.isGetElem());
1966:       assertFalse(node1.isIn());
1967:       assertFalse(node1.isContinue());
1968:       assertFalse(node1.isReturn());
1969:       assertEquals(155656, node1.getSourcePosition());
1970:       assertTrue(node1.hasOneChild());
1971:       assertFalse(node1.isInc());
1972:       assertFalse(node1.isWhile());
1973:       assertFalse(node1.isString());
1974:       assertFalse(node1.isThrow());
1975:       assertFalse(node1.isCast());
1976:       assertFalse(node1.isFalse());
1977:       assertFalse(node1.isFunction());
1978:       assertFalse(node1.isDebugger());
1979:       assertFalse(node1.isCatch());
1980:       assertFalse(node1.isDefaultCase());
1981:       assertFalse(node1.isSetterDef());
1982:       assertFalse(node1.isTry());
1983:       assertFalse(node1.isCall());
1984:       assertFalse(node1.isBlock());
1985:       assertFalse(node1.isFor());
1986:       assertEquals(38, node1.getLineno());
1987:       assertFalse(node1.isNull());
1988:       assertFalse(node1.isRegExp());
1989:       assertFalse(node1.isIf());
1990:       assertFalse(node1.isTrue());
1991:       assertFalse(node1.isNE());
1992:       assertFalse(node1.isName());
1993:       assertEquals(894, node1.getType());
1994:       assertFalse(node1.isDelProp());
1995:       assertFalse(node1.isVoid());
1996:       assertFalse(node1.hasMoreThanOneChild());
1997:       assertTrue(node1.hasChildren());
1998:       assertFalse(node1.isLabel());
1999:       assertEquals(1, node1.getChildCount());
2000:       assertFalse(node1.isOr());
2001:       assertFalse(node1.isNumber());
2002:       assertFalse(node1.isEmpty());
2003:       assertFalse(node1.isNew());
2004:       assertFalse(node1.isAdd());
2005:       assertFalse(node1.isCase());
2006:       assertFalse(node1.isAssignAdd());
2007:       assertFalse(node1.isDo());
2008:       assertFalse(node1.isArrayLit());
2009:       assertFalse(node1.isVar());
2010:       assertFalse(node1.isStringKey());
2011:       assertFalse(node1.isGetterDef());
2012:       assertFalse(node1.isSwitch());
2013:       assertFalse(node1.isParamList());
2014:       assertFalse(node1.isLabelName());
2015:       
2016:       boolean boolean8 = node3.isGetterDef();
2017:       assertNotSame(node3, node0);
2018:       assertFalse(boolean8);
2019:       assertTrue(boolean8 == boolean0);
2020:       assertTrue(boolean8 == boolean1);
2021:       assertTrue(boolean8 == boolean6);
2022:       assertTrue(boolean8 == boolean4);
2023:       assertTrue(boolean8 == boolean7);
2024:       assertTrue(boolean8 == boolean2);
2025:       assertTrue(boolean8 == boolean3);
2026:       assertTrue(boolean8 == boolean5);
2027:       assertFalse(node3.equals((Object)node2));
2028:       assertFalse(node3.equals((Object)node0));
2029:       assertFalse(node3.equals((Object)node1));
2030:       assertFalse(node3.isExprResult());
2031:       assertFalse(node3.hasOneChild());
2032:       assertFalse(node3.isGetElem());
2033:       assertFalse(node3.isLabelName());
2034:       assertFalse(node3.isAssign());
2035:       assertFalse(node3.isInstanceOf());
2036:       assertFalse(node3.isDec());
2037:       assertFalse(node3.isTypeOf());
2038:       assertFalse(node3.isWith());
2039:       assertFalse(node3.isCast());
2040:       assertFalse(node3.isGetProp());
2041:       assertFalse(node3.isComma());
2042:       assertFalse(node3.isThis());
2043:       assertFalse(node3.isReturn());
2044:       assertEquals((-1), node3.getSourcePosition());
2045:       assertFalse(node3.hasChildren());
2046:       assertFalse(node3.isAnd());
2047:       assertFalse(node3.isObjectLit());
2048:       assertFalse(node3.isNot());
2049:       assertFalse(node3.isNumber());
2050:       assertFalse(node3.isScript());
2051:       assertFalse(node3.isBlock());
2052:       assertFalse(node3.isInc());
2053:       assertFalse(node3.isHook());
2054:       assertFalse(node3.isThrow());
2055:       assertFalse(node3.isFalse());
2056:       assertFalse(node3.hasMoreThanOneChild());
2057:       assertFalse(node3.isContinue());
2058:       assertFalse(node3.isSetterDef());
2059:       assertEquals((-1), node3.getLineno());
2060:       assertFalse(node3.isIf());
2061:       assertFalse(node3.isNE());
2062:       assertFalse(node3.isIn());
2063:       assertEquals(4095, node3.getType());
2064:       assertFalse(node3.isTrue());
2065:       assertFalse(node3.isTry());
2066:       assertFalse(node3.isVoid());
2067:       assertFalse(node3.isFunction());
2068:       assertFalse(node3.isDebugger());
2069:       assertFalse(node3.isDefaultCase());
2070:       assertFalse(node3.isFor());
2071:       assertFalse(node3.isArrayLit());
2072:       assertEquals(0, node3.getChildCount());
2073:       assertFalse(node3.isRegExp());
2074:       assertFalse(node3.isCatch());
2075:       assertFalse(node3.isParamList());
2076:       assertFalse(node3.isStringKey());
2077:       assertFalse(node3.isCase());
2078:       assertFalse(node3.isGetterDef());
2079:       assertFalse(node3.isString());
2080:       assertFalse(node3.isAdd());
2081:       assertFalse(node3.isNew());
2082:       assertEquals((-1), node3.getCharno());
2083:       assertFalse(node3.isVar());
2084:       assertFalse(node3.isSwitch());
2085:       assertFalse(node3.isWhile());
2086:       assertFalse(node3.isCall());
2087:       assertFalse(node3.isName());
2088:       assertFalse(node3.isBreak());
2089:       assertFalse(node3.isOr());
2090:       assertFalse(node3.isLabel());
2091:       assertFalse(node3.isNull());
2092:       assertFalse(node3.isDelProp());
2093:       assertFalse(node3.isAssignAdd());
2094:       assertFalse(node3.isEmpty());
2095:       assertFalse(node3.isDo());
2096:       
2097:       boolean boolean9 = node2.isLocalResultCall();
2098:       assertNotSame(node0, node3);
2099:       assertNotSame(node1, node2);
2100:       assertNotSame(node2, node1);
2101:       assertFalse(boolean9);
2102:       assertFalse(node0.equals((Object)node1));
2103:       assertFalse(node0.equals((Object)node2));
2104:       assertFalse(node0.equals((Object)node3));
2105:       assertTrue(boolean9 == boolean0);
2106:       assertTrue(boolean9 == boolean1);
2107:       assertTrue(boolean9 == boolean4);
2108:       assertTrue(boolean9 == boolean6);
2109:       assertTrue(boolean9 == boolean7);
2110:       assertTrue(boolean9 == boolean2);
2111:       assertTrue(boolean9 == boolean3);
2112:       assertTrue(boolean9 == boolean5);
2113:       assertTrue(boolean9 == boolean8);
2114:       assertFalse(node1.equals((Object)node0));
2115:       assertFalse(node1.equals((Object)node2));
2116:       assertFalse(node1.equals((Object)node3));
2117:       assertFalse(node2.equals((Object)node1));
2118:       assertFalse(node2.equals((Object)node3));
2119:       assertFalse(node2.equals((Object)node0));
2120:       assertFalse(node0.isCast());
2121:       assertFalse(node0.hasOneChild());
2122:       assertFalse(node0.isLabelName());
2123:       assertFalse(node0.isAssign());
2124:       assertFalse(node0.isGetElem());
2125:       assertFalse(node0.isExprResult());
2126:       assertFalse(node0.isNumber());
2127:       assertEquals((-1), node0.getSourcePosition());
2128:       assertFalse(node0.isOr());
2129:       assertFalse(node0.isContinue());
2130:       assertFalse(node0.isAnd());
2131:       assertFalse(node0.isDo());
2132:       assertFalse(node0.isNew());
2133:       assertFalse(node0.isAssignAdd());
2134:       assertFalse(node0.isLabel());
2135:       assertFalse(node0.isThrow());
2136:       assertFalse(node0.isVar());
2137:       assertFalse(node0.isFalse());
2138:       assertFalse(node0.isName());
2139:       assertFalse(node0.isBreak());
2140:       assertFalse(node0.isCall());
2141:       assertFalse(node0.isAdd());
2142:       assertFalse(node0.isNull());
2143:       assertFalse(node0.isNot());
2144:       assertFalse(node0.isObjectLit());
2145:       assertFalse(node0.isGetProp());
2146:       assertFalse(node0.isComma());
2147:       assertFalse(node0.isDec());
2148:       assertFalse(node0.isTypeOf());
2149:       assertFalse(node0.isReturn());
2150:       assertFalse(node0.isWhile());
2151:       assertFalse(node0.hasChildren());
2152:       assertFalse(node0.isArrayLit());
2153:       assertFalse(node0.isEmpty());
2154:       assertFalse(node0.isDebugger());
2155:       assertFalse(node0.isGetterDef());
2156:       assertFalse(node0.isDelProp());
2157:       assertFalse(node0.isVoid());
2158:       assertFalse(node0.isIf());
2159:       assertFalse(node0.isTrue());
2160:       assertFalse(node0.isNE());
2161:       assertEquals(0, node0.getChildCount());
2162:       assertFalse(node0.isIn());
2163:       assertFalse(node0.isSetterDef());
2164:       assertFalse(node0.isInc());
2165:       assertFalse(node0.isFunction());
2166:       assertFalse(node0.isDefaultCase());
2167:       assertEquals(40, node0.getType());
2168:       assertFalse(node0.isSwitch());
2169:       assertFalse(node0.isParamList());
2170:       assertEquals((-1), node0.getCharno());
2171:       assertFalse(node0.isStringKey());
2172:       assertFalse(node0.hasMoreThanOneChild());
2173:       assertFalse(node0.isCatch());
2174:       assertFalse(node0.isWith());
2175:       assertEquals((-1), node0.getLineno());
2176:       assertFalse(node0.isCase());
2177:       assertFalse(node0.isInstanceOf());
2178:       assertFalse(node0.isScript());
2179:       assertFalse(node0.isThis());
2180:       assertFalse(node0.isTry());
2181:       assertFalse(node0.isRegExp());
2182:       assertTrue(node0.isString());
2183:       assertFalse(node0.isBlock());
2184:       assertFalse(node0.isHook());
2185:       assertFalse(node0.isFor());
2186:       assertEquals(8, node1.getCharno());
2187:       assertFalse(node1.isAnd());
2188:       assertFalse(node1.isInstanceOf());
2189:       assertFalse(node1.isWith());
2190:       assertFalse(node1.isComma());
2191:       assertFalse(node1.isObjectLit());
2192:       assertFalse(node1.isNot());
2193:       assertFalse(node1.isScript());
2194:       assertFalse(node1.isThis());
2195:       assertFalse(node1.isGetProp());
2196:       assertFalse(node1.isHook());
2197:       assertFalse(node1.isDec());
2198:       assertFalse(node1.isAssign());
2199:       assertFalse(node1.isTypeOf());
2200:       assertFalse(node1.isBreak());
2201:       assertFalse(node1.isExprResult());
2202:       assertFalse(node1.isGetElem());
2203:       assertFalse(node1.isIn());
2204:       assertFalse(node1.isContinue());
2205:       assertFalse(node1.isReturn());
2206:       assertEquals(155656, node1.getSourcePosition());
2207:       assertTrue(node1.hasOneChild());
2208:       assertFalse(node1.isInc());
2209:       assertFalse(node1.isWhile());
2210:       assertFalse(node1.isString());
2211:       assertFalse(node1.isThrow());
2212:       assertFalse(node1.isCast());
2213:       assertFalse(node1.isFalse());
2214:       assertFalse(node1.isFunction());
2215:       assertFalse(node1.isDebugger());
2216:       assertFalse(node1.isCatch());
2217:       assertFalse(node1.isDefaultCase());
2218:       assertFalse(node1.isSetterDef());
2219:       assertFalse(node1.isTry());
2220:       assertFalse(node1.isCall());
2221:       assertFalse(node1.isBlock());
2222:       assertFalse(node1.isFor());
2223:       assertEquals(38, node1.getLineno());
2224:       assertFalse(node1.isNull());
2225:       assertFalse(node1.isRegExp());
2226:       assertFalse(node1.isIf());
2227:       assertFalse(node1.isTrue());
2228:       assertFalse(node1.isNE());
2229:       assertFalse(node1.isName());
2230:       assertEquals(894, node1.getType());
2231:       assertFalse(node1.isDelProp());
2232:       assertFalse(node1.isVoid());
2233:       assertFalse(node1.hasMoreThanOneChild());
2234:       assertTrue(node1.hasChildren());
2235:       assertFalse(node1.isLabel());
2236:       assertEquals(1, node1.getChildCount());
2237:       assertFalse(node1.isOr());
2238:       assertFalse(node1.isNumber());
2239:       assertFalse(node1.isEmpty());
2240:       assertFalse(node1.isNew());
2241:       assertFalse(node1.isAdd());
2242:       assertFalse(node1.isCase());
2243:       assertFalse(node1.isAssignAdd());
2244:       assertFalse(node1.isDo());
2245:       assertFalse(node1.isArrayLit());
2246:       assertFalse(node1.isVar());
2247:       assertFalse(node1.isStringKey());
2248:       assertFalse(node1.isGetterDef());
2249:       assertFalse(node1.isSwitch());
2250:       assertFalse(node1.isParamList());
2251:       assertFalse(node1.isLabelName());
2252:       assertFalse(node2.isFalse());
2253:       assertFalse(node2.isThrow());
2254:       assertFalse(node2.isHook());
2255:       assertFalse(node2.isComma());
2256:       assertFalse(node2.isThis());
2257:       assertFalse(node2.isInc());
2258:       assertFalse(node2.isGetProp());
2259:       assertFalse(node2.isCase());
2260:       assertEquals(155656, node2.getSourcePosition());
2261:       assertFalse(node2.isWith());
2262:       assertFalse(node2.isInstanceOf());
2263:       assertFalse(node2.isDelProp());
2264:       assertEquals(8, node2.getCharno());
2265:       assertFalse(node2.isExprResult());
2266:       assertFalse(node2.isBreak());
2267:       assertFalse(node2.isGetElem());
2268:       assertFalse(node2.isAssign());
2269:       assertFalse(node2.isIf());
2270:       assertFalse(node2.isDec());
2271:       assertFalse(node2.isTypeOf());
2272:       assertEquals(38, node2.getLineno());
2273:       assertFalse(node2.isNE());
2274:       assertFalse(node2.hasChildren());
2275:       assertFalse(node2.isIn());
2276:       assertFalse(node2.isNot());
2277:       assertFalse(node2.isString());
2278:       assertFalse(node2.isObjectLit());
2279:       assertFalse(node2.isContinue());
2280:       assertFalse(node2.isAnd());
2281:       assertFalse(node2.isDebugger());
2282:       assertFalse(node2.isFunction());
2283:       assertFalse(node2.isCast());
2284:       assertFalse(node2.isStringKey());
2285:       assertFalse(node2.isName());
2286:       assertFalse(node2.isNull());
2287:       assertFalse(node2.isVar());
2288:       assertFalse(node2.isNew());
2289:       assertFalse(node2.isBlock());
2290:       assertFalse(node2.isAdd());
2291:       assertFalse(node2.isSetterDef());
2292:       assertFalse(node2.isWhile());
2293:       assertFalse(node2.hasMoreThanOneChild());
2294:       assertFalse(node2.isRegExp());
2295:       assertFalse(node2.isTrue());
2296:       assertFalse(node2.isReturn());
2297:       assertFalse(node2.isVoid());
2298:       assertFalse(node2.isCatch());
2299:       assertFalse(node2.isCall());
2300:       assertEquals(894, node2.getType());
2301:       assertFalse(node2.isFor());
2302:       assertFalse(node2.isLabelName());
2303:       assertFalse(node2.isEmpty());
2304:       assertFalse(node2.isNumber());
2305:       assertFalse(node2.isGetterDef());
2306:       assertFalse(node2.isOr());
2307:       assertFalse(node2.isTry());
2308:       assertFalse(node2.isAssignAdd());
2309:       assertFalse(node2.hasOneChild());
2310:       assertFalse(node2.isScript());
2311:       assertFalse(node2.isDo());
2312:       assertFalse(node2.isDefaultCase());
2313:       assertEquals(0, node2.getChildCount());
2314:       assertFalse(node2.isLabel());
2315:       assertFalse(node2.isParamList());
2316:       assertFalse(node2.isSwitch());
2317:       assertFalse(node2.isArrayLit());
2318:       
2319:       boolean boolean10 = node2.isSyntheticBlock();
2320:       assertNotSame(node0, node3);
2321:       assertNotSame(node1, node2);
2322:       assertNotSame(node2, node1);
2323:       assertFalse(boolean10);
2324:       assertFalse(node0.equals((Object)node1));
2325:       assertFalse(node0.equals((Object)node2));
2326:       assertFalse(node0.equals((Object)node3));
2327:       assertTrue(boolean10 == boolean4);
2328:       assertTrue(boolean10 == boolean2);
2329:       assertTrue(boolean10 == boolean9);
2330:       assertTrue(boolean10 == boolean6);
2331:       assertTrue(boolean10 == boolean7);
2332:       assertTrue(boolean10 == boolean0);
2333:       assertTrue(boolean10 == boolean3);
2334:       assertTrue(boolean10 == boolean8);
2335:       assertTrue(boolean10 == boolean1);
2336:       assertTrue(boolean10 == boolean5);
2337:       assertFalse(node1.equals((Object)node0));
2338:       assertFalse(node1.equals((Object)node2));
2339:       assertFalse(node1.equals((Object)node3));
2340:       assertFalse(node2.equals((Object)node1));
2341:       assertFalse(node2.equals((Object)node3));
2342:       assertFalse(node2.equals((Object)node0));
2343:       assertFalse(node0.isCast());
2344:       assertFalse(node0.hasOneChild());
2345:       assertFalse(node0.isLabelName());
2346:       assertFalse(node0.isAssign());
2347:       assertFalse(node0.isGetElem());
2348:       assertFalse(node0.isExprResult());
2349:       assertFalse(node0.isNumber());
2350:       assertEquals((-1), node0.getSourcePosition());
2351:       assertFalse(node0.isOr());
2352:       assertFalse(node0.isContinue());
2353:       assertFalse(node0.isAnd());
2354:       assertFalse(node0.isDo());
2355:       assertFalse(node0.isNew());
2356:       assertFalse(node0.isAssignAdd());
2357:       assertFalse(node0.isLabel());
2358:       assertFalse(node0.isThrow());
2359:       assertFalse(node0.isVar());
2360:       assertFalse(node0.isFalse());
2361:       assertFalse(node0.isName());
2362:       assertFalse(node0.isBreak());
2363:       assertFalse(node0.isCall());
2364:       assertFalse(node0.isAdd());
2365:       assertFalse(node0.isNull());
2366:       assertFalse(node0.isNot());
2367:       assertFalse(node0.isObjectLit());
2368:       assertFalse(node0.isGetProp());
2369:       assertFalse(node0.isComma());
2370:       assertFalse(node0.isDec());
2371:       assertFalse(node0.isTypeOf());
2372:       assertFalse(node0.isReturn());
2373:       assertFalse(node0.isWhile());
2374:       assertFalse(node0.hasChildren());
2375:       assertFalse(node0.isArrayLit());
2376:       assertFalse(node0.isEmpty());
2377:       assertFalse(node0.isDebugger());
2378:       assertFalse(node0.isGetterDef());
2379:       assertFalse(node0.isDelProp());
2380:       assertFalse(node0.isVoid());
2381:       assertFalse(node0.isIf());
2382:       assertFalse(node0.isTrue());
2383:       assertFalse(node0.isNE());
2384:       assertEquals(0, node0.getChildCount());
2385:       assertFalse(node0.isIn());
2386:       assertFalse(node0.isSetterDef());
2387:       assertFalse(node0.isInc());
2388:       assertFalse(node0.isFunction());
2389:       assertFalse(node0.isDefaultCase());
2390:       assertEquals(40, node0.getType());
2391:       assertFalse(node0.isSwitch());
2392:       assertFalse(node0.isParamList());
2393:       assertEquals((-1), node0.getCharno());
2394:       assertFalse(node0.isStringKey());
2395:       assertFalse(node0.hasMoreThanOneChild());
2396:       assertFalse(node0.isCatch());
2397:       assertFalse(node0.isWith());
2398:       assertEquals((-1), node0.getLineno());
2399:       assertFalse(node0.isCase());
2400:       assertFalse(node0.isInstanceOf());
2401:       assertFalse(node0.isScript());
2402:       assertFalse(node0.isThis());
2403:       assertFalse(node0.isTry());
2404:       assertFalse(node0.isRegExp());
2405:       assertTrue(node0.isString());
2406:       assertFalse(node0.isBlock());
2407:       assertFalse(node0.isHook());
2408:       assertFalse(node0.isFor());
2409:       assertEquals(8, node1.getCharno());
2410:       assertFalse(node1.isAnd());
2411:       assertFalse(node1.isInstanceOf());
2412:       assertFalse(node1.isWith());
2413:       assertFalse(node1.isComma());
2414:       assertFalse(node1.isObjectLit());
2415:       assertFalse(node1.isNot());
2416:       assertFalse(node1.isScript());
2417:       assertFalse(node1.isThis());
2418:       assertFalse(node1.isGetProp());
2419:       assertFalse(node1.isHook());
2420:       assertFalse(node1.isDec());
2421:       assertFalse(node1.isAssign());
2422:       assertFalse(node1.isTypeOf());
2423:       assertFalse(node1.isBreak());
2424:       assertFalse(node1.isExprResult());
2425:       assertFalse(node1.isGetElem());
2426:       assertFalse(node1.isIn());
2427:       assertFalse(node1.isContinue());
2428:       assertFalse(node1.isReturn());
2429:       assertEquals(155656, node1.getSourcePosition());
2430:       assertTrue(node1.hasOneChild());
2431:       assertFalse(node1.isInc());
2432:       assertFalse(node1.isWhile());
2433:       assertFalse(node1.isString());
2434:       assertFalse(node1.isThrow());
2435:       assertFalse(node1.isCast());
2436:       assertFalse(node1.isFalse());
2437:       assertFalse(node1.isFunction());
2438:       assertFalse(node1.isDebugger());
2439:       assertFalse(node1.isCatch());
2440:       assertFalse(node1.isDefaultCase());
2441:       assertFalse(node1.isSetterDef());
2442:       assertFalse(node1.isTry());
2443:       assertFalse(node1.isCall());
2444:       assertFalse(node1.isBlock());
2445:       assertFalse(node1.isFor());
2446:       assertEquals(38, node1.getLineno());
2447:       assertFalse(node1.isNull());
2448:       assertFalse(node1.isRegExp());
2449:       assertFalse(node1.isIf());
2450:       assertFalse(node1.isTrue());
2451:       assertFalse(node1.isNE());
2452:       assertFalse(node1.isName());
2453:       assertEquals(894, node1.getType());
2454:       assertFalse(node1.isDelProp());
2455:       assertFalse(node1.isVoid());
2456:       assertFalse(node1.hasMoreThanOneChild());
2457:       assertTrue(node1.hasChildren());
2458:       assertFalse(node1.isLabel());
2459:       assertEquals(1, node1.getChildCount());
2460:       assertFalse(node1.isOr());
2461:       assertFalse(node1.isNumber());
2462:       assertFalse(node1.isEmpty());
2463:       assertFalse(node1.isNew());
2464:       assertFalse(node1.isAdd());
2465:       assertFalse(node1.isCase());
2466:       assertFalse(node1.isAssignAdd());
2467:       assertFalse(node1.isDo());
2468:       assertFalse(node1.isArrayLit());
2469:       assertFalse(node1.isVar());
2470:       assertFalse(node1.isStringKey());
2471:       assertFalse(node1.isGetterDef());
2472:       assertFalse(node1.isSwitch());
2473:       assertFalse(node1.isParamList());
2474:       assertFalse(node1.isLabelName());
2475:       assertFalse(node2.isFalse());
2476:       assertFalse(node2.isThrow());
2477:       assertFalse(node2.isHook());
2478:       assertFalse(node2.isComma());
2479:       assertFalse(node2.isThis());
2480:       assertFalse(node2.isInc());
2481:       assertFalse(node2.isGetProp());
2482:       assertFalse(node2.isCase());
2483:       assertEquals(155656, node2.getSourcePosition());
2484:       assertFalse(node2.isWith());
2485:       assertFalse(node2.isInstanceOf());
2486:       assertFalse(node2.isDelProp());
2487:       assertEquals(8, node2.getCharno());
2488:       assertFalse(node2.isExprResult());
2489:       assertFalse(node2.isBreak());
2490:       assertFalse(node2.isGetElem());
2491:       assertFalse(node2.isAssign());
2492:       assertFalse(node2.isIf());
2493:       assertFalse(node2.isDec());
2494:       assertFalse(node2.isTypeOf());
2495:       assertEquals(38, node2.getLineno());
2496:       assertFalse(node2.isNE());
2497:       assertFalse(node2.hasChildren());
2498:       assertFalse(node2.isIn());
2499:       assertFalse(node2.isNot());
2500:       assertFalse(node2.isString());
2501:       assertFalse(node2.isObjectLit());
2502:       assertFalse(node2.isContinue());
2503:       assertFalse(node2.isAnd());
2504:       assertFalse(node2.isDebugger());
2505:       assertFalse(node2.isFunction());
2506:       assertFalse(node2.isCast());
2507:       assertFalse(node2.isStringKey());
2508:       assertFalse(node2.isName());
2509:       assertFalse(node2.isNull());
2510:       assertFalse(node2.isVar());
2511:       assertFalse(node2.isNew());
2512:       assertFalse(node2.isBlock());
2513:       assertFalse(node2.isAdd());
2514:       assertFalse(node2.isSetterDef());
2515:       assertFalse(node2.isWhile());
2516:       assertFalse(node2.hasMoreThanOneChild());
2517:       assertFalse(node2.isRegExp());
2518:       assertFalse(node2.isTrue());
2519:       assertFalse(node2.isReturn());
2520:       assertFalse(node2.isVoid());
2521:       assertFalse(node2.isCatch());
2522:       assertFalse(node2.isCall());
2523:       assertEquals(894, node2.getType());
2524:       assertFalse(node2.isFor());
2525:       assertFalse(node2.isLabelName());
2526:       assertFalse(node2.isEmpty());
2527:       assertFalse(node2.isNumber());
2528:       assertFalse(node2.isGetterDef());
2529:       assertFalse(node2.isOr());
2530:       assertFalse(node2.isTry());
2531:       assertFalse(node2.isAssignAdd());
2532:       assertFalse(node2.hasOneChild());
2533:       assertFalse(node2.isScript());
2534:       assertFalse(node2.isDo());
2535:       assertFalse(node2.isDefaultCase());
2536:       assertEquals(0, node2.getChildCount());
2537:       assertFalse(node2.isLabel());
2538:       assertFalse(node2.isParamList());
2539:       assertFalse(node2.isSwitch());
2540:       assertFalse(node2.isArrayLit());
2541:   }
2542: }
RegularFileObject[/tmp/EvoSuite_212_1628159334213/com/google/javascript/rhino/Node_212_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:54 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_212_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_212_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_212_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.NamedType",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSTypeExpression",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.JSDocInfo$Marker",
356:       "com.google.common.collect.ImmutableSet",
357:       "com.google.common.collect.EmptyImmutableSet",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 10:28:54.836 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("BITNOT", 2786, (-824));
assertNotNull(node0);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertNull(staticSourceFile0);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BITNOT");
assertFalse(boolean0);

node0.setStaticSourceFile((StaticSourceFile) null);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

String string0 = node0.getQualifiedName();
assertNull(string0);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

Node node1 = new Node(894, node0, node0, node0, 38, 8);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(8, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertEquals(155656, node1.getSourcePosition());
assertTrue(node1.hasOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(38, node1.getLineno());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertEquals(894, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabel());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node2 = node1.cloneNode();
assertNotNull(node2);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(8, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertEquals(155656, node1.getSourcePosition());
assertTrue(node1.hasOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(38, node1.getLineno());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertEquals(894, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabel());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertEquals(155656, node2.getSourcePosition());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertEquals(8, node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isIf());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertEquals(38, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isReturn());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertEquals(894, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isEmpty());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node3 = Node.newString(4095, "BITNOT");
assertNotNull(node3);
assertNotSame(node3, node0);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.isExprResult());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWith());
assertFalse(node3.isCast());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.hasChildren());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isSetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertEquals(4095, node3.getType());
assertFalse(node3.isTrue());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isArrayLit());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isRegExp());
assertFalse(node3.isCatch());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isVar());
assertFalse(node3.isSwitch());
assertFalse(node3.isWhile());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isNull());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);

boolean boolean3 = node0.isRegExp();
assertNotSame(node0, node3);
assertFalse(boolean3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean4 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
assertFalse(boolean4);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);

Iterable<Node> iterable0 = node2.children();
assertFalse(iterable0.contains(node2));
assertNotNull(iterable0);
assertNotSame(node0, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(8, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertEquals(155656, node1.getSourcePosition());
assertTrue(node1.hasOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(38, node1.getLineno());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertEquals(894, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabel());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertEquals(155656, node2.getSourcePosition());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertEquals(8, node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isIf());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertEquals(38, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isReturn());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertEquals(894, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isEmpty());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean5 = node1.isBlock();
assertNotSame(node0, node3);
assertNotSame(node1, node2);
assertFalse(boolean5);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(8, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertEquals(155656, node1.getSourcePosition());
assertTrue(node1.hasOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(38, node1.getLineno());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertEquals(894, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabel());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());

boolean boolean6 = node2.isNoSideEffectsCall();
assertNotSame(node0, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertFalse(boolean6);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean4);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(8, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertEquals(155656, node1.getSourcePosition());
assertTrue(node1.hasOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(38, node1.getLineno());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertEquals(894, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabel());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertEquals(155656, node2.getSourcePosition());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertEquals(8, node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isIf());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertEquals(38, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isReturn());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertEquals(894, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isEmpty());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());

boolean boolean7 = node1.isNoSideEffectsCall();
assertNotSame(node0, node3);
assertNotSame(node1, node2);
assertFalse(boolean7);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean2);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(8, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertEquals(155656, node1.getSourcePosition());
assertTrue(node1.hasOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(38, node1.getLineno());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertEquals(894, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabel());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());

boolean boolean8 = node3.isGetterDef();
assertNotSame(node3, node0);
assertFalse(boolean8);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean1);
assertTrue(boolean8 == boolean6);
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean5);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.isExprResult());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWith());
assertFalse(node3.isCast());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.hasChildren());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isSetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertEquals(4095, node3.getType());
assertFalse(node3.isTrue());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isArrayLit());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isRegExp());
assertFalse(node3.isCatch());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isVar());
assertFalse(node3.isSwitch());
assertFalse(node3.isWhile());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isNull());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());

boolean boolean9 = node2.isLocalResultCall();
assertNotSame(node0, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertFalse(boolean9);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean9 == boolean0);
assertTrue(boolean9 == boolean1);
assertTrue(boolean9 == boolean4);
assertTrue(boolean9 == boolean6);
assertTrue(boolean9 == boolean7);
assertTrue(boolean9 == boolean2);
assertTrue(boolean9 == boolean3);
assertTrue(boolean9 == boolean5);
assertTrue(boolean9 == boolean8);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(8, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertEquals(155656, node1.getSourcePosition());
assertTrue(node1.hasOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(38, node1.getLineno());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertEquals(894, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabel());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertEquals(155656, node2.getSourcePosition());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertEquals(8, node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isIf());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertEquals(38, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isReturn());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertEquals(894, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isEmpty());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());

boolean boolean10 = node2.isSyntheticBlock();
assertNotSame(node0, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertFalse(boolean10);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean10 == boolean4);
assertTrue(boolean10 == boolean2);
assertTrue(boolean10 == boolean9);
assertTrue(boolean10 == boolean6);
assertTrue(boolean10 == boolean7);
assertTrue(boolean10 == boolean0);
assertTrue(boolean10 == boolean3);
assertTrue(boolean10 == boolean8);
assertTrue(boolean10 == boolean1);
assertTrue(boolean10 == boolean5);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(8, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertEquals(155656, node1.getSourcePosition());
assertTrue(node1.hasOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(38, node1.getLineno());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertEquals(894, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabel());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertEquals(155656, node2.getSourcePosition());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertEquals(8, node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isIf());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertEquals(38, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isReturn());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertEquals(894, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isEmpty());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());


[MASTER] 10:29:09.466 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:09.836 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:10.176 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:10.410 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:10.600 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:10.796 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:11.011 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:11.205 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:11.397 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:11.574 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:11.766 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:12.029 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:12.212 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:12.434 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:12.663 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:12.860 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:13.079 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:13.267 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:13.482 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:14.793 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:14.990 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:15.179 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:15.371 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:15.537 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:15.715 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:15.931 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:16.110 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:16.314 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:16.498 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:16.679 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:16.885 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:17.083 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:17.267 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:17.444 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:17.613 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:17.787 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:18.086 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:18.277 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:18.481 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:18.670 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:18.882 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:19.084 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:19.257 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:19.427 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:29:19.657 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/15
* Done!

* Computation finished
