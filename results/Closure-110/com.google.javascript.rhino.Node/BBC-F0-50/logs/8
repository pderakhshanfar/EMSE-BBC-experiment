* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 8378
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3049224051
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:00:08.618 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:00:33.267 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:00:44.254 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 301
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 115
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 5594
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 5594
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 32437
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 5594
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 1161
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 5594
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 5594
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 94
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 3287
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 115
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 415
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 4188
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - true: 355
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 645
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 106
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 14088
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 5594
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - false: 92
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 5594
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 249
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 751
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 204
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 2231
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 18669
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 3628
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 761
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 16991
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 119
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 761
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 18738
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 2345
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 3922
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 4478
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 2193
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 3345
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 52
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 491
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 42
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 615
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 15368
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I3 Branch 101 IFNONNULL L798 - true: 121
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 4372
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 3133
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 1568
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 7263
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 2643
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 3535
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1777: 355
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1776: 204
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 115
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1779: 355
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 1154
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1778: 355
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 336
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 204
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 758
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 34809
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 3797
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 11296
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 80
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 1128
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 888
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 91
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 3775
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 2194
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 3462
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 2345
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 18925
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 30666
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 4987
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 84076
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 204
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 115
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 109
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 1128
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 761
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 2489
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 761
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 1128
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 4389
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 761
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 5685
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 3462
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 3462
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 6560
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 42
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 9279
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 8267
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 1448
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 2200
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 301
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 788
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 115
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 640
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 640
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 301
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 640
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.getDouble()D: Line 162: 761
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 462
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 2041
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 5151
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 3948
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 3385
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 462
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 60909
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 5991
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 654: 39737
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 9244
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 25084
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 653: 39737
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 5676
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 91958
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 3462
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 1535
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 2106
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 3294
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 2077
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 489: 29
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 1079
Number of times BBC is called for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: root-Branch: 888
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 794
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 4588
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 5953
Number of times BBC is called for com.google.javascript.rhino.Node.getLineno()I: Line 1140: 115
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 3811
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 301
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 42
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 234
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 11
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 16125
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 16451
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 403
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 52
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 25795
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 1161
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 232: 115
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - true: 119
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 204
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 5542
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 3131
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 2424
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 143
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 4114
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 301
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 121
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 7879
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 71458
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - false: 29
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 1123
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: Line 2161: 403
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 3345
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 60909
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 6077
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 2489
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: root-Branch: 517
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 1223
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 12714
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 1018
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 204
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 888
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 1304
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 254
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 94
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 761
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 115
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 115
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 3948
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 4492
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 6863
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 3936
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 403
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 872: 301
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 403
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 11802
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 14769
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 2193
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 472
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 7026
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 15342
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 6409
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 60909
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 462
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 884: 301
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 462
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 883: 301
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - false: 403
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 60909
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 878: 301
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 877: 301
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 2489
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 3903
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 873: 301
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2026: 204
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 115
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 71458
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 1892
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 91958
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 60909
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 3209
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 2967
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 9206
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 13
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 5302
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 517
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 517
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 204
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 204
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 640
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 3209
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 962
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 6071
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1719
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 761
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 479
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 2804
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 640
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 84076
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 820
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 517
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 15334
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 2041
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 13601
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 3646
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 8623
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.getDouble()D: root-Branch: 761
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - true: 121
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 1225
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 34
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 878
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 1893
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1032: 761
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 3131
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 878
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 3462
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 878
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 4404
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 3628
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - false: 92
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 1164
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1029: 761
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 204
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 613
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 1381
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 587
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 198
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 115
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 944
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 204
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 115
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 191
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 888
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 6663
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 1166
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 11574
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 6663
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 3264
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 204
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 2967
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 1122
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 2913
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - false: 888
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 11362
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: root-Branch: 1021
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1791: 204
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 42
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1792: 355
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 1123
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 310
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 115
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 6324
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1797: 355
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 640
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 640
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 5022
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 6868
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 640
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 761
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 1021
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 1498
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: root-Branch: 1021
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 761
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 640
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 1446
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: root-Branch: 204
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 3239
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 640
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 1186
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 640
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 640
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 115
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 640
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 1186
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 17821
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - true: 48
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 1186
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 16873
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 1186
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 2455
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 1964
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 403
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 992
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 2762
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 2229
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 1
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 92
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 24753
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 14978
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 2284
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 607
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 16329
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 888
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 218
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 1745
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: Line 546: 888
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 2656
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 1277
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 980
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 60909
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 1561
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 3462
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 115
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 6634
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 38792
Number of times BBC is called for com.google.javascript.rhino.Node.toString(ZZZ)Ljava/lang/String;: Line 944: 92
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 2873
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 9930
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 83
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 168
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 786
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 152
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 109
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 640
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 2643
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 517
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 2041
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 1598
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 16778
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 761
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 403
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 1164
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 11155
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 761
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - false: 204
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 12155
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 26127
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 3462
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 4941
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 2383
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 396
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 301
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 552
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 14401
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 4614
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 403
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1682: 204
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 2967
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 16809
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;)V: I9 Branch 284 IF_ACMPNE L194 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 818
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 15637
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 680
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 539
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 3803
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 7701
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 1667
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 3803
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 3628
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 6008
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 59
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 5151
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 1274
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 301
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 11802
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 14978
Number of times BBC is called for com.google.javascript.rhino.Node.extractLineno(I)I: I4 Branch 142 IF_ICMPNE L1209 - false: 115
Number of times BBC is called for com.google.javascript.rhino.Node.extractLineno(I)I: I4 Branch 142 IF_ICMPNE L1209 - true: 270
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 11802
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 29
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 11802
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 4297
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 403
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 1336
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 11802
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 39257
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 11802
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 11802
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 4301
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 469
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 640
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 42
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 7420
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 7420
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 119
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1015: 1021
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - true: 301
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 1021
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 21623
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1016: 1021
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1024: 761
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 878
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 818
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - false: 888
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 11083
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 17821
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 2298
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 2696
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: root-Branch: 761
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: root-Branch: 640
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 645
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 2193
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 83
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: Line 1010: 1021
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 1336
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 2491
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 204
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 17049
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 1021
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 204
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 1021
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 403
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 26
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 263
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 204
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 6561
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 301
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 115
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 517
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 2804
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 581
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 6884
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 3592
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 106
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 18629
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 573
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 218
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 6030
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 218
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 4478
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 108
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 818
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 477
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 5594
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 204
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 2656
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 15421
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 204
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 17916
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 13487
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 115
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: Line 214: 204
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 121
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 2918
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 6663
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 52
Number of times BBC is called for com.google.javascript.rhino.Node.getLineno()I: root-Branch: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 8233
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 761
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 13902
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 2041
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 27266
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 12628
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 4481
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 3803
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 7264
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 1892
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - true: 140
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 204
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 11197
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: root-Branch: 761
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 1745
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 2196
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 2804
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 10376
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 14763
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - false: 266
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 2643
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 3561
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - true: 761
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 1006
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 403
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 403
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 1461
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 204
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 3203
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 403
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 121
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 2314
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 52
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 1346
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 2489
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 2235
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 19047
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - false: 92
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 301
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 3417
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 301
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 2913
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 2053
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 335
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;II)V: I11 Branch 285 IF_ACMPNE L202 - false: 77
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 997: 92
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 12628
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 10
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 6561
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 2354
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 12628
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 993: 21
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 115
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 12628
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 12628
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 7634
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 2821
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 989: 21
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 1457
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 992: 21
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 5785
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 12628
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 985: 21
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 12628
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 3628
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 1457
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 987: 21
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 1457
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 12556
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 5594
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 2643
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 1128
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 600
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 1128
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 10037
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 1006: 92
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: Line 1132: 761
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 10037
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 19345
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 60909
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 19466
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 115
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 953: 92
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 2345
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 1612
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 15248
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 115
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 978: 92
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 19994
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: Line 2060: 517
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 42
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 970: 92
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 2967
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 403
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 13098
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 301
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 12458
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: Line 889: 640
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 13521
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 21172
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 11210
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 607
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 640
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 4301
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 640
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 5207
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 407
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 3887
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 2193
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 2080
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 2193
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 4720
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 233
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 2623
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 3294
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 16235
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 22454
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 1304
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 23799
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 3462
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 2345
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 12723
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 1186
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 2041
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 2345
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 3087
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 761
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 12798
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 115
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 30744
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 301
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 4140
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 12458
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 10510
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 1332
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 640
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 640
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 1274
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 204
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 24740
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 5022
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 301
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 805
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1818: 888
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.extractLineno(I)I: Line 1209: 115
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1813: 888
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 2983
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 2041
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 1419
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1809: 888
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 2128
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 403
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 24740
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 1130
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 91958
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 11512
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - false: 48
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 31
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 2804
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 204
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 115
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 115
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 2967
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 2508
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 1570
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 4221
Number of times BBC is called in total: 5206314
* Search finished after 604s and 546 generations, 256279 statements, best individual has fitness: 2923.0
* Minimizing test suite
[MASTER] 10:11:29.678 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 805
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 714
* Number of covered goals: 620
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 108
* Number of covered goals: 108
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 470
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 4536
* Number of covered goals: 2124
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 577
* Generated 740 tests with total length 10131
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:12:33.475 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6755333333333333% of time used, but only 67/740 tests minimized), falling back to using all assertions
[MASTER] 10:12:52.976 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
[MASTER] 10:13:00.048 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 7 seconds more than allowed.
[MASTER] 10:13:07.828 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_112_1628158387558/com/google/javascript/rhino/Node_112_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_112_1628158387558/com/google/javascript/rhino/Node_112_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:07.828 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:07.828 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:07.832 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1338
[MASTER] 10:13:07.834 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_112_1628158387558/com/google/javascript/rhino/Node_112_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:07 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_112_tmp__ESTest extends Node_112_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString(116, ":R&#P");
23:       assertNotNull(node0);
24:       assertFalse(node0.isArrayLit());
25:       assertFalse(node0.isEmpty());
26:       assertFalse(node0.isTry());
27:       assertFalse(node0.isVoid());
28:       assertFalse(node0.isDelProp());
29:       assertFalse(node0.isNE());
30:       assertFalse(node0.isTrue());
31:       assertFalse(node0.isIf());
32:       assertFalse(node0.isDebugger());
33:       assertFalse(node0.isGetterDef());
34:       assertFalse(node0.isCatch());
35:       assertFalse(node0.isCase());
36:       assertFalse(node0.isRegExp());
37:       assertFalse(node0.isFor());
38:       assertFalse(node0.isThrow());
39:       assertFalse(node0.isInc());
40:       assertFalse(node0.isSetterDef());
41:       assertFalse(node0.isString());
42:       assertTrue(node0.isBreak());
43:       assertFalse(node0.isAnd());
44:       assertFalse(node0.isContinue());
45:       assertFalse(node0.isIn());
46:       assertFalse(node0.isFunction());
47:       assertFalse(node0.isFalse());
48:       assertFalse(node0.isCast());
49:       assertFalse(node0.isLabelName());
50:       assertFalse(node0.isGetElem());
51:       assertFalse(node0.hasOneChild());
52:       assertFalse(node0.isScript());
53:       assertFalse(node0.isNumber());
54:       assertFalse(node0.isNot());
55:       assertFalse(node0.isOr());
56:       assertFalse(node0.isObjectLit());
57:       assertEquals((-1), node0.getSourcePosition());
58:       assertFalse(node0.hasMoreThanOneChild());
59:       assertFalse(node0.isInstanceOf());
60:       assertFalse(node0.isGetProp());
61:       assertEquals((-1), node0.getLineno());
62:       assertFalse(node0.isTypeOf());
63:       assertFalse(node0.isThis());
64:       assertFalse(node0.isExprResult());
65:       assertFalse(node0.isWhile());
66:       assertFalse(node0.isAssign());
67:       assertFalse(node0.isReturn());
68:       assertFalse(node0.isBlock());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.hasChildren());
71:       assertFalse(node0.isComma());
72:       assertFalse(node0.isDec());
73:       assertFalse(node0.isVar());
74:       assertFalse(node0.isHook());
75:       assertFalse(node0.isCall());
76:       assertFalse(node0.isStringKey());
77:       assertFalse(node0.isName());
78:       assertFalse(node0.isAdd());
79:       assertFalse(node0.isNew());
80:       assertFalse(node0.isNull());
81:       assertFalse(node0.isSwitch());
82:       assertEquals(116, node0.getType());
83:       assertFalse(node0.isParamList());
84:       assertEquals((-1), node0.getCharno());
85:       assertFalse(node0.isDo());
86:       assertFalse(node0.isAssignAdd());
87:       assertFalse(node0.isDefaultCase());
88:       assertFalse(node0.isLabel());
89:       assertEquals(0, node0.getChildCount());
90:       assertEquals(43, Node.IS_CONSTANT_NAME);
91:       assertEquals(36, Node.QUOTED_PROP);
92:       assertEquals(53, Node.INPUT_ID);
93:       assertEquals(55, Node.INFERRED_FUNCTION);
94:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
95:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
96:       assertEquals(4095, Node.COLUMN_MASK);
97:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
98:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
99:       assertEquals(47, Node.IS_DISPATCHER);
100:       assertEquals(2, Node.POST_FLAG);
101:       assertEquals(50, Node.FREE_CALL);
102:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
103:       assertEquals(40, Node.ORIGINALNAME_PROP);
104:       assertEquals(51, Node.STATIC_SOURCE_FILE);
105:       assertEquals(46, Node.IS_NAMESPACE);
106:       assertEquals(54, Node.SLASH_V);
107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
108:       assertEquals(57, Node.LAST_PROP);
109:       assertEquals(30, Node.VAR_ARGS_NAME);
110:       assertEquals(49, Node.DIRECT_EVAL);
111:       assertEquals(52, Node.LENGTH);
112:       assertEquals(12, Node.COLUMN_BITS);
113:       assertEquals(32, Node.INCRDECR_PROP);
114:       assertEquals(1, Node.DECR_FLAG);
115:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
116:       assertEquals(56, Node.CHANGE_TIME);
117:       assertEquals(37, Node.OPT_ARG_NAME);
118:       assertEquals(8, Node.FLAG_NO_THROWS);
119:       assertEquals(48, Node.DIRECTIVES);
120:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
121:       assertEquals(39, Node.EMPTY_BLOCK);
122:       assertEquals(29, Node.JSDOC_INFO_PROP);
123:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
124:       assertEquals(57, Node.REFLECTED_OBJECT);
125:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
126:       
127:       node0.setQuotedString();
128:       assertFalse(node0.isArrayLit());
129:       assertFalse(node0.isEmpty());
130:       assertFalse(node0.isTry());
131:       assertFalse(node0.isVoid());
132:       assertFalse(node0.isDelProp());
133:       assertFalse(node0.isNE());
134:       assertFalse(node0.isTrue());
135:       assertFalse(node0.isIf());
136:       assertFalse(node0.isDebugger());
137:       assertFalse(node0.isGetterDef());
138:       assertFalse(node0.isCatch());
139:       assertFalse(node0.isCase());
140:       assertFalse(node0.isRegExp());
141:       assertFalse(node0.isFor());
142:       assertFalse(node0.isThrow());
143:       assertFalse(node0.isInc());
144:       assertFalse(node0.isSetterDef());
145:       assertFalse(node0.isString());
146:       assertTrue(node0.isBreak());
147:       assertFalse(node0.isAnd());
148:       assertFalse(node0.isContinue());
149:       assertFalse(node0.isIn());
150:       assertFalse(node0.isFunction());
151:       assertFalse(node0.isFalse());
152:       assertFalse(node0.isCast());
153:       assertFalse(node0.isLabelName());
154:       assertFalse(node0.isGetElem());
155:       assertFalse(node0.hasOneChild());
156:       assertFalse(node0.isScript());
157:       assertFalse(node0.isNumber());
158:       assertFalse(node0.isNot());
159:       assertFalse(node0.isOr());
160:       assertFalse(node0.isObjectLit());
161:       assertEquals((-1), node0.getSourcePosition());
162:       assertFalse(node0.hasMoreThanOneChild());
163:       assertFalse(node0.isInstanceOf());
164:       assertFalse(node0.isGetProp());
165:       assertEquals((-1), node0.getLineno());
166:       assertFalse(node0.isTypeOf());
167:       assertFalse(node0.isThis());
168:       assertFalse(node0.isExprResult());
169:       assertFalse(node0.isWhile());
170:       assertFalse(node0.isAssign());
171:       assertFalse(node0.isReturn());
172:       assertFalse(node0.isBlock());
173:       assertFalse(node0.isWith());
174:       assertFalse(node0.hasChildren());
175:       assertFalse(node0.isComma());
176:       assertFalse(node0.isDec());
177:       assertFalse(node0.isVar());
178:       assertFalse(node0.isHook());
179:       assertFalse(node0.isCall());
180:       assertFalse(node0.isStringKey());
181:       assertFalse(node0.isName());
182:       assertFalse(node0.isAdd());
183:       assertFalse(node0.isNew());
184:       assertFalse(node0.isNull());
185:       assertFalse(node0.isSwitch());
186:       assertEquals(116, node0.getType());
187:       assertFalse(node0.isParamList());
188:       assertEquals((-1), node0.getCharno());
189:       assertFalse(node0.isDo());
190:       assertFalse(node0.isAssignAdd());
191:       assertFalse(node0.isDefaultCase());
192:       assertFalse(node0.isLabel());
193:       assertEquals(0, node0.getChildCount());
194:       assertEquals(43, Node.IS_CONSTANT_NAME);
195:       assertEquals(36, Node.QUOTED_PROP);
196:       assertEquals(53, Node.INPUT_ID);
197:       assertEquals(55, Node.INFERRED_FUNCTION);
198:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
199:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
200:       assertEquals(4095, Node.COLUMN_MASK);
201:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
202:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
203:       assertEquals(47, Node.IS_DISPATCHER);
204:       assertEquals(2, Node.POST_FLAG);
205:       assertEquals(50, Node.FREE_CALL);
206:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
207:       assertEquals(40, Node.ORIGINALNAME_PROP);
208:       assertEquals(51, Node.STATIC_SOURCE_FILE);
209:       assertEquals(46, Node.IS_NAMESPACE);
210:       assertEquals(54, Node.SLASH_V);
211:       assertEquals(15, Node.NO_SIDE_EFFECTS);
212:       assertEquals(57, Node.LAST_PROP);
213:       assertEquals(30, Node.VAR_ARGS_NAME);
214:       assertEquals(49, Node.DIRECT_EVAL);
215:       assertEquals(52, Node.LENGTH);
216:       assertEquals(12, Node.COLUMN_BITS);
217:       assertEquals(32, Node.INCRDECR_PROP);
218:       assertEquals(1, Node.DECR_FLAG);
219:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
220:       assertEquals(56, Node.CHANGE_TIME);
221:       assertEquals(37, Node.OPT_ARG_NAME);
222:       assertEquals(8, Node.FLAG_NO_THROWS);
223:       assertEquals(48, Node.DIRECTIVES);
224:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
225:       assertEquals(39, Node.EMPTY_BLOCK);
226:       assertEquals(29, Node.JSDOC_INFO_PROP);
227:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
228:       assertEquals(57, Node.REFLECTED_OBJECT);
229:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
230:       
231:       Node node1 = Node.newString(50, ":R&#P", 2, 54);
232:       assertFalse(node1.equals((Object)node0));
233:       assertNotSame(node1, node0);
234:       assertNotNull(node1);
235:       assertFalse(node1.isOr());
236:       assertFalse(node1.isReturn());
237:       assertFalse(node1.isLabel());
238:       assertFalse(node1.isAssignAdd());
239:       assertFalse(node1.isGetElem());
240:       assertFalse(node1.isAssign());
241:       assertFalse(node1.isLabelName());
242:       assertFalse(node1.hasChildren());
243:       assertFalse(node1.isDec());
244:       assertFalse(node1.isTypeOf());
245:       assertFalse(node1.isCast());
246:       assertFalse(node1.hasMoreThanOneChild());
247:       assertFalse(node1.isContinue());
248:       assertFalse(node1.isBlock());
249:       assertFalse(node1.hasOneChild());
250:       assertFalse(node1.isWhile());
251:       assertFalse(node1.isStringKey());
252:       assertFalse(node1.isNot());
253:       assertFalse(node1.isObjectLit());
254:       assertFalse(node1.isNumber());
255:       assertFalse(node1.isScript());
256:       assertFalse(node1.isSetterDef());
257:       assertFalse(node1.isThis());
258:       assertFalse(node1.isAnd());
259:       assertFalse(node1.isThrow());
260:       assertFalse(node1.isFalse());
261:       assertFalse(node1.isInstanceOf());
262:       assertFalse(node1.isRegExp());
263:       assertFalse(node1.isFunction());
264:       assertFalse(node1.isWith());
265:       assertFalse(node1.isCatch());
266:       assertFalse(node1.isInc());
267:       assertEquals(54, node1.getCharno());
268:       assertFalse(node1.isIn());
269:       assertFalse(node1.isDelProp());
270:       assertFalse(node1.isNE());
271:       assertFalse(node1.isIf());
272:       assertFalse(node1.isFor());
273:       assertFalse(node1.isArrayLit());
274:       assertFalse(node1.isTry());
275:       assertFalse(node1.isDebugger());
276:       assertFalse(node1.isHook());
277:       assertFalse(node1.isSwitch());
278:       assertFalse(node1.isCase());
279:       assertFalse(node1.isGetterDef());
280:       assertFalse(node1.isString());
281:       assertFalse(node1.isGetProp());
282:       assertEquals(2, node1.getLineno());
283:       assertFalse(node1.isComma());
284:       assertFalse(node1.isNull());
285:       assertFalse(node1.isParamList());
286:       assertEquals(8246, node1.getSourcePosition());
287:       assertFalse(node1.isName());
288:       assertFalse(node1.isCall());
289:       assertFalse(node1.isBreak());
290:       assertEquals(0, node1.getChildCount());
291:       assertFalse(node1.isNew());
292:       assertFalse(node1.isVoid());
293:       assertFalse(node1.isTrue());
294:       assertFalse(node1.isExprResult());
295:       assertFalse(node1.isAdd());
296:       assertFalse(node1.isDefaultCase());
297:       assertFalse(node1.isVar());
298:       assertFalse(node1.isEmpty());
299:       assertFalse(node1.isDo());
300:       assertEquals(50, node1.getType());
301:       assertEquals(29, Node.JSDOC_INFO_PROP);
302:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
304:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
305:       assertEquals(37, Node.OPT_ARG_NAME);
306:       assertEquals(53, Node.INPUT_ID);
307:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
308:       assertEquals(43, Node.IS_CONSTANT_NAME);
309:       assertEquals(56, Node.CHANGE_TIME);
310:       assertEquals(46, Node.IS_NAMESPACE);
311:       assertEquals(51, Node.STATIC_SOURCE_FILE);
312:       assertEquals(36, Node.QUOTED_PROP);
313:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
314:       assertEquals(55, Node.INFERRED_FUNCTION);
315:       assertEquals(15, Node.NO_SIDE_EFFECTS);
316:       assertEquals(57, Node.LAST_PROP);
317:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
318:       assertEquals(47, Node.IS_DISPATCHER);
319:       assertEquals(2, Node.POST_FLAG);
320:       assertEquals(30, Node.VAR_ARGS_NAME);
321:       assertEquals(40, Node.ORIGINALNAME_PROP);
322:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
323:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
324:       assertEquals(48, Node.DIRECTIVES);
325:       assertEquals(54, Node.SLASH_V);
326:       assertEquals(8, Node.FLAG_NO_THROWS);
327:       assertEquals(39, Node.EMPTY_BLOCK);
328:       assertEquals(52, Node.LENGTH);
329:       assertEquals(57, Node.REFLECTED_OBJECT);
330:       assertEquals(50, Node.FREE_CALL);
331:       assertEquals(1, Node.DECR_FLAG);
332:       assertEquals(4095, Node.COLUMN_MASK);
333:       assertEquals(32, Node.INCRDECR_PROP);
334:       assertEquals(49, Node.DIRECT_EVAL);
335:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
336:       assertEquals(12, Node.COLUMN_BITS);
337:       
338:       boolean boolean0 = node0.isVarArgs();
339:       assertFalse(node0.equals((Object)node1));
340:       assertNotSame(node0, node1);
341:       assertFalse(node0.isArrayLit());
342:       assertFalse(node0.isEmpty());
343:       assertFalse(node0.isTry());
344:       assertFalse(node0.isVoid());
345:       assertFalse(node0.isDelProp());
346:       assertFalse(node0.isNE());
347:       assertFalse(node0.isTrue());
348:       assertFalse(node0.isIf());
349:       assertFalse(node0.isDebugger());
350:       assertFalse(node0.isGetterDef());
351:       assertFalse(node0.isCatch());
352:       assertFalse(node0.isCase());
353:       assertFalse(node0.isRegExp());
354:       assertFalse(node0.isFor());
355:       assertFalse(node0.isThrow());
356:       assertFalse(node0.isInc());
357:       assertFalse(node0.isSetterDef());
358:       assertFalse(node0.isString());
359:       assertTrue(node0.isBreak());
360:       assertFalse(node0.isAnd());
361:       assertFalse(node0.isContinue());
362:       assertFalse(node0.isIn());
363:       assertFalse(node0.isFunction());
364:       assertFalse(node0.isFalse());
365:       assertFalse(node0.isCast());
366:       assertFalse(node0.isLabelName());
367:       assertFalse(node0.isGetElem());
368:       assertFalse(node0.hasOneChild());
369:       assertFalse(node0.isScript());
370:       assertFalse(node0.isNumber());
371:       assertFalse(node0.isNot());
372:       assertFalse(node0.isOr());
373:       assertFalse(node0.isObjectLit());
374:       assertEquals((-1), node0.getSourcePosition());
375:       assertFalse(node0.hasMoreThanOneChild());
376:       assertFalse(node0.isInstanceOf());
377:       assertFalse(node0.isGetProp());
378:       assertEquals((-1), node0.getLineno());
379:       assertFalse(node0.isTypeOf());
380:       assertFalse(node0.isThis());
381:       assertFalse(node0.isExprResult());
382:       assertFalse(node0.isWhile());
383:       assertFalse(node0.isAssign());
384:       assertFalse(node0.isReturn());
385:       assertFalse(node0.isBlock());
386:       assertFalse(node0.isWith());
387:       assertFalse(node0.hasChildren());
388:       assertFalse(node0.isComma());
389:       assertFalse(node0.isDec());
390:       assertFalse(node0.isVar());
391:       assertFalse(node0.isHook());
392:       assertFalse(node0.isCall());
393:       assertFalse(node0.isStringKey());
394:       assertFalse(node0.isName());
395:       assertFalse(node0.isAdd());
396:       assertFalse(node0.isNew());
397:       assertFalse(node0.isNull());
398:       assertFalse(node0.isSwitch());
399:       assertEquals(116, node0.getType());
400:       assertFalse(node0.isParamList());
401:       assertEquals((-1), node0.getCharno());
402:       assertFalse(node0.isDo());
403:       assertFalse(node0.isAssignAdd());
404:       assertFalse(node0.isDefaultCase());
405:       assertFalse(node0.isLabel());
406:       assertEquals(0, node0.getChildCount());
407:       assertFalse(boolean0);
408:       assertEquals(43, Node.IS_CONSTANT_NAME);
409:       assertEquals(36, Node.QUOTED_PROP);
410:       assertEquals(53, Node.INPUT_ID);
411:       assertEquals(55, Node.INFERRED_FUNCTION);
412:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
413:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
414:       assertEquals(4095, Node.COLUMN_MASK);
415:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
416:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
417:       assertEquals(47, Node.IS_DISPATCHER);
418:       assertEquals(2, Node.POST_FLAG);
419:       assertEquals(50, Node.FREE_CALL);
420:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
421:       assertEquals(40, Node.ORIGINALNAME_PROP);
422:       assertEquals(51, Node.STATIC_SOURCE_FILE);
423:       assertEquals(46, Node.IS_NAMESPACE);
424:       assertEquals(54, Node.SLASH_V);
425:       assertEquals(15, Node.NO_SIDE_EFFECTS);
426:       assertEquals(57, Node.LAST_PROP);
427:       assertEquals(30, Node.VAR_ARGS_NAME);
428:       assertEquals(49, Node.DIRECT_EVAL);
429:       assertEquals(52, Node.LENGTH);
430:       assertEquals(12, Node.COLUMN_BITS);
431:       assertEquals(32, Node.INCRDECR_PROP);
432:       assertEquals(1, Node.DECR_FLAG);
433:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
434:       assertEquals(56, Node.CHANGE_TIME);
435:       assertEquals(37, Node.OPT_ARG_NAME);
436:       assertEquals(8, Node.FLAG_NO_THROWS);
437:       assertEquals(48, Node.DIRECTIVES);
438:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
439:       assertEquals(39, Node.EMPTY_BLOCK);
440:       assertEquals(29, Node.JSDOC_INFO_PROP);
441:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
442:       assertEquals(57, Node.REFLECTED_OBJECT);
443:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
444:       
445:       Node node2 = node1.cloneNode();
446:       assertFalse(node1.equals((Object)node0));
447:       assertFalse(node2.equals((Object)node0));
448:       assertFalse(node2.equals((Object)node1));
449:       assertNotSame(node1, node0);
450:       assertNotSame(node1, node2);
451:       assertNotSame(node2, node0);
452:       assertNotSame(node2, node1);
453:       assertNotNull(node2);
454:       assertFalse(node1.isOr());
455:       assertFalse(node1.isReturn());
456:       assertFalse(node1.isLabel());
457:       assertFalse(node1.isAssignAdd());
458:       assertFalse(node1.isGetElem());
459:       assertFalse(node1.isAssign());
460:       assertFalse(node1.isLabelName());
461:       assertFalse(node1.hasChildren());
462:       assertFalse(node1.isDec());
463:       assertFalse(node1.isTypeOf());
464:       assertFalse(node1.isCast());
465:       assertFalse(node1.hasMoreThanOneChild());
466:       assertFalse(node1.isContinue());
467:       assertFalse(node1.isBlock());
468:       assertFalse(node1.hasOneChild());
469:       assertFalse(node1.isWhile());
470:       assertFalse(node1.isStringKey());
471:       assertFalse(node1.isNot());
472:       assertFalse(node1.isObjectLit());
473:       assertFalse(node1.isNumber());
474:       assertFalse(node1.isScript());
475:       assertFalse(node1.isSetterDef());
476:       assertFalse(node1.isThis());
477:       assertFalse(node1.isAnd());
478:       assertFalse(node1.isThrow());
479:       assertFalse(node1.isFalse());
480:       assertFalse(node1.isInstanceOf());
481:       assertFalse(node1.isRegExp());
482:       assertFalse(node1.isFunction());
483:       assertFalse(node1.isWith());
484:       assertFalse(node1.isCatch());
485:       assertFalse(node1.isInc());
486:       assertEquals(54, node1.getCharno());
487:       assertFalse(node1.isIn());
488:       assertFalse(node1.isDelProp());
489:       assertFalse(node1.isNE());
490:       assertFalse(node1.isIf());
491:       assertFalse(node1.isFor());
492:       assertFalse(node1.isArrayLit());
493:       assertFalse(node1.isTry());
494:       assertFalse(node1.isDebugger());
495:       assertFalse(node1.isHook());
496:       assertFalse(node1.isSwitch());
497:       assertFalse(node1.isCase());
498:       assertFalse(node1.isGetterDef());
499:       assertFalse(node1.isString());
500:       assertFalse(node1.isGetProp());
501:       assertEquals(2, node1.getLineno());
502:       assertFalse(node1.isComma());
503:       assertFalse(node1.isNull());
504:       assertFalse(node1.isParamList());
505:       assertEquals(8246, node1.getSourcePosition());
506:       assertFalse(node1.isName());
507:       assertFalse(node1.isCall());
508:       assertFalse(node1.isBreak());
509:       assertEquals(0, node1.getChildCount());
510:       assertFalse(node1.isNew());
511:       assertFalse(node1.isVoid());
512:       assertFalse(node1.isTrue());
513:       assertFalse(node1.isExprResult());
514:       assertFalse(node1.isAdd());
515:       assertFalse(node1.isDefaultCase());
516:       assertFalse(node1.isVar());
517:       assertFalse(node1.isEmpty());
518:       assertFalse(node1.isDo());
519:       assertEquals(50, node1.getType());
520:       assertFalse(node2.isFalse());
521:       assertFalse(node2.isThrow());
522:       assertFalse(node2.isBreak());
523:       assertEquals(50, node2.getType());
524:       assertEquals(2, node2.getLineno());
525:       assertFalse(node2.isAnd());
526:       assertFalse(node2.isSwitch());
527:       assertFalse(node2.isIn());
528:       assertFalse(node2.isInc());
529:       assertEquals(54, node2.getCharno());
530:       assertFalse(node2.isFor());
531:       assertFalse(node2.isLabelName());
532:       assertFalse(node2.isNumber());
533:       assertFalse(node2.isGetterDef());
534:       assertFalse(node2.isArrayLit());
535:       assertFalse(node2.isNE());
536:       assertFalse(node2.isIf());
537:       assertFalse(node2.isCase());
538:       assertFalse(node2.isRegExp());
539:       assertFalse(node2.isInstanceOf());
540:       assertFalse(node2.isScript());
541:       assertFalse(node2.isCatch());
542:       assertFalse(node2.isWith());
543:       assertFalse(node2.hasMoreThanOneChild());
544:       assertFalse(node2.isBlock());
545:       assertFalse(node2.isTry());
546:       assertFalse(node2.isThis());
547:       assertFalse(node2.isHook());
548:       assertFalse(node2.hasOneChild());
549:       assertFalse(node2.isName());
550:       assertFalse(node2.isStringKey());
551:       assertFalse(node2.isCall());
552:       assertFalse(node2.isNull());
553:       assertFalse(node2.isParamList());
554:       assertFalse(node2.isDo());
555:       assertEquals(0, node2.getChildCount());
556:       assertFalse(node2.isFunction());
557:       assertFalse(node2.isContinue());
558:       assertFalse(node2.isAdd());
559:       assertFalse(node2.isNew());
560:       assertEquals(8246, node2.getSourcePosition());
561:       assertFalse(node2.isSetterDef());
562:       assertFalse(node2.isLabel());
563:       assertFalse(node2.isVar());
564:       assertFalse(node2.isDefaultCase());
565:       assertFalse(node2.isAssignAdd());
566:       assertFalse(node2.isGetElem());
567:       assertFalse(node2.isEmpty());
568:       assertFalse(node2.isAssign());
569:       assertFalse(node2.hasChildren());
570:       assertFalse(node2.isTypeOf());
571:       assertFalse(node2.isDec());
572:       assertFalse(node2.isCast());
573:       assertFalse(node2.isVoid());
574:       assertFalse(node2.isOr());
575:       assertFalse(node2.isDebugger());
576:       assertFalse(node2.isTrue());
577:       assertFalse(node2.isExprResult());
578:       assertFalse(node2.isDelProp());
579:       assertFalse(node2.isNot());
580:       assertFalse(node2.isString());
581:       assertFalse(node2.isObjectLit());
582:       assertFalse(node2.isComma());
583:       assertFalse(node2.isReturn());
584:       assertFalse(node2.isGetProp());
585:       assertFalse(node2.isWhile());
586:       assertEquals(29, Node.JSDOC_INFO_PROP);
587:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
588:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
589:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
590:       assertEquals(37, Node.OPT_ARG_NAME);
591:       assertEquals(53, Node.INPUT_ID);
592:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
593:       assertEquals(43, Node.IS_CONSTANT_NAME);
594:       assertEquals(56, Node.CHANGE_TIME);
595:       assertEquals(46, Node.IS_NAMESPACE);
596:       assertEquals(51, Node.STATIC_SOURCE_FILE);
597:       assertEquals(36, Node.QUOTED_PROP);
598:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
599:       assertEquals(55, Node.INFERRED_FUNCTION);
600:       assertEquals(15, Node.NO_SIDE_EFFECTS);
601:       assertEquals(57, Node.LAST_PROP);
602:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
603:       assertEquals(47, Node.IS_DISPATCHER);
604:       assertEquals(2, Node.POST_FLAG);
605:       assertEquals(30, Node.VAR_ARGS_NAME);
606:       assertEquals(40, Node.ORIGINALNAME_PROP);
607:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
608:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
609:       assertEquals(48, Node.DIRECTIVES);
610:       assertEquals(54, Node.SLASH_V);
611:       assertEquals(8, Node.FLAG_NO_THROWS);
612:       assertEquals(39, Node.EMPTY_BLOCK);
613:       assertEquals(52, Node.LENGTH);
614:       assertEquals(57, Node.REFLECTED_OBJECT);
615:       assertEquals(50, Node.FREE_CALL);
616:       assertEquals(1, Node.DECR_FLAG);
617:       assertEquals(4095, Node.COLUMN_MASK);
618:       assertEquals(32, Node.INCRDECR_PROP);
619:       assertEquals(49, Node.DIRECT_EVAL);
620:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
621:       assertEquals(12, Node.COLUMN_BITS);
622:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
623:       assertEquals(54, Node.SLASH_V);
624:       assertEquals(52, Node.LENGTH);
625:       assertEquals(57, Node.REFLECTED_OBJECT);
626:       assertEquals(30, Node.VAR_ARGS_NAME);
627:       assertEquals(1, Node.DECR_FLAG);
628:       assertEquals(50, Node.FREE_CALL);
629:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
630:       assertEquals(15, Node.NO_SIDE_EFFECTS);
631:       assertEquals(57, Node.LAST_PROP);
632:       assertEquals(32, Node.INCRDECR_PROP);
633:       assertEquals(39, Node.EMPTY_BLOCK);
634:       assertEquals(48, Node.DIRECTIVES);
635:       assertEquals(8, Node.FLAG_NO_THROWS);
636:       assertEquals(56, Node.CHANGE_TIME);
637:       assertEquals(12, Node.COLUMN_BITS);
638:       assertEquals(49, Node.DIRECT_EVAL);
639:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
640:       assertEquals(4095, Node.COLUMN_MASK);
641:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
642:       assertEquals(37, Node.OPT_ARG_NAME);
643:       assertEquals(53, Node.INPUT_ID);
644:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
645:       assertEquals(43, Node.IS_CONSTANT_NAME);
646:       assertEquals(36, Node.QUOTED_PROP);
647:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
648:       assertEquals(29, Node.JSDOC_INFO_PROP);
649:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
650:       assertEquals(55, Node.INFERRED_FUNCTION);
651:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
652:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
653:       assertEquals(47, Node.IS_DISPATCHER);
654:       assertEquals(2, Node.POST_FLAG);
655:       assertEquals(46, Node.IS_NAMESPACE);
656:       assertEquals(51, Node.STATIC_SOURCE_FILE);
657:       assertEquals(40, Node.ORIGINALNAME_PROP);
658:       
659:       Set<String> set0 = node2.getDirectives();
660:       assertFalse(node1.equals((Object)node0));
661:       assertFalse(node1.equals((Object)node2));
662:       assertFalse(node2.equals((Object)node0));
663:       assertFalse(node2.equals((Object)node1));
664:       assertNotSame(node1, node0);
665:       assertNotSame(node1, node2);
666:       assertNotSame(node2, node0);
667:       assertNotSame(node2, node1);
668:       assertNull(set0);
669:       assertFalse(node1.isOr());
670:       assertFalse(node1.isReturn());
671:       assertFalse(node1.isLabel());
672:       assertFalse(node1.isAssignAdd());
673:       assertFalse(node1.isGetElem());
674:       assertFalse(node1.isAssign());
675:       assertFalse(node1.isLabelName());
676:       assertFalse(node1.hasChildren());
677:       assertFalse(node1.isDec());
678:       assertFalse(node1.isTypeOf());
679:       assertFalse(node1.isCast());
680:       assertFalse(node1.hasMoreThanOneChild());
681:       assertFalse(node1.isContinue());
682:       assertFalse(node1.isBlock());
683:       assertFalse(node1.hasOneChild());
684:       assertFalse(node1.isWhile());
685:       assertFalse(node1.isStringKey());
686:       assertFalse(node1.isNot());
687:       assertFalse(node1.isObjectLit());
688:       assertFalse(node1.isNumber());
689:       assertFalse(node1.isScript());
690:       assertFalse(node1.isSetterDef());
691:       assertFalse(node1.isThis());
692:       assertFalse(node1.isAnd());
693:       assertFalse(node1.isThrow());
694:       assertFalse(node1.isFalse());
695:       assertFalse(node1.isInstanceOf());
696:       assertFalse(node1.isRegExp());
697:       assertFalse(node1.isFunction());
698:       assertFalse(node1.isWith());
699:       assertFalse(node1.isCatch());
700:       assertFalse(node1.isInc());
701:       assertEquals(54, node1.getCharno());
702:       assertFalse(node1.isIn());
703:       assertFalse(node1.isDelProp());
704:       assertFalse(node1.isNE());
705:       assertFalse(node1.isIf());
706:       assertFalse(node1.isFor());
707:       assertFalse(node1.isArrayLit());
708:       assertFalse(node1.isTry());
709:       assertFalse(node1.isDebugger());
710:       assertFalse(node1.isHook());
711:       assertFalse(node1.isSwitch());
712:       assertFalse(node1.isCase());
713:       assertFalse(node1.isGetterDef());
714:       assertFalse(node1.isString());
715:       assertFalse(node1.isGetProp());
716:       assertEquals(2, node1.getLineno());
717:       assertFalse(node1.isComma());
718:       assertFalse(node1.isNull());
719:       assertFalse(node1.isParamList());
720:       assertEquals(8246, node1.getSourcePosition());
721:       assertFalse(node1.isName());
722:       assertFalse(node1.isCall());
723:       assertFalse(node1.isBreak());
724:       assertEquals(0, node1.getChildCount());
725:       assertFalse(node1.isNew());
726:       assertFalse(node1.isVoid());
727:       assertFalse(node1.isTrue());
728:       assertFalse(node1.isExprResult());
729:       assertFalse(node1.isAdd());
730:       assertFalse(node1.isDefaultCase());
731:       assertFalse(node1.isVar());
732:       assertFalse(node1.isEmpty());
733:       assertFalse(node1.isDo());
734:       assertEquals(50, node1.getType());
735:       assertFalse(node2.isFalse());
736:       assertFalse(node2.isThrow());
737:       assertFalse(node2.isBreak());
738:       assertEquals(50, node2.getType());
739:       assertEquals(2, node2.getLineno());
740:       assertFalse(node2.isAnd());
741:       assertFalse(node2.isSwitch());
742:       assertFalse(node2.isIn());
743:       assertFalse(node2.isInc());
744:       assertEquals(54, node2.getCharno());
745:       assertFalse(node2.isFor());
746:       assertFalse(node2.isLabelName());
747:       assertFalse(node2.isNumber());
748:       assertFalse(node2.isGetterDef());
749:       assertFalse(node2.isArrayLit());
750:       assertFalse(node2.isNE());
751:       assertFalse(node2.isIf());
752:       assertFalse(node2.isCase());
753:       assertFalse(node2.isRegExp());
754:       assertFalse(node2.isInstanceOf());
755:       assertFalse(node2.isScript());
756:       assertFalse(node2.isCatch());
757:       assertFalse(node2.isWith());
758:       assertFalse(node2.hasMoreThanOneChild());
759:       assertFalse(node2.isBlock());
760:       assertFalse(node2.isTry());
761:       assertFalse(node2.isThis());
762:       assertFalse(node2.isHook());
763:       assertFalse(node2.hasOneChild());
764:       assertFalse(node2.isName());
765:       assertFalse(node2.isStringKey());
766:       assertFalse(node2.isCall());
767:       assertFalse(node2.isNull());
768:       assertFalse(node2.isParamList());
769:       assertFalse(node2.isDo());
770:       assertEquals(0, node2.getChildCount());
771:       assertFalse(node2.isFunction());
772:       assertFalse(node2.isContinue());
773:       assertFalse(node2.isAdd());
774:       assertFalse(node2.isNew());
775:       assertEquals(8246, node2.getSourcePosition());
776:       assertFalse(node2.isSetterDef());
777:       assertFalse(node2.isLabel());
778:       assertFalse(node2.isVar());
779:       assertFalse(node2.isDefaultCase());
780:       assertFalse(node2.isAssignAdd());
781:       assertFalse(node2.isGetElem());
782:       assertFalse(node2.isEmpty());
783:       assertFalse(node2.isAssign());
784:       assertFalse(node2.hasChildren());
785:       assertFalse(node2.isTypeOf());
786:       assertFalse(node2.isDec());
787:       assertFalse(node2.isCast());
788:       assertFalse(node2.isVoid());
789:       assertFalse(node2.isOr());
790:       assertFalse(node2.isDebugger());
791:       assertFalse(node2.isTrue());
792:       assertFalse(node2.isExprResult());
793:       assertFalse(node2.isDelProp());
794:       assertFalse(node2.isNot());
795:       assertFalse(node2.isString());
796:       assertFalse(node2.isObjectLit());
797:       assertFalse(node2.isComma());
798:       assertFalse(node2.isReturn());
799:       assertFalse(node2.isGetProp());
800:       assertFalse(node2.isWhile());
801:       assertEquals(29, Node.JSDOC_INFO_PROP);
802:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
803:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
804:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
805:       assertEquals(37, Node.OPT_ARG_NAME);
806:       assertEquals(53, Node.INPUT_ID);
807:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
808:       assertEquals(43, Node.IS_CONSTANT_NAME);
809:       assertEquals(56, Node.CHANGE_TIME);
810:       assertEquals(46, Node.IS_NAMESPACE);
811:       assertEquals(51, Node.STATIC_SOURCE_FILE);
812:       assertEquals(36, Node.QUOTED_PROP);
813:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
814:       assertEquals(55, Node.INFERRED_FUNCTION);
815:       assertEquals(15, Node.NO_SIDE_EFFECTS);
816:       assertEquals(57, Node.LAST_PROP);
817:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
818:       assertEquals(47, Node.IS_DISPATCHER);
819:       assertEquals(2, Node.POST_FLAG);
820:       assertEquals(30, Node.VAR_ARGS_NAME);
821:       assertEquals(40, Node.ORIGINALNAME_PROP);
822:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
823:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
824:       assertEquals(48, Node.DIRECTIVES);
825:       assertEquals(54, Node.SLASH_V);
826:       assertEquals(8, Node.FLAG_NO_THROWS);
827:       assertEquals(39, Node.EMPTY_BLOCK);
828:       assertEquals(52, Node.LENGTH);
829:       assertEquals(57, Node.REFLECTED_OBJECT);
830:       assertEquals(50, Node.FREE_CALL);
831:       assertEquals(1, Node.DECR_FLAG);
832:       assertEquals(4095, Node.COLUMN_MASK);
833:       assertEquals(32, Node.INCRDECR_PROP);
834:       assertEquals(49, Node.DIRECT_EVAL);
835:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
836:       assertEquals(12, Node.COLUMN_BITS);
837:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
838:       assertEquals(54, Node.SLASH_V);
839:       assertEquals(52, Node.LENGTH);
840:       assertEquals(57, Node.REFLECTED_OBJECT);
841:       assertEquals(30, Node.VAR_ARGS_NAME);
842:       assertEquals(1, Node.DECR_FLAG);
843:       assertEquals(50, Node.FREE_CALL);
844:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
845:       assertEquals(15, Node.NO_SIDE_EFFECTS);
846:       assertEquals(57, Node.LAST_PROP);
847:       assertEquals(32, Node.INCRDECR_PROP);
848:       assertEquals(39, Node.EMPTY_BLOCK);
849:       assertEquals(48, Node.DIRECTIVES);
850:       assertEquals(8, Node.FLAG_NO_THROWS);
851:       assertEquals(56, Node.CHANGE_TIME);
852:       assertEquals(12, Node.COLUMN_BITS);
853:       assertEquals(49, Node.DIRECT_EVAL);
854:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
855:       assertEquals(4095, Node.COLUMN_MASK);
856:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
857:       assertEquals(37, Node.OPT_ARG_NAME);
858:       assertEquals(53, Node.INPUT_ID);
859:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
860:       assertEquals(43, Node.IS_CONSTANT_NAME);
861:       assertEquals(36, Node.QUOTED_PROP);
862:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
863:       assertEquals(29, Node.JSDOC_INFO_PROP);
864:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
865:       assertEquals(55, Node.INFERRED_FUNCTION);
866:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
867:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
868:       assertEquals(47, Node.IS_DISPATCHER);
869:       assertEquals(2, Node.POST_FLAG);
870:       assertEquals(46, Node.IS_NAMESPACE);
871:       assertEquals(51, Node.STATIC_SOURCE_FILE);
872:       assertEquals(40, Node.ORIGINALNAME_PROP);
873:       
874:       boolean boolean1 = node0.isParamList();
875:       assertFalse(node0.equals((Object)node1));
876:       assertFalse(node0.equals((Object)node2));
877:       assertTrue(boolean1 == boolean0);
878:       assertNotSame(node0, node1);
879:       assertNotSame(node0, node2);
880:       assertFalse(node0.isArrayLit());
881:       assertFalse(node0.isEmpty());
882:       assertFalse(node0.isTry());
883:       assertFalse(node0.isVoid());
884:       assertFalse(node0.isDelProp());
885:       assertFalse(node0.isNE());
886:       assertFalse(node0.isTrue());
887:       assertFalse(node0.isIf());
888:       assertFalse(node0.isDebugger());
889:       assertFalse(node0.isGetterDef());
890:       assertFalse(node0.isCatch());
891:       assertFalse(node0.isCase());
892:       assertFalse(node0.isRegExp());
893:       assertFalse(node0.isFor());
894:       assertFalse(node0.isThrow());
895:       assertFalse(node0.isInc());
896:       assertFalse(node0.isSetterDef());
897:       assertFalse(node0.isString());
898:       assertTrue(node0.isBreak());
899:       assertFalse(node0.isAnd());
900:       assertFalse(node0.isContinue());
901:       assertFalse(node0.isIn());
902:       assertFalse(node0.isFunction());
903:       assertFalse(node0.isFalse());
904:       assertFalse(node0.isCast());
905:       assertFalse(node0.isLabelName());
906:       assertFalse(node0.isGetElem());
907:       assertFalse(node0.hasOneChild());
908:       assertFalse(node0.isScript());
909:       assertFalse(node0.isNumber());
910:       assertFalse(node0.isNot());
911:       assertFalse(node0.isOr());
912:       assertFalse(node0.isObjectLit());
913:       assertEquals((-1), node0.getSourcePosition());
914:       assertFalse(node0.hasMoreThanOneChild());
915:       assertFalse(node0.isInstanceOf());
916:       assertFalse(node0.isGetProp());
917:       assertEquals((-1), node0.getLineno());
918:       assertFalse(node0.isTypeOf());
919:       assertFalse(node0.isThis());
920:       assertFalse(node0.isExprResult());
921:       assertFalse(node0.isWhile());
922:       assertFalse(node0.isAssign());
923:       assertFalse(node0.isReturn());
924:       assertFalse(node0.isBlock());
925:       assertFalse(node0.isWith());
926:       assertFalse(node0.hasChildren());
927:       assertFalse(node0.isComma());
928:       assertFalse(node0.isDec());
929:       assertFalse(node0.isVar());
930:       assertFalse(node0.isHook());
931:       assertFalse(node0.isCall());
932:       assertFalse(node0.isStringKey());
933:       assertFalse(node0.isName());
934:       assertFalse(node0.isAdd());
935:       assertFalse(node0.isNew());
936:       assertFalse(node0.isNull());
937:       assertFalse(node0.isSwitch());
938:       assertEquals(116, node0.getType());
939:       assertFalse(node0.isParamList());
940:       assertEquals((-1), node0.getCharno());
941:       assertFalse(node0.isDo());
942:       assertFalse(node0.isAssignAdd());
943:       assertFalse(node0.isDefaultCase());
944:       assertFalse(node0.isLabel());
945:       assertEquals(0, node0.getChildCount());
946:       assertFalse(boolean1);
947:       assertEquals(43, Node.IS_CONSTANT_NAME);
948:       assertEquals(36, Node.QUOTED_PROP);
949:       assertEquals(53, Node.INPUT_ID);
950:       assertEquals(55, Node.INFERRED_FUNCTION);
951:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
952:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
953:       assertEquals(4095, Node.COLUMN_MASK);
954:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
955:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
956:       assertEquals(47, Node.IS_DISPATCHER);
957:       assertEquals(2, Node.POST_FLAG);
958:       assertEquals(50, Node.FREE_CALL);
959:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
960:       assertEquals(40, Node.ORIGINALNAME_PROP);
961:       assertEquals(51, Node.STATIC_SOURCE_FILE);
962:       assertEquals(46, Node.IS_NAMESPACE);
963:       assertEquals(54, Node.SLASH_V);
964:       assertEquals(15, Node.NO_SIDE_EFFECTS);
965:       assertEquals(57, Node.LAST_PROP);
966:       assertEquals(30, Node.VAR_ARGS_NAME);
967:       assertEquals(49, Node.DIRECT_EVAL);
968:       assertEquals(52, Node.LENGTH);
969:       assertEquals(12, Node.COLUMN_BITS);
970:       assertEquals(32, Node.INCRDECR_PROP);
971:       assertEquals(1, Node.DECR_FLAG);
972:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
973:       assertEquals(56, Node.CHANGE_TIME);
974:       assertEquals(37, Node.OPT_ARG_NAME);
975:       assertEquals(8, Node.FLAG_NO_THROWS);
976:       assertEquals(48, Node.DIRECTIVES);
977:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
978:       assertEquals(39, Node.EMPTY_BLOCK);
979:       assertEquals(29, Node.JSDOC_INFO_PROP);
980:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
981:       assertEquals(57, Node.REFLECTED_OBJECT);
982:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
983:       
984:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
985:       assertNotNull(node_SideEffectFlags0);
986:       assertEquals(0, node_SideEffectFlags0.valueOf());
987:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
988:       
989:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
990:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
991:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
992:       assertNotNull(node_SideEffectFlags1);
993:       assertEquals(0, node_SideEffectFlags0.valueOf());
994:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
995:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
996:       assertEquals(0, node_SideEffectFlags1.valueOf());
997:       
998:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
999:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1000:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1001:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1002:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1003:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1004:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1005:       assertNotNull(node_SideEffectFlags2);
1006:       assertEquals(0, node_SideEffectFlags0.valueOf());
1007:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1008:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1009:       assertEquals(0, node_SideEffectFlags1.valueOf());
1010:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1011:       assertEquals(0, node_SideEffectFlags2.valueOf());
1012:       
1013:       node0.putBooleanProp(44, false);
1014:       assertFalse(node0.equals((Object)node1));
1015:       assertFalse(node0.equals((Object)node2));
1016:       assertNotSame(node0, node1);
1017:       assertNotSame(node0, node2);
1018:       assertFalse(node0.isArrayLit());
1019:       assertFalse(node0.isEmpty());
1020:       assertFalse(node0.isTry());
1021:       assertFalse(node0.isVoid());
1022:       assertFalse(node0.isDelProp());
1023:       assertFalse(node0.isNE());
1024:       assertFalse(node0.isTrue());
1025:       assertFalse(node0.isIf());
1026:       assertFalse(node0.isDebugger());
1027:       assertFalse(node0.isGetterDef());
1028:       assertFalse(node0.isCatch());
1029:       assertFalse(node0.isCase());
1030:       assertFalse(node0.isRegExp());
1031:       assertFalse(node0.isFor());
1032:       assertFalse(node0.isThrow());
1033:       assertFalse(node0.isInc());
1034:       assertFalse(node0.isSetterDef());
1035:       assertFalse(node0.isString());
1036:       assertTrue(node0.isBreak());
1037:       assertFalse(node0.isAnd());
1038:       assertFalse(node0.isContinue());
1039:       assertFalse(node0.isIn());
1040:       assertFalse(node0.isFunction());
1041:       assertFalse(node0.isFalse());
1042:       assertFalse(node0.isCast());
1043:       assertFalse(node0.isLabelName());
1044:       assertFalse(node0.isGetElem());
1045:       assertFalse(node0.hasOneChild());
1046:       assertFalse(node0.isScript());
1047:       assertFalse(node0.isNumber());
1048:       assertFalse(node0.isNot());
1049:       assertFalse(node0.isOr());
1050:       assertFalse(node0.isObjectLit());
1051:       assertEquals((-1), node0.getSourcePosition());
1052:       assertFalse(node0.hasMoreThanOneChild());
1053:       assertFalse(node0.isInstanceOf());
1054:       assertFalse(node0.isGetProp());
1055:       assertEquals((-1), node0.getLineno());
1056:       assertFalse(node0.isTypeOf());
1057:       assertFalse(node0.isThis());
1058:       assertFalse(node0.isExprResult());
1059:       assertFalse(node0.isWhile());
1060:       assertFalse(node0.isAssign());
1061:       assertFalse(node0.isReturn());
1062:       assertFalse(node0.isBlock());
1063:       assertFalse(node0.isWith());
1064:       assertFalse(node0.hasChildren());
1065:       assertFalse(node0.isComma());
1066:       assertFalse(node0.isDec());
1067:       assertFalse(node0.isVar());
1068:       assertFalse(node0.isHook());
1069:       assertFalse(node0.isCall());
1070:       assertFalse(node0.isStringKey());
1071:       assertFalse(node0.isName());
1072:       assertFalse(node0.isAdd());
1073:       assertFalse(node0.isNew());
1074:       assertFalse(node0.isNull());
1075:       assertFalse(node0.isSwitch());
1076:       assertEquals(116, node0.getType());
1077:       assertFalse(node0.isParamList());
1078:       assertEquals((-1), node0.getCharno());
1079:       assertFalse(node0.isDo());
1080:       assertFalse(node0.isAssignAdd());
1081:       assertFalse(node0.isDefaultCase());
1082:       assertFalse(node0.isLabel());
1083:       assertEquals(0, node0.getChildCount());
1084:       assertEquals(43, Node.IS_CONSTANT_NAME);
1085:       assertEquals(36, Node.QUOTED_PROP);
1086:       assertEquals(53, Node.INPUT_ID);
1087:       assertEquals(55, Node.INFERRED_FUNCTION);
1088:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1089:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1090:       assertEquals(4095, Node.COLUMN_MASK);
1091:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1092:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1093:       assertEquals(47, Node.IS_DISPATCHER);
1094:       assertEquals(2, Node.POST_FLAG);
1095:       assertEquals(50, Node.FREE_CALL);
1096:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1097:       assertEquals(40, Node.ORIGINALNAME_PROP);
1098:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1099:       assertEquals(46, Node.IS_NAMESPACE);
1100:       assertEquals(54, Node.SLASH_V);
1101:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1102:       assertEquals(57, Node.LAST_PROP);
1103:       assertEquals(30, Node.VAR_ARGS_NAME);
1104:       assertEquals(49, Node.DIRECT_EVAL);
1105:       assertEquals(52, Node.LENGTH);
1106:       assertEquals(12, Node.COLUMN_BITS);
1107:       assertEquals(32, Node.INCRDECR_PROP);
1108:       assertEquals(1, Node.DECR_FLAG);
1109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1110:       assertEquals(56, Node.CHANGE_TIME);
1111:       assertEquals(37, Node.OPT_ARG_NAME);
1112:       assertEquals(8, Node.FLAG_NO_THROWS);
1113:       assertEquals(48, Node.DIRECTIVES);
1114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1115:       assertEquals(39, Node.EMPTY_BLOCK);
1116:       assertEquals(29, Node.JSDOC_INFO_PROP);
1117:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1118:       assertEquals(57, Node.REFLECTED_OBJECT);
1119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1120:       
1121:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
1122:       assertFalse(node0.equals((Object)node1));
1123:       assertFalse(node0.equals((Object)node2));
1124:       assertNotSame(node0, node1);
1125:       assertNotSame(node0, node2);
1126:       assertNull(staticSourceFile0);
1127:       assertFalse(node0.isArrayLit());
1128:       assertFalse(node0.isEmpty());
1129:       assertFalse(node0.isTry());
1130:       assertFalse(node0.isVoid());
1131:       assertFalse(node0.isDelProp());
1132:       assertFalse(node0.isNE());
1133:       assertFalse(node0.isTrue());
1134:       assertFalse(node0.isIf());
1135:       assertFalse(node0.isDebugger());
1136:       assertFalse(node0.isGetterDef());
1137:       assertFalse(node0.isCatch());
1138:       assertFalse(node0.isCase());
1139:       assertFalse(node0.isRegExp());
1140:       assertFalse(node0.isFor());
1141:       assertFalse(node0.isThrow());
1142:       assertFalse(node0.isInc());
1143:       assertFalse(node0.isSetterDef());
1144:       assertFalse(node0.isString());
1145:       assertTrue(node0.isBreak());
1146:       assertFalse(node0.isAnd());
1147:       assertFalse(node0.isContinue());
1148:       assertFalse(node0.isIn());
1149:       assertFalse(node0.isFunction());
1150:       assertFalse(node0.isFalse());
1151:       assertFalse(node0.isCast());
1152:       assertFalse(node0.isLabelName());
1153:       assertFalse(node0.isGetElem());
1154:       assertFalse(node0.hasOneChild());
1155:       assertFalse(node0.isScript());
1156:       assertFalse(node0.isNumber());
1157:       assertFalse(node0.isNot());
1158:       assertFalse(node0.isOr());
1159:       assertFalse(node0.isObjectLit());
1160:       assertEquals((-1), node0.getSourcePosition());
1161:       assertFalse(node0.hasMoreThanOneChild());
1162:       assertFalse(node0.isInstanceOf());
1163:       assertFalse(node0.isGetProp());
1164:       assertEquals((-1), node0.getLineno());
1165:       assertFalse(node0.isTypeOf());
1166:       assertFalse(node0.isThis());
1167:       assertFalse(node0.isExprResult());
1168:       assertFalse(node0.isWhile());
1169:       assertFalse(node0.isAssign());
1170:       assertFalse(node0.isReturn());
1171:       assertFalse(node0.isBlock());
1172:       assertFalse(node0.isWith());
1173:       assertFalse(node0.hasChildren());
1174:       assertFalse(node0.isComma());
1175:       assertFalse(node0.isDec());
1176:       assertFalse(node0.isVar());
1177:       assertFalse(node0.isHook());
1178:       assertFalse(node0.isCall());
1179:       assertFalse(node0.isStringKey());
1180:       assertFalse(node0.isName());
1181:       assertFalse(node0.isAdd());
1182:       assertFalse(node0.isNew());
1183:       assertFalse(node0.isNull());
1184:       assertFalse(node0.isSwitch());
1185:       assertEquals(116, node0.getType());
1186:       assertFalse(node0.isParamList());
1187:       assertEquals((-1), node0.getCharno());
1188:       assertFalse(node0.isDo());
1189:       assertFalse(node0.isAssignAdd());
1190:       assertFalse(node0.isDefaultCase());
1191:       assertFalse(node0.isLabel());
1192:       assertEquals(0, node0.getChildCount());
1193:       assertEquals(43, Node.IS_CONSTANT_NAME);
1194:       assertEquals(36, Node.QUOTED_PROP);
1195:       assertEquals(53, Node.INPUT_ID);
1196:       assertEquals(55, Node.INFERRED_FUNCTION);
1197:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1198:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1199:       assertEquals(4095, Node.COLUMN_MASK);
1200:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1202:       assertEquals(47, Node.IS_DISPATCHER);
1203:       assertEquals(2, Node.POST_FLAG);
1204:       assertEquals(50, Node.FREE_CALL);
1205:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1206:       assertEquals(40, Node.ORIGINALNAME_PROP);
1207:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1208:       assertEquals(46, Node.IS_NAMESPACE);
1209:       assertEquals(54, Node.SLASH_V);
1210:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1211:       assertEquals(57, Node.LAST_PROP);
1212:       assertEquals(30, Node.VAR_ARGS_NAME);
1213:       assertEquals(49, Node.DIRECT_EVAL);
1214:       assertEquals(52, Node.LENGTH);
1215:       assertEquals(12, Node.COLUMN_BITS);
1216:       assertEquals(32, Node.INCRDECR_PROP);
1217:       assertEquals(1, Node.DECR_FLAG);
1218:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1219:       assertEquals(56, Node.CHANGE_TIME);
1220:       assertEquals(37, Node.OPT_ARG_NAME);
1221:       assertEquals(8, Node.FLAG_NO_THROWS);
1222:       assertEquals(48, Node.DIRECTIVES);
1223:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1224:       assertEquals(39, Node.EMPTY_BLOCK);
1225:       assertEquals(29, Node.JSDOC_INFO_PROP);
1226:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1227:       assertEquals(57, Node.REFLECTED_OBJECT);
1228:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1229:       
1230:       Iterable<Node> iterable0 = node1.children();
1231:       assertFalse(node1.equals((Object)node0));
1232:       assertFalse(node1.equals((Object)node2));
1233:       assertNotSame(node1, node0);
1234:       assertNotSame(node1, node2);
1235:       assertNotNull(iterable0);
1236:       assertFalse(node1.isOr());
1237:       assertFalse(node1.isReturn());
1238:       assertFalse(node1.isLabel());
1239:       assertFalse(node1.isAssignAdd());
1240:       assertFalse(node1.isGetElem());
1241:       assertFalse(node1.isAssign());
1242:       assertFalse(node1.isLabelName());
1243:       assertFalse(node1.hasChildren());
1244:       assertFalse(node1.isDec());
1245:       assertFalse(node1.isTypeOf());
1246:       assertFalse(node1.isCast());
1247:       assertFalse(node1.hasMoreThanOneChild());
1248:       assertFalse(node1.isContinue());
1249:       assertFalse(node1.isBlock());
1250:       assertFalse(node1.hasOneChild());
1251:       assertFalse(node1.isWhile());
1252:       assertFalse(node1.isStringKey());
1253:       assertFalse(node1.isNot());
1254:       assertFalse(node1.isObjectLit());
1255:       assertFalse(node1.isNumber());
1256:       assertFalse(node1.isScript());
1257:       assertFalse(node1.isSetterDef());
1258:       assertFalse(node1.isThis());
1259:       assertFalse(node1.isAnd());
1260:       assertFalse(node1.isThrow());
1261:       assertFalse(node1.isFalse());
1262:       assertFalse(node1.isInstanceOf());
1263:       assertFalse(node1.isRegExp());
1264:       assertFalse(node1.isFunction());
1265:       assertFalse(node1.isWith());
1266:       assertFalse(node1.isCatch());
1267:       assertFalse(node1.isInc());
1268:       assertEquals(54, node1.getCharno());
1269:       assertFalse(node1.isIn());
1270:       assertFalse(node1.isDelProp());
1271:       assertFalse(node1.isNE());
1272:       assertFalse(node1.isIf());
1273:       assertFalse(node1.isFor());
1274:       assertFalse(node1.isArrayLit());
1275:       assertFalse(node1.isTry());
1276:       assertFalse(node1.isDebugger());
1277:       assertFalse(node1.isHook());
1278:       assertFalse(node1.isSwitch());
1279:       assertFalse(node1.isCase());
1280:       assertFalse(node1.isGetterDef());
1281:       assertFalse(node1.isString());
1282:       assertFalse(node1.isGetProp());
1283:       assertEquals(2, node1.getLineno());
1284:       assertFalse(node1.isComma());
1285:       assertFalse(node1.isNull());
1286:       assertFalse(node1.isParamList());
1287:       assertEquals(8246, node1.getSourcePosition());
1288:       assertFalse(node1.isName());
1289:       assertFalse(node1.isCall());
1290:       assertFalse(node1.isBreak());
1291:       assertEquals(0, node1.getChildCount());
1292:       assertFalse(node1.isNew());
1293:       assertFalse(node1.isVoid());
1294:       assertFalse(node1.isTrue());
1295:       assertFalse(node1.isExprResult());
1296:       assertFalse(node1.isAdd());
1297:       assertFalse(node1.isDefaultCase());
1298:       assertFalse(node1.isVar());
1299:       assertFalse(node1.isEmpty());
1300:       assertFalse(node1.isDo());
1301:       assertEquals(50, node1.getType());
1302:       assertEquals(29, Node.JSDOC_INFO_PROP);
1303:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1304:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1305:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1306:       assertEquals(37, Node.OPT_ARG_NAME);
1307:       assertEquals(53, Node.INPUT_ID);
1308:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1309:       assertEquals(43, Node.IS_CONSTANT_NAME);
1310:       assertEquals(56, Node.CHANGE_TIME);
1311:       assertEquals(46, Node.IS_NAMESPACE);
1312:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1313:       assertEquals(36, Node.QUOTED_PROP);
1314:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1315:       assertEquals(55, Node.INFERRED_FUNCTION);
1316:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1317:       assertEquals(57, Node.LAST_PROP);
1318:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1319:       assertEquals(47, Node.IS_DISPATCHER);
1320:       assertEquals(2, Node.POST_FLAG);
1321:       assertEquals(30, Node.VAR_ARGS_NAME);
1322:       assertEquals(40, Node.ORIGINALNAME_PROP);
1323:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1324:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1325:       assertEquals(48, Node.DIRECTIVES);
1326:       assertEquals(54, Node.SLASH_V);
1327:       assertEquals(8, Node.FLAG_NO_THROWS);
1328:       assertEquals(39, Node.EMPTY_BLOCK);
1329:       assertEquals(52, Node.LENGTH);
1330:       assertEquals(57, Node.REFLECTED_OBJECT);
1331:       assertEquals(50, Node.FREE_CALL);
1332:       assertEquals(1, Node.DECR_FLAG);
1333:       assertEquals(4095, Node.COLUMN_MASK);
1334:       assertEquals(32, Node.INCRDECR_PROP);
1335:       assertEquals(49, Node.DIRECT_EVAL);
1336:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1337:       assertEquals(12, Node.COLUMN_BITS);
1338:       assertFalse(iterable0.contains(node1));
1339:       
1340:       boolean boolean2 = node2.isEmpty();
1341:       assertFalse(node1.equals((Object)node0));
1342:       assertFalse(node1.equals((Object)node2));
1343:       assertFalse(node2.equals((Object)node0));
1344:       assertFalse(node2.equals((Object)node1));
1345:       assertTrue(boolean2 == boolean1);
1346:       assertTrue(boolean2 == boolean0);
1347:       assertNotSame(node1, node0);
1348:       assertNotSame(node1, node2);
1349:       assertNotSame(node2, node0);
1350:       assertNotSame(node2, node1);
1351:       assertFalse(node1.isOr());
1352:       assertFalse(node1.isReturn());
1353:       assertFalse(node1.isLabel());
1354:       assertFalse(node1.isAssignAdd());
1355:       assertFalse(node1.isGetElem());
1356:       assertFalse(node1.isAssign());
1357:       assertFalse(node1.isLabelName());
1358:       assertFalse(node1.hasChildren());
1359:       assertFalse(node1.isDec());
1360:       assertFalse(node1.isTypeOf());
1361:       assertFalse(node1.isCast());
1362:       assertFalse(node1.hasMoreThanOneChild());
1363:       assertFalse(node1.isContinue());
1364:       assertFalse(node1.isBlock());
1365:       assertFalse(node1.hasOneChild());
1366:       assertFalse(node1.isWhile());
1367:       assertFalse(node1.isStringKey());
1368:       assertFalse(node1.isNot());
1369:       assertFalse(node1.isObjectLit());
1370:       assertFalse(node1.isNumber());
1371:       assertFalse(node1.isScript());
1372:       assertFalse(node1.isSetterDef());
1373:       assertFalse(node1.isThis());
1374:       assertFalse(node1.isAnd());
1375:       assertFalse(node1.isThrow());
1376:       assertFalse(node1.isFalse());
1377:       assertFalse(node1.isInstanceOf());
1378:       assertFalse(node1.isRegExp());
1379:       assertFalse(node1.isFunction());
1380:       assertFalse(node1.isWith());
1381:       assertFalse(node1.isCatch());
1382:       assertFalse(node1.isInc());
1383:       assertEquals(54, node1.getCharno());
1384:       assertFalse(node1.isIn());
1385:       assertFalse(node1.isDelProp());
1386:       assertFalse(node1.isNE());
1387:       assertFalse(node1.isIf());
1388:       assertFalse(node1.isFor());
1389:       assertFalse(node1.isArrayLit());
1390:       assertFalse(node1.isTry());
1391:       assertFalse(node1.isDebugger());
1392:       assertFalse(node1.isHook());
1393:       assertFalse(node1.isSwitch());
1394:       assertFalse(node1.isCase());
1395:       assertFalse(node1.isGetterDef());
1396:       assertFalse(node1.isString());
1397:       assertFalse(node1.isGetProp());
1398:       assertEquals(2, node1.getLineno());
1399:       assertFalse(node1.isComma());
1400:       assertFalse(node1.isNull());
1401:       assertFalse(node1.isParamList());
1402:       assertEquals(8246, node1.getSourcePosition());
1403:       assertFalse(node1.isName());
1404:       assertFalse(node1.isCall());
1405:       assertFalse(node1.isBreak());
1406:       assertEquals(0, node1.getChildCount());
1407:       assertFalse(node1.isNew());
1408:       assertFalse(node1.isVoid());
1409:       assertFalse(node1.isTrue());
1410:       assertFalse(node1.isExprResult());
1411:       assertFalse(node1.isAdd());
1412:       assertFalse(node1.isDefaultCase());
1413:       assertFalse(node1.isVar());
1414:       assertFalse(node1.isEmpty());
1415:       assertFalse(node1.isDo());
1416:       assertEquals(50, node1.getType());
1417:       assertFalse(node2.isFalse());
1418:       assertFalse(node2.isThrow());
1419:       assertFalse(node2.isBreak());
1420:       assertEquals(50, node2.getType());
1421:       assertEquals(2, node2.getLineno());
1422:       assertFalse(node2.isAnd());
1423:       assertFalse(node2.isSwitch());
1424:       assertFalse(node2.isIn());
1425:       assertFalse(node2.isInc());
1426:       assertEquals(54, node2.getCharno());
1427:       assertFalse(node2.isFor());
1428:       assertFalse(node2.isLabelName());
1429:       assertFalse(node2.isNumber());
1430:       assertFalse(node2.isGetterDef());
1431:       assertFalse(node2.isArrayLit());
1432:       assertFalse(node2.isNE());
1433:       assertFalse(node2.isIf());
1434:       assertFalse(node2.isCase());
1435:       assertFalse(node2.isRegExp());
1436:       assertFalse(node2.isInstanceOf());
1437:       assertFalse(node2.isScript());
1438:       assertFalse(node2.isCatch());
1439:       assertFalse(node2.isWith());
1440:       assertFalse(node2.hasMoreThanOneChild());
1441:       assertFalse(node2.isBlock());
1442:       assertFalse(node2.isTry());
1443:       assertFalse(node2.isThis());
1444:       assertFalse(node2.isHook());
1445:       assertFalse(node2.hasOneChild());
1446:       assertFalse(node2.isName());
1447:       assertFalse(node2.isStringKey());
1448:       assertFalse(node2.isCall());
1449:       assertFalse(node2.isNull());
1450:       assertFalse(node2.isParamList());
1451:       assertFalse(node2.isDo());
1452:       assertEquals(0, node2.getChildCount());
1453:       assertFalse(node2.isFunction());
1454:       assertFalse(node2.isContinue());
1455:       assertFalse(node2.isAdd());
1456:       assertFalse(node2.isNew());
1457:       assertEquals(8246, node2.getSourcePosition());
1458:       assertFalse(node2.isSetterDef());
1459:       assertFalse(node2.isLabel());
1460:       assertFalse(node2.isVar());
1461:       assertFalse(node2.isDefaultCase());
1462:       assertFalse(node2.isAssignAdd());
1463:       assertFalse(node2.isGetElem());
1464:       assertFalse(node2.isEmpty());
1465:       assertFalse(node2.isAssign());
1466:       assertFalse(node2.hasChildren());
1467:       assertFalse(node2.isTypeOf());
1468:       assertFalse(node2.isDec());
1469:       assertFalse(node2.isCast());
1470:       assertFalse(node2.isVoid());
1471:       assertFalse(node2.isOr());
1472:       assertFalse(node2.isDebugger());
1473:       assertFalse(node2.isTrue());
1474:       assertFalse(node2.isExprResult());
1475:       assertFalse(node2.isDelProp());
1476:       assertFalse(node2.isNot());
1477:       assertFalse(node2.isString());
1478:       assertFalse(node2.isObjectLit());
1479:       assertFalse(node2.isComma());
1480:       assertFalse(node2.isReturn());
1481:       assertFalse(node2.isGetProp());
1482:       assertFalse(node2.isWhile());
1483:       assertFalse(boolean2);
1484:       assertEquals(29, Node.JSDOC_INFO_PROP);
1485:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1486:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1487:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1488:       assertEquals(37, Node.OPT_ARG_NAME);
1489:       assertEquals(53, Node.INPUT_ID);
1490:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1491:       assertEquals(43, Node.IS_CONSTANT_NAME);
1492:       assertEquals(56, Node.CHANGE_TIME);
1493:       assertEquals(46, Node.IS_NAMESPACE);
1494:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1495:       assertEquals(36, Node.QUOTED_PROP);
1496:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1497:       assertEquals(55, Node.INFERRED_FUNCTION);
1498:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1499:       assertEquals(57, Node.LAST_PROP);
1500:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1501:       assertEquals(47, Node.IS_DISPATCHER);
1502:       assertEquals(2, Node.POST_FLAG);
1503:       assertEquals(30, Node.VAR_ARGS_NAME);
1504:       assertEquals(40, Node.ORIGINALNAME_PROP);
1505:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1506:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1507:       assertEquals(48, Node.DIRECTIVES);
1508:       assertEquals(54, Node.SLASH_V);
1509:       assertEquals(8, Node.FLAG_NO_THROWS);
1510:       assertEquals(39, Node.EMPTY_BLOCK);
1511:       assertEquals(52, Node.LENGTH);
1512:       assertEquals(57, Node.REFLECTED_OBJECT);
1513:       assertEquals(50, Node.FREE_CALL);
1514:       assertEquals(1, Node.DECR_FLAG);
1515:       assertEquals(4095, Node.COLUMN_MASK);
1516:       assertEquals(32, Node.INCRDECR_PROP);
1517:       assertEquals(49, Node.DIRECT_EVAL);
1518:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1519:       assertEquals(12, Node.COLUMN_BITS);
1520:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1521:       assertEquals(54, Node.SLASH_V);
1522:       assertEquals(52, Node.LENGTH);
1523:       assertEquals(57, Node.REFLECTED_OBJECT);
1524:       assertEquals(30, Node.VAR_ARGS_NAME);
1525:       assertEquals(1, Node.DECR_FLAG);
1526:       assertEquals(50, Node.FREE_CALL);
1527:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1528:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1529:       assertEquals(57, Node.LAST_PROP);
1530:       assertEquals(32, Node.INCRDECR_PROP);
1531:       assertEquals(39, Node.EMPTY_BLOCK);
1532:       assertEquals(48, Node.DIRECTIVES);
1533:       assertEquals(8, Node.FLAG_NO_THROWS);
1534:       assertEquals(56, Node.CHANGE_TIME);
1535:       assertEquals(12, Node.COLUMN_BITS);
1536:       assertEquals(49, Node.DIRECT_EVAL);
1537:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1538:       assertEquals(4095, Node.COLUMN_MASK);
1539:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1540:       assertEquals(37, Node.OPT_ARG_NAME);
1541:       assertEquals(53, Node.INPUT_ID);
1542:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1543:       assertEquals(43, Node.IS_CONSTANT_NAME);
1544:       assertEquals(36, Node.QUOTED_PROP);
1545:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1546:       assertEquals(29, Node.JSDOC_INFO_PROP);
1547:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1548:       assertEquals(55, Node.INFERRED_FUNCTION);
1549:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1550:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1551:       assertEquals(47, Node.IS_DISPATCHER);
1552:       assertEquals(2, Node.POST_FLAG);
1553:       assertEquals(46, Node.IS_NAMESPACE);
1554:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1555:       assertEquals(40, Node.ORIGINALNAME_PROP);
1556:       
1557:       boolean boolean3 = node1.isOptionalArg();
1558:       assertFalse(node1.equals((Object)node0));
1559:       assertFalse(node1.equals((Object)node2));
1560:       assertTrue(boolean3 == boolean1);
1561:       assertTrue(boolean3 == boolean2);
1562:       assertTrue(boolean3 == boolean0);
1563:       assertNotSame(node1, node0);
1564:       assertNotSame(node1, node2);
1565:       assertFalse(node1.isOr());
1566:       assertFalse(node1.isReturn());
1567:       assertFalse(node1.isLabel());
1568:       assertFalse(node1.isAssignAdd());
1569:       assertFalse(node1.isGetElem());
1570:       assertFalse(node1.isAssign());
1571:       assertFalse(node1.isLabelName());
1572:       assertFalse(node1.hasChildren());
1573:       assertFalse(node1.isDec());
1574:       assertFalse(node1.isTypeOf());
1575:       assertFalse(node1.isCast());
1576:       assertFalse(node1.hasMoreThanOneChild());
1577:       assertFalse(node1.isContinue());
1578:       assertFalse(node1.isBlock());
1579:       assertFalse(node1.hasOneChild());
1580:       assertFalse(node1.isWhile());
1581:       assertFalse(node1.isStringKey());
1582:       assertFalse(node1.isNot());
1583:       assertFalse(node1.isObjectLit());
1584:       assertFalse(node1.isNumber());
1585:       assertFalse(node1.isScript());
1586:       assertFalse(node1.isSetterDef());
1587:       assertFalse(node1.isThis());
1588:       assertFalse(node1.isAnd());
1589:       assertFalse(node1.isThrow());
1590:       assertFalse(node1.isFalse());
1591:       assertFalse(node1.isInstanceOf());
1592:       assertFalse(node1.isRegExp());
1593:       assertFalse(node1.isFunction());
1594:       assertFalse(node1.isWith());
1595:       assertFalse(node1.isCatch());
1596:       assertFalse(node1.isInc());
1597:       assertEquals(54, node1.getCharno());
1598:       assertFalse(node1.isIn());
1599:       assertFalse(node1.isDelProp());
1600:       assertFalse(node1.isNE());
1601:       assertFalse(node1.isIf());
1602:       assertFalse(node1.isFor());
1603:       assertFalse(node1.isArrayLit());
1604:       assertFalse(node1.isTry());
1605:       assertFalse(node1.isDebugger());
1606:       assertFalse(node1.isHook());
1607:       assertFalse(node1.isSwitch());
1608:       assertFalse(node1.isCase());
1609:       assertFalse(node1.isGetterDef());
1610:       assertFalse(node1.isString());
1611:       assertFalse(node1.isGetProp());
1612:       assertEquals(2, node1.getLineno());
1613:       assertFalse(node1.isComma());
1614:       assertFalse(node1.isNull());
1615:       assertFalse(node1.isParamList());
1616:       assertEquals(8246, node1.getSourcePosition());
1617:       assertFalse(node1.isName());
1618:       assertFalse(node1.isCall());
1619:       assertFalse(node1.isBreak());
1620:       assertEquals(0, node1.getChildCount());
1621:       assertFalse(node1.isNew());
1622:       assertFalse(node1.isVoid());
1623:       assertFalse(node1.isTrue());
1624:       assertFalse(node1.isExprResult());
1625:       assertFalse(node1.isAdd());
1626:       assertFalse(node1.isDefaultCase());
1627:       assertFalse(node1.isVar());
1628:       assertFalse(node1.isEmpty());
1629:       assertFalse(node1.isDo());
1630:       assertEquals(50, node1.getType());
1631:       assertFalse(boolean3);
1632:       assertEquals(29, Node.JSDOC_INFO_PROP);
1633:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1634:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1635:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1636:       assertEquals(37, Node.OPT_ARG_NAME);
1637:       assertEquals(53, Node.INPUT_ID);
1638:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1639:       assertEquals(43, Node.IS_CONSTANT_NAME);
1640:       assertEquals(56, Node.CHANGE_TIME);
1641:       assertEquals(46, Node.IS_NAMESPACE);
1642:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1643:       assertEquals(36, Node.QUOTED_PROP);
1644:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1645:       assertEquals(55, Node.INFERRED_FUNCTION);
1646:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1647:       assertEquals(57, Node.LAST_PROP);
1648:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1649:       assertEquals(47, Node.IS_DISPATCHER);
1650:       assertEquals(2, Node.POST_FLAG);
1651:       assertEquals(30, Node.VAR_ARGS_NAME);
1652:       assertEquals(40, Node.ORIGINALNAME_PROP);
1653:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1654:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1655:       assertEquals(48, Node.DIRECTIVES);
1656:       assertEquals(54, Node.SLASH_V);
1657:       assertEquals(8, Node.FLAG_NO_THROWS);
1658:       assertEquals(39, Node.EMPTY_BLOCK);
1659:       assertEquals(52, Node.LENGTH);
1660:       assertEquals(57, Node.REFLECTED_OBJECT);
1661:       assertEquals(50, Node.FREE_CALL);
1662:       assertEquals(1, Node.DECR_FLAG);
1663:       assertEquals(4095, Node.COLUMN_MASK);
1664:       assertEquals(32, Node.INCRDECR_PROP);
1665:       assertEquals(49, Node.DIRECT_EVAL);
1666:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1667:       assertEquals(12, Node.COLUMN_BITS);
1668:       
1669:       boolean boolean4 = node1.isWith();
1670:       assertFalse(node1.equals((Object)node0));
1671:       assertFalse(node1.equals((Object)node2));
1672:       assertTrue(boolean4 == boolean1);
1673:       assertTrue(boolean4 == boolean3);
1674:       assertTrue(boolean4 == boolean2);
1675:       assertTrue(boolean4 == boolean0);
1676:       assertNotSame(node1, node0);
1677:       assertNotSame(node1, node2);
1678:       assertFalse(node1.isOr());
1679:       assertFalse(node1.isReturn());
1680:       assertFalse(node1.isLabel());
1681:       assertFalse(node1.isAssignAdd());
1682:       assertFalse(node1.isGetElem());
1683:       assertFalse(node1.isAssign());
1684:       assertFalse(node1.isLabelName());
1685:       assertFalse(node1.hasChildren());
1686:       assertFalse(node1.isDec());
1687:       assertFalse(node1.isTypeOf());
1688:       assertFalse(node1.isCast());
1689:       assertFalse(node1.hasMoreThanOneChild());
1690:       assertFalse(node1.isContinue());
1691:       assertFalse(node1.isBlock());
1692:       assertFalse(node1.hasOneChild());
1693:       assertFalse(node1.isWhile());
1694:       assertFalse(node1.isStringKey());
1695:       assertFalse(node1.isNot());
1696:       assertFalse(node1.isObjectLit());
1697:       assertFalse(node1.isNumber());
1698:       assertFalse(node1.isScript());
1699:       assertFalse(node1.isSetterDef());
1700:       assertFalse(node1.isThis());
1701:       assertFalse(node1.isAnd());
1702:       assertFalse(node1.isThrow());
1703:       assertFalse(node1.isFalse());
1704:       assertFalse(node1.isInstanceOf());
1705:       assertFalse(node1.isRegExp());
1706:       assertFalse(node1.isFunction());
1707:       assertFalse(node1.isWith());
1708:       assertFalse(node1.isCatch());
1709:       assertFalse(node1.isInc());
1710:       assertEquals(54, node1.getCharno());
1711:       assertFalse(node1.isIn());
1712:       assertFalse(node1.isDelProp());
1713:       assertFalse(node1.isNE());
1714:       assertFalse(node1.isIf());
1715:       assertFalse(node1.isFor());
1716:       assertFalse(node1.isArrayLit());
1717:       assertFalse(node1.isTry());
1718:       assertFalse(node1.isDebugger());
1719:       assertFalse(node1.isHook());
1720:       assertFalse(node1.isSwitch());
1721:       assertFalse(node1.isCase());
1722:       assertFalse(node1.isGetterDef());
1723:       assertFalse(node1.isString());
1724:       assertFalse(node1.isGetProp());
1725:       assertEquals(2, node1.getLineno());
1726:       assertFalse(node1.isComma());
1727:       assertFalse(node1.isNull());
1728:       assertFalse(node1.isParamList());
1729:       assertEquals(8246, node1.getSourcePosition());
1730:       assertFalse(node1.isName());
1731:       assertFalse(node1.isCall());
1732:       assertFalse(node1.isBreak());
1733:       assertEquals(0, node1.getChildCount());
1734:       assertFalse(node1.isNew());
1735:       assertFalse(node1.isVoid());
1736:       assertFalse(node1.isTrue());
1737:       assertFalse(node1.isExprResult());
1738:       assertFalse(node1.isAdd());
1739:       assertFalse(node1.isDefaultCase());
1740:       assertFalse(node1.isVar());
1741:       assertFalse(node1.isEmpty());
1742:       assertFalse(node1.isDo());
1743:       assertEquals(50, node1.getType());
1744:       assertFalse(boolean4);
1745:       assertEquals(29, Node.JSDOC_INFO_PROP);
1746:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1747:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1748:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1749:       assertEquals(37, Node.OPT_ARG_NAME);
1750:       assertEquals(53, Node.INPUT_ID);
1751:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1752:       assertEquals(43, Node.IS_CONSTANT_NAME);
1753:       assertEquals(56, Node.CHANGE_TIME);
1754:       assertEquals(46, Node.IS_NAMESPACE);
1755:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1756:       assertEquals(36, Node.QUOTED_PROP);
1757:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1758:       assertEquals(55, Node.INFERRED_FUNCTION);
1759:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1760:       assertEquals(57, Node.LAST_PROP);
1761:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1762:       assertEquals(47, Node.IS_DISPATCHER);
1763:       assertEquals(2, Node.POST_FLAG);
1764:       assertEquals(30, Node.VAR_ARGS_NAME);
1765:       assertEquals(40, Node.ORIGINALNAME_PROP);
1766:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1767:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1768:       assertEquals(48, Node.DIRECTIVES);
1769:       assertEquals(54, Node.SLASH_V);
1770:       assertEquals(8, Node.FLAG_NO_THROWS);
1771:       assertEquals(39, Node.EMPTY_BLOCK);
1772:       assertEquals(52, Node.LENGTH);
1773:       assertEquals(57, Node.REFLECTED_OBJECT);
1774:       assertEquals(50, Node.FREE_CALL);
1775:       assertEquals(1, Node.DECR_FLAG);
1776:       assertEquals(4095, Node.COLUMN_MASK);
1777:       assertEquals(32, Node.INCRDECR_PROP);
1778:       assertEquals(49, Node.DIRECT_EVAL);
1779:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1780:       assertEquals(12, Node.COLUMN_BITS);
1781:       
1782:       boolean boolean5 = node2.isSyntheticBlock();
1783:       assertTrue(boolean5 == boolean0);
1784:       assertTrue(boolean5 == boolean2);
1785:       assertTrue(boolean5 == boolean4);
1786:       assertTrue(boolean5 == boolean1);
1787:       assertTrue(boolean5 == boolean3);
1788:       assertFalse(node1.equals((Object)node0));
1789:       assertFalse(node1.equals((Object)node2));
1790:       assertFalse(node2.equals((Object)node0));
1791:       assertFalse(node2.equals((Object)node1));
1792:       assertNotSame(node1, node0);
1793:       assertNotSame(node1, node2);
1794:       assertNotSame(node2, node0);
1795:       assertNotSame(node2, node1);
1796:       assertFalse(node1.isOr());
1797:       assertFalse(node1.isReturn());
1798:       assertFalse(node1.isLabel());
1799:       assertFalse(node1.isAssignAdd());
1800:       assertFalse(node1.isGetElem());
1801:       assertFalse(node1.isAssign());
1802:       assertFalse(node1.isLabelName());
1803:       assertFalse(node1.hasChildren());
1804:       assertFalse(node1.isDec());
1805:       assertFalse(node1.isTypeOf());
1806:       assertFalse(node1.isCast());
1807:       assertFalse(node1.hasMoreThanOneChild());
1808:       assertFalse(node1.isContinue());
1809:       assertFalse(node1.isBlock());
1810:       assertFalse(node1.hasOneChild());
1811:       assertFalse(node1.isWhile());
1812:       assertFalse(node1.isStringKey());
1813:       assertFalse(node1.isNot());
1814:       assertFalse(node1.isObjectLit());
1815:       assertFalse(node1.isNumber());
1816:       assertFalse(node1.isScript());
1817:       assertFalse(node1.isSetterDef());
1818:       assertFalse(node1.isThis());
1819:       assertFalse(node1.isAnd());
1820:       assertFalse(node1.isThrow());
1821:       assertFalse(node1.isFalse());
1822:       assertFalse(node1.isInstanceOf());
1823:       assertFalse(node1.isRegExp());
1824:       assertFalse(node1.isFunction());
1825:       assertFalse(node1.isWith());
1826:       assertFalse(node1.isCatch());
1827:       assertFalse(node1.isInc());
1828:       assertEquals(54, node1.getCharno());
1829:       assertFalse(node1.isIn());
1830:       assertFalse(node1.isDelProp());
1831:       assertFalse(node1.isNE());
1832:       assertFalse(node1.isIf());
1833:       assertFalse(node1.isFor());
1834:       assertFalse(node1.isArrayLit());
1835:       assertFalse(node1.isTry());
1836:       assertFalse(node1.isDebugger());
1837:       assertFalse(node1.isHook());
1838:       assertFalse(node1.isSwitch());
1839:       assertFalse(node1.isCase());
1840:       assertFalse(node1.isGetterDef());
1841:       assertFalse(node1.isString());
1842:       assertFalse(node1.isGetProp());
1843:       assertEquals(2, node1.getLineno());
1844:       assertFalse(node1.isComma());
1845:       assertFalse(node1.isNull());
1846:       assertFalse(node1.isParamList());
1847:       assertEquals(8246, node1.getSourcePosition());
1848:       assertFalse(node1.isName());
1849:       assertFalse(node1.isCall());
1850:       assertFalse(node1.isBreak());
1851:       assertEquals(0, node1.getChildCount());
1852:       assertFalse(node1.isNew());
1853:       assertFalse(node1.isVoid());
1854:       assertFalse(node1.isTrue());
1855:       assertFalse(node1.isExprResult());
1856:       assertFalse(node1.isAdd());
1857:       assertFalse(node1.isDefaultCase());
1858:       assertFalse(node1.isVar());
1859:       assertFalse(node1.isEmpty());
1860:       assertFalse(node1.isDo());
1861:       assertEquals(50, node1.getType());
1862:       assertFalse(node2.isFalse());
1863:       assertFalse(node2.isThrow());
1864:       assertFalse(node2.isBreak());
1865:       assertEquals(50, node2.getType());
1866:       assertEquals(2, node2.getLineno());
1867:       assertFalse(node2.isAnd());
1868:       assertFalse(node2.isSwitch());
1869:       assertFalse(node2.isIn());
1870:       assertFalse(node2.isInc());
1871:       assertEquals(54, node2.getCharno());
1872:       assertFalse(node2.isFor());
1873:       assertFalse(node2.isLabelName());
1874:       assertFalse(node2.isNumber());
1875:       assertFalse(node2.isGetterDef());
1876:       assertFalse(node2.isArrayLit());
1877:       assertFalse(node2.isNE());
1878:       assertFalse(node2.isIf());
1879:       assertFalse(node2.isCase());
1880:       assertFalse(node2.isRegExp());
1881:       assertFalse(node2.isInstanceOf());
1882:       assertFalse(node2.isScript());
1883:       assertFalse(node2.isCatch());
1884:       assertFalse(node2.isWith());
1885:       assertFalse(node2.hasMoreThanOneChild());
1886:       assertFalse(node2.isBlock());
1887:       assertFalse(node2.isTry());
1888:       assertFalse(node2.isThis());
1889:       assertFalse(node2.isHook());
1890:       assertFalse(node2.hasOneChild());
1891:       assertFalse(node2.isName());
1892:       assertFalse(node2.isStringKey());
1893:       assertFalse(node2.isCall());
1894:       assertFalse(node2.isNull());
1895:       assertFalse(node2.isParamList());
1896:       assertFalse(node2.isDo());
1897:       assertEquals(0, node2.getChildCount());
1898:       assertFalse(node2.isFunction());
1899:       assertFalse(node2.isContinue());
1900:       assertFalse(node2.isAdd());
1901:       assertFalse(node2.isNew());
1902:       assertEquals(8246, node2.getSourcePosition());
1903:       assertFalse(node2.isSetterDef());
1904:       assertFalse(node2.isLabel());
1905:       assertFalse(node2.isVar());
1906:       assertFalse(node2.isDefaultCase());
1907:       assertFalse(node2.isAssignAdd());
1908:       assertFalse(node2.isGetElem());
1909:       assertFalse(node2.isEmpty());
1910:       assertFalse(node2.isAssign());
1911:       assertFalse(node2.hasChildren());
1912:       assertFalse(node2.isTypeOf());
1913:       assertFalse(node2.isDec());
1914:       assertFalse(node2.isCast());
1915:       assertFalse(node2.isVoid());
1916:       assertFalse(node2.isOr());
1917:       assertFalse(node2.isDebugger());
1918:       assertFalse(node2.isTrue());
1919:       assertFalse(node2.isExprResult());
1920:       assertFalse(node2.isDelProp());
1921:       assertFalse(node2.isNot());
1922:       assertFalse(node2.isString());
1923:       assertFalse(node2.isObjectLit());
1924:       assertFalse(node2.isComma());
1925:       assertFalse(node2.isReturn());
1926:       assertFalse(node2.isGetProp());
1927:       assertFalse(node2.isWhile());
1928:       assertFalse(boolean5);
1929:       assertEquals(29, Node.JSDOC_INFO_PROP);
1930:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1931:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1932:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1933:       assertEquals(37, Node.OPT_ARG_NAME);
1934:       assertEquals(53, Node.INPUT_ID);
1935:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1936:       assertEquals(43, Node.IS_CONSTANT_NAME);
1937:       assertEquals(56, Node.CHANGE_TIME);
1938:       assertEquals(46, Node.IS_NAMESPACE);
1939:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1940:       assertEquals(36, Node.QUOTED_PROP);
1941:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1942:       assertEquals(55, Node.INFERRED_FUNCTION);
1943:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1944:       assertEquals(57, Node.LAST_PROP);
1945:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1946:       assertEquals(47, Node.IS_DISPATCHER);
1947:       assertEquals(2, Node.POST_FLAG);
1948:       assertEquals(30, Node.VAR_ARGS_NAME);
1949:       assertEquals(40, Node.ORIGINALNAME_PROP);
1950:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1951:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1952:       assertEquals(48, Node.DIRECTIVES);
1953:       assertEquals(54, Node.SLASH_V);
1954:       assertEquals(8, Node.FLAG_NO_THROWS);
1955:       assertEquals(39, Node.EMPTY_BLOCK);
1956:       assertEquals(52, Node.LENGTH);
1957:       assertEquals(57, Node.REFLECTED_OBJECT);
1958:       assertEquals(50, Node.FREE_CALL);
1959:       assertEquals(1, Node.DECR_FLAG);
1960:       assertEquals(4095, Node.COLUMN_MASK);
1961:       assertEquals(32, Node.INCRDECR_PROP);
1962:       assertEquals(49, Node.DIRECT_EVAL);
1963:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1964:       assertEquals(12, Node.COLUMN_BITS);
1965:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1966:       assertEquals(54, Node.SLASH_V);
1967:       assertEquals(52, Node.LENGTH);
1968:       assertEquals(57, Node.REFLECTED_OBJECT);
1969:       assertEquals(30, Node.VAR_ARGS_NAME);
1970:       assertEquals(1, Node.DECR_FLAG);
1971:       assertEquals(50, Node.FREE_CALL);
1972:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1973:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1974:       assertEquals(57, Node.LAST_PROP);
1975:       assertEquals(32, Node.INCRDECR_PROP);
1976:       assertEquals(39, Node.EMPTY_BLOCK);
1977:       assertEquals(48, Node.DIRECTIVES);
1978:       assertEquals(8, Node.FLAG_NO_THROWS);
1979:       assertEquals(56, Node.CHANGE_TIME);
1980:       assertEquals(12, Node.COLUMN_BITS);
1981:       assertEquals(49, Node.DIRECT_EVAL);
1982:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1983:       assertEquals(4095, Node.COLUMN_MASK);
1984:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1985:       assertEquals(37, Node.OPT_ARG_NAME);
1986:       assertEquals(53, Node.INPUT_ID);
1987:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1988:       assertEquals(43, Node.IS_CONSTANT_NAME);
1989:       assertEquals(36, Node.QUOTED_PROP);
1990:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1991:       assertEquals(29, Node.JSDOC_INFO_PROP);
1992:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1993:       assertEquals(55, Node.INFERRED_FUNCTION);
1994:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1995:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1996:       assertEquals(47, Node.IS_DISPATCHER);
1997:       assertEquals(2, Node.POST_FLAG);
1998:       assertEquals(46, Node.IS_NAMESPACE);
1999:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2000:       assertEquals(40, Node.ORIGINALNAME_PROP);
2001:   }
2002: }
RegularFileObject[/tmp/EvoSuite_112_1628158387558/com/google/javascript/rhino/Node_112_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:07 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_112_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_112_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_112_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.javascript.rhino.jstype.TemplatizedType",
335:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.JSTypeExpression",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.common.collect.Platform",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.common.collect.Iterators$12",
362:       "com.google.javascript.rhino.jstype.TernaryValue",
363:       "com.google.javascript.rhino.jstype.JSType$2",
364:       "com.google.javascript.rhino.jstype.JSType$TypePair"
365:     );
366:   }
367: }

[MASTER] 10:13:07.932 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(116, ":R&#P");
assertNotNull(node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isString());
assertTrue(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertEquals(116, node0.getType());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

node0.setQuotedString();
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isString());
assertTrue(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertEquals(116, node0.getType());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Node node1 = Node.newString(50, ":R&#P", 2, 54);
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isStringKey());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertEquals(54, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertEquals(2, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertEquals(8246, node1.getSourcePosition());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertEquals(50, node1.getType());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean0 = node0.isVarArgs();
assertFalse(node0.equals((Object)node1));
assertNotSame(node0, node1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isString());
assertTrue(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertEquals(116, node0.getType());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(boolean0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Node node2 = node1.cloneNode();
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertNotNull(node2);
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isStringKey());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertEquals(54, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertEquals(2, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertEquals(8246, node1.getSourcePosition());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertEquals(50, node1.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isBreak());
assertEquals(50, node2.getType());
assertEquals(2, node2.getLineno());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertEquals(54, node2.getCharno());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isDo());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertEquals(8246, node2.getSourcePosition());
assertFalse(node2.isSetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isCast());
assertFalse(node2.isVoid());
assertFalse(node2.isOr());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isDelProp());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);

Set<String> set0 = node2.getDirectives();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertNull(set0);
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isStringKey());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertEquals(54, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertEquals(2, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertEquals(8246, node1.getSourcePosition());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertEquals(50, node1.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isBreak());
assertEquals(50, node2.getType());
assertEquals(2, node2.getLineno());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertEquals(54, node2.getCharno());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isDo());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertEquals(8246, node2.getSourcePosition());
assertFalse(node2.isSetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isCast());
assertFalse(node2.isVoid());
assertFalse(node2.isOr());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isDelProp());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean1 = node0.isParamList();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean1 == boolean0);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isString());
assertTrue(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertEquals(116, node0.getType());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(boolean1);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags2);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());

node0.putBooleanProp(44, false);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isString());
assertTrue(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertEquals(116, node0.getType());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNull(staticSourceFile0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isString());
assertTrue(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertEquals(116, node0.getType());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotNull(iterable0);
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isStringKey());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertEquals(54, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertEquals(2, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertEquals(8246, node1.getSourcePosition());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertEquals(50, node1.getType());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(iterable0.contains(node1));

boolean boolean2 = node2.isEmpty();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isStringKey());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertEquals(54, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertEquals(2, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertEquals(8246, node1.getSourcePosition());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertEquals(50, node1.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isBreak());
assertEquals(50, node2.getType());
assertEquals(2, node2.getLineno());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertEquals(54, node2.getCharno());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isDo());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertEquals(8246, node2.getSourcePosition());
assertFalse(node2.isSetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isCast());
assertFalse(node2.isVoid());
assertFalse(node2.isOr());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isDelProp());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(boolean2);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean3 = node1.isOptionalArg();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isStringKey());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertEquals(54, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertEquals(2, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertEquals(8246, node1.getSourcePosition());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertEquals(50, node1.getType());
assertFalse(boolean3);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean4 = node1.isWith();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isStringKey());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertEquals(54, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertEquals(2, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertEquals(8246, node1.getSourcePosition());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertEquals(50, node1.getType());
assertFalse(boolean4);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean5 = node2.isSyntheticBlock();
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isStringKey());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertEquals(54, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertEquals(2, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertEquals(8246, node1.getSourcePosition());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertEquals(50, node1.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isBreak());
assertEquals(50, node2.getType());
assertEquals(2, node2.getLineno());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertEquals(54, node2.getCharno());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isDo());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertEquals(8246, node2.getSourcePosition());
assertFalse(node2.isSetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isCast());
assertFalse(node2.isVoid());
assertFalse(node2.isOr());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isDelProp());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(boolean5);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);


[MASTER] 10:13:10.673 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_132_1628158390621/com/google/javascript/rhino/Node_132_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_132_1628158390621/com/google/javascript/rhino/Node_132_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:10.673 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:10.673 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:10.674 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 551
[MASTER] 10:13:10.675 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_132_1628158390621/com/google/javascript/rhino/Node_132_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:10 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_132_tmp__ESTest extends Node_132_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(154);
22:       assertNotNull(node0);
23:       assertFalse(node0.isWith());
24:       assertFalse(node0.isScript());
25:       assertFalse(node0.isAnd());
26:       assertFalse(node0.isGetProp());
27:       assertTrue(node0.isStringKey());
28:       assertFalse(node0.isNot());
29:       assertFalse(node0.isObjectLit());
30:       assertFalse(node0.isThrow());
31:       assertEquals(154, node0.getType());
32:       assertFalse(node0.isLabelName());
33:       assertFalse(node0.isLabel());
34:       assertFalse(node0.isAssignAdd());
35:       assertFalse(node0.isCast());
36:       assertFalse(node0.isContinue());
37:       assertFalse(node0.isFalse());
38:       assertFalse(node0.isCase());
39:       assertFalse(node0.isSwitch());
40:       assertFalse(node0.isInc());
41:       assertEquals((-1), node0.getCharno());
42:       assertFalse(node0.isNumber());
43:       assertFalse(node0.isIn());
44:       assertFalse(node0.isGetterDef());
45:       assertFalse(node0.isFor());
46:       assertFalse(node0.isNE());
47:       assertFalse(node0.hasOneChild());
48:       assertFalse(node0.isIf());
49:       assertEquals((-1), node0.getLineno());
50:       assertFalse(node0.isHook());
51:       assertFalse(node0.isInstanceOf());
52:       assertFalse(node0.isBlock());
53:       assertFalse(node0.isThis());
54:       assertFalse(node0.hasMoreThanOneChild());
55:       assertFalse(node0.isCatch());
56:       assertFalse(node0.isRegExp());
57:       assertFalse(node0.isDefaultCase());
58:       assertFalse(node0.isVoid());
59:       assertFalse(node0.isTry());
60:       assertFalse(node0.isTrue());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isEmpty());
63:       assertFalse(node0.isSetterDef());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isParamList());
66:       assertFalse(node0.isVar());
67:       assertFalse(node0.isFunction());
68:       assertEquals(0, node0.getChildCount());
69:       assertFalse(node0.isDo());
70:       assertFalse(node0.isString());
71:       assertFalse(node0.isWhile());
72:       assertFalse(node0.isNew());
73:       assertFalse(node0.isOr());
74:       assertFalse(node0.isAdd());
75:       assertEquals((-1), node0.getSourcePosition());
76:       assertFalse(node0.isAssign());
77:       assertFalse(node0.hasChildren());
78:       assertFalse(node0.isBreak());
79:       assertFalse(node0.isGetElem());
80:       assertFalse(node0.isNull());
81:       assertFalse(node0.isCall());
82:       assertFalse(node0.isDelProp());
83:       assertFalse(node0.isName());
84:       assertFalse(node0.isReturn());
85:       assertFalse(node0.isExprResult());
86:       assertFalse(node0.isComma());
87:       assertFalse(node0.isDec());
88:       assertFalse(node0.isTypeOf());
89:       assertEquals(48, Node.DIRECTIVES);
90:       assertEquals(8, Node.FLAG_NO_THROWS);
91:       assertEquals(55, Node.INFERRED_FUNCTION);
92:       assertEquals(4095, Node.COLUMN_MASK);
93:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
94:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
95:       assertEquals(39, Node.EMPTY_BLOCK);
96:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
97:       assertEquals(52, Node.LENGTH);
98:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
99:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
100:       assertEquals(15, Node.NO_SIDE_EFFECTS);
101:       assertEquals(53, Node.INPUT_ID);
102:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
103:       assertEquals(29, Node.JSDOC_INFO_PROP);
104:       assertEquals(49, Node.DIRECT_EVAL);
105:       assertEquals(56, Node.CHANGE_TIME);
106:       assertEquals(36, Node.QUOTED_PROP);
107:       assertEquals(57, Node.REFLECTED_OBJECT);
108:       assertEquals(32, Node.INCRDECR_PROP);
109:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
110:       assertEquals(37, Node.OPT_ARG_NAME);
111:       assertEquals(30, Node.VAR_ARGS_NAME);
112:       assertEquals(57, Node.LAST_PROP);
113:       assertEquals(1, Node.DECR_FLAG);
114:       assertEquals(2, Node.POST_FLAG);
115:       assertEquals(12, Node.COLUMN_BITS);
116:       assertEquals(47, Node.IS_DISPATCHER);
117:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
118:       assertEquals(40, Node.ORIGINALNAME_PROP);
119:       assertEquals(50, Node.FREE_CALL);
120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
121:       assertEquals(43, Node.IS_CONSTANT_NAME);
122:       assertEquals(51, Node.STATIC_SOURCE_FILE);
123:       assertEquals(46, Node.IS_NAMESPACE);
124:       assertEquals(54, Node.SLASH_V);
125:       
126:       Node node1 = new Node(57);
127:       assertFalse(node1.equals((Object)node0));
128:       assertNotNull(node1);
129:       assertFalse(node1.isCall());
130:       assertFalse(node1.isVar());
131:       assertFalse(node1.isName());
132:       assertFalse(node1.isStringKey());
133:       assertFalse(node1.isAdd());
134:       assertFalse(node1.isNew());
135:       assertFalse(node1.isSetterDef());
136:       assertFalse(node1.isParamList());
137:       assertFalse(node1.isNull());
138:       assertFalse(node1.hasMoreThanOneChild());
139:       assertFalse(node1.isCatch());
140:       assertEquals((-1), node1.getLineno());
141:       assertFalse(node1.isTypeOf());
142:       assertFalse(node1.isRegExp());
143:       assertFalse(node1.isReturn());
144:       assertFalse(node1.isWhile());
145:       assertFalse(node1.isAssign());
146:       assertFalse(node1.isDec());
147:       assertFalse(node1.isBlock());
148:       assertFalse(node1.hasChildren());
149:       assertEquals(57, node1.getType());
150:       assertFalse(node1.isCast());
151:       assertFalse(node1.isNE());
152:       assertFalse(node1.isIf());
153:       assertFalse(node1.isNot());
154:       assertEquals((-1), node1.getSourcePosition());
155:       assertFalse(node1.isDebugger());
156:       assertFalse(node1.isAnd());
157:       assertFalse(node1.isContinue());
158:       assertFalse(node1.isIn());
159:       assertFalse(node1.isFunction());
160:       assertFalse(node1.isThrow());
161:       assertFalse(node1.isFalse());
162:       assertFalse(node1.isBreak());
163:       assertFalse(node1.isSwitch());
164:       assertFalse(node1.isInc());
165:       assertEquals((-1), node1.getCharno());
166:       assertFalse(node1.isObjectLit());
167:       assertFalse(node1.isInstanceOf());
168:       assertFalse(node1.isString());
169:       assertFalse(node1.isCase());
170:       assertFalse(node1.isGetProp());
171:       assertFalse(node1.isComma());
172:       assertFalse(node1.isExprResult());
173:       assertFalse(node1.isThis());
174:       assertFalse(node1.isWith());
175:       assertFalse(node1.isFor());
176:       assertFalse(node1.isHook());
177:       assertFalse(node1.isEmpty());
178:       assertFalse(node1.isDelProp());
179:       assertFalse(node1.isLabelName());
180:       assertFalse(node1.isTry());
181:       assertFalse(node1.isGetElem());
182:       assertFalse(node1.hasOneChild());
183:       assertFalse(node1.isArrayLit());
184:       assertFalse(node1.isTrue());
185:       assertFalse(node1.isVoid());
186:       assertFalse(node1.isScript());
187:       assertFalse(node1.isNumber());
188:       assertFalse(node1.isOr());
189:       assertFalse(node1.isGetterDef());
190:       assertFalse(node1.isDo());
191:       assertFalse(node1.isDefaultCase());
192:       assertFalse(node1.isAssignAdd());
193:       assertEquals(0, node1.getChildCount());
194:       assertFalse(node1.isLabel());
195:       assertEquals(15, Node.NO_SIDE_EFFECTS);
196:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
197:       assertEquals(30, Node.VAR_ARGS_NAME);
198:       assertEquals(52, Node.LENGTH);
199:       assertEquals(12, Node.COLUMN_BITS);
200:       assertEquals(1, Node.DECR_FLAG);
201:       assertEquals(32, Node.INCRDECR_PROP);
202:       assertEquals(57, Node.LAST_PROP);
203:       assertEquals(2, Node.POST_FLAG);
204:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
205:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
206:       assertEquals(47, Node.IS_DISPATCHER);
207:       assertEquals(50, Node.FREE_CALL);
208:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
209:       assertEquals(40, Node.ORIGINALNAME_PROP);
210:       assertEquals(51, Node.STATIC_SOURCE_FILE);
211:       assertEquals(46, Node.IS_NAMESPACE);
212:       assertEquals(54, Node.SLASH_V);
213:       assertEquals(43, Node.IS_CONSTANT_NAME);
214:       assertEquals(36, Node.QUOTED_PROP);
215:       assertEquals(53, Node.INPUT_ID);
216:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
217:       assertEquals(55, Node.INFERRED_FUNCTION);
218:       assertEquals(4095, Node.COLUMN_MASK);
219:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
220:       assertEquals(39, Node.EMPTY_BLOCK);
221:       assertEquals(8, Node.FLAG_NO_THROWS);
222:       assertEquals(48, Node.DIRECTIVES);
223:       assertEquals(37, Node.OPT_ARG_NAME);
224:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
225:       assertEquals(29, Node.JSDOC_INFO_PROP);
226:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
227:       assertEquals(57, Node.REFLECTED_OBJECT);
228:       assertEquals(49, Node.DIRECT_EVAL);
229:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
230:       assertEquals(56, Node.CHANGE_TIME);
231:       
232:       node1.putBooleanProp(1827, true);
233:       assertFalse(node1.equals((Object)node0));
234:       assertNotSame(node1, node0);
235:       assertFalse(node1.isCall());
236:       assertFalse(node1.isVar());
237:       assertFalse(node1.isName());
238:       assertFalse(node1.isStringKey());
239:       assertFalse(node1.isAdd());
240:       assertFalse(node1.isNew());
241:       assertFalse(node1.isSetterDef());
242:       assertFalse(node1.isParamList());
243:       assertFalse(node1.isNull());
244:       assertFalse(node1.hasMoreThanOneChild());
245:       assertFalse(node1.isCatch());
246:       assertEquals((-1), node1.getLineno());
247:       assertFalse(node1.isTypeOf());
248:       assertFalse(node1.isRegExp());
249:       assertFalse(node1.isReturn());
250:       assertFalse(node1.isWhile());
251:       assertFalse(node1.isAssign());
252:       assertFalse(node1.isDec());
253:       assertFalse(node1.isBlock());
254:       assertFalse(node1.hasChildren());
255:       assertEquals(57, node1.getType());
256:       assertFalse(node1.isCast());
257:       assertFalse(node1.isNE());
258:       assertFalse(node1.isIf());
259:       assertFalse(node1.isNot());
260:       assertEquals((-1), node1.getSourcePosition());
261:       assertFalse(node1.isDebugger());
262:       assertFalse(node1.isAnd());
263:       assertFalse(node1.isContinue());
264:       assertFalse(node1.isIn());
265:       assertFalse(node1.isFunction());
266:       assertFalse(node1.isThrow());
267:       assertFalse(node1.isFalse());
268:       assertFalse(node1.isBreak());
269:       assertFalse(node1.isSwitch());
270:       assertFalse(node1.isInc());
271:       assertEquals((-1), node1.getCharno());
272:       assertFalse(node1.isObjectLit());
273:       assertFalse(node1.isInstanceOf());
274:       assertFalse(node1.isString());
275:       assertFalse(node1.isCase());
276:       assertFalse(node1.isGetProp());
277:       assertFalse(node1.isComma());
278:       assertFalse(node1.isExprResult());
279:       assertFalse(node1.isThis());
280:       assertFalse(node1.isWith());
281:       assertFalse(node1.isFor());
282:       assertFalse(node1.isHook());
283:       assertFalse(node1.isEmpty());
284:       assertFalse(node1.isDelProp());
285:       assertFalse(node1.isLabelName());
286:       assertFalse(node1.isTry());
287:       assertFalse(node1.isGetElem());
288:       assertFalse(node1.hasOneChild());
289:       assertFalse(node1.isArrayLit());
290:       assertFalse(node1.isTrue());
291:       assertFalse(node1.isVoid());
292:       assertFalse(node1.isScript());
293:       assertFalse(node1.isNumber());
294:       assertFalse(node1.isOr());
295:       assertFalse(node1.isGetterDef());
296:       assertFalse(node1.isDo());
297:       assertFalse(node1.isDefaultCase());
298:       assertFalse(node1.isAssignAdd());
299:       assertEquals(0, node1.getChildCount());
300:       assertFalse(node1.isLabel());
301:       assertEquals(15, Node.NO_SIDE_EFFECTS);
302:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
303:       assertEquals(30, Node.VAR_ARGS_NAME);
304:       assertEquals(52, Node.LENGTH);
305:       assertEquals(12, Node.COLUMN_BITS);
306:       assertEquals(1, Node.DECR_FLAG);
307:       assertEquals(32, Node.INCRDECR_PROP);
308:       assertEquals(57, Node.LAST_PROP);
309:       assertEquals(2, Node.POST_FLAG);
310:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
311:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
312:       assertEquals(47, Node.IS_DISPATCHER);
313:       assertEquals(50, Node.FREE_CALL);
314:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
315:       assertEquals(40, Node.ORIGINALNAME_PROP);
316:       assertEquals(51, Node.STATIC_SOURCE_FILE);
317:       assertEquals(46, Node.IS_NAMESPACE);
318:       assertEquals(54, Node.SLASH_V);
319:       assertEquals(43, Node.IS_CONSTANT_NAME);
320:       assertEquals(36, Node.QUOTED_PROP);
321:       assertEquals(53, Node.INPUT_ID);
322:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
323:       assertEquals(55, Node.INFERRED_FUNCTION);
324:       assertEquals(4095, Node.COLUMN_MASK);
325:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
326:       assertEquals(39, Node.EMPTY_BLOCK);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(48, Node.DIRECTIVES);
329:       assertEquals(37, Node.OPT_ARG_NAME);
330:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
331:       assertEquals(29, Node.JSDOC_INFO_PROP);
332:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
333:       assertEquals(57, Node.REFLECTED_OBJECT);
334:       assertEquals(49, Node.DIRECT_EVAL);
335:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
336:       assertEquals(56, Node.CHANGE_TIME);
337:       
338:       StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
339:       assertFalse(node1.equals((Object)node0));
340:       assertNotSame(node1, node0);
341:       assertNull(staticSourceFile0);
342:       assertFalse(node1.isCall());
343:       assertFalse(node1.isVar());
344:       assertFalse(node1.isName());
345:       assertFalse(node1.isStringKey());
346:       assertFalse(node1.isAdd());
347:       assertFalse(node1.isNew());
348:       assertFalse(node1.isSetterDef());
349:       assertFalse(node1.isParamList());
350:       assertFalse(node1.isNull());
351:       assertFalse(node1.hasMoreThanOneChild());
352:       assertFalse(node1.isCatch());
353:       assertEquals((-1), node1.getLineno());
354:       assertFalse(node1.isTypeOf());
355:       assertFalse(node1.isRegExp());
356:       assertFalse(node1.isReturn());
357:       assertFalse(node1.isWhile());
358:       assertFalse(node1.isAssign());
359:       assertFalse(node1.isDec());
360:       assertFalse(node1.isBlock());
361:       assertFalse(node1.hasChildren());
362:       assertEquals(57, node1.getType());
363:       assertFalse(node1.isCast());
364:       assertFalse(node1.isNE());
365:       assertFalse(node1.isIf());
366:       assertFalse(node1.isNot());
367:       assertEquals((-1), node1.getSourcePosition());
368:       assertFalse(node1.isDebugger());
369:       assertFalse(node1.isAnd());
370:       assertFalse(node1.isContinue());
371:       assertFalse(node1.isIn());
372:       assertFalse(node1.isFunction());
373:       assertFalse(node1.isThrow());
374:       assertFalse(node1.isFalse());
375:       assertFalse(node1.isBreak());
376:       assertFalse(node1.isSwitch());
377:       assertFalse(node1.isInc());
378:       assertEquals((-1), node1.getCharno());
379:       assertFalse(node1.isObjectLit());
380:       assertFalse(node1.isInstanceOf());
381:       assertFalse(node1.isString());
382:       assertFalse(node1.isCase());
383:       assertFalse(node1.isGetProp());
384:       assertFalse(node1.isComma());
385:       assertFalse(node1.isExprResult());
386:       assertFalse(node1.isThis());
387:       assertFalse(node1.isWith());
388:       assertFalse(node1.isFor());
389:       assertFalse(node1.isHook());
390:       assertFalse(node1.isEmpty());
391:       assertFalse(node1.isDelProp());
392:       assertFalse(node1.isLabelName());
393:       assertFalse(node1.isTry());
394:       assertFalse(node1.isGetElem());
395:       assertFalse(node1.hasOneChild());
396:       assertFalse(node1.isArrayLit());
397:       assertFalse(node1.isTrue());
398:       assertFalse(node1.isVoid());
399:       assertFalse(node1.isScript());
400:       assertFalse(node1.isNumber());
401:       assertFalse(node1.isOr());
402:       assertFalse(node1.isGetterDef());
403:       assertFalse(node1.isDo());
404:       assertFalse(node1.isDefaultCase());
405:       assertFalse(node1.isAssignAdd());
406:       assertEquals(0, node1.getChildCount());
407:       assertFalse(node1.isLabel());
408:       assertEquals(15, Node.NO_SIDE_EFFECTS);
409:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
410:       assertEquals(30, Node.VAR_ARGS_NAME);
411:       assertEquals(52, Node.LENGTH);
412:       assertEquals(12, Node.COLUMN_BITS);
413:       assertEquals(1, Node.DECR_FLAG);
414:       assertEquals(32, Node.INCRDECR_PROP);
415:       assertEquals(57, Node.LAST_PROP);
416:       assertEquals(2, Node.POST_FLAG);
417:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
419:       assertEquals(47, Node.IS_DISPATCHER);
420:       assertEquals(50, Node.FREE_CALL);
421:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
422:       assertEquals(40, Node.ORIGINALNAME_PROP);
423:       assertEquals(51, Node.STATIC_SOURCE_FILE);
424:       assertEquals(46, Node.IS_NAMESPACE);
425:       assertEquals(54, Node.SLASH_V);
426:       assertEquals(43, Node.IS_CONSTANT_NAME);
427:       assertEquals(36, Node.QUOTED_PROP);
428:       assertEquals(53, Node.INPUT_ID);
429:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
430:       assertEquals(55, Node.INFERRED_FUNCTION);
431:       assertEquals(4095, Node.COLUMN_MASK);
432:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
433:       assertEquals(39, Node.EMPTY_BLOCK);
434:       assertEquals(8, Node.FLAG_NO_THROWS);
435:       assertEquals(48, Node.DIRECTIVES);
436:       assertEquals(37, Node.OPT_ARG_NAME);
437:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
438:       assertEquals(29, Node.JSDOC_INFO_PROP);
439:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
440:       assertEquals(57, Node.REFLECTED_OBJECT);
441:       assertEquals(49, Node.DIRECT_EVAL);
442:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
443:       assertEquals(56, Node.CHANGE_TIME);
444:       
445:       Iterable<Node> iterable0 = node0.children();
446:       assertFalse(node0.equals((Object)node1));
447:       assertNotSame(node0, node1);
448:       assertNotNull(iterable0);
449:       assertFalse(node0.isWith());
450:       assertFalse(node0.isScript());
451:       assertFalse(node0.isAnd());
452:       assertFalse(node0.isGetProp());
453:       assertTrue(node0.isStringKey());
454:       assertFalse(node0.isNot());
455:       assertFalse(node0.isObjectLit());
456:       assertFalse(node0.isThrow());
457:       assertEquals(154, node0.getType());
458:       assertFalse(node0.isLabelName());
459:       assertFalse(node0.isLabel());
460:       assertFalse(node0.isAssignAdd());
461:       assertFalse(node0.isCast());
462:       assertFalse(node0.isContinue());
463:       assertFalse(node0.isFalse());
464:       assertFalse(node0.isCase());
465:       assertFalse(node0.isSwitch());
466:       assertFalse(node0.isInc());
467:       assertEquals((-1), node0.getCharno());
468:       assertFalse(node0.isNumber());
469:       assertFalse(node0.isIn());
470:       assertFalse(node0.isGetterDef());
471:       assertFalse(node0.isFor());
472:       assertFalse(node0.isNE());
473:       assertFalse(node0.hasOneChild());
474:       assertFalse(node0.isIf());
475:       assertEquals((-1), node0.getLineno());
476:       assertFalse(node0.isHook());
477:       assertFalse(node0.isInstanceOf());
478:       assertFalse(node0.isBlock());
479:       assertFalse(node0.isThis());
480:       assertFalse(node0.hasMoreThanOneChild());
481:       assertFalse(node0.isCatch());
482:       assertFalse(node0.isRegExp());
483:       assertFalse(node0.isDefaultCase());
484:       assertFalse(node0.isVoid());
485:       assertFalse(node0.isTry());
486:       assertFalse(node0.isTrue());
487:       assertFalse(node0.isDebugger());
488:       assertFalse(node0.isEmpty());
489:       assertFalse(node0.isSetterDef());
490:       assertFalse(node0.isArrayLit());
491:       assertFalse(node0.isParamList());
492:       assertFalse(node0.isVar());
493:       assertFalse(node0.isFunction());
494:       assertEquals(0, node0.getChildCount());
495:       assertFalse(node0.isDo());
496:       assertFalse(node0.isString());
497:       assertFalse(node0.isWhile());
498:       assertFalse(node0.isNew());
499:       assertFalse(node0.isOr());
500:       assertFalse(node0.isAdd());
501:       assertEquals((-1), node0.getSourcePosition());
502:       assertFalse(node0.isAssign());
503:       assertFalse(node0.hasChildren());
504:       assertFalse(node0.isBreak());
505:       assertFalse(node0.isGetElem());
506:       assertFalse(node0.isNull());
507:       assertFalse(node0.isCall());
508:       assertFalse(node0.isDelProp());
509:       assertFalse(node0.isName());
510:       assertFalse(node0.isReturn());
511:       assertFalse(node0.isExprResult());
512:       assertFalse(node0.isComma());
513:       assertFalse(node0.isDec());
514:       assertFalse(node0.isTypeOf());
515:       assertEquals(48, Node.DIRECTIVES);
516:       assertEquals(8, Node.FLAG_NO_THROWS);
517:       assertEquals(55, Node.INFERRED_FUNCTION);
518:       assertEquals(4095, Node.COLUMN_MASK);
519:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
520:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
521:       assertEquals(39, Node.EMPTY_BLOCK);
522:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
523:       assertEquals(52, Node.LENGTH);
524:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
525:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
526:       assertEquals(15, Node.NO_SIDE_EFFECTS);
527:       assertEquals(53, Node.INPUT_ID);
528:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
529:       assertEquals(29, Node.JSDOC_INFO_PROP);
530:       assertEquals(49, Node.DIRECT_EVAL);
531:       assertEquals(56, Node.CHANGE_TIME);
532:       assertEquals(36, Node.QUOTED_PROP);
533:       assertEquals(57, Node.REFLECTED_OBJECT);
534:       assertEquals(32, Node.INCRDECR_PROP);
535:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
536:       assertEquals(37, Node.OPT_ARG_NAME);
537:       assertEquals(30, Node.VAR_ARGS_NAME);
538:       assertEquals(57, Node.LAST_PROP);
539:       assertEquals(1, Node.DECR_FLAG);
540:       assertEquals(2, Node.POST_FLAG);
541:       assertEquals(12, Node.COLUMN_BITS);
542:       assertEquals(47, Node.IS_DISPATCHER);
543:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
544:       assertEquals(40, Node.ORIGINALNAME_PROP);
545:       assertEquals(50, Node.FREE_CALL);
546:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
547:       assertEquals(43, Node.IS_CONSTANT_NAME);
548:       assertEquals(51, Node.STATIC_SOURCE_FILE);
549:       assertEquals(46, Node.IS_NAMESPACE);
550:       assertEquals(54, Node.SLASH_V);
551:       assertFalse(iterable0.contains(node1));
552:       
553:       boolean boolean0 = node0.isEmpty();
554:       assertFalse(node0.equals((Object)node1));
555:       assertNotSame(node0, node1);
556:       assertFalse(node0.isWith());
557:       assertFalse(node0.isScript());
558:       assertFalse(node0.isAnd());
559:       assertFalse(node0.isGetProp());
560:       assertTrue(node0.isStringKey());
561:       assertFalse(node0.isNot());
562:       assertFalse(node0.isObjectLit());
563:       assertFalse(node0.isThrow());
564:       assertEquals(154, node0.getType());
565:       assertFalse(node0.isLabelName());
566:       assertFalse(node0.isLabel());
567:       assertFalse(node0.isAssignAdd());
568:       assertFalse(node0.isCast());
569:       assertFalse(node0.isContinue());
570:       assertFalse(node0.isFalse());
571:       assertFalse(node0.isCase());
572:       assertFalse(node0.isSwitch());
573:       assertFalse(node0.isInc());
574:       assertEquals((-1), node0.getCharno());
575:       assertFalse(node0.isNumber());
576:       assertFalse(node0.isIn());
577:       assertFalse(node0.isGetterDef());
578:       assertFalse(node0.isFor());
579:       assertFalse(node0.isNE());
580:       assertFalse(node0.hasOneChild());
581:       assertFalse(node0.isIf());
582:       assertEquals((-1), node0.getLineno());
583:       assertFalse(node0.isHook());
584:       assertFalse(node0.isInstanceOf());
585:       assertFalse(node0.isBlock());
586:       assertFalse(node0.isThis());
587:       assertFalse(node0.hasMoreThanOneChild());
588:       assertFalse(node0.isCatch());
589:       assertFalse(node0.isRegExp());
590:       assertFalse(node0.isDefaultCase());
591:       assertFalse(node0.isVoid());
592:       assertFalse(node0.isTry());
593:       assertFalse(node0.isTrue());
594:       assertFalse(node0.isDebugger());
595:       assertFalse(node0.isEmpty());
596:       assertFalse(node0.isSetterDef());
597:       assertFalse(node0.isArrayLit());
598:       assertFalse(node0.isParamList());
599:       assertFalse(node0.isVar());
600:       assertFalse(node0.isFunction());
601:       assertEquals(0, node0.getChildCount());
602:       assertFalse(node0.isDo());
603:       assertFalse(node0.isString());
604:       assertFalse(node0.isWhile());
605:       assertFalse(node0.isNew());
606:       assertFalse(node0.isOr());
607:       assertFalse(node0.isAdd());
608:       assertEquals((-1), node0.getSourcePosition());
609:       assertFalse(node0.isAssign());
610:       assertFalse(node0.hasChildren());
611:       assertFalse(node0.isBreak());
612:       assertFalse(node0.isGetElem());
613:       assertFalse(node0.isNull());
614:       assertFalse(node0.isCall());
615:       assertFalse(node0.isDelProp());
616:       assertFalse(node0.isName());
617:       assertFalse(node0.isReturn());
618:       assertFalse(node0.isExprResult());
619:       assertFalse(node0.isComma());
620:       assertFalse(node0.isDec());
621:       assertFalse(node0.isTypeOf());
622:       assertFalse(boolean0);
623:       assertEquals(48, Node.DIRECTIVES);
624:       assertEquals(8, Node.FLAG_NO_THROWS);
625:       assertEquals(55, Node.INFERRED_FUNCTION);
626:       assertEquals(4095, Node.COLUMN_MASK);
627:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
628:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
629:       assertEquals(39, Node.EMPTY_BLOCK);
630:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
631:       assertEquals(52, Node.LENGTH);
632:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
633:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
634:       assertEquals(15, Node.NO_SIDE_EFFECTS);
635:       assertEquals(53, Node.INPUT_ID);
636:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
637:       assertEquals(29, Node.JSDOC_INFO_PROP);
638:       assertEquals(49, Node.DIRECT_EVAL);
639:       assertEquals(56, Node.CHANGE_TIME);
640:       assertEquals(36, Node.QUOTED_PROP);
641:       assertEquals(57, Node.REFLECTED_OBJECT);
642:       assertEquals(32, Node.INCRDECR_PROP);
643:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
644:       assertEquals(37, Node.OPT_ARG_NAME);
645:       assertEquals(30, Node.VAR_ARGS_NAME);
646:       assertEquals(57, Node.LAST_PROP);
647:       assertEquals(1, Node.DECR_FLAG);
648:       assertEquals(2, Node.POST_FLAG);
649:       assertEquals(12, Node.COLUMN_BITS);
650:       assertEquals(47, Node.IS_DISPATCHER);
651:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
652:       assertEquals(40, Node.ORIGINALNAME_PROP);
653:       assertEquals(50, Node.FREE_CALL);
654:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
655:       assertEquals(43, Node.IS_CONSTANT_NAME);
656:       assertEquals(51, Node.STATIC_SOURCE_FILE);
657:       assertEquals(46, Node.IS_NAMESPACE);
658:       assertEquals(54, Node.SLASH_V);
659:       
660:       boolean boolean1 = node0.isOptionalArg();
661:       assertFalse(node0.equals((Object)node1));
662:       assertTrue(boolean1 == boolean0);
663:       assertNotSame(node0, node1);
664:       assertFalse(node0.isWith());
665:       assertFalse(node0.isScript());
666:       assertFalse(node0.isAnd());
667:       assertFalse(node0.isGetProp());
668:       assertTrue(node0.isStringKey());
669:       assertFalse(node0.isNot());
670:       assertFalse(node0.isObjectLit());
671:       assertFalse(node0.isThrow());
672:       assertEquals(154, node0.getType());
673:       assertFalse(node0.isLabelName());
674:       assertFalse(node0.isLabel());
675:       assertFalse(node0.isAssignAdd());
676:       assertFalse(node0.isCast());
677:       assertFalse(node0.isContinue());
678:       assertFalse(node0.isFalse());
679:       assertFalse(node0.isCase());
680:       assertFalse(node0.isSwitch());
681:       assertFalse(node0.isInc());
682:       assertEquals((-1), node0.getCharno());
683:       assertFalse(node0.isNumber());
684:       assertFalse(node0.isIn());
685:       assertFalse(node0.isGetterDef());
686:       assertFalse(node0.isFor());
687:       assertFalse(node0.isNE());
688:       assertFalse(node0.hasOneChild());
689:       assertFalse(node0.isIf());
690:       assertEquals((-1), node0.getLineno());
691:       assertFalse(node0.isHook());
692:       assertFalse(node0.isInstanceOf());
693:       assertFalse(node0.isBlock());
694:       assertFalse(node0.isThis());
695:       assertFalse(node0.hasMoreThanOneChild());
696:       assertFalse(node0.isCatch());
697:       assertFalse(node0.isRegExp());
698:       assertFalse(node0.isDefaultCase());
699:       assertFalse(node0.isVoid());
700:       assertFalse(node0.isTry());
701:       assertFalse(node0.isTrue());
702:       assertFalse(node0.isDebugger());
703:       assertFalse(node0.isEmpty());
704:       assertFalse(node0.isSetterDef());
705:       assertFalse(node0.isArrayLit());
706:       assertFalse(node0.isParamList());
707:       assertFalse(node0.isVar());
708:       assertFalse(node0.isFunction());
709:       assertEquals(0, node0.getChildCount());
710:       assertFalse(node0.isDo());
711:       assertFalse(node0.isString());
712:       assertFalse(node0.isWhile());
713:       assertFalse(node0.isNew());
714:       assertFalse(node0.isOr());
715:       assertFalse(node0.isAdd());
716:       assertEquals((-1), node0.getSourcePosition());
717:       assertFalse(node0.isAssign());
718:       assertFalse(node0.hasChildren());
719:       assertFalse(node0.isBreak());
720:       assertFalse(node0.isGetElem());
721:       assertFalse(node0.isNull());
722:       assertFalse(node0.isCall());
723:       assertFalse(node0.isDelProp());
724:       assertFalse(node0.isName());
725:       assertFalse(node0.isReturn());
726:       assertFalse(node0.isExprResult());
727:       assertFalse(node0.isComma());
728:       assertFalse(node0.isDec());
729:       assertFalse(node0.isTypeOf());
730:       assertFalse(boolean1);
731:       assertEquals(48, Node.DIRECTIVES);
732:       assertEquals(8, Node.FLAG_NO_THROWS);
733:       assertEquals(55, Node.INFERRED_FUNCTION);
734:       assertEquals(4095, Node.COLUMN_MASK);
735:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
736:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
737:       assertEquals(39, Node.EMPTY_BLOCK);
738:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
739:       assertEquals(52, Node.LENGTH);
740:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
741:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
742:       assertEquals(15, Node.NO_SIDE_EFFECTS);
743:       assertEquals(53, Node.INPUT_ID);
744:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
745:       assertEquals(29, Node.JSDOC_INFO_PROP);
746:       assertEquals(49, Node.DIRECT_EVAL);
747:       assertEquals(56, Node.CHANGE_TIME);
748:       assertEquals(36, Node.QUOTED_PROP);
749:       assertEquals(57, Node.REFLECTED_OBJECT);
750:       assertEquals(32, Node.INCRDECR_PROP);
751:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
752:       assertEquals(37, Node.OPT_ARG_NAME);
753:       assertEquals(30, Node.VAR_ARGS_NAME);
754:       assertEquals(57, Node.LAST_PROP);
755:       assertEquals(1, Node.DECR_FLAG);
756:       assertEquals(2, Node.POST_FLAG);
757:       assertEquals(12, Node.COLUMN_BITS);
758:       assertEquals(47, Node.IS_DISPATCHER);
759:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
760:       assertEquals(40, Node.ORIGINALNAME_PROP);
761:       assertEquals(50, Node.FREE_CALL);
762:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
763:       assertEquals(43, Node.IS_CONSTANT_NAME);
764:       assertEquals(51, Node.STATIC_SOURCE_FILE);
765:       assertEquals(46, Node.IS_NAMESPACE);
766:       assertEquals(54, Node.SLASH_V);
767:       
768:       boolean boolean2 = node0.isWith();
769:       assertFalse(node0.equals((Object)node1));
770:       assertTrue(boolean2 == boolean1);
771:       assertTrue(boolean2 == boolean0);
772:       assertNotSame(node0, node1);
773:       assertFalse(node0.isWith());
774:       assertFalse(node0.isScript());
775:       assertFalse(node0.isAnd());
776:       assertFalse(node0.isGetProp());
777:       assertTrue(node0.isStringKey());
778:       assertFalse(node0.isNot());
779:       assertFalse(node0.isObjectLit());
780:       assertFalse(node0.isThrow());
781:       assertEquals(154, node0.getType());
782:       assertFalse(node0.isLabelName());
783:       assertFalse(node0.isLabel());
784:       assertFalse(node0.isAssignAdd());
785:       assertFalse(node0.isCast());
786:       assertFalse(node0.isContinue());
787:       assertFalse(node0.isFalse());
788:       assertFalse(node0.isCase());
789:       assertFalse(node0.isSwitch());
790:       assertFalse(node0.isInc());
791:       assertEquals((-1), node0.getCharno());
792:       assertFalse(node0.isNumber());
793:       assertFalse(node0.isIn());
794:       assertFalse(node0.isGetterDef());
795:       assertFalse(node0.isFor());
796:       assertFalse(node0.isNE());
797:       assertFalse(node0.hasOneChild());
798:       assertFalse(node0.isIf());
799:       assertEquals((-1), node0.getLineno());
800:       assertFalse(node0.isHook());
801:       assertFalse(node0.isInstanceOf());
802:       assertFalse(node0.isBlock());
803:       assertFalse(node0.isThis());
804:       assertFalse(node0.hasMoreThanOneChild());
805:       assertFalse(node0.isCatch());
806:       assertFalse(node0.isRegExp());
807:       assertFalse(node0.isDefaultCase());
808:       assertFalse(node0.isVoid());
809:       assertFalse(node0.isTry());
810:       assertFalse(node0.isTrue());
811:       assertFalse(node0.isDebugger());
812:       assertFalse(node0.isEmpty());
813:       assertFalse(node0.isSetterDef());
814:       assertFalse(node0.isArrayLit());
815:       assertFalse(node0.isParamList());
816:       assertFalse(node0.isVar());
817:       assertFalse(node0.isFunction());
818:       assertEquals(0, node0.getChildCount());
819:       assertFalse(node0.isDo());
820:       assertFalse(node0.isString());
821:       assertFalse(node0.isWhile());
822:       assertFalse(node0.isNew());
823:       assertFalse(node0.isOr());
824:       assertFalse(node0.isAdd());
825:       assertEquals((-1), node0.getSourcePosition());
826:       assertFalse(node0.isAssign());
827:       assertFalse(node0.hasChildren());
828:       assertFalse(node0.isBreak());
829:       assertFalse(node0.isGetElem());
830:       assertFalse(node0.isNull());
831:       assertFalse(node0.isCall());
832:       assertFalse(node0.isDelProp());
833:       assertFalse(node0.isName());
834:       assertFalse(node0.isReturn());
835:       assertFalse(node0.isExprResult());
836:       assertFalse(node0.isComma());
837:       assertFalse(node0.isDec());
838:       assertFalse(node0.isTypeOf());
839:       assertFalse(boolean2);
840:       assertEquals(48, Node.DIRECTIVES);
841:       assertEquals(8, Node.FLAG_NO_THROWS);
842:       assertEquals(55, Node.INFERRED_FUNCTION);
843:       assertEquals(4095, Node.COLUMN_MASK);
844:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
845:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
846:       assertEquals(39, Node.EMPTY_BLOCK);
847:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
848:       assertEquals(52, Node.LENGTH);
849:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
850:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
851:       assertEquals(15, Node.NO_SIDE_EFFECTS);
852:       assertEquals(53, Node.INPUT_ID);
853:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
854:       assertEquals(29, Node.JSDOC_INFO_PROP);
855:       assertEquals(49, Node.DIRECT_EVAL);
856:       assertEquals(56, Node.CHANGE_TIME);
857:       assertEquals(36, Node.QUOTED_PROP);
858:       assertEquals(57, Node.REFLECTED_OBJECT);
859:       assertEquals(32, Node.INCRDECR_PROP);
860:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
861:       assertEquals(37, Node.OPT_ARG_NAME);
862:       assertEquals(30, Node.VAR_ARGS_NAME);
863:       assertEquals(57, Node.LAST_PROP);
864:       assertEquals(1, Node.DECR_FLAG);
865:       assertEquals(2, Node.POST_FLAG);
866:       assertEquals(12, Node.COLUMN_BITS);
867:       assertEquals(47, Node.IS_DISPATCHER);
868:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
869:       assertEquals(40, Node.ORIGINALNAME_PROP);
870:       assertEquals(50, Node.FREE_CALL);
871:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
872:       assertEquals(43, Node.IS_CONSTANT_NAME);
873:       assertEquals(51, Node.STATIC_SOURCE_FILE);
874:       assertEquals(46, Node.IS_NAMESPACE);
875:       assertEquals(54, Node.SLASH_V);
876:   }
877: }
RegularFileObject[/tmp/EvoSuite_132_1628158390621/com/google/javascript/rhino/Node_132_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:10 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_132_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_132_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_132_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.javascript.rhino.jstype.TemplatizedType",
335:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.JSTypeExpression",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.common.collect.Platform",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.common.collect.Iterators$12",
362:       "com.google.javascript.rhino.jstype.TernaryValue",
363:       "com.google.javascript.rhino.jstype.JSType$2",
364:       "com.google.javascript.rhino.jstype.JSType$TypePair"
365:     );
366:   }
367: }

[MASTER] 10:13:10.689 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(154);
assertNotNull(node0);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertTrue(node0.isStringKey());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertEquals(154, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Node node1 = new Node(57);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertEquals(57, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

node1.putBooleanProp(1827, true);
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertEquals(57, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNull(staticSourceFile0);
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertEquals(57, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertNotSame(node0, node1);
assertNotNull(iterable0);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertTrue(node0.isStringKey());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertEquals(154, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(iterable0.contains(node1));

boolean boolean0 = node0.isEmpty();
assertFalse(node0.equals((Object)node1));
assertNotSame(node0, node1);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertTrue(node0.isStringKey());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertEquals(154, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(boolean0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

boolean boolean1 = node0.isOptionalArg();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertNotSame(node0, node1);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertTrue(node0.isStringKey());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertEquals(154, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(boolean1);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

boolean boolean2 = node0.isWith();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertNotSame(node0, node1);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertTrue(node0.isStringKey());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertEquals(154, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(boolean2);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);


[MASTER] 10:13:12.307 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_143_1628158392219/com/google/javascript/rhino/Node_143_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_143_1628158392219/com/google/javascript/rhino/Node_143_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:12.307 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:12.307 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:12.307 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 756
[MASTER] 10:13:12.308 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_143_1628158392219/com/google/javascript/rhino/Node_143_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:12 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_143_tmp__ESTest extends Node_143_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(116, ":R&#P");
22:       assertNotNull(node0);
23:       assertFalse(node0.isArrayLit());
24:       assertFalse(node0.isDebugger());
25:       assertFalse(node0.isFunction());
26:       assertFalse(node0.isRegExp());
27:       assertFalse(node0.isGetterDef());
28:       assertFalse(node0.isIf());
29:       assertFalse(node0.isTrue());
30:       assertFalse(node0.isNE());
31:       assertFalse(node0.isVoid());
32:       assertFalse(node0.isDelProp());
33:       assertFalse(node0.isCatch());
34:       assertFalse(node0.isString());
35:       assertFalse(node0.isFor());
36:       assertFalse(node0.isCase());
37:       assertFalse(node0.isTry());
38:       assertFalse(node0.isHook());
39:       assertFalse(node0.isThrow());
40:       assertFalse(node0.isFalse());
41:       assertFalse(node0.isBlock());
42:       assertFalse(node0.isIn());
43:       assertTrue(node0.isBreak());
44:       assertFalse(node0.isContinue());
45:       assertFalse(node0.isInc());
46:       assertFalse(node0.isSetterDef());
47:       assertFalse(node0.hasOneChild());
48:       assertFalse(node0.isCast());
49:       assertFalse(node0.isAssign());
50:       assertFalse(node0.isTypeOf());
51:       assertEquals((-1), node0.getSourcePosition());
52:       assertFalse(node0.isExprResult());
53:       assertFalse(node0.isGetElem());
54:       assertFalse(node0.isAnd());
55:       assertEquals((-1), node0.getLineno());
56:       assertFalse(node0.isLabelName());
57:       assertFalse(node0.isInstanceOf());
58:       assertFalse(node0.isReturn());
59:       assertFalse(node0.isComma());
60:       assertFalse(node0.isWith());
61:       assertFalse(node0.hasMoreThanOneChild());
62:       assertFalse(node0.isNot());
63:       assertFalse(node0.isObjectLit());
64:       assertFalse(node0.isDec());
65:       assertFalse(node0.isNumber());
66:       assertFalse(node0.hasChildren());
67:       assertFalse(node0.isWhile());
68:       assertFalse(node0.isThis());
69:       assertFalse(node0.isScript());
70:       assertFalse(node0.isGetProp());
71:       assertFalse(node0.isCall());
72:       assertFalse(node0.isAdd());
73:       assertFalse(node0.isVar());
74:       assertEquals((-1), node0.getCharno());
75:       assertFalse(node0.isNull());
76:       assertFalse(node0.isSwitch());
77:       assertFalse(node0.isParamList());
78:       assertFalse(node0.isName());
79:       assertFalse(node0.isStringKey());
80:       assertFalse(node0.isLabel());
81:       assertEquals(0, node0.getChildCount());
82:       assertFalse(node0.isOr());
83:       assertEquals(116, node0.getType());
84:       assertFalse(node0.isDefaultCase());
85:       assertFalse(node0.isEmpty());
86:       assertFalse(node0.isNew());
87:       assertFalse(node0.isAssignAdd());
88:       assertFalse(node0.isDo());
89:       assertEquals(43, Node.IS_CONSTANT_NAME);
90:       assertEquals(36, Node.QUOTED_PROP);
91:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
92:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
93:       assertEquals(55, Node.INFERRED_FUNCTION);
94:       assertEquals(29, Node.JSDOC_INFO_PROP);
95:       assertEquals(39, Node.EMPTY_BLOCK);
96:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
97:       assertEquals(53, Node.INPUT_ID);
98:       assertEquals(47, Node.IS_DISPATCHER);
99:       assertEquals(2, Node.POST_FLAG);
100:       assertEquals(50, Node.FREE_CALL);
101:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
102:       assertEquals(46, Node.IS_NAMESPACE);
103:       assertEquals(40, Node.ORIGINALNAME_PROP);
104:       assertEquals(15, Node.NO_SIDE_EFFECTS);
105:       assertEquals(57, Node.LAST_PROP);
106:       assertEquals(30, Node.VAR_ARGS_NAME);
107:       assertEquals(49, Node.DIRECT_EVAL);
108:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
109:       assertEquals(54, Node.SLASH_V);
110:       assertEquals(12, Node.COLUMN_BITS);
111:       assertEquals(51, Node.STATIC_SOURCE_FILE);
112:       assertEquals(52, Node.LENGTH);
113:       assertEquals(32, Node.INCRDECR_PROP);
114:       assertEquals(1, Node.DECR_FLAG);
115:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
116:       assertEquals(56, Node.CHANGE_TIME);
117:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(8, Node.FLAG_NO_THROWS);
120:       assertEquals(57, Node.REFLECTED_OBJECT);
121:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
122:       assertEquals(4095, Node.COLUMN_MASK);
123:       assertEquals(48, Node.DIRECTIVES);
124:       assertEquals(37, Node.OPT_ARG_NAME);
125:       
126:       Node[] nodeArray0 = new Node[3];
127:       nodeArray0[0] = node0;
128:       boolean boolean0 = node0.isThis();
129:       assertFalse(node0.isArrayLit());
130:       assertFalse(node0.isDebugger());
131:       assertFalse(node0.isFunction());
132:       assertFalse(node0.isRegExp());
133:       assertFalse(node0.isGetterDef());
134:       assertFalse(node0.isIf());
135:       assertFalse(node0.isTrue());
136:       assertFalse(node0.isNE());
137:       assertFalse(node0.isVoid());
138:       assertFalse(node0.isDelProp());
139:       assertFalse(node0.isCatch());
140:       assertFalse(node0.isString());
141:       assertFalse(node0.isFor());
142:       assertFalse(node0.isCase());
143:       assertFalse(node0.isTry());
144:       assertFalse(node0.isHook());
145:       assertFalse(node0.isThrow());
146:       assertFalse(node0.isFalse());
147:       assertFalse(node0.isBlock());
148:       assertFalse(node0.isIn());
149:       assertTrue(node0.isBreak());
150:       assertFalse(node0.isContinue());
151:       assertFalse(node0.isInc());
152:       assertFalse(node0.isSetterDef());
153:       assertFalse(node0.hasOneChild());
154:       assertFalse(node0.isCast());
155:       assertFalse(node0.isAssign());
156:       assertFalse(node0.isTypeOf());
157:       assertEquals((-1), node0.getSourcePosition());
158:       assertFalse(node0.isExprResult());
159:       assertFalse(node0.isGetElem());
160:       assertFalse(node0.isAnd());
161:       assertEquals((-1), node0.getLineno());
162:       assertFalse(node0.isLabelName());
163:       assertFalse(node0.isInstanceOf());
164:       assertFalse(node0.isReturn());
165:       assertFalse(node0.isComma());
166:       assertFalse(node0.isWith());
167:       assertFalse(node0.hasMoreThanOneChild());
168:       assertFalse(node0.isNot());
169:       assertFalse(node0.isObjectLit());
170:       assertFalse(node0.isDec());
171:       assertFalse(node0.isNumber());
172:       assertFalse(node0.hasChildren());
173:       assertFalse(node0.isWhile());
174:       assertFalse(node0.isThis());
175:       assertFalse(node0.isScript());
176:       assertFalse(node0.isGetProp());
177:       assertFalse(node0.isCall());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isVar());
180:       assertEquals((-1), node0.getCharno());
181:       assertFalse(node0.isNull());
182:       assertFalse(node0.isSwitch());
183:       assertFalse(node0.isParamList());
184:       assertFalse(node0.isName());
185:       assertFalse(node0.isStringKey());
186:       assertFalse(node0.isLabel());
187:       assertEquals(0, node0.getChildCount());
188:       assertFalse(node0.isOr());
189:       assertEquals(116, node0.getType());
190:       assertFalse(node0.isDefaultCase());
191:       assertFalse(node0.isEmpty());
192:       assertFalse(node0.isNew());
193:       assertFalse(node0.isAssignAdd());
194:       assertFalse(node0.isDo());
195:       assertFalse(boolean0);
196:       assertEquals(43, Node.IS_CONSTANT_NAME);
197:       assertEquals(36, Node.QUOTED_PROP);
198:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
199:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
200:       assertEquals(55, Node.INFERRED_FUNCTION);
201:       assertEquals(29, Node.JSDOC_INFO_PROP);
202:       assertEquals(39, Node.EMPTY_BLOCK);
203:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
204:       assertEquals(53, Node.INPUT_ID);
205:       assertEquals(47, Node.IS_DISPATCHER);
206:       assertEquals(2, Node.POST_FLAG);
207:       assertEquals(50, Node.FREE_CALL);
208:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
209:       assertEquals(46, Node.IS_NAMESPACE);
210:       assertEquals(40, Node.ORIGINALNAME_PROP);
211:       assertEquals(15, Node.NO_SIDE_EFFECTS);
212:       assertEquals(57, Node.LAST_PROP);
213:       assertEquals(30, Node.VAR_ARGS_NAME);
214:       assertEquals(49, Node.DIRECT_EVAL);
215:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
216:       assertEquals(54, Node.SLASH_V);
217:       assertEquals(12, Node.COLUMN_BITS);
218:       assertEquals(51, Node.STATIC_SOURCE_FILE);
219:       assertEquals(52, Node.LENGTH);
220:       assertEquals(32, Node.INCRDECR_PROP);
221:       assertEquals(1, Node.DECR_FLAG);
222:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
223:       assertEquals(56, Node.CHANGE_TIME);
224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
225:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
226:       assertEquals(8, Node.FLAG_NO_THROWS);
227:       assertEquals(57, Node.REFLECTED_OBJECT);
228:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
229:       assertEquals(4095, Node.COLUMN_MASK);
230:       assertEquals(48, Node.DIRECTIVES);
231:       assertEquals(37, Node.OPT_ARG_NAME);
232:       
233:       node0.setQuotedString();
234:       assertFalse(node0.isArrayLit());
235:       assertFalse(node0.isDebugger());
236:       assertFalse(node0.isFunction());
237:       assertFalse(node0.isRegExp());
238:       assertFalse(node0.isGetterDef());
239:       assertFalse(node0.isIf());
240:       assertFalse(node0.isTrue());
241:       assertFalse(node0.isNE());
242:       assertFalse(node0.isVoid());
243:       assertFalse(node0.isDelProp());
244:       assertFalse(node0.isCatch());
245:       assertFalse(node0.isString());
246:       assertFalse(node0.isFor());
247:       assertFalse(node0.isCase());
248:       assertFalse(node0.isTry());
249:       assertFalse(node0.isHook());
250:       assertFalse(node0.isThrow());
251:       assertFalse(node0.isFalse());
252:       assertFalse(node0.isBlock());
253:       assertFalse(node0.isIn());
254:       assertTrue(node0.isBreak());
255:       assertFalse(node0.isContinue());
256:       assertFalse(node0.isInc());
257:       assertFalse(node0.isSetterDef());
258:       assertFalse(node0.hasOneChild());
259:       assertFalse(node0.isCast());
260:       assertFalse(node0.isAssign());
261:       assertFalse(node0.isTypeOf());
262:       assertEquals((-1), node0.getSourcePosition());
263:       assertFalse(node0.isExprResult());
264:       assertFalse(node0.isGetElem());
265:       assertFalse(node0.isAnd());
266:       assertEquals((-1), node0.getLineno());
267:       assertFalse(node0.isLabelName());
268:       assertFalse(node0.isInstanceOf());
269:       assertFalse(node0.isReturn());
270:       assertFalse(node0.isComma());
271:       assertFalse(node0.isWith());
272:       assertFalse(node0.hasMoreThanOneChild());
273:       assertFalse(node0.isNot());
274:       assertFalse(node0.isObjectLit());
275:       assertFalse(node0.isDec());
276:       assertFalse(node0.isNumber());
277:       assertFalse(node0.hasChildren());
278:       assertFalse(node0.isWhile());
279:       assertFalse(node0.isThis());
280:       assertFalse(node0.isScript());
281:       assertFalse(node0.isGetProp());
282:       assertFalse(node0.isCall());
283:       assertFalse(node0.isAdd());
284:       assertFalse(node0.isVar());
285:       assertEquals((-1), node0.getCharno());
286:       assertFalse(node0.isNull());
287:       assertFalse(node0.isSwitch());
288:       assertFalse(node0.isParamList());
289:       assertFalse(node0.isName());
290:       assertFalse(node0.isStringKey());
291:       assertFalse(node0.isLabel());
292:       assertEquals(0, node0.getChildCount());
293:       assertFalse(node0.isOr());
294:       assertEquals(116, node0.getType());
295:       assertFalse(node0.isDefaultCase());
296:       assertFalse(node0.isEmpty());
297:       assertFalse(node0.isNew());
298:       assertFalse(node0.isAssignAdd());
299:       assertFalse(node0.isDo());
300:       assertEquals(43, Node.IS_CONSTANT_NAME);
301:       assertEquals(36, Node.QUOTED_PROP);
302:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
303:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
304:       assertEquals(55, Node.INFERRED_FUNCTION);
305:       assertEquals(29, Node.JSDOC_INFO_PROP);
306:       assertEquals(39, Node.EMPTY_BLOCK);
307:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
308:       assertEquals(53, Node.INPUT_ID);
309:       assertEquals(47, Node.IS_DISPATCHER);
310:       assertEquals(2, Node.POST_FLAG);
311:       assertEquals(50, Node.FREE_CALL);
312:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
313:       assertEquals(46, Node.IS_NAMESPACE);
314:       assertEquals(40, Node.ORIGINALNAME_PROP);
315:       assertEquals(15, Node.NO_SIDE_EFFECTS);
316:       assertEquals(57, Node.LAST_PROP);
317:       assertEquals(30, Node.VAR_ARGS_NAME);
318:       assertEquals(49, Node.DIRECT_EVAL);
319:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
320:       assertEquals(54, Node.SLASH_V);
321:       assertEquals(12, Node.COLUMN_BITS);
322:       assertEquals(51, Node.STATIC_SOURCE_FILE);
323:       assertEquals(52, Node.LENGTH);
324:       assertEquals(32, Node.INCRDECR_PROP);
325:       assertEquals(1, Node.DECR_FLAG);
326:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
327:       assertEquals(56, Node.CHANGE_TIME);
328:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
329:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
330:       assertEquals(8, Node.FLAG_NO_THROWS);
331:       assertEquals(57, Node.REFLECTED_OBJECT);
332:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
333:       assertEquals(4095, Node.COLUMN_MASK);
334:       assertEquals(48, Node.DIRECTIVES);
335:       assertEquals(37, Node.OPT_ARG_NAME);
336:       
337:       String string0 = node0.getString();
338:       assertNotNull(string0);
339:       assertFalse(node0.isArrayLit());
340:       assertFalse(node0.isDebugger());
341:       assertFalse(node0.isFunction());
342:       assertFalse(node0.isRegExp());
343:       assertFalse(node0.isGetterDef());
344:       assertFalse(node0.isIf());
345:       assertFalse(node0.isTrue());
346:       assertFalse(node0.isNE());
347:       assertFalse(node0.isVoid());
348:       assertFalse(node0.isDelProp());
349:       assertFalse(node0.isCatch());
350:       assertFalse(node0.isString());
351:       assertFalse(node0.isFor());
352:       assertFalse(node0.isCase());
353:       assertFalse(node0.isTry());
354:       assertFalse(node0.isHook());
355:       assertFalse(node0.isThrow());
356:       assertFalse(node0.isFalse());
357:       assertFalse(node0.isBlock());
358:       assertFalse(node0.isIn());
359:       assertTrue(node0.isBreak());
360:       assertFalse(node0.isContinue());
361:       assertFalse(node0.isInc());
362:       assertFalse(node0.isSetterDef());
363:       assertFalse(node0.hasOneChild());
364:       assertFalse(node0.isCast());
365:       assertFalse(node0.isAssign());
366:       assertFalse(node0.isTypeOf());
367:       assertEquals((-1), node0.getSourcePosition());
368:       assertFalse(node0.isExprResult());
369:       assertFalse(node0.isGetElem());
370:       assertFalse(node0.isAnd());
371:       assertEquals((-1), node0.getLineno());
372:       assertFalse(node0.isLabelName());
373:       assertFalse(node0.isInstanceOf());
374:       assertFalse(node0.isReturn());
375:       assertFalse(node0.isComma());
376:       assertFalse(node0.isWith());
377:       assertFalse(node0.hasMoreThanOneChild());
378:       assertFalse(node0.isNot());
379:       assertFalse(node0.isObjectLit());
380:       assertFalse(node0.isDec());
381:       assertFalse(node0.isNumber());
382:       assertFalse(node0.hasChildren());
383:       assertFalse(node0.isWhile());
384:       assertFalse(node0.isThis());
385:       assertFalse(node0.isScript());
386:       assertFalse(node0.isGetProp());
387:       assertFalse(node0.isCall());
388:       assertFalse(node0.isAdd());
389:       assertFalse(node0.isVar());
390:       assertEquals((-1), node0.getCharno());
391:       assertFalse(node0.isNull());
392:       assertFalse(node0.isSwitch());
393:       assertFalse(node0.isParamList());
394:       assertFalse(node0.isName());
395:       assertFalse(node0.isStringKey());
396:       assertFalse(node0.isLabel());
397:       assertEquals(0, node0.getChildCount());
398:       assertFalse(node0.isOr());
399:       assertEquals(116, node0.getType());
400:       assertFalse(node0.isDefaultCase());
401:       assertFalse(node0.isEmpty());
402:       assertFalse(node0.isNew());
403:       assertFalse(node0.isAssignAdd());
404:       assertFalse(node0.isDo());
405:       assertEquals(":R&#P", string0);
406:       assertEquals(43, Node.IS_CONSTANT_NAME);
407:       assertEquals(36, Node.QUOTED_PROP);
408:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
409:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
410:       assertEquals(55, Node.INFERRED_FUNCTION);
411:       assertEquals(29, Node.JSDOC_INFO_PROP);
412:       assertEquals(39, Node.EMPTY_BLOCK);
413:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
414:       assertEquals(53, Node.INPUT_ID);
415:       assertEquals(47, Node.IS_DISPATCHER);
416:       assertEquals(2, Node.POST_FLAG);
417:       assertEquals(50, Node.FREE_CALL);
418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
419:       assertEquals(46, Node.IS_NAMESPACE);
420:       assertEquals(40, Node.ORIGINALNAME_PROP);
421:       assertEquals(15, Node.NO_SIDE_EFFECTS);
422:       assertEquals(57, Node.LAST_PROP);
423:       assertEquals(30, Node.VAR_ARGS_NAME);
424:       assertEquals(49, Node.DIRECT_EVAL);
425:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
426:       assertEquals(54, Node.SLASH_V);
427:       assertEquals(12, Node.COLUMN_BITS);
428:       assertEquals(51, Node.STATIC_SOURCE_FILE);
429:       assertEquals(52, Node.LENGTH);
430:       assertEquals(32, Node.INCRDECR_PROP);
431:       assertEquals(1, Node.DECR_FLAG);
432:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
433:       assertEquals(56, Node.CHANGE_TIME);
434:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
435:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
436:       assertEquals(8, Node.FLAG_NO_THROWS);
437:       assertEquals(57, Node.REFLECTED_OBJECT);
438:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
439:       assertEquals(4095, Node.COLUMN_MASK);
440:       assertEquals(48, Node.DIRECTIVES);
441:       assertEquals(37, Node.OPT_ARG_NAME);
442:       
443:       node0.putBooleanProp(3847, false);
444:       assertFalse(node0.isArrayLit());
445:       assertFalse(node0.isDebugger());
446:       assertFalse(node0.isFunction());
447:       assertFalse(node0.isRegExp());
448:       assertFalse(node0.isGetterDef());
449:       assertFalse(node0.isIf());
450:       assertFalse(node0.isTrue());
451:       assertFalse(node0.isNE());
452:       assertFalse(node0.isVoid());
453:       assertFalse(node0.isDelProp());
454:       assertFalse(node0.isCatch());
455:       assertFalse(node0.isString());
456:       assertFalse(node0.isFor());
457:       assertFalse(node0.isCase());
458:       assertFalse(node0.isTry());
459:       assertFalse(node0.isHook());
460:       assertFalse(node0.isThrow());
461:       assertFalse(node0.isFalse());
462:       assertFalse(node0.isBlock());
463:       assertFalse(node0.isIn());
464:       assertTrue(node0.isBreak());
465:       assertFalse(node0.isContinue());
466:       assertFalse(node0.isInc());
467:       assertFalse(node0.isSetterDef());
468:       assertFalse(node0.hasOneChild());
469:       assertFalse(node0.isCast());
470:       assertFalse(node0.isAssign());
471:       assertFalse(node0.isTypeOf());
472:       assertEquals((-1), node0.getSourcePosition());
473:       assertFalse(node0.isExprResult());
474:       assertFalse(node0.isGetElem());
475:       assertFalse(node0.isAnd());
476:       assertEquals((-1), node0.getLineno());
477:       assertFalse(node0.isLabelName());
478:       assertFalse(node0.isInstanceOf());
479:       assertFalse(node0.isReturn());
480:       assertFalse(node0.isComma());
481:       assertFalse(node0.isWith());
482:       assertFalse(node0.hasMoreThanOneChild());
483:       assertFalse(node0.isNot());
484:       assertFalse(node0.isObjectLit());
485:       assertFalse(node0.isDec());
486:       assertFalse(node0.isNumber());
487:       assertFalse(node0.hasChildren());
488:       assertFalse(node0.isWhile());
489:       assertFalse(node0.isThis());
490:       assertFalse(node0.isScript());
491:       assertFalse(node0.isGetProp());
492:       assertFalse(node0.isCall());
493:       assertFalse(node0.isAdd());
494:       assertFalse(node0.isVar());
495:       assertEquals((-1), node0.getCharno());
496:       assertFalse(node0.isNull());
497:       assertFalse(node0.isSwitch());
498:       assertFalse(node0.isParamList());
499:       assertFalse(node0.isName());
500:       assertFalse(node0.isStringKey());
501:       assertFalse(node0.isLabel());
502:       assertEquals(0, node0.getChildCount());
503:       assertFalse(node0.isOr());
504:       assertEquals(116, node0.getType());
505:       assertFalse(node0.isDefaultCase());
506:       assertFalse(node0.isEmpty());
507:       assertFalse(node0.isNew());
508:       assertFalse(node0.isAssignAdd());
509:       assertFalse(node0.isDo());
510:       assertEquals(43, Node.IS_CONSTANT_NAME);
511:       assertEquals(36, Node.QUOTED_PROP);
512:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
513:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
514:       assertEquals(55, Node.INFERRED_FUNCTION);
515:       assertEquals(29, Node.JSDOC_INFO_PROP);
516:       assertEquals(39, Node.EMPTY_BLOCK);
517:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
518:       assertEquals(53, Node.INPUT_ID);
519:       assertEquals(47, Node.IS_DISPATCHER);
520:       assertEquals(2, Node.POST_FLAG);
521:       assertEquals(50, Node.FREE_CALL);
522:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
523:       assertEquals(46, Node.IS_NAMESPACE);
524:       assertEquals(40, Node.ORIGINALNAME_PROP);
525:       assertEquals(15, Node.NO_SIDE_EFFECTS);
526:       assertEquals(57, Node.LAST_PROP);
527:       assertEquals(30, Node.VAR_ARGS_NAME);
528:       assertEquals(49, Node.DIRECT_EVAL);
529:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
530:       assertEquals(54, Node.SLASH_V);
531:       assertEquals(12, Node.COLUMN_BITS);
532:       assertEquals(51, Node.STATIC_SOURCE_FILE);
533:       assertEquals(52, Node.LENGTH);
534:       assertEquals(32, Node.INCRDECR_PROP);
535:       assertEquals(1, Node.DECR_FLAG);
536:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
537:       assertEquals(56, Node.CHANGE_TIME);
538:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
539:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
540:       assertEquals(8, Node.FLAG_NO_THROWS);
541:       assertEquals(57, Node.REFLECTED_OBJECT);
542:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
543:       assertEquals(4095, Node.COLUMN_MASK);
544:       assertEquals(48, Node.DIRECTIVES);
545:       assertEquals(37, Node.OPT_ARG_NAME);
546:       
547:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
548:       assertNull(staticSourceFile0);
549:       assertFalse(node0.isArrayLit());
550:       assertFalse(node0.isDebugger());
551:       assertFalse(node0.isFunction());
552:       assertFalse(node0.isRegExp());
553:       assertFalse(node0.isGetterDef());
554:       assertFalse(node0.isIf());
555:       assertFalse(node0.isTrue());
556:       assertFalse(node0.isNE());
557:       assertFalse(node0.isVoid());
558:       assertFalse(node0.isDelProp());
559:       assertFalse(node0.isCatch());
560:       assertFalse(node0.isString());
561:       assertFalse(node0.isFor());
562:       assertFalse(node0.isCase());
563:       assertFalse(node0.isTry());
564:       assertFalse(node0.isHook());
565:       assertFalse(node0.isThrow());
566:       assertFalse(node0.isFalse());
567:       assertFalse(node0.isBlock());
568:       assertFalse(node0.isIn());
569:       assertTrue(node0.isBreak());
570:       assertFalse(node0.isContinue());
571:       assertFalse(node0.isInc());
572:       assertFalse(node0.isSetterDef());
573:       assertFalse(node0.hasOneChild());
574:       assertFalse(node0.isCast());
575:       assertFalse(node0.isAssign());
576:       assertFalse(node0.isTypeOf());
577:       assertEquals((-1), node0.getSourcePosition());
578:       assertFalse(node0.isExprResult());
579:       assertFalse(node0.isGetElem());
580:       assertFalse(node0.isAnd());
581:       assertEquals((-1), node0.getLineno());
582:       assertFalse(node0.isLabelName());
583:       assertFalse(node0.isInstanceOf());
584:       assertFalse(node0.isReturn());
585:       assertFalse(node0.isComma());
586:       assertFalse(node0.isWith());
587:       assertFalse(node0.hasMoreThanOneChild());
588:       assertFalse(node0.isNot());
589:       assertFalse(node0.isObjectLit());
590:       assertFalse(node0.isDec());
591:       assertFalse(node0.isNumber());
592:       assertFalse(node0.hasChildren());
593:       assertFalse(node0.isWhile());
594:       assertFalse(node0.isThis());
595:       assertFalse(node0.isScript());
596:       assertFalse(node0.isGetProp());
597:       assertFalse(node0.isCall());
598:       assertFalse(node0.isAdd());
599:       assertFalse(node0.isVar());
600:       assertEquals((-1), node0.getCharno());
601:       assertFalse(node0.isNull());
602:       assertFalse(node0.isSwitch());
603:       assertFalse(node0.isParamList());
604:       assertFalse(node0.isName());
605:       assertFalse(node0.isStringKey());
606:       assertFalse(node0.isLabel());
607:       assertEquals(0, node0.getChildCount());
608:       assertFalse(node0.isOr());
609:       assertEquals(116, node0.getType());
610:       assertFalse(node0.isDefaultCase());
611:       assertFalse(node0.isEmpty());
612:       assertFalse(node0.isNew());
613:       assertFalse(node0.isAssignAdd());
614:       assertFalse(node0.isDo());
615:       assertEquals(43, Node.IS_CONSTANT_NAME);
616:       assertEquals(36, Node.QUOTED_PROP);
617:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
618:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
619:       assertEquals(55, Node.INFERRED_FUNCTION);
620:       assertEquals(29, Node.JSDOC_INFO_PROP);
621:       assertEquals(39, Node.EMPTY_BLOCK);
622:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
623:       assertEquals(53, Node.INPUT_ID);
624:       assertEquals(47, Node.IS_DISPATCHER);
625:       assertEquals(2, Node.POST_FLAG);
626:       assertEquals(50, Node.FREE_CALL);
627:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
628:       assertEquals(46, Node.IS_NAMESPACE);
629:       assertEquals(40, Node.ORIGINALNAME_PROP);
630:       assertEquals(15, Node.NO_SIDE_EFFECTS);
631:       assertEquals(57, Node.LAST_PROP);
632:       assertEquals(30, Node.VAR_ARGS_NAME);
633:       assertEquals(49, Node.DIRECT_EVAL);
634:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
635:       assertEquals(54, Node.SLASH_V);
636:       assertEquals(12, Node.COLUMN_BITS);
637:       assertEquals(51, Node.STATIC_SOURCE_FILE);
638:       assertEquals(52, Node.LENGTH);
639:       assertEquals(32, Node.INCRDECR_PROP);
640:       assertEquals(1, Node.DECR_FLAG);
641:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
642:       assertEquals(56, Node.CHANGE_TIME);
643:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
644:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
645:       assertEquals(8, Node.FLAG_NO_THROWS);
646:       assertEquals(57, Node.REFLECTED_OBJECT);
647:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
648:       assertEquals(4095, Node.COLUMN_MASK);
649:       assertEquals(48, Node.DIRECTIVES);
650:       assertEquals(37, Node.OPT_ARG_NAME);
651:       
652:       Iterable<Node> iterable0 = node0.children();
653:       assertNotNull(iterable0);
654:       assertFalse(node0.isArrayLit());
655:       assertFalse(node0.isDebugger());
656:       assertFalse(node0.isFunction());
657:       assertFalse(node0.isRegExp());
658:       assertFalse(node0.isGetterDef());
659:       assertFalse(node0.isIf());
660:       assertFalse(node0.isTrue());
661:       assertFalse(node0.isNE());
662:       assertFalse(node0.isVoid());
663:       assertFalse(node0.isDelProp());
664:       assertFalse(node0.isCatch());
665:       assertFalse(node0.isString());
666:       assertFalse(node0.isFor());
667:       assertFalse(node0.isCase());
668:       assertFalse(node0.isTry());
669:       assertFalse(node0.isHook());
670:       assertFalse(node0.isThrow());
671:       assertFalse(node0.isFalse());
672:       assertFalse(node0.isBlock());
673:       assertFalse(node0.isIn());
674:       assertTrue(node0.isBreak());
675:       assertFalse(node0.isContinue());
676:       assertFalse(node0.isInc());
677:       assertFalse(node0.isSetterDef());
678:       assertFalse(node0.hasOneChild());
679:       assertFalse(node0.isCast());
680:       assertFalse(node0.isAssign());
681:       assertFalse(node0.isTypeOf());
682:       assertEquals((-1), node0.getSourcePosition());
683:       assertFalse(node0.isExprResult());
684:       assertFalse(node0.isGetElem());
685:       assertFalse(node0.isAnd());
686:       assertEquals((-1), node0.getLineno());
687:       assertFalse(node0.isLabelName());
688:       assertFalse(node0.isInstanceOf());
689:       assertFalse(node0.isReturn());
690:       assertFalse(node0.isComma());
691:       assertFalse(node0.isWith());
692:       assertFalse(node0.hasMoreThanOneChild());
693:       assertFalse(node0.isNot());
694:       assertFalse(node0.isObjectLit());
695:       assertFalse(node0.isDec());
696:       assertFalse(node0.isNumber());
697:       assertFalse(node0.hasChildren());
698:       assertFalse(node0.isWhile());
699:       assertFalse(node0.isThis());
700:       assertFalse(node0.isScript());
701:       assertFalse(node0.isGetProp());
702:       assertFalse(node0.isCall());
703:       assertFalse(node0.isAdd());
704:       assertFalse(node0.isVar());
705:       assertEquals((-1), node0.getCharno());
706:       assertFalse(node0.isNull());
707:       assertFalse(node0.isSwitch());
708:       assertFalse(node0.isParamList());
709:       assertFalse(node0.isName());
710:       assertFalse(node0.isStringKey());
711:       assertFalse(node0.isLabel());
712:       assertEquals(0, node0.getChildCount());
713:       assertFalse(node0.isOr());
714:       assertEquals(116, node0.getType());
715:       assertFalse(node0.isDefaultCase());
716:       assertFalse(node0.isEmpty());
717:       assertFalse(node0.isNew());
718:       assertFalse(node0.isAssignAdd());
719:       assertFalse(node0.isDo());
720:       assertEquals(43, Node.IS_CONSTANT_NAME);
721:       assertEquals(36, Node.QUOTED_PROP);
722:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
723:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
724:       assertEquals(55, Node.INFERRED_FUNCTION);
725:       assertEquals(29, Node.JSDOC_INFO_PROP);
726:       assertEquals(39, Node.EMPTY_BLOCK);
727:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
728:       assertEquals(53, Node.INPUT_ID);
729:       assertEquals(47, Node.IS_DISPATCHER);
730:       assertEquals(2, Node.POST_FLAG);
731:       assertEquals(50, Node.FREE_CALL);
732:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
733:       assertEquals(46, Node.IS_NAMESPACE);
734:       assertEquals(40, Node.ORIGINALNAME_PROP);
735:       assertEquals(15, Node.NO_SIDE_EFFECTS);
736:       assertEquals(57, Node.LAST_PROP);
737:       assertEquals(30, Node.VAR_ARGS_NAME);
738:       assertEquals(49, Node.DIRECT_EVAL);
739:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
740:       assertEquals(54, Node.SLASH_V);
741:       assertEquals(12, Node.COLUMN_BITS);
742:       assertEquals(51, Node.STATIC_SOURCE_FILE);
743:       assertEquals(52, Node.LENGTH);
744:       assertEquals(32, Node.INCRDECR_PROP);
745:       assertEquals(1, Node.DECR_FLAG);
746:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
747:       assertEquals(56, Node.CHANGE_TIME);
748:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
749:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
750:       assertEquals(8, Node.FLAG_NO_THROWS);
751:       assertEquals(57, Node.REFLECTED_OBJECT);
752:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
753:       assertEquals(4095, Node.COLUMN_MASK);
754:       assertEquals(48, Node.DIRECTIVES);
755:       assertEquals(37, Node.OPT_ARG_NAME);
756:       assertFalse(iterable0.contains(node0));
757:       
758:       boolean boolean1 = node0.isEmpty();
759:       assertTrue(boolean1 == boolean0);
760:       assertFalse(node0.isArrayLit());
761:       assertFalse(node0.isDebugger());
762:       assertFalse(node0.isFunction());
763:       assertFalse(node0.isRegExp());
764:       assertFalse(node0.isGetterDef());
765:       assertFalse(node0.isIf());
766:       assertFalse(node0.isTrue());
767:       assertFalse(node0.isNE());
768:       assertFalse(node0.isVoid());
769:       assertFalse(node0.isDelProp());
770:       assertFalse(node0.isCatch());
771:       assertFalse(node0.isString());
772:       assertFalse(node0.isFor());
773:       assertFalse(node0.isCase());
774:       assertFalse(node0.isTry());
775:       assertFalse(node0.isHook());
776:       assertFalse(node0.isThrow());
777:       assertFalse(node0.isFalse());
778:       assertFalse(node0.isBlock());
779:       assertFalse(node0.isIn());
780:       assertTrue(node0.isBreak());
781:       assertFalse(node0.isContinue());
782:       assertFalse(node0.isInc());
783:       assertFalse(node0.isSetterDef());
784:       assertFalse(node0.hasOneChild());
785:       assertFalse(node0.isCast());
786:       assertFalse(node0.isAssign());
787:       assertFalse(node0.isTypeOf());
788:       assertEquals((-1), node0.getSourcePosition());
789:       assertFalse(node0.isExprResult());
790:       assertFalse(node0.isGetElem());
791:       assertFalse(node0.isAnd());
792:       assertEquals((-1), node0.getLineno());
793:       assertFalse(node0.isLabelName());
794:       assertFalse(node0.isInstanceOf());
795:       assertFalse(node0.isReturn());
796:       assertFalse(node0.isComma());
797:       assertFalse(node0.isWith());
798:       assertFalse(node0.hasMoreThanOneChild());
799:       assertFalse(node0.isNot());
800:       assertFalse(node0.isObjectLit());
801:       assertFalse(node0.isDec());
802:       assertFalse(node0.isNumber());
803:       assertFalse(node0.hasChildren());
804:       assertFalse(node0.isWhile());
805:       assertFalse(node0.isThis());
806:       assertFalse(node0.isScript());
807:       assertFalse(node0.isGetProp());
808:       assertFalse(node0.isCall());
809:       assertFalse(node0.isAdd());
810:       assertFalse(node0.isVar());
811:       assertEquals((-1), node0.getCharno());
812:       assertFalse(node0.isNull());
813:       assertFalse(node0.isSwitch());
814:       assertFalse(node0.isParamList());
815:       assertFalse(node0.isName());
816:       assertFalse(node0.isStringKey());
817:       assertFalse(node0.isLabel());
818:       assertEquals(0, node0.getChildCount());
819:       assertFalse(node0.isOr());
820:       assertEquals(116, node0.getType());
821:       assertFalse(node0.isDefaultCase());
822:       assertFalse(node0.isEmpty());
823:       assertFalse(node0.isNew());
824:       assertFalse(node0.isAssignAdd());
825:       assertFalse(node0.isDo());
826:       assertFalse(boolean1);
827:       assertEquals(43, Node.IS_CONSTANT_NAME);
828:       assertEquals(36, Node.QUOTED_PROP);
829:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
830:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
831:       assertEquals(55, Node.INFERRED_FUNCTION);
832:       assertEquals(29, Node.JSDOC_INFO_PROP);
833:       assertEquals(39, Node.EMPTY_BLOCK);
834:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
835:       assertEquals(53, Node.INPUT_ID);
836:       assertEquals(47, Node.IS_DISPATCHER);
837:       assertEquals(2, Node.POST_FLAG);
838:       assertEquals(50, Node.FREE_CALL);
839:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
840:       assertEquals(46, Node.IS_NAMESPACE);
841:       assertEquals(40, Node.ORIGINALNAME_PROP);
842:       assertEquals(15, Node.NO_SIDE_EFFECTS);
843:       assertEquals(57, Node.LAST_PROP);
844:       assertEquals(30, Node.VAR_ARGS_NAME);
845:       assertEquals(49, Node.DIRECT_EVAL);
846:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
847:       assertEquals(54, Node.SLASH_V);
848:       assertEquals(12, Node.COLUMN_BITS);
849:       assertEquals(51, Node.STATIC_SOURCE_FILE);
850:       assertEquals(52, Node.LENGTH);
851:       assertEquals(32, Node.INCRDECR_PROP);
852:       assertEquals(1, Node.DECR_FLAG);
853:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
854:       assertEquals(56, Node.CHANGE_TIME);
855:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
856:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
857:       assertEquals(8, Node.FLAG_NO_THROWS);
858:       assertEquals(57, Node.REFLECTED_OBJECT);
859:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
860:       assertEquals(4095, Node.COLUMN_MASK);
861:       assertEquals(48, Node.DIRECTIVES);
862:       assertEquals(37, Node.OPT_ARG_NAME);
863:       
864:       boolean boolean2 = node0.isOptionalArg();
865:       assertTrue(boolean2 == boolean1);
866:       assertTrue(boolean2 == boolean0);
867:       assertFalse(node0.isArrayLit());
868:       assertFalse(node0.isDebugger());
869:       assertFalse(node0.isFunction());
870:       assertFalse(node0.isRegExp());
871:       assertFalse(node0.isGetterDef());
872:       assertFalse(node0.isIf());
873:       assertFalse(node0.isTrue());
874:       assertFalse(node0.isNE());
875:       assertFalse(node0.isVoid());
876:       assertFalse(node0.isDelProp());
877:       assertFalse(node0.isCatch());
878:       assertFalse(node0.isString());
879:       assertFalse(node0.isFor());
880:       assertFalse(node0.isCase());
881:       assertFalse(node0.isTry());
882:       assertFalse(node0.isHook());
883:       assertFalse(node0.isThrow());
884:       assertFalse(node0.isFalse());
885:       assertFalse(node0.isBlock());
886:       assertFalse(node0.isIn());
887:       assertTrue(node0.isBreak());
888:       assertFalse(node0.isContinue());
889:       assertFalse(node0.isInc());
890:       assertFalse(node0.isSetterDef());
891:       assertFalse(node0.hasOneChild());
892:       assertFalse(node0.isCast());
893:       assertFalse(node0.isAssign());
894:       assertFalse(node0.isTypeOf());
895:       assertEquals((-1), node0.getSourcePosition());
896:       assertFalse(node0.isExprResult());
897:       assertFalse(node0.isGetElem());
898:       assertFalse(node0.isAnd());
899:       assertEquals((-1), node0.getLineno());
900:       assertFalse(node0.isLabelName());
901:       assertFalse(node0.isInstanceOf());
902:       assertFalse(node0.isReturn());
903:       assertFalse(node0.isComma());
904:       assertFalse(node0.isWith());
905:       assertFalse(node0.hasMoreThanOneChild());
906:       assertFalse(node0.isNot());
907:       assertFalse(node0.isObjectLit());
908:       assertFalse(node0.isDec());
909:       assertFalse(node0.isNumber());
910:       assertFalse(node0.hasChildren());
911:       assertFalse(node0.isWhile());
912:       assertFalse(node0.isThis());
913:       assertFalse(node0.isScript());
914:       assertFalse(node0.isGetProp());
915:       assertFalse(node0.isCall());
916:       assertFalse(node0.isAdd());
917:       assertFalse(node0.isVar());
918:       assertEquals((-1), node0.getCharno());
919:       assertFalse(node0.isNull());
920:       assertFalse(node0.isSwitch());
921:       assertFalse(node0.isParamList());
922:       assertFalse(node0.isName());
923:       assertFalse(node0.isStringKey());
924:       assertFalse(node0.isLabel());
925:       assertEquals(0, node0.getChildCount());
926:       assertFalse(node0.isOr());
927:       assertEquals(116, node0.getType());
928:       assertFalse(node0.isDefaultCase());
929:       assertFalse(node0.isEmpty());
930:       assertFalse(node0.isNew());
931:       assertFalse(node0.isAssignAdd());
932:       assertFalse(node0.isDo());
933:       assertFalse(boolean2);
934:       assertEquals(43, Node.IS_CONSTANT_NAME);
935:       assertEquals(36, Node.QUOTED_PROP);
936:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
937:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
938:       assertEquals(55, Node.INFERRED_FUNCTION);
939:       assertEquals(29, Node.JSDOC_INFO_PROP);
940:       assertEquals(39, Node.EMPTY_BLOCK);
941:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
942:       assertEquals(53, Node.INPUT_ID);
943:       assertEquals(47, Node.IS_DISPATCHER);
944:       assertEquals(2, Node.POST_FLAG);
945:       assertEquals(50, Node.FREE_CALL);
946:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
947:       assertEquals(46, Node.IS_NAMESPACE);
948:       assertEquals(40, Node.ORIGINALNAME_PROP);
949:       assertEquals(15, Node.NO_SIDE_EFFECTS);
950:       assertEquals(57, Node.LAST_PROP);
951:       assertEquals(30, Node.VAR_ARGS_NAME);
952:       assertEquals(49, Node.DIRECT_EVAL);
953:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
954:       assertEquals(54, Node.SLASH_V);
955:       assertEquals(12, Node.COLUMN_BITS);
956:       assertEquals(51, Node.STATIC_SOURCE_FILE);
957:       assertEquals(52, Node.LENGTH);
958:       assertEquals(32, Node.INCRDECR_PROP);
959:       assertEquals(1, Node.DECR_FLAG);
960:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
961:       assertEquals(56, Node.CHANGE_TIME);
962:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
963:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
964:       assertEquals(8, Node.FLAG_NO_THROWS);
965:       assertEquals(57, Node.REFLECTED_OBJECT);
966:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
967:       assertEquals(4095, Node.COLUMN_MASK);
968:       assertEquals(48, Node.DIRECTIVES);
969:       assertEquals(37, Node.OPT_ARG_NAME);
970:       
971:       boolean boolean3 = node0.isWith();
972:       assertTrue(boolean3 == boolean0);
973:       assertTrue(boolean3 == boolean2);
974:       assertTrue(boolean3 == boolean1);
975:       assertFalse(node0.isArrayLit());
976:       assertFalse(node0.isDebugger());
977:       assertFalse(node0.isFunction());
978:       assertFalse(node0.isRegExp());
979:       assertFalse(node0.isGetterDef());
980:       assertFalse(node0.isIf());
981:       assertFalse(node0.isTrue());
982:       assertFalse(node0.isNE());
983:       assertFalse(node0.isVoid());
984:       assertFalse(node0.isDelProp());
985:       assertFalse(node0.isCatch());
986:       assertFalse(node0.isString());
987:       assertFalse(node0.isFor());
988:       assertFalse(node0.isCase());
989:       assertFalse(node0.isTry());
990:       assertFalse(node0.isHook());
991:       assertFalse(node0.isThrow());
992:       assertFalse(node0.isFalse());
993:       assertFalse(node0.isBlock());
994:       assertFalse(node0.isIn());
995:       assertTrue(node0.isBreak());
996:       assertFalse(node0.isContinue());
997:       assertFalse(node0.isInc());
998:       assertFalse(node0.isSetterDef());
999:       assertFalse(node0.hasOneChild());
1000:       assertFalse(node0.isCast());
1001:       assertFalse(node0.isAssign());
1002:       assertFalse(node0.isTypeOf());
1003:       assertEquals((-1), node0.getSourcePosition());
1004:       assertFalse(node0.isExprResult());
1005:       assertFalse(node0.isGetElem());
1006:       assertFalse(node0.isAnd());
1007:       assertEquals((-1), node0.getLineno());
1008:       assertFalse(node0.isLabelName());
1009:       assertFalse(node0.isInstanceOf());
1010:       assertFalse(node0.isReturn());
1011:       assertFalse(node0.isComma());
1012:       assertFalse(node0.isWith());
1013:       assertFalse(node0.hasMoreThanOneChild());
1014:       assertFalse(node0.isNot());
1015:       assertFalse(node0.isObjectLit());
1016:       assertFalse(node0.isDec());
1017:       assertFalse(node0.isNumber());
1018:       assertFalse(node0.hasChildren());
1019:       assertFalse(node0.isWhile());
1020:       assertFalse(node0.isThis());
1021:       assertFalse(node0.isScript());
1022:       assertFalse(node0.isGetProp());
1023:       assertFalse(node0.isCall());
1024:       assertFalse(node0.isAdd());
1025:       assertFalse(node0.isVar());
1026:       assertEquals((-1), node0.getCharno());
1027:       assertFalse(node0.isNull());
1028:       assertFalse(node0.isSwitch());
1029:       assertFalse(node0.isParamList());
1030:       assertFalse(node0.isName());
1031:       assertFalse(node0.isStringKey());
1032:       assertFalse(node0.isLabel());
1033:       assertEquals(0, node0.getChildCount());
1034:       assertFalse(node0.isOr());
1035:       assertEquals(116, node0.getType());
1036:       assertFalse(node0.isDefaultCase());
1037:       assertFalse(node0.isEmpty());
1038:       assertFalse(node0.isNew());
1039:       assertFalse(node0.isAssignAdd());
1040:       assertFalse(node0.isDo());
1041:       assertFalse(boolean3);
1042:       assertEquals(43, Node.IS_CONSTANT_NAME);
1043:       assertEquals(36, Node.QUOTED_PROP);
1044:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1045:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1046:       assertEquals(55, Node.INFERRED_FUNCTION);
1047:       assertEquals(29, Node.JSDOC_INFO_PROP);
1048:       assertEquals(39, Node.EMPTY_BLOCK);
1049:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1050:       assertEquals(53, Node.INPUT_ID);
1051:       assertEquals(47, Node.IS_DISPATCHER);
1052:       assertEquals(2, Node.POST_FLAG);
1053:       assertEquals(50, Node.FREE_CALL);
1054:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1055:       assertEquals(46, Node.IS_NAMESPACE);
1056:       assertEquals(40, Node.ORIGINALNAME_PROP);
1057:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1058:       assertEquals(57, Node.LAST_PROP);
1059:       assertEquals(30, Node.VAR_ARGS_NAME);
1060:       assertEquals(49, Node.DIRECT_EVAL);
1061:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1062:       assertEquals(54, Node.SLASH_V);
1063:       assertEquals(12, Node.COLUMN_BITS);
1064:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1065:       assertEquals(52, Node.LENGTH);
1066:       assertEquals(32, Node.INCRDECR_PROP);
1067:       assertEquals(1, Node.DECR_FLAG);
1068:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1069:       assertEquals(56, Node.CHANGE_TIME);
1070:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1071:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1072:       assertEquals(8, Node.FLAG_NO_THROWS);
1073:       assertEquals(57, Node.REFLECTED_OBJECT);
1074:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1075:       assertEquals(4095, Node.COLUMN_MASK);
1076:       assertEquals(48, Node.DIRECTIVES);
1077:       assertEquals(37, Node.OPT_ARG_NAME);
1078:       
1079:       Node node1 = node0.useSourceInfoIfMissingFrom(node0);
1080:       assertSame(node0, node1);
1081:       assertSame(node1, node0);
1082:       assertNotNull(node1);
1083:       assertFalse(node0.isArrayLit());
1084:       assertFalse(node0.isDebugger());
1085:       assertFalse(node0.isFunction());
1086:       assertFalse(node0.isRegExp());
1087:       assertFalse(node0.isGetterDef());
1088:       assertFalse(node0.isIf());
1089:       assertFalse(node0.isTrue());
1090:       assertFalse(node0.isNE());
1091:       assertFalse(node0.isVoid());
1092:       assertFalse(node0.isDelProp());
1093:       assertFalse(node0.isCatch());
1094:       assertFalse(node0.isString());
1095:       assertFalse(node0.isFor());
1096:       assertFalse(node0.isCase());
1097:       assertFalse(node0.isTry());
1098:       assertFalse(node0.isHook());
1099:       assertFalse(node0.isThrow());
1100:       assertFalse(node0.isFalse());
1101:       assertFalse(node0.isBlock());
1102:       assertFalse(node0.isIn());
1103:       assertTrue(node0.isBreak());
1104:       assertFalse(node0.isContinue());
1105:       assertFalse(node0.isInc());
1106:       assertFalse(node0.isSetterDef());
1107:       assertFalse(node0.hasOneChild());
1108:       assertFalse(node0.isCast());
1109:       assertFalse(node0.isAssign());
1110:       assertFalse(node0.isTypeOf());
1111:       assertEquals((-1), node0.getSourcePosition());
1112:       assertFalse(node0.isExprResult());
1113:       assertFalse(node0.isGetElem());
1114:       assertFalse(node0.isAnd());
1115:       assertEquals((-1), node0.getLineno());
1116:       assertFalse(node0.isLabelName());
1117:       assertFalse(node0.isInstanceOf());
1118:       assertFalse(node0.isReturn());
1119:       assertFalse(node0.isComma());
1120:       assertFalse(node0.isWith());
1121:       assertFalse(node0.hasMoreThanOneChild());
1122:       assertFalse(node0.isNot());
1123:       assertFalse(node0.isObjectLit());
1124:       assertFalse(node0.isDec());
1125:       assertFalse(node0.isNumber());
1126:       assertFalse(node0.hasChildren());
1127:       assertFalse(node0.isWhile());
1128:       assertFalse(node0.isThis());
1129:       assertFalse(node0.isScript());
1130:       assertFalse(node0.isGetProp());
1131:       assertFalse(node0.isCall());
1132:       assertFalse(node0.isAdd());
1133:       assertFalse(node0.isVar());
1134:       assertEquals((-1), node0.getCharno());
1135:       assertFalse(node0.isNull());
1136:       assertFalse(node0.isSwitch());
1137:       assertFalse(node0.isParamList());
1138:       assertFalse(node0.isName());
1139:       assertFalse(node0.isStringKey());
1140:       assertFalse(node0.isLabel());
1141:       assertEquals(0, node0.getChildCount());
1142:       assertFalse(node0.isOr());
1143:       assertEquals(116, node0.getType());
1144:       assertFalse(node0.isDefaultCase());
1145:       assertFalse(node0.isEmpty());
1146:       assertFalse(node0.isNew());
1147:       assertFalse(node0.isAssignAdd());
1148:       assertFalse(node0.isDo());
1149:       assertFalse(node1.isNE());
1150:       assertFalse(node1.isDelProp());
1151:       assertFalse(node1.isIf());
1152:       assertFalse(node1.isCase());
1153:       assertFalse(node1.isEmpty());
1154:       assertFalse(node1.isString());
1155:       assertFalse(node1.isGetterDef());
1156:       assertFalse(node1.isIn());
1157:       assertFalse(node1.isVoid());
1158:       assertFalse(node1.isTrue());
1159:       assertFalse(node1.isTry());
1160:       assertFalse(node1.isCatch());
1161:       assertFalse(node1.isFor());
1162:       assertFalse(node1.isHook());
1163:       assertFalse(node1.isRegExp());
1164:       assertFalse(node1.isParamList());
1165:       assertFalse(node1.isNull());
1166:       assertFalse(node1.isThis());
1167:       assertFalse(node1.isName());
1168:       assertFalse(node1.isStringKey());
1169:       assertEquals(116, node1.getType());
1170:       assertEquals((-1), node1.getCharno());
1171:       assertFalse(node1.isNew());
1172:       assertFalse(node1.isAdd());
1173:       assertFalse(node1.isDo());
1174:       assertFalse(node1.isSwitch());
1175:       assertFalse(node1.isDefaultCase());
1176:       assertFalse(node1.isArrayLit());
1177:       assertFalse(node1.isVar());
1178:       assertEquals(0, node1.getChildCount());
1179:       assertFalse(node1.isLabel());
1180:       assertFalse(node1.isReturn());
1181:       assertEquals((-1), node1.getLineno());
1182:       assertFalse(node1.isAssignAdd());
1183:       assertFalse(node1.isLabelName());
1184:       assertEquals((-1), node1.getSourcePosition());
1185:       assertFalse(node1.isOr());
1186:       assertFalse(node1.isNumber());
1187:       assertFalse(node1.isExprResult());
1188:       assertFalse(node1.isScript());
1189:       assertFalse(node1.isBlock());
1190:       assertFalse(node1.isWhile());
1191:       assertFalse(node1.hasOneChild());
1192:       assertFalse(node1.isCall());
1193:       assertFalse(node1.isGetElem());
1194:       assertFalse(node1.hasChildren());
1195:       assertFalse(node1.isDec());
1196:       assertFalse(node1.isInstanceOf());
1197:       assertFalse(node1.isAssign());
1198:       assertFalse(node1.isTypeOf());
1199:       assertFalse(node1.isWith());
1200:       assertFalse(node1.hasMoreThanOneChild());
1201:       assertFalse(node1.isComma());
1202:       assertTrue(node1.isBreak());
1203:       assertFalse(node1.isGetProp());
1204:       assertFalse(node1.isSetterDef());
1205:       assertFalse(node1.isAnd());
1206:       assertFalse(node1.isObjectLit());
1207:       assertFalse(node1.isNot());
1208:       assertFalse(node1.isDebugger());
1209:       assertFalse(node1.isInc());
1210:       assertFalse(node1.isContinue());
1211:       assertFalse(node1.isThrow());
1212:       assertFalse(node1.isCast());
1213:       assertFalse(node1.isFalse());
1214:       assertFalse(node1.isFunction());
1215:       assertEquals(43, Node.IS_CONSTANT_NAME);
1216:       assertEquals(36, Node.QUOTED_PROP);
1217:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1218:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1219:       assertEquals(55, Node.INFERRED_FUNCTION);
1220:       assertEquals(29, Node.JSDOC_INFO_PROP);
1221:       assertEquals(39, Node.EMPTY_BLOCK);
1222:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1223:       assertEquals(53, Node.INPUT_ID);
1224:       assertEquals(47, Node.IS_DISPATCHER);
1225:       assertEquals(2, Node.POST_FLAG);
1226:       assertEquals(50, Node.FREE_CALL);
1227:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1228:       assertEquals(46, Node.IS_NAMESPACE);
1229:       assertEquals(40, Node.ORIGINALNAME_PROP);
1230:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1231:       assertEquals(57, Node.LAST_PROP);
1232:       assertEquals(30, Node.VAR_ARGS_NAME);
1233:       assertEquals(49, Node.DIRECT_EVAL);
1234:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1235:       assertEquals(54, Node.SLASH_V);
1236:       assertEquals(12, Node.COLUMN_BITS);
1237:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1238:       assertEquals(52, Node.LENGTH);
1239:       assertEquals(32, Node.INCRDECR_PROP);
1240:       assertEquals(1, Node.DECR_FLAG);
1241:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1242:       assertEquals(56, Node.CHANGE_TIME);
1243:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1244:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1245:       assertEquals(8, Node.FLAG_NO_THROWS);
1246:       assertEquals(57, Node.REFLECTED_OBJECT);
1247:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1248:       assertEquals(4095, Node.COLUMN_MASK);
1249:       assertEquals(48, Node.DIRECTIVES);
1250:       assertEquals(37, Node.OPT_ARG_NAME);
1251:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1252:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1253:       assertEquals(29, Node.JSDOC_INFO_PROP);
1254:       assertEquals(53, Node.INPUT_ID);
1255:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1256:       assertEquals(2, Node.POST_FLAG);
1257:       assertEquals(12, Node.COLUMN_BITS);
1258:       assertEquals(47, Node.IS_DISPATCHER);
1259:       assertEquals(1, Node.DECR_FLAG);
1260:       assertEquals(32, Node.INCRDECR_PROP);
1261:       assertEquals(54, Node.SLASH_V);
1262:       assertEquals(43, Node.IS_CONSTANT_NAME);
1263:       assertEquals(46, Node.IS_NAMESPACE);
1264:       assertEquals(50, Node.FREE_CALL);
1265:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1266:       assertEquals(40, Node.ORIGINALNAME_PROP);
1267:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1268:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1269:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1270:       assertEquals(57, Node.LAST_PROP);
1271:       assertEquals(30, Node.VAR_ARGS_NAME);
1272:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1273:       assertEquals(55, Node.INFERRED_FUNCTION);
1274:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1275:       assertEquals(4095, Node.COLUMN_MASK);
1276:       assertEquals(49, Node.DIRECT_EVAL);
1277:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1278:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1279:       assertEquals(37, Node.OPT_ARG_NAME);
1280:       assertEquals(8, Node.FLAG_NO_THROWS);
1281:       assertEquals(39, Node.EMPTY_BLOCK);
1282:       assertEquals(48, Node.DIRECTIVES);
1283:       assertEquals(56, Node.CHANGE_TIME);
1284:       assertEquals(52, Node.LENGTH);
1285:       assertEquals(36, Node.QUOTED_PROP);
1286:       assertEquals(57, Node.REFLECTED_OBJECT);
1287:   }
1288: }
RegularFileObject[/tmp/EvoSuite_143_1628158392219/com/google/javascript/rhino/Node_143_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:12 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_143_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_143_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_143_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.javascript.rhino.jstype.TemplatizedType",
335:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.JSTypeExpression",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.common.collect.Platform",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.common.collect.Iterators$12",
362:       "com.google.javascript.rhino.jstype.TernaryValue",
363:       "com.google.javascript.rhino.jstype.JSType$2",
364:       "com.google.javascript.rhino.jstype.JSType$TypePair"
365:     );
366:   }
367: }

[MASTER] 10:13:12.370 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(116, ":R&#P");
assertNotNull(node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertTrue(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(116, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

Node[] nodeArray0 = new Node[3];
nodeArray0[0] = node0;
boolean boolean0 = node0.isThis();
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertTrue(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(116, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(boolean0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

node0.setQuotedString();
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertTrue(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(116, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

String string0 = node0.getString();
assertNotNull(string0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertTrue(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(116, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(":R&#P", string0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

node0.putBooleanProp(3847, false);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertTrue(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(116, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertNull(staticSourceFile0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertTrue(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(116, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertTrue(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(116, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(iterable0.contains(node0));

boolean boolean1 = node0.isEmpty();
assertTrue(boolean1 == boolean0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertTrue(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(116, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(boolean1);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

boolean boolean2 = node0.isOptionalArg();
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertTrue(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(116, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(boolean2);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

boolean boolean3 = node0.isWith();
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertTrue(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(116, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(boolean3);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

Node node1 = node0.useSourceInfoIfMissingFrom(node0);
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isIn());
assertTrue(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertEquals(116, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isThis());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertEquals(116, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isComma());
assertTrue(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);


[MASTER] 10:13:14.302 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_157_1628158394265/com/google/javascript/rhino/Node_157_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_157_1628158394265/com/google/javascript/rhino/Node_157_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:14.302 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:14.302 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:14.303 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 230
[MASTER] 10:13:14.303 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_157_1628158394265/com/google/javascript/rhino/Node_157_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:14 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_157_tmp__ESTest extends Node_157_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertNotNull(node0);
23:       assertFalse(node0.hasOneChild());
24:       assertFalse(node0.isCast());
25:       assertFalse(node0.isAssign());
26:       assertFalse(node0.isDec());
27:       assertFalse(node0.isTypeOf());
28:       assertFalse(node0.isWith());
29:       assertFalse(node0.isGetElem());
30:       assertFalse(node0.isExprResult());
31:       assertFalse(node0.isLabelName());
32:       assertEquals((-1), node0.getLineno());
33:       assertFalse(node0.isAssignAdd());
34:       assertFalse(node0.isContinue());
35:       assertFalse(node0.isOr());
36:       assertFalse(node0.isLabel());
37:       assertFalse(node0.isAdd());
38:       assertFalse(node0.isDo());
39:       assertFalse(node0.isNew());
40:       assertFalse(node0.isThrow());
41:       assertFalse(node0.isFalse());
42:       assertFalse(node0.isNull());
43:       assertFalse(node0.isName());
44:       assertFalse(node0.isCall());
45:       assertFalse(node0.isBreak());
46:       assertFalse(node0.isAnd());
47:       assertFalse(node0.isObjectLit());
48:       assertFalse(node0.isNot());
49:       assertFalse(node0.isComma());
50:       assertFalse(node0.isReturn());
51:       assertEquals((-1), node0.getSourcePosition());
52:       assertFalse(node0.hasChildren());
53:       assertFalse(node0.isString());
54:       assertFalse(node0.isWhile());
55:       assertFalse(node0.isGetProp());
56:       assertTrue(node0.isNumber());
57:       assertFalse(node0.isTrue());
58:       assertFalse(node0.isFunction());
59:       assertFalse(node0.isFor());
60:       assertFalse(node0.isDebugger());
61:       assertFalse(node0.isIf());
62:       assertFalse(node0.isDelProp());
63:       assertFalse(node0.isRegExp());
64:       assertFalse(node0.isNE());
65:       assertFalse(node0.isVoid());
66:       assertFalse(node0.isArrayLit());
67:       assertEquals(0, node0.getChildCount());
68:       assertFalse(node0.isIn());
69:       assertFalse(node0.isDefaultCase());
70:       assertFalse(node0.isInc());
71:       assertFalse(node0.isEmpty());
72:       assertFalse(node0.isSetterDef());
73:       assertFalse(node0.isHook());
74:       assertFalse(node0.isVar());
75:       assertFalse(node0.isStringKey());
76:       assertFalse(node0.isBlock());
77:       assertEquals((-1), node0.getCharno());
78:       assertFalse(node0.isSwitch());
79:       assertFalse(node0.isParamList());
80:       assertFalse(node0.isInstanceOf());
81:       assertFalse(node0.hasMoreThanOneChild());
82:       assertFalse(node0.isCatch());
83:       assertEquals(39, node0.getType());
84:       assertFalse(node0.isThis());
85:       assertFalse(node0.isGetterDef());
86:       assertFalse(node0.isScript());
87:       assertFalse(node0.isTry());
88:       assertFalse(node0.isCase());
89:       assertEquals(36, Node.QUOTED_PROP);
90:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
91:       assertEquals(43, Node.IS_CONSTANT_NAME);
92:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
93:       assertEquals(8, Node.FLAG_NO_THROWS);
94:       assertEquals(39, Node.EMPTY_BLOCK);
95:       assertEquals(53, Node.INPUT_ID);
96:       assertEquals(29, Node.JSDOC_INFO_PROP);
97:       assertEquals(55, Node.INFERRED_FUNCTION);
98:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
99:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
100:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
101:       assertEquals(48, Node.DIRECTIVES);
102:       assertEquals(56, Node.CHANGE_TIME);
103:       assertEquals(37, Node.OPT_ARG_NAME);
104:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
105:       assertEquals(4095, Node.COLUMN_MASK);
106:       assertEquals(57, Node.LAST_PROP);
107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
108:       assertEquals(49, Node.DIRECT_EVAL);
109:       assertEquals(30, Node.VAR_ARGS_NAME);
110:       assertEquals(1, Node.DECR_FLAG);
111:       assertEquals(54, Node.SLASH_V);
112:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
113:       assertEquals(12, Node.COLUMN_BITS);
114:       assertEquals(32, Node.INCRDECR_PROP);
115:       assertEquals(46, Node.IS_NAMESPACE);
116:       assertEquals(52, Node.LENGTH);
117:       assertEquals(57, Node.REFLECTED_OBJECT);
118:       assertEquals(51, Node.STATIC_SOURCE_FILE);
119:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
120:       assertEquals(47, Node.IS_DISPATCHER);
121:       assertEquals(2, Node.POST_FLAG);
122:       assertEquals(50, Node.FREE_CALL);
123:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
124:       assertEquals(40, Node.ORIGINALNAME_PROP);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertNotNull(iterable0);
128:       assertFalse(node0.hasOneChild());
129:       assertFalse(node0.isCast());
130:       assertFalse(node0.isAssign());
131:       assertFalse(node0.isDec());
132:       assertFalse(node0.isTypeOf());
133:       assertFalse(node0.isWith());
134:       assertFalse(node0.isGetElem());
135:       assertFalse(node0.isExprResult());
136:       assertFalse(node0.isLabelName());
137:       assertEquals((-1), node0.getLineno());
138:       assertFalse(node0.isAssignAdd());
139:       assertFalse(node0.isContinue());
140:       assertFalse(node0.isOr());
141:       assertFalse(node0.isLabel());
142:       assertFalse(node0.isAdd());
143:       assertFalse(node0.isDo());
144:       assertFalse(node0.isNew());
145:       assertFalse(node0.isThrow());
146:       assertFalse(node0.isFalse());
147:       assertFalse(node0.isNull());
148:       assertFalse(node0.isName());
149:       assertFalse(node0.isCall());
150:       assertFalse(node0.isBreak());
151:       assertFalse(node0.isAnd());
152:       assertFalse(node0.isObjectLit());
153:       assertFalse(node0.isNot());
154:       assertFalse(node0.isComma());
155:       assertFalse(node0.isReturn());
156:       assertEquals((-1), node0.getSourcePosition());
157:       assertFalse(node0.hasChildren());
158:       assertFalse(node0.isString());
159:       assertFalse(node0.isWhile());
160:       assertFalse(node0.isGetProp());
161:       assertTrue(node0.isNumber());
162:       assertFalse(node0.isTrue());
163:       assertFalse(node0.isFunction());
164:       assertFalse(node0.isFor());
165:       assertFalse(node0.isDebugger());
166:       assertFalse(node0.isIf());
167:       assertFalse(node0.isDelProp());
168:       assertFalse(node0.isRegExp());
169:       assertFalse(node0.isNE());
170:       assertFalse(node0.isVoid());
171:       assertFalse(node0.isArrayLit());
172:       assertEquals(0, node0.getChildCount());
173:       assertFalse(node0.isIn());
174:       assertFalse(node0.isDefaultCase());
175:       assertFalse(node0.isInc());
176:       assertFalse(node0.isEmpty());
177:       assertFalse(node0.isSetterDef());
178:       assertFalse(node0.isHook());
179:       assertFalse(node0.isVar());
180:       assertFalse(node0.isStringKey());
181:       assertFalse(node0.isBlock());
182:       assertEquals((-1), node0.getCharno());
183:       assertFalse(node0.isSwitch());
184:       assertFalse(node0.isParamList());
185:       assertFalse(node0.isInstanceOf());
186:       assertFalse(node0.hasMoreThanOneChild());
187:       assertFalse(node0.isCatch());
188:       assertEquals(39, node0.getType());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.isGetterDef());
191:       assertFalse(node0.isScript());
192:       assertFalse(node0.isTry());
193:       assertFalse(node0.isCase());
194:       assertEquals(36, Node.QUOTED_PROP);
195:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
196:       assertEquals(43, Node.IS_CONSTANT_NAME);
197:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
198:       assertEquals(8, Node.FLAG_NO_THROWS);
199:       assertEquals(39, Node.EMPTY_BLOCK);
200:       assertEquals(53, Node.INPUT_ID);
201:       assertEquals(29, Node.JSDOC_INFO_PROP);
202:       assertEquals(55, Node.INFERRED_FUNCTION);
203:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
204:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
205:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
206:       assertEquals(48, Node.DIRECTIVES);
207:       assertEquals(56, Node.CHANGE_TIME);
208:       assertEquals(37, Node.OPT_ARG_NAME);
209:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
210:       assertEquals(4095, Node.COLUMN_MASK);
211:       assertEquals(57, Node.LAST_PROP);
212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
213:       assertEquals(49, Node.DIRECT_EVAL);
214:       assertEquals(30, Node.VAR_ARGS_NAME);
215:       assertEquals(1, Node.DECR_FLAG);
216:       assertEquals(54, Node.SLASH_V);
217:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
218:       assertEquals(12, Node.COLUMN_BITS);
219:       assertEquals(32, Node.INCRDECR_PROP);
220:       assertEquals(46, Node.IS_NAMESPACE);
221:       assertEquals(52, Node.LENGTH);
222:       assertEquals(57, Node.REFLECTED_OBJECT);
223:       assertEquals(51, Node.STATIC_SOURCE_FILE);
224:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
225:       assertEquals(47, Node.IS_DISPATCHER);
226:       assertEquals(2, Node.POST_FLAG);
227:       assertEquals(50, Node.FREE_CALL);
228:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
229:       assertEquals(40, Node.ORIGINALNAME_PROP);
230:       assertFalse(iterable0.contains(node0));
231:       
232:       Node node1 = Node.newString(364, "&.18J+E;1h0Q^<8xU?f");
233:       assertFalse(node1.equals((Object)node0));
234:       assertNotNull(node1);
235:       assertFalse(node1.isName());
236:       assertFalse(node1.isStringKey());
237:       assertFalse(node1.isVar());
238:       assertFalse(node1.isNull());
239:       assertFalse(node1.isAdd());
240:       assertFalse(node1.isBlock());
241:       assertFalse(node1.isSetterDef());
242:       assertFalse(node1.isNew());
243:       assertFalse(node1.isDo());
244:       assertFalse(node1.isDefaultCase());
245:       assertFalse(node1.isContinue());
246:       assertFalse(node1.isFunction());
247:       assertEquals(0, node1.getChildCount());
248:       assertFalse(node1.isDebugger());
249:       assertFalse(node1.isParamList());
250:       assertFalse(node1.isArrayLit());
251:       assertFalse(node1.isLabelName());
252:       assertFalse(node1.isFor());
253:       assertFalse(node1.isIf());
254:       assertFalse(node1.isNE());
255:       assertFalse(node1.isNumber());
256:       assertFalse(node1.isGetterDef());
257:       assertFalse(node1.isTry());
258:       assertFalse(node1.isIn());
259:       assertFalse(node1.isScript());
260:       assertFalse(node1.isCase());
261:       assertFalse(node1.hasOneChild());
262:       assertFalse(node1.isWith());
263:       assertFalse(node1.isCatch());
264:       assertFalse(node1.isRegExp());
265:       assertFalse(node1.hasMoreThanOneChild());
266:       assertFalse(node1.isInstanceOf());
267:       assertEquals((-1), node1.getLineno());
268:       assertFalse(node1.isFalse());
269:       assertFalse(node1.isThrow());
270:       assertFalse(node1.isHook());
271:       assertFalse(node1.isThis());
272:       assertFalse(node1.isComma());
273:       assertFalse(node1.isInc());
274:       assertEquals(364, node1.getType());
275:       assertFalse(node1.isGetProp());
276:       assertFalse(node1.isNot());
277:       assertFalse(node1.isAnd());
278:       assertFalse(node1.isString());
279:       assertFalse(node1.isObjectLit());
280:       assertEquals((-1), node1.getCharno());
281:       assertFalse(node1.isSwitch());
282:       assertFalse(node1.isCast());
283:       assertFalse(node1.isEmpty());
284:       assertFalse(node1.isAssign());
285:       assertFalse(node1.isGetElem());
286:       assertFalse(node1.isTypeOf());
287:       assertFalse(node1.hasChildren());
288:       assertFalse(node1.isDec());
289:       assertEquals((-1), node1.getSourcePosition());
290:       assertFalse(node1.isOr());
291:       assertFalse(node1.isLabel());
292:       assertFalse(node1.isAssignAdd());
293:       assertFalse(node1.isReturn());
294:       assertFalse(node1.isWhile());
295:       assertFalse(node1.isTrue());
296:       assertFalse(node1.isCall());
297:       assertFalse(node1.isExprResult());
298:       assertFalse(node1.isVoid());
299:       assertFalse(node1.isDelProp());
300:       assertFalse(node1.isBreak());
301:       assertEquals(52, Node.LENGTH);
302:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
303:       assertEquals(57, Node.REFLECTED_OBJECT);
304:       assertEquals(57, Node.LAST_PROP);
305:       assertEquals(54, Node.SLASH_V);
306:       assertEquals(30, Node.VAR_ARGS_NAME);
307:       assertEquals(49, Node.DIRECT_EVAL);
308:       assertEquals(40, Node.ORIGINALNAME_PROP);
309:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
310:       assertEquals(37, Node.OPT_ARG_NAME);
311:       assertEquals(2, Node.POST_FLAG);
312:       assertEquals(48, Node.DIRECTIVES);
313:       assertEquals(56, Node.CHANGE_TIME);
314:       assertEquals(47, Node.IS_DISPATCHER);
315:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
316:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
317:       assertEquals(15, Node.NO_SIDE_EFFECTS);
318:       assertEquals(8, Node.FLAG_NO_THROWS);
319:       assertEquals(39, Node.EMPTY_BLOCK);
320:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
321:       assertEquals(55, Node.INFERRED_FUNCTION);
322:       assertEquals(29, Node.JSDOC_INFO_PROP);
323:       assertEquals(53, Node.INPUT_ID);
324:       assertEquals(43, Node.IS_CONSTANT_NAME);
325:       assertEquals(36, Node.QUOTED_PROP);
326:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
327:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
328:       assertEquals(4095, Node.COLUMN_MASK);
329:       assertEquals(32, Node.INCRDECR_PROP);
330:       assertEquals(51, Node.STATIC_SOURCE_FILE);
331:       assertEquals(12, Node.COLUMN_BITS);
332:       assertEquals(46, Node.IS_NAMESPACE);
333:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
334:       assertEquals(1, Node.DECR_FLAG);
335:       assertEquals(50, Node.FREE_CALL);
336:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
337:       
338:       boolean boolean0 = node0.isThis();
339:       assertFalse(node0.equals((Object)node1));
340:       assertFalse(node0.hasOneChild());
341:       assertFalse(node0.isCast());
342:       assertFalse(node0.isAssign());
343:       assertFalse(node0.isDec());
344:       assertFalse(node0.isTypeOf());
345:       assertFalse(node0.isWith());
346:       assertFalse(node0.isGetElem());
347:       assertFalse(node0.isExprResult());
348:       assertFalse(node0.isLabelName());
349:       assertEquals((-1), node0.getLineno());
350:       assertFalse(node0.isAssignAdd());
351:       assertFalse(node0.isContinue());
352:       assertFalse(node0.isOr());
353:       assertFalse(node0.isLabel());
354:       assertFalse(node0.isAdd());
355:       assertFalse(node0.isDo());
356:       assertFalse(node0.isNew());
357:       assertFalse(node0.isThrow());
358:       assertFalse(node0.isFalse());
359:       assertFalse(node0.isNull());
360:       assertFalse(node0.isName());
361:       assertFalse(node0.isCall());
362:       assertFalse(node0.isBreak());
363:       assertFalse(node0.isAnd());
364:       assertFalse(node0.isObjectLit());
365:       assertFalse(node0.isNot());
366:       assertFalse(node0.isComma());
367:       assertFalse(node0.isReturn());
368:       assertEquals((-1), node0.getSourcePosition());
369:       assertFalse(node0.hasChildren());
370:       assertFalse(node0.isString());
371:       assertFalse(node0.isWhile());
372:       assertFalse(node0.isGetProp());
373:       assertTrue(node0.isNumber());
374:       assertFalse(node0.isTrue());
375:       assertFalse(node0.isFunction());
376:       assertFalse(node0.isFor());
377:       assertFalse(node0.isDebugger());
378:       assertFalse(node0.isIf());
379:       assertFalse(node0.isDelProp());
380:       assertFalse(node0.isRegExp());
381:       assertFalse(node0.isNE());
382:       assertFalse(node0.isVoid());
383:       assertFalse(node0.isArrayLit());
384:       assertEquals(0, node0.getChildCount());
385:       assertFalse(node0.isIn());
386:       assertFalse(node0.isDefaultCase());
387:       assertFalse(node0.isInc());
388:       assertFalse(node0.isEmpty());
389:       assertFalse(node0.isSetterDef());
390:       assertFalse(node0.isHook());
391:       assertFalse(node0.isVar());
392:       assertFalse(node0.isStringKey());
393:       assertFalse(node0.isBlock());
394:       assertEquals((-1), node0.getCharno());
395:       assertFalse(node0.isSwitch());
396:       assertFalse(node0.isParamList());
397:       assertFalse(node0.isInstanceOf());
398:       assertFalse(node0.hasMoreThanOneChild());
399:       assertFalse(node0.isCatch());
400:       assertEquals(39, node0.getType());
401:       assertFalse(node0.isThis());
402:       assertFalse(node0.isGetterDef());
403:       assertFalse(node0.isScript());
404:       assertFalse(node0.isTry());
405:       assertFalse(node0.isCase());
406:       assertFalse(boolean0);
407:       assertEquals(36, Node.QUOTED_PROP);
408:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
409:       assertEquals(43, Node.IS_CONSTANT_NAME);
410:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
411:       assertEquals(8, Node.FLAG_NO_THROWS);
412:       assertEquals(39, Node.EMPTY_BLOCK);
413:       assertEquals(53, Node.INPUT_ID);
414:       assertEquals(29, Node.JSDOC_INFO_PROP);
415:       assertEquals(55, Node.INFERRED_FUNCTION);
416:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
417:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
418:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
419:       assertEquals(48, Node.DIRECTIVES);
420:       assertEquals(56, Node.CHANGE_TIME);
421:       assertEquals(37, Node.OPT_ARG_NAME);
422:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
423:       assertEquals(4095, Node.COLUMN_MASK);
424:       assertEquals(57, Node.LAST_PROP);
425:       assertEquals(15, Node.NO_SIDE_EFFECTS);
426:       assertEquals(49, Node.DIRECT_EVAL);
427:       assertEquals(30, Node.VAR_ARGS_NAME);
428:       assertEquals(1, Node.DECR_FLAG);
429:       assertEquals(54, Node.SLASH_V);
430:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
431:       assertEquals(12, Node.COLUMN_BITS);
432:       assertEquals(32, Node.INCRDECR_PROP);
433:       assertEquals(46, Node.IS_NAMESPACE);
434:       assertEquals(52, Node.LENGTH);
435:       assertEquals(57, Node.REFLECTED_OBJECT);
436:       assertEquals(51, Node.STATIC_SOURCE_FILE);
437:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
438:       assertEquals(47, Node.IS_DISPATCHER);
439:       assertEquals(2, Node.POST_FLAG);
440:       assertEquals(50, Node.FREE_CALL);
441:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
442:       assertEquals(40, Node.ORIGINALNAME_PROP);
443:       
444:       node1.setQuotedString();
445:       assertFalse(node1.equals((Object)node0));
446:       assertFalse(node1.isName());
447:       assertFalse(node1.isStringKey());
448:       assertFalse(node1.isVar());
449:       assertFalse(node1.isNull());
450:       assertFalse(node1.isAdd());
451:       assertFalse(node1.isBlock());
452:       assertFalse(node1.isSetterDef());
453:       assertFalse(node1.isNew());
454:       assertFalse(node1.isDo());
455:       assertFalse(node1.isDefaultCase());
456:       assertFalse(node1.isContinue());
457:       assertFalse(node1.isFunction());
458:       assertEquals(0, node1.getChildCount());
459:       assertFalse(node1.isDebugger());
460:       assertFalse(node1.isParamList());
461:       assertFalse(node1.isArrayLit());
462:       assertFalse(node1.isLabelName());
463:       assertFalse(node1.isFor());
464:       assertFalse(node1.isIf());
465:       assertFalse(node1.isNE());
466:       assertFalse(node1.isNumber());
467:       assertFalse(node1.isGetterDef());
468:       assertFalse(node1.isTry());
469:       assertFalse(node1.isIn());
470:       assertFalse(node1.isScript());
471:       assertFalse(node1.isCase());
472:       assertFalse(node1.hasOneChild());
473:       assertFalse(node1.isWith());
474:       assertFalse(node1.isCatch());
475:       assertFalse(node1.isRegExp());
476:       assertFalse(node1.hasMoreThanOneChild());
477:       assertFalse(node1.isInstanceOf());
478:       assertEquals((-1), node1.getLineno());
479:       assertFalse(node1.isFalse());
480:       assertFalse(node1.isThrow());
481:       assertFalse(node1.isHook());
482:       assertFalse(node1.isThis());
483:       assertFalse(node1.isComma());
484:       assertFalse(node1.isInc());
485:       assertEquals(364, node1.getType());
486:       assertFalse(node1.isGetProp());
487:       assertFalse(node1.isNot());
488:       assertFalse(node1.isAnd());
489:       assertFalse(node1.isString());
490:       assertFalse(node1.isObjectLit());
491:       assertEquals((-1), node1.getCharno());
492:       assertFalse(node1.isSwitch());
493:       assertFalse(node1.isCast());
494:       assertFalse(node1.isEmpty());
495:       assertFalse(node1.isAssign());
496:       assertFalse(node1.isGetElem());
497:       assertFalse(node1.isTypeOf());
498:       assertFalse(node1.hasChildren());
499:       assertFalse(node1.isDec());
500:       assertEquals((-1), node1.getSourcePosition());
501:       assertFalse(node1.isOr());
502:       assertFalse(node1.isLabel());
503:       assertFalse(node1.isAssignAdd());
504:       assertFalse(node1.isReturn());
505:       assertFalse(node1.isWhile());
506:       assertFalse(node1.isTrue());
507:       assertFalse(node1.isCall());
508:       assertFalse(node1.isExprResult());
509:       assertFalse(node1.isVoid());
510:       assertFalse(node1.isDelProp());
511:       assertFalse(node1.isBreak());
512:       assertEquals(52, Node.LENGTH);
513:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
514:       assertEquals(57, Node.REFLECTED_OBJECT);
515:       assertEquals(57, Node.LAST_PROP);
516:       assertEquals(54, Node.SLASH_V);
517:       assertEquals(30, Node.VAR_ARGS_NAME);
518:       assertEquals(49, Node.DIRECT_EVAL);
519:       assertEquals(40, Node.ORIGINALNAME_PROP);
520:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
521:       assertEquals(37, Node.OPT_ARG_NAME);
522:       assertEquals(2, Node.POST_FLAG);
523:       assertEquals(48, Node.DIRECTIVES);
524:       assertEquals(56, Node.CHANGE_TIME);
525:       assertEquals(47, Node.IS_DISPATCHER);
526:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
527:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
528:       assertEquals(15, Node.NO_SIDE_EFFECTS);
529:       assertEquals(8, Node.FLAG_NO_THROWS);
530:       assertEquals(39, Node.EMPTY_BLOCK);
531:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
532:       assertEquals(55, Node.INFERRED_FUNCTION);
533:       assertEquals(29, Node.JSDOC_INFO_PROP);
534:       assertEquals(53, Node.INPUT_ID);
535:       assertEquals(43, Node.IS_CONSTANT_NAME);
536:       assertEquals(36, Node.QUOTED_PROP);
537:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
538:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
539:       assertEquals(4095, Node.COLUMN_MASK);
540:       assertEquals(32, Node.INCRDECR_PROP);
541:       assertEquals(51, Node.STATIC_SOURCE_FILE);
542:       assertEquals(12, Node.COLUMN_BITS);
543:       assertEquals(46, Node.IS_NAMESPACE);
544:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
545:       assertEquals(1, Node.DECR_FLAG);
546:       assertEquals(50, Node.FREE_CALL);
547:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
548:       
549:       Node[] nodeArray0 = new Node[5];
550:       nodeArray0[0] = node0;
551:       nodeArray0[2] = node0;
552:       nodeArray0[3] = node1;
553:       nodeArray0[4] = node0;
554:       Node node2 = new Node(40);
555:       assertFalse(node2.equals((Object)node0));
556:       assertFalse(node2.equals((Object)node1));
557:       assertNotNull(node2);
558:       assertFalse(node2.isHook());
559:       assertFalse(node2.isFalse());
560:       assertFalse(node2.isSwitch());
561:       assertEquals((-1), node2.getCharno());
562:       assertFalse(node2.isBreak());
563:       assertFalse(node2.isObjectLit());
564:       assertFalse(node2.isCase());
565:       assertFalse(node2.isGetProp());
566:       assertFalse(node2.isWith());
567:       assertFalse(node2.isInstanceOf());
568:       assertFalse(node2.isScript());
569:       assertFalse(node2.isThis());
570:       assertFalse(node2.isComma());
571:       assertFalse(node2.isFor());
572:       assertFalse(node2.isArrayLit());
573:       assertFalse(node2.hasOneChild());
574:       assertFalse(node2.isEmpty());
575:       assertFalse(node2.isGetElem());
576:       assertFalse(node2.isExprResult());
577:       assertFalse(node2.isNumber());
578:       assertFalse(node2.isVoid());
579:       assertFalse(node2.isDelProp());
580:       assertFalse(node2.isGetterDef());
581:       assertFalse(node2.isLabelName());
582:       assertFalse(node2.isTrue());
583:       assertEquals(0, node2.getChildCount());
584:       assertFalse(node2.isOr());
585:       assertFalse(node2.isDefaultCase());
586:       assertFalse(node2.isDo());
587:       assertFalse(node2.isLabel());
588:       assertFalse(node2.isAssignAdd());
589:       assertFalse(node2.isVar());
590:       assertFalse(node2.isAdd());
591:       assertFalse(node2.isNew());
592:       assertFalse(node2.isCall());
593:       assertFalse(node2.isNull());
594:       assertFalse(node2.isName());
595:       assertFalse(node2.isParamList());
596:       assertFalse(node2.isStringKey());
597:       assertFalse(node2.hasMoreThanOneChild());
598:       assertEquals((-1), node2.getLineno());
599:       assertFalse(node2.isCatch());
600:       assertFalse(node2.isTypeOf());
601:       assertFalse(node2.isRegExp());
602:       assertFalse(node2.hasChildren());
603:       assertFalse(node2.isDec());
604:       assertFalse(node2.isAssign());
605:       assertTrue(node2.isString());
606:       assertFalse(node2.isBlock());
607:       assertFalse(node2.isTry());
608:       assertFalse(node2.isReturn());
609:       assertFalse(node2.isWhile());
610:       assertFalse(node2.isCast());
611:       assertEquals((-1), node2.getSourcePosition());
612:       assertFalse(node2.isIf());
613:       assertFalse(node2.isDebugger());
614:       assertFalse(node2.isNot());
615:       assertFalse(node2.isAnd());
616:       assertFalse(node2.isNE());
617:       assertFalse(node2.isIn());
618:       assertFalse(node2.isContinue());
619:       assertFalse(node2.isInc());
620:       assertFalse(node2.isSetterDef());
621:       assertFalse(node2.isFunction());
622:       assertEquals(40, node2.getType());
623:       assertFalse(node2.isThrow());
624:       assertEquals(15, Node.NO_SIDE_EFFECTS);
625:       assertEquals(57, Node.LAST_PROP);
626:       assertEquals(54, Node.SLASH_V);
627:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
628:       assertEquals(52, Node.LENGTH);
629:       assertEquals(30, Node.VAR_ARGS_NAME);
630:       assertEquals(12, Node.COLUMN_BITS);
631:       assertEquals(1, Node.DECR_FLAG);
632:       assertEquals(32, Node.INCRDECR_PROP);
633:       assertEquals(47, Node.IS_DISPATCHER);
634:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
635:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
636:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
637:       assertEquals(2, Node.POST_FLAG);
638:       assertEquals(50, Node.FREE_CALL);
639:       assertEquals(51, Node.STATIC_SOURCE_FILE);
640:       assertEquals(40, Node.ORIGINALNAME_PROP);
641:       assertEquals(46, Node.IS_NAMESPACE);
642:       assertEquals(43, Node.IS_CONSTANT_NAME);
643:       assertEquals(36, Node.QUOTED_PROP);
644:       assertEquals(55, Node.INFERRED_FUNCTION);
645:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
646:       assertEquals(53, Node.INPUT_ID);
647:       assertEquals(56, Node.CHANGE_TIME);
648:       assertEquals(39, Node.EMPTY_BLOCK);
649:       assertEquals(29, Node.JSDOC_INFO_PROP);
650:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
651:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
652:       assertEquals(8, Node.FLAG_NO_THROWS);
653:       assertEquals(57, Node.REFLECTED_OBJECT);
654:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
655:       assertEquals(4095, Node.COLUMN_MASK);
656:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
657:       assertEquals(37, Node.OPT_ARG_NAME);
658:       assertEquals(48, Node.DIRECTIVES);
659:       assertEquals(49, Node.DIRECT_EVAL);
660:       
661:       // Undeclared exception!
662:       try { 
663:         node2.getString();
664:         fail("Expecting exception: IllegalStateException");
665:       
666:       } catch(IllegalStateException e) {
667:          //
668:          // String node not created with Node.newString
669:          //
670:          verifyException("com.google.javascript.rhino.Node", e);
671:       }
672:   }
673: }
RegularFileObject[/tmp/EvoSuite_157_1628158394265/com/google/javascript/rhino/Node_157_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:14 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_157_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_157_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_157_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.javascript.rhino.jstype.TemplatizedType",
335:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.JSTypeExpression",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.common.collect.Platform",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.common.collect.Iterators$12",
362:       "com.google.javascript.rhino.jstype.TernaryValue",
363:       "com.google.javascript.rhino.jstype.JSType$2",
364:       "com.google.javascript.rhino.jstype.JSType$TypePair"
365:     );
366:   }
367: }

[MASTER] 10:13:14.312 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertNotNull(node0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(iterable0.contains(node0));

Node node1 = Node.newString(364, "&.18J+E;1h0Q^<8xU?f");
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertEquals(364, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean0 = node0.isThis();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(boolean0);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);

node1.setQuotedString();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertEquals(364, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node[] nodeArray0 = new Node[5];
nodeArray0[0] = node0;
nodeArray0[2] = node0;
nodeArray0[3] = node1;
nodeArray0[4] = node0;
Node node2 = new Node(40);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBreak());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isNumber());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isTrue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCatch());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isCast());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isIf());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertEquals(40, node2.getType());
assertFalse(node2.isThrow());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);

node2.getString();

[MASTER] 10:13:17.289 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_173_1628158396997/com/google/javascript/rhino/Node_173_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_173_1628158396997/com/google/javascript/rhino/Node_173_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:17.289 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:17.289 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:17.289 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1095
[MASTER] 10:13:17.290 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_173_1628158396997/com/google/javascript/rhino/Node_173_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:16 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_173_tmp__ESTest extends Node_173_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
24:       assertFalse(boolean0);
25:       
26:       Node node0 = Node.newString("");
27:       assertNotNull(node0);
28:       assertFalse(node0.isNE());
29:       assertFalse(node0.isIf());
30:       assertFalse(node0.isDelProp());
31:       assertFalse(node0.isCase());
32:       assertFalse(node0.isEmpty());
33:       assertFalse(node0.isIn());
34:       assertFalse(node0.isGetterDef());
35:       assertFalse(node0.isTrue());
36:       assertFalse(node0.isVoid());
37:       assertFalse(node0.isTry());
38:       assertFalse(node0.isCatch());
39:       assertFalse(node0.isFor());
40:       assertFalse(node0.isHook());
41:       assertFalse(node0.isComma());
42:       assertFalse(node0.isRegExp());
43:       assertFalse(node0.isGetProp());
44:       assertFalse(node0.isSetterDef());
45:       assertFalse(node0.isAnd());
46:       assertFalse(node0.isNot());
47:       assertFalse(node0.isObjectLit());
48:       assertFalse(node0.isDebugger());
49:       assertFalse(node0.isInc());
50:       assertFalse(node0.isThrow());
51:       assertFalse(node0.isFalse());
52:       assertFalse(node0.isContinue());
53:       assertFalse(node0.isCast());
54:       assertEquals(40, node0.getType());
55:       assertFalse(node0.isFunction());
56:       assertFalse(node0.isLabel());
57:       assertFalse(node0.isReturn());
58:       assertFalse(node0.isAssignAdd());
59:       assertFalse(node0.isLabelName());
60:       assertEquals((-1), node0.getLineno());
61:       assertFalse(node0.isNumber());
62:       assertEquals((-1), node0.getSourcePosition());
63:       assertFalse(node0.isOr());
64:       assertFalse(node0.isExprResult());
65:       assertFalse(node0.isBlock());
66:       assertFalse(node0.isScript());
67:       assertFalse(node0.hasOneChild());
68:       assertFalse(node0.isWhile());
69:       assertTrue(node0.isString());
70:       assertFalse(node0.isGetElem());
71:       assertFalse(node0.isCall());
72:       assertFalse(node0.isDec());
73:       assertFalse(node0.hasChildren());
74:       assertFalse(node0.isInstanceOf());
75:       assertFalse(node0.isAssign());
76:       assertFalse(node0.isWith());
77:       assertFalse(node0.hasMoreThanOneChild());
78:       assertFalse(node0.isTypeOf());
79:       assertFalse(node0.isParamList());
80:       assertFalse(node0.isThis());
81:       assertFalse(node0.isNull());
82:       assertFalse(node0.isBreak());
83:       assertFalse(node0.isName());
84:       assertFalse(node0.isStringKey());
85:       assertEquals((-1), node0.getCharno());
86:       assertFalse(node0.isNew());
87:       assertFalse(node0.isAdd());
88:       assertFalse(node0.isDefaultCase());
89:       assertFalse(node0.isArrayLit());
90:       assertFalse(node0.isSwitch());
91:       assertFalse(node0.isDo());
92:       assertFalse(node0.isVar());
93:       assertEquals(0, node0.getChildCount());
94:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
95:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
96:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
97:       assertEquals(29, Node.JSDOC_INFO_PROP);
98:       assertEquals(53, Node.INPUT_ID);
99:       assertEquals(2, Node.POST_FLAG);
100:       assertEquals(12, Node.COLUMN_BITS);
101:       assertEquals(47, Node.IS_DISPATCHER);
102:       assertEquals(1, Node.DECR_FLAG);
103:       assertEquals(30, Node.VAR_ARGS_NAME);
104:       assertEquals(32, Node.INCRDECR_PROP);
105:       assertEquals(54, Node.SLASH_V);
106:       assertEquals(46, Node.IS_NAMESPACE);
107:       assertEquals(43, Node.IS_CONSTANT_NAME);
108:       assertEquals(51, Node.STATIC_SOURCE_FILE);
109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
110:       assertEquals(50, Node.FREE_CALL);
111:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
112:       assertEquals(40, Node.ORIGINALNAME_PROP);
113:       assertEquals(39, Node.EMPTY_BLOCK);
114:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
115:       assertEquals(57, Node.LAST_PROP);
116:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
117:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
118:       assertEquals(55, Node.INFERRED_FUNCTION);
119:       assertEquals(49, Node.DIRECT_EVAL);
120:       assertEquals(4095, Node.COLUMN_MASK);
121:       assertEquals(15, Node.NO_SIDE_EFFECTS);
122:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
123:       assertEquals(48, Node.DIRECTIVES);
124:       assertEquals(37, Node.OPT_ARG_NAME);
125:       assertEquals(52, Node.LENGTH);
126:       assertEquals(8, Node.FLAG_NO_THROWS);
127:       assertEquals(56, Node.CHANGE_TIME);
128:       assertEquals(36, Node.QUOTED_PROP);
129:       assertEquals(57, Node.REFLECTED_OBJECT);
130:       
131:       int int0 = node0.getSourcePosition();
132:       assertFalse(node0.isNE());
133:       assertFalse(node0.isIf());
134:       assertFalse(node0.isDelProp());
135:       assertFalse(node0.isCase());
136:       assertFalse(node0.isEmpty());
137:       assertFalse(node0.isIn());
138:       assertFalse(node0.isGetterDef());
139:       assertFalse(node0.isTrue());
140:       assertFalse(node0.isVoid());
141:       assertFalse(node0.isTry());
142:       assertFalse(node0.isCatch());
143:       assertFalse(node0.isFor());
144:       assertFalse(node0.isHook());
145:       assertFalse(node0.isComma());
146:       assertFalse(node0.isRegExp());
147:       assertFalse(node0.isGetProp());
148:       assertFalse(node0.isSetterDef());
149:       assertFalse(node0.isAnd());
150:       assertFalse(node0.isNot());
151:       assertFalse(node0.isObjectLit());
152:       assertFalse(node0.isDebugger());
153:       assertFalse(node0.isInc());
154:       assertFalse(node0.isThrow());
155:       assertFalse(node0.isFalse());
156:       assertFalse(node0.isContinue());
157:       assertFalse(node0.isCast());
158:       assertEquals(40, node0.getType());
159:       assertFalse(node0.isFunction());
160:       assertFalse(node0.isLabel());
161:       assertFalse(node0.isReturn());
162:       assertFalse(node0.isAssignAdd());
163:       assertFalse(node0.isLabelName());
164:       assertEquals((-1), node0.getLineno());
165:       assertFalse(node0.isNumber());
166:       assertEquals((-1), node0.getSourcePosition());
167:       assertFalse(node0.isOr());
168:       assertFalse(node0.isExprResult());
169:       assertFalse(node0.isBlock());
170:       assertFalse(node0.isScript());
171:       assertFalse(node0.hasOneChild());
172:       assertFalse(node0.isWhile());
173:       assertTrue(node0.isString());
174:       assertFalse(node0.isGetElem());
175:       assertFalse(node0.isCall());
176:       assertFalse(node0.isDec());
177:       assertFalse(node0.hasChildren());
178:       assertFalse(node0.isInstanceOf());
179:       assertFalse(node0.isAssign());
180:       assertFalse(node0.isWith());
181:       assertFalse(node0.hasMoreThanOneChild());
182:       assertFalse(node0.isTypeOf());
183:       assertFalse(node0.isParamList());
184:       assertFalse(node0.isThis());
185:       assertFalse(node0.isNull());
186:       assertFalse(node0.isBreak());
187:       assertFalse(node0.isName());
188:       assertFalse(node0.isStringKey());
189:       assertEquals((-1), node0.getCharno());
190:       assertFalse(node0.isNew());
191:       assertFalse(node0.isAdd());
192:       assertFalse(node0.isDefaultCase());
193:       assertFalse(node0.isArrayLit());
194:       assertFalse(node0.isSwitch());
195:       assertFalse(node0.isDo());
196:       assertFalse(node0.isVar());
197:       assertEquals(0, node0.getChildCount());
198:       assertEquals((-1), int0);
199:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
200:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
202:       assertEquals(29, Node.JSDOC_INFO_PROP);
203:       assertEquals(53, Node.INPUT_ID);
204:       assertEquals(2, Node.POST_FLAG);
205:       assertEquals(12, Node.COLUMN_BITS);
206:       assertEquals(47, Node.IS_DISPATCHER);
207:       assertEquals(1, Node.DECR_FLAG);
208:       assertEquals(30, Node.VAR_ARGS_NAME);
209:       assertEquals(32, Node.INCRDECR_PROP);
210:       assertEquals(54, Node.SLASH_V);
211:       assertEquals(46, Node.IS_NAMESPACE);
212:       assertEquals(43, Node.IS_CONSTANT_NAME);
213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
214:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
215:       assertEquals(50, Node.FREE_CALL);
216:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
217:       assertEquals(40, Node.ORIGINALNAME_PROP);
218:       assertEquals(39, Node.EMPTY_BLOCK);
219:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
220:       assertEquals(57, Node.LAST_PROP);
221:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
222:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
223:       assertEquals(55, Node.INFERRED_FUNCTION);
224:       assertEquals(49, Node.DIRECT_EVAL);
225:       assertEquals(4095, Node.COLUMN_MASK);
226:       assertEquals(15, Node.NO_SIDE_EFFECTS);
227:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
228:       assertEquals(48, Node.DIRECTIVES);
229:       assertEquals(37, Node.OPT_ARG_NAME);
230:       assertEquals(52, Node.LENGTH);
231:       assertEquals(8, Node.FLAG_NO_THROWS);
232:       assertEquals(56, Node.CHANGE_TIME);
233:       assertEquals(36, Node.QUOTED_PROP);
234:       assertEquals(57, Node.REFLECTED_OBJECT);
235:       
236:       Node node1 = Node.newString(1255, "Use SerializedForm");
237:       assertFalse(node1.equals((Object)node0));
238:       assertNotSame(node1, node0);
239:       assertNotNull(node1);
240:       assertFalse(node1.isEmpty());
241:       assertFalse(node1.isFor());
242:       assertFalse(node1.isGetterDef());
243:       assertFalse(node1.isDefaultCase());
244:       assertFalse(node1.isTry());
245:       assertFalse(node1.isString());
246:       assertEquals(0, node1.getChildCount());
247:       assertFalse(node1.isDebugger());
248:       assertEquals((-1), node1.getCharno());
249:       assertFalse(node1.isParamList());
250:       assertFalse(node1.isFunction());
251:       assertFalse(node1.isSwitch());
252:       assertFalse(node1.isArrayLit());
253:       assertFalse(node1.isFalse());
254:       assertFalse(node1.isThrow());
255:       assertFalse(node1.isStringKey());
256:       assertFalse(node1.isHook());
257:       assertFalse(node1.isInc());
258:       assertFalse(node1.isSetterDef());
259:       assertFalse(node1.isThis());
260:       assertFalse(node1.isBlock());
261:       assertFalse(node1.isCase());
262:       assertFalse(node1.hasMoreThanOneChild());
263:       assertFalse(node1.isCatch());
264:       assertFalse(node1.isInstanceOf());
265:       assertFalse(node1.isIn());
266:       assertFalse(node1.isWith());
267:       assertFalse(node1.isRegExp());
268:       assertFalse(node1.isNE());
269:       assertEquals((-1), node1.getLineno());
270:       assertFalse(node1.isIf());
271:       assertFalse(node1.isGetElem());
272:       assertFalse(node1.isCast());
273:       assertFalse(node1.hasChildren());
274:       assertFalse(node1.isNumber());
275:       assertFalse(node1.isTypeOf());
276:       assertEquals((-1), node1.getSourcePosition());
277:       assertFalse(node1.isDec());
278:       assertFalse(node1.isAssign());
279:       assertFalse(node1.isScript());
280:       assertFalse(node1.isAssignAdd());
281:       assertFalse(node1.hasOneChild());
282:       assertFalse(node1.isAnd());
283:       assertFalse(node1.isObjectLit());
284:       assertFalse(node1.isContinue());
285:       assertFalse(node1.isLabel());
286:       assertFalse(node1.isNot());
287:       assertFalse(node1.isLabelName());
288:       assertFalse(node1.isCall());
289:       assertFalse(node1.isVar());
290:       assertFalse(node1.isComma());
291:       assertFalse(node1.isGetProp());
292:       assertFalse(node1.isAdd());
293:       assertFalse(node1.isWhile());
294:       assertFalse(node1.isNew());
295:       assertFalse(node1.isDo());
296:       assertFalse(node1.isReturn());
297:       assertEquals(1255, node1.getType());
298:       assertFalse(node1.isOr());
299:       assertFalse(node1.isVoid());
300:       assertFalse(node1.isTrue());
301:       assertFalse(node1.isExprResult());
302:       assertFalse(node1.isNull());
303:       assertFalse(node1.isDelProp());
304:       assertFalse(node1.isBreak());
305:       assertFalse(node1.isName());
306:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
307:       assertEquals(36, Node.QUOTED_PROP);
308:       assertEquals(43, Node.IS_CONSTANT_NAME);
309:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
310:       assertEquals(4095, Node.COLUMN_MASK);
311:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
312:       assertEquals(8, Node.FLAG_NO_THROWS);
313:       assertEquals(39, Node.EMPTY_BLOCK);
314:       assertEquals(37, Node.OPT_ARG_NAME);
315:       assertEquals(2, Node.POST_FLAG);
316:       assertEquals(48, Node.DIRECTIVES);
317:       assertEquals(56, Node.CHANGE_TIME);
318:       assertEquals(47, Node.IS_DISPATCHER);
319:       assertEquals(55, Node.INFERRED_FUNCTION);
320:       assertEquals(52, Node.LENGTH);
321:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
322:       assertEquals(15, Node.NO_SIDE_EFFECTS);
323:       assertEquals(53, Node.INPUT_ID);
324:       assertEquals(29, Node.JSDOC_INFO_PROP);
325:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
326:       assertEquals(30, Node.VAR_ARGS_NAME);
327:       assertEquals(57, Node.LAST_PROP);
328:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
329:       assertEquals(57, Node.REFLECTED_OBJECT);
330:       assertEquals(54, Node.SLASH_V);
331:       assertEquals(49, Node.DIRECT_EVAL);
332:       assertEquals(40, Node.ORIGINALNAME_PROP);
333:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
334:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
335:       assertEquals(12, Node.COLUMN_BITS);
336:       assertEquals(46, Node.IS_NAMESPACE);
337:       assertEquals(51, Node.STATIC_SOURCE_FILE);
338:       assertEquals(1, Node.DECR_FLAG);
339:       assertEquals(32, Node.INCRDECR_PROP);
340:       assertEquals(50, Node.FREE_CALL);
341:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
342:       
343:       boolean boolean1 = node0.isThis();
344:       assertFalse(node0.equals((Object)node1));
345:       assertTrue(boolean1 == boolean0);
346:       assertNotSame(node0, node1);
347:       assertFalse(node0.isNE());
348:       assertFalse(node0.isIf());
349:       assertFalse(node0.isDelProp());
350:       assertFalse(node0.isCase());
351:       assertFalse(node0.isEmpty());
352:       assertFalse(node0.isIn());
353:       assertFalse(node0.isGetterDef());
354:       assertFalse(node0.isTrue());
355:       assertFalse(node0.isVoid());
356:       assertFalse(node0.isTry());
357:       assertFalse(node0.isCatch());
358:       assertFalse(node0.isFor());
359:       assertFalse(node0.isHook());
360:       assertFalse(node0.isComma());
361:       assertFalse(node0.isRegExp());
362:       assertFalse(node0.isGetProp());
363:       assertFalse(node0.isSetterDef());
364:       assertFalse(node0.isAnd());
365:       assertFalse(node0.isNot());
366:       assertFalse(node0.isObjectLit());
367:       assertFalse(node0.isDebugger());
368:       assertFalse(node0.isInc());
369:       assertFalse(node0.isThrow());
370:       assertFalse(node0.isFalse());
371:       assertFalse(node0.isContinue());
372:       assertFalse(node0.isCast());
373:       assertEquals(40, node0.getType());
374:       assertFalse(node0.isFunction());
375:       assertFalse(node0.isLabel());
376:       assertFalse(node0.isReturn());
377:       assertFalse(node0.isAssignAdd());
378:       assertFalse(node0.isLabelName());
379:       assertEquals((-1), node0.getLineno());
380:       assertFalse(node0.isNumber());
381:       assertEquals((-1), node0.getSourcePosition());
382:       assertFalse(node0.isOr());
383:       assertFalse(node0.isExprResult());
384:       assertFalse(node0.isBlock());
385:       assertFalse(node0.isScript());
386:       assertFalse(node0.hasOneChild());
387:       assertFalse(node0.isWhile());
388:       assertTrue(node0.isString());
389:       assertFalse(node0.isGetElem());
390:       assertFalse(node0.isCall());
391:       assertFalse(node0.isDec());
392:       assertFalse(node0.hasChildren());
393:       assertFalse(node0.isInstanceOf());
394:       assertFalse(node0.isAssign());
395:       assertFalse(node0.isWith());
396:       assertFalse(node0.hasMoreThanOneChild());
397:       assertFalse(node0.isTypeOf());
398:       assertFalse(node0.isParamList());
399:       assertFalse(node0.isThis());
400:       assertFalse(node0.isNull());
401:       assertFalse(node0.isBreak());
402:       assertFalse(node0.isName());
403:       assertFalse(node0.isStringKey());
404:       assertEquals((-1), node0.getCharno());
405:       assertFalse(node0.isNew());
406:       assertFalse(node0.isAdd());
407:       assertFalse(node0.isDefaultCase());
408:       assertFalse(node0.isArrayLit());
409:       assertFalse(node0.isSwitch());
410:       assertFalse(node0.isDo());
411:       assertFalse(node0.isVar());
412:       assertEquals(0, node0.getChildCount());
413:       assertFalse(boolean1);
414:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
415:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
416:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
417:       assertEquals(29, Node.JSDOC_INFO_PROP);
418:       assertEquals(53, Node.INPUT_ID);
419:       assertEquals(2, Node.POST_FLAG);
420:       assertEquals(12, Node.COLUMN_BITS);
421:       assertEquals(47, Node.IS_DISPATCHER);
422:       assertEquals(1, Node.DECR_FLAG);
423:       assertEquals(30, Node.VAR_ARGS_NAME);
424:       assertEquals(32, Node.INCRDECR_PROP);
425:       assertEquals(54, Node.SLASH_V);
426:       assertEquals(46, Node.IS_NAMESPACE);
427:       assertEquals(43, Node.IS_CONSTANT_NAME);
428:       assertEquals(51, Node.STATIC_SOURCE_FILE);
429:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
430:       assertEquals(50, Node.FREE_CALL);
431:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
432:       assertEquals(40, Node.ORIGINALNAME_PROP);
433:       assertEquals(39, Node.EMPTY_BLOCK);
434:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
435:       assertEquals(57, Node.LAST_PROP);
436:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
437:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
438:       assertEquals(55, Node.INFERRED_FUNCTION);
439:       assertEquals(49, Node.DIRECT_EVAL);
440:       assertEquals(4095, Node.COLUMN_MASK);
441:       assertEquals(15, Node.NO_SIDE_EFFECTS);
442:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
443:       assertEquals(48, Node.DIRECTIVES);
444:       assertEquals(37, Node.OPT_ARG_NAME);
445:       assertEquals(52, Node.LENGTH);
446:       assertEquals(8, Node.FLAG_NO_THROWS);
447:       assertEquals(56, Node.CHANGE_TIME);
448:       assertEquals(36, Node.QUOTED_PROP);
449:       assertEquals(57, Node.REFLECTED_OBJECT);
450:       
451:       node1.setQuotedString();
452:       assertFalse(node1.equals((Object)node0));
453:       assertNotSame(node1, node0);
454:       assertFalse(node1.isEmpty());
455:       assertFalse(node1.isFor());
456:       assertFalse(node1.isGetterDef());
457:       assertFalse(node1.isDefaultCase());
458:       assertFalse(node1.isTry());
459:       assertFalse(node1.isString());
460:       assertEquals(0, node1.getChildCount());
461:       assertFalse(node1.isDebugger());
462:       assertEquals((-1), node1.getCharno());
463:       assertFalse(node1.isParamList());
464:       assertFalse(node1.isFunction());
465:       assertFalse(node1.isSwitch());
466:       assertFalse(node1.isArrayLit());
467:       assertFalse(node1.isFalse());
468:       assertFalse(node1.isThrow());
469:       assertFalse(node1.isStringKey());
470:       assertFalse(node1.isHook());
471:       assertFalse(node1.isInc());
472:       assertFalse(node1.isSetterDef());
473:       assertFalse(node1.isThis());
474:       assertFalse(node1.isBlock());
475:       assertFalse(node1.isCase());
476:       assertFalse(node1.hasMoreThanOneChild());
477:       assertFalse(node1.isCatch());
478:       assertFalse(node1.isInstanceOf());
479:       assertFalse(node1.isIn());
480:       assertFalse(node1.isWith());
481:       assertFalse(node1.isRegExp());
482:       assertFalse(node1.isNE());
483:       assertEquals((-1), node1.getLineno());
484:       assertFalse(node1.isIf());
485:       assertFalse(node1.isGetElem());
486:       assertFalse(node1.isCast());
487:       assertFalse(node1.hasChildren());
488:       assertFalse(node1.isNumber());
489:       assertFalse(node1.isTypeOf());
490:       assertEquals((-1), node1.getSourcePosition());
491:       assertFalse(node1.isDec());
492:       assertFalse(node1.isAssign());
493:       assertFalse(node1.isScript());
494:       assertFalse(node1.isAssignAdd());
495:       assertFalse(node1.hasOneChild());
496:       assertFalse(node1.isAnd());
497:       assertFalse(node1.isObjectLit());
498:       assertFalse(node1.isContinue());
499:       assertFalse(node1.isLabel());
500:       assertFalse(node1.isNot());
501:       assertFalse(node1.isLabelName());
502:       assertFalse(node1.isCall());
503:       assertFalse(node1.isVar());
504:       assertFalse(node1.isComma());
505:       assertFalse(node1.isGetProp());
506:       assertFalse(node1.isAdd());
507:       assertFalse(node1.isWhile());
508:       assertFalse(node1.isNew());
509:       assertFalse(node1.isDo());
510:       assertFalse(node1.isReturn());
511:       assertEquals(1255, node1.getType());
512:       assertFalse(node1.isOr());
513:       assertFalse(node1.isVoid());
514:       assertFalse(node1.isTrue());
515:       assertFalse(node1.isExprResult());
516:       assertFalse(node1.isNull());
517:       assertFalse(node1.isDelProp());
518:       assertFalse(node1.isBreak());
519:       assertFalse(node1.isName());
520:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
521:       assertEquals(36, Node.QUOTED_PROP);
522:       assertEquals(43, Node.IS_CONSTANT_NAME);
523:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
524:       assertEquals(4095, Node.COLUMN_MASK);
525:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
526:       assertEquals(8, Node.FLAG_NO_THROWS);
527:       assertEquals(39, Node.EMPTY_BLOCK);
528:       assertEquals(37, Node.OPT_ARG_NAME);
529:       assertEquals(2, Node.POST_FLAG);
530:       assertEquals(48, Node.DIRECTIVES);
531:       assertEquals(56, Node.CHANGE_TIME);
532:       assertEquals(47, Node.IS_DISPATCHER);
533:       assertEquals(55, Node.INFERRED_FUNCTION);
534:       assertEquals(52, Node.LENGTH);
535:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
536:       assertEquals(15, Node.NO_SIDE_EFFECTS);
537:       assertEquals(53, Node.INPUT_ID);
538:       assertEquals(29, Node.JSDOC_INFO_PROP);
539:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
540:       assertEquals(30, Node.VAR_ARGS_NAME);
541:       assertEquals(57, Node.LAST_PROP);
542:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
543:       assertEquals(57, Node.REFLECTED_OBJECT);
544:       assertEquals(54, Node.SLASH_V);
545:       assertEquals(49, Node.DIRECT_EVAL);
546:       assertEquals(40, Node.ORIGINALNAME_PROP);
547:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
548:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
549:       assertEquals(12, Node.COLUMN_BITS);
550:       assertEquals(46, Node.IS_NAMESPACE);
551:       assertEquals(51, Node.STATIC_SOURCE_FILE);
552:       assertEquals(1, Node.DECR_FLAG);
553:       assertEquals(32, Node.INCRDECR_PROP);
554:       assertEquals(50, Node.FREE_CALL);
555:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
556:       
557:       Node node2 = new Node(116);
558:       assertFalse(node2.equals((Object)node1));
559:       assertFalse(node2.equals((Object)node0));
560:       assertNotNull(node2);
561:       assertEquals((-1), node2.getCharno());
562:       assertFalse(node2.isHook());
563:       assertFalse(node2.isSwitch());
564:       assertFalse(node2.isThrow());
565:       assertFalse(node2.isCase());
566:       assertEquals(116, node2.getType());
567:       assertFalse(node2.isIn());
568:       assertFalse(node2.isString());
569:       assertFalse(node2.isInc());
570:       assertFalse(node2.isGetProp());
571:       assertFalse(node2.isComma());
572:       assertFalse(node2.isIf());
573:       assertFalse(node2.isThis());
574:       assertFalse(node2.isFor());
575:       assertFalse(node2.isNE());
576:       assertFalse(node2.isWith());
577:       assertFalse(node2.isDelProp());
578:       assertFalse(node2.isInstanceOf());
579:       assertFalse(node2.isExprResult());
580:       assertFalse(node2.isVoid());
581:       assertFalse(node2.isTry());
582:       assertFalse(node2.isDefaultCase());
583:       assertFalse(node2.isTrue());
584:       assertFalse(node2.isGetterDef());
585:       assertFalse(node2.isNumber());
586:       assertFalse(node2.hasOneChild());
587:       assertFalse(node2.isEmpty());
588:       assertFalse(node2.isScript());
589:       assertFalse(node2.isLabel());
590:       assertFalse(node2.isAssignAdd());
591:       assertEquals(0, node2.getChildCount());
592:       assertFalse(node2.isParamList());
593:       assertFalse(node2.isStringKey());
594:       assertFalse(node2.isLabelName());
595:       assertFalse(node2.isArrayLit());
596:       assertFalse(node2.isNew());
597:       assertFalse(node2.isBlock());
598:       assertFalse(node2.isWhile());
599:       assertFalse(node2.isVar());
600:       assertFalse(node2.isDo());
601:       assertFalse(node2.isSetterDef());
602:       assertFalse(node2.isAdd());
603:       assertEquals((-1), node2.getLineno());
604:       assertFalse(node2.isOr());
605:       assertFalse(node2.isDec());
606:       assertFalse(node2.isNull());
607:       assertFalse(node2.hasChildren());
608:       assertFalse(node2.isReturn());
609:       assertTrue(node2.isBreak());
610:       assertFalse(node2.isName());
611:       assertFalse(node2.isGetElem());
612:       assertFalse(node2.isAssign());
613:       assertFalse(node2.isTypeOf());
614:       assertFalse(node2.isRegExp());
615:       assertFalse(node2.hasMoreThanOneChild());
616:       assertFalse(node2.isCall());
617:       assertFalse(node2.isCatch());
618:       assertFalse(node2.isDebugger());
619:       assertFalse(node2.isFunction());
620:       assertFalse(node2.isObjectLit());
621:       assertFalse(node2.isNot());
622:       assertEquals((-1), node2.getSourcePosition());
623:       assertFalse(node2.isFalse());
624:       assertFalse(node2.isAnd());
625:       assertFalse(node2.isContinue());
626:       assertFalse(node2.isCast());
627:       assertEquals(1, Node.DECR_FLAG);
628:       assertEquals(12, Node.COLUMN_BITS);
629:       assertEquals(15, Node.NO_SIDE_EFFECTS);
630:       assertEquals(57, Node.LAST_PROP);
631:       assertEquals(49, Node.DIRECT_EVAL);
632:       assertEquals(32, Node.INCRDECR_PROP);
633:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
634:       assertEquals(37, Node.OPT_ARG_NAME);
635:       assertEquals(47, Node.IS_DISPATCHER);
636:       assertEquals(2, Node.POST_FLAG);
637:       assertEquals(30, Node.VAR_ARGS_NAME);
638:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
639:       assertEquals(40, Node.ORIGINALNAME_PROP);
640:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
641:       assertEquals(46, Node.IS_NAMESPACE);
642:       assertEquals(54, Node.SLASH_V);
643:       assertEquals(51, Node.STATIC_SOURCE_FILE);
644:       assertEquals(50, Node.FREE_CALL);
645:       assertEquals(55, Node.INFERRED_FUNCTION);
646:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
647:       assertEquals(43, Node.IS_CONSTANT_NAME);
648:       assertEquals(48, Node.DIRECTIVES);
649:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
650:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
651:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
652:       assertEquals(4095, Node.COLUMN_MASK);
653:       assertEquals(29, Node.JSDOC_INFO_PROP);
654:       assertEquals(57, Node.REFLECTED_OBJECT);
655:       assertEquals(56, Node.CHANGE_TIME);
656:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
657:       assertEquals(39, Node.EMPTY_BLOCK);
658:       assertEquals(53, Node.INPUT_ID);
659:       assertEquals(36, Node.QUOTED_PROP);
660:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
661:       assertEquals(52, Node.LENGTH);
662:       assertEquals(8, Node.FLAG_NO_THROWS);
663:       
664:       String string0 = node0.getString();
665:       assertFalse(node0.equals((Object)node1));
666:       assertFalse(node0.equals((Object)node2));
667:       assertNotSame(node0, node1);
668:       assertNotNull(string0);
669:       assertFalse(node0.isNE());
670:       assertFalse(node0.isIf());
671:       assertFalse(node0.isDelProp());
672:       assertFalse(node0.isCase());
673:       assertFalse(node0.isEmpty());
674:       assertFalse(node0.isIn());
675:       assertFalse(node0.isGetterDef());
676:       assertFalse(node0.isTrue());
677:       assertFalse(node0.isVoid());
678:       assertFalse(node0.isTry());
679:       assertFalse(node0.isCatch());
680:       assertFalse(node0.isFor());
681:       assertFalse(node0.isHook());
682:       assertFalse(node0.isComma());
683:       assertFalse(node0.isRegExp());
684:       assertFalse(node0.isGetProp());
685:       assertFalse(node0.isSetterDef());
686:       assertFalse(node0.isAnd());
687:       assertFalse(node0.isNot());
688:       assertFalse(node0.isObjectLit());
689:       assertFalse(node0.isDebugger());
690:       assertFalse(node0.isInc());
691:       assertFalse(node0.isThrow());
692:       assertFalse(node0.isFalse());
693:       assertFalse(node0.isContinue());
694:       assertFalse(node0.isCast());
695:       assertEquals(40, node0.getType());
696:       assertFalse(node0.isFunction());
697:       assertFalse(node0.isLabel());
698:       assertFalse(node0.isReturn());
699:       assertFalse(node0.isAssignAdd());
700:       assertFalse(node0.isLabelName());
701:       assertEquals((-1), node0.getLineno());
702:       assertFalse(node0.isNumber());
703:       assertEquals((-1), node0.getSourcePosition());
704:       assertFalse(node0.isOr());
705:       assertFalse(node0.isExprResult());
706:       assertFalse(node0.isBlock());
707:       assertFalse(node0.isScript());
708:       assertFalse(node0.hasOneChild());
709:       assertFalse(node0.isWhile());
710:       assertTrue(node0.isString());
711:       assertFalse(node0.isGetElem());
712:       assertFalse(node0.isCall());
713:       assertFalse(node0.isDec());
714:       assertFalse(node0.hasChildren());
715:       assertFalse(node0.isInstanceOf());
716:       assertFalse(node0.isAssign());
717:       assertFalse(node0.isWith());
718:       assertFalse(node0.hasMoreThanOneChild());
719:       assertFalse(node0.isTypeOf());
720:       assertFalse(node0.isParamList());
721:       assertFalse(node0.isThis());
722:       assertFalse(node0.isNull());
723:       assertFalse(node0.isBreak());
724:       assertFalse(node0.isName());
725:       assertFalse(node0.isStringKey());
726:       assertEquals((-1), node0.getCharno());
727:       assertFalse(node0.isNew());
728:       assertFalse(node0.isAdd());
729:       assertFalse(node0.isDefaultCase());
730:       assertFalse(node0.isArrayLit());
731:       assertFalse(node0.isSwitch());
732:       assertFalse(node0.isDo());
733:       assertFalse(node0.isVar());
734:       assertEquals(0, node0.getChildCount());
735:       assertEquals("", string0);
736:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
737:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
738:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
739:       assertEquals(29, Node.JSDOC_INFO_PROP);
740:       assertEquals(53, Node.INPUT_ID);
741:       assertEquals(2, Node.POST_FLAG);
742:       assertEquals(12, Node.COLUMN_BITS);
743:       assertEquals(47, Node.IS_DISPATCHER);
744:       assertEquals(1, Node.DECR_FLAG);
745:       assertEquals(30, Node.VAR_ARGS_NAME);
746:       assertEquals(32, Node.INCRDECR_PROP);
747:       assertEquals(54, Node.SLASH_V);
748:       assertEquals(46, Node.IS_NAMESPACE);
749:       assertEquals(43, Node.IS_CONSTANT_NAME);
750:       assertEquals(51, Node.STATIC_SOURCE_FILE);
751:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
752:       assertEquals(50, Node.FREE_CALL);
753:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
754:       assertEquals(40, Node.ORIGINALNAME_PROP);
755:       assertEquals(39, Node.EMPTY_BLOCK);
756:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
757:       assertEquals(57, Node.LAST_PROP);
758:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
759:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
760:       assertEquals(55, Node.INFERRED_FUNCTION);
761:       assertEquals(49, Node.DIRECT_EVAL);
762:       assertEquals(4095, Node.COLUMN_MASK);
763:       assertEquals(15, Node.NO_SIDE_EFFECTS);
764:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
765:       assertEquals(48, Node.DIRECTIVES);
766:       assertEquals(37, Node.OPT_ARG_NAME);
767:       assertEquals(52, Node.LENGTH);
768:       assertEquals(8, Node.FLAG_NO_THROWS);
769:       assertEquals(56, Node.CHANGE_TIME);
770:       assertEquals(36, Node.QUOTED_PROP);
771:       assertEquals(57, Node.REFLECTED_OBJECT);
772:       
773:       node1.putBooleanProp(49, false);
774:       assertFalse(node1.equals((Object)node2));
775:       assertFalse(node1.equals((Object)node0));
776:       assertNotSame(node1, node0);
777:       assertFalse(node1.isEmpty());
778:       assertFalse(node1.isFor());
779:       assertFalse(node1.isGetterDef());
780:       assertFalse(node1.isDefaultCase());
781:       assertFalse(node1.isTry());
782:       assertFalse(node1.isString());
783:       assertEquals(0, node1.getChildCount());
784:       assertFalse(node1.isDebugger());
785:       assertEquals((-1), node1.getCharno());
786:       assertFalse(node1.isParamList());
787:       assertFalse(node1.isFunction());
788:       assertFalse(node1.isSwitch());
789:       assertFalse(node1.isArrayLit());
790:       assertFalse(node1.isFalse());
791:       assertFalse(node1.isThrow());
792:       assertFalse(node1.isStringKey());
793:       assertFalse(node1.isHook());
794:       assertFalse(node1.isInc());
795:       assertFalse(node1.isSetterDef());
796:       assertFalse(node1.isThis());
797:       assertFalse(node1.isBlock());
798:       assertFalse(node1.isCase());
799:       assertFalse(node1.hasMoreThanOneChild());
800:       assertFalse(node1.isCatch());
801:       assertFalse(node1.isInstanceOf());
802:       assertFalse(node1.isIn());
803:       assertFalse(node1.isWith());
804:       assertFalse(node1.isRegExp());
805:       assertFalse(node1.isNE());
806:       assertEquals((-1), node1.getLineno());
807:       assertFalse(node1.isIf());
808:       assertFalse(node1.isGetElem());
809:       assertFalse(node1.isCast());
810:       assertFalse(node1.hasChildren());
811:       assertFalse(node1.isNumber());
812:       assertFalse(node1.isTypeOf());
813:       assertEquals((-1), node1.getSourcePosition());
814:       assertFalse(node1.isDec());
815:       assertFalse(node1.isAssign());
816:       assertFalse(node1.isScript());
817:       assertFalse(node1.isAssignAdd());
818:       assertFalse(node1.hasOneChild());
819:       assertFalse(node1.isAnd());
820:       assertFalse(node1.isObjectLit());
821:       assertFalse(node1.isContinue());
822:       assertFalse(node1.isLabel());
823:       assertFalse(node1.isNot());
824:       assertFalse(node1.isLabelName());
825:       assertFalse(node1.isCall());
826:       assertFalse(node1.isVar());
827:       assertFalse(node1.isComma());
828:       assertFalse(node1.isGetProp());
829:       assertFalse(node1.isAdd());
830:       assertFalse(node1.isWhile());
831:       assertFalse(node1.isNew());
832:       assertFalse(node1.isDo());
833:       assertFalse(node1.isReturn());
834:       assertEquals(1255, node1.getType());
835:       assertFalse(node1.isOr());
836:       assertFalse(node1.isVoid());
837:       assertFalse(node1.isTrue());
838:       assertFalse(node1.isExprResult());
839:       assertFalse(node1.isNull());
840:       assertFalse(node1.isDelProp());
841:       assertFalse(node1.isBreak());
842:       assertFalse(node1.isName());
843:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
844:       assertEquals(36, Node.QUOTED_PROP);
845:       assertEquals(43, Node.IS_CONSTANT_NAME);
846:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
847:       assertEquals(4095, Node.COLUMN_MASK);
848:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
849:       assertEquals(8, Node.FLAG_NO_THROWS);
850:       assertEquals(39, Node.EMPTY_BLOCK);
851:       assertEquals(37, Node.OPT_ARG_NAME);
852:       assertEquals(2, Node.POST_FLAG);
853:       assertEquals(48, Node.DIRECTIVES);
854:       assertEquals(56, Node.CHANGE_TIME);
855:       assertEquals(47, Node.IS_DISPATCHER);
856:       assertEquals(55, Node.INFERRED_FUNCTION);
857:       assertEquals(52, Node.LENGTH);
858:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
859:       assertEquals(15, Node.NO_SIDE_EFFECTS);
860:       assertEquals(53, Node.INPUT_ID);
861:       assertEquals(29, Node.JSDOC_INFO_PROP);
862:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
863:       assertEquals(30, Node.VAR_ARGS_NAME);
864:       assertEquals(57, Node.LAST_PROP);
865:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
866:       assertEquals(57, Node.REFLECTED_OBJECT);
867:       assertEquals(54, Node.SLASH_V);
868:       assertEquals(49, Node.DIRECT_EVAL);
869:       assertEquals(40, Node.ORIGINALNAME_PROP);
870:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
871:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
872:       assertEquals(12, Node.COLUMN_BITS);
873:       assertEquals(46, Node.IS_NAMESPACE);
874:       assertEquals(51, Node.STATIC_SOURCE_FILE);
875:       assertEquals(1, Node.DECR_FLAG);
876:       assertEquals(32, Node.INCRDECR_PROP);
877:       assertEquals(50, Node.FREE_CALL);
878:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
879:       
880:       StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
881:       assertFalse(node1.equals((Object)node2));
882:       assertFalse(node1.equals((Object)node0));
883:       assertNotSame(node1, node0);
884:       assertNull(staticSourceFile0);
885:       assertFalse(node1.isEmpty());
886:       assertFalse(node1.isFor());
887:       assertFalse(node1.isGetterDef());
888:       assertFalse(node1.isDefaultCase());
889:       assertFalse(node1.isTry());
890:       assertFalse(node1.isString());
891:       assertEquals(0, node1.getChildCount());
892:       assertFalse(node1.isDebugger());
893:       assertEquals((-1), node1.getCharno());
894:       assertFalse(node1.isParamList());
895:       assertFalse(node1.isFunction());
896:       assertFalse(node1.isSwitch());
897:       assertFalse(node1.isArrayLit());
898:       assertFalse(node1.isFalse());
899:       assertFalse(node1.isThrow());
900:       assertFalse(node1.isStringKey());
901:       assertFalse(node1.isHook());
902:       assertFalse(node1.isInc());
903:       assertFalse(node1.isSetterDef());
904:       assertFalse(node1.isThis());
905:       assertFalse(node1.isBlock());
906:       assertFalse(node1.isCase());
907:       assertFalse(node1.hasMoreThanOneChild());
908:       assertFalse(node1.isCatch());
909:       assertFalse(node1.isInstanceOf());
910:       assertFalse(node1.isIn());
911:       assertFalse(node1.isWith());
912:       assertFalse(node1.isRegExp());
913:       assertFalse(node1.isNE());
914:       assertEquals((-1), node1.getLineno());
915:       assertFalse(node1.isIf());
916:       assertFalse(node1.isGetElem());
917:       assertFalse(node1.isCast());
918:       assertFalse(node1.hasChildren());
919:       assertFalse(node1.isNumber());
920:       assertFalse(node1.isTypeOf());
921:       assertEquals((-1), node1.getSourcePosition());
922:       assertFalse(node1.isDec());
923:       assertFalse(node1.isAssign());
924:       assertFalse(node1.isScript());
925:       assertFalse(node1.isAssignAdd());
926:       assertFalse(node1.hasOneChild());
927:       assertFalse(node1.isAnd());
928:       assertFalse(node1.isObjectLit());
929:       assertFalse(node1.isContinue());
930:       assertFalse(node1.isLabel());
931:       assertFalse(node1.isNot());
932:       assertFalse(node1.isLabelName());
933:       assertFalse(node1.isCall());
934:       assertFalse(node1.isVar());
935:       assertFalse(node1.isComma());
936:       assertFalse(node1.isGetProp());
937:       assertFalse(node1.isAdd());
938:       assertFalse(node1.isWhile());
939:       assertFalse(node1.isNew());
940:       assertFalse(node1.isDo());
941:       assertFalse(node1.isReturn());
942:       assertEquals(1255, node1.getType());
943:       assertFalse(node1.isOr());
944:       assertFalse(node1.isVoid());
945:       assertFalse(node1.isTrue());
946:       assertFalse(node1.isExprResult());
947:       assertFalse(node1.isNull());
948:       assertFalse(node1.isDelProp());
949:       assertFalse(node1.isBreak());
950:       assertFalse(node1.isName());
951:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
952:       assertEquals(36, Node.QUOTED_PROP);
953:       assertEquals(43, Node.IS_CONSTANT_NAME);
954:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
955:       assertEquals(4095, Node.COLUMN_MASK);
956:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
957:       assertEquals(8, Node.FLAG_NO_THROWS);
958:       assertEquals(39, Node.EMPTY_BLOCK);
959:       assertEquals(37, Node.OPT_ARG_NAME);
960:       assertEquals(2, Node.POST_FLAG);
961:       assertEquals(48, Node.DIRECTIVES);
962:       assertEquals(56, Node.CHANGE_TIME);
963:       assertEquals(47, Node.IS_DISPATCHER);
964:       assertEquals(55, Node.INFERRED_FUNCTION);
965:       assertEquals(52, Node.LENGTH);
966:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
967:       assertEquals(15, Node.NO_SIDE_EFFECTS);
968:       assertEquals(53, Node.INPUT_ID);
969:       assertEquals(29, Node.JSDOC_INFO_PROP);
970:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
971:       assertEquals(30, Node.VAR_ARGS_NAME);
972:       assertEquals(57, Node.LAST_PROP);
973:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
974:       assertEquals(57, Node.REFLECTED_OBJECT);
975:       assertEquals(54, Node.SLASH_V);
976:       assertEquals(49, Node.DIRECT_EVAL);
977:       assertEquals(40, Node.ORIGINALNAME_PROP);
978:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
979:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
980:       assertEquals(12, Node.COLUMN_BITS);
981:       assertEquals(46, Node.IS_NAMESPACE);
982:       assertEquals(51, Node.STATIC_SOURCE_FILE);
983:       assertEquals(1, Node.DECR_FLAG);
984:       assertEquals(32, Node.INCRDECR_PROP);
985:       assertEquals(50, Node.FREE_CALL);
986:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
987:       
988:       Iterable<Node> iterable0 = node0.children();
989:       assertFalse(node0.equals((Object)node1));
990:       assertFalse(node0.equals((Object)node2));
991:       assertNotSame(node0, node1);
992:       assertNotNull(iterable0);
993:       assertFalse(node0.isNE());
994:       assertFalse(node0.isIf());
995:       assertFalse(node0.isDelProp());
996:       assertFalse(node0.isCase());
997:       assertFalse(node0.isEmpty());
998:       assertFalse(node0.isIn());
999:       assertFalse(node0.isGetterDef());
1000:       assertFalse(node0.isTrue());
1001:       assertFalse(node0.isVoid());
1002:       assertFalse(node0.isTry());
1003:       assertFalse(node0.isCatch());
1004:       assertFalse(node0.isFor());
1005:       assertFalse(node0.isHook());
1006:       assertFalse(node0.isComma());
1007:       assertFalse(node0.isRegExp());
1008:       assertFalse(node0.isGetProp());
1009:       assertFalse(node0.isSetterDef());
1010:       assertFalse(node0.isAnd());
1011:       assertFalse(node0.isNot());
1012:       assertFalse(node0.isObjectLit());
1013:       assertFalse(node0.isDebugger());
1014:       assertFalse(node0.isInc());
1015:       assertFalse(node0.isThrow());
1016:       assertFalse(node0.isFalse());
1017:       assertFalse(node0.isContinue());
1018:       assertFalse(node0.isCast());
1019:       assertEquals(40, node0.getType());
1020:       assertFalse(node0.isFunction());
1021:       assertFalse(node0.isLabel());
1022:       assertFalse(node0.isReturn());
1023:       assertFalse(node0.isAssignAdd());
1024:       assertFalse(node0.isLabelName());
1025:       assertEquals((-1), node0.getLineno());
1026:       assertFalse(node0.isNumber());
1027:       assertEquals((-1), node0.getSourcePosition());
1028:       assertFalse(node0.isOr());
1029:       assertFalse(node0.isExprResult());
1030:       assertFalse(node0.isBlock());
1031:       assertFalse(node0.isScript());
1032:       assertFalse(node0.hasOneChild());
1033:       assertFalse(node0.isWhile());
1034:       assertTrue(node0.isString());
1035:       assertFalse(node0.isGetElem());
1036:       assertFalse(node0.isCall());
1037:       assertFalse(node0.isDec());
1038:       assertFalse(node0.hasChildren());
1039:       assertFalse(node0.isInstanceOf());
1040:       assertFalse(node0.isAssign());
1041:       assertFalse(node0.isWith());
1042:       assertFalse(node0.hasMoreThanOneChild());
1043:       assertFalse(node0.isTypeOf());
1044:       assertFalse(node0.isParamList());
1045:       assertFalse(node0.isThis());
1046:       assertFalse(node0.isNull());
1047:       assertFalse(node0.isBreak());
1048:       assertFalse(node0.isName());
1049:       assertFalse(node0.isStringKey());
1050:       assertEquals((-1), node0.getCharno());
1051:       assertFalse(node0.isNew());
1052:       assertFalse(node0.isAdd());
1053:       assertFalse(node0.isDefaultCase());
1054:       assertFalse(node0.isArrayLit());
1055:       assertFalse(node0.isSwitch());
1056:       assertFalse(node0.isDo());
1057:       assertFalse(node0.isVar());
1058:       assertEquals(0, node0.getChildCount());
1059:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1060:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1061:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1062:       assertEquals(29, Node.JSDOC_INFO_PROP);
1063:       assertEquals(53, Node.INPUT_ID);
1064:       assertEquals(2, Node.POST_FLAG);
1065:       assertEquals(12, Node.COLUMN_BITS);
1066:       assertEquals(47, Node.IS_DISPATCHER);
1067:       assertEquals(1, Node.DECR_FLAG);
1068:       assertEquals(30, Node.VAR_ARGS_NAME);
1069:       assertEquals(32, Node.INCRDECR_PROP);
1070:       assertEquals(54, Node.SLASH_V);
1071:       assertEquals(46, Node.IS_NAMESPACE);
1072:       assertEquals(43, Node.IS_CONSTANT_NAME);
1073:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1074:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1075:       assertEquals(50, Node.FREE_CALL);
1076:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1077:       assertEquals(40, Node.ORIGINALNAME_PROP);
1078:       assertEquals(39, Node.EMPTY_BLOCK);
1079:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1080:       assertEquals(57, Node.LAST_PROP);
1081:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1082:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1083:       assertEquals(55, Node.INFERRED_FUNCTION);
1084:       assertEquals(49, Node.DIRECT_EVAL);
1085:       assertEquals(4095, Node.COLUMN_MASK);
1086:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1087:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1088:       assertEquals(48, Node.DIRECTIVES);
1089:       assertEquals(37, Node.OPT_ARG_NAME);
1090:       assertEquals(52, Node.LENGTH);
1091:       assertEquals(8, Node.FLAG_NO_THROWS);
1092:       assertEquals(56, Node.CHANGE_TIME);
1093:       assertEquals(36, Node.QUOTED_PROP);
1094:       assertEquals(57, Node.REFLECTED_OBJECT);
1095:       assertFalse(iterable0.contains(node0));
1096:       
1097:       boolean boolean2 = node1.isEmpty();
1098:       assertFalse(node1.equals((Object)node2));
1099:       assertFalse(node1.equals((Object)node0));
1100:       assertTrue(boolean2 == boolean0);
1101:       assertTrue(boolean2 == boolean1);
1102:       assertNotSame(node1, node0);
1103:       assertFalse(node1.isEmpty());
1104:       assertFalse(node1.isFor());
1105:       assertFalse(node1.isGetterDef());
1106:       assertFalse(node1.isDefaultCase());
1107:       assertFalse(node1.isTry());
1108:       assertFalse(node1.isString());
1109:       assertEquals(0, node1.getChildCount());
1110:       assertFalse(node1.isDebugger());
1111:       assertEquals((-1), node1.getCharno());
1112:       assertFalse(node1.isParamList());
1113:       assertFalse(node1.isFunction());
1114:       assertFalse(node1.isSwitch());
1115:       assertFalse(node1.isArrayLit());
1116:       assertFalse(node1.isFalse());
1117:       assertFalse(node1.isThrow());
1118:       assertFalse(node1.isStringKey());
1119:       assertFalse(node1.isHook());
1120:       assertFalse(node1.isInc());
1121:       assertFalse(node1.isSetterDef());
1122:       assertFalse(node1.isThis());
1123:       assertFalse(node1.isBlock());
1124:       assertFalse(node1.isCase());
1125:       assertFalse(node1.hasMoreThanOneChild());
1126:       assertFalse(node1.isCatch());
1127:       assertFalse(node1.isInstanceOf());
1128:       assertFalse(node1.isIn());
1129:       assertFalse(node1.isWith());
1130:       assertFalse(node1.isRegExp());
1131:       assertFalse(node1.isNE());
1132:       assertEquals((-1), node1.getLineno());
1133:       assertFalse(node1.isIf());
1134:       assertFalse(node1.isGetElem());
1135:       assertFalse(node1.isCast());
1136:       assertFalse(node1.hasChildren());
1137:       assertFalse(node1.isNumber());
1138:       assertFalse(node1.isTypeOf());
1139:       assertEquals((-1), node1.getSourcePosition());
1140:       assertFalse(node1.isDec());
1141:       assertFalse(node1.isAssign());
1142:       assertFalse(node1.isScript());
1143:       assertFalse(node1.isAssignAdd());
1144:       assertFalse(node1.hasOneChild());
1145:       assertFalse(node1.isAnd());
1146:       assertFalse(node1.isObjectLit());
1147:       assertFalse(node1.isContinue());
1148:       assertFalse(node1.isLabel());
1149:       assertFalse(node1.isNot());
1150:       assertFalse(node1.isLabelName());
1151:       assertFalse(node1.isCall());
1152:       assertFalse(node1.isVar());
1153:       assertFalse(node1.isComma());
1154:       assertFalse(node1.isGetProp());
1155:       assertFalse(node1.isAdd());
1156:       assertFalse(node1.isWhile());
1157:       assertFalse(node1.isNew());
1158:       assertFalse(node1.isDo());
1159:       assertFalse(node1.isReturn());
1160:       assertEquals(1255, node1.getType());
1161:       assertFalse(node1.isOr());
1162:       assertFalse(node1.isVoid());
1163:       assertFalse(node1.isTrue());
1164:       assertFalse(node1.isExprResult());
1165:       assertFalse(node1.isNull());
1166:       assertFalse(node1.isDelProp());
1167:       assertFalse(node1.isBreak());
1168:       assertFalse(node1.isName());
1169:       assertFalse(boolean2);
1170:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1171:       assertEquals(36, Node.QUOTED_PROP);
1172:       assertEquals(43, Node.IS_CONSTANT_NAME);
1173:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1174:       assertEquals(4095, Node.COLUMN_MASK);
1175:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1176:       assertEquals(8, Node.FLAG_NO_THROWS);
1177:       assertEquals(39, Node.EMPTY_BLOCK);
1178:       assertEquals(37, Node.OPT_ARG_NAME);
1179:       assertEquals(2, Node.POST_FLAG);
1180:       assertEquals(48, Node.DIRECTIVES);
1181:       assertEquals(56, Node.CHANGE_TIME);
1182:       assertEquals(47, Node.IS_DISPATCHER);
1183:       assertEquals(55, Node.INFERRED_FUNCTION);
1184:       assertEquals(52, Node.LENGTH);
1185:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1186:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1187:       assertEquals(53, Node.INPUT_ID);
1188:       assertEquals(29, Node.JSDOC_INFO_PROP);
1189:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1190:       assertEquals(30, Node.VAR_ARGS_NAME);
1191:       assertEquals(57, Node.LAST_PROP);
1192:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1193:       assertEquals(57, Node.REFLECTED_OBJECT);
1194:       assertEquals(54, Node.SLASH_V);
1195:       assertEquals(49, Node.DIRECT_EVAL);
1196:       assertEquals(40, Node.ORIGINALNAME_PROP);
1197:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1199:       assertEquals(12, Node.COLUMN_BITS);
1200:       assertEquals(46, Node.IS_NAMESPACE);
1201:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1202:       assertEquals(1, Node.DECR_FLAG);
1203:       assertEquals(32, Node.INCRDECR_PROP);
1204:       assertEquals(50, Node.FREE_CALL);
1205:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1206:       
1207:       Node node3 = Node.newString("Use SerializedForm", 1325, 1255);
1208:       assertFalse(node3.equals((Object)node2));
1209:       assertFalse(node3.equals((Object)node1));
1210:       assertFalse(node3.equals((Object)node0));
1211:       assertNotSame(node3, node1);
1212:       assertNotSame(node3, node0);
1213:       assertNotNull(node3);
1214:       assertFalse(node3.isWith());
1215:       assertFalse(node3.isAnd());
1216:       assertFalse(node3.isScript());
1217:       assertEquals(1255, node3.getCharno());
1218:       assertFalse(node3.isExprResult());
1219:       assertFalse(node3.isThis());
1220:       assertFalse(node3.isInstanceOf());
1221:       assertFalse(node3.isComma());
1222:       assertFalse(node3.isFalse());
1223:       assertFalse(node3.isCast());
1224:       assertFalse(node3.isLabelName());
1225:       assertFalse(node3.hasOneChild());
1226:       assertFalse(node3.isGetProp());
1227:       assertFalse(node3.isNumber());
1228:       assertFalse(node3.isObjectLit());
1229:       assertFalse(node3.isNot());
1230:       assertFalse(node3.isCase());
1231:       assertFalse(node3.isContinue());
1232:       assertTrue(node3.isString());
1233:       assertFalse(node3.isBlock());
1234:       assertFalse(node3.isHook());
1235:       assertFalse(node3.hasMoreThanOneChild());
1236:       assertFalse(node3.isThrow());
1237:       assertFalse(node3.isSetterDef());
1238:       assertEquals(1325, node3.getLineno());
1239:       assertFalse(node3.isIf());
1240:       assertFalse(node3.isInc());
1241:       assertFalse(node3.isNE());
1242:       assertFalse(node3.isIn());
1243:       assertEquals(40, node3.getType());
1244:       assertFalse(node3.isCatch());
1245:       assertFalse(node3.isDefaultCase());
1246:       assertFalse(node3.isVoid());
1247:       assertFalse(node3.isRegExp());
1248:       assertFalse(node3.isFunction());
1249:       assertEquals(0, node3.getChildCount());
1250:       assertFalse(node3.isFor());
1251:       assertFalse(node3.isStringKey());
1252:       assertFalse(node3.isArrayLit());
1253:       assertFalse(node3.isTry());
1254:       assertFalse(node3.isParamList());
1255:       assertFalse(node3.isDebugger());
1256:       assertFalse(node3.isGetterDef());
1257:       assertFalse(node3.isWhile());
1258:       assertFalse(node3.isSwitch());
1259:       assertFalse(node3.isDo());
1260:       assertFalse(node3.isLabel());
1261:       assertFalse(node3.isAssignAdd());
1262:       assertFalse(node3.isReturn());
1263:       assertFalse(node3.isTypeOf());
1264:       assertFalse(node3.hasChildren());
1265:       assertFalse(node3.isDec());
1266:       assertFalse(node3.isAssign());
1267:       assertFalse(node3.isName());
1268:       assertFalse(node3.isGetElem());
1269:       assertFalse(node3.isCall());
1270:       assertFalse(node3.isEmpty());
1271:       assertFalse(node3.isVar());
1272:       assertFalse(node3.isBreak());
1273:       assertFalse(node3.isDelProp());
1274:       assertFalse(node3.isAdd());
1275:       assertFalse(node3.isNew());
1276:       assertFalse(node3.isTrue());
1277:       assertFalse(node3.isNull());
1278:       assertEquals(5428455, node3.getSourcePosition());
1279:       assertFalse(node3.isOr());
1280:       assertEquals(48, Node.DIRECTIVES);
1281:       assertEquals(8, Node.FLAG_NO_THROWS);
1282:       assertEquals(4095, Node.COLUMN_MASK);
1283:       assertEquals(55, Node.INFERRED_FUNCTION);
1284:       assertEquals(39, Node.EMPTY_BLOCK);
1285:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1286:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1287:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1288:       assertEquals(50, Node.FREE_CALL);
1289:       assertEquals(43, Node.IS_CONSTANT_NAME);
1290:       assertEquals(57, Node.REFLECTED_OBJECT);
1291:       assertEquals(36, Node.QUOTED_PROP);
1292:       assertEquals(52, Node.LENGTH);
1293:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1294:       assertEquals(40, Node.ORIGINALNAME_PROP);
1295:       assertEquals(53, Node.INPUT_ID);
1296:       assertEquals(30, Node.VAR_ARGS_NAME);
1297:       assertEquals(57, Node.LAST_PROP);
1298:       assertEquals(47, Node.IS_DISPATCHER);
1299:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1300:       assertEquals(37, Node.OPT_ARG_NAME);
1301:       assertEquals(2, Node.POST_FLAG);
1302:       assertEquals(32, Node.INCRDECR_PROP);
1303:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1304:       assertEquals(29, Node.JSDOC_INFO_PROP);
1305:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1306:       assertEquals(49, Node.DIRECT_EVAL);
1307:       assertEquals(56, Node.CHANGE_TIME);
1308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1309:       assertEquals(46, Node.IS_NAMESPACE);
1310:       assertEquals(54, Node.SLASH_V);
1311:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1312:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1313:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1314:       assertEquals(1, Node.DECR_FLAG);
1315:       assertEquals(12, Node.COLUMN_BITS);
1316:       
1317:       boolean boolean3 = node3.isOptionalArg();
1318:       assertFalse(node3.equals((Object)node2));
1319:       assertFalse(node3.equals((Object)node1));
1320:       assertFalse(node3.equals((Object)node0));
1321:       assertTrue(boolean3 == boolean2);
1322:       assertTrue(boolean3 == boolean1);
1323:       assertTrue(boolean3 == boolean0);
1324:       assertNotSame(node3, node1);
1325:       assertNotSame(node3, node0);
1326:       assertFalse(node3.isWith());
1327:       assertFalse(node3.isAnd());
1328:       assertFalse(node3.isScript());
1329:       assertEquals(1255, node3.getCharno());
1330:       assertFalse(node3.isExprResult());
1331:       assertFalse(node3.isThis());
1332:       assertFalse(node3.isInstanceOf());
1333:       assertFalse(node3.isComma());
1334:       assertFalse(node3.isFalse());
1335:       assertFalse(node3.isCast());
1336:       assertFalse(node3.isLabelName());
1337:       assertFalse(node3.hasOneChild());
1338:       assertFalse(node3.isGetProp());
1339:       assertFalse(node3.isNumber());
1340:       assertFalse(node3.isObjectLit());
1341:       assertFalse(node3.isNot());
1342:       assertFalse(node3.isCase());
1343:       assertFalse(node3.isContinue());
1344:       assertTrue(node3.isString());
1345:       assertFalse(node3.isBlock());
1346:       assertFalse(node3.isHook());
1347:       assertFalse(node3.hasMoreThanOneChild());
1348:       assertFalse(node3.isThrow());
1349:       assertFalse(node3.isSetterDef());
1350:       assertEquals(1325, node3.getLineno());
1351:       assertFalse(node3.isIf());
1352:       assertFalse(node3.isInc());
1353:       assertFalse(node3.isNE());
1354:       assertFalse(node3.isIn());
1355:       assertEquals(40, node3.getType());
1356:       assertFalse(node3.isCatch());
1357:       assertFalse(node3.isDefaultCase());
1358:       assertFalse(node3.isVoid());
1359:       assertFalse(node3.isRegExp());
1360:       assertFalse(node3.isFunction());
1361:       assertEquals(0, node3.getChildCount());
1362:       assertFalse(node3.isFor());
1363:       assertFalse(node3.isStringKey());
1364:       assertFalse(node3.isArrayLit());
1365:       assertFalse(node3.isTry());
1366:       assertFalse(node3.isParamList());
1367:       assertFalse(node3.isDebugger());
1368:       assertFalse(node3.isGetterDef());
1369:       assertFalse(node3.isWhile());
1370:       assertFalse(node3.isSwitch());
1371:       assertFalse(node3.isDo());
1372:       assertFalse(node3.isLabel());
1373:       assertFalse(node3.isAssignAdd());
1374:       assertFalse(node3.isReturn());
1375:       assertFalse(node3.isTypeOf());
1376:       assertFalse(node3.hasChildren());
1377:       assertFalse(node3.isDec());
1378:       assertFalse(node3.isAssign());
1379:       assertFalse(node3.isName());
1380:       assertFalse(node3.isGetElem());
1381:       assertFalse(node3.isCall());
1382:       assertFalse(node3.isEmpty());
1383:       assertFalse(node3.isVar());
1384:       assertFalse(node3.isBreak());
1385:       assertFalse(node3.isDelProp());
1386:       assertFalse(node3.isAdd());
1387:       assertFalse(node3.isNew());
1388:       assertFalse(node3.isTrue());
1389:       assertFalse(node3.isNull());
1390:       assertEquals(5428455, node3.getSourcePosition());
1391:       assertFalse(node3.isOr());
1392:       assertFalse(boolean3);
1393:       assertEquals(48, Node.DIRECTIVES);
1394:       assertEquals(8, Node.FLAG_NO_THROWS);
1395:       assertEquals(4095, Node.COLUMN_MASK);
1396:       assertEquals(55, Node.INFERRED_FUNCTION);
1397:       assertEquals(39, Node.EMPTY_BLOCK);
1398:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1399:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1400:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1401:       assertEquals(50, Node.FREE_CALL);
1402:       assertEquals(43, Node.IS_CONSTANT_NAME);
1403:       assertEquals(57, Node.REFLECTED_OBJECT);
1404:       assertEquals(36, Node.QUOTED_PROP);
1405:       assertEquals(52, Node.LENGTH);
1406:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1407:       assertEquals(40, Node.ORIGINALNAME_PROP);
1408:       assertEquals(53, Node.INPUT_ID);
1409:       assertEquals(30, Node.VAR_ARGS_NAME);
1410:       assertEquals(57, Node.LAST_PROP);
1411:       assertEquals(47, Node.IS_DISPATCHER);
1412:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1413:       assertEquals(37, Node.OPT_ARG_NAME);
1414:       assertEquals(2, Node.POST_FLAG);
1415:       assertEquals(32, Node.INCRDECR_PROP);
1416:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1417:       assertEquals(29, Node.JSDOC_INFO_PROP);
1418:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1419:       assertEquals(49, Node.DIRECT_EVAL);
1420:       assertEquals(56, Node.CHANGE_TIME);
1421:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1422:       assertEquals(46, Node.IS_NAMESPACE);
1423:       assertEquals(54, Node.SLASH_V);
1424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1425:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1427:       assertEquals(1, Node.DECR_FLAG);
1428:       assertEquals(12, Node.COLUMN_BITS);
1429:       
1430:       boolean boolean4 = node2.isWith();
1431:       assertFalse(node2.equals((Object)node1));
1432:       assertFalse(node2.equals((Object)node3));
1433:       assertFalse(node2.equals((Object)node0));
1434:       assertTrue(boolean4 == boolean2);
1435:       assertTrue(boolean4 == boolean1);
1436:       assertTrue(boolean4 == boolean3);
1437:       assertTrue(boolean4 == boolean0);
1438:       assertEquals((-1), node2.getCharno());
1439:       assertFalse(node2.isHook());
1440:       assertFalse(node2.isSwitch());
1441:       assertFalse(node2.isThrow());
1442:       assertFalse(node2.isCase());
1443:       assertEquals(116, node2.getType());
1444:       assertFalse(node2.isIn());
1445:       assertFalse(node2.isString());
1446:       assertFalse(node2.isInc());
1447:       assertFalse(node2.isGetProp());
1448:       assertFalse(node2.isComma());
1449:       assertFalse(node2.isIf());
1450:       assertFalse(node2.isThis());
1451:       assertFalse(node2.isFor());
1452:       assertFalse(node2.isNE());
1453:       assertFalse(node2.isWith());
1454:       assertFalse(node2.isDelProp());
1455:       assertFalse(node2.isInstanceOf());
1456:       assertFalse(node2.isExprResult());
1457:       assertFalse(node2.isVoid());
1458:       assertFalse(node2.isTry());
1459:       assertFalse(node2.isDefaultCase());
1460:       assertFalse(node2.isTrue());
1461:       assertFalse(node2.isGetterDef());
1462:       assertFalse(node2.isNumber());
1463:       assertFalse(node2.hasOneChild());
1464:       assertFalse(node2.isEmpty());
1465:       assertFalse(node2.isScript());
1466:       assertFalse(node2.isLabel());
1467:       assertFalse(node2.isAssignAdd());
1468:       assertEquals(0, node2.getChildCount());
1469:       assertFalse(node2.isParamList());
1470:       assertFalse(node2.isStringKey());
1471:       assertFalse(node2.isLabelName());
1472:       assertFalse(node2.isArrayLit());
1473:       assertFalse(node2.isNew());
1474:       assertFalse(node2.isBlock());
1475:       assertFalse(node2.isWhile());
1476:       assertFalse(node2.isVar());
1477:       assertFalse(node2.isDo());
1478:       assertFalse(node2.isSetterDef());
1479:       assertFalse(node2.isAdd());
1480:       assertEquals((-1), node2.getLineno());
1481:       assertFalse(node2.isOr());
1482:       assertFalse(node2.isDec());
1483:       assertFalse(node2.isNull());
1484:       assertFalse(node2.hasChildren());
1485:       assertFalse(node2.isReturn());
1486:       assertTrue(node2.isBreak());
1487:       assertFalse(node2.isName());
1488:       assertFalse(node2.isGetElem());
1489:       assertFalse(node2.isAssign());
1490:       assertFalse(node2.isTypeOf());
1491:       assertFalse(node2.isRegExp());
1492:       assertFalse(node2.hasMoreThanOneChild());
1493:       assertFalse(node2.isCall());
1494:       assertFalse(node2.isCatch());
1495:       assertFalse(node2.isDebugger());
1496:       assertFalse(node2.isFunction());
1497:       assertFalse(node2.isObjectLit());
1498:       assertFalse(node2.isNot());
1499:       assertEquals((-1), node2.getSourcePosition());
1500:       assertFalse(node2.isFalse());
1501:       assertFalse(node2.isAnd());
1502:       assertFalse(node2.isContinue());
1503:       assertFalse(node2.isCast());
1504:       assertFalse(boolean4);
1505:       assertEquals(1, Node.DECR_FLAG);
1506:       assertEquals(12, Node.COLUMN_BITS);
1507:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1508:       assertEquals(57, Node.LAST_PROP);
1509:       assertEquals(49, Node.DIRECT_EVAL);
1510:       assertEquals(32, Node.INCRDECR_PROP);
1511:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1512:       assertEquals(37, Node.OPT_ARG_NAME);
1513:       assertEquals(47, Node.IS_DISPATCHER);
1514:       assertEquals(2, Node.POST_FLAG);
1515:       assertEquals(30, Node.VAR_ARGS_NAME);
1516:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1517:       assertEquals(40, Node.ORIGINALNAME_PROP);
1518:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1519:       assertEquals(46, Node.IS_NAMESPACE);
1520:       assertEquals(54, Node.SLASH_V);
1521:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1522:       assertEquals(50, Node.FREE_CALL);
1523:       assertEquals(55, Node.INFERRED_FUNCTION);
1524:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1525:       assertEquals(43, Node.IS_CONSTANT_NAME);
1526:       assertEquals(48, Node.DIRECTIVES);
1527:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1528:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1529:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1530:       assertEquals(4095, Node.COLUMN_MASK);
1531:       assertEquals(29, Node.JSDOC_INFO_PROP);
1532:       assertEquals(57, Node.REFLECTED_OBJECT);
1533:       assertEquals(56, Node.CHANGE_TIME);
1534:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1535:       assertEquals(39, Node.EMPTY_BLOCK);
1536:       assertEquals(53, Node.INPUT_ID);
1537:       assertEquals(36, Node.QUOTED_PROP);
1538:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1539:       assertEquals(52, Node.LENGTH);
1540:       assertEquals(8, Node.FLAG_NO_THROWS);
1541:       
1542:       Node node4 = node2.useSourceInfoIfMissingFrom(node0);
1543:       assertFalse(node0.equals((Object)node1));
1544:       assertFalse(node0.equals((Object)node3));
1545:       assertFalse(node0.equals((Object)node2));
1546:       assertFalse(node2.equals((Object)node1));
1547:       assertFalse(node2.equals((Object)node3));
1548:       assertFalse(node2.equals((Object)node0));
1549:       assertFalse(node4.equals((Object)node3));
1550:       assertFalse(node4.equals((Object)node0));
1551:       assertFalse(node4.equals((Object)node1));
1552:       assertNotSame(node0, node1);
1553:       assertNotSame(node0, node3);
1554:       assertSame(node2, node4);
1555:       assertSame(node4, node2);
1556:       assertNotNull(node4);
1557:       assertFalse(node0.isNE());
1558:       assertFalse(node0.isIf());
1559:       assertFalse(node0.isDelProp());
1560:       assertFalse(node0.isCase());
1561:       assertFalse(node0.isEmpty());
1562:       assertFalse(node0.isIn());
1563:       assertFalse(node0.isGetterDef());
1564:       assertFalse(node0.isTrue());
1565:       assertFalse(node0.isVoid());
1566:       assertFalse(node0.isTry());
1567:       assertFalse(node0.isCatch());
1568:       assertFalse(node0.isFor());
1569:       assertFalse(node0.isHook());
1570:       assertFalse(node0.isComma());
1571:       assertFalse(node0.isRegExp());
1572:       assertFalse(node0.isGetProp());
1573:       assertFalse(node0.isSetterDef());
1574:       assertFalse(node0.isAnd());
1575:       assertFalse(node0.isNot());
1576:       assertFalse(node0.isObjectLit());
1577:       assertFalse(node0.isDebugger());
1578:       assertFalse(node0.isInc());
1579:       assertFalse(node0.isThrow());
1580:       assertFalse(node0.isFalse());
1581:       assertFalse(node0.isContinue());
1582:       assertFalse(node0.isCast());
1583:       assertEquals(40, node0.getType());
1584:       assertFalse(node0.isFunction());
1585:       assertFalse(node0.isLabel());
1586:       assertFalse(node0.isReturn());
1587:       assertFalse(node0.isAssignAdd());
1588:       assertFalse(node0.isLabelName());
1589:       assertEquals((-1), node0.getLineno());
1590:       assertFalse(node0.isNumber());
1591:       assertEquals((-1), node0.getSourcePosition());
1592:       assertFalse(node0.isOr());
1593:       assertFalse(node0.isExprResult());
1594:       assertFalse(node0.isBlock());
1595:       assertFalse(node0.isScript());
1596:       assertFalse(node0.hasOneChild());
1597:       assertFalse(node0.isWhile());
1598:       assertTrue(node0.isString());
1599:       assertFalse(node0.isGetElem());
1600:       assertFalse(node0.isCall());
1601:       assertFalse(node0.isDec());
1602:       assertFalse(node0.hasChildren());
1603:       assertFalse(node0.isInstanceOf());
1604:       assertFalse(node0.isAssign());
1605:       assertFalse(node0.isWith());
1606:       assertFalse(node0.hasMoreThanOneChild());
1607:       assertFalse(node0.isTypeOf());
1608:       assertFalse(node0.isParamList());
1609:       assertFalse(node0.isThis());
1610:       assertFalse(node0.isNull());
1611:       assertFalse(node0.isBreak());
1612:       assertFalse(node0.isName());
1613:       assertFalse(node0.isStringKey());
1614:       assertEquals((-1), node0.getCharno());
1615:       assertFalse(node0.isNew());
1616:       assertFalse(node0.isAdd());
1617:       assertFalse(node0.isDefaultCase());
1618:       assertFalse(node0.isArrayLit());
1619:       assertFalse(node0.isSwitch());
1620:       assertFalse(node0.isDo());
1621:       assertFalse(node0.isVar());
1622:       assertEquals(0, node0.getChildCount());
1623:       assertEquals((-1), node2.getCharno());
1624:       assertFalse(node2.isHook());
1625:       assertFalse(node2.isSwitch());
1626:       assertFalse(node2.isThrow());
1627:       assertFalse(node2.isCase());
1628:       assertEquals(116, node2.getType());
1629:       assertFalse(node2.isIn());
1630:       assertFalse(node2.isString());
1631:       assertFalse(node2.isInc());
1632:       assertFalse(node2.isGetProp());
1633:       assertFalse(node2.isComma());
1634:       assertFalse(node2.isIf());
1635:       assertFalse(node2.isThis());
1636:       assertFalse(node2.isFor());
1637:       assertFalse(node2.isNE());
1638:       assertFalse(node2.isWith());
1639:       assertFalse(node2.isDelProp());
1640:       assertFalse(node2.isInstanceOf());
1641:       assertFalse(node2.isExprResult());
1642:       assertFalse(node2.isVoid());
1643:       assertFalse(node2.isTry());
1644:       assertFalse(node2.isDefaultCase());
1645:       assertFalse(node2.isTrue());
1646:       assertFalse(node2.isGetterDef());
1647:       assertFalse(node2.isNumber());
1648:       assertFalse(node2.hasOneChild());
1649:       assertFalse(node2.isEmpty());
1650:       assertFalse(node2.isScript());
1651:       assertFalse(node2.isLabel());
1652:       assertFalse(node2.isAssignAdd());
1653:       assertEquals(0, node2.getChildCount());
1654:       assertFalse(node2.isParamList());
1655:       assertFalse(node2.isStringKey());
1656:       assertFalse(node2.isLabelName());
1657:       assertFalse(node2.isArrayLit());
1658:       assertFalse(node2.isNew());
1659:       assertFalse(node2.isBlock());
1660:       assertFalse(node2.isWhile());
1661:       assertFalse(node2.isVar());
1662:       assertFalse(node2.isDo());
1663:       assertFalse(node2.isSetterDef());
1664:       assertFalse(node2.isAdd());
1665:       assertEquals((-1), node2.getLineno());
1666:       assertFalse(node2.isOr());
1667:       assertFalse(node2.isDec());
1668:       assertFalse(node2.isNull());
1669:       assertFalse(node2.hasChildren());
1670:       assertFalse(node2.isReturn());
1671:       assertTrue(node2.isBreak());
1672:       assertFalse(node2.isName());
1673:       assertFalse(node2.isGetElem());
1674:       assertFalse(node2.isAssign());
1675:       assertFalse(node2.isTypeOf());
1676:       assertFalse(node2.isRegExp());
1677:       assertFalse(node2.hasMoreThanOneChild());
1678:       assertFalse(node2.isCall());
1679:       assertFalse(node2.isCatch());
1680:       assertFalse(node2.isDebugger());
1681:       assertFalse(node2.isFunction());
1682:       assertFalse(node2.isObjectLit());
1683:       assertFalse(node2.isNot());
1684:       assertEquals((-1), node2.getSourcePosition());
1685:       assertFalse(node2.isFalse());
1686:       assertFalse(node2.isAnd());
1687:       assertFalse(node2.isContinue());
1688:       assertFalse(node2.isCast());
1689:       assertFalse(node4.isWhile());
1690:       assertFalse(node4.isNew());
1691:       assertFalse(node4.isAdd());
1692:       assertFalse(node4.isDo());
1693:       assertFalse(node4.isVar());
1694:       assertFalse(node4.hasMoreThanOneChild());
1695:       assertFalse(node4.isAssignAdd());
1696:       assertFalse(node4.isContinue());
1697:       assertFalse(node4.isBlock());
1698:       assertFalse(node4.isReturn());
1699:       assertFalse(node4.isLabel());
1700:       assertFalse(node4.isDec());
1701:       assertFalse(node4.isNull());
1702:       assertFalse(node4.isTypeOf());
1703:       assertFalse(node4.isName());
1704:       assertFalse(node4.isGetElem());
1705:       assertFalse(node4.isCall());
1706:       assertFalse(node4.isSetterDef());
1707:       assertEquals((-1), node4.getLineno());
1708:       assertFalse(node4.isOr());
1709:       assertTrue(node4.isBreak());
1710:       assertFalse(node4.isFunction());
1711:       assertFalse(node4.isVoid());
1712:       assertFalse(node4.isExprResult());
1713:       assertFalse(node4.isCast());
1714:       assertFalse(node4.isAssign());
1715:       assertFalse(node4.isComma());
1716:       assertFalse(node4.hasChildren());
1717:       assertEquals((-1), node4.getSourcePosition());
1718:       assertFalse(node4.isGetProp());
1719:       assertFalse(node4.isAnd());
1720:       assertFalse(node4.isNot());
1721:       assertFalse(node4.isObjectLit());
1722:       assertFalse(node4.isDebugger());
1723:       assertFalse(node4.isSwitch());
1724:       assertFalse(node4.isString());
1725:       assertFalse(node4.isCase());
1726:       assertFalse(node4.isInc());
1727:       assertFalse(node4.isHook());
1728:       assertFalse(node4.isFalse());
1729:       assertFalse(node4.isThrow());
1730:       assertEquals(116, node4.getType());
1731:       assertFalse(node4.isDelProp());
1732:       assertFalse(node4.isNE());
1733:       assertFalse(node4.isIf());
1734:       assertFalse(node4.isEmpty());
1735:       assertFalse(node4.isIn());
1736:       assertFalse(node4.isTrue());
1737:       assertFalse(node4.isRegExp());
1738:       assertFalse(node4.isScript());
1739:       assertFalse(node4.isWith());
1740:       assertFalse(node4.isDefaultCase());
1741:       assertFalse(node4.isTry());
1742:       assertFalse(node4.hasOneChild());
1743:       assertFalse(node4.isInstanceOf());
1744:       assertEquals(0, node4.getChildCount());
1745:       assertFalse(node4.isCatch());
1746:       assertFalse(node4.isFor());
1747:       assertFalse(node4.isThis());
1748:       assertFalse(node4.isNumber());
1749:       assertFalse(node4.isGetterDef());
1750:       assertFalse(node4.isParamList());
1751:       assertFalse(node4.isLabelName());
1752:       assertFalse(node4.isArrayLit());
1753:       assertFalse(node4.isStringKey());
1754:       assertEquals((-1), node4.getCharno());
1755:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1756:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1757:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1758:       assertEquals(29, Node.JSDOC_INFO_PROP);
1759:       assertEquals(53, Node.INPUT_ID);
1760:       assertEquals(2, Node.POST_FLAG);
1761:       assertEquals(12, Node.COLUMN_BITS);
1762:       assertEquals(47, Node.IS_DISPATCHER);
1763:       assertEquals(1, Node.DECR_FLAG);
1764:       assertEquals(30, Node.VAR_ARGS_NAME);
1765:       assertEquals(32, Node.INCRDECR_PROP);
1766:       assertEquals(54, Node.SLASH_V);
1767:       assertEquals(46, Node.IS_NAMESPACE);
1768:       assertEquals(43, Node.IS_CONSTANT_NAME);
1769:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1770:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1771:       assertEquals(50, Node.FREE_CALL);
1772:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1773:       assertEquals(40, Node.ORIGINALNAME_PROP);
1774:       assertEquals(39, Node.EMPTY_BLOCK);
1775:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1776:       assertEquals(57, Node.LAST_PROP);
1777:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1778:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1779:       assertEquals(55, Node.INFERRED_FUNCTION);
1780:       assertEquals(49, Node.DIRECT_EVAL);
1781:       assertEquals(4095, Node.COLUMN_MASK);
1782:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1783:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1784:       assertEquals(48, Node.DIRECTIVES);
1785:       assertEquals(37, Node.OPT_ARG_NAME);
1786:       assertEquals(52, Node.LENGTH);
1787:       assertEquals(8, Node.FLAG_NO_THROWS);
1788:       assertEquals(56, Node.CHANGE_TIME);
1789:       assertEquals(36, Node.QUOTED_PROP);
1790:       assertEquals(57, Node.REFLECTED_OBJECT);
1791:       assertEquals(1, Node.DECR_FLAG);
1792:       assertEquals(12, Node.COLUMN_BITS);
1793:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1794:       assertEquals(57, Node.LAST_PROP);
1795:       assertEquals(49, Node.DIRECT_EVAL);
1796:       assertEquals(32, Node.INCRDECR_PROP);
1797:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1798:       assertEquals(37, Node.OPT_ARG_NAME);
1799:       assertEquals(47, Node.IS_DISPATCHER);
1800:       assertEquals(2, Node.POST_FLAG);
1801:       assertEquals(30, Node.VAR_ARGS_NAME);
1802:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1803:       assertEquals(40, Node.ORIGINALNAME_PROP);
1804:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1805:       assertEquals(46, Node.IS_NAMESPACE);
1806:       assertEquals(54, Node.SLASH_V);
1807:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1808:       assertEquals(50, Node.FREE_CALL);
1809:       assertEquals(55, Node.INFERRED_FUNCTION);
1810:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1811:       assertEquals(43, Node.IS_CONSTANT_NAME);
1812:       assertEquals(48, Node.DIRECTIVES);
1813:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1814:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1815:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1816:       assertEquals(4095, Node.COLUMN_MASK);
1817:       assertEquals(29, Node.JSDOC_INFO_PROP);
1818:       assertEquals(57, Node.REFLECTED_OBJECT);
1819:       assertEquals(56, Node.CHANGE_TIME);
1820:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1821:       assertEquals(39, Node.EMPTY_BLOCK);
1822:       assertEquals(53, Node.INPUT_ID);
1823:       assertEquals(36, Node.QUOTED_PROP);
1824:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1825:       assertEquals(52, Node.LENGTH);
1826:       assertEquals(8, Node.FLAG_NO_THROWS);
1827:       assertEquals(46, Node.IS_NAMESPACE);
1828:       assertEquals(12, Node.COLUMN_BITS);
1829:       assertEquals(32, Node.INCRDECR_PROP);
1830:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1831:       assertEquals(49, Node.DIRECT_EVAL);
1832:       assertEquals(37, Node.OPT_ARG_NAME);
1833:       assertEquals(54, Node.SLASH_V);
1834:       assertEquals(56, Node.CHANGE_TIME);
1835:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1836:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1837:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1838:       assertEquals(1, Node.DECR_FLAG);
1839:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1840:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1841:       assertEquals(8, Node.FLAG_NO_THROWS);
1842:       assertEquals(55, Node.INFERRED_FUNCTION);
1843:       assertEquals(4095, Node.COLUMN_MASK);
1844:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1845:       assertEquals(50, Node.FREE_CALL);
1846:       assertEquals(36, Node.QUOTED_PROP);
1847:       assertEquals(48, Node.DIRECTIVES);
1848:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1849:       assertEquals(43, Node.IS_CONSTANT_NAME);
1850:       assertEquals(57, Node.REFLECTED_OBJECT);
1851:       assertEquals(40, Node.ORIGINALNAME_PROP);
1852:       assertEquals(53, Node.INPUT_ID);
1853:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1854:       assertEquals(29, Node.JSDOC_INFO_PROP);
1855:       assertEquals(52, Node.LENGTH);
1856:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1857:       assertEquals(57, Node.LAST_PROP);
1858:       assertEquals(47, Node.IS_DISPATCHER);
1859:       assertEquals(2, Node.POST_FLAG);
1860:       assertEquals(30, Node.VAR_ARGS_NAME);
1861:       assertEquals(39, Node.EMPTY_BLOCK);
1862:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1863:   }
1864: }
RegularFileObject[/tmp/EvoSuite_173_1628158396997/com/google/javascript/rhino/Node_173_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:17 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_173_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_173_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_173_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.javascript.rhino.jstype.TemplatizedType",
335:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.JSTypeExpression",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.common.collect.Platform",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.common.collect.Iterators$12",
362:       "com.google.javascript.rhino.jstype.TernaryValue",
363:       "com.google.javascript.rhino.jstype.JSType$2",
364:       "com.google.javascript.rhino.jstype.JSType$TypePair"
365:     );
366:   }
367: }

[MASTER] 10:13:17.363 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean0);

Node node0 = Node.newString("");
assertNotNull(node0);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);

int int0 = node0.getSourcePosition();
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals((-1), int0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);

Node node1 = Node.newString(1255, "Use SerializedForm");
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertEquals(1255, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

boolean boolean1 = node0.isThis();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertNotSame(node0, node1);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(boolean1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);

node1.setQuotedString();
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertEquals(1255, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node node2 = new Node(116);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertEquals((-1), node2.getCharno());
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isCase());
assertEquals(116, node2.getType());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isIf());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isWith());
assertFalse(node2.isDelProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isScript());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertTrue(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

String string0 = node0.getString();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertNotSame(node0, node1);
assertNotNull(string0);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals("", string0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);

node1.putBooleanProp(49, false);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertEquals(1255, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNull(staticSourceFile0);
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertEquals(1255, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertNotSame(node0, node1);
assertNotNull(iterable0);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(iterable0.contains(node0));

boolean boolean2 = node1.isEmpty();
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertNotSame(node1, node0);
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertEquals(1255, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(boolean2);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node node3 = Node.newString("Use SerializedForm", 1325, 1255);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertNotSame(node3, node1);
assertNotSame(node3, node0);
assertNotNull(node3);
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isScript());
assertEquals(1255, node3.getCharno());
assertFalse(node3.isExprResult());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isComma());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isLabelName());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetProp());
assertFalse(node3.isNumber());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isCase());
assertFalse(node3.isContinue());
assertTrue(node3.isString());
assertFalse(node3.isBlock());
assertFalse(node3.isHook());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isThrow());
assertFalse(node3.isSetterDef());
assertEquals(1325, node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node3.isInc());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertEquals(40, node3.getType());
assertFalse(node3.isCatch());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isFor());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isParamList());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetterDef());
assertFalse(node3.isWhile());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isEmpty());
assertFalse(node3.isVar());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertEquals(5428455, node3.getSourcePosition());
assertFalse(node3.isOr());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean3 = node3.isOptionalArg();
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertNotSame(node3, node1);
assertNotSame(node3, node0);
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isScript());
assertEquals(1255, node3.getCharno());
assertFalse(node3.isExprResult());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isComma());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isLabelName());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetProp());
assertFalse(node3.isNumber());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isCase());
assertFalse(node3.isContinue());
assertTrue(node3.isString());
assertFalse(node3.isBlock());
assertFalse(node3.isHook());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isThrow());
assertFalse(node3.isSetterDef());
assertEquals(1325, node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node3.isInc());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertEquals(40, node3.getType());
assertFalse(node3.isCatch());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isFor());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isParamList());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetterDef());
assertFalse(node3.isWhile());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isEmpty());
assertFalse(node3.isVar());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertEquals(5428455, node3.getSourcePosition());
assertFalse(node3.isOr());
assertFalse(boolean3);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean4 = node2.isWith();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertEquals((-1), node2.getCharno());
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isCase());
assertEquals(116, node2.getType());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isIf());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isWith());
assertFalse(node2.isDelProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isScript());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertTrue(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(boolean4);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

Node node4 = node2.useSourceInfoIfMissingFrom(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertSame(node2, node4);
assertSame(node4, node2);
assertNotNull(node4);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWhile());
assertTrue(node0.isString());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isCase());
assertEquals(116, node2.getType());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isIf());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isWith());
assertFalse(node2.isDelProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isScript());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertTrue(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node4.isWhile());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isDo());
assertFalse(node4.isVar());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isContinue());
assertFalse(node4.isBlock());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertFalse(node4.isDec());
assertFalse(node4.isNull());
assertFalse(node4.isTypeOf());
assertFalse(node4.isName());
assertFalse(node4.isGetElem());
assertFalse(node4.isCall());
assertFalse(node4.isSetterDef());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isOr());
assertTrue(node4.isBreak());
assertFalse(node4.isFunction());
assertFalse(node4.isVoid());
assertFalse(node4.isExprResult());
assertFalse(node4.isCast());
assertFalse(node4.isAssign());
assertFalse(node4.isComma());
assertFalse(node4.hasChildren());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isGetProp());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertFalse(node4.isSwitch());
assertFalse(node4.isString());
assertFalse(node4.isCase());
assertFalse(node4.isInc());
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertEquals(116, node4.getType());
assertFalse(node4.isDelProp());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isEmpty());
assertFalse(node4.isIn());
assertFalse(node4.isTrue());
assertFalse(node4.isRegExp());
assertFalse(node4.isScript());
assertFalse(node4.isWith());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isInstanceOf());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isCatch());
assertFalse(node4.isFor());
assertFalse(node4.isThis());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isParamList());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertFalse(node4.isStringKey());
assertEquals((-1), node4.getCharno());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);


[MASTER] 10:13:52.109 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:13:52.424 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:13:52.670 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/8
* Done!

* Computation finished
