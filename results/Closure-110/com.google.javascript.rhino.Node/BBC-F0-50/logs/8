* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 8378
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3049224051
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:41:16.222 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:41:19.055 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 17:41:19.056 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 17:41:19.072 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - true in context: com.google.javascript.rhino.Node:useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 17:41:41.309 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:42:05.597 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 605s and 520 generations, 233900 statements, best individual has fitness: 2798.0
* Minimizing test suite
[MASTER] 17:52:45.114 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 795
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 612
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 105
* Number of covered goals: 105
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 464
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 4536
* Number of covered goals: 2283
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 714
* Number of covered goals: 573
* Generated 755 tests with total length 9809
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:54:01.033 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6780666666666667% of time used, but only 46/755 tests minimized), falling back to using all assertions
[MASTER] 17:54:20.481 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
[MASTER] 17:54:33.875 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 13 seconds more than allowed.
[MASTER] 17:54:38.525 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_52_1629222878289/com/google/javascript/rhino/Node_52_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_52_1629222878289/com/google/javascript/rhino/Node_52_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:38.525 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:38.525 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:38.528 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 128
[MASTER] 17:54:38.530 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_52_1629222878289/com/google/javascript/rhino/Node_52_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:38 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.StaticSourceFile;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_52_tmp__ESTest extends Node_52_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(1.0);
23:       assertEquals(0, node0.getChildCount());
24:       assertFalse(node0.isParamList());
25:       assertFalse(node0.isNull());
26:       assertFalse(node0.isStringKey());
27:       assertFalse(node0.isName());
28:       assertFalse(node0.isCatch());
29:       assertFalse(node0.isCall());
30:       assertFalse(node0.isAdd());
31:       assertFalse(node0.isNew());
32:       assertFalse(node0.isVoid());
33:       assertFalse(node0.isFunction());
34:       assertFalse(node0.isVar());
35:       assertFalse(node0.isTrue());
36:       assertFalse(node0.isEmpty());
37:       assertFalse(node0.isDo());
38:       assertFalse(node0.isDefaultCase());
39:       assertFalse(node0.isSetterDef());
40:       assertFalse(node0.isLabel());
41:       assertFalse(node0.isAssignAdd());
42:       assertEquals((-1), node0.getLineno());
43:       assertFalse(node0.isIn());
44:       assertFalse(node0.isNE());
45:       assertEquals(39, node0.getType());
46:       assertFalse(node0.isLabelName());
47:       assertFalse(node0.isIf());
48:       assertFalse(node0.hasMoreThanOneChild());
49:       assertFalse(node0.isArrayLit());
50:       assertFalse(node0.isTry());
51:       assertFalse(node0.isRegExp());
52:       assertFalse(node0.isSwitch());
53:       assertEquals((-1), node0.getCharno());
54:       assertFalse(node0.isBlock());
55:       assertFalse(node0.isHook());
56:       assertFalse(node0.isFor());
57:       assertFalse(node0.isCase());
58:       assertFalse(node0.isGetterDef());
59:       assertFalse(node0.isScript());
60:       assertFalse(node0.hasOneChild());
61:       assertFalse(node0.isComma());
62:       assertFalse(node0.isThis());
63:       assertFalse(node0.isAnd());
64:       assertFalse(node0.isFalse());
65:       assertFalse(node0.isWith());
66:       assertFalse(node0.isInstanceOf());
67:       assertFalse(node0.isBreak());
68:       assertFalse(node0.isExprResult());
69:       assertFalse(node0.isThrow());
70:       assertFalse(node0.isInc());
71:       assertFalse(node0.isOr());
72:       assertTrue(node0.isNumber());
73:       assertFalse(node0.isDec());
74:       assertEquals((-1), node0.getSourcePosition());
75:       assertFalse(node0.hasChildren());
76:       assertFalse(node0.isReturn());
77:       assertFalse(node0.isAssign());
78:       assertFalse(node0.isContinue());
79:       assertFalse(node0.isDelProp());
80:       assertFalse(node0.isTypeOf());
81:       assertFalse(node0.isCast());
82:       assertFalse(node0.isGetElem());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isNot());
85:       assertFalse(node0.isWhile());
86:       assertFalse(node0.isString());
87:       assertFalse(node0.isObjectLit());
88:       assertFalse(node0.isGetProp());
89:       assertNotNull(node0);
90:       assertEquals(40, Node.ORIGINALNAME_PROP);
91:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
92:       assertEquals(50, Node.FREE_CALL);
93:       assertEquals(57, Node.REFLECTED_OBJECT);
94:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
95:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
96:       assertEquals(52, Node.LENGTH);
97:       assertEquals(8, Node.FLAG_NO_THROWS);
98:       assertEquals(57, Node.LAST_PROP);
99:       assertEquals(15, Node.NO_SIDE_EFFECTS);
100:       assertEquals(39, Node.EMPTY_BLOCK);
101:       assertEquals(30, Node.VAR_ARGS_NAME);
102:       assertEquals(46, Node.IS_NAMESPACE);
103:       assertEquals(51, Node.STATIC_SOURCE_FILE);
104:       assertEquals(2, Node.POST_FLAG);
105:       assertEquals(54, Node.SLASH_V);
106:       assertEquals(43, Node.IS_CONSTANT_NAME);
107:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
108:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
109:       assertEquals(47, Node.IS_DISPATCHER);
110:       assertEquals(32, Node.INCRDECR_PROP);
111:       assertEquals(29, Node.JSDOC_INFO_PROP);
112:       assertEquals(53, Node.INPUT_ID);
113:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
114:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
115:       assertEquals(55, Node.INFERRED_FUNCTION);
116:       assertEquals(1, Node.DECR_FLAG);
117:       assertEquals(4095, Node.COLUMN_MASK);
118:       assertEquals(12, Node.COLUMN_BITS);
119:       assertEquals(36, Node.QUOTED_PROP);
120:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
121:       assertEquals(37, Node.OPT_ARG_NAME);
122:       assertEquals(48, Node.DIRECTIVES);
123:       assertEquals(56, Node.CHANGE_TIME);
124:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
125:       assertEquals(49, Node.DIRECT_EVAL);
126:       
127:       Iterable<Node> iterable0 = node0.children();
128:       assertFalse(iterable0.contains(node0));
129:       assertEquals(0, node0.getChildCount());
130:       assertFalse(node0.isParamList());
131:       assertFalse(node0.isNull());
132:       assertFalse(node0.isStringKey());
133:       assertFalse(node0.isName());
134:       assertFalse(node0.isCatch());
135:       assertFalse(node0.isCall());
136:       assertFalse(node0.isAdd());
137:       assertFalse(node0.isNew());
138:       assertFalse(node0.isVoid());
139:       assertFalse(node0.isFunction());
140:       assertFalse(node0.isVar());
141:       assertFalse(node0.isTrue());
142:       assertFalse(node0.isEmpty());
143:       assertFalse(node0.isDo());
144:       assertFalse(node0.isDefaultCase());
145:       assertFalse(node0.isSetterDef());
146:       assertFalse(node0.isLabel());
147:       assertFalse(node0.isAssignAdd());
148:       assertEquals((-1), node0.getLineno());
149:       assertFalse(node0.isIn());
150:       assertFalse(node0.isNE());
151:       assertEquals(39, node0.getType());
152:       assertFalse(node0.isLabelName());
153:       assertFalse(node0.isIf());
154:       assertFalse(node0.hasMoreThanOneChild());
155:       assertFalse(node0.isArrayLit());
156:       assertFalse(node0.isTry());
157:       assertFalse(node0.isRegExp());
158:       assertFalse(node0.isSwitch());
159:       assertEquals((-1), node0.getCharno());
160:       assertFalse(node0.isBlock());
161:       assertFalse(node0.isHook());
162:       assertFalse(node0.isFor());
163:       assertFalse(node0.isCase());
164:       assertFalse(node0.isGetterDef());
165:       assertFalse(node0.isScript());
166:       assertFalse(node0.hasOneChild());
167:       assertFalse(node0.isComma());
168:       assertFalse(node0.isThis());
169:       assertFalse(node0.isAnd());
170:       assertFalse(node0.isFalse());
171:       assertFalse(node0.isWith());
172:       assertFalse(node0.isInstanceOf());
173:       assertFalse(node0.isBreak());
174:       assertFalse(node0.isExprResult());
175:       assertFalse(node0.isThrow());
176:       assertFalse(node0.isInc());
177:       assertFalse(node0.isOr());
178:       assertTrue(node0.isNumber());
179:       assertFalse(node0.isDec());
180:       assertEquals((-1), node0.getSourcePosition());
181:       assertFalse(node0.hasChildren());
182:       assertFalse(node0.isReturn());
183:       assertFalse(node0.isAssign());
184:       assertFalse(node0.isContinue());
185:       assertFalse(node0.isDelProp());
186:       assertFalse(node0.isTypeOf());
187:       assertFalse(node0.isCast());
188:       assertFalse(node0.isGetElem());
189:       assertFalse(node0.isDebugger());
190:       assertFalse(node0.isNot());
191:       assertFalse(node0.isWhile());
192:       assertFalse(node0.isString());
193:       assertFalse(node0.isObjectLit());
194:       assertFalse(node0.isGetProp());
195:       assertNotNull(iterable0);
196:       assertEquals(40, Node.ORIGINALNAME_PROP);
197:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
198:       assertEquals(50, Node.FREE_CALL);
199:       assertEquals(57, Node.REFLECTED_OBJECT);
200:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
201:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
202:       assertEquals(52, Node.LENGTH);
203:       assertEquals(8, Node.FLAG_NO_THROWS);
204:       assertEquals(57, Node.LAST_PROP);
205:       assertEquals(15, Node.NO_SIDE_EFFECTS);
206:       assertEquals(39, Node.EMPTY_BLOCK);
207:       assertEquals(30, Node.VAR_ARGS_NAME);
208:       assertEquals(46, Node.IS_NAMESPACE);
209:       assertEquals(51, Node.STATIC_SOURCE_FILE);
210:       assertEquals(2, Node.POST_FLAG);
211:       assertEquals(54, Node.SLASH_V);
212:       assertEquals(43, Node.IS_CONSTANT_NAME);
213:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
214:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
215:       assertEquals(47, Node.IS_DISPATCHER);
216:       assertEquals(32, Node.INCRDECR_PROP);
217:       assertEquals(29, Node.JSDOC_INFO_PROP);
218:       assertEquals(53, Node.INPUT_ID);
219:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
220:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
221:       assertEquals(55, Node.INFERRED_FUNCTION);
222:       assertEquals(1, Node.DECR_FLAG);
223:       assertEquals(4095, Node.COLUMN_MASK);
224:       assertEquals(12, Node.COLUMN_BITS);
225:       assertEquals(36, Node.QUOTED_PROP);
226:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
227:       assertEquals(37, Node.OPT_ARG_NAME);
228:       assertEquals(48, Node.DIRECTIVES);
229:       assertEquals(56, Node.CHANGE_TIME);
230:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
231:       assertEquals(49, Node.DIRECT_EVAL);
232:       
233:       boolean boolean0 = node0.isAnd();
234:       assertEquals(0, node0.getChildCount());
235:       assertFalse(node0.isParamList());
236:       assertFalse(node0.isNull());
237:       assertFalse(node0.isStringKey());
238:       assertFalse(node0.isName());
239:       assertFalse(node0.isCatch());
240:       assertFalse(node0.isCall());
241:       assertFalse(node0.isAdd());
242:       assertFalse(node0.isNew());
243:       assertFalse(node0.isVoid());
244:       assertFalse(node0.isFunction());
245:       assertFalse(node0.isVar());
246:       assertFalse(node0.isTrue());
247:       assertFalse(node0.isEmpty());
248:       assertFalse(node0.isDo());
249:       assertFalse(node0.isDefaultCase());
250:       assertFalse(node0.isSetterDef());
251:       assertFalse(node0.isLabel());
252:       assertFalse(node0.isAssignAdd());
253:       assertEquals((-1), node0.getLineno());
254:       assertFalse(node0.isIn());
255:       assertFalse(node0.isNE());
256:       assertEquals(39, node0.getType());
257:       assertFalse(node0.isLabelName());
258:       assertFalse(node0.isIf());
259:       assertFalse(node0.hasMoreThanOneChild());
260:       assertFalse(node0.isArrayLit());
261:       assertFalse(node0.isTry());
262:       assertFalse(node0.isRegExp());
263:       assertFalse(node0.isSwitch());
264:       assertEquals((-1), node0.getCharno());
265:       assertFalse(node0.isBlock());
266:       assertFalse(node0.isHook());
267:       assertFalse(node0.isFor());
268:       assertFalse(node0.isCase());
269:       assertFalse(node0.isGetterDef());
270:       assertFalse(node0.isScript());
271:       assertFalse(node0.hasOneChild());
272:       assertFalse(node0.isComma());
273:       assertFalse(node0.isThis());
274:       assertFalse(node0.isAnd());
275:       assertFalse(node0.isFalse());
276:       assertFalse(node0.isWith());
277:       assertFalse(node0.isInstanceOf());
278:       assertFalse(node0.isBreak());
279:       assertFalse(node0.isExprResult());
280:       assertFalse(node0.isThrow());
281:       assertFalse(node0.isInc());
282:       assertFalse(node0.isOr());
283:       assertTrue(node0.isNumber());
284:       assertFalse(node0.isDec());
285:       assertEquals((-1), node0.getSourcePosition());
286:       assertFalse(node0.hasChildren());
287:       assertFalse(node0.isReturn());
288:       assertFalse(node0.isAssign());
289:       assertFalse(node0.isContinue());
290:       assertFalse(node0.isDelProp());
291:       assertFalse(node0.isTypeOf());
292:       assertFalse(node0.isCast());
293:       assertFalse(node0.isGetElem());
294:       assertFalse(node0.isDebugger());
295:       assertFalse(node0.isNot());
296:       assertFalse(node0.isWhile());
297:       assertFalse(node0.isString());
298:       assertFalse(node0.isObjectLit());
299:       assertFalse(node0.isGetProp());
300:       assertEquals(40, Node.ORIGINALNAME_PROP);
301:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
302:       assertEquals(50, Node.FREE_CALL);
303:       assertEquals(57, Node.REFLECTED_OBJECT);
304:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
305:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
306:       assertEquals(52, Node.LENGTH);
307:       assertEquals(8, Node.FLAG_NO_THROWS);
308:       assertEquals(57, Node.LAST_PROP);
309:       assertEquals(15, Node.NO_SIDE_EFFECTS);
310:       assertEquals(39, Node.EMPTY_BLOCK);
311:       assertEquals(30, Node.VAR_ARGS_NAME);
312:       assertEquals(46, Node.IS_NAMESPACE);
313:       assertEquals(51, Node.STATIC_SOURCE_FILE);
314:       assertEquals(2, Node.POST_FLAG);
315:       assertEquals(54, Node.SLASH_V);
316:       assertEquals(43, Node.IS_CONSTANT_NAME);
317:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
318:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
319:       assertEquals(47, Node.IS_DISPATCHER);
320:       assertEquals(32, Node.INCRDECR_PROP);
321:       assertEquals(29, Node.JSDOC_INFO_PROP);
322:       assertEquals(53, Node.INPUT_ID);
323:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
325:       assertEquals(55, Node.INFERRED_FUNCTION);
326:       assertEquals(1, Node.DECR_FLAG);
327:       assertEquals(4095, Node.COLUMN_MASK);
328:       assertEquals(12, Node.COLUMN_BITS);
329:       assertEquals(36, Node.QUOTED_PROP);
330:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
331:       assertEquals(37, Node.OPT_ARG_NAME);
332:       assertEquals(48, Node.DIRECTIVES);
333:       assertEquals(56, Node.CHANGE_TIME);
334:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
335:       assertEquals(49, Node.DIRECT_EVAL);
336:       assertFalse(boolean0);
337:       
338:       boolean boolean1 = node0.isOnlyModifiesArgumentsCall();
339:       assertEquals(0, node0.getChildCount());
340:       assertFalse(node0.isParamList());
341:       assertFalse(node0.isNull());
342:       assertFalse(node0.isStringKey());
343:       assertFalse(node0.isName());
344:       assertFalse(node0.isCatch());
345:       assertFalse(node0.isCall());
346:       assertFalse(node0.isAdd());
347:       assertFalse(node0.isNew());
348:       assertFalse(node0.isVoid());
349:       assertFalse(node0.isFunction());
350:       assertFalse(node0.isVar());
351:       assertFalse(node0.isTrue());
352:       assertFalse(node0.isEmpty());
353:       assertFalse(node0.isDo());
354:       assertFalse(node0.isDefaultCase());
355:       assertFalse(node0.isSetterDef());
356:       assertFalse(node0.isLabel());
357:       assertFalse(node0.isAssignAdd());
358:       assertEquals((-1), node0.getLineno());
359:       assertFalse(node0.isIn());
360:       assertFalse(node0.isNE());
361:       assertEquals(39, node0.getType());
362:       assertFalse(node0.isLabelName());
363:       assertFalse(node0.isIf());
364:       assertFalse(node0.hasMoreThanOneChild());
365:       assertFalse(node0.isArrayLit());
366:       assertFalse(node0.isTry());
367:       assertFalse(node0.isRegExp());
368:       assertFalse(node0.isSwitch());
369:       assertEquals((-1), node0.getCharno());
370:       assertFalse(node0.isBlock());
371:       assertFalse(node0.isHook());
372:       assertFalse(node0.isFor());
373:       assertFalse(node0.isCase());
374:       assertFalse(node0.isGetterDef());
375:       assertFalse(node0.isScript());
376:       assertFalse(node0.hasOneChild());
377:       assertFalse(node0.isComma());
378:       assertFalse(node0.isThis());
379:       assertFalse(node0.isAnd());
380:       assertFalse(node0.isFalse());
381:       assertFalse(node0.isWith());
382:       assertFalse(node0.isInstanceOf());
383:       assertFalse(node0.isBreak());
384:       assertFalse(node0.isExprResult());
385:       assertFalse(node0.isThrow());
386:       assertFalse(node0.isInc());
387:       assertFalse(node0.isOr());
388:       assertTrue(node0.isNumber());
389:       assertFalse(node0.isDec());
390:       assertEquals((-1), node0.getSourcePosition());
391:       assertFalse(node0.hasChildren());
392:       assertFalse(node0.isReturn());
393:       assertFalse(node0.isAssign());
394:       assertFalse(node0.isContinue());
395:       assertFalse(node0.isDelProp());
396:       assertFalse(node0.isTypeOf());
397:       assertFalse(node0.isCast());
398:       assertFalse(node0.isGetElem());
399:       assertFalse(node0.isDebugger());
400:       assertFalse(node0.isNot());
401:       assertFalse(node0.isWhile());
402:       assertFalse(node0.isString());
403:       assertFalse(node0.isObjectLit());
404:       assertFalse(node0.isGetProp());
405:       assertTrue(boolean1 == boolean0);
406:       assertEquals(40, Node.ORIGINALNAME_PROP);
407:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
408:       assertEquals(50, Node.FREE_CALL);
409:       assertEquals(57, Node.REFLECTED_OBJECT);
410:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
411:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
412:       assertEquals(52, Node.LENGTH);
413:       assertEquals(8, Node.FLAG_NO_THROWS);
414:       assertEquals(57, Node.LAST_PROP);
415:       assertEquals(15, Node.NO_SIDE_EFFECTS);
416:       assertEquals(39, Node.EMPTY_BLOCK);
417:       assertEquals(30, Node.VAR_ARGS_NAME);
418:       assertEquals(46, Node.IS_NAMESPACE);
419:       assertEquals(51, Node.STATIC_SOURCE_FILE);
420:       assertEquals(2, Node.POST_FLAG);
421:       assertEquals(54, Node.SLASH_V);
422:       assertEquals(43, Node.IS_CONSTANT_NAME);
423:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
424:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
425:       assertEquals(47, Node.IS_DISPATCHER);
426:       assertEquals(32, Node.INCRDECR_PROP);
427:       assertEquals(29, Node.JSDOC_INFO_PROP);
428:       assertEquals(53, Node.INPUT_ID);
429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
430:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
431:       assertEquals(55, Node.INFERRED_FUNCTION);
432:       assertEquals(1, Node.DECR_FLAG);
433:       assertEquals(4095, Node.COLUMN_MASK);
434:       assertEquals(12, Node.COLUMN_BITS);
435:       assertEquals(36, Node.QUOTED_PROP);
436:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
437:       assertEquals(37, Node.OPT_ARG_NAME);
438:       assertEquals(48, Node.DIRECTIVES);
439:       assertEquals(56, Node.CHANGE_TIME);
440:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
441:       assertEquals(49, Node.DIRECT_EVAL);
442:       assertFalse(boolean1);
443:       
444:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
445:       assertEquals(0, node0.getChildCount());
446:       assertFalse(node0.isParamList());
447:       assertFalse(node0.isNull());
448:       assertFalse(node0.isStringKey());
449:       assertFalse(node0.isName());
450:       assertFalse(node0.isCatch());
451:       assertFalse(node0.isCall());
452:       assertFalse(node0.isAdd());
453:       assertFalse(node0.isNew());
454:       assertFalse(node0.isVoid());
455:       assertFalse(node0.isFunction());
456:       assertFalse(node0.isVar());
457:       assertFalse(node0.isTrue());
458:       assertFalse(node0.isEmpty());
459:       assertFalse(node0.isDo());
460:       assertFalse(node0.isDefaultCase());
461:       assertFalse(node0.isSetterDef());
462:       assertFalse(node0.isLabel());
463:       assertFalse(node0.isAssignAdd());
464:       assertEquals((-1), node0.getLineno());
465:       assertFalse(node0.isIn());
466:       assertFalse(node0.isNE());
467:       assertEquals(39, node0.getType());
468:       assertFalse(node0.isLabelName());
469:       assertFalse(node0.isIf());
470:       assertFalse(node0.hasMoreThanOneChild());
471:       assertFalse(node0.isArrayLit());
472:       assertFalse(node0.isTry());
473:       assertFalse(node0.isRegExp());
474:       assertFalse(node0.isSwitch());
475:       assertEquals((-1), node0.getCharno());
476:       assertFalse(node0.isBlock());
477:       assertFalse(node0.isHook());
478:       assertFalse(node0.isFor());
479:       assertFalse(node0.isCase());
480:       assertFalse(node0.isGetterDef());
481:       assertFalse(node0.isScript());
482:       assertFalse(node0.hasOneChild());
483:       assertFalse(node0.isComma());
484:       assertFalse(node0.isThis());
485:       assertFalse(node0.isAnd());
486:       assertFalse(node0.isFalse());
487:       assertFalse(node0.isWith());
488:       assertFalse(node0.isInstanceOf());
489:       assertFalse(node0.isBreak());
490:       assertFalse(node0.isExprResult());
491:       assertFalse(node0.isThrow());
492:       assertFalse(node0.isInc());
493:       assertFalse(node0.isOr());
494:       assertTrue(node0.isNumber());
495:       assertFalse(node0.isDec());
496:       assertEquals((-1), node0.getSourcePosition());
497:       assertFalse(node0.hasChildren());
498:       assertFalse(node0.isReturn());
499:       assertFalse(node0.isAssign());
500:       assertFalse(node0.isContinue());
501:       assertFalse(node0.isDelProp());
502:       assertFalse(node0.isTypeOf());
503:       assertFalse(node0.isCast());
504:       assertFalse(node0.isGetElem());
505:       assertFalse(node0.isDebugger());
506:       assertFalse(node0.isNot());
507:       assertFalse(node0.isWhile());
508:       assertFalse(node0.isString());
509:       assertFalse(node0.isObjectLit());
510:       assertFalse(node0.isGetProp());
511:       assertNull(staticSourceFile0);
512:       assertEquals(40, Node.ORIGINALNAME_PROP);
513:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
514:       assertEquals(50, Node.FREE_CALL);
515:       assertEquals(57, Node.REFLECTED_OBJECT);
516:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
517:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
518:       assertEquals(52, Node.LENGTH);
519:       assertEquals(8, Node.FLAG_NO_THROWS);
520:       assertEquals(57, Node.LAST_PROP);
521:       assertEquals(15, Node.NO_SIDE_EFFECTS);
522:       assertEquals(39, Node.EMPTY_BLOCK);
523:       assertEquals(30, Node.VAR_ARGS_NAME);
524:       assertEquals(46, Node.IS_NAMESPACE);
525:       assertEquals(51, Node.STATIC_SOURCE_FILE);
526:       assertEquals(2, Node.POST_FLAG);
527:       assertEquals(54, Node.SLASH_V);
528:       assertEquals(43, Node.IS_CONSTANT_NAME);
529:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
530:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
531:       assertEquals(47, Node.IS_DISPATCHER);
532:       assertEquals(32, Node.INCRDECR_PROP);
533:       assertEquals(29, Node.JSDOC_INFO_PROP);
534:       assertEquals(53, Node.INPUT_ID);
535:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
536:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
537:       assertEquals(55, Node.INFERRED_FUNCTION);
538:       assertEquals(1, Node.DECR_FLAG);
539:       assertEquals(4095, Node.COLUMN_MASK);
540:       assertEquals(12, Node.COLUMN_BITS);
541:       assertEquals(36, Node.QUOTED_PROP);
542:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
543:       assertEquals(37, Node.OPT_ARG_NAME);
544:       assertEquals(48, Node.DIRECTIVES);
545:       assertEquals(56, Node.CHANGE_TIME);
546:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
547:       assertEquals(49, Node.DIRECT_EVAL);
548:       
549:       node0.detachChildren();
550:       assertEquals(0, node0.getChildCount());
551:       assertFalse(node0.isParamList());
552:       assertFalse(node0.isNull());
553:       assertFalse(node0.isStringKey());
554:       assertFalse(node0.isName());
555:       assertFalse(node0.isCatch());
556:       assertFalse(node0.isCall());
557:       assertFalse(node0.isAdd());
558:       assertFalse(node0.isNew());
559:       assertFalse(node0.isVoid());
560:       assertFalse(node0.isFunction());
561:       assertFalse(node0.isVar());
562:       assertFalse(node0.isTrue());
563:       assertFalse(node0.isEmpty());
564:       assertFalse(node0.isDo());
565:       assertFalse(node0.isDefaultCase());
566:       assertFalse(node0.isSetterDef());
567:       assertFalse(node0.isLabel());
568:       assertFalse(node0.isAssignAdd());
569:       assertEquals((-1), node0.getLineno());
570:       assertFalse(node0.isIn());
571:       assertFalse(node0.isNE());
572:       assertEquals(39, node0.getType());
573:       assertFalse(node0.isLabelName());
574:       assertFalse(node0.isIf());
575:       assertFalse(node0.hasMoreThanOneChild());
576:       assertFalse(node0.isArrayLit());
577:       assertFalse(node0.isTry());
578:       assertFalse(node0.isRegExp());
579:       assertFalse(node0.isSwitch());
580:       assertEquals((-1), node0.getCharno());
581:       assertFalse(node0.isBlock());
582:       assertFalse(node0.isHook());
583:       assertFalse(node0.isFor());
584:       assertFalse(node0.isCase());
585:       assertFalse(node0.isGetterDef());
586:       assertFalse(node0.isScript());
587:       assertFalse(node0.hasOneChild());
588:       assertFalse(node0.isComma());
589:       assertFalse(node0.isThis());
590:       assertFalse(node0.isAnd());
591:       assertFalse(node0.isFalse());
592:       assertFalse(node0.isWith());
593:       assertFalse(node0.isInstanceOf());
594:       assertFalse(node0.isBreak());
595:       assertFalse(node0.isExprResult());
596:       assertFalse(node0.isThrow());
597:       assertFalse(node0.isInc());
598:       assertFalse(node0.isOr());
599:       assertTrue(node0.isNumber());
600:       assertFalse(node0.isDec());
601:       assertEquals((-1), node0.getSourcePosition());
602:       assertFalse(node0.hasChildren());
603:       assertFalse(node0.isReturn());
604:       assertFalse(node0.isAssign());
605:       assertFalse(node0.isContinue());
606:       assertFalse(node0.isDelProp());
607:       assertFalse(node0.isTypeOf());
608:       assertFalse(node0.isCast());
609:       assertFalse(node0.isGetElem());
610:       assertFalse(node0.isDebugger());
611:       assertFalse(node0.isNot());
612:       assertFalse(node0.isWhile());
613:       assertFalse(node0.isString());
614:       assertFalse(node0.isObjectLit());
615:       assertFalse(node0.isGetProp());
616:       assertEquals(40, Node.ORIGINALNAME_PROP);
617:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
618:       assertEquals(50, Node.FREE_CALL);
619:       assertEquals(57, Node.REFLECTED_OBJECT);
620:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
621:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
622:       assertEquals(52, Node.LENGTH);
623:       assertEquals(8, Node.FLAG_NO_THROWS);
624:       assertEquals(57, Node.LAST_PROP);
625:       assertEquals(15, Node.NO_SIDE_EFFECTS);
626:       assertEquals(39, Node.EMPTY_BLOCK);
627:       assertEquals(30, Node.VAR_ARGS_NAME);
628:       assertEquals(46, Node.IS_NAMESPACE);
629:       assertEquals(51, Node.STATIC_SOURCE_FILE);
630:       assertEquals(2, Node.POST_FLAG);
631:       assertEquals(54, Node.SLASH_V);
632:       assertEquals(43, Node.IS_CONSTANT_NAME);
633:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
634:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
635:       assertEquals(47, Node.IS_DISPATCHER);
636:       assertEquals(32, Node.INCRDECR_PROP);
637:       assertEquals(29, Node.JSDOC_INFO_PROP);
638:       assertEquals(53, Node.INPUT_ID);
639:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
640:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
641:       assertEquals(55, Node.INFERRED_FUNCTION);
642:       assertEquals(1, Node.DECR_FLAG);
643:       assertEquals(4095, Node.COLUMN_MASK);
644:       assertEquals(12, Node.COLUMN_BITS);
645:       assertEquals(36, Node.QUOTED_PROP);
646:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
647:       assertEquals(37, Node.OPT_ARG_NAME);
648:       assertEquals(48, Node.DIRECTIVES);
649:       assertEquals(56, Node.CHANGE_TIME);
650:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
651:       assertEquals(49, Node.DIRECT_EVAL);
652:       
653:       Node node1 = Node.newNumber(0.5, 2, 4379);
654:       assertNotSame(node1, node0);
655:       assertFalse(node1.isDec());
656:       assertFalse(node1.isTypeOf());
657:       assertFalse(node1.hasChildren());
658:       assertFalse(node1.isLabel());
659:       assertFalse(node1.isAssign());
660:       assertFalse(node1.isOr());
661:       assertFalse(node1.hasOneChild());
662:       assertFalse(node1.isReturn());
663:       assertEquals(12287, node1.getSourcePosition());
664:       assertFalse(node1.isAssignAdd());
665:       assertFalse(node1.isDo());
666:       assertFalse(node1.isScript());
667:       assertFalse(node1.isContinue());
668:       assertFalse(node1.isObjectLit());
669:       assertFalse(node1.isNot());
670:       assertFalse(node1.isCast());
671:       assertFalse(node1.isStringKey());
672:       assertFalse(node1.isAnd());
673:       assertFalse(node1.isLabelName());
674:       assertFalse(node1.isNull());
675:       assertFalse(node1.isBreak());
676:       assertEquals(2, node1.getLineno());
677:       assertFalse(node1.isComma());
678:       assertEquals(0, node1.getChildCount());
679:       assertFalse(node1.isAdd());
680:       assertFalse(node1.isVar());
681:       assertFalse(node1.isNew());
682:       assertFalse(node1.isGetProp());
683:       assertFalse(node1.isWhile());
684:       assertFalse(node1.isExprResult());
685:       assertFalse(node1.isTrue());
686:       assertFalse(node1.isCall());
687:       assertFalse(node1.isName());
688:       assertFalse(node1.isGetElem());
689:       assertFalse(node1.isDelProp());
690:       assertFalse(node1.isVoid());
691:       assertFalse(node1.isIf());
692:       assertFalse(node1.isNE());
693:       assertFalse(node1.isFor());
694:       assertFalse(node1.isEmpty());
695:       assertFalse(node1.isGetterDef());
696:       assertFalse(node1.isIn());
697:       assertFalse(node1.isCase());
698:       assertTrue(node1.isNumber());
699:       assertFalse(node1.isTry());
700:       assertFalse(node1.isSwitch());
701:       assertFalse(node1.isDefaultCase());
702:       assertFalse(node1.isString());
703:       assertFalse(node1.isDebugger());
704:       assertFalse(node1.isFunction());
705:       assertEquals(4095, node1.getCharno());
706:       assertFalse(node1.isArrayLit());
707:       assertFalse(node1.isSetterDef());
708:       assertFalse(node1.isThis());
709:       assertFalse(node1.isParamList());
710:       assertFalse(node1.isFalse());
711:       assertFalse(node1.isHook());
712:       assertFalse(node1.isThrow());
713:       assertFalse(node1.isInc());
714:       assertFalse(node1.isBlock());
715:       assertEquals(39, node1.getType());
716:       assertFalse(node1.isWith());
717:       assertFalse(node1.isRegExp());
718:       assertFalse(node1.isInstanceOf());
719:       assertFalse(node1.hasMoreThanOneChild());
720:       assertFalse(node1.isCatch());
721:       assertFalse(node1.equals((Object)node0));
722:       assertNotNull(node1);
723:       assertEquals(53, Node.INPUT_ID);
724:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
725:       assertEquals(36, Node.QUOTED_PROP);
726:       assertEquals(56, Node.CHANGE_TIME);
727:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
728:       assertEquals(37, Node.OPT_ARG_NAME);
729:       assertEquals(43, Node.IS_CONSTANT_NAME);
730:       assertEquals(12, Node.COLUMN_BITS);
731:       assertEquals(46, Node.IS_NAMESPACE);
732:       assertEquals(51, Node.STATIC_SOURCE_FILE);
733:       assertEquals(4095, Node.COLUMN_MASK);
734:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
735:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
736:       assertEquals(1, Node.DECR_FLAG);
737:       assertEquals(32, Node.INCRDECR_PROP);
738:       assertEquals(52, Node.LENGTH);
739:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
740:       assertEquals(54, Node.SLASH_V);
741:       assertEquals(57, Node.REFLECTED_OBJECT);
742:       assertEquals(50, Node.FREE_CALL);
743:       assertEquals(49, Node.DIRECT_EVAL);
744:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
745:       assertEquals(40, Node.ORIGINALNAME_PROP);
746:       assertEquals(48, Node.DIRECTIVES);
747:       assertEquals(55, Node.INFERRED_FUNCTION);
748:       assertEquals(2, Node.POST_FLAG);
749:       assertEquals(8, Node.FLAG_NO_THROWS);
750:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
751:       assertEquals(30, Node.VAR_ARGS_NAME);
752:       assertEquals(15, Node.NO_SIDE_EFFECTS);
753:       assertEquals(47, Node.IS_DISPATCHER);
754:       assertEquals(29, Node.JSDOC_INFO_PROP);
755:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
756:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
757:       assertEquals(39, Node.EMPTY_BLOCK);
758:       assertEquals(57, Node.LAST_PROP);
759:       
760:       int int0 = node0.getSideEffectFlags();
761:       assertNotSame(node0, node1);
762:       assertEquals(0, node0.getChildCount());
763:       assertFalse(node0.isParamList());
764:       assertFalse(node0.isNull());
765:       assertFalse(node0.isStringKey());
766:       assertFalse(node0.isName());
767:       assertFalse(node0.isCatch());
768:       assertFalse(node0.isCall());
769:       assertFalse(node0.isAdd());
770:       assertFalse(node0.isNew());
771:       assertFalse(node0.isVoid());
772:       assertFalse(node0.isFunction());
773:       assertFalse(node0.isVar());
774:       assertFalse(node0.isTrue());
775:       assertFalse(node0.isEmpty());
776:       assertFalse(node0.isDo());
777:       assertFalse(node0.isDefaultCase());
778:       assertFalse(node0.isSetterDef());
779:       assertFalse(node0.isLabel());
780:       assertFalse(node0.isAssignAdd());
781:       assertEquals((-1), node0.getLineno());
782:       assertFalse(node0.isIn());
783:       assertFalse(node0.isNE());
784:       assertEquals(39, node0.getType());
785:       assertFalse(node0.isLabelName());
786:       assertFalse(node0.isIf());
787:       assertFalse(node0.hasMoreThanOneChild());
788:       assertFalse(node0.isArrayLit());
789:       assertFalse(node0.isTry());
790:       assertFalse(node0.isRegExp());
791:       assertFalse(node0.isSwitch());
792:       assertEquals((-1), node0.getCharno());
793:       assertFalse(node0.isBlock());
794:       assertFalse(node0.isHook());
795:       assertFalse(node0.isFor());
796:       assertFalse(node0.isCase());
797:       assertFalse(node0.isGetterDef());
798:       assertFalse(node0.isScript());
799:       assertFalse(node0.hasOneChild());
800:       assertFalse(node0.isComma());
801:       assertFalse(node0.isThis());
802:       assertFalse(node0.isAnd());
803:       assertFalse(node0.isFalse());
804:       assertFalse(node0.isWith());
805:       assertFalse(node0.isInstanceOf());
806:       assertFalse(node0.isBreak());
807:       assertFalse(node0.isExprResult());
808:       assertFalse(node0.isThrow());
809:       assertFalse(node0.isInc());
810:       assertFalse(node0.isOr());
811:       assertTrue(node0.isNumber());
812:       assertFalse(node0.isDec());
813:       assertEquals((-1), node0.getSourcePosition());
814:       assertFalse(node0.hasChildren());
815:       assertFalse(node0.isReturn());
816:       assertFalse(node0.isAssign());
817:       assertFalse(node0.isContinue());
818:       assertFalse(node0.isDelProp());
819:       assertFalse(node0.isTypeOf());
820:       assertFalse(node0.isCast());
821:       assertFalse(node0.isGetElem());
822:       assertFalse(node0.isDebugger());
823:       assertFalse(node0.isNot());
824:       assertFalse(node0.isWhile());
825:       assertFalse(node0.isString());
826:       assertFalse(node0.isObjectLit());
827:       assertFalse(node0.isGetProp());
828:       assertFalse(node0.equals((Object)node1));
829:       assertEquals(40, Node.ORIGINALNAME_PROP);
830:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
831:       assertEquals(50, Node.FREE_CALL);
832:       assertEquals(57, Node.REFLECTED_OBJECT);
833:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
834:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
835:       assertEquals(52, Node.LENGTH);
836:       assertEquals(8, Node.FLAG_NO_THROWS);
837:       assertEquals(57, Node.LAST_PROP);
838:       assertEquals(15, Node.NO_SIDE_EFFECTS);
839:       assertEquals(39, Node.EMPTY_BLOCK);
840:       assertEquals(30, Node.VAR_ARGS_NAME);
841:       assertEquals(46, Node.IS_NAMESPACE);
842:       assertEquals(51, Node.STATIC_SOURCE_FILE);
843:       assertEquals(2, Node.POST_FLAG);
844:       assertEquals(54, Node.SLASH_V);
845:       assertEquals(43, Node.IS_CONSTANT_NAME);
846:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
847:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
848:       assertEquals(47, Node.IS_DISPATCHER);
849:       assertEquals(32, Node.INCRDECR_PROP);
850:       assertEquals(29, Node.JSDOC_INFO_PROP);
851:       assertEquals(53, Node.INPUT_ID);
852:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
853:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
854:       assertEquals(55, Node.INFERRED_FUNCTION);
855:       assertEquals(1, Node.DECR_FLAG);
856:       assertEquals(4095, Node.COLUMN_MASK);
857:       assertEquals(12, Node.COLUMN_BITS);
858:       assertEquals(36, Node.QUOTED_PROP);
859:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
860:       assertEquals(37, Node.OPT_ARG_NAME);
861:       assertEquals(48, Node.DIRECTIVES);
862:       assertEquals(56, Node.CHANGE_TIME);
863:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
864:       assertEquals(49, Node.DIRECT_EVAL);
865:       assertEquals(0, int0);
866:       
867:       // Undeclared exception!
868:       try { 
869:         node0.removeChild(node1);
870:         fail("Expecting exception: NullPointerException");
871:       
872:       } catch(NullPointerException e) {
873:          //
874:          // no message in exception (getMessage() returned null)
875:          //
876:          verifyException("com.google.javascript.rhino.Node", e);
877:       }
878:   }
879: }
RegularFileObject[/tmp/EvoSuite_52_1629222878289/com/google/javascript/rhino/Node_52_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_52_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_52_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_52_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.common.base.Preconditions",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.JSDocInfo",
330:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
331:       "com.google.common.collect.Sets",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.base.Objects",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.common.collect.Iterables",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.common.collect.Platform",
346:       "com.google.javascript.rhino.jstype.NamedType",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
349:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
350:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
351:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
352:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
353:       "com.google.javascript.rhino.jstype.TernaryValue",
354:       "com.google.javascript.rhino.jstype.JSType$2",
355:       "com.google.javascript.rhino.jstype.JSType$TypePair",
356:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
357:     );
358:   }
359: }

[MASTER] 17:54:38.551 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(39, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertNotNull(node0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(39, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertNotNull(iterable0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);

boolean boolean0 = node0.isAnd();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(39, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(boolean0);

boolean boolean1 = node0.isOnlyModifiesArgumentsCall();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(39, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertTrue(boolean1 == boolean0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(boolean1);

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(39, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertNull(staticSourceFile0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);

node0.detachChildren();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(39, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);

Node node1 = Node.newNumber(0.5, 2, 4379);
assertNotSame(node1, node0);
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isReturn());
assertEquals(12287, node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isScript());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertEquals(2, node1.getLineno());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);

int int0 = node0.getSideEffectFlags();
assertNotSame(node0, node1);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(39, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.equals((Object)node1));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, int0);

node0.removeChild(node1);

[MASTER] 17:54:45.731 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_95_1629222885557/com/google/javascript/rhino/Node_95_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_95_1629222885557/com/google/javascript/rhino/Node_95_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:45.731 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:45.731 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:45.732 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 127
[MASTER] 17:54:45.733 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_95_1629222885557/com/google/javascript/rhino/Node_95_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:45 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_95_tmp__ESTest extends Node_95_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertEquals(0, node0.getChildCount());
23:       assertFalse(node0.isSetterDef());
24:       assertFalse(node0.isCatch());
25:       assertFalse(node0.isName());
26:       assertFalse(node0.isDebugger());
27:       assertFalse(node0.isParamList());
28:       assertFalse(node0.isStringKey());
29:       assertFalse(node0.isNull());
30:       assertFalse(node0.isTrue());
31:       assertFalse(node0.isTry());
32:       assertFalse(node0.isVoid());
33:       assertFalse(node0.isCall());
34:       assertEquals(39, node0.getType());
35:       assertFalse(node0.isWhile());
36:       assertFalse(node0.isRegExp());
37:       assertFalse(node0.isBlock());
38:       assertFalse(node0.isReturn());
39:       assertFalse(node0.isFor());
40:       assertFalse(node0.isOr());
41:       assertFalse(node0.isLabel());
42:       assertFalse(node0.isAssignAdd());
43:       assertFalse(node0.isLabelName());
44:       assertFalse(node0.isEmpty());
45:       assertFalse(node0.isDelProp());
46:       assertFalse(node0.isGetterDef());
47:       assertFalse(node0.isSwitch());
48:       assertEquals((-1), node0.getCharno());
49:       assertFalse(node0.isNew());
50:       assertFalse(node0.isArrayLit());
51:       assertFalse(node0.isAdd());
52:       assertFalse(node0.isDo());
53:       assertFalse(node0.isDefaultCase());
54:       assertFalse(node0.isVar());
55:       assertFalse(node0.isInstanceOf());
56:       assertFalse(node0.isGetProp());
57:       assertFalse(node0.isBreak());
58:       assertFalse(node0.isNot());
59:       assertFalse(node0.isObjectLit());
60:       assertFalse(node0.isAnd());
61:       assertFalse(node0.hasOneChild());
62:       assertFalse(node0.isGetElem());
63:       assertFalse(node0.isExprResult());
64:       assertFalse(node0.isScript());
65:       assertFalse(node0.isAssign());
66:       assertFalse(node0.isWith());
67:       assertFalse(node0.isCase());
68:       assertFalse(node0.isDec());
69:       assertFalse(node0.isTypeOf());
70:       assertFalse(node0.isComma());
71:       assertFalse(node0.hasChildren());
72:       assertFalse(node0.isHook());
73:       assertFalse(node0.isThis());
74:       assertTrue(node0.isNumber());
75:       assertEquals((-1), node0.getLineno());
76:       assertFalse(node0.isIn());
77:       assertFalse(node0.hasMoreThanOneChild());
78:       assertFalse(node0.isContinue());
79:       assertFalse(node0.isString());
80:       assertFalse(node0.isIf());
81:       assertFalse(node0.isNE());
82:       assertEquals((-1), node0.getSourcePosition());
83:       assertFalse(node0.isFunction());
84:       assertFalse(node0.isCast());
85:       assertFalse(node0.isInc());
86:       assertFalse(node0.isFalse());
87:       assertFalse(node0.isThrow());
88:       assertNotNull(node0);
89:       assertEquals(40, Node.ORIGINALNAME_PROP);
90:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
91:       assertEquals(50, Node.FREE_CALL);
92:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
93:       assertEquals(39, Node.EMPTY_BLOCK);
94:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
95:       assertEquals(57, Node.LAST_PROP);
96:       assertEquals(30, Node.VAR_ARGS_NAME);
97:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
98:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
99:       assertEquals(55, Node.INFERRED_FUNCTION);
100:       assertEquals(49, Node.DIRECT_EVAL);
101:       assertEquals(4095, Node.COLUMN_MASK);
102:       assertEquals(15, Node.NO_SIDE_EFFECTS);
103:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
104:       assertEquals(37, Node.OPT_ARG_NAME);
105:       assertEquals(48, Node.DIRECTIVES);
106:       assertEquals(52, Node.LENGTH);
107:       assertEquals(8, Node.FLAG_NO_THROWS);
108:       assertEquals(56, Node.CHANGE_TIME);
109:       assertEquals(36, Node.QUOTED_PROP);
110:       assertEquals(57, Node.REFLECTED_OBJECT);
111:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
112:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
113:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
114:       assertEquals(29, Node.JSDOC_INFO_PROP);
115:       assertEquals(53, Node.INPUT_ID);
116:       assertEquals(2, Node.POST_FLAG);
117:       assertEquals(12, Node.COLUMN_BITS);
118:       assertEquals(47, Node.IS_DISPATCHER);
119:       assertEquals(1, Node.DECR_FLAG);
120:       assertEquals(32, Node.INCRDECR_PROP);
121:       assertEquals(54, Node.SLASH_V);
122:       assertEquals(46, Node.IS_NAMESPACE);
123:       assertEquals(43, Node.IS_CONSTANT_NAME);
124:       assertEquals(51, Node.STATIC_SOURCE_FILE);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertFalse(iterable0.contains(node0));
128:       assertEquals(0, node0.getChildCount());
129:       assertFalse(node0.isSetterDef());
130:       assertFalse(node0.isCatch());
131:       assertFalse(node0.isName());
132:       assertFalse(node0.isDebugger());
133:       assertFalse(node0.isParamList());
134:       assertFalse(node0.isStringKey());
135:       assertFalse(node0.isNull());
136:       assertFalse(node0.isTrue());
137:       assertFalse(node0.isTry());
138:       assertFalse(node0.isVoid());
139:       assertFalse(node0.isCall());
140:       assertEquals(39, node0.getType());
141:       assertFalse(node0.isWhile());
142:       assertFalse(node0.isRegExp());
143:       assertFalse(node0.isBlock());
144:       assertFalse(node0.isReturn());
145:       assertFalse(node0.isFor());
146:       assertFalse(node0.isOr());
147:       assertFalse(node0.isLabel());
148:       assertFalse(node0.isAssignAdd());
149:       assertFalse(node0.isLabelName());
150:       assertFalse(node0.isEmpty());
151:       assertFalse(node0.isDelProp());
152:       assertFalse(node0.isGetterDef());
153:       assertFalse(node0.isSwitch());
154:       assertEquals((-1), node0.getCharno());
155:       assertFalse(node0.isNew());
156:       assertFalse(node0.isArrayLit());
157:       assertFalse(node0.isAdd());
158:       assertFalse(node0.isDo());
159:       assertFalse(node0.isDefaultCase());
160:       assertFalse(node0.isVar());
161:       assertFalse(node0.isInstanceOf());
162:       assertFalse(node0.isGetProp());
163:       assertFalse(node0.isBreak());
164:       assertFalse(node0.isNot());
165:       assertFalse(node0.isObjectLit());
166:       assertFalse(node0.isAnd());
167:       assertFalse(node0.hasOneChild());
168:       assertFalse(node0.isGetElem());
169:       assertFalse(node0.isExprResult());
170:       assertFalse(node0.isScript());
171:       assertFalse(node0.isAssign());
172:       assertFalse(node0.isWith());
173:       assertFalse(node0.isCase());
174:       assertFalse(node0.isDec());
175:       assertFalse(node0.isTypeOf());
176:       assertFalse(node0.isComma());
177:       assertFalse(node0.hasChildren());
178:       assertFalse(node0.isHook());
179:       assertFalse(node0.isThis());
180:       assertTrue(node0.isNumber());
181:       assertEquals((-1), node0.getLineno());
182:       assertFalse(node0.isIn());
183:       assertFalse(node0.hasMoreThanOneChild());
184:       assertFalse(node0.isContinue());
185:       assertFalse(node0.isString());
186:       assertFalse(node0.isIf());
187:       assertFalse(node0.isNE());
188:       assertEquals((-1), node0.getSourcePosition());
189:       assertFalse(node0.isFunction());
190:       assertFalse(node0.isCast());
191:       assertFalse(node0.isInc());
192:       assertFalse(node0.isFalse());
193:       assertFalse(node0.isThrow());
194:       assertNotNull(iterable0);
195:       assertEquals(40, Node.ORIGINALNAME_PROP);
196:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
197:       assertEquals(50, Node.FREE_CALL);
198:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
199:       assertEquals(39, Node.EMPTY_BLOCK);
200:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
201:       assertEquals(57, Node.LAST_PROP);
202:       assertEquals(30, Node.VAR_ARGS_NAME);
203:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
205:       assertEquals(55, Node.INFERRED_FUNCTION);
206:       assertEquals(49, Node.DIRECT_EVAL);
207:       assertEquals(4095, Node.COLUMN_MASK);
208:       assertEquals(15, Node.NO_SIDE_EFFECTS);
209:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
210:       assertEquals(37, Node.OPT_ARG_NAME);
211:       assertEquals(48, Node.DIRECTIVES);
212:       assertEquals(52, Node.LENGTH);
213:       assertEquals(8, Node.FLAG_NO_THROWS);
214:       assertEquals(56, Node.CHANGE_TIME);
215:       assertEquals(36, Node.QUOTED_PROP);
216:       assertEquals(57, Node.REFLECTED_OBJECT);
217:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
218:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
219:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
220:       assertEquals(29, Node.JSDOC_INFO_PROP);
221:       assertEquals(53, Node.INPUT_ID);
222:       assertEquals(2, Node.POST_FLAG);
223:       assertEquals(12, Node.COLUMN_BITS);
224:       assertEquals(47, Node.IS_DISPATCHER);
225:       assertEquals(1, Node.DECR_FLAG);
226:       assertEquals(32, Node.INCRDECR_PROP);
227:       assertEquals(54, Node.SLASH_V);
228:       assertEquals(46, Node.IS_NAMESPACE);
229:       assertEquals(43, Node.IS_CONSTANT_NAME);
230:       assertEquals(51, Node.STATIC_SOURCE_FILE);
231:       
232:       boolean boolean0 = node0.isSwitch();
233:       assertEquals(0, node0.getChildCount());
234:       assertFalse(node0.isSetterDef());
235:       assertFalse(node0.isCatch());
236:       assertFalse(node0.isName());
237:       assertFalse(node0.isDebugger());
238:       assertFalse(node0.isParamList());
239:       assertFalse(node0.isStringKey());
240:       assertFalse(node0.isNull());
241:       assertFalse(node0.isTrue());
242:       assertFalse(node0.isTry());
243:       assertFalse(node0.isVoid());
244:       assertFalse(node0.isCall());
245:       assertEquals(39, node0.getType());
246:       assertFalse(node0.isWhile());
247:       assertFalse(node0.isRegExp());
248:       assertFalse(node0.isBlock());
249:       assertFalse(node0.isReturn());
250:       assertFalse(node0.isFor());
251:       assertFalse(node0.isOr());
252:       assertFalse(node0.isLabel());
253:       assertFalse(node0.isAssignAdd());
254:       assertFalse(node0.isLabelName());
255:       assertFalse(node0.isEmpty());
256:       assertFalse(node0.isDelProp());
257:       assertFalse(node0.isGetterDef());
258:       assertFalse(node0.isSwitch());
259:       assertEquals((-1), node0.getCharno());
260:       assertFalse(node0.isNew());
261:       assertFalse(node0.isArrayLit());
262:       assertFalse(node0.isAdd());
263:       assertFalse(node0.isDo());
264:       assertFalse(node0.isDefaultCase());
265:       assertFalse(node0.isVar());
266:       assertFalse(node0.isInstanceOf());
267:       assertFalse(node0.isGetProp());
268:       assertFalse(node0.isBreak());
269:       assertFalse(node0.isNot());
270:       assertFalse(node0.isObjectLit());
271:       assertFalse(node0.isAnd());
272:       assertFalse(node0.hasOneChild());
273:       assertFalse(node0.isGetElem());
274:       assertFalse(node0.isExprResult());
275:       assertFalse(node0.isScript());
276:       assertFalse(node0.isAssign());
277:       assertFalse(node0.isWith());
278:       assertFalse(node0.isCase());
279:       assertFalse(node0.isDec());
280:       assertFalse(node0.isTypeOf());
281:       assertFalse(node0.isComma());
282:       assertFalse(node0.hasChildren());
283:       assertFalse(node0.isHook());
284:       assertFalse(node0.isThis());
285:       assertTrue(node0.isNumber());
286:       assertEquals((-1), node0.getLineno());
287:       assertFalse(node0.isIn());
288:       assertFalse(node0.hasMoreThanOneChild());
289:       assertFalse(node0.isContinue());
290:       assertFalse(node0.isString());
291:       assertFalse(node0.isIf());
292:       assertFalse(node0.isNE());
293:       assertEquals((-1), node0.getSourcePosition());
294:       assertFalse(node0.isFunction());
295:       assertFalse(node0.isCast());
296:       assertFalse(node0.isInc());
297:       assertFalse(node0.isFalse());
298:       assertFalse(node0.isThrow());
299:       assertEquals(40, Node.ORIGINALNAME_PROP);
300:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
301:       assertEquals(50, Node.FREE_CALL);
302:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
303:       assertEquals(39, Node.EMPTY_BLOCK);
304:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
305:       assertEquals(57, Node.LAST_PROP);
306:       assertEquals(30, Node.VAR_ARGS_NAME);
307:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
308:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
309:       assertEquals(55, Node.INFERRED_FUNCTION);
310:       assertEquals(49, Node.DIRECT_EVAL);
311:       assertEquals(4095, Node.COLUMN_MASK);
312:       assertEquals(15, Node.NO_SIDE_EFFECTS);
313:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
314:       assertEquals(37, Node.OPT_ARG_NAME);
315:       assertEquals(48, Node.DIRECTIVES);
316:       assertEquals(52, Node.LENGTH);
317:       assertEquals(8, Node.FLAG_NO_THROWS);
318:       assertEquals(56, Node.CHANGE_TIME);
319:       assertEquals(36, Node.QUOTED_PROP);
320:       assertEquals(57, Node.REFLECTED_OBJECT);
321:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
322:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
323:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
324:       assertEquals(29, Node.JSDOC_INFO_PROP);
325:       assertEquals(53, Node.INPUT_ID);
326:       assertEquals(2, Node.POST_FLAG);
327:       assertEquals(12, Node.COLUMN_BITS);
328:       assertEquals(47, Node.IS_DISPATCHER);
329:       assertEquals(1, Node.DECR_FLAG);
330:       assertEquals(32, Node.INCRDECR_PROP);
331:       assertEquals(54, Node.SLASH_V);
332:       assertEquals(46, Node.IS_NAMESPACE);
333:       assertEquals(43, Node.IS_CONSTANT_NAME);
334:       assertEquals(51, Node.STATIC_SOURCE_FILE);
335:       assertFalse(boolean0);
336:       
337:       node0.detachChildren();
338:       assertEquals(0, node0.getChildCount());
339:       assertFalse(node0.isSetterDef());
340:       assertFalse(node0.isCatch());
341:       assertFalse(node0.isName());
342:       assertFalse(node0.isDebugger());
343:       assertFalse(node0.isParamList());
344:       assertFalse(node0.isStringKey());
345:       assertFalse(node0.isNull());
346:       assertFalse(node0.isTrue());
347:       assertFalse(node0.isTry());
348:       assertFalse(node0.isVoid());
349:       assertFalse(node0.isCall());
350:       assertEquals(39, node0.getType());
351:       assertFalse(node0.isWhile());
352:       assertFalse(node0.isRegExp());
353:       assertFalse(node0.isBlock());
354:       assertFalse(node0.isReturn());
355:       assertFalse(node0.isFor());
356:       assertFalse(node0.isOr());
357:       assertFalse(node0.isLabel());
358:       assertFalse(node0.isAssignAdd());
359:       assertFalse(node0.isLabelName());
360:       assertFalse(node0.isEmpty());
361:       assertFalse(node0.isDelProp());
362:       assertFalse(node0.isGetterDef());
363:       assertFalse(node0.isSwitch());
364:       assertEquals((-1), node0.getCharno());
365:       assertFalse(node0.isNew());
366:       assertFalse(node0.isArrayLit());
367:       assertFalse(node0.isAdd());
368:       assertFalse(node0.isDo());
369:       assertFalse(node0.isDefaultCase());
370:       assertFalse(node0.isVar());
371:       assertFalse(node0.isInstanceOf());
372:       assertFalse(node0.isGetProp());
373:       assertFalse(node0.isBreak());
374:       assertFalse(node0.isNot());
375:       assertFalse(node0.isObjectLit());
376:       assertFalse(node0.isAnd());
377:       assertFalse(node0.hasOneChild());
378:       assertFalse(node0.isGetElem());
379:       assertFalse(node0.isExprResult());
380:       assertFalse(node0.isScript());
381:       assertFalse(node0.isAssign());
382:       assertFalse(node0.isWith());
383:       assertFalse(node0.isCase());
384:       assertFalse(node0.isDec());
385:       assertFalse(node0.isTypeOf());
386:       assertFalse(node0.isComma());
387:       assertFalse(node0.hasChildren());
388:       assertFalse(node0.isHook());
389:       assertFalse(node0.isThis());
390:       assertTrue(node0.isNumber());
391:       assertEquals((-1), node0.getLineno());
392:       assertFalse(node0.isIn());
393:       assertFalse(node0.hasMoreThanOneChild());
394:       assertFalse(node0.isContinue());
395:       assertFalse(node0.isString());
396:       assertFalse(node0.isIf());
397:       assertFalse(node0.isNE());
398:       assertEquals((-1), node0.getSourcePosition());
399:       assertFalse(node0.isFunction());
400:       assertFalse(node0.isCast());
401:       assertFalse(node0.isInc());
402:       assertFalse(node0.isFalse());
403:       assertFalse(node0.isThrow());
404:       assertEquals(40, Node.ORIGINALNAME_PROP);
405:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
406:       assertEquals(50, Node.FREE_CALL);
407:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
408:       assertEquals(39, Node.EMPTY_BLOCK);
409:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
410:       assertEquals(57, Node.LAST_PROP);
411:       assertEquals(30, Node.VAR_ARGS_NAME);
412:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
413:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
414:       assertEquals(55, Node.INFERRED_FUNCTION);
415:       assertEquals(49, Node.DIRECT_EVAL);
416:       assertEquals(4095, Node.COLUMN_MASK);
417:       assertEquals(15, Node.NO_SIDE_EFFECTS);
418:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
419:       assertEquals(37, Node.OPT_ARG_NAME);
420:       assertEquals(48, Node.DIRECTIVES);
421:       assertEquals(52, Node.LENGTH);
422:       assertEquals(8, Node.FLAG_NO_THROWS);
423:       assertEquals(56, Node.CHANGE_TIME);
424:       assertEquals(36, Node.QUOTED_PROP);
425:       assertEquals(57, Node.REFLECTED_OBJECT);
426:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
427:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
428:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
429:       assertEquals(29, Node.JSDOC_INFO_PROP);
430:       assertEquals(53, Node.INPUT_ID);
431:       assertEquals(2, Node.POST_FLAG);
432:       assertEquals(12, Node.COLUMN_BITS);
433:       assertEquals(47, Node.IS_DISPATCHER);
434:       assertEquals(1, Node.DECR_FLAG);
435:       assertEquals(32, Node.INCRDECR_PROP);
436:       assertEquals(54, Node.SLASH_V);
437:       assertEquals(46, Node.IS_NAMESPACE);
438:       assertEquals(43, Node.IS_CONSTANT_NAME);
439:       assertEquals(51, Node.STATIC_SOURCE_FILE);
440:       
441:       Node node1 = Node.newNumber(11.849442591709018, 2, 4379);
442:       assertNotSame(node1, node0);
443:       assertFalse(node1.isBlock());
444:       assertFalse(node1.isNew());
445:       assertFalse(node1.isAdd());
446:       assertFalse(node1.isStringKey());
447:       assertFalse(node1.isName());
448:       assertFalse(node1.isCall());
449:       assertFalse(node1.isNull());
450:       assertFalse(node1.isParamList());
451:       assertFalse(node1.isOr());
452:       assertFalse(node1.isSetterDef());
453:       assertFalse(node1.isLabel());
454:       assertEquals(0, node1.getChildCount());
455:       assertFalse(node1.isContinue());
456:       assertFalse(node1.isDo());
457:       assertFalse(node1.isVar());
458:       assertFalse(node1.isAssignAdd());
459:       assertFalse(node1.isDefaultCase());
460:       assertFalse(node1.isVoid());
461:       assertFalse(node1.isExprResult());
462:       assertFalse(node1.isTrue());
463:       assertFalse(node1.isDebugger());
464:       assertFalse(node1.isCast());
465:       assertFalse(node1.isFunction());
466:       assertFalse(node1.isGetElem());
467:       assertFalse(node1.isObjectLit());
468:       assertFalse(node1.isNot());
469:       assertFalse(node1.isDelProp());
470:       assertFalse(node1.isAnd());
471:       assertFalse(node1.isReturn());
472:       assertFalse(node1.isComma());
473:       assertTrue(node1.isNumber());
474:       assertFalse(node1.isGetProp());
475:       assertFalse(node1.isDec());
476:       assertFalse(node1.isTypeOf());
477:       assertFalse(node1.isAssign());
478:       assertEquals(12287, node1.getSourcePosition());
479:       assertFalse(node1.hasChildren());
480:       assertFalse(node1.isWhile());
481:       assertFalse(node1.isInc());
482:       assertEquals(4095, node1.getCharno());
483:       assertFalse(node1.isString());
484:       assertFalse(node1.isBreak());
485:       assertFalse(node1.isSwitch());
486:       assertEquals(2, node1.getLineno());
487:       assertFalse(node1.isIn());
488:       assertFalse(node1.isFalse());
489:       assertFalse(node1.isThrow());
490:       assertFalse(node1.isEmpty());
491:       assertFalse(node1.isTry());
492:       assertFalse(node1.isRegExp());
493:       assertFalse(node1.isScript());
494:       assertFalse(node1.isWith());
495:       assertFalse(node1.isLabelName());
496:       assertFalse(node1.isArrayLit());
497:       assertFalse(node1.isNE());
498:       assertFalse(node1.isIf());
499:       assertFalse(node1.isThis());
500:       assertFalse(node1.isInstanceOf());
501:       assertFalse(node1.isGetterDef());
502:       assertFalse(node1.isCatch());
503:       assertFalse(node1.hasMoreThanOneChild());
504:       assertFalse(node1.isCase());
505:       assertFalse(node1.isFor());
506:       assertEquals(39, node1.getType());
507:       assertFalse(node1.isHook());
508:       assertFalse(node1.hasOneChild());
509:       assertFalse(node1.equals((Object)node0));
510:       assertNotNull(node1);
511:       assertEquals(12, Node.COLUMN_BITS);
512:       assertEquals(1, Node.DECR_FLAG);
513:       assertEquals(51, Node.STATIC_SOURCE_FILE);
514:       assertEquals(30, Node.VAR_ARGS_NAME);
515:       assertEquals(2, Node.POST_FLAG);
516:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
517:       assertEquals(15, Node.NO_SIDE_EFFECTS);
518:       assertEquals(47, Node.IS_DISPATCHER);
519:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
520:       assertEquals(32, Node.INCRDECR_PROP);
521:       assertEquals(57, Node.LAST_PROP);
522:       assertEquals(40, Node.ORIGINALNAME_PROP);
523:       assertEquals(50, Node.FREE_CALL);
524:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
525:       assertEquals(46, Node.IS_NAMESPACE);
526:       assertEquals(54, Node.SLASH_V);
527:       assertEquals(43, Node.IS_CONSTANT_NAME);
528:       assertEquals(55, Node.INFERRED_FUNCTION);
529:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
530:       assertEquals(4095, Node.COLUMN_MASK);
531:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
532:       assertEquals(39, Node.EMPTY_BLOCK);
533:       assertEquals(57, Node.REFLECTED_OBJECT);
534:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
535:       assertEquals(29, Node.JSDOC_INFO_PROP);
536:       assertEquals(52, Node.LENGTH);
537:       assertEquals(53, Node.INPUT_ID);
538:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
539:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
540:       assertEquals(8, Node.FLAG_NO_THROWS);
541:       assertEquals(48, Node.DIRECTIVES);
542:       assertEquals(37, Node.OPT_ARG_NAME);
543:       assertEquals(36, Node.QUOTED_PROP);
544:       assertEquals(49, Node.DIRECT_EVAL);
545:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
546:       assertEquals(56, Node.CHANGE_TIME);
547:       
548:       // Undeclared exception!
549:       try { 
550:         node0.removeChild(node1);
551:         fail("Expecting exception: NullPointerException");
552:       
553:       } catch(NullPointerException e) {
554:          //
555:          // no message in exception (getMessage() returned null)
556:          //
557:          verifyException("com.google.javascript.rhino.Node", e);
558:       }
559:   }
560: }
RegularFileObject[/tmp/EvoSuite_95_1629222885557/com/google/javascript/rhino/Node_95_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:45 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_95_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_95_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_95_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.common.base.Preconditions",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.JSDocInfo",
330:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
331:       "com.google.common.collect.Sets",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.base.Objects",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.common.collect.Iterables",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.common.collect.Platform",
346:       "com.google.javascript.rhino.jstype.NamedType",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
349:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
350:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
351:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
352:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
353:       "com.google.javascript.rhino.jstype.TernaryValue",
354:       "com.google.javascript.rhino.jstype.JSType$2",
355:       "com.google.javascript.rhino.jstype.JSType$TypePair",
356:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
357:     );
358:   }
359: }

[MASTER] 17:54:45.742 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertNotNull(node0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertNotNull(iterable0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean0 = node0.isSwitch();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(boolean0);

node0.detachChildren();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node node1 = Node.newNumber(11.849442591709018, 2, 4379);
assertNotSame(node1, node0);
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isGetElem());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDelProp());
assertFalse(node1.isAnd());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertEquals(12287, node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isInc());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertEquals(2, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

node0.removeChild(node1);

[MASTER] 17:55:10.603 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_208_1629222910049/com/google/javascript/rhino/Node_208_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_208_1629222910049/com/google/javascript/rhino/Node_208_tmp__ESTest_scaffolding.java]]
[MASTER] 17:55:10.603 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:10.603 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:10.607 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1940
[MASTER] 17:55:10.610 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_208_1629222910049/com/google/javascript/rhino/Node_208_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:55:10 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_208_tmp__ESTest extends Node_208_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber((-1786.5011), 223, 1043);
21:       assertFalse(node0.isHook());
22:       assertFalse(node0.isThrow());
23:       assertFalse(node0.isSwitch());
24:       assertFalse(node0.isString());
25:       assertFalse(node0.isInc());
26:       assertFalse(node0.isInstanceOf());
27:       assertFalse(node0.isGetProp());
28:       assertFalse(node0.isCase());
29:       assertTrue(node0.isNumber());
30:       assertFalse(node0.isBreak());
31:       assertFalse(node0.isThis());
32:       assertFalse(node0.isFor());
33:       assertFalse(node0.isExprResult());
34:       assertFalse(node0.isComma());
35:       assertFalse(node0.isWith());
36:       assertFalse(node0.isCast());
37:       assertFalse(node0.isIf());
38:       assertFalse(node0.isNE());
39:       assertFalse(node0.isDebugger());
40:       assertFalse(node0.isNot());
41:       assertFalse(node0.isObjectLit());
42:       assertFalse(node0.isIn());
43:       assertFalse(node0.isAnd());
44:       assertEquals(223, node0.getLineno());
45:       assertFalse(node0.isFalse());
46:       assertFalse(node0.isContinue());
47:       assertFalse(node0.isFunction());
48:       assertFalse(node0.isAdd());
49:       assertFalse(node0.isVar());
50:       assertFalse(node0.isBlock());
51:       assertFalse(node0.isCall());
52:       assertFalse(node0.isStringKey());
53:       assertFalse(node0.isNew());
54:       assertFalse(node0.isName());
55:       assertFalse(node0.isSetterDef());
56:       assertFalse(node0.isNull());
57:       assertFalse(node0.isReturn());
58:       assertFalse(node0.isCatch());
59:       assertFalse(node0.hasChildren());
60:       assertFalse(node0.isDec());
61:       assertFalse(node0.isWhile());
62:       assertEquals(39, node0.getType());
63:       assertFalse(node0.hasMoreThanOneChild());
64:       assertFalse(node0.isAssign());
65:       assertFalse(node0.isRegExp());
66:       assertFalse(node0.isTypeOf());
67:       assertFalse(node0.hasOneChild());
68:       assertFalse(node0.isArrayLit());
69:       assertFalse(node0.isGetElem());
70:       assertEquals(914451, node0.getSourcePosition());
71:       assertFalse(node0.isLabelName());
72:       assertFalse(node0.isDelProp());
73:       assertFalse(node0.isVoid());
74:       assertFalse(node0.isTry());
75:       assertFalse(node0.isScript());
76:       assertFalse(node0.isEmpty());
77:       assertFalse(node0.isTrue());
78:       assertFalse(node0.isOr());
79:       assertFalse(node0.isGetterDef());
80:       assertEquals(0, node0.getChildCount());
81:       assertFalse(node0.isParamList());
82:       assertFalse(node0.isAssignAdd());
83:       assertFalse(node0.isDo());
84:       assertFalse(node0.isDefaultCase());
85:       assertEquals(1043, node0.getCharno());
86:       assertFalse(node0.isLabel());
87:       assertNotNull(node0);
88:       assertEquals(49, Node.DIRECT_EVAL);
89:       assertEquals(30, Node.VAR_ARGS_NAME);
90:       assertEquals(1, Node.DECR_FLAG);
91:       assertEquals(15, Node.NO_SIDE_EFFECTS);
92:       assertEquals(12, Node.COLUMN_BITS);
93:       assertEquals(57, Node.LAST_PROP);
94:       assertEquals(32, Node.INCRDECR_PROP);
95:       assertEquals(37, Node.OPT_ARG_NAME);
96:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
97:       assertEquals(2, Node.POST_FLAG);
98:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
99:       assertEquals(29, Node.JSDOC_INFO_PROP);
100:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
101:       assertEquals(47, Node.IS_DISPATCHER);
102:       assertEquals(56, Node.CHANGE_TIME);
103:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
104:       assertEquals(48, Node.DIRECTIVES);
105:       assertEquals(39, Node.EMPTY_BLOCK);
106:       assertEquals(53, Node.INPUT_ID);
107:       assertEquals(57, Node.REFLECTED_OBJECT);
108:       assertEquals(55, Node.INFERRED_FUNCTION);
109:       assertEquals(36, Node.QUOTED_PROP);
110:       assertEquals(52, Node.LENGTH);
111:       assertEquals(8, Node.FLAG_NO_THROWS);
112:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
113:       assertEquals(43, Node.IS_CONSTANT_NAME);
114:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
115:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
116:       assertEquals(4095, Node.COLUMN_MASK);
117:       assertEquals(50, Node.FREE_CALL);
118:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
119:       assertEquals(40, Node.ORIGINALNAME_PROP);
120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
121:       assertEquals(46, Node.IS_NAMESPACE);
122:       assertEquals(54, Node.SLASH_V);
123:       assertEquals(51, Node.STATIC_SOURCE_FILE);
124:       
125:       boolean boolean0 = node0.isFunction();
126:       assertFalse(node0.isHook());
127:       assertFalse(node0.isThrow());
128:       assertFalse(node0.isSwitch());
129:       assertFalse(node0.isString());
130:       assertFalse(node0.isInc());
131:       assertFalse(node0.isInstanceOf());
132:       assertFalse(node0.isGetProp());
133:       assertFalse(node0.isCase());
134:       assertTrue(node0.isNumber());
135:       assertFalse(node0.isBreak());
136:       assertFalse(node0.isThis());
137:       assertFalse(node0.isFor());
138:       assertFalse(node0.isExprResult());
139:       assertFalse(node0.isComma());
140:       assertFalse(node0.isWith());
141:       assertFalse(node0.isCast());
142:       assertFalse(node0.isIf());
143:       assertFalse(node0.isNE());
144:       assertFalse(node0.isDebugger());
145:       assertFalse(node0.isNot());
146:       assertFalse(node0.isObjectLit());
147:       assertFalse(node0.isIn());
148:       assertFalse(node0.isAnd());
149:       assertEquals(223, node0.getLineno());
150:       assertFalse(node0.isFalse());
151:       assertFalse(node0.isContinue());
152:       assertFalse(node0.isFunction());
153:       assertFalse(node0.isAdd());
154:       assertFalse(node0.isVar());
155:       assertFalse(node0.isBlock());
156:       assertFalse(node0.isCall());
157:       assertFalse(node0.isStringKey());
158:       assertFalse(node0.isNew());
159:       assertFalse(node0.isName());
160:       assertFalse(node0.isSetterDef());
161:       assertFalse(node0.isNull());
162:       assertFalse(node0.isReturn());
163:       assertFalse(node0.isCatch());
164:       assertFalse(node0.hasChildren());
165:       assertFalse(node0.isDec());
166:       assertFalse(node0.isWhile());
167:       assertEquals(39, node0.getType());
168:       assertFalse(node0.hasMoreThanOneChild());
169:       assertFalse(node0.isAssign());
170:       assertFalse(node0.isRegExp());
171:       assertFalse(node0.isTypeOf());
172:       assertFalse(node0.hasOneChild());
173:       assertFalse(node0.isArrayLit());
174:       assertFalse(node0.isGetElem());
175:       assertEquals(914451, node0.getSourcePosition());
176:       assertFalse(node0.isLabelName());
177:       assertFalse(node0.isDelProp());
178:       assertFalse(node0.isVoid());
179:       assertFalse(node0.isTry());
180:       assertFalse(node0.isScript());
181:       assertFalse(node0.isEmpty());
182:       assertFalse(node0.isTrue());
183:       assertFalse(node0.isOr());
184:       assertFalse(node0.isGetterDef());
185:       assertEquals(0, node0.getChildCount());
186:       assertFalse(node0.isParamList());
187:       assertFalse(node0.isAssignAdd());
188:       assertFalse(node0.isDo());
189:       assertFalse(node0.isDefaultCase());
190:       assertEquals(1043, node0.getCharno());
191:       assertFalse(node0.isLabel());
192:       assertEquals(49, Node.DIRECT_EVAL);
193:       assertEquals(30, Node.VAR_ARGS_NAME);
194:       assertEquals(1, Node.DECR_FLAG);
195:       assertEquals(15, Node.NO_SIDE_EFFECTS);
196:       assertEquals(12, Node.COLUMN_BITS);
197:       assertEquals(57, Node.LAST_PROP);
198:       assertEquals(32, Node.INCRDECR_PROP);
199:       assertEquals(37, Node.OPT_ARG_NAME);
200:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
201:       assertEquals(2, Node.POST_FLAG);
202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
203:       assertEquals(29, Node.JSDOC_INFO_PROP);
204:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
205:       assertEquals(47, Node.IS_DISPATCHER);
206:       assertEquals(56, Node.CHANGE_TIME);
207:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
208:       assertEquals(48, Node.DIRECTIVES);
209:       assertEquals(39, Node.EMPTY_BLOCK);
210:       assertEquals(53, Node.INPUT_ID);
211:       assertEquals(57, Node.REFLECTED_OBJECT);
212:       assertEquals(55, Node.INFERRED_FUNCTION);
213:       assertEquals(36, Node.QUOTED_PROP);
214:       assertEquals(52, Node.LENGTH);
215:       assertEquals(8, Node.FLAG_NO_THROWS);
216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
217:       assertEquals(43, Node.IS_CONSTANT_NAME);
218:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
219:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
220:       assertEquals(4095, Node.COLUMN_MASK);
221:       assertEquals(50, Node.FREE_CALL);
222:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
223:       assertEquals(40, Node.ORIGINALNAME_PROP);
224:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
225:       assertEquals(46, Node.IS_NAMESPACE);
226:       assertEquals(54, Node.SLASH_V);
227:       assertEquals(51, Node.STATIC_SOURCE_FILE);
228:       assertFalse(boolean0);
229:       
230:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
231:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
232:       assertEquals(0, node_SideEffectFlags0.valueOf());
233:       assertNotNull(node_SideEffectFlags0);
234:       
235:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
236:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
237:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
238:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
239:       assertEquals(31, node_SideEffectFlags0.valueOf());
240:       assertEquals(31, node_SideEffectFlags1.valueOf());
241:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
242:       assertNotNull(node_SideEffectFlags1);
243:       
244:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
245:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
246:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
247:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
248:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
249:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
250:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
251:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
252:       assertEquals(27, node_SideEffectFlags0.valueOf());
253:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
254:       assertEquals(27, node_SideEffectFlags1.valueOf());
255:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
256:       assertEquals(27, node_SideEffectFlags2.valueOf());
257:       assertNotNull(node_SideEffectFlags2);
258:       
259:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
260:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
261:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
262:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
263:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
264:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
265:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
266:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
267:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
268:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
269:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
270:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
271:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
272:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
273:       assertEquals(19, node_SideEffectFlags0.valueOf());
274:       assertEquals(19, node_SideEffectFlags1.valueOf());
275:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
276:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
277:       assertEquals(19, node_SideEffectFlags2.valueOf());
278:       assertEquals(19, node_SideEffectFlags3.valueOf());
279:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
280:       assertNotNull(node_SideEffectFlags3);
281:       
282:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
283:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
284:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
285:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
286:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
287:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
288:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
289:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
290:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
291:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
292:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
293:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
294:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
295:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
296:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
297:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
298:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
299:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
300:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
301:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
302:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
303:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
304:       assertEquals(0, node_SideEffectFlags0.valueOf());
305:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
306:       assertEquals(0, node_SideEffectFlags1.valueOf());
307:       assertEquals(0, node_SideEffectFlags2.valueOf());
308:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
309:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
310:       assertEquals(0, node_SideEffectFlags3.valueOf());
311:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
312:       assertEquals(0, node_SideEffectFlags4.valueOf());
313:       assertNotNull(node_SideEffectFlags4);
314:       
315:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
316:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
317:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
318:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
319:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
320:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
321:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
322:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
323:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
324:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
325:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
326:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
327:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
328:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
329:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
330:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
331:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
332:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
333:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
334:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
335:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
336:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
337:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
338:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
339:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
340:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
341:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
342:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
343:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
344:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
345:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
346:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
347:       assertEquals(0, node_SideEffectFlags0.valueOf());
348:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
349:       assertEquals(0, node_SideEffectFlags1.valueOf());
350:       assertEquals(0, node_SideEffectFlags2.valueOf());
351:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
352:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
353:       assertEquals(0, node_SideEffectFlags3.valueOf());
354:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
355:       assertEquals(0, node_SideEffectFlags4.valueOf());
356:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
357:       assertEquals(0, node_SideEffectFlags5.valueOf());
358:       assertNotNull(node_SideEffectFlags5);
359:       
360:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags1.setThrows();
361:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
362:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
363:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
364:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
365:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
366:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
367:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
368:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
369:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
370:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
371:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
372:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
373:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
374:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
375:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
376:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
377:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
378:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
379:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
380:       assertEquals(0, node_SideEffectFlags0.valueOf());
381:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
382:       assertEquals(0, node_SideEffectFlags1.valueOf());
383:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
384:       assertEquals(0, node_SideEffectFlags6.valueOf());
385:       assertNotNull(node_SideEffectFlags6);
386:       
387:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags0.setMutatesThis();
388:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
389:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
390:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
391:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
392:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
393:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
394:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
395:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
396:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
397:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
398:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
399:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
400:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
401:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
402:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
403:       assertEquals(0, node_SideEffectFlags0.valueOf());
404:       assertEquals(0, node_SideEffectFlags7.valueOf());
405:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
406:       assertNotNull(node_SideEffectFlags7);
407:       
408:       Node.SideEffectFlags node_SideEffectFlags8 = new Node.SideEffectFlags();
409:       assertTrue(node_SideEffectFlags8.areAllFlagsSet());
410:       assertEquals(0, node_SideEffectFlags8.valueOf());
411:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags2));
412:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags0));
413:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags1));
414:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags3));
415:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags4));
416:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags6));
417:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags5));
418:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags7));
419:       assertNotNull(node_SideEffectFlags8);
420:       
421:       Node node1 = new Node(43, node0, node0, node0);
422:       assertFalse(node0.isHook());
423:       assertFalse(node0.isThrow());
424:       assertFalse(node0.isSwitch());
425:       assertFalse(node0.isString());
426:       assertFalse(node0.isInc());
427:       assertFalse(node0.isInstanceOf());
428:       assertFalse(node0.isGetProp());
429:       assertFalse(node0.isCase());
430:       assertTrue(node0.isNumber());
431:       assertFalse(node0.isBreak());
432:       assertFalse(node0.isThis());
433:       assertFalse(node0.isFor());
434:       assertFalse(node0.isExprResult());
435:       assertFalse(node0.isComma());
436:       assertFalse(node0.isWith());
437:       assertFalse(node0.isCast());
438:       assertFalse(node0.isIf());
439:       assertFalse(node0.isNE());
440:       assertFalse(node0.isDebugger());
441:       assertFalse(node0.isNot());
442:       assertFalse(node0.isObjectLit());
443:       assertFalse(node0.isIn());
444:       assertFalse(node0.isAnd());
445:       assertEquals(223, node0.getLineno());
446:       assertFalse(node0.isFalse());
447:       assertFalse(node0.isContinue());
448:       assertFalse(node0.isFunction());
449:       assertFalse(node0.isAdd());
450:       assertFalse(node0.isVar());
451:       assertFalse(node0.isBlock());
452:       assertFalse(node0.isCall());
453:       assertFalse(node0.isStringKey());
454:       assertFalse(node0.isNew());
455:       assertFalse(node0.isName());
456:       assertFalse(node0.isSetterDef());
457:       assertFalse(node0.isNull());
458:       assertFalse(node0.isReturn());
459:       assertFalse(node0.isCatch());
460:       assertFalse(node0.hasChildren());
461:       assertFalse(node0.isDec());
462:       assertFalse(node0.isWhile());
463:       assertEquals(39, node0.getType());
464:       assertFalse(node0.hasMoreThanOneChild());
465:       assertFalse(node0.isAssign());
466:       assertFalse(node0.isRegExp());
467:       assertFalse(node0.isTypeOf());
468:       assertFalse(node0.hasOneChild());
469:       assertFalse(node0.isArrayLit());
470:       assertFalse(node0.isGetElem());
471:       assertEquals(914451, node0.getSourcePosition());
472:       assertFalse(node0.isLabelName());
473:       assertFalse(node0.isDelProp());
474:       assertFalse(node0.isVoid());
475:       assertFalse(node0.isTry());
476:       assertFalse(node0.isScript());
477:       assertFalse(node0.isEmpty());
478:       assertFalse(node0.isTrue());
479:       assertFalse(node0.isOr());
480:       assertFalse(node0.isGetterDef());
481:       assertEquals(0, node0.getChildCount());
482:       assertFalse(node0.isParamList());
483:       assertFalse(node0.isAssignAdd());
484:       assertFalse(node0.isDo());
485:       assertFalse(node0.isDefaultCase());
486:       assertEquals(1043, node0.getCharno());
487:       assertFalse(node0.isLabel());
488:       assertFalse(node1.isWhile());
489:       assertFalse(node1.isBlock());
490:       assertFalse(node1.isVar());
491:       assertEquals(43, node1.getType());
492:       assertFalse(node1.isAssignAdd());
493:       assertFalse(node1.isAdd());
494:       assertFalse(node1.isNew());
495:       assertFalse(node1.isDo());
496:       assertEquals((-1), node1.getSourcePosition());
497:       assertTrue(node1.isFalse());
498:       assertFalse(node1.isParamList());
499:       assertFalse(node1.isNumber());
500:       assertFalse(node1.isStringKey());
501:       assertFalse(node1.isLabel());
502:       assertFalse(node1.isCast());
503:       assertFalse(node1.isContinue());
504:       assertFalse(node1.isLabelName());
505:       assertFalse(node1.isRegExp());
506:       assertFalse(node1.isScript());
507:       assertFalse(node1.isFunction());
508:       assertFalse(node1.isWith());
509:       assertFalse(node1.isTry());
510:       assertFalse(node1.isSetterDef());
511:       assertFalse(node1.isNE());
512:       assertFalse(node1.isIf());
513:       assertFalse(node1.isFor());
514:       assertEquals(1, node1.getChildCount());
515:       assertFalse(node1.isThis());
516:       assertFalse(node1.isCatch());
517:       assertFalse(node1.isInstanceOf());
518:       assertFalse(node1.hasMoreThanOneChild());
519:       assertTrue(node1.hasChildren());
520:       assertEquals((-1), node1.getLineno());
521:       assertFalse(node1.isString());
522:       assertFalse(node1.isSwitch());
523:       assertEquals((-1), node1.getCharno());
524:       assertFalse(node1.isHook());
525:       assertFalse(node1.isIn());
526:       assertFalse(node1.isCase());
527:       assertFalse(node1.isInc());
528:       assertFalse(node1.isGetterDef());
529:       assertFalse(node1.isThrow());
530:       assertFalse(node1.isArrayLit());
531:       assertFalse(node1.isAnd());
532:       assertFalse(node1.isDefaultCase());
533:       assertFalse(node1.isNot());
534:       assertFalse(node1.isDebugger());
535:       assertFalse(node1.isTrue());
536:       assertFalse(node1.isObjectLit());
537:       assertFalse(node1.isEmpty());
538:       assertFalse(node1.isGetProp());
539:       assertFalse(node1.isNull());
540:       assertFalse(node1.isTypeOf());
541:       assertFalse(node1.isDec());
542:       assertFalse(node1.isComma());
543:       assertFalse(node1.isDelProp());
544:       assertFalse(node1.isAssign());
545:       assertFalse(node1.isOr());
546:       assertFalse(node1.isReturn());
547:       assertTrue(node1.hasOneChild());
548:       assertFalse(node1.isName());
549:       assertFalse(node1.isGetElem());
550:       assertFalse(node1.isVoid());
551:       assertFalse(node1.isCall());
552:       assertFalse(node1.isExprResult());
553:       assertFalse(node1.isBreak());
554:       assertFalse(node1.equals((Object)node0));
555:       assertNotNull(node1);
556:       assertEquals(49, Node.DIRECT_EVAL);
557:       assertEquals(30, Node.VAR_ARGS_NAME);
558:       assertEquals(1, Node.DECR_FLAG);
559:       assertEquals(15, Node.NO_SIDE_EFFECTS);
560:       assertEquals(12, Node.COLUMN_BITS);
561:       assertEquals(57, Node.LAST_PROP);
562:       assertEquals(32, Node.INCRDECR_PROP);
563:       assertEquals(37, Node.OPT_ARG_NAME);
564:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
565:       assertEquals(2, Node.POST_FLAG);
566:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
567:       assertEquals(29, Node.JSDOC_INFO_PROP);
568:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
569:       assertEquals(47, Node.IS_DISPATCHER);
570:       assertEquals(56, Node.CHANGE_TIME);
571:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
572:       assertEquals(48, Node.DIRECTIVES);
573:       assertEquals(39, Node.EMPTY_BLOCK);
574:       assertEquals(53, Node.INPUT_ID);
575:       assertEquals(57, Node.REFLECTED_OBJECT);
576:       assertEquals(55, Node.INFERRED_FUNCTION);
577:       assertEquals(36, Node.QUOTED_PROP);
578:       assertEquals(52, Node.LENGTH);
579:       assertEquals(8, Node.FLAG_NO_THROWS);
580:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
581:       assertEquals(43, Node.IS_CONSTANT_NAME);
582:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
583:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
584:       assertEquals(4095, Node.COLUMN_MASK);
585:       assertEquals(50, Node.FREE_CALL);
586:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
587:       assertEquals(40, Node.ORIGINALNAME_PROP);
588:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
589:       assertEquals(46, Node.IS_NAMESPACE);
590:       assertEquals(54, Node.SLASH_V);
591:       assertEquals(51, Node.STATIC_SOURCE_FILE);
592:       assertEquals(32, Node.INCRDECR_PROP);
593:       assertEquals(46, Node.IS_NAMESPACE);
594:       assertEquals(2, Node.POST_FLAG);
595:       assertEquals(12, Node.COLUMN_BITS);
596:       assertEquals(51, Node.STATIC_SOURCE_FILE);
597:       assertEquals(47, Node.IS_DISPATCHER);
598:       assertEquals(30, Node.VAR_ARGS_NAME);
599:       assertEquals(49, Node.DIRECT_EVAL);
600:       assertEquals(56, Node.CHANGE_TIME);
601:       assertEquals(37, Node.OPT_ARG_NAME);
602:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
603:       assertEquals(54, Node.SLASH_V);
604:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
605:       assertEquals(50, Node.FREE_CALL);
606:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
607:       assertEquals(1, Node.DECR_FLAG);
608:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
609:       assertEquals(4095, Node.COLUMN_MASK);
610:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
611:       assertEquals(8, Node.FLAG_NO_THROWS);
612:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
613:       assertEquals(43, Node.IS_CONSTANT_NAME);
614:       assertEquals(40, Node.ORIGINALNAME_PROP);
615:       assertEquals(48, Node.DIRECTIVES);
616:       assertEquals(52, Node.LENGTH);
617:       assertEquals(53, Node.INPUT_ID);
618:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
619:       assertEquals(57, Node.REFLECTED_OBJECT);
620:       assertEquals(36, Node.QUOTED_PROP);
621:       assertEquals(29, Node.JSDOC_INFO_PROP);
622:       assertEquals(57, Node.LAST_PROP);
623:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
624:       assertEquals(55, Node.INFERRED_FUNCTION);
625:       assertEquals(39, Node.EMPTY_BLOCK);
626:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
627:       assertEquals(15, Node.NO_SIDE_EFFECTS);
628:       
629:       boolean boolean1 = node0.isEquivalentToShallow(node1);
630:       assertFalse(node0.isHook());
631:       assertFalse(node0.isThrow());
632:       assertFalse(node0.isSwitch());
633:       assertFalse(node0.isString());
634:       assertFalse(node0.isInc());
635:       assertFalse(node0.isInstanceOf());
636:       assertFalse(node0.isGetProp());
637:       assertFalse(node0.isCase());
638:       assertTrue(node0.isNumber());
639:       assertFalse(node0.isBreak());
640:       assertFalse(node0.isThis());
641:       assertFalse(node0.isFor());
642:       assertFalse(node0.isExprResult());
643:       assertFalse(node0.isComma());
644:       assertFalse(node0.isWith());
645:       assertFalse(node0.isCast());
646:       assertFalse(node0.isIf());
647:       assertFalse(node0.isNE());
648:       assertFalse(node0.isDebugger());
649:       assertFalse(node0.isNot());
650:       assertFalse(node0.isObjectLit());
651:       assertFalse(node0.isIn());
652:       assertFalse(node0.isAnd());
653:       assertEquals(223, node0.getLineno());
654:       assertFalse(node0.isFalse());
655:       assertFalse(node0.isContinue());
656:       assertFalse(node0.isFunction());
657:       assertFalse(node0.isAdd());
658:       assertFalse(node0.isVar());
659:       assertFalse(node0.isBlock());
660:       assertFalse(node0.isCall());
661:       assertFalse(node0.isStringKey());
662:       assertFalse(node0.isNew());
663:       assertFalse(node0.isName());
664:       assertFalse(node0.isSetterDef());
665:       assertFalse(node0.isNull());
666:       assertFalse(node0.isReturn());
667:       assertFalse(node0.isCatch());
668:       assertFalse(node0.hasChildren());
669:       assertFalse(node0.isDec());
670:       assertFalse(node0.isWhile());
671:       assertEquals(39, node0.getType());
672:       assertFalse(node0.hasMoreThanOneChild());
673:       assertFalse(node0.isAssign());
674:       assertFalse(node0.isRegExp());
675:       assertFalse(node0.isTypeOf());
676:       assertFalse(node0.hasOneChild());
677:       assertFalse(node0.isArrayLit());
678:       assertFalse(node0.isGetElem());
679:       assertEquals(914451, node0.getSourcePosition());
680:       assertFalse(node0.isLabelName());
681:       assertFalse(node0.isDelProp());
682:       assertFalse(node0.isVoid());
683:       assertFalse(node0.isTry());
684:       assertFalse(node0.isScript());
685:       assertFalse(node0.isEmpty());
686:       assertFalse(node0.isTrue());
687:       assertFalse(node0.isOr());
688:       assertFalse(node0.isGetterDef());
689:       assertEquals(0, node0.getChildCount());
690:       assertFalse(node0.isParamList());
691:       assertFalse(node0.isAssignAdd());
692:       assertFalse(node0.isDo());
693:       assertFalse(node0.isDefaultCase());
694:       assertEquals(1043, node0.getCharno());
695:       assertFalse(node0.isLabel());
696:       assertFalse(node1.isWhile());
697:       assertFalse(node1.isBlock());
698:       assertFalse(node1.isVar());
699:       assertEquals(43, node1.getType());
700:       assertFalse(node1.isAssignAdd());
701:       assertFalse(node1.isAdd());
702:       assertFalse(node1.isNew());
703:       assertFalse(node1.isDo());
704:       assertEquals((-1), node1.getSourcePosition());
705:       assertTrue(node1.isFalse());
706:       assertFalse(node1.isParamList());
707:       assertFalse(node1.isNumber());
708:       assertFalse(node1.isStringKey());
709:       assertFalse(node1.isLabel());
710:       assertFalse(node1.isCast());
711:       assertFalse(node1.isContinue());
712:       assertFalse(node1.isLabelName());
713:       assertFalse(node1.isRegExp());
714:       assertFalse(node1.isScript());
715:       assertFalse(node1.isFunction());
716:       assertFalse(node1.isWith());
717:       assertFalse(node1.isTry());
718:       assertFalse(node1.isSetterDef());
719:       assertFalse(node1.isNE());
720:       assertFalse(node1.isIf());
721:       assertFalse(node1.isFor());
722:       assertEquals(1, node1.getChildCount());
723:       assertFalse(node1.isThis());
724:       assertFalse(node1.isCatch());
725:       assertFalse(node1.isInstanceOf());
726:       assertFalse(node1.hasMoreThanOneChild());
727:       assertTrue(node1.hasChildren());
728:       assertEquals((-1), node1.getLineno());
729:       assertFalse(node1.isString());
730:       assertFalse(node1.isSwitch());
731:       assertEquals((-1), node1.getCharno());
732:       assertFalse(node1.isHook());
733:       assertFalse(node1.isIn());
734:       assertFalse(node1.isCase());
735:       assertFalse(node1.isInc());
736:       assertFalse(node1.isGetterDef());
737:       assertFalse(node1.isThrow());
738:       assertFalse(node1.isArrayLit());
739:       assertFalse(node1.isAnd());
740:       assertFalse(node1.isDefaultCase());
741:       assertFalse(node1.isNot());
742:       assertFalse(node1.isDebugger());
743:       assertFalse(node1.isTrue());
744:       assertFalse(node1.isObjectLit());
745:       assertFalse(node1.isEmpty());
746:       assertFalse(node1.isGetProp());
747:       assertFalse(node1.isNull());
748:       assertFalse(node1.isTypeOf());
749:       assertFalse(node1.isDec());
750:       assertFalse(node1.isComma());
751:       assertFalse(node1.isDelProp());
752:       assertFalse(node1.isAssign());
753:       assertFalse(node1.isOr());
754:       assertFalse(node1.isReturn());
755:       assertTrue(node1.hasOneChild());
756:       assertFalse(node1.isName());
757:       assertFalse(node1.isGetElem());
758:       assertFalse(node1.isVoid());
759:       assertFalse(node1.isCall());
760:       assertFalse(node1.isExprResult());
761:       assertFalse(node1.isBreak());
762:       assertFalse(node0.equals((Object)node1));
763:       assertFalse(node1.equals((Object)node0));
764:       assertTrue(boolean1 == boolean0);
765:       assertEquals(49, Node.DIRECT_EVAL);
766:       assertEquals(30, Node.VAR_ARGS_NAME);
767:       assertEquals(1, Node.DECR_FLAG);
768:       assertEquals(15, Node.NO_SIDE_EFFECTS);
769:       assertEquals(12, Node.COLUMN_BITS);
770:       assertEquals(57, Node.LAST_PROP);
771:       assertEquals(32, Node.INCRDECR_PROP);
772:       assertEquals(37, Node.OPT_ARG_NAME);
773:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
774:       assertEquals(2, Node.POST_FLAG);
775:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
776:       assertEquals(29, Node.JSDOC_INFO_PROP);
777:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
778:       assertEquals(47, Node.IS_DISPATCHER);
779:       assertEquals(56, Node.CHANGE_TIME);
780:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
781:       assertEquals(48, Node.DIRECTIVES);
782:       assertEquals(39, Node.EMPTY_BLOCK);
783:       assertEquals(53, Node.INPUT_ID);
784:       assertEquals(57, Node.REFLECTED_OBJECT);
785:       assertEquals(55, Node.INFERRED_FUNCTION);
786:       assertEquals(36, Node.QUOTED_PROP);
787:       assertEquals(52, Node.LENGTH);
788:       assertEquals(8, Node.FLAG_NO_THROWS);
789:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
790:       assertEquals(43, Node.IS_CONSTANT_NAME);
791:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
792:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
793:       assertEquals(4095, Node.COLUMN_MASK);
794:       assertEquals(50, Node.FREE_CALL);
795:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
796:       assertEquals(40, Node.ORIGINALNAME_PROP);
797:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
798:       assertEquals(46, Node.IS_NAMESPACE);
799:       assertEquals(54, Node.SLASH_V);
800:       assertEquals(51, Node.STATIC_SOURCE_FILE);
801:       assertEquals(32, Node.INCRDECR_PROP);
802:       assertEquals(46, Node.IS_NAMESPACE);
803:       assertEquals(2, Node.POST_FLAG);
804:       assertEquals(12, Node.COLUMN_BITS);
805:       assertEquals(51, Node.STATIC_SOURCE_FILE);
806:       assertEquals(47, Node.IS_DISPATCHER);
807:       assertEquals(30, Node.VAR_ARGS_NAME);
808:       assertEquals(49, Node.DIRECT_EVAL);
809:       assertEquals(56, Node.CHANGE_TIME);
810:       assertEquals(37, Node.OPT_ARG_NAME);
811:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
812:       assertEquals(54, Node.SLASH_V);
813:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
814:       assertEquals(50, Node.FREE_CALL);
815:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
816:       assertEquals(1, Node.DECR_FLAG);
817:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
818:       assertEquals(4095, Node.COLUMN_MASK);
819:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
820:       assertEquals(8, Node.FLAG_NO_THROWS);
821:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
822:       assertEquals(43, Node.IS_CONSTANT_NAME);
823:       assertEquals(40, Node.ORIGINALNAME_PROP);
824:       assertEquals(48, Node.DIRECTIVES);
825:       assertEquals(52, Node.LENGTH);
826:       assertEquals(53, Node.INPUT_ID);
827:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
828:       assertEquals(57, Node.REFLECTED_OBJECT);
829:       assertEquals(36, Node.QUOTED_PROP);
830:       assertEquals(29, Node.JSDOC_INFO_PROP);
831:       assertEquals(57, Node.LAST_PROP);
832:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
833:       assertEquals(55, Node.INFERRED_FUNCTION);
834:       assertEquals(39, Node.EMPTY_BLOCK);
835:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
836:       assertEquals(15, Node.NO_SIDE_EFFECTS);
837:       assertFalse(boolean1);
838:       
839:       boolean boolean2 = node1.isParamList();
840:       assertFalse(node0.isHook());
841:       assertFalse(node0.isThrow());
842:       assertFalse(node0.isSwitch());
843:       assertFalse(node0.isString());
844:       assertFalse(node0.isInc());
845:       assertFalse(node0.isInstanceOf());
846:       assertFalse(node0.isGetProp());
847:       assertFalse(node0.isCase());
848:       assertTrue(node0.isNumber());
849:       assertFalse(node0.isBreak());
850:       assertFalse(node0.isThis());
851:       assertFalse(node0.isFor());
852:       assertFalse(node0.isExprResult());
853:       assertFalse(node0.isComma());
854:       assertFalse(node0.isWith());
855:       assertFalse(node0.isCast());
856:       assertFalse(node0.isIf());
857:       assertFalse(node0.isNE());
858:       assertFalse(node0.isDebugger());
859:       assertFalse(node0.isNot());
860:       assertFalse(node0.isObjectLit());
861:       assertFalse(node0.isIn());
862:       assertFalse(node0.isAnd());
863:       assertEquals(223, node0.getLineno());
864:       assertFalse(node0.isFalse());
865:       assertFalse(node0.isContinue());
866:       assertFalse(node0.isFunction());
867:       assertFalse(node0.isAdd());
868:       assertFalse(node0.isVar());
869:       assertFalse(node0.isBlock());
870:       assertFalse(node0.isCall());
871:       assertFalse(node0.isStringKey());
872:       assertFalse(node0.isNew());
873:       assertFalse(node0.isName());
874:       assertFalse(node0.isSetterDef());
875:       assertFalse(node0.isNull());
876:       assertFalse(node0.isReturn());
877:       assertFalse(node0.isCatch());
878:       assertFalse(node0.hasChildren());
879:       assertFalse(node0.isDec());
880:       assertFalse(node0.isWhile());
881:       assertEquals(39, node0.getType());
882:       assertFalse(node0.hasMoreThanOneChild());
883:       assertFalse(node0.isAssign());
884:       assertFalse(node0.isRegExp());
885:       assertFalse(node0.isTypeOf());
886:       assertFalse(node0.hasOneChild());
887:       assertFalse(node0.isArrayLit());
888:       assertFalse(node0.isGetElem());
889:       assertEquals(914451, node0.getSourcePosition());
890:       assertFalse(node0.isLabelName());
891:       assertFalse(node0.isDelProp());
892:       assertFalse(node0.isVoid());
893:       assertFalse(node0.isTry());
894:       assertFalse(node0.isScript());
895:       assertFalse(node0.isEmpty());
896:       assertFalse(node0.isTrue());
897:       assertFalse(node0.isOr());
898:       assertFalse(node0.isGetterDef());
899:       assertEquals(0, node0.getChildCount());
900:       assertFalse(node0.isParamList());
901:       assertFalse(node0.isAssignAdd());
902:       assertFalse(node0.isDo());
903:       assertFalse(node0.isDefaultCase());
904:       assertEquals(1043, node0.getCharno());
905:       assertFalse(node0.isLabel());
906:       assertFalse(node1.isWhile());
907:       assertFalse(node1.isBlock());
908:       assertFalse(node1.isVar());
909:       assertEquals(43, node1.getType());
910:       assertFalse(node1.isAssignAdd());
911:       assertFalse(node1.isAdd());
912:       assertFalse(node1.isNew());
913:       assertFalse(node1.isDo());
914:       assertEquals((-1), node1.getSourcePosition());
915:       assertTrue(node1.isFalse());
916:       assertFalse(node1.isParamList());
917:       assertFalse(node1.isNumber());
918:       assertFalse(node1.isStringKey());
919:       assertFalse(node1.isLabel());
920:       assertFalse(node1.isCast());
921:       assertFalse(node1.isContinue());
922:       assertFalse(node1.isLabelName());
923:       assertFalse(node1.isRegExp());
924:       assertFalse(node1.isScript());
925:       assertFalse(node1.isFunction());
926:       assertFalse(node1.isWith());
927:       assertFalse(node1.isTry());
928:       assertFalse(node1.isSetterDef());
929:       assertFalse(node1.isNE());
930:       assertFalse(node1.isIf());
931:       assertFalse(node1.isFor());
932:       assertEquals(1, node1.getChildCount());
933:       assertFalse(node1.isThis());
934:       assertFalse(node1.isCatch());
935:       assertFalse(node1.isInstanceOf());
936:       assertFalse(node1.hasMoreThanOneChild());
937:       assertTrue(node1.hasChildren());
938:       assertEquals((-1), node1.getLineno());
939:       assertFalse(node1.isString());
940:       assertFalse(node1.isSwitch());
941:       assertEquals((-1), node1.getCharno());
942:       assertFalse(node1.isHook());
943:       assertFalse(node1.isIn());
944:       assertFalse(node1.isCase());
945:       assertFalse(node1.isInc());
946:       assertFalse(node1.isGetterDef());
947:       assertFalse(node1.isThrow());
948:       assertFalse(node1.isArrayLit());
949:       assertFalse(node1.isAnd());
950:       assertFalse(node1.isDefaultCase());
951:       assertFalse(node1.isNot());
952:       assertFalse(node1.isDebugger());
953:       assertFalse(node1.isTrue());
954:       assertFalse(node1.isObjectLit());
955:       assertFalse(node1.isEmpty());
956:       assertFalse(node1.isGetProp());
957:       assertFalse(node1.isNull());
958:       assertFalse(node1.isTypeOf());
959:       assertFalse(node1.isDec());
960:       assertFalse(node1.isComma());
961:       assertFalse(node1.isDelProp());
962:       assertFalse(node1.isAssign());
963:       assertFalse(node1.isOr());
964:       assertFalse(node1.isReturn());
965:       assertTrue(node1.hasOneChild());
966:       assertFalse(node1.isName());
967:       assertFalse(node1.isGetElem());
968:       assertFalse(node1.isVoid());
969:       assertFalse(node1.isCall());
970:       assertFalse(node1.isExprResult());
971:       assertFalse(node1.isBreak());
972:       assertFalse(node0.equals((Object)node1));
973:       assertFalse(node1.equals((Object)node0));
974:       assertTrue(boolean2 == boolean1);
975:       assertTrue(boolean2 == boolean0);
976:       assertEquals(49, Node.DIRECT_EVAL);
977:       assertEquals(30, Node.VAR_ARGS_NAME);
978:       assertEquals(1, Node.DECR_FLAG);
979:       assertEquals(15, Node.NO_SIDE_EFFECTS);
980:       assertEquals(12, Node.COLUMN_BITS);
981:       assertEquals(57, Node.LAST_PROP);
982:       assertEquals(32, Node.INCRDECR_PROP);
983:       assertEquals(37, Node.OPT_ARG_NAME);
984:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
985:       assertEquals(2, Node.POST_FLAG);
986:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
987:       assertEquals(29, Node.JSDOC_INFO_PROP);
988:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
989:       assertEquals(47, Node.IS_DISPATCHER);
990:       assertEquals(56, Node.CHANGE_TIME);
991:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
992:       assertEquals(48, Node.DIRECTIVES);
993:       assertEquals(39, Node.EMPTY_BLOCK);
994:       assertEquals(53, Node.INPUT_ID);
995:       assertEquals(57, Node.REFLECTED_OBJECT);
996:       assertEquals(55, Node.INFERRED_FUNCTION);
997:       assertEquals(36, Node.QUOTED_PROP);
998:       assertEquals(52, Node.LENGTH);
999:       assertEquals(8, Node.FLAG_NO_THROWS);
1000:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1001:       assertEquals(43, Node.IS_CONSTANT_NAME);
1002:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1003:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1004:       assertEquals(4095, Node.COLUMN_MASK);
1005:       assertEquals(50, Node.FREE_CALL);
1006:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1007:       assertEquals(40, Node.ORIGINALNAME_PROP);
1008:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1009:       assertEquals(46, Node.IS_NAMESPACE);
1010:       assertEquals(54, Node.SLASH_V);
1011:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1012:       assertEquals(32, Node.INCRDECR_PROP);
1013:       assertEquals(46, Node.IS_NAMESPACE);
1014:       assertEquals(2, Node.POST_FLAG);
1015:       assertEquals(12, Node.COLUMN_BITS);
1016:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1017:       assertEquals(47, Node.IS_DISPATCHER);
1018:       assertEquals(30, Node.VAR_ARGS_NAME);
1019:       assertEquals(49, Node.DIRECT_EVAL);
1020:       assertEquals(56, Node.CHANGE_TIME);
1021:       assertEquals(37, Node.OPT_ARG_NAME);
1022:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1023:       assertEquals(54, Node.SLASH_V);
1024:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1025:       assertEquals(50, Node.FREE_CALL);
1026:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1027:       assertEquals(1, Node.DECR_FLAG);
1028:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1029:       assertEquals(4095, Node.COLUMN_MASK);
1030:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1031:       assertEquals(8, Node.FLAG_NO_THROWS);
1032:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1033:       assertEquals(43, Node.IS_CONSTANT_NAME);
1034:       assertEquals(40, Node.ORIGINALNAME_PROP);
1035:       assertEquals(48, Node.DIRECTIVES);
1036:       assertEquals(52, Node.LENGTH);
1037:       assertEquals(53, Node.INPUT_ID);
1038:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1039:       assertEquals(57, Node.REFLECTED_OBJECT);
1040:       assertEquals(36, Node.QUOTED_PROP);
1041:       assertEquals(29, Node.JSDOC_INFO_PROP);
1042:       assertEquals(57, Node.LAST_PROP);
1043:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1044:       assertEquals(55, Node.INFERRED_FUNCTION);
1045:       assertEquals(39, Node.EMPTY_BLOCK);
1046:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1047:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1048:       assertFalse(boolean2);
1049:       
1050:       Node node2 = node1.srcrefTree(node0);
1051:       assertSame(node1, node2);
1052:       assertSame(node2, node1);
1053:       assertFalse(node0.isHook());
1054:       assertFalse(node0.isThrow());
1055:       assertFalse(node0.isSwitch());
1056:       assertFalse(node0.isString());
1057:       assertFalse(node0.isInc());
1058:       assertFalse(node0.isInstanceOf());
1059:       assertFalse(node0.isGetProp());
1060:       assertFalse(node0.isCase());
1061:       assertTrue(node0.isNumber());
1062:       assertFalse(node0.isBreak());
1063:       assertFalse(node0.isThis());
1064:       assertFalse(node0.isFor());
1065:       assertFalse(node0.isExprResult());
1066:       assertFalse(node0.isComma());
1067:       assertFalse(node0.isWith());
1068:       assertFalse(node0.isCast());
1069:       assertFalse(node0.isIf());
1070:       assertFalse(node0.isNE());
1071:       assertFalse(node0.isDebugger());
1072:       assertFalse(node0.isNot());
1073:       assertFalse(node0.isObjectLit());
1074:       assertFalse(node0.isIn());
1075:       assertFalse(node0.isAnd());
1076:       assertEquals(223, node0.getLineno());
1077:       assertFalse(node0.isFalse());
1078:       assertFalse(node0.isContinue());
1079:       assertFalse(node0.isFunction());
1080:       assertFalse(node0.isAdd());
1081:       assertFalse(node0.isVar());
1082:       assertFalse(node0.isBlock());
1083:       assertFalse(node0.isCall());
1084:       assertFalse(node0.isStringKey());
1085:       assertFalse(node0.isNew());
1086:       assertFalse(node0.isName());
1087:       assertFalse(node0.isSetterDef());
1088:       assertFalse(node0.isNull());
1089:       assertFalse(node0.isReturn());
1090:       assertFalse(node0.isCatch());
1091:       assertFalse(node0.hasChildren());
1092:       assertFalse(node0.isDec());
1093:       assertFalse(node0.isWhile());
1094:       assertEquals(39, node0.getType());
1095:       assertFalse(node0.hasMoreThanOneChild());
1096:       assertFalse(node0.isAssign());
1097:       assertFalse(node0.isRegExp());
1098:       assertFalse(node0.isTypeOf());
1099:       assertFalse(node0.hasOneChild());
1100:       assertFalse(node0.isArrayLit());
1101:       assertFalse(node0.isGetElem());
1102:       assertEquals(914451, node0.getSourcePosition());
1103:       assertFalse(node0.isLabelName());
1104:       assertFalse(node0.isDelProp());
1105:       assertFalse(node0.isVoid());
1106:       assertFalse(node0.isTry());
1107:       assertFalse(node0.isScript());
1108:       assertFalse(node0.isEmpty());
1109:       assertFalse(node0.isTrue());
1110:       assertFalse(node0.isOr());
1111:       assertFalse(node0.isGetterDef());
1112:       assertEquals(0, node0.getChildCount());
1113:       assertFalse(node0.isParamList());
1114:       assertFalse(node0.isAssignAdd());
1115:       assertFalse(node0.isDo());
1116:       assertFalse(node0.isDefaultCase());
1117:       assertEquals(1043, node0.getCharno());
1118:       assertFalse(node0.isLabel());
1119:       assertFalse(node1.isWhile());
1120:       assertFalse(node1.isBlock());
1121:       assertFalse(node1.isVar());
1122:       assertEquals(43, node1.getType());
1123:       assertFalse(node1.isAssignAdd());
1124:       assertFalse(node1.isAdd());
1125:       assertFalse(node1.isNew());
1126:       assertFalse(node1.isDo());
1127:       assertTrue(node1.isFalse());
1128:       assertFalse(node1.isParamList());
1129:       assertFalse(node1.isNumber());
1130:       assertFalse(node1.isStringKey());
1131:       assertFalse(node1.isLabel());
1132:       assertFalse(node1.isCast());
1133:       assertFalse(node1.isContinue());
1134:       assertFalse(node1.isLabelName());
1135:       assertEquals(223, node1.getLineno());
1136:       assertFalse(node1.isRegExp());
1137:       assertFalse(node1.isScript());
1138:       assertFalse(node1.isFunction());
1139:       assertFalse(node1.isWith());
1140:       assertFalse(node1.isTry());
1141:       assertFalse(node1.isSetterDef());
1142:       assertFalse(node1.isNE());
1143:       assertFalse(node1.isIf());
1144:       assertFalse(node1.isFor());
1145:       assertEquals(1, node1.getChildCount());
1146:       assertFalse(node1.isThis());
1147:       assertFalse(node1.isCatch());
1148:       assertFalse(node1.isInstanceOf());
1149:       assertFalse(node1.hasMoreThanOneChild());
1150:       assertTrue(node1.hasChildren());
1151:       assertFalse(node1.isString());
1152:       assertFalse(node1.isSwitch());
1153:       assertFalse(node1.isHook());
1154:       assertFalse(node1.isIn());
1155:       assertFalse(node1.isCase());
1156:       assertFalse(node1.isInc());
1157:       assertEquals(1043, node1.getCharno());
1158:       assertFalse(node1.isGetterDef());
1159:       assertFalse(node1.isThrow());
1160:       assertFalse(node1.isArrayLit());
1161:       assertFalse(node1.isAnd());
1162:       assertFalse(node1.isDefaultCase());
1163:       assertFalse(node1.isNot());
1164:       assertFalse(node1.isDebugger());
1165:       assertFalse(node1.isTrue());
1166:       assertFalse(node1.isObjectLit());
1167:       assertFalse(node1.isEmpty());
1168:       assertFalse(node1.isGetProp());
1169:       assertFalse(node1.isNull());
1170:       assertFalse(node1.isTypeOf());
1171:       assertFalse(node1.isDec());
1172:       assertFalse(node1.isComma());
1173:       assertFalse(node1.isDelProp());
1174:       assertFalse(node1.isAssign());
1175:       assertEquals(914451, node1.getSourcePosition());
1176:       assertFalse(node1.isOr());
1177:       assertFalse(node1.isReturn());
1178:       assertTrue(node1.hasOneChild());
1179:       assertFalse(node1.isName());
1180:       assertFalse(node1.isGetElem());
1181:       assertFalse(node1.isVoid());
1182:       assertFalse(node1.isCall());
1183:       assertFalse(node1.isExprResult());
1184:       assertFalse(node1.isBreak());
1185:       assertFalse(node2.isExprResult());
1186:       assertFalse(node2.isScript());
1187:       assertFalse(node2.isNot());
1188:       assertFalse(node2.isWith());
1189:       assertFalse(node2.isObjectLit());
1190:       assertFalse(node2.isGetProp());
1191:       assertFalse(node2.isDec());
1192:       assertFalse(node2.isBreak());
1193:       assertFalse(node2.isThis());
1194:       assertFalse(node2.isGetElem());
1195:       assertFalse(node2.isAssign());
1196:       assertFalse(node2.isComma());
1197:       assertFalse(node2.isOr());
1198:       assertFalse(node2.isTypeOf());
1199:       assertFalse(node2.isInstanceOf());
1200:       assertFalse(node2.isWhile());
1201:       assertFalse(node2.isString());
1202:       assertFalse(node2.isInc());
1203:       assertFalse(node2.isContinue());
1204:       assertFalse(node2.isIn());
1205:       assertFalse(node2.isReturn());
1206:       assertFalse(node2.isThrow());
1207:       assertFalse(node2.isCast());
1208:       assertFalse(node2.isAnd());
1209:       assertEquals(223, node2.getLineno());
1210:       assertFalse(node2.isDefaultCase());
1211:       assertFalse(node2.isTrue());
1212:       assertFalse(node2.isDebugger());
1213:       assertFalse(node2.isRegExp());
1214:       assertFalse(node2.isFunction());
1215:       assertFalse(node2.isTry());
1216:       assertFalse(node2.isIf());
1217:       assertFalse(node2.isSetterDef());
1218:       assertFalse(node2.isNE());
1219:       assertTrue(node2.hasOneChild());
1220:       assertFalse(node2.isEmpty());
1221:       assertFalse(node2.isNull());
1222:       assertFalse(node2.isFor());
1223:       assertTrue(node2.hasChildren());
1224:       assertFalse(node2.isCatch());
1225:       assertFalse(node2.isCall());
1226:       assertEquals(914451, node2.getSourcePosition());
1227:       assertFalse(node2.isName());
1228:       assertFalse(node2.isDelProp());
1229:       assertFalse(node2.isVoid());
1230:       assertFalse(node2.hasMoreThanOneChild());
1231:       assertFalse(node2.isHook());
1232:       assertEquals(1, node2.getChildCount());
1233:       assertFalse(node2.isVar());
1234:       assertFalse(node2.isAdd());
1235:       assertFalse(node2.isBlock());
1236:       assertFalse(node2.isNew());
1237:       assertFalse(node2.isCase());
1238:       assertEquals(43, node2.getType());
1239:       assertFalse(node2.isAssignAdd());
1240:       assertFalse(node2.isDo());
1241:       assertFalse(node2.isNumber());
1242:       assertEquals(1043, node2.getCharno());
1243:       assertFalse(node2.isLabel());
1244:       assertFalse(node2.isGetterDef());
1245:       assertFalse(node2.isArrayLit());
1246:       assertFalse(node2.isStringKey());
1247:       assertFalse(node2.isParamList());
1248:       assertTrue(node2.isFalse());
1249:       assertFalse(node2.isSwitch());
1250:       assertFalse(node2.isLabelName());
1251:       assertFalse(node0.equals((Object)node1));
1252:       assertFalse(node1.equals((Object)node0));
1253:       assertFalse(node2.equals((Object)node0));
1254:       assertNotNull(node2);
1255:       assertEquals(49, Node.DIRECT_EVAL);
1256:       assertEquals(30, Node.VAR_ARGS_NAME);
1257:       assertEquals(1, Node.DECR_FLAG);
1258:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1259:       assertEquals(12, Node.COLUMN_BITS);
1260:       assertEquals(57, Node.LAST_PROP);
1261:       assertEquals(32, Node.INCRDECR_PROP);
1262:       assertEquals(37, Node.OPT_ARG_NAME);
1263:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1264:       assertEquals(2, Node.POST_FLAG);
1265:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1266:       assertEquals(29, Node.JSDOC_INFO_PROP);
1267:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1268:       assertEquals(47, Node.IS_DISPATCHER);
1269:       assertEquals(56, Node.CHANGE_TIME);
1270:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1271:       assertEquals(48, Node.DIRECTIVES);
1272:       assertEquals(39, Node.EMPTY_BLOCK);
1273:       assertEquals(53, Node.INPUT_ID);
1274:       assertEquals(57, Node.REFLECTED_OBJECT);
1275:       assertEquals(55, Node.INFERRED_FUNCTION);
1276:       assertEquals(36, Node.QUOTED_PROP);
1277:       assertEquals(52, Node.LENGTH);
1278:       assertEquals(8, Node.FLAG_NO_THROWS);
1279:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1280:       assertEquals(43, Node.IS_CONSTANT_NAME);
1281:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1282:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1283:       assertEquals(4095, Node.COLUMN_MASK);
1284:       assertEquals(50, Node.FREE_CALL);
1285:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1286:       assertEquals(40, Node.ORIGINALNAME_PROP);
1287:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1288:       assertEquals(46, Node.IS_NAMESPACE);
1289:       assertEquals(54, Node.SLASH_V);
1290:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1291:       assertEquals(32, Node.INCRDECR_PROP);
1292:       assertEquals(46, Node.IS_NAMESPACE);
1293:       assertEquals(2, Node.POST_FLAG);
1294:       assertEquals(12, Node.COLUMN_BITS);
1295:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1296:       assertEquals(47, Node.IS_DISPATCHER);
1297:       assertEquals(30, Node.VAR_ARGS_NAME);
1298:       assertEquals(49, Node.DIRECT_EVAL);
1299:       assertEquals(56, Node.CHANGE_TIME);
1300:       assertEquals(37, Node.OPT_ARG_NAME);
1301:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1302:       assertEquals(54, Node.SLASH_V);
1303:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1304:       assertEquals(50, Node.FREE_CALL);
1305:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1306:       assertEquals(1, Node.DECR_FLAG);
1307:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1308:       assertEquals(4095, Node.COLUMN_MASK);
1309:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1310:       assertEquals(8, Node.FLAG_NO_THROWS);
1311:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1312:       assertEquals(43, Node.IS_CONSTANT_NAME);
1313:       assertEquals(40, Node.ORIGINALNAME_PROP);
1314:       assertEquals(48, Node.DIRECTIVES);
1315:       assertEquals(52, Node.LENGTH);
1316:       assertEquals(53, Node.INPUT_ID);
1317:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1318:       assertEquals(57, Node.REFLECTED_OBJECT);
1319:       assertEquals(36, Node.QUOTED_PROP);
1320:       assertEquals(29, Node.JSDOC_INFO_PROP);
1321:       assertEquals(57, Node.LAST_PROP);
1322:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1323:       assertEquals(55, Node.INFERRED_FUNCTION);
1324:       assertEquals(39, Node.EMPTY_BLOCK);
1325:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1326:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1327:       assertEquals(39, Node.EMPTY_BLOCK);
1328:       assertEquals(4095, Node.COLUMN_MASK);
1329:       assertEquals(55, Node.INFERRED_FUNCTION);
1330:       assertEquals(8, Node.FLAG_NO_THROWS);
1331:       assertEquals(50, Node.FREE_CALL);
1332:       assertEquals(40, Node.ORIGINALNAME_PROP);
1333:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1334:       assertEquals(43, Node.IS_CONSTANT_NAME);
1335:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1336:       assertEquals(48, Node.DIRECTIVES);
1337:       assertEquals(53, Node.INPUT_ID);
1338:       assertEquals(57, Node.REFLECTED_OBJECT);
1339:       assertEquals(36, Node.QUOTED_PROP);
1340:       assertEquals(52, Node.LENGTH);
1341:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1342:       assertEquals(29, Node.JSDOC_INFO_PROP);
1343:       assertEquals(30, Node.VAR_ARGS_NAME);
1344:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1346:       assertEquals(47, Node.IS_DISPATCHER);
1347:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1348:       assertEquals(57, Node.LAST_PROP);
1349:       assertEquals(37, Node.OPT_ARG_NAME);
1350:       assertEquals(46, Node.IS_NAMESPACE);
1351:       assertEquals(2, Node.POST_FLAG);
1352:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1353:       assertEquals(49, Node.DIRECT_EVAL);
1354:       assertEquals(56, Node.CHANGE_TIME);
1355:       assertEquals(54, Node.SLASH_V);
1356:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1357:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1358:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1359:       assertEquals(1, Node.DECR_FLAG);
1360:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1361:       assertEquals(12, Node.COLUMN_BITS);
1362:       assertEquals(32, Node.INCRDECR_PROP);
1363:       
1364:       Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags8.setReturnsTainted();
1365:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags2);
1366:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags0);
1367:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags1);
1368:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags3);
1369:       assertSame(node_SideEffectFlags8, node_SideEffectFlags9);
1370:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags4);
1371:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags6);
1372:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags5);
1373:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags7);
1374:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags4);
1375:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags5);
1376:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags2);
1377:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags3);
1378:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags0);
1379:       assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
1380:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags1);
1381:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags6);
1382:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags7);
1383:       assertTrue(node_SideEffectFlags8.areAllFlagsSet());
1384:       assertEquals(0, node_SideEffectFlags8.valueOf());
1385:       assertTrue(node_SideEffectFlags9.areAllFlagsSet());
1386:       assertEquals(0, node_SideEffectFlags9.valueOf());
1387:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags2));
1388:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags0));
1389:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags1));
1390:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags3));
1391:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags4));
1392:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags6));
1393:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags5));
1394:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags7));
1395:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags4));
1396:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags5));
1397:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags2));
1398:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags3));
1399:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags0));
1400:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags1));
1401:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags6));
1402:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags7));
1403:       assertNotNull(node_SideEffectFlags9);
1404:       
1405:       Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags9.setMutatesArguments();
1406:       assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
1407:       assertNotSame(node_SideEffectFlags10, node_SideEffectFlags5);
1408:       assertNotSame(node_SideEffectFlags10, node_SideEffectFlags4);
1409:       assertNotSame(node_SideEffectFlags10, node_SideEffectFlags1);
1410:       assertNotSame(node_SideEffectFlags10, node_SideEffectFlags2);
1411:       assertNotSame(node_SideEffectFlags10, node_SideEffectFlags0);
1412:       assertNotSame(node_SideEffectFlags10, node_SideEffectFlags3);
1413:       assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
1414:       assertNotSame(node_SideEffectFlags10, node_SideEffectFlags7);
1415:       assertNotSame(node_SideEffectFlags10, node_SideEffectFlags6);
1416:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags2);
1417:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags0);
1418:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags1);
1419:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags3);
1420:       assertSame(node_SideEffectFlags8, node_SideEffectFlags9);
1421:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags4);
1422:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags6);
1423:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags5);
1424:       assertSame(node_SideEffectFlags8, node_SideEffectFlags10);
1425:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags7);
1426:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags4);
1427:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags5);
1428:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags2);
1429:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags3);
1430:       assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
1431:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags0);
1432:       assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
1433:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags1);
1434:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags6);
1435:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags7);
1436:       assertTrue(node_SideEffectFlags10.areAllFlagsSet());
1437:       assertEquals(0, node_SideEffectFlags10.valueOf());
1438:       assertTrue(node_SideEffectFlags8.areAllFlagsSet());
1439:       assertEquals(0, node_SideEffectFlags8.valueOf());
1440:       assertTrue(node_SideEffectFlags9.areAllFlagsSet());
1441:       assertEquals(0, node_SideEffectFlags9.valueOf());
1442:       assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags5));
1443:       assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags4));
1444:       assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags1));
1445:       assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags2));
1446:       assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags0));
1447:       assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags3));
1448:       assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags7));
1449:       assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags6));
1450:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags2));
1451:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags0));
1452:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags1));
1453:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags3));
1454:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags4));
1455:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags6));
1456:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags5));
1457:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags7));
1458:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags4));
1459:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags5));
1460:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags2));
1461:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags3));
1462:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags0));
1463:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags1));
1464:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags6));
1465:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags7));
1466:       assertNotNull(node_SideEffectFlags10);
1467:       
1468:       boolean boolean3 = node_SideEffectFlags9.areAllFlagsSet();
1469:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags2);
1470:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags0);
1471:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags1);
1472:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags3);
1473:       assertSame(node_SideEffectFlags8, node_SideEffectFlags9);
1474:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags4);
1475:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags6);
1476:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags5);
1477:       assertSame(node_SideEffectFlags8, node_SideEffectFlags10);
1478:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags7);
1479:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags4);
1480:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags5);
1481:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags2);
1482:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags3);
1483:       assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
1484:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags0);
1485:       assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
1486:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags1);
1487:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags6);
1488:       assertNotSame(node_SideEffectFlags9, node_SideEffectFlags7);
1489:       assertTrue(node_SideEffectFlags8.areAllFlagsSet());
1490:       assertEquals(0, node_SideEffectFlags8.valueOf());
1491:       assertTrue(node_SideEffectFlags9.areAllFlagsSet());
1492:       assertEquals(0, node_SideEffectFlags9.valueOf());
1493:       assertFalse(boolean3 == boolean2);
1494:       assertFalse(boolean3 == boolean1);
1495:       assertFalse(boolean3 == boolean0);
1496:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags2));
1497:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags0));
1498:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags1));
1499:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags3));
1500:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags4));
1501:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags6));
1502:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags5));
1503:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags7));
1504:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags4));
1505:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags5));
1506:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags2));
1507:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags3));
1508:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags0));
1509:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags1));
1510:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags6));
1511:       assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags7));
1512:       assertTrue(boolean3);
1513:       
1514:       node1.setLineno(32);
1515:       assertSame(node1, node2);
1516:       assertFalse(node0.isHook());
1517:       assertFalse(node0.isThrow());
1518:       assertFalse(node0.isSwitch());
1519:       assertFalse(node0.isString());
1520:       assertFalse(node0.isInc());
1521:       assertFalse(node0.isInstanceOf());
1522:       assertFalse(node0.isGetProp());
1523:       assertFalse(node0.isCase());
1524:       assertTrue(node0.isNumber());
1525:       assertFalse(node0.isBreak());
1526:       assertFalse(node0.isThis());
1527:       assertFalse(node0.isFor());
1528:       assertFalse(node0.isExprResult());
1529:       assertFalse(node0.isComma());
1530:       assertFalse(node0.isWith());
1531:       assertFalse(node0.isCast());
1532:       assertFalse(node0.isIf());
1533:       assertFalse(node0.isNE());
1534:       assertFalse(node0.isDebugger());
1535:       assertFalse(node0.isNot());
1536:       assertFalse(node0.isObjectLit());
1537:       assertFalse(node0.isIn());
1538:       assertFalse(node0.isAnd());
1539:       assertEquals(223, node0.getLineno());
1540:       assertFalse(node0.isFalse());
1541:       assertFalse(node0.isContinue());
1542:       assertFalse(node0.isFunction());
1543:       assertFalse(node0.isAdd());
1544:       assertFalse(node0.isVar());
1545:       assertFalse(node0.isBlock());
1546:       assertFalse(node0.isCall());
1547:       assertFalse(node0.isStringKey());
1548:       assertFalse(node0.isNew());
1549:       assertFalse(node0.isName());
1550:       assertFalse(node0.isSetterDef());
1551:       assertFalse(node0.isNull());
1552:       assertFalse(node0.isReturn());
1553:       assertFalse(node0.isCatch());
1554:       assertFalse(node0.hasChildren());
1555:       assertFalse(node0.isDec());
1556:       assertFalse(node0.isWhile());
1557:       assertEquals(39, node0.getType());
1558:       assertFalse(node0.hasMoreThanOneChild());
1559:       assertFalse(node0.isAssign());
1560:       assertFalse(node0.isRegExp());
1561:       assertFalse(node0.isTypeOf());
1562:       assertFalse(node0.hasOneChild());
1563:       assertFalse(node0.isArrayLit());
1564:       assertFalse(node0.isGetElem());
1565:       assertEquals(914451, node0.getSourcePosition());
1566:       assertFalse(node0.isLabelName());
1567:       assertFalse(node0.isDelProp());
1568:       assertFalse(node0.isVoid());
1569:       assertFalse(node0.isTry());
1570:       assertFalse(node0.isScript());
1571:       assertFalse(node0.isEmpty());
1572:       assertFalse(node0.isTrue());
1573:       assertFalse(node0.isOr());
1574:       assertFalse(node0.isGetterDef());
1575:       assertEquals(0, node0.getChildCount());
1576:       assertFalse(node0.isParamList());
1577:       assertFalse(node0.isAssignAdd());
1578:       assertFalse(node0.isDo());
1579:       assertFalse(node0.isDefaultCase());
1580:       assertEquals(1043, node0.getCharno());
1581:       assertFalse(node0.isLabel());
1582:       assertFalse(node1.isWhile());
1583:       assertFalse(node1.isBlock());
1584:       assertFalse(node1.isVar());
1585:       assertEquals(43, node1.getType());
1586:       assertFalse(node1.isAssignAdd());
1587:       assertFalse(node1.isAdd());
1588:       assertFalse(node1.isNew());
1589:       assertFalse(node1.isDo());
1590:       assertTrue(node1.isFalse());
1591:       assertFalse(node1.isParamList());
1592:       assertFalse(node1.isNumber());
1593:       assertFalse(node1.isStringKey());
1594:       assertFalse(node1.isLabel());
1595:       assertFalse(node1.isCast());
1596:       assertFalse(node1.isContinue());
1597:       assertFalse(node1.isLabelName());
1598:       assertFalse(node1.isRegExp());
1599:       assertFalse(node1.isScript());
1600:       assertFalse(node1.isFunction());
1601:       assertFalse(node1.isWith());
1602:       assertFalse(node1.isTry());
1603:       assertFalse(node1.isSetterDef());
1604:       assertFalse(node1.isNE());
1605:       assertFalse(node1.isIf());
1606:       assertFalse(node1.isFor());
1607:       assertEquals(1, node1.getChildCount());
1608:       assertFalse(node1.isThis());
1609:       assertFalse(node1.isCatch());
1610:       assertFalse(node1.isInstanceOf());
1611:       assertFalse(node1.hasMoreThanOneChild());
1612:       assertTrue(node1.hasChildren());
1613:       assertEquals(32, node1.getLineno());
1614:       assertFalse(node1.isString());
1615:       assertFalse(node1.isSwitch());
1616:       assertFalse(node1.isHook());
1617:       assertFalse(node1.isIn());
1618:       assertFalse(node1.isCase());
1619:       assertFalse(node1.isInc());
1620:       assertEquals(1043, node1.getCharno());
1621:       assertFalse(node1.isGetterDef());
1622:       assertFalse(node1.isThrow());
1623:       assertFalse(node1.isArrayLit());
1624:       assertFalse(node1.isAnd());
1625:       assertEquals(132115, node1.getSourcePosition());
1626:       assertFalse(node1.isDefaultCase());
1627:       assertFalse(node1.isNot());
1628:       assertFalse(node1.isDebugger());
1629:       assertFalse(node1.isTrue());
1630:       assertFalse(node1.isObjectLit());
1631:       assertFalse(node1.isEmpty());
1632:       assertFalse(node1.isGetProp());
1633:       assertFalse(node1.isNull());
1634:       assertFalse(node1.isTypeOf());
1635:       assertFalse(node1.isDec());
1636:       assertFalse(node1.isComma());
1637:       assertFalse(node1.isDelProp());
1638:       assertFalse(node1.isAssign());
1639:       assertFalse(node1.isOr());
1640:       assertFalse(node1.isReturn());
1641:       assertTrue(node1.hasOneChild());
1642:       assertFalse(node1.isName());
1643:       assertFalse(node1.isGetElem());
1644:       assertFalse(node1.isVoid());
1645:       assertFalse(node1.isCall());
1646:       assertFalse(node1.isExprResult());
1647:       assertFalse(node1.isBreak());
1648:       assertFalse(node0.equals((Object)node1));
1649:       assertFalse(node0.equals((Object)node2));
1650:       assertFalse(node1.equals((Object)node0));
1651:       assertEquals(49, Node.DIRECT_EVAL);
1652:       assertEquals(30, Node.VAR_ARGS_NAME);
1653:       assertEquals(1, Node.DECR_FLAG);
1654:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1655:       assertEquals(12, Node.COLUMN_BITS);
1656:       assertEquals(57, Node.LAST_PROP);
1657:       assertEquals(32, Node.INCRDECR_PROP);
1658:       assertEquals(37, Node.OPT_ARG_NAME);
1659:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1660:       assertEquals(2, Node.POST_FLAG);
1661:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1662:       assertEquals(29, Node.JSDOC_INFO_PROP);
1663:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1664:       assertEquals(47, Node.IS_DISPATCHER);
1665:       assertEquals(56, Node.CHANGE_TIME);
1666:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1667:       assertEquals(48, Node.DIRECTIVES);
1668:       assertEquals(39, Node.EMPTY_BLOCK);
1669:       assertEquals(53, Node.INPUT_ID);
1670:       assertEquals(57, Node.REFLECTED_OBJECT);
1671:       assertEquals(55, Node.INFERRED_FUNCTION);
1672:       assertEquals(36, Node.QUOTED_PROP);
1673:       assertEquals(52, Node.LENGTH);
1674:       assertEquals(8, Node.FLAG_NO_THROWS);
1675:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1676:       assertEquals(43, Node.IS_CONSTANT_NAME);
1677:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1678:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1679:       assertEquals(4095, Node.COLUMN_MASK);
1680:       assertEquals(50, Node.FREE_CALL);
1681:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1682:       assertEquals(40, Node.ORIGINALNAME_PROP);
1683:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1684:       assertEquals(46, Node.IS_NAMESPACE);
1685:       assertEquals(54, Node.SLASH_V);
1686:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1687:       assertEquals(32, Node.INCRDECR_PROP);
1688:       assertEquals(46, Node.IS_NAMESPACE);
1689:       assertEquals(2, Node.POST_FLAG);
1690:       assertEquals(12, Node.COLUMN_BITS);
1691:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1692:       assertEquals(47, Node.IS_DISPATCHER);
1693:       assertEquals(30, Node.VAR_ARGS_NAME);
1694:       assertEquals(49, Node.DIRECT_EVAL);
1695:       assertEquals(56, Node.CHANGE_TIME);
1696:       assertEquals(37, Node.OPT_ARG_NAME);
1697:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1698:       assertEquals(54, Node.SLASH_V);
1699:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1700:       assertEquals(50, Node.FREE_CALL);
1701:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1702:       assertEquals(1, Node.DECR_FLAG);
1703:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1704:       assertEquals(4095, Node.COLUMN_MASK);
1705:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1706:       assertEquals(8, Node.FLAG_NO_THROWS);
1707:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1708:       assertEquals(43, Node.IS_CONSTANT_NAME);
1709:       assertEquals(40, Node.ORIGINALNAME_PROP);
1710:       assertEquals(48, Node.DIRECTIVES);
1711:       assertEquals(52, Node.LENGTH);
1712:       assertEquals(53, Node.INPUT_ID);
1713:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1714:       assertEquals(57, Node.REFLECTED_OBJECT);
1715:       assertEquals(36, Node.QUOTED_PROP);
1716:       assertEquals(29, Node.JSDOC_INFO_PROP);
1717:       assertEquals(57, Node.LAST_PROP);
1718:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1719:       assertEquals(55, Node.INFERRED_FUNCTION);
1720:       assertEquals(39, Node.EMPTY_BLOCK);
1721:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1722:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1723:       
1724:       boolean boolean4 = node1.isInc();
1725:       assertSame(node1, node2);
1726:       assertFalse(node0.isHook());
1727:       assertFalse(node0.isThrow());
1728:       assertFalse(node0.isSwitch());
1729:       assertFalse(node0.isString());
1730:       assertFalse(node0.isInc());
1731:       assertFalse(node0.isInstanceOf());
1732:       assertFalse(node0.isGetProp());
1733:       assertFalse(node0.isCase());
1734:       assertTrue(node0.isNumber());
1735:       assertFalse(node0.isBreak());
1736:       assertFalse(node0.isThis());
1737:       assertFalse(node0.isFor());
1738:       assertFalse(node0.isExprResult());
1739:       assertFalse(node0.isComma());
1740:       assertFalse(node0.isWith());
1741:       assertFalse(node0.isCast());
1742:       assertFalse(node0.isIf());
1743:       assertFalse(node0.isNE());
1744:       assertFalse(node0.isDebugger());
1745:       assertFalse(node0.isNot());
1746:       assertFalse(node0.isObjectLit());
1747:       assertFalse(node0.isIn());
1748:       assertFalse(node0.isAnd());
1749:       assertEquals(223, node0.getLineno());
1750:       assertFalse(node0.isFalse());
1751:       assertFalse(node0.isContinue());
1752:       assertFalse(node0.isFunction());
1753:       assertFalse(node0.isAdd());
1754:       assertFalse(node0.isVar());
1755:       assertFalse(node0.isBlock());
1756:       assertFalse(node0.isCall());
1757:       assertFalse(node0.isStringKey());
1758:       assertFalse(node0.isNew());
1759:       assertFalse(node0.isName());
1760:       assertFalse(node0.isSetterDef());
1761:       assertFalse(node0.isNull());
1762:       assertFalse(node0.isReturn());
1763:       assertFalse(node0.isCatch());
1764:       assertFalse(node0.hasChildren());
1765:       assertFalse(node0.isDec());
1766:       assertFalse(node0.isWhile());
1767:       assertEquals(39, node0.getType());
1768:       assertFalse(node0.hasMoreThanOneChild());
1769:       assertFalse(node0.isAssign());
1770:       assertFalse(node0.isRegExp());
1771:       assertFalse(node0.isTypeOf());
1772:       assertFalse(node0.hasOneChild());
1773:       assertFalse(node0.isArrayLit());
1774:       assertFalse(node0.isGetElem());
1775:       assertEquals(914451, node0.getSourcePosition());
1776:       assertFalse(node0.isLabelName());
1777:       assertFalse(node0.isDelProp());
1778:       assertFalse(node0.isVoid());
1779:       assertFalse(node0.isTry());
1780:       assertFalse(node0.isScript());
1781:       assertFalse(node0.isEmpty());
1782:       assertFalse(node0.isTrue());
1783:       assertFalse(node0.isOr());
1784:       assertFalse(node0.isGetterDef());
1785:       assertEquals(0, node0.getChildCount());
1786:       assertFalse(node0.isParamList());
1787:       assertFalse(node0.isAssignAdd());
1788:       assertFalse(node0.isDo());
1789:       assertFalse(node0.isDefaultCase());
1790:       assertEquals(1043, node0.getCharno());
1791:       assertFalse(node0.isLabel());
1792:       assertFalse(node1.isWhile());
1793:       assertFalse(node1.isBlock());
1794:       assertFalse(node1.isVar());
1795:       assertEquals(43, node1.getType());
1796:       assertFalse(node1.isAssignAdd());
1797:       assertFalse(node1.isAdd());
1798:       assertFalse(node1.isNew());
1799:       assertFalse(node1.isDo());
1800:       assertTrue(node1.isFalse());
1801:       assertFalse(node1.isParamList());
1802:       assertFalse(node1.isNumber());
1803:       assertFalse(node1.isStringKey());
1804:       assertFalse(node1.isLabel());
1805:       assertFalse(node1.isCast());
1806:       assertFalse(node1.isContinue());
1807:       assertFalse(node1.isLabelName());
1808:       assertFalse(node1.isRegExp());
1809:       assertFalse(node1.isScript());
1810:       assertFalse(node1.isFunction());
1811:       assertFalse(node1.isWith());
1812:       assertFalse(node1.isTry());
1813:       assertFalse(node1.isSetterDef());
1814:       assertFalse(node1.isNE());
1815:       assertFalse(node1.isIf());
1816:       assertFalse(node1.isFor());
1817:       assertEquals(1, node1.getChildCount());
1818:       assertFalse(node1.isThis());
1819:       assertFalse(node1.isCatch());
1820:       assertFalse(node1.isInstanceOf());
1821:       assertFalse(node1.hasMoreThanOneChild());
1822:       assertTrue(node1.hasChildren());
1823:       assertEquals(32, node1.getLineno());
1824:       assertFalse(node1.isString());
1825:       assertFalse(node1.isSwitch());
1826:       assertFalse(node1.isHook());
1827:       assertFalse(node1.isIn());
1828:       assertFalse(node1.isCase());
1829:       assertFalse(node1.isInc());
1830:       assertEquals(1043, node1.getCharno());
1831:       assertFalse(node1.isGetterDef());
1832:       assertFalse(node1.isThrow());
1833:       assertFalse(node1.isArrayLit());
1834:       assertFalse(node1.isAnd());
1835:       assertEquals(132115, node1.getSourcePosition());
1836:       assertFalse(node1.isDefaultCase());
1837:       assertFalse(node1.isNot());
1838:       assertFalse(node1.isDebugger());
1839:       assertFalse(node1.isTrue());
1840:       assertFalse(node1.isObjectLit());
1841:       assertFalse(node1.isEmpty());
1842:       assertFalse(node1.isGetProp());
1843:       assertFalse(node1.isNull());
1844:       assertFalse(node1.isTypeOf());
1845:       assertFalse(node1.isDec());
1846:       assertFalse(node1.isComma());
1847:       assertFalse(node1.isDelProp());
1848:       assertFalse(node1.isAssign());
1849:       assertFalse(node1.isOr());
1850:       assertFalse(node1.isReturn());
1851:       assertTrue(node1.hasOneChild());
1852:       assertFalse(node1.isName());
1853:       assertFalse(node1.isGetElem());
1854:       assertFalse(node1.isVoid());
1855:       assertFalse(node1.isCall());
1856:       assertFalse(node1.isExprResult());
1857:       assertFalse(node1.isBreak());
1858:       assertFalse(node0.equals((Object)node1));
1859:       assertFalse(node0.equals((Object)node2));
1860:       assertTrue(boolean4 == boolean0);
1861:       assertFalse(boolean4 == boolean3);
1862:       assertTrue(boolean4 == boolean2);
1863:       assertTrue(boolean4 == boolean1);
1864:       assertFalse(node1.equals((Object)node0));
1865:       assertEquals(49, Node.DIRECT_EVAL);
1866:       assertEquals(30, Node.VAR_ARGS_NAME);
1867:       assertEquals(1, Node.DECR_FLAG);
1868:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1869:       assertEquals(12, Node.COLUMN_BITS);
1870:       assertEquals(57, Node.LAST_PROP);
1871:       assertEquals(32, Node.INCRDECR_PROP);
1872:       assertEquals(37, Node.OPT_ARG_NAME);
1873:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1874:       assertEquals(2, Node.POST_FLAG);
1875:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1876:       assertEquals(29, Node.JSDOC_INFO_PROP);
1877:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1878:       assertEquals(47, Node.IS_DISPATCHER);
1879:       assertEquals(56, Node.CHANGE_TIME);
1880:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1881:       assertEquals(48, Node.DIRECTIVES);
1882:       assertEquals(39, Node.EMPTY_BLOCK);
1883:       assertEquals(53, Node.INPUT_ID);
1884:       assertEquals(57, Node.REFLECTED_OBJECT);
1885:       assertEquals(55, Node.INFERRED_FUNCTION);
1886:       assertEquals(36, Node.QUOTED_PROP);
1887:       assertEquals(52, Node.LENGTH);
1888:       assertEquals(8, Node.FLAG_NO_THROWS);
1889:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1890:       assertEquals(43, Node.IS_CONSTANT_NAME);
1891:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1892:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1893:       assertEquals(4095, Node.COLUMN_MASK);
1894:       assertEquals(50, Node.FREE_CALL);
1895:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1896:       assertEquals(40, Node.ORIGINALNAME_PROP);
1897:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1898:       assertEquals(46, Node.IS_NAMESPACE);
1899:       assertEquals(54, Node.SLASH_V);
1900:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1901:       assertEquals(32, Node.INCRDECR_PROP);
1902:       assertEquals(46, Node.IS_NAMESPACE);
1903:       assertEquals(2, Node.POST_FLAG);
1904:       assertEquals(12, Node.COLUMN_BITS);
1905:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1906:       assertEquals(47, Node.IS_DISPATCHER);
1907:       assertEquals(30, Node.VAR_ARGS_NAME);
1908:       assertEquals(49, Node.DIRECT_EVAL);
1909:       assertEquals(56, Node.CHANGE_TIME);
1910:       assertEquals(37, Node.OPT_ARG_NAME);
1911:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1912:       assertEquals(54, Node.SLASH_V);
1913:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1914:       assertEquals(50, Node.FREE_CALL);
1915:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1916:       assertEquals(1, Node.DECR_FLAG);
1917:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1918:       assertEquals(4095, Node.COLUMN_MASK);
1919:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1920:       assertEquals(8, Node.FLAG_NO_THROWS);
1921:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1922:       assertEquals(43, Node.IS_CONSTANT_NAME);
1923:       assertEquals(40, Node.ORIGINALNAME_PROP);
1924:       assertEquals(48, Node.DIRECTIVES);
1925:       assertEquals(52, Node.LENGTH);
1926:       assertEquals(53, Node.INPUT_ID);
1927:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1928:       assertEquals(57, Node.REFLECTED_OBJECT);
1929:       assertEquals(36, Node.QUOTED_PROP);
1930:       assertEquals(29, Node.JSDOC_INFO_PROP);
1931:       assertEquals(57, Node.LAST_PROP);
1932:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1933:       assertEquals(55, Node.INFERRED_FUNCTION);
1934:       assertEquals(39, Node.EMPTY_BLOCK);
1935:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1936:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1937:       assertFalse(boolean4);
1938:       
1939:       Iterable<Node> iterable0 = node0.children();
1940:       assertFalse(iterable0.contains(node1));
1941:       assertFalse(node0.isHook());
1942:       assertFalse(node0.isThrow());
1943:       assertFalse(node0.isSwitch());
1944:       assertFalse(node0.isString());
1945:       assertFalse(node0.isInc());
1946:       assertFalse(node0.isInstanceOf());
1947:       assertFalse(node0.isGetProp());
1948:       assertFalse(node0.isCase());
1949:       assertTrue(node0.isNumber());
1950:       assertFalse(node0.isBreak());
1951:       assertFalse(node0.isThis());
1952:       assertFalse(node0.isFor());
1953:       assertFalse(node0.isExprResult());
1954:       assertFalse(node0.isComma());
1955:       assertFalse(node0.isWith());
1956:       assertFalse(node0.isCast());
1957:       assertFalse(node0.isIf());
1958:       assertFalse(node0.isNE());
1959:       assertFalse(node0.isDebugger());
1960:       assertFalse(node0.isNot());
1961:       assertFalse(node0.isObjectLit());
1962:       assertFalse(node0.isIn());
1963:       assertFalse(node0.isAnd());
1964:       assertEquals(223, node0.getLineno());
1965:       assertFalse(node0.isFalse());
1966:       assertFalse(node0.isContinue());
1967:       assertFalse(node0.isFunction());
1968:       assertFalse(node0.isAdd());
1969:       assertFalse(node0.isVar());
1970:       assertFalse(node0.isBlock());
1971:       assertFalse(node0.isCall());
1972:       assertFalse(node0.isStringKey());
1973:       assertFalse(node0.isNew());
1974:       assertFalse(node0.isName());
1975:       assertFalse(node0.isSetterDef());
1976:       assertFalse(node0.isNull());
1977:       assertFalse(node0.isReturn());
1978:       assertFalse(node0.isCatch());
1979:       assertFalse(node0.hasChildren());
1980:       assertFalse(node0.isDec());
1981:       assertFalse(node0.isWhile());
1982:       assertEquals(39, node0.getType());
1983:       assertFalse(node0.hasMoreThanOneChild());
1984:       assertFalse(node0.isAssign());
1985:       assertFalse(node0.isRegExp());
1986:       assertFalse(node0.isTypeOf());
1987:       assertFalse(node0.hasOneChild());
1988:       assertFalse(node0.isArrayLit());
1989:       assertFalse(node0.isGetElem());
1990:       assertEquals(914451, node0.getSourcePosition());
1991:       assertFalse(node0.isLabelName());
1992:       assertFalse(node0.isDelProp());
1993:       assertFalse(node0.isVoid());
1994:       assertFalse(node0.isTry());
1995:       assertFalse(node0.isScript());
1996:       assertFalse(node0.isEmpty());
1997:       assertFalse(node0.isTrue());
1998:       assertFalse(node0.isOr());
1999:       assertFalse(node0.isGetterDef());
2000:       assertEquals(0, node0.getChildCount());
2001:       assertFalse(node0.isParamList());
2002:       assertFalse(node0.isAssignAdd());
2003:       assertFalse(node0.isDo());
2004:       assertFalse(node0.isDefaultCase());
2005:       assertEquals(1043, node0.getCharno());
2006:       assertFalse(node0.isLabel());
2007:       assertFalse(node0.equals((Object)node1));
2008:       assertFalse(node0.equals((Object)node2));
2009:       assertNotNull(iterable0);
2010:       assertEquals(49, Node.DIRECT_EVAL);
2011:       assertEquals(30, Node.VAR_ARGS_NAME);
2012:       assertEquals(1, Node.DECR_FLAG);
2013:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2014:       assertEquals(12, Node.COLUMN_BITS);
2015:       assertEquals(57, Node.LAST_PROP);
2016:       assertEquals(32, Node.INCRDECR_PROP);
2017:       assertEquals(37, Node.OPT_ARG_NAME);
2018:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2019:       assertEquals(2, Node.POST_FLAG);
2020:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2021:       assertEquals(29, Node.JSDOC_INFO_PROP);
2022:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2023:       assertEquals(47, Node.IS_DISPATCHER);
2024:       assertEquals(56, Node.CHANGE_TIME);
2025:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2026:       assertEquals(48, Node.DIRECTIVES);
2027:       assertEquals(39, Node.EMPTY_BLOCK);
2028:       assertEquals(53, Node.INPUT_ID);
2029:       assertEquals(57, Node.REFLECTED_OBJECT);
2030:       assertEquals(55, Node.INFERRED_FUNCTION);
2031:       assertEquals(36, Node.QUOTED_PROP);
2032:       assertEquals(52, Node.LENGTH);
2033:       assertEquals(8, Node.FLAG_NO_THROWS);
2034:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2035:       assertEquals(43, Node.IS_CONSTANT_NAME);
2036:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2037:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2038:       assertEquals(4095, Node.COLUMN_MASK);
2039:       assertEquals(50, Node.FREE_CALL);
2040:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2041:       assertEquals(40, Node.ORIGINALNAME_PROP);
2042:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2043:       assertEquals(46, Node.IS_NAMESPACE);
2044:       assertEquals(54, Node.SLASH_V);
2045:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2046:   }
2047: }
RegularFileObject[/tmp/EvoSuite_208_1629222910049/com/google/javascript/rhino/Node_208_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:55:10 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_208_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_208_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.VoidType",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
120:       "com.google.common.collect.AbstractListMultimap",
121:       "com.google.javascript.rhino.jstype.JSType",
122:       "com.google.common.collect.ImmutableAsList",
123:       "com.google.javascript.rhino.Node$StringNode",
124:       "com.google.javascript.rhino.jstype.ProxyObjectType",
125:       "com.google.common.collect.Sets$SetView",
126:       "com.google.common.collect.RegularImmutableAsList",
127:       "com.google.javascript.rhino.jstype.TemplateType",
128:       "com.google.javascript.rhino.jstype.NamedType",
129:       "com.google.common.collect.Iterators$13",
130:       "com.google.javascript.rhino.InputId",
131:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
132:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
133:       "com.google.common.collect.AbstractMapBasedMultimap",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.javascript.rhino.Node$SideEffectFlags",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.javascript.rhino.jstype.NullType",
139:       "com.google.common.collect.Lists$TransformingSequentialList",
140:       "com.google.javascript.rhino.ErrorReporter",
141:       "com.google.javascript.rhino.jstype.UnknownType",
142:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
143:       "com.google.javascript.rhino.jstype.ValueType",
144:       "com.google.javascript.rhino.jstype.PropertyMap",
145:       "com.google.javascript.rhino.Token",
146:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
147:       "com.google.common.collect.ObjectArrays",
148:       "com.google.javascript.rhino.jstype.StaticSourceFile",
149:       "com.google.javascript.rhino.jstype.BooleanType",
150:       "com.google.javascript.rhino.jstype.NoObjectType",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.javascript.rhino.jstype.FunctionBuilder",
153:       "com.google.javascript.rhino.jstype.JSType$TypePair",
154:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
159:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
160:       "com.google.common.collect.Sets$ImprovedAbstractSet",
161:       "com.google.javascript.rhino.jstype.FunctionType",
162:       "com.google.common.base.Preconditions",
163:       "com.google.common.collect.UnmodifiableIterator",
164:       "com.google.javascript.rhino.JSDocInfo",
165:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
166:       "com.google.javascript.rhino.jstype.Property",
167:       "com.google.common.collect.ImmutableMapValues",
168:       "com.google.common.collect.ImmutableEntry",
169:       "com.google.common.base.Joiner$1",
170:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
171:       "com.google.common.base.Joiner$2",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.javascript.rhino.jstype.TernaryValue",
175:       "com.google.javascript.rhino.Node$AncestorIterable",
176:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.ImmutableEnumSet",
179:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.javascript.rhino.jstype.EnumElementType",
182:       "com.google.javascript.rhino.jstype.UnionType",
183:       "com.google.common.base.Objects",
184:       "com.google.javascript.rhino.Node$NumberNode",
185:       "com.google.common.collect.SingletonImmutableList",
186:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
187:       "com.google.common.collect.ImmutableCollection$Builder",
188:       "com.google.javascript.rhino.jstype.StaticSlot",
189:       "com.google.common.collect.Iterators$6",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.Iterators$7",
192:       "com.google.common.collect.AbstractSetMultimap",
193:       "com.google.common.base.Function",
194:       "com.google.common.collect.ImmutableSet",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.common.collect.Maps$1",
200:       "com.google.javascript.rhino.jstype.EnumType",
201:       "com.google.common.collect.Iterators$1",
202:       "com.google.common.collect.Iterators$2",
203:       "com.google.javascript.rhino.jstype.NamespaceType",
204:       "com.google.common.collect.Iterators$3",
205:       "com.google.common.collect.Sets",
206:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
207:       "com.google.javascript.rhino.Node$ObjectPropListItem",
208:       "com.google.common.collect.Lists$StringAsImmutableList",
209:       "com.google.common.collect.Lists$2",
210:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
211:       "com.google.common.collect.ImmutableList$Builder",
212:       "com.google.common.collect.Lists$1",
213:       "com.google.javascript.rhino.jstype.StaticReference",
214:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
215:       "com.google.common.collect.Multiset",
216:       "com.google.common.collect.AbstractMultimap",
217:       "com.google.common.collect.Multimap",
218:       "com.google.common.collect.Iterators",
219:       "com.google.common.collect.Maps$ImprovedAbstractMap",
220:       "com.google.common.collect.ImmutableBiMap",
221:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
222:       "com.google.common.collect.ImmutableList",
223:       "com.google.common.collect.SingletonImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
225:       "com.google.javascript.rhino.jstype.StringType",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
228:       "com.google.javascript.rhino.jstype.TemplatizedType",
229:       "com.google.javascript.rhino.jstype.Visitor",
230:       "com.google.javascript.rhino.jstype.NoResolvedType",
231:       "com.google.javascript.rhino.jstype.JSTypeNative",
232:       "com.google.javascript.rhino.jstype.AllType",
233:       "com.google.common.collect.Maps",
234:       "com.google.common.collect.SetMultimap",
235:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
236:       "com.google.common.collect.Maps$EntryTransformer",
237:       "com.google.javascript.rhino.JSTypeExpression",
238:       "com.google.common.collect.Iterators$MergingIterator"
239:     );
240:   } 
241: 
242:   private static void resetClasses() {
243:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_208_tmp__ESTest_scaffolding.class.getClassLoader()); 
244: 
245:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
246:       "com.google.javascript.rhino.Node",
247:       "com.google.javascript.rhino.Node$NumberNode",
248:       "com.google.javascript.rhino.Node$StringNode",
249:       "com.google.javascript.rhino.Node$AbstractPropListItem",
250:       "com.google.javascript.rhino.Node$ObjectPropListItem",
251:       "com.google.javascript.rhino.Node$IntPropListItem",
252:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
253:       "com.google.javascript.rhino.Node$AncestorIterable",
254:       "com.google.javascript.rhino.Node$NodeMismatch",
255:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
256:       "com.google.javascript.rhino.Node$SideEffectFlags",
257:       "com.google.javascript.rhino.Token",
258:       "com.google.common.base.Preconditions",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.JSDocInfo",
330:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
331:       "com.google.common.collect.Sets",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.base.Objects",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.common.collect.Iterables",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.common.collect.Platform",
346:       "com.google.javascript.rhino.jstype.NamedType",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
349:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
350:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
351:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
352:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
353:       "com.google.javascript.rhino.jstype.TernaryValue",
354:       "com.google.javascript.rhino.jstype.JSType$2",
355:       "com.google.javascript.rhino.jstype.JSType$TypePair",
356:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
357:     );
358:   }
359: }

[MASTER] 17:55:10.818 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((-1786.5011), 223, 1043);
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertEquals(223, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(914451, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(1043, node0.getCharno());
assertFalse(node0.isLabel());
assertNotNull(node0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean0 = node0.isFunction();
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertEquals(223, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(914451, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(1043, node0.getCharno());
assertFalse(node0.isLabel());
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(boolean0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(27, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(27, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(27, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(19, node_SideEffectFlags0.valueOf());
assertEquals(19, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(19, node_SideEffectFlags2.valueOf());
assertEquals(19, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags1.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags6.valueOf());
assertNotNull(node_SideEffectFlags6);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags0.setMutatesThis();
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags7.valueOf());
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertNotNull(node_SideEffectFlags7);

Node.SideEffectFlags node_SideEffectFlags8 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags8.valueOf());
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags7));
assertNotNull(node_SideEffectFlags8);

Node node1 = new Node(43, node0, node0, node0);
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertEquals(223, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(914451, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(1043, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertEquals(43, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isFalse());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);

boolean boolean1 = node0.isEquivalentToShallow(node1);
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertEquals(223, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(914451, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(1043, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertEquals(43, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isFalse());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(boolean1);

boolean boolean2 = node1.isParamList();
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertEquals(223, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(914451, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(1043, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertEquals(43, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isFalse());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(boolean2);

Node node2 = node1.srcrefTree(node0);
assertSame(node1, node2);
assertSame(node2, node1);
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertEquals(223, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(914451, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(1043, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertEquals(43, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertTrue(node1.isFalse());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertEquals(223, node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertEquals(1043, node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertEquals(914451, node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isOr());
assertFalse(node2.isTypeOf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertEquals(223, node2.getLineno());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isTry());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNE());
assertTrue(node2.hasOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isNull());
assertFalse(node2.isFor());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertEquals(914451, node2.getSourcePosition());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertEquals(43, node2.getType());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNumber());
assertEquals(1043, node2.getCharno());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertTrue(node2.isFalse());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags8.setReturnsTainted();
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags9);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags5);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags0);
assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags7);
assertTrue(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags8.valueOf());
assertTrue(node_SideEffectFlags9.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags9.valueOf());
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags7));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags7));
assertNotNull(node_SideEffectFlags9);

Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags9.setMutatesArguments();
assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
assertNotSame(node_SideEffectFlags10, node_SideEffectFlags5);
assertNotSame(node_SideEffectFlags10, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags10, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags10, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags10, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags10, node_SideEffectFlags3);
assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
assertNotSame(node_SideEffectFlags10, node_SideEffectFlags7);
assertNotSame(node_SideEffectFlags10, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags9);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags10);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags5);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags3);
assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags0);
assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags7);
assertTrue(node_SideEffectFlags10.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags10.valueOf());
assertTrue(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags8.valueOf());
assertTrue(node_SideEffectFlags9.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags9.valueOf());
assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags7));
assertFalse(node_SideEffectFlags10.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags7));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags7));
assertNotNull(node_SideEffectFlags10);

boolean boolean3 = node_SideEffectFlags9.areAllFlagsSet();
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags9);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags10);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags5);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags3);
assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags0);
assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags9, node_SideEffectFlags7);
assertTrue(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags8.valueOf());
assertTrue(node_SideEffectFlags9.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags9.valueOf());
assertFalse(boolean3 == boolean2);
assertFalse(boolean3 == boolean1);
assertFalse(boolean3 == boolean0);
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags7));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags9.equals((Object)node_SideEffectFlags7));
assertTrue(boolean3);

node1.setLineno(32);
assertSame(node1, node2);
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertEquals(223, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(914451, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(1043, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertEquals(43, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertTrue(node1.isFalse());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertEquals(32, node1.getLineno());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertEquals(1043, node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAnd());
assertEquals(132115, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);

boolean boolean4 = node1.isInc();
assertSame(node1, node2);
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertEquals(223, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(914451, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(1043, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertEquals(43, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertTrue(node1.isFalse());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertEquals(32, node1.getLineno());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertEquals(1043, node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAnd());
assertEquals(132115, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean4 == boolean0);
assertFalse(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertFalse(node1.equals((Object)node0));
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(boolean4);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertEquals(223, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertEquals(914451, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(1043, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertNotNull(iterable0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/8
* Done!

* Computation finished
