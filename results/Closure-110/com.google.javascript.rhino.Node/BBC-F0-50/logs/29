* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 10429
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2790600284
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:59:31.531 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:59:34.523 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - true in context: com.google.javascript.rhino.Node:getBooleanProp(I)Z
[MASTER] 10:59:34.584 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getBooleanProp(I)Z
[MASTER] 10:59:34.585 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getBooleanProp(I)Z
[MASTER] 10:59:40.322 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 11:02:28.011 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 1745
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 2626
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 92
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 4658
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 105
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 11024
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - false: 21
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 24353
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 490
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 675
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 5254
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 490
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 490
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 20899
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 2019
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 4536
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 4708
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 490
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 82
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 588: 295
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 17204
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 592: 295
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false: 57
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 3718
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 16016
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 41
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 4253
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 41
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 2028
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 6890
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 17557
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 232
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 527
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 4029
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 4536
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 5772
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 702
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 429
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 1898
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 14489
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.getDouble()D: Line 162: 209
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 2943
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 25116
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 41
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 3123
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 2943
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 6824
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 1203
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 41
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 1210
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 696
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 4143
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 7007
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 2347
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 1876
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 2510
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 588
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 41
Number of times BBC is called for com.google.javascript.rhino.Node.isOptionalArg()Z: root-Branch: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 498
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 41
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 12573
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 4029
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 1472
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: root-Branch: 490
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 105
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 7185
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 1703
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 1338
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 490
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 490
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 3162
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 209
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 271
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 1203
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 872: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isVarArgs()Z: root-Branch: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 5078
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 490
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 6948
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 52407
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 9259
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 884: 125
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 2943
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 883: 125
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - false: 588
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 878: 125
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 877: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 125
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: Line 873: 125
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 5602
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 4193
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 29977
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 7826
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 41
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 41
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 41
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 41
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 4193
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 53
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 350
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 41
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 2320
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 41
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 41
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 4061
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 235
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 1068
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 17168
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 1203
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 5884
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 2040
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 26333
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 2040
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 2040
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 58
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 353
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 1894
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 2542
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 4218
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 1709
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 672: 3
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 2192
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 250
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 4358
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 2007
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 14307
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 7861
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 58
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 783
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 2040
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 42
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 58
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 312
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 295
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 1018
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 5602
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 5418
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 7212
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 500
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 500
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 500
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 500
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 4432
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 588
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 9486
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 26
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 2824
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1727: 26
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1730: 26
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 17455
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1723: 26
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1724: 26
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 2824
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 2824
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 702
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 7161
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 490
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 1960
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 392
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 188
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 569
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 9
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 120
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 476
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 1796
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 209
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 209
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 9560
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 811
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 295
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: Line 821: 41
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 28269
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 1745
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 1459
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 490
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 490
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 2628
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1682: 295
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 88736
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;)V: I9 Branch 284 IF_ACMPNE L194 - false: 113
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 386
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 17404
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 1346
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 4071
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 1456
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 386
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 386
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 386
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 939
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 386
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 386
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 386
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 3326
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 310
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 121
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 12034
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 12034
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1015: 392
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - true: 125
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 702
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 572
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 13761
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 53
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1016: 392
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1024: 295
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 295
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 702
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 811
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 871
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 386
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 86733
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 702
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 811
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 8783
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 468
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 1961
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 41
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 3461
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 8082
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 295
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isVarArgs()Z: Line 1917: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 5602
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 8627
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 811
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 2986
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 2575
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 2824
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 100
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 241
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 1690
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - false: 77
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 17313
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 12715
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 2824
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: Line 214: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 1013
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 3295
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 1887
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 1363
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1978: 941
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1974: 941
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1977: 941
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 4110
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 209
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 490
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 125
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - true: 41
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 16823
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 819
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 209
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 209
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1446: 125
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 147
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 14682
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - false: 21
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 11688
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 1046
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 92
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 30924
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 4324
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 30924
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 30924
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 30924
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 8392
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 702
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 30924
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 30924
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 811
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 702
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 702
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 28018
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 702
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1706: 490
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 41
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 702
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1703: 490
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 702
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 13642
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1709: 490
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1708: 490
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1707: 490
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1713: 490
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1712: 490
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 13642
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 16197
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 16349
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 2824
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 490
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 41
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 3048
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 270
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 6013
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 490
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 1472
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 10759
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 2192
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 5619
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: Line 889: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 2347
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 9220
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 9220
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 5215
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 324
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 1472
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 7560
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 2040
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 209
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 500
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 490
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 209
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 490
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 909
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 490
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 974
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 125
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 68907
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 125
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 490
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 209
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 209
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 209
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 209
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 209
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 13560
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 811
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 125
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 2824
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 342
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 14020
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 5793
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 309
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 4708
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 209
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 796
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 295
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 4834
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 295
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 505
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 2824
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 869
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 295
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 295
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 5762
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 21
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 1477
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 490
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 1189
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 2568
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 8797
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 295
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 1979
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 365
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 1960
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 41060
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 702
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 4358
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 1095
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 157
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 3835
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 1044
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 28272
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 64
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 702
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 702
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - true: 24
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 2149
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 4743
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 41
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 702
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 209
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 9873
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 24630
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 702
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 209
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 1472
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 1338
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 702
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 509
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 392
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 20080
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 209
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 28986
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 490
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 4518
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 88736
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 3718
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 490
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 4065
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 3976
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - false: 121
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 2201
Number of times BBC is called for com.google.javascript.rhino.Node.getLineno()I: Line 1140: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 490
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 811
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 1180
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 789
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 35
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 5793
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 3976
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 702
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 1013
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 1228
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 1638
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: Line 2161: 588
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 115
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 7390
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 13785
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 702
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 811
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 111
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 702
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 41
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 702
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 702
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 702
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 702
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 24534
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 4358
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 4531
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 702
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 3123
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 125
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 386
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 13650
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 2912
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 2943
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 3121
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 1068
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 88736
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 2347
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 2824
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - false: 19
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 490
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 92
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 295
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 1745
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 2347
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 1338
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 382
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.getDouble()D: root-Branch: 209
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - true: 2
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 2019
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 1637
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 295
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 4111
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1032: 295
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 295
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1036: 28
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 295
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 4090
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 811
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - false: 21
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1029: 295
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 941
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 15567
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 1203
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 1520
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - false: 45786
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 1640
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 17679
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 811
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 811
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 41
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 3601
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 2192
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 2347
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - false: 35
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 323
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 4
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: root-Branch: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 41
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 1638
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 9648
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 41
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 41
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 68907
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 2246
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 9220
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 811
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: root-Branch: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 125
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 41
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: root-Branch: 295
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 41
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 41
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 41
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 41
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 86733
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 16469
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 2052
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 157
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 2192
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 4013
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 12853
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 15849
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 16205
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 811
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 1338
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 41
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 3156
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 3651
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 1239
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 3835
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 588
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 14361
Number of times BBC is called for com.google.javascript.rhino.Node.toString(ZZZ)Ljava/lang/String;: Line 944: 21
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 2824
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 4435
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 3140
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 591
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 2347
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 209
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 273
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 702
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 19335
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 125
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 811
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 17345
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 5602
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 25116
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 41
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 490
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 3573
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 246
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 19316
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 41
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 2347
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 6579
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 2040
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 696
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 11754
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 8479
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 5254
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 5323
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 25116
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 811
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 1338
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - true: 146
Number of times BBC is called for com.google.javascript.rhino.Node.extractLineno(I)I: I4 Branch 142 IF_ICMPNE L1209 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.extractLineno(I)I: I4 Branch 142 IF_ICMPNE L1209 - true: 206
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 146
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 896
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 1333
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 702
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 41
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 57
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - false: 60
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 21
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 5602
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: root-Branch: 295
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 3140
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 2824
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: Line 1010: 392
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 1285
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 125
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 41
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 6756
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 2629
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 8962
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 2518
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 490
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 385
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 3651
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 41
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 295
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 359
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 5602
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 932
Number of times BBC is called for com.google.javascript.rhino.Node.getLineno()I: root-Branch: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 2380
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 41
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - false: 275
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 2833
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 1338
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 30924
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 30924
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 4504
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 25999
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - true: 21
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 2192
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 17408
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 702
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 702
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 702
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 3156
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 702
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 468
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 8053
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 4481
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 1526
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 1267
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 2715
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 1745
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 4030
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 622: 275
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 2599
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 2019
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 2019
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 2019
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 2019
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 215
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 2019
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 88
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 997: 21
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 195
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 2192
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 91
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 1006: 21
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.isOptionalArg()Z: Line 1935: 125
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 953: 21
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 41
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 41
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 3953
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 978: 21
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 39800
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 2040
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 970: 21
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 1472
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 17376
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 6250
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 4470
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 839
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 3326
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 5529
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 1745
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 4358
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 1745
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 7099
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 1745
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 28
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - true: 2
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 1400
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 41
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 4325
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 490
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 9901
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 5078
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 29273
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 811
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 25449
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 209
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 30488
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 41
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 658
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 490
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 33696
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 1472
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 702
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 1532
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 5619
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 1368
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 41
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 41
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 41
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 41
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 1894
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 1333
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 142
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 295
Number of times BBC is called for com.google.javascript.rhino.Node.extractLineno(I)I: Line 1209: 125
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 295
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 209
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 4143
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 811
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 3852
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 468
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 88736
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 13505
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - true: 64
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - false: 55
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 2824
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 588
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 41
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 3890
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 1819
Number of times BBC is called in total: 5747827
* Search finished after 604s and 547 generations, 236965 statements, best individual has fitness: 2717.0
* Minimizing test suite
[MASTER] 11:10:55.250 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 793
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 617
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 105
* Number of covered goals: 105
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 470
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 4536
* Number of covered goals: 2351
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 577
* Generated 893 tests with total length 11457
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:12:02.642 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6705166666666666% of time used, but only 53/893 tests minimized), falling back to using all assertions
[MASTER] 11:12:22.436 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 11:12:31.085 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 8 seconds more than allowed.
[MASTER] 11:12:51.399 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_182_1628161971281/com/google/javascript/rhino/Node_182_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_182_1628161971281/com/google/javascript/rhino/Node_182_tmp__ESTest_scaffolding.java]]
[MASTER] 11:12:51.399 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:51.399 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:51.402 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 765
[MASTER] 11:12:51.404 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_182_1628161971281/com/google/javascript/rhino/Node_182_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:12:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_182_tmp__ESTest extends Node_182_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newString("index");
25:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
26:       assertEquals(50, Node.FREE_CALL);
27:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
28:       assertEquals(8, Node.FLAG_NO_THROWS);
29:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
30:       assertEquals(57, Node.REFLECTED_OBJECT);
31:       assertEquals(4095, Node.COLUMN_MASK);
32:       assertEquals(40, Node.ORIGINALNAME_PROP);
33:       assertEquals(48, Node.DIRECTIVES);
34:       assertEquals(30, Node.VAR_ARGS_NAME);
35:       assertEquals(49, Node.DIRECT_EVAL);
36:       assertEquals(57, Node.LAST_PROP);
37:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
38:       assertEquals(36, Node.QUOTED_PROP);
39:       assertEquals(52, Node.LENGTH);
40:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
41:       assertEquals(55, Node.INFERRED_FUNCTION);
42:       assertEquals(29, Node.JSDOC_INFO_PROP);
43:       assertEquals(53, Node.INPUT_ID);
44:       assertEquals(15, Node.NO_SIDE_EFFECTS);
45:       assertEquals(39, Node.EMPTY_BLOCK);
46:       assertEquals(56, Node.CHANGE_TIME);
47:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
48:       assertEquals(2, Node.POST_FLAG);
49:       assertEquals(47, Node.IS_DISPATCHER);
50:       assertEquals(46, Node.IS_NAMESPACE);
51:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
52:       assertEquals(37, Node.OPT_ARG_NAME);
53:       assertEquals(43, Node.IS_CONSTANT_NAME);
54:       assertEquals(54, Node.SLASH_V);
55:       assertEquals(51, Node.STATIC_SOURCE_FILE);
56:       assertEquals(12, Node.COLUMN_BITS);
57:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
58:       assertEquals(32, Node.INCRDECR_PROP);
59:       assertEquals(1, Node.DECR_FLAG);
60:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
61:       assertFalse(node0.isHook());
62:       assertFalse(node0.isFalse());
63:       assertFalse(node0.isThrow());
64:       assertFalse(node0.isBreak());
65:       assertFalse(node0.isSwitch());
66:       assertFalse(node0.isInc());
67:       assertEquals((-1), node0.getCharno());
68:       assertFalse(node0.isIn());
69:       assertFalse(node0.isAnd());
70:       assertFalse(node0.isLabelName());
71:       assertFalse(node0.isTry());
72:       assertFalse(node0.isArrayLit());
73:       assertFalse(node0.hasOneChild());
74:       assertFalse(node0.isNE());
75:       assertFalse(node0.isNumber());
76:       assertFalse(node0.isScript());
77:       assertFalse(node0.isIf());
78:       assertFalse(node0.isGetterDef());
79:       assertFalse(node0.hasMoreThanOneChild());
80:       assertFalse(node0.isCatch());
81:       assertFalse(node0.isInstanceOf());
82:       assertEquals((-1), node0.getLineno());
83:       assertFalse(node0.isCase());
84:       assertFalse(node0.isRegExp());
85:       assertFalse(node0.isThis());
86:       assertFalse(node0.isWith());
87:       assertFalse(node0.isBlock());
88:       assertFalse(node0.isFor());
89:       assertFalse(node0.isVar());
90:       assertFalse(node0.isCall());
91:       assertFalse(node0.isStringKey());
92:       assertFalse(node0.isAdd());
93:       assertFalse(node0.isName());
94:       assertTrue(node0.isString());
95:       assertFalse(node0.isNew());
96:       assertFalse(node0.isSetterDef());
97:       assertFalse(node0.isNull());
98:       assertFalse(node0.isParamList());
99:       assertFalse(node0.isContinue());
100:       assertFalse(node0.isDo());
101:       assertFalse(node0.isAssignAdd());
102:       assertFalse(node0.isFunction());
103:       assertFalse(node0.isDefaultCase());
104:       assertFalse(node0.isLabel());
105:       assertEquals(40, node0.getType());
106:       assertEquals(0, node0.getChildCount());
107:       assertFalse(node0.isCast());
108:       assertFalse(node0.isEmpty());
109:       assertFalse(node0.isGetElem());
110:       assertFalse(node0.isDelProp());
111:       assertFalse(node0.isVoid());
112:       assertFalse(node0.isTrue());
113:       assertFalse(node0.isOr());
114:       assertFalse(node0.isNot());
115:       assertEquals((-1), node0.getSourcePosition());
116:       assertFalse(node0.isDebugger());
117:       assertFalse(node0.isObjectLit());
118:       assertFalse(node0.isGetProp());
119:       assertFalse(node0.isExprResult());
120:       assertFalse(node0.isTypeOf());
121:       assertFalse(node0.isWhile());
122:       assertFalse(node0.isAssign());
123:       assertFalse(node0.isReturn());
124:       assertFalse(node0.hasChildren());
125:       assertFalse(node0.isDec());
126:       assertFalse(node0.isComma());
127:       assertNotNull(node0);
128:       
129:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
130:       assertNotNull(fileSystemHandling0);
131:       
132:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
134:       assertEquals(50, Node.FREE_CALL);
135:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
136:       assertEquals(8, Node.FLAG_NO_THROWS);
137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
138:       assertEquals(57, Node.REFLECTED_OBJECT);
139:       assertEquals(4095, Node.COLUMN_MASK);
140:       assertEquals(40, Node.ORIGINALNAME_PROP);
141:       assertEquals(48, Node.DIRECTIVES);
142:       assertEquals(30, Node.VAR_ARGS_NAME);
143:       assertEquals(49, Node.DIRECT_EVAL);
144:       assertEquals(57, Node.LAST_PROP);
145:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
146:       assertEquals(36, Node.QUOTED_PROP);
147:       assertEquals(52, Node.LENGTH);
148:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
149:       assertEquals(55, Node.INFERRED_FUNCTION);
150:       assertEquals(29, Node.JSDOC_INFO_PROP);
151:       assertEquals(53, Node.INPUT_ID);
152:       assertEquals(15, Node.NO_SIDE_EFFECTS);
153:       assertEquals(39, Node.EMPTY_BLOCK);
154:       assertEquals(56, Node.CHANGE_TIME);
155:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
156:       assertEquals(2, Node.POST_FLAG);
157:       assertEquals(47, Node.IS_DISPATCHER);
158:       assertEquals(46, Node.IS_NAMESPACE);
159:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
160:       assertEquals(37, Node.OPT_ARG_NAME);
161:       assertEquals(43, Node.IS_CONSTANT_NAME);
162:       assertEquals(54, Node.SLASH_V);
163:       assertEquals(51, Node.STATIC_SOURCE_FILE);
164:       assertEquals(12, Node.COLUMN_BITS);
165:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
166:       assertEquals(32, Node.INCRDECR_PROP);
167:       assertEquals(1, Node.DECR_FLAG);
168:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
169:       assertFalse(node0.isHook());
170:       assertFalse(node0.isFalse());
171:       assertFalse(node0.isThrow());
172:       assertFalse(node0.isBreak());
173:       assertFalse(node0.isSwitch());
174:       assertFalse(node0.isInc());
175:       assertEquals((-1), node0.getCharno());
176:       assertFalse(node0.isIn());
177:       assertFalse(node0.isAnd());
178:       assertFalse(node0.isLabelName());
179:       assertFalse(node0.isTry());
180:       assertFalse(node0.isArrayLit());
181:       assertFalse(node0.hasOneChild());
182:       assertFalse(node0.isNE());
183:       assertFalse(node0.isNumber());
184:       assertFalse(node0.isScript());
185:       assertFalse(node0.isIf());
186:       assertFalse(node0.isGetterDef());
187:       assertFalse(node0.hasMoreThanOneChild());
188:       assertFalse(node0.isCatch());
189:       assertFalse(node0.isInstanceOf());
190:       assertEquals((-1), node0.getLineno());
191:       assertFalse(node0.isCase());
192:       assertFalse(node0.isRegExp());
193:       assertFalse(node0.isThis());
194:       assertFalse(node0.isWith());
195:       assertFalse(node0.isBlock());
196:       assertFalse(node0.isFor());
197:       assertFalse(node0.isVar());
198:       assertFalse(node0.isCall());
199:       assertFalse(node0.isStringKey());
200:       assertFalse(node0.isAdd());
201:       assertFalse(node0.isName());
202:       assertTrue(node0.isString());
203:       assertFalse(node0.isNew());
204:       assertFalse(node0.isSetterDef());
205:       assertFalse(node0.isNull());
206:       assertFalse(node0.isParamList());
207:       assertFalse(node0.isContinue());
208:       assertFalse(node0.isDo());
209:       assertFalse(node0.isAssignAdd());
210:       assertFalse(node0.isFunction());
211:       assertFalse(node0.isDefaultCase());
212:       assertFalse(node0.isLabel());
213:       assertEquals(40, node0.getType());
214:       assertEquals(0, node0.getChildCount());
215:       assertFalse(node0.isCast());
216:       assertFalse(node0.isEmpty());
217:       assertFalse(node0.isGetElem());
218:       assertFalse(node0.isDelProp());
219:       assertFalse(node0.isVoid());
220:       assertFalse(node0.isTrue());
221:       assertFalse(node0.isOr());
222:       assertFalse(node0.isNot());
223:       assertEquals((-1), node0.getSourcePosition());
224:       assertFalse(node0.isDebugger());
225:       assertFalse(node0.isObjectLit());
226:       assertFalse(node0.isGetProp());
227:       assertFalse(node0.isExprResult());
228:       assertFalse(node0.isTypeOf());
229:       assertFalse(node0.isWhile());
230:       assertFalse(node0.isAssign());
231:       assertFalse(node0.isReturn());
232:       assertFalse(node0.hasChildren());
233:       assertFalse(node0.isDec());
234:       assertFalse(node0.isComma());
235:       assertNotNull(node_FileLevelJsDocBuilder0);
236:       
237:       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
238:       assertTrue(boolean0);
239:       
240:       Set<String> set0 = node0.getDirectives();
241:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
242:       assertEquals(50, Node.FREE_CALL);
243:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
244:       assertEquals(8, Node.FLAG_NO_THROWS);
245:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
246:       assertEquals(57, Node.REFLECTED_OBJECT);
247:       assertEquals(4095, Node.COLUMN_MASK);
248:       assertEquals(40, Node.ORIGINALNAME_PROP);
249:       assertEquals(48, Node.DIRECTIVES);
250:       assertEquals(30, Node.VAR_ARGS_NAME);
251:       assertEquals(49, Node.DIRECT_EVAL);
252:       assertEquals(57, Node.LAST_PROP);
253:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
254:       assertEquals(36, Node.QUOTED_PROP);
255:       assertEquals(52, Node.LENGTH);
256:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
257:       assertEquals(55, Node.INFERRED_FUNCTION);
258:       assertEquals(29, Node.JSDOC_INFO_PROP);
259:       assertEquals(53, Node.INPUT_ID);
260:       assertEquals(15, Node.NO_SIDE_EFFECTS);
261:       assertEquals(39, Node.EMPTY_BLOCK);
262:       assertEquals(56, Node.CHANGE_TIME);
263:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
264:       assertEquals(2, Node.POST_FLAG);
265:       assertEquals(47, Node.IS_DISPATCHER);
266:       assertEquals(46, Node.IS_NAMESPACE);
267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
268:       assertEquals(37, Node.OPT_ARG_NAME);
269:       assertEquals(43, Node.IS_CONSTANT_NAME);
270:       assertEquals(54, Node.SLASH_V);
271:       assertEquals(51, Node.STATIC_SOURCE_FILE);
272:       assertEquals(12, Node.COLUMN_BITS);
273:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
274:       assertEquals(32, Node.INCRDECR_PROP);
275:       assertEquals(1, Node.DECR_FLAG);
276:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
277:       assertFalse(node0.isHook());
278:       assertFalse(node0.isFalse());
279:       assertFalse(node0.isThrow());
280:       assertFalse(node0.isBreak());
281:       assertFalse(node0.isSwitch());
282:       assertFalse(node0.isInc());
283:       assertEquals((-1), node0.getCharno());
284:       assertFalse(node0.isIn());
285:       assertFalse(node0.isAnd());
286:       assertFalse(node0.isLabelName());
287:       assertFalse(node0.isTry());
288:       assertFalse(node0.isArrayLit());
289:       assertFalse(node0.hasOneChild());
290:       assertFalse(node0.isNE());
291:       assertFalse(node0.isNumber());
292:       assertFalse(node0.isScript());
293:       assertFalse(node0.isIf());
294:       assertFalse(node0.isGetterDef());
295:       assertFalse(node0.hasMoreThanOneChild());
296:       assertFalse(node0.isCatch());
297:       assertFalse(node0.isInstanceOf());
298:       assertEquals((-1), node0.getLineno());
299:       assertFalse(node0.isCase());
300:       assertFalse(node0.isRegExp());
301:       assertFalse(node0.isThis());
302:       assertFalse(node0.isWith());
303:       assertFalse(node0.isBlock());
304:       assertFalse(node0.isFor());
305:       assertFalse(node0.isVar());
306:       assertFalse(node0.isCall());
307:       assertFalse(node0.isStringKey());
308:       assertFalse(node0.isAdd());
309:       assertFalse(node0.isName());
310:       assertTrue(node0.isString());
311:       assertFalse(node0.isNew());
312:       assertFalse(node0.isSetterDef());
313:       assertFalse(node0.isNull());
314:       assertFalse(node0.isParamList());
315:       assertFalse(node0.isContinue());
316:       assertFalse(node0.isDo());
317:       assertFalse(node0.isAssignAdd());
318:       assertFalse(node0.isFunction());
319:       assertFalse(node0.isDefaultCase());
320:       assertFalse(node0.isLabel());
321:       assertEquals(40, node0.getType());
322:       assertEquals(0, node0.getChildCount());
323:       assertFalse(node0.isCast());
324:       assertFalse(node0.isEmpty());
325:       assertFalse(node0.isGetElem());
326:       assertFalse(node0.isDelProp());
327:       assertFalse(node0.isVoid());
328:       assertFalse(node0.isTrue());
329:       assertFalse(node0.isOr());
330:       assertFalse(node0.isNot());
331:       assertEquals((-1), node0.getSourcePosition());
332:       assertFalse(node0.isDebugger());
333:       assertFalse(node0.isObjectLit());
334:       assertFalse(node0.isGetProp());
335:       assertFalse(node0.isExprResult());
336:       assertFalse(node0.isTypeOf());
337:       assertFalse(node0.isWhile());
338:       assertFalse(node0.isAssign());
339:       assertFalse(node0.isReturn());
340:       assertFalse(node0.hasChildren());
341:       assertFalse(node0.isDec());
342:       assertFalse(node0.isComma());
343:       assertNull(set0);
344:       
345:       boolean boolean1 = node0.isFromExterns();
346:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
347:       assertEquals(50, Node.FREE_CALL);
348:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
349:       assertEquals(8, Node.FLAG_NO_THROWS);
350:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
351:       assertEquals(57, Node.REFLECTED_OBJECT);
352:       assertEquals(4095, Node.COLUMN_MASK);
353:       assertEquals(40, Node.ORIGINALNAME_PROP);
354:       assertEquals(48, Node.DIRECTIVES);
355:       assertEquals(30, Node.VAR_ARGS_NAME);
356:       assertEquals(49, Node.DIRECT_EVAL);
357:       assertEquals(57, Node.LAST_PROP);
358:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
359:       assertEquals(36, Node.QUOTED_PROP);
360:       assertEquals(52, Node.LENGTH);
361:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
362:       assertEquals(55, Node.INFERRED_FUNCTION);
363:       assertEquals(29, Node.JSDOC_INFO_PROP);
364:       assertEquals(53, Node.INPUT_ID);
365:       assertEquals(15, Node.NO_SIDE_EFFECTS);
366:       assertEquals(39, Node.EMPTY_BLOCK);
367:       assertEquals(56, Node.CHANGE_TIME);
368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
369:       assertEquals(2, Node.POST_FLAG);
370:       assertEquals(47, Node.IS_DISPATCHER);
371:       assertEquals(46, Node.IS_NAMESPACE);
372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
373:       assertEquals(37, Node.OPT_ARG_NAME);
374:       assertEquals(43, Node.IS_CONSTANT_NAME);
375:       assertEquals(54, Node.SLASH_V);
376:       assertEquals(51, Node.STATIC_SOURCE_FILE);
377:       assertEquals(12, Node.COLUMN_BITS);
378:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
379:       assertEquals(32, Node.INCRDECR_PROP);
380:       assertEquals(1, Node.DECR_FLAG);
381:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
382:       assertFalse(node0.isHook());
383:       assertFalse(node0.isFalse());
384:       assertFalse(node0.isThrow());
385:       assertFalse(node0.isBreak());
386:       assertFalse(node0.isSwitch());
387:       assertFalse(node0.isInc());
388:       assertEquals((-1), node0.getCharno());
389:       assertFalse(node0.isIn());
390:       assertFalse(node0.isAnd());
391:       assertFalse(node0.isLabelName());
392:       assertFalse(node0.isTry());
393:       assertFalse(node0.isArrayLit());
394:       assertFalse(node0.hasOneChild());
395:       assertFalse(node0.isNE());
396:       assertFalse(node0.isNumber());
397:       assertFalse(node0.isScript());
398:       assertFalse(node0.isIf());
399:       assertFalse(node0.isGetterDef());
400:       assertFalse(node0.hasMoreThanOneChild());
401:       assertFalse(node0.isCatch());
402:       assertFalse(node0.isInstanceOf());
403:       assertEquals((-1), node0.getLineno());
404:       assertFalse(node0.isCase());
405:       assertFalse(node0.isRegExp());
406:       assertFalse(node0.isThis());
407:       assertFalse(node0.isWith());
408:       assertFalse(node0.isBlock());
409:       assertFalse(node0.isFor());
410:       assertFalse(node0.isVar());
411:       assertFalse(node0.isCall());
412:       assertFalse(node0.isStringKey());
413:       assertFalse(node0.isAdd());
414:       assertFalse(node0.isName());
415:       assertTrue(node0.isString());
416:       assertFalse(node0.isNew());
417:       assertFalse(node0.isSetterDef());
418:       assertFalse(node0.isNull());
419:       assertFalse(node0.isParamList());
420:       assertFalse(node0.isContinue());
421:       assertFalse(node0.isDo());
422:       assertFalse(node0.isAssignAdd());
423:       assertFalse(node0.isFunction());
424:       assertFalse(node0.isDefaultCase());
425:       assertFalse(node0.isLabel());
426:       assertEquals(40, node0.getType());
427:       assertEquals(0, node0.getChildCount());
428:       assertFalse(node0.isCast());
429:       assertFalse(node0.isEmpty());
430:       assertFalse(node0.isGetElem());
431:       assertFalse(node0.isDelProp());
432:       assertFalse(node0.isVoid());
433:       assertFalse(node0.isTrue());
434:       assertFalse(node0.isOr());
435:       assertFalse(node0.isNot());
436:       assertEquals((-1), node0.getSourcePosition());
437:       assertFalse(node0.isDebugger());
438:       assertFalse(node0.isObjectLit());
439:       assertFalse(node0.isGetProp());
440:       assertFalse(node0.isExprResult());
441:       assertFalse(node0.isTypeOf());
442:       assertFalse(node0.isWhile());
443:       assertFalse(node0.isAssign());
444:       assertFalse(node0.isReturn());
445:       assertFalse(node0.hasChildren());
446:       assertFalse(node0.isDec());
447:       assertFalse(node0.isComma());
448:       assertFalse(boolean1);
449:       assertFalse(boolean1 == boolean0);
450:       
451:       node0.setCharno((-564));
452:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
453:       assertEquals(50, Node.FREE_CALL);
454:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
455:       assertEquals(8, Node.FLAG_NO_THROWS);
456:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
457:       assertEquals(57, Node.REFLECTED_OBJECT);
458:       assertEquals(4095, Node.COLUMN_MASK);
459:       assertEquals(40, Node.ORIGINALNAME_PROP);
460:       assertEquals(48, Node.DIRECTIVES);
461:       assertEquals(30, Node.VAR_ARGS_NAME);
462:       assertEquals(49, Node.DIRECT_EVAL);
463:       assertEquals(57, Node.LAST_PROP);
464:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
465:       assertEquals(36, Node.QUOTED_PROP);
466:       assertEquals(52, Node.LENGTH);
467:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
468:       assertEquals(55, Node.INFERRED_FUNCTION);
469:       assertEquals(29, Node.JSDOC_INFO_PROP);
470:       assertEquals(53, Node.INPUT_ID);
471:       assertEquals(15, Node.NO_SIDE_EFFECTS);
472:       assertEquals(39, Node.EMPTY_BLOCK);
473:       assertEquals(56, Node.CHANGE_TIME);
474:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
475:       assertEquals(2, Node.POST_FLAG);
476:       assertEquals(47, Node.IS_DISPATCHER);
477:       assertEquals(46, Node.IS_NAMESPACE);
478:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
479:       assertEquals(37, Node.OPT_ARG_NAME);
480:       assertEquals(43, Node.IS_CONSTANT_NAME);
481:       assertEquals(54, Node.SLASH_V);
482:       assertEquals(51, Node.STATIC_SOURCE_FILE);
483:       assertEquals(12, Node.COLUMN_BITS);
484:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
485:       assertEquals(32, Node.INCRDECR_PROP);
486:       assertEquals(1, Node.DECR_FLAG);
487:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
488:       assertFalse(node0.isHook());
489:       assertFalse(node0.isFalse());
490:       assertFalse(node0.isThrow());
491:       assertFalse(node0.isBreak());
492:       assertFalse(node0.isSwitch());
493:       assertFalse(node0.isInc());
494:       assertEquals((-1), node0.getCharno());
495:       assertFalse(node0.isIn());
496:       assertFalse(node0.isAnd());
497:       assertFalse(node0.isLabelName());
498:       assertFalse(node0.isTry());
499:       assertFalse(node0.isArrayLit());
500:       assertFalse(node0.hasOneChild());
501:       assertFalse(node0.isNE());
502:       assertFalse(node0.isNumber());
503:       assertFalse(node0.isScript());
504:       assertFalse(node0.isIf());
505:       assertFalse(node0.isGetterDef());
506:       assertFalse(node0.hasMoreThanOneChild());
507:       assertFalse(node0.isCatch());
508:       assertFalse(node0.isInstanceOf());
509:       assertEquals((-1), node0.getLineno());
510:       assertFalse(node0.isCase());
511:       assertFalse(node0.isRegExp());
512:       assertFalse(node0.isThis());
513:       assertFalse(node0.isWith());
514:       assertFalse(node0.isBlock());
515:       assertFalse(node0.isFor());
516:       assertFalse(node0.isVar());
517:       assertFalse(node0.isCall());
518:       assertFalse(node0.isStringKey());
519:       assertFalse(node0.isAdd());
520:       assertFalse(node0.isName());
521:       assertTrue(node0.isString());
522:       assertFalse(node0.isNew());
523:       assertFalse(node0.isSetterDef());
524:       assertFalse(node0.isNull());
525:       assertFalse(node0.isParamList());
526:       assertFalse(node0.isContinue());
527:       assertFalse(node0.isDo());
528:       assertFalse(node0.isAssignAdd());
529:       assertFalse(node0.isFunction());
530:       assertFalse(node0.isDefaultCase());
531:       assertFalse(node0.isLabel());
532:       assertEquals(40, node0.getType());
533:       assertEquals(0, node0.getChildCount());
534:       assertFalse(node0.isCast());
535:       assertFalse(node0.isEmpty());
536:       assertFalse(node0.isGetElem());
537:       assertFalse(node0.isDelProp());
538:       assertFalse(node0.isVoid());
539:       assertFalse(node0.isTrue());
540:       assertFalse(node0.isOr());
541:       assertFalse(node0.isNot());
542:       assertEquals((-1), node0.getSourcePosition());
543:       assertFalse(node0.isDebugger());
544:       assertFalse(node0.isObjectLit());
545:       assertFalse(node0.isGetProp());
546:       assertFalse(node0.isExprResult());
547:       assertFalse(node0.isTypeOf());
548:       assertFalse(node0.isWhile());
549:       assertFalse(node0.isAssign());
550:       assertFalse(node0.isReturn());
551:       assertFalse(node0.hasChildren());
552:       assertFalse(node0.isDec());
553:       assertFalse(node0.isComma());
554:       
555:       boolean boolean2 = node0.isCatch();
556:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
557:       assertEquals(50, Node.FREE_CALL);
558:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
559:       assertEquals(8, Node.FLAG_NO_THROWS);
560:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
561:       assertEquals(57, Node.REFLECTED_OBJECT);
562:       assertEquals(4095, Node.COLUMN_MASK);
563:       assertEquals(40, Node.ORIGINALNAME_PROP);
564:       assertEquals(48, Node.DIRECTIVES);
565:       assertEquals(30, Node.VAR_ARGS_NAME);
566:       assertEquals(49, Node.DIRECT_EVAL);
567:       assertEquals(57, Node.LAST_PROP);
568:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
569:       assertEquals(36, Node.QUOTED_PROP);
570:       assertEquals(52, Node.LENGTH);
571:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
572:       assertEquals(55, Node.INFERRED_FUNCTION);
573:       assertEquals(29, Node.JSDOC_INFO_PROP);
574:       assertEquals(53, Node.INPUT_ID);
575:       assertEquals(15, Node.NO_SIDE_EFFECTS);
576:       assertEquals(39, Node.EMPTY_BLOCK);
577:       assertEquals(56, Node.CHANGE_TIME);
578:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
579:       assertEquals(2, Node.POST_FLAG);
580:       assertEquals(47, Node.IS_DISPATCHER);
581:       assertEquals(46, Node.IS_NAMESPACE);
582:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
583:       assertEquals(37, Node.OPT_ARG_NAME);
584:       assertEquals(43, Node.IS_CONSTANT_NAME);
585:       assertEquals(54, Node.SLASH_V);
586:       assertEquals(51, Node.STATIC_SOURCE_FILE);
587:       assertEquals(12, Node.COLUMN_BITS);
588:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
589:       assertEquals(32, Node.INCRDECR_PROP);
590:       assertEquals(1, Node.DECR_FLAG);
591:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
592:       assertFalse(node0.isHook());
593:       assertFalse(node0.isFalse());
594:       assertFalse(node0.isThrow());
595:       assertFalse(node0.isBreak());
596:       assertFalse(node0.isSwitch());
597:       assertFalse(node0.isInc());
598:       assertEquals((-1), node0.getCharno());
599:       assertFalse(node0.isIn());
600:       assertFalse(node0.isAnd());
601:       assertFalse(node0.isLabelName());
602:       assertFalse(node0.isTry());
603:       assertFalse(node0.isArrayLit());
604:       assertFalse(node0.hasOneChild());
605:       assertFalse(node0.isNE());
606:       assertFalse(node0.isNumber());
607:       assertFalse(node0.isScript());
608:       assertFalse(node0.isIf());
609:       assertFalse(node0.isGetterDef());
610:       assertFalse(node0.hasMoreThanOneChild());
611:       assertFalse(node0.isCatch());
612:       assertFalse(node0.isInstanceOf());
613:       assertEquals((-1), node0.getLineno());
614:       assertFalse(node0.isCase());
615:       assertFalse(node0.isRegExp());
616:       assertFalse(node0.isThis());
617:       assertFalse(node0.isWith());
618:       assertFalse(node0.isBlock());
619:       assertFalse(node0.isFor());
620:       assertFalse(node0.isVar());
621:       assertFalse(node0.isCall());
622:       assertFalse(node0.isStringKey());
623:       assertFalse(node0.isAdd());
624:       assertFalse(node0.isName());
625:       assertTrue(node0.isString());
626:       assertFalse(node0.isNew());
627:       assertFalse(node0.isSetterDef());
628:       assertFalse(node0.isNull());
629:       assertFalse(node0.isParamList());
630:       assertFalse(node0.isContinue());
631:       assertFalse(node0.isDo());
632:       assertFalse(node0.isAssignAdd());
633:       assertFalse(node0.isFunction());
634:       assertFalse(node0.isDefaultCase());
635:       assertFalse(node0.isLabel());
636:       assertEquals(40, node0.getType());
637:       assertEquals(0, node0.getChildCount());
638:       assertFalse(node0.isCast());
639:       assertFalse(node0.isEmpty());
640:       assertFalse(node0.isGetElem());
641:       assertFalse(node0.isDelProp());
642:       assertFalse(node0.isVoid());
643:       assertFalse(node0.isTrue());
644:       assertFalse(node0.isOr());
645:       assertFalse(node0.isNot());
646:       assertEquals((-1), node0.getSourcePosition());
647:       assertFalse(node0.isDebugger());
648:       assertFalse(node0.isObjectLit());
649:       assertFalse(node0.isGetProp());
650:       assertFalse(node0.isExprResult());
651:       assertFalse(node0.isTypeOf());
652:       assertFalse(node0.isWhile());
653:       assertFalse(node0.isAssign());
654:       assertFalse(node0.isReturn());
655:       assertFalse(node0.hasChildren());
656:       assertFalse(node0.isDec());
657:       assertFalse(node0.isComma());
658:       assertFalse(boolean2);
659:       assertTrue(boolean2 == boolean1);
660:       assertFalse(boolean2 == boolean0);
661:       
662:       Iterable<Node> iterable0 = node0.children();
663:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
664:       assertEquals(50, Node.FREE_CALL);
665:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
666:       assertEquals(8, Node.FLAG_NO_THROWS);
667:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
668:       assertEquals(57, Node.REFLECTED_OBJECT);
669:       assertEquals(4095, Node.COLUMN_MASK);
670:       assertEquals(40, Node.ORIGINALNAME_PROP);
671:       assertEquals(48, Node.DIRECTIVES);
672:       assertEquals(30, Node.VAR_ARGS_NAME);
673:       assertEquals(49, Node.DIRECT_EVAL);
674:       assertEquals(57, Node.LAST_PROP);
675:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
676:       assertEquals(36, Node.QUOTED_PROP);
677:       assertEquals(52, Node.LENGTH);
678:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
679:       assertEquals(55, Node.INFERRED_FUNCTION);
680:       assertEquals(29, Node.JSDOC_INFO_PROP);
681:       assertEquals(53, Node.INPUT_ID);
682:       assertEquals(15, Node.NO_SIDE_EFFECTS);
683:       assertEquals(39, Node.EMPTY_BLOCK);
684:       assertEquals(56, Node.CHANGE_TIME);
685:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
686:       assertEquals(2, Node.POST_FLAG);
687:       assertEquals(47, Node.IS_DISPATCHER);
688:       assertEquals(46, Node.IS_NAMESPACE);
689:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
690:       assertEquals(37, Node.OPT_ARG_NAME);
691:       assertEquals(43, Node.IS_CONSTANT_NAME);
692:       assertEquals(54, Node.SLASH_V);
693:       assertEquals(51, Node.STATIC_SOURCE_FILE);
694:       assertEquals(12, Node.COLUMN_BITS);
695:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
696:       assertEquals(32, Node.INCRDECR_PROP);
697:       assertEquals(1, Node.DECR_FLAG);
698:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
699:       assertFalse(node0.isHook());
700:       assertFalse(node0.isFalse());
701:       assertFalse(node0.isThrow());
702:       assertFalse(node0.isBreak());
703:       assertFalse(node0.isSwitch());
704:       assertFalse(node0.isInc());
705:       assertEquals((-1), node0.getCharno());
706:       assertFalse(node0.isIn());
707:       assertFalse(node0.isAnd());
708:       assertFalse(node0.isLabelName());
709:       assertFalse(node0.isTry());
710:       assertFalse(node0.isArrayLit());
711:       assertFalse(node0.hasOneChild());
712:       assertFalse(node0.isNE());
713:       assertFalse(node0.isNumber());
714:       assertFalse(node0.isScript());
715:       assertFalse(node0.isIf());
716:       assertFalse(node0.isGetterDef());
717:       assertFalse(node0.hasMoreThanOneChild());
718:       assertFalse(node0.isCatch());
719:       assertFalse(node0.isInstanceOf());
720:       assertEquals((-1), node0.getLineno());
721:       assertFalse(node0.isCase());
722:       assertFalse(node0.isRegExp());
723:       assertFalse(node0.isThis());
724:       assertFalse(node0.isWith());
725:       assertFalse(node0.isBlock());
726:       assertFalse(node0.isFor());
727:       assertFalse(node0.isVar());
728:       assertFalse(node0.isCall());
729:       assertFalse(node0.isStringKey());
730:       assertFalse(node0.isAdd());
731:       assertFalse(node0.isName());
732:       assertTrue(node0.isString());
733:       assertFalse(node0.isNew());
734:       assertFalse(node0.isSetterDef());
735:       assertFalse(node0.isNull());
736:       assertFalse(node0.isParamList());
737:       assertFalse(node0.isContinue());
738:       assertFalse(node0.isDo());
739:       assertFalse(node0.isAssignAdd());
740:       assertFalse(node0.isFunction());
741:       assertFalse(node0.isDefaultCase());
742:       assertFalse(node0.isLabel());
743:       assertEquals(40, node0.getType());
744:       assertEquals(0, node0.getChildCount());
745:       assertFalse(node0.isCast());
746:       assertFalse(node0.isEmpty());
747:       assertFalse(node0.isGetElem());
748:       assertFalse(node0.isDelProp());
749:       assertFalse(node0.isVoid());
750:       assertFalse(node0.isTrue());
751:       assertFalse(node0.isOr());
752:       assertFalse(node0.isNot());
753:       assertEquals((-1), node0.getSourcePosition());
754:       assertFalse(node0.isDebugger());
755:       assertFalse(node0.isObjectLit());
756:       assertFalse(node0.isGetProp());
757:       assertFalse(node0.isExprResult());
758:       assertFalse(node0.isTypeOf());
759:       assertFalse(node0.isWhile());
760:       assertFalse(node0.isAssign());
761:       assertFalse(node0.isReturn());
762:       assertFalse(node0.hasChildren());
763:       assertFalse(node0.isDec());
764:       assertFalse(node0.isComma());
765:       assertFalse(iterable0.contains(node0));
766:       assertNotNull(iterable0);
767:       
768:       boolean boolean3 = node0.getBooleanProp((-1128));
769:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
770:       assertEquals(50, Node.FREE_CALL);
771:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
772:       assertEquals(8, Node.FLAG_NO_THROWS);
773:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
774:       assertEquals(57, Node.REFLECTED_OBJECT);
775:       assertEquals(4095, Node.COLUMN_MASK);
776:       assertEquals(40, Node.ORIGINALNAME_PROP);
777:       assertEquals(48, Node.DIRECTIVES);
778:       assertEquals(30, Node.VAR_ARGS_NAME);
779:       assertEquals(49, Node.DIRECT_EVAL);
780:       assertEquals(57, Node.LAST_PROP);
781:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
782:       assertEquals(36, Node.QUOTED_PROP);
783:       assertEquals(52, Node.LENGTH);
784:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
785:       assertEquals(55, Node.INFERRED_FUNCTION);
786:       assertEquals(29, Node.JSDOC_INFO_PROP);
787:       assertEquals(53, Node.INPUT_ID);
788:       assertEquals(15, Node.NO_SIDE_EFFECTS);
789:       assertEquals(39, Node.EMPTY_BLOCK);
790:       assertEquals(56, Node.CHANGE_TIME);
791:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
792:       assertEquals(2, Node.POST_FLAG);
793:       assertEquals(47, Node.IS_DISPATCHER);
794:       assertEquals(46, Node.IS_NAMESPACE);
795:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
796:       assertEquals(37, Node.OPT_ARG_NAME);
797:       assertEquals(43, Node.IS_CONSTANT_NAME);
798:       assertEquals(54, Node.SLASH_V);
799:       assertEquals(51, Node.STATIC_SOURCE_FILE);
800:       assertEquals(12, Node.COLUMN_BITS);
801:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
802:       assertEquals(32, Node.INCRDECR_PROP);
803:       assertEquals(1, Node.DECR_FLAG);
804:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
805:       assertFalse(node0.isHook());
806:       assertFalse(node0.isFalse());
807:       assertFalse(node0.isThrow());
808:       assertFalse(node0.isBreak());
809:       assertFalse(node0.isSwitch());
810:       assertFalse(node0.isInc());
811:       assertEquals((-1), node0.getCharno());
812:       assertFalse(node0.isIn());
813:       assertFalse(node0.isAnd());
814:       assertFalse(node0.isLabelName());
815:       assertFalse(node0.isTry());
816:       assertFalse(node0.isArrayLit());
817:       assertFalse(node0.hasOneChild());
818:       assertFalse(node0.isNE());
819:       assertFalse(node0.isNumber());
820:       assertFalse(node0.isScript());
821:       assertFalse(node0.isIf());
822:       assertFalse(node0.isGetterDef());
823:       assertFalse(node0.hasMoreThanOneChild());
824:       assertFalse(node0.isCatch());
825:       assertFalse(node0.isInstanceOf());
826:       assertEquals((-1), node0.getLineno());
827:       assertFalse(node0.isCase());
828:       assertFalse(node0.isRegExp());
829:       assertFalse(node0.isThis());
830:       assertFalse(node0.isWith());
831:       assertFalse(node0.isBlock());
832:       assertFalse(node0.isFor());
833:       assertFalse(node0.isVar());
834:       assertFalse(node0.isCall());
835:       assertFalse(node0.isStringKey());
836:       assertFalse(node0.isAdd());
837:       assertFalse(node0.isName());
838:       assertTrue(node0.isString());
839:       assertFalse(node0.isNew());
840:       assertFalse(node0.isSetterDef());
841:       assertFalse(node0.isNull());
842:       assertFalse(node0.isParamList());
843:       assertFalse(node0.isContinue());
844:       assertFalse(node0.isDo());
845:       assertFalse(node0.isAssignAdd());
846:       assertFalse(node0.isFunction());
847:       assertFalse(node0.isDefaultCase());
848:       assertFalse(node0.isLabel());
849:       assertEquals(40, node0.getType());
850:       assertEquals(0, node0.getChildCount());
851:       assertFalse(node0.isCast());
852:       assertFalse(node0.isEmpty());
853:       assertFalse(node0.isGetElem());
854:       assertFalse(node0.isDelProp());
855:       assertFalse(node0.isVoid());
856:       assertFalse(node0.isTrue());
857:       assertFalse(node0.isOr());
858:       assertFalse(node0.isNot());
859:       assertEquals((-1), node0.getSourcePosition());
860:       assertFalse(node0.isDebugger());
861:       assertFalse(node0.isObjectLit());
862:       assertFalse(node0.isGetProp());
863:       assertFalse(node0.isExprResult());
864:       assertFalse(node0.isTypeOf());
865:       assertFalse(node0.isWhile());
866:       assertFalse(node0.isAssign());
867:       assertFalse(node0.isReturn());
868:       assertFalse(node0.hasChildren());
869:       assertFalse(node0.isDec());
870:       assertFalse(node0.isComma());
871:       assertFalse(boolean3);
872:       assertFalse(boolean3 == boolean0);
873:       assertTrue(boolean3 == boolean1);
874:       assertTrue(boolean3 == boolean2);
875:       
876:       boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
877:       assertFalse(boolean4);
878:       assertTrue(boolean4 == boolean1);
879:       assertFalse(boolean4 == boolean0);
880:       assertTrue(boolean4 == boolean2);
881:       assertTrue(boolean4 == boolean3);
882:       
883:       Node node1 = Node.newString(154, "index", 54, 30);
884:       assertEquals(57, Node.REFLECTED_OBJECT);
885:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
886:       assertEquals(52, Node.LENGTH);
887:       assertEquals(40, Node.ORIGINALNAME_PROP);
888:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
889:       assertEquals(15, Node.NO_SIDE_EFFECTS);
890:       assertEquals(39, Node.EMPTY_BLOCK);
891:       assertEquals(57, Node.LAST_PROP);
892:       assertEquals(30, Node.VAR_ARGS_NAME);
893:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
894:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
895:       assertEquals(51, Node.STATIC_SOURCE_FILE);
896:       assertEquals(32, Node.INCRDECR_PROP);
897:       assertEquals(1, Node.DECR_FLAG);
898:       assertEquals(43, Node.IS_CONSTANT_NAME);
899:       assertEquals(50, Node.FREE_CALL);
900:       assertEquals(46, Node.IS_NAMESPACE);
901:       assertEquals(54, Node.SLASH_V);
902:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
903:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
904:       assertEquals(53, Node.INPUT_ID);
905:       assertEquals(29, Node.JSDOC_INFO_PROP);
906:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
907:       assertEquals(47, Node.IS_DISPATCHER);
908:       assertEquals(2, Node.POST_FLAG);
909:       assertEquals(12, Node.COLUMN_BITS);
910:       assertEquals(4095, Node.COLUMN_MASK);
911:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
912:       assertEquals(55, Node.INFERRED_FUNCTION);
913:       assertEquals(56, Node.CHANGE_TIME);
914:       assertEquals(36, Node.QUOTED_PROP);
915:       assertEquals(8, Node.FLAG_NO_THROWS);
916:       assertEquals(37, Node.OPT_ARG_NAME);
917:       assertEquals(48, Node.DIRECTIVES);
918:       assertEquals(49, Node.DIRECT_EVAL);
919:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
920:       assertFalse(node1.isSwitch());
921:       assertFalse(node1.isHook());
922:       assertFalse(node1.isFalse());
923:       assertFalse(node1.isBreak());
924:       assertFalse(node1.isGetProp());
925:       assertFalse(node1.isComma());
926:       assertTrue(node1.isStringKey());
927:       assertFalse(node1.isGetterDef());
928:       assertFalse(node1.isFor());
929:       assertFalse(node1.isThis());
930:       assertFalse(node1.isCase());
931:       assertFalse(node1.isNot());
932:       assertFalse(node1.isObjectLit());
933:       assertFalse(node1.isString());
934:       assertFalse(node1.isScript());
935:       assertFalse(node1.isDebugger());
936:       assertFalse(node1.isTry());
937:       assertFalse(node1.isFunction());
938:       assertFalse(node1.isRegExp());
939:       assertEquals(54, node1.getLineno());
940:       assertFalse(node1.isAnd());
941:       assertFalse(node1.isCatch());
942:       assertFalse(node1.isWith());
943:       assertFalse(node1.isInstanceOf());
944:       assertFalse(node1.isCast());
945:       assertFalse(node1.isIf());
946:       assertFalse(node1.isNE());
947:       assertFalse(node1.isThrow());
948:       assertFalse(node1.isIn());
949:       assertFalse(node1.isInc());
950:       assertFalse(node1.isSetterDef());
951:       assertFalse(node1.isNew());
952:       assertEquals(30, node1.getCharno());
953:       assertFalse(node1.isWhile());
954:       assertFalse(node1.isVar());
955:       assertFalse(node1.isBlock());
956:       assertFalse(node1.isContinue());
957:       assertFalse(node1.hasMoreThanOneChild());
958:       assertFalse(node1.isName());
959:       assertFalse(node1.isCall());
960:       assertFalse(node1.isParamList());
961:       assertFalse(node1.isNumber());
962:       assertFalse(node1.isTypeOf());
963:       assertFalse(node1.hasChildren());
964:       assertFalse(node1.isDec());
965:       assertFalse(node1.isReturn());
966:       assertFalse(node1.hasOneChild());
967:       assertFalse(node1.isVoid());
968:       assertFalse(node1.isDefaultCase());
969:       assertFalse(node1.isTrue());
970:       assertEquals(154, node1.getType());
971:       assertFalse(node1.isLabelName());
972:       assertFalse(node1.isAssign());
973:       assertFalse(node1.isDelProp());
974:       assertFalse(node1.isArrayLit());
975:       assertFalse(node1.isExprResult());
976:       assertFalse(node1.isGetElem());
977:       assertFalse(node1.isOr());
978:       assertFalse(node1.isAssignAdd());
979:       assertEquals(0, node1.getChildCount());
980:       assertFalse(node1.isLabel());
981:       assertFalse(node1.isNull());
982:       assertFalse(node1.isDo());
983:       assertEquals(221214, node1.getSourcePosition());
984:       assertFalse(node1.isAdd());
985:       assertFalse(node1.isEmpty());
986:       assertNotSame(node1, node0);
987:       assertFalse(node1.equals((Object)node0));
988:       assertNotNull(node1);
989:       
990:       Node node2 = node0.copyInformationFromForTree(node1);
991:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
992:       assertEquals(50, Node.FREE_CALL);
993:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
994:       assertEquals(8, Node.FLAG_NO_THROWS);
995:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
996:       assertEquals(57, Node.REFLECTED_OBJECT);
997:       assertEquals(4095, Node.COLUMN_MASK);
998:       assertEquals(40, Node.ORIGINALNAME_PROP);
999:       assertEquals(48, Node.DIRECTIVES);
1000:       assertEquals(30, Node.VAR_ARGS_NAME);
1001:       assertEquals(49, Node.DIRECT_EVAL);
1002:       assertEquals(57, Node.LAST_PROP);
1003:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1004:       assertEquals(36, Node.QUOTED_PROP);
1005:       assertEquals(52, Node.LENGTH);
1006:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1007:       assertEquals(55, Node.INFERRED_FUNCTION);
1008:       assertEquals(29, Node.JSDOC_INFO_PROP);
1009:       assertEquals(53, Node.INPUT_ID);
1010:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1011:       assertEquals(39, Node.EMPTY_BLOCK);
1012:       assertEquals(56, Node.CHANGE_TIME);
1013:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1014:       assertEquals(2, Node.POST_FLAG);
1015:       assertEquals(47, Node.IS_DISPATCHER);
1016:       assertEquals(46, Node.IS_NAMESPACE);
1017:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1018:       assertEquals(37, Node.OPT_ARG_NAME);
1019:       assertEquals(43, Node.IS_CONSTANT_NAME);
1020:       assertEquals(54, Node.SLASH_V);
1021:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1022:       assertEquals(12, Node.COLUMN_BITS);
1023:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1024:       assertEquals(32, Node.INCRDECR_PROP);
1025:       assertEquals(1, Node.DECR_FLAG);
1026:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1027:       assertEquals(57, Node.REFLECTED_OBJECT);
1028:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1029:       assertEquals(52, Node.LENGTH);
1030:       assertEquals(40, Node.ORIGINALNAME_PROP);
1031:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1032:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1033:       assertEquals(39, Node.EMPTY_BLOCK);
1034:       assertEquals(57, Node.LAST_PROP);
1035:       assertEquals(30, Node.VAR_ARGS_NAME);
1036:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1037:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1038:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1039:       assertEquals(32, Node.INCRDECR_PROP);
1040:       assertEquals(1, Node.DECR_FLAG);
1041:       assertEquals(43, Node.IS_CONSTANT_NAME);
1042:       assertEquals(50, Node.FREE_CALL);
1043:       assertEquals(46, Node.IS_NAMESPACE);
1044:       assertEquals(54, Node.SLASH_V);
1045:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1046:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1047:       assertEquals(53, Node.INPUT_ID);
1048:       assertEquals(29, Node.JSDOC_INFO_PROP);
1049:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1050:       assertEquals(47, Node.IS_DISPATCHER);
1051:       assertEquals(2, Node.POST_FLAG);
1052:       assertEquals(12, Node.COLUMN_BITS);
1053:       assertEquals(4095, Node.COLUMN_MASK);
1054:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1055:       assertEquals(55, Node.INFERRED_FUNCTION);
1056:       assertEquals(56, Node.CHANGE_TIME);
1057:       assertEquals(36, Node.QUOTED_PROP);
1058:       assertEquals(8, Node.FLAG_NO_THROWS);
1059:       assertEquals(37, Node.OPT_ARG_NAME);
1060:       assertEquals(48, Node.DIRECTIVES);
1061:       assertEquals(49, Node.DIRECT_EVAL);
1062:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1063:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1064:       assertEquals(55, Node.INFERRED_FUNCTION);
1065:       assertEquals(43, Node.IS_CONSTANT_NAME);
1066:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1067:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1068:       assertEquals(4095, Node.COLUMN_MASK);
1069:       assertEquals(50, Node.FREE_CALL);
1070:       assertEquals(40, Node.ORIGINALNAME_PROP);
1071:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1072:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1073:       assertEquals(46, Node.IS_NAMESPACE);
1074:       assertEquals(54, Node.SLASH_V);
1075:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1076:       assertEquals(49, Node.DIRECT_EVAL);
1077:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1078:       assertEquals(57, Node.LAST_PROP);
1079:       assertEquals(32, Node.INCRDECR_PROP);
1080:       assertEquals(1, Node.DECR_FLAG);
1081:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1082:       assertEquals(2, Node.POST_FLAG);
1083:       assertEquals(12, Node.COLUMN_BITS);
1084:       assertEquals(47, Node.IS_DISPATCHER);
1085:       assertEquals(30, Node.VAR_ARGS_NAME);
1086:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1087:       assertEquals(29, Node.JSDOC_INFO_PROP);
1088:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1089:       assertEquals(56, Node.CHANGE_TIME);
1090:       assertEquals(39, Node.EMPTY_BLOCK);
1091:       assertEquals(37, Node.OPT_ARG_NAME);
1092:       assertEquals(48, Node.DIRECTIVES);
1093:       assertEquals(53, Node.INPUT_ID);
1094:       assertEquals(52, Node.LENGTH);
1095:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1096:       assertEquals(8, Node.FLAG_NO_THROWS);
1097:       assertEquals(57, Node.REFLECTED_OBJECT);
1098:       assertEquals(36, Node.QUOTED_PROP);
1099:       assertEquals(221214, node0.getSourcePosition());
1100:       assertFalse(node0.isHook());
1101:       assertFalse(node0.isFalse());
1102:       assertFalse(node0.isThrow());
1103:       assertFalse(node0.isBreak());
1104:       assertFalse(node0.isSwitch());
1105:       assertFalse(node0.isInc());
1106:       assertFalse(node0.isIn());
1107:       assertFalse(node0.isAnd());
1108:       assertFalse(node0.isLabelName());
1109:       assertFalse(node0.isTry());
1110:       assertFalse(node0.isArrayLit());
1111:       assertFalse(node0.hasOneChild());
1112:       assertFalse(node0.isNE());
1113:       assertFalse(node0.isNumber());
1114:       assertFalse(node0.isScript());
1115:       assertFalse(node0.isIf());
1116:       assertFalse(node0.isGetterDef());
1117:       assertFalse(node0.hasMoreThanOneChild());
1118:       assertFalse(node0.isCatch());
1119:       assertFalse(node0.isInstanceOf());
1120:       assertFalse(node0.isCase());
1121:       assertFalse(node0.isRegExp());
1122:       assertFalse(node0.isThis());
1123:       assertFalse(node0.isWith());
1124:       assertFalse(node0.isBlock());
1125:       assertFalse(node0.isFor());
1126:       assertFalse(node0.isVar());
1127:       assertFalse(node0.isCall());
1128:       assertFalse(node0.isStringKey());
1129:       assertFalse(node0.isAdd());
1130:       assertFalse(node0.isName());
1131:       assertTrue(node0.isString());
1132:       assertFalse(node0.isNew());
1133:       assertFalse(node0.isSetterDef());
1134:       assertFalse(node0.isNull());
1135:       assertFalse(node0.isParamList());
1136:       assertEquals(30, node0.getCharno());
1137:       assertFalse(node0.isContinue());
1138:       assertFalse(node0.isDo());
1139:       assertFalse(node0.isAssignAdd());
1140:       assertFalse(node0.isFunction());
1141:       assertFalse(node0.isDefaultCase());
1142:       assertFalse(node0.isLabel());
1143:       assertEquals(40, node0.getType());
1144:       assertEquals(0, node0.getChildCount());
1145:       assertFalse(node0.isCast());
1146:       assertFalse(node0.isEmpty());
1147:       assertFalse(node0.isGetElem());
1148:       assertFalse(node0.isDelProp());
1149:       assertFalse(node0.isVoid());
1150:       assertFalse(node0.isTrue());
1151:       assertFalse(node0.isOr());
1152:       assertFalse(node0.isNot());
1153:       assertEquals(54, node0.getLineno());
1154:       assertFalse(node0.isDebugger());
1155:       assertFalse(node0.isObjectLit());
1156:       assertFalse(node0.isGetProp());
1157:       assertFalse(node0.isExprResult());
1158:       assertFalse(node0.isTypeOf());
1159:       assertFalse(node0.isWhile());
1160:       assertFalse(node0.isAssign());
1161:       assertFalse(node0.isReturn());
1162:       assertFalse(node0.hasChildren());
1163:       assertFalse(node0.isDec());
1164:       assertFalse(node0.isComma());
1165:       assertFalse(node1.isSwitch());
1166:       assertFalse(node1.isHook());
1167:       assertFalse(node1.isFalse());
1168:       assertFalse(node1.isBreak());
1169:       assertFalse(node1.isGetProp());
1170:       assertFalse(node1.isComma());
1171:       assertTrue(node1.isStringKey());
1172:       assertFalse(node1.isGetterDef());
1173:       assertFalse(node1.isFor());
1174:       assertFalse(node1.isThis());
1175:       assertFalse(node1.isCase());
1176:       assertFalse(node1.isNot());
1177:       assertFalse(node1.isObjectLit());
1178:       assertFalse(node1.isString());
1179:       assertFalse(node1.isScript());
1180:       assertFalse(node1.isDebugger());
1181:       assertFalse(node1.isTry());
1182:       assertFalse(node1.isFunction());
1183:       assertFalse(node1.isRegExp());
1184:       assertEquals(54, node1.getLineno());
1185:       assertFalse(node1.isAnd());
1186:       assertFalse(node1.isCatch());
1187:       assertFalse(node1.isWith());
1188:       assertFalse(node1.isInstanceOf());
1189:       assertFalse(node1.isCast());
1190:       assertFalse(node1.isIf());
1191:       assertFalse(node1.isNE());
1192:       assertFalse(node1.isThrow());
1193:       assertFalse(node1.isIn());
1194:       assertFalse(node1.isInc());
1195:       assertFalse(node1.isSetterDef());
1196:       assertFalse(node1.isNew());
1197:       assertEquals(30, node1.getCharno());
1198:       assertFalse(node1.isWhile());
1199:       assertFalse(node1.isVar());
1200:       assertFalse(node1.isBlock());
1201:       assertFalse(node1.isContinue());
1202:       assertFalse(node1.hasMoreThanOneChild());
1203:       assertFalse(node1.isName());
1204:       assertFalse(node1.isCall());
1205:       assertFalse(node1.isParamList());
1206:       assertFalse(node1.isNumber());
1207:       assertFalse(node1.isTypeOf());
1208:       assertFalse(node1.hasChildren());
1209:       assertFalse(node1.isDec());
1210:       assertFalse(node1.isReturn());
1211:       assertFalse(node1.hasOneChild());
1212:       assertFalse(node1.isVoid());
1213:       assertFalse(node1.isDefaultCase());
1214:       assertFalse(node1.isTrue());
1215:       assertEquals(154, node1.getType());
1216:       assertFalse(node1.isLabelName());
1217:       assertFalse(node1.isAssign());
1218:       assertFalse(node1.isDelProp());
1219:       assertFalse(node1.isArrayLit());
1220:       assertFalse(node1.isExprResult());
1221:       assertFalse(node1.isGetElem());
1222:       assertFalse(node1.isOr());
1223:       assertFalse(node1.isAssignAdd());
1224:       assertEquals(0, node1.getChildCount());
1225:       assertFalse(node1.isLabel());
1226:       assertFalse(node1.isNull());
1227:       assertFalse(node1.isDo());
1228:       assertEquals(221214, node1.getSourcePosition());
1229:       assertFalse(node1.isAdd());
1230:       assertFalse(node1.isEmpty());
1231:       assertFalse(node2.isInstanceOf());
1232:       assertFalse(node2.isNot());
1233:       assertFalse(node2.isComma());
1234:       assertFalse(node2.isWith());
1235:       assertFalse(node2.isObjectLit());
1236:       assertFalse(node2.isBreak());
1237:       assertFalse(node2.isExprResult());
1238:       assertFalse(node2.isAnd());
1239:       assertFalse(node2.isHook());
1240:       assertFalse(node2.hasOneChild());
1241:       assertFalse(node2.isAssign());
1242:       assertFalse(node2.isNumber());
1243:       assertFalse(node2.hasChildren());
1244:       assertFalse(node2.isDec());
1245:       assertFalse(node2.isThis());
1246:       assertFalse(node2.isScript());
1247:       assertFalse(node2.isGetProp());
1248:       assertFalse(node2.isCase());
1249:       assertFalse(node2.isIn());
1250:       assertFalse(node2.isContinue());
1251:       assertFalse(node2.hasMoreThanOneChild());
1252:       assertFalse(node2.isIf());
1253:       assertFalse(node2.isNE());
1254:       assertFalse(node2.isCast());
1255:       assertFalse(node2.isFalse());
1256:       assertFalse(node2.isFunction());
1257:       assertFalse(node2.isInc());
1258:       assertFalse(node2.isSetterDef());
1259:       assertEquals(40, node2.getType());
1260:       assertFalse(node2.isThrow());
1261:       assertEquals(0, node2.getChildCount());
1262:       assertFalse(node2.isCatch());
1263:       assertEquals(54, node2.getLineno());
1264:       assertFalse(node2.isNull());
1265:       assertFalse(node2.isTrue());
1266:       assertFalse(node2.isStringKey());
1267:       assertFalse(node2.isParamList());
1268:       assertFalse(node2.isVoid());
1269:       assertFalse(node2.isName());
1270:       assertFalse(node2.isCall());
1271:       assertFalse(node2.isBlock());
1272:       assertEquals(30, node2.getCharno());
1273:       assertFalse(node2.isDebugger());
1274:       assertFalse(node2.isGetterDef());
1275:       assertFalse(node2.isRegExp());
1276:       assertFalse(node2.isWhile());
1277:       assertFalse(node2.isFor());
1278:       assertTrue(node2.isString());
1279:       assertFalse(node2.isTry());
1280:       assertFalse(node2.isReturn());
1281:       assertFalse(node2.isLabel());
1282:       assertFalse(node2.isOr());
1283:       assertFalse(node2.isTypeOf());
1284:       assertFalse(node2.isGetElem());
1285:       assertFalse(node2.isLabelName());
1286:       assertFalse(node2.isSwitch());
1287:       assertFalse(node2.isDelProp());
1288:       assertFalse(node2.isArrayLit());
1289:       assertFalse(node2.isAdd());
1290:       assertFalse(node2.isVar());
1291:       assertFalse(node2.isDefaultCase());
1292:       assertFalse(node2.isEmpty());
1293:       assertFalse(node2.isNew());
1294:       assertFalse(node2.isDo());
1295:       assertFalse(node2.isAssignAdd());
1296:       assertEquals(221214, node2.getSourcePosition());
1297:       assertNotSame(node0, node1);
1298:       assertSame(node0, node2);
1299:       assertNotSame(node1, node2);
1300:       assertNotSame(node1, node0);
1301:       assertSame(node2, node0);
1302:       assertNotSame(node2, node1);
1303:       assertFalse(node0.equals((Object)node1));
1304:       assertFalse(node1.equals((Object)node0));
1305:       assertFalse(node2.equals((Object)node1));
1306:       assertNotNull(node2);
1307:       
1308:       // Undeclared exception!
1309:       try { 
1310:         node0.addChildrenAfter(node1, node1);
1311:         fail("Expecting exception: IllegalArgumentException");
1312:       
1313:       } catch(IllegalArgumentException e) {
1314:          //
1315:          // no message in exception (getMessage() returned null)
1316:          //
1317:          verifyException("com.google.common.base.Preconditions", e);
1318:       }
1319:   }
1320: }
RegularFileObject[/tmp/EvoSuite_182_1628161971281/com/google/javascript/rhino/Node_182_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:12:51 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_182_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_182_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.common.collect.RegularImmutableSet",
109:       "com.google.javascript.rhino.jstype.ModificationVisitor",
110:       "com.google.javascript.rhino.jstype.PropertyMap$1",
111:       "com.google.common.collect.AbstractMapEntry",
112:       "com.google.javascript.rhino.Node$AncestorIterable$1",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.common.collect.SingletonImmutableSet",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.EmptyImmutableSet",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
227:       "com.google.common.collect.ImmutableList",
228:       "com.google.common.collect.SingletonImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
230:       "com.google.javascript.rhino.jstype.StringType",
231:       "com.google.javascript.rhino.Node$AbstractPropListItem",
232:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
233:       "com.google.javascript.rhino.jstype.TemplatizedType",
234:       "com.google.javascript.rhino.jstype.Visitor",
235:       "com.google.javascript.rhino.jstype.NoResolvedType",
236:       "com.google.javascript.rhino.jstype.JSTypeNative",
237:       "com.google.javascript.rhino.jstype.AllType",
238:       "com.google.common.collect.Maps",
239:       "com.google.common.collect.SetMultimap",
240:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
241:       "com.google.common.collect.Maps$EntryTransformer",
242:       "com.google.javascript.rhino.JSTypeExpression",
243:       "com.google.common.collect.Iterators$MergingIterator"
244:     );
245:   } 
246: 
247:   private static void resetClasses() {
248:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_182_tmp__ESTest_scaffolding.class.getClassLoader()); 
249: 
250:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
251:       "com.google.javascript.rhino.Node",
252:       "com.google.javascript.rhino.Node$NumberNode",
253:       "com.google.javascript.rhino.Node$StringNode",
254:       "com.google.javascript.rhino.Node$AbstractPropListItem",
255:       "com.google.javascript.rhino.Node$ObjectPropListItem",
256:       "com.google.javascript.rhino.Node$IntPropListItem",
257:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
258:       "com.google.javascript.rhino.Node$AncestorIterable",
259:       "com.google.javascript.rhino.Node$NodeMismatch",
260:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
261:       "com.google.javascript.rhino.Node$SideEffectFlags",
262:       "com.google.javascript.rhino.Token",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Preconditions",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.SimpleErrorReporter",
336:       "com.google.common.base.Objects",
337:       "com.google.common.collect.AbstractIndexedListIterator",
338:       "com.google.common.collect.ImmutableList$1",
339:       "com.google.javascript.rhino.JSDocInfo",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.common.collect.Platform",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
347:       "com.google.javascript.rhino.InputId",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.Iterables",
350:       "com.google.javascript.rhino.Node$AncestorIterable$1",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.javascript.rhino.jstype.NamedType",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.AbstractMultimap$Values",
361:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
362:       "com.google.common.collect.AbstractMapBasedMultimap$1",
363:       "com.google.common.collect.Multimaps$Entries",
364:       "com.google.common.collect.AbstractMultimap$Entries",
365:       "com.google.common.collect.AbstractMapBasedMultimap$2",
366:       "com.google.javascript.rhino.jstype.JSType$TypePair",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
368:       "com.google.javascript.rhino.jstype.TernaryValue"
369:     );
370:   }
371: }

[MASTER] 11:12:51.437 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("index");
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertNotNull(node0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertNotNull(node_FileLevelJsDocBuilder0);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

Set<String> set0 = node0.getDirectives();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertNull(set0);

boolean boolean1 = node0.isFromExterns();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);

node0.setCharno((-564));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());

boolean boolean2 = node0.isCatch();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(boolean2);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);

Iterable<Node> iterable0 = node0.children();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

boolean boolean3 = node0.getBooleanProp((-1128));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(boolean3);
assertFalse(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);

boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
assertFalse(boolean4);
assertTrue(boolean4 == boolean1);
assertFalse(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);

Node node1 = Node.newString(154, "index", 54, 30);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertTrue(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(54, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertEquals(30, node1.getCharno());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertEquals(154, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertEquals(221214, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);

Node node2 = node0.copyInformationFromForTree(node1);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(221214, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(30, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals(54, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertTrue(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(54, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertEquals(30, node1.getCharno());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertEquals(154, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertEquals(221214, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNot());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isAnd());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertEquals(40, node2.getType());
assertFalse(node2.isThrow());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertEquals(54, node2.getLineno());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertEquals(30, node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isFor());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertEquals(221214, node2.getSourcePosition());
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);

node0.addChildrenAfter(node1, node1);

[MASTER] 11:12:53.064 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_197_1628161972920/com/google/javascript/rhino/Node_197_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_197_1628161972920/com/google/javascript/rhino/Node_197_tmp__ESTest_scaffolding.java]]
[MASTER] 11:12:53.064 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:53.064 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:53.066 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 765
[MASTER] 11:12:53.067 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_197_1628161972920/com/google/javascript/rhino/Node_197_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:12:52 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_197_tmp__ESTest extends Node_197_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newString("index");
25:       assertEquals(4095, Node.COLUMN_MASK);
26:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
27:       assertEquals(55, Node.INFERRED_FUNCTION);
28:       assertEquals(39, Node.EMPTY_BLOCK);
29:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
30:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
31:       assertEquals(57, Node.REFLECTED_OBJECT);
32:       assertEquals(53, Node.INPUT_ID);
33:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
34:       assertEquals(52, Node.LENGTH);
35:       assertEquals(29, Node.JSDOC_INFO_PROP);
36:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
37:       assertEquals(56, Node.CHANGE_TIME);
38:       assertEquals(36, Node.QUOTED_PROP);
39:       assertEquals(37, Node.OPT_ARG_NAME);
40:       assertEquals(8, Node.FLAG_NO_THROWS);
41:       assertEquals(48, Node.DIRECTIVES);
42:       assertEquals(49, Node.DIRECT_EVAL);
43:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
44:       assertEquals(51, Node.STATIC_SOURCE_FILE);
45:       assertEquals(12, Node.COLUMN_BITS);
46:       assertEquals(32, Node.INCRDECR_PROP);
47:       assertEquals(1, Node.DECR_FLAG);
48:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
49:       assertEquals(15, Node.NO_SIDE_EFFECTS);
50:       assertEquals(57, Node.LAST_PROP);
51:       assertEquals(47, Node.IS_DISPATCHER);
52:       assertEquals(2, Node.POST_FLAG);
53:       assertEquals(30, Node.VAR_ARGS_NAME);
54:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
55:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
56:       assertEquals(40, Node.ORIGINALNAME_PROP);
57:       assertEquals(43, Node.IS_CONSTANT_NAME);
58:       assertEquals(50, Node.FREE_CALL);
59:       assertEquals(46, Node.IS_NAMESPACE);
60:       assertEquals(54, Node.SLASH_V);
61:       assertFalse(node0.isGetProp());
62:       assertFalse(node0.isComma());
63:       assertFalse(node0.isThis());
64:       assertFalse(node0.isAnd());
65:       assertFalse(node0.isFalse());
66:       assertFalse(node0.isWith());
67:       assertFalse(node0.isBreak());
68:       assertFalse(node0.isInstanceOf());
69:       assertFalse(node0.isExprResult());
70:       assertFalse(node0.isThrow());
71:       assertFalse(node0.isIn());
72:       assertFalse(node0.isInc());
73:       assertFalse(node0.isOr());
74:       assertFalse(node0.isTypeOf());
75:       assertFalse(node0.hasChildren());
76:       assertEquals((-1), node0.getSourcePosition());
77:       assertFalse(node0.isDec());
78:       assertFalse(node0.isReturn());
79:       assertFalse(node0.isContinue());
80:       assertFalse(node0.isAssign());
81:       assertFalse(node0.isDelProp());
82:       assertFalse(node0.isCast());
83:       assertFalse(node0.isGetElem());
84:       assertFalse(node0.isDebugger());
85:       assertFalse(node0.isWhile());
86:       assertFalse(node0.isObjectLit());
87:       assertFalse(node0.isNot());
88:       assertFalse(node0.isParamList());
89:       assertEquals(0, node0.getChildCount());
90:       assertFalse(node0.isNull());
91:       assertFalse(node0.isCatch());
92:       assertFalse(node0.isStringKey());
93:       assertFalse(node0.isName());
94:       assertFalse(node0.isCall());
95:       assertFalse(node0.isVoid());
96:       assertFalse(node0.isNew());
97:       assertFalse(node0.isFunction());
98:       assertFalse(node0.isDefaultCase());
99:       assertFalse(node0.isVar());
100:       assertFalse(node0.isTrue());
101:       assertEquals(40, node0.getType());
102:       assertFalse(node0.isDo());
103:       assertFalse(node0.isAdd());
104:       assertFalse(node0.isEmpty());
105:       assertFalse(node0.isSetterDef());
106:       assertFalse(node0.isAssignAdd());
107:       assertFalse(node0.isNumber());
108:       assertFalse(node0.isGetterDef());
109:       assertFalse(node0.isIf());
110:       assertFalse(node0.isLabel());
111:       assertFalse(node0.isNE());
112:       assertFalse(node0.isFor());
113:       assertFalse(node0.hasMoreThanOneChild());
114:       assertFalse(node0.isLabelName());
115:       assertEquals((-1), node0.getLineno());
116:       assertFalse(node0.isArrayLit());
117:       assertEquals((-1), node0.getCharno());
118:       assertFalse(node0.isSwitch());
119:       assertFalse(node0.isTry());
120:       assertFalse(node0.isRegExp());
121:       assertTrue(node0.isString());
122:       assertFalse(node0.isHook());
123:       assertFalse(node0.isBlock());
124:       assertFalse(node0.isCase());
125:       assertFalse(node0.hasOneChild());
126:       assertFalse(node0.isScript());
127:       assertNotNull(node0);
128:       
129:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
130:       assertNotNull(fileSystemHandling0);
131:       
132:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
133:       assertEquals(4095, Node.COLUMN_MASK);
134:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
135:       assertEquals(55, Node.INFERRED_FUNCTION);
136:       assertEquals(39, Node.EMPTY_BLOCK);
137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
138:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
139:       assertEquals(57, Node.REFLECTED_OBJECT);
140:       assertEquals(53, Node.INPUT_ID);
141:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
142:       assertEquals(52, Node.LENGTH);
143:       assertEquals(29, Node.JSDOC_INFO_PROP);
144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
145:       assertEquals(56, Node.CHANGE_TIME);
146:       assertEquals(36, Node.QUOTED_PROP);
147:       assertEquals(37, Node.OPT_ARG_NAME);
148:       assertEquals(8, Node.FLAG_NO_THROWS);
149:       assertEquals(48, Node.DIRECTIVES);
150:       assertEquals(49, Node.DIRECT_EVAL);
151:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
152:       assertEquals(51, Node.STATIC_SOURCE_FILE);
153:       assertEquals(12, Node.COLUMN_BITS);
154:       assertEquals(32, Node.INCRDECR_PROP);
155:       assertEquals(1, Node.DECR_FLAG);
156:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
158:       assertEquals(57, Node.LAST_PROP);
159:       assertEquals(47, Node.IS_DISPATCHER);
160:       assertEquals(2, Node.POST_FLAG);
161:       assertEquals(30, Node.VAR_ARGS_NAME);
162:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
163:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
164:       assertEquals(40, Node.ORIGINALNAME_PROP);
165:       assertEquals(43, Node.IS_CONSTANT_NAME);
166:       assertEquals(50, Node.FREE_CALL);
167:       assertEquals(46, Node.IS_NAMESPACE);
168:       assertEquals(54, Node.SLASH_V);
169:       assertFalse(node0.isGetProp());
170:       assertFalse(node0.isComma());
171:       assertFalse(node0.isThis());
172:       assertFalse(node0.isAnd());
173:       assertFalse(node0.isFalse());
174:       assertFalse(node0.isWith());
175:       assertFalse(node0.isBreak());
176:       assertFalse(node0.isInstanceOf());
177:       assertFalse(node0.isExprResult());
178:       assertFalse(node0.isThrow());
179:       assertFalse(node0.isIn());
180:       assertFalse(node0.isInc());
181:       assertFalse(node0.isOr());
182:       assertFalse(node0.isTypeOf());
183:       assertFalse(node0.hasChildren());
184:       assertEquals((-1), node0.getSourcePosition());
185:       assertFalse(node0.isDec());
186:       assertFalse(node0.isReturn());
187:       assertFalse(node0.isContinue());
188:       assertFalse(node0.isAssign());
189:       assertFalse(node0.isDelProp());
190:       assertFalse(node0.isCast());
191:       assertFalse(node0.isGetElem());
192:       assertFalse(node0.isDebugger());
193:       assertFalse(node0.isWhile());
194:       assertFalse(node0.isObjectLit());
195:       assertFalse(node0.isNot());
196:       assertFalse(node0.isParamList());
197:       assertEquals(0, node0.getChildCount());
198:       assertFalse(node0.isNull());
199:       assertFalse(node0.isCatch());
200:       assertFalse(node0.isStringKey());
201:       assertFalse(node0.isName());
202:       assertFalse(node0.isCall());
203:       assertFalse(node0.isVoid());
204:       assertFalse(node0.isNew());
205:       assertFalse(node0.isFunction());
206:       assertFalse(node0.isDefaultCase());
207:       assertFalse(node0.isVar());
208:       assertFalse(node0.isTrue());
209:       assertEquals(40, node0.getType());
210:       assertFalse(node0.isDo());
211:       assertFalse(node0.isAdd());
212:       assertFalse(node0.isEmpty());
213:       assertFalse(node0.isSetterDef());
214:       assertFalse(node0.isAssignAdd());
215:       assertFalse(node0.isNumber());
216:       assertFalse(node0.isGetterDef());
217:       assertFalse(node0.isIf());
218:       assertFalse(node0.isLabel());
219:       assertFalse(node0.isNE());
220:       assertFalse(node0.isFor());
221:       assertFalse(node0.hasMoreThanOneChild());
222:       assertFalse(node0.isLabelName());
223:       assertEquals((-1), node0.getLineno());
224:       assertFalse(node0.isArrayLit());
225:       assertEquals((-1), node0.getCharno());
226:       assertFalse(node0.isSwitch());
227:       assertFalse(node0.isTry());
228:       assertFalse(node0.isRegExp());
229:       assertTrue(node0.isString());
230:       assertFalse(node0.isHook());
231:       assertFalse(node0.isBlock());
232:       assertFalse(node0.isCase());
233:       assertFalse(node0.hasOneChild());
234:       assertFalse(node0.isScript());
235:       assertNotNull(node_FileLevelJsDocBuilder0);
236:       
237:       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
238:       assertTrue(boolean0);
239:       
240:       Set<String> set0 = node0.getDirectives();
241:       assertEquals(4095, Node.COLUMN_MASK);
242:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
243:       assertEquals(55, Node.INFERRED_FUNCTION);
244:       assertEquals(39, Node.EMPTY_BLOCK);
245:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
246:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
247:       assertEquals(57, Node.REFLECTED_OBJECT);
248:       assertEquals(53, Node.INPUT_ID);
249:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
250:       assertEquals(52, Node.LENGTH);
251:       assertEquals(29, Node.JSDOC_INFO_PROP);
252:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
253:       assertEquals(56, Node.CHANGE_TIME);
254:       assertEquals(36, Node.QUOTED_PROP);
255:       assertEquals(37, Node.OPT_ARG_NAME);
256:       assertEquals(8, Node.FLAG_NO_THROWS);
257:       assertEquals(48, Node.DIRECTIVES);
258:       assertEquals(49, Node.DIRECT_EVAL);
259:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
260:       assertEquals(51, Node.STATIC_SOURCE_FILE);
261:       assertEquals(12, Node.COLUMN_BITS);
262:       assertEquals(32, Node.INCRDECR_PROP);
263:       assertEquals(1, Node.DECR_FLAG);
264:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
265:       assertEquals(15, Node.NO_SIDE_EFFECTS);
266:       assertEquals(57, Node.LAST_PROP);
267:       assertEquals(47, Node.IS_DISPATCHER);
268:       assertEquals(2, Node.POST_FLAG);
269:       assertEquals(30, Node.VAR_ARGS_NAME);
270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
271:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
272:       assertEquals(40, Node.ORIGINALNAME_PROP);
273:       assertEquals(43, Node.IS_CONSTANT_NAME);
274:       assertEquals(50, Node.FREE_CALL);
275:       assertEquals(46, Node.IS_NAMESPACE);
276:       assertEquals(54, Node.SLASH_V);
277:       assertFalse(node0.isGetProp());
278:       assertFalse(node0.isComma());
279:       assertFalse(node0.isThis());
280:       assertFalse(node0.isAnd());
281:       assertFalse(node0.isFalse());
282:       assertFalse(node0.isWith());
283:       assertFalse(node0.isBreak());
284:       assertFalse(node0.isInstanceOf());
285:       assertFalse(node0.isExprResult());
286:       assertFalse(node0.isThrow());
287:       assertFalse(node0.isIn());
288:       assertFalse(node0.isInc());
289:       assertFalse(node0.isOr());
290:       assertFalse(node0.isTypeOf());
291:       assertFalse(node0.hasChildren());
292:       assertEquals((-1), node0.getSourcePosition());
293:       assertFalse(node0.isDec());
294:       assertFalse(node0.isReturn());
295:       assertFalse(node0.isContinue());
296:       assertFalse(node0.isAssign());
297:       assertFalse(node0.isDelProp());
298:       assertFalse(node0.isCast());
299:       assertFalse(node0.isGetElem());
300:       assertFalse(node0.isDebugger());
301:       assertFalse(node0.isWhile());
302:       assertFalse(node0.isObjectLit());
303:       assertFalse(node0.isNot());
304:       assertFalse(node0.isParamList());
305:       assertEquals(0, node0.getChildCount());
306:       assertFalse(node0.isNull());
307:       assertFalse(node0.isCatch());
308:       assertFalse(node0.isStringKey());
309:       assertFalse(node0.isName());
310:       assertFalse(node0.isCall());
311:       assertFalse(node0.isVoid());
312:       assertFalse(node0.isNew());
313:       assertFalse(node0.isFunction());
314:       assertFalse(node0.isDefaultCase());
315:       assertFalse(node0.isVar());
316:       assertFalse(node0.isTrue());
317:       assertEquals(40, node0.getType());
318:       assertFalse(node0.isDo());
319:       assertFalse(node0.isAdd());
320:       assertFalse(node0.isEmpty());
321:       assertFalse(node0.isSetterDef());
322:       assertFalse(node0.isAssignAdd());
323:       assertFalse(node0.isNumber());
324:       assertFalse(node0.isGetterDef());
325:       assertFalse(node0.isIf());
326:       assertFalse(node0.isLabel());
327:       assertFalse(node0.isNE());
328:       assertFalse(node0.isFor());
329:       assertFalse(node0.hasMoreThanOneChild());
330:       assertFalse(node0.isLabelName());
331:       assertEquals((-1), node0.getLineno());
332:       assertFalse(node0.isArrayLit());
333:       assertEquals((-1), node0.getCharno());
334:       assertFalse(node0.isSwitch());
335:       assertFalse(node0.isTry());
336:       assertFalse(node0.isRegExp());
337:       assertTrue(node0.isString());
338:       assertFalse(node0.isHook());
339:       assertFalse(node0.isBlock());
340:       assertFalse(node0.isCase());
341:       assertFalse(node0.hasOneChild());
342:       assertFalse(node0.isScript());
343:       assertNull(set0);
344:       
345:       boolean boolean1 = node0.isFromExterns();
346:       assertEquals(4095, Node.COLUMN_MASK);
347:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
348:       assertEquals(55, Node.INFERRED_FUNCTION);
349:       assertEquals(39, Node.EMPTY_BLOCK);
350:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
351:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
352:       assertEquals(57, Node.REFLECTED_OBJECT);
353:       assertEquals(53, Node.INPUT_ID);
354:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
355:       assertEquals(52, Node.LENGTH);
356:       assertEquals(29, Node.JSDOC_INFO_PROP);
357:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
358:       assertEquals(56, Node.CHANGE_TIME);
359:       assertEquals(36, Node.QUOTED_PROP);
360:       assertEquals(37, Node.OPT_ARG_NAME);
361:       assertEquals(8, Node.FLAG_NO_THROWS);
362:       assertEquals(48, Node.DIRECTIVES);
363:       assertEquals(49, Node.DIRECT_EVAL);
364:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
365:       assertEquals(51, Node.STATIC_SOURCE_FILE);
366:       assertEquals(12, Node.COLUMN_BITS);
367:       assertEquals(32, Node.INCRDECR_PROP);
368:       assertEquals(1, Node.DECR_FLAG);
369:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
370:       assertEquals(15, Node.NO_SIDE_EFFECTS);
371:       assertEquals(57, Node.LAST_PROP);
372:       assertEquals(47, Node.IS_DISPATCHER);
373:       assertEquals(2, Node.POST_FLAG);
374:       assertEquals(30, Node.VAR_ARGS_NAME);
375:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
376:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
377:       assertEquals(40, Node.ORIGINALNAME_PROP);
378:       assertEquals(43, Node.IS_CONSTANT_NAME);
379:       assertEquals(50, Node.FREE_CALL);
380:       assertEquals(46, Node.IS_NAMESPACE);
381:       assertEquals(54, Node.SLASH_V);
382:       assertFalse(node0.isGetProp());
383:       assertFalse(node0.isComma());
384:       assertFalse(node0.isThis());
385:       assertFalse(node0.isAnd());
386:       assertFalse(node0.isFalse());
387:       assertFalse(node0.isWith());
388:       assertFalse(node0.isBreak());
389:       assertFalse(node0.isInstanceOf());
390:       assertFalse(node0.isExprResult());
391:       assertFalse(node0.isThrow());
392:       assertFalse(node0.isIn());
393:       assertFalse(node0.isInc());
394:       assertFalse(node0.isOr());
395:       assertFalse(node0.isTypeOf());
396:       assertFalse(node0.hasChildren());
397:       assertEquals((-1), node0.getSourcePosition());
398:       assertFalse(node0.isDec());
399:       assertFalse(node0.isReturn());
400:       assertFalse(node0.isContinue());
401:       assertFalse(node0.isAssign());
402:       assertFalse(node0.isDelProp());
403:       assertFalse(node0.isCast());
404:       assertFalse(node0.isGetElem());
405:       assertFalse(node0.isDebugger());
406:       assertFalse(node0.isWhile());
407:       assertFalse(node0.isObjectLit());
408:       assertFalse(node0.isNot());
409:       assertFalse(node0.isParamList());
410:       assertEquals(0, node0.getChildCount());
411:       assertFalse(node0.isNull());
412:       assertFalse(node0.isCatch());
413:       assertFalse(node0.isStringKey());
414:       assertFalse(node0.isName());
415:       assertFalse(node0.isCall());
416:       assertFalse(node0.isVoid());
417:       assertFalse(node0.isNew());
418:       assertFalse(node0.isFunction());
419:       assertFalse(node0.isDefaultCase());
420:       assertFalse(node0.isVar());
421:       assertFalse(node0.isTrue());
422:       assertEquals(40, node0.getType());
423:       assertFalse(node0.isDo());
424:       assertFalse(node0.isAdd());
425:       assertFalse(node0.isEmpty());
426:       assertFalse(node0.isSetterDef());
427:       assertFalse(node0.isAssignAdd());
428:       assertFalse(node0.isNumber());
429:       assertFalse(node0.isGetterDef());
430:       assertFalse(node0.isIf());
431:       assertFalse(node0.isLabel());
432:       assertFalse(node0.isNE());
433:       assertFalse(node0.isFor());
434:       assertFalse(node0.hasMoreThanOneChild());
435:       assertFalse(node0.isLabelName());
436:       assertEquals((-1), node0.getLineno());
437:       assertFalse(node0.isArrayLit());
438:       assertEquals((-1), node0.getCharno());
439:       assertFalse(node0.isSwitch());
440:       assertFalse(node0.isTry());
441:       assertFalse(node0.isRegExp());
442:       assertTrue(node0.isString());
443:       assertFalse(node0.isHook());
444:       assertFalse(node0.isBlock());
445:       assertFalse(node0.isCase());
446:       assertFalse(node0.hasOneChild());
447:       assertFalse(node0.isScript());
448:       assertFalse(boolean1);
449:       assertFalse(boolean1 == boolean0);
450:       
451:       node0.setCharno((-564));
452:       assertEquals(4095, Node.COLUMN_MASK);
453:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
454:       assertEquals(55, Node.INFERRED_FUNCTION);
455:       assertEquals(39, Node.EMPTY_BLOCK);
456:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
457:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
458:       assertEquals(57, Node.REFLECTED_OBJECT);
459:       assertEquals(53, Node.INPUT_ID);
460:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
461:       assertEquals(52, Node.LENGTH);
462:       assertEquals(29, Node.JSDOC_INFO_PROP);
463:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
464:       assertEquals(56, Node.CHANGE_TIME);
465:       assertEquals(36, Node.QUOTED_PROP);
466:       assertEquals(37, Node.OPT_ARG_NAME);
467:       assertEquals(8, Node.FLAG_NO_THROWS);
468:       assertEquals(48, Node.DIRECTIVES);
469:       assertEquals(49, Node.DIRECT_EVAL);
470:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
471:       assertEquals(51, Node.STATIC_SOURCE_FILE);
472:       assertEquals(12, Node.COLUMN_BITS);
473:       assertEquals(32, Node.INCRDECR_PROP);
474:       assertEquals(1, Node.DECR_FLAG);
475:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
476:       assertEquals(15, Node.NO_SIDE_EFFECTS);
477:       assertEquals(57, Node.LAST_PROP);
478:       assertEquals(47, Node.IS_DISPATCHER);
479:       assertEquals(2, Node.POST_FLAG);
480:       assertEquals(30, Node.VAR_ARGS_NAME);
481:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
482:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
483:       assertEquals(40, Node.ORIGINALNAME_PROP);
484:       assertEquals(43, Node.IS_CONSTANT_NAME);
485:       assertEquals(50, Node.FREE_CALL);
486:       assertEquals(46, Node.IS_NAMESPACE);
487:       assertEquals(54, Node.SLASH_V);
488:       assertFalse(node0.isGetProp());
489:       assertFalse(node0.isComma());
490:       assertFalse(node0.isThis());
491:       assertFalse(node0.isAnd());
492:       assertFalse(node0.isFalse());
493:       assertFalse(node0.isWith());
494:       assertFalse(node0.isBreak());
495:       assertFalse(node0.isInstanceOf());
496:       assertFalse(node0.isExprResult());
497:       assertFalse(node0.isThrow());
498:       assertFalse(node0.isIn());
499:       assertFalse(node0.isInc());
500:       assertFalse(node0.isOr());
501:       assertFalse(node0.isTypeOf());
502:       assertFalse(node0.hasChildren());
503:       assertEquals((-1), node0.getSourcePosition());
504:       assertFalse(node0.isDec());
505:       assertFalse(node0.isReturn());
506:       assertFalse(node0.isContinue());
507:       assertFalse(node0.isAssign());
508:       assertFalse(node0.isDelProp());
509:       assertFalse(node0.isCast());
510:       assertFalse(node0.isGetElem());
511:       assertFalse(node0.isDebugger());
512:       assertFalse(node0.isWhile());
513:       assertFalse(node0.isObjectLit());
514:       assertFalse(node0.isNot());
515:       assertFalse(node0.isParamList());
516:       assertEquals(0, node0.getChildCount());
517:       assertFalse(node0.isNull());
518:       assertFalse(node0.isCatch());
519:       assertFalse(node0.isStringKey());
520:       assertFalse(node0.isName());
521:       assertFalse(node0.isCall());
522:       assertFalse(node0.isVoid());
523:       assertFalse(node0.isNew());
524:       assertFalse(node0.isFunction());
525:       assertFalse(node0.isDefaultCase());
526:       assertFalse(node0.isVar());
527:       assertFalse(node0.isTrue());
528:       assertEquals(40, node0.getType());
529:       assertFalse(node0.isDo());
530:       assertFalse(node0.isAdd());
531:       assertFalse(node0.isEmpty());
532:       assertFalse(node0.isSetterDef());
533:       assertFalse(node0.isAssignAdd());
534:       assertFalse(node0.isNumber());
535:       assertFalse(node0.isGetterDef());
536:       assertFalse(node0.isIf());
537:       assertFalse(node0.isLabel());
538:       assertFalse(node0.isNE());
539:       assertFalse(node0.isFor());
540:       assertFalse(node0.hasMoreThanOneChild());
541:       assertFalse(node0.isLabelName());
542:       assertEquals((-1), node0.getLineno());
543:       assertFalse(node0.isArrayLit());
544:       assertEquals((-1), node0.getCharno());
545:       assertFalse(node0.isSwitch());
546:       assertFalse(node0.isTry());
547:       assertFalse(node0.isRegExp());
548:       assertTrue(node0.isString());
549:       assertFalse(node0.isHook());
550:       assertFalse(node0.isBlock());
551:       assertFalse(node0.isCase());
552:       assertFalse(node0.hasOneChild());
553:       assertFalse(node0.isScript());
554:       
555:       boolean boolean2 = node0.isCatch();
556:       assertEquals(4095, Node.COLUMN_MASK);
557:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
558:       assertEquals(55, Node.INFERRED_FUNCTION);
559:       assertEquals(39, Node.EMPTY_BLOCK);
560:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
561:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
562:       assertEquals(57, Node.REFLECTED_OBJECT);
563:       assertEquals(53, Node.INPUT_ID);
564:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
565:       assertEquals(52, Node.LENGTH);
566:       assertEquals(29, Node.JSDOC_INFO_PROP);
567:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
568:       assertEquals(56, Node.CHANGE_TIME);
569:       assertEquals(36, Node.QUOTED_PROP);
570:       assertEquals(37, Node.OPT_ARG_NAME);
571:       assertEquals(8, Node.FLAG_NO_THROWS);
572:       assertEquals(48, Node.DIRECTIVES);
573:       assertEquals(49, Node.DIRECT_EVAL);
574:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
575:       assertEquals(51, Node.STATIC_SOURCE_FILE);
576:       assertEquals(12, Node.COLUMN_BITS);
577:       assertEquals(32, Node.INCRDECR_PROP);
578:       assertEquals(1, Node.DECR_FLAG);
579:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
580:       assertEquals(15, Node.NO_SIDE_EFFECTS);
581:       assertEquals(57, Node.LAST_PROP);
582:       assertEquals(47, Node.IS_DISPATCHER);
583:       assertEquals(2, Node.POST_FLAG);
584:       assertEquals(30, Node.VAR_ARGS_NAME);
585:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
586:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
587:       assertEquals(40, Node.ORIGINALNAME_PROP);
588:       assertEquals(43, Node.IS_CONSTANT_NAME);
589:       assertEquals(50, Node.FREE_CALL);
590:       assertEquals(46, Node.IS_NAMESPACE);
591:       assertEquals(54, Node.SLASH_V);
592:       assertFalse(node0.isGetProp());
593:       assertFalse(node0.isComma());
594:       assertFalse(node0.isThis());
595:       assertFalse(node0.isAnd());
596:       assertFalse(node0.isFalse());
597:       assertFalse(node0.isWith());
598:       assertFalse(node0.isBreak());
599:       assertFalse(node0.isInstanceOf());
600:       assertFalse(node0.isExprResult());
601:       assertFalse(node0.isThrow());
602:       assertFalse(node0.isIn());
603:       assertFalse(node0.isInc());
604:       assertFalse(node0.isOr());
605:       assertFalse(node0.isTypeOf());
606:       assertFalse(node0.hasChildren());
607:       assertEquals((-1), node0.getSourcePosition());
608:       assertFalse(node0.isDec());
609:       assertFalse(node0.isReturn());
610:       assertFalse(node0.isContinue());
611:       assertFalse(node0.isAssign());
612:       assertFalse(node0.isDelProp());
613:       assertFalse(node0.isCast());
614:       assertFalse(node0.isGetElem());
615:       assertFalse(node0.isDebugger());
616:       assertFalse(node0.isWhile());
617:       assertFalse(node0.isObjectLit());
618:       assertFalse(node0.isNot());
619:       assertFalse(node0.isParamList());
620:       assertEquals(0, node0.getChildCount());
621:       assertFalse(node0.isNull());
622:       assertFalse(node0.isCatch());
623:       assertFalse(node0.isStringKey());
624:       assertFalse(node0.isName());
625:       assertFalse(node0.isCall());
626:       assertFalse(node0.isVoid());
627:       assertFalse(node0.isNew());
628:       assertFalse(node0.isFunction());
629:       assertFalse(node0.isDefaultCase());
630:       assertFalse(node0.isVar());
631:       assertFalse(node0.isTrue());
632:       assertEquals(40, node0.getType());
633:       assertFalse(node0.isDo());
634:       assertFalse(node0.isAdd());
635:       assertFalse(node0.isEmpty());
636:       assertFalse(node0.isSetterDef());
637:       assertFalse(node0.isAssignAdd());
638:       assertFalse(node0.isNumber());
639:       assertFalse(node0.isGetterDef());
640:       assertFalse(node0.isIf());
641:       assertFalse(node0.isLabel());
642:       assertFalse(node0.isNE());
643:       assertFalse(node0.isFor());
644:       assertFalse(node0.hasMoreThanOneChild());
645:       assertFalse(node0.isLabelName());
646:       assertEquals((-1), node0.getLineno());
647:       assertFalse(node0.isArrayLit());
648:       assertEquals((-1), node0.getCharno());
649:       assertFalse(node0.isSwitch());
650:       assertFalse(node0.isTry());
651:       assertFalse(node0.isRegExp());
652:       assertTrue(node0.isString());
653:       assertFalse(node0.isHook());
654:       assertFalse(node0.isBlock());
655:       assertFalse(node0.isCase());
656:       assertFalse(node0.hasOneChild());
657:       assertFalse(node0.isScript());
658:       assertFalse(boolean2);
659:       assertTrue(boolean2 == boolean1);
660:       assertFalse(boolean2 == boolean0);
661:       
662:       Iterable<Node> iterable0 = node0.children();
663:       assertEquals(4095, Node.COLUMN_MASK);
664:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
665:       assertEquals(55, Node.INFERRED_FUNCTION);
666:       assertEquals(39, Node.EMPTY_BLOCK);
667:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
668:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
669:       assertEquals(57, Node.REFLECTED_OBJECT);
670:       assertEquals(53, Node.INPUT_ID);
671:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
672:       assertEquals(52, Node.LENGTH);
673:       assertEquals(29, Node.JSDOC_INFO_PROP);
674:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
675:       assertEquals(56, Node.CHANGE_TIME);
676:       assertEquals(36, Node.QUOTED_PROP);
677:       assertEquals(37, Node.OPT_ARG_NAME);
678:       assertEquals(8, Node.FLAG_NO_THROWS);
679:       assertEquals(48, Node.DIRECTIVES);
680:       assertEquals(49, Node.DIRECT_EVAL);
681:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
682:       assertEquals(51, Node.STATIC_SOURCE_FILE);
683:       assertEquals(12, Node.COLUMN_BITS);
684:       assertEquals(32, Node.INCRDECR_PROP);
685:       assertEquals(1, Node.DECR_FLAG);
686:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
687:       assertEquals(15, Node.NO_SIDE_EFFECTS);
688:       assertEquals(57, Node.LAST_PROP);
689:       assertEquals(47, Node.IS_DISPATCHER);
690:       assertEquals(2, Node.POST_FLAG);
691:       assertEquals(30, Node.VAR_ARGS_NAME);
692:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
693:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
694:       assertEquals(40, Node.ORIGINALNAME_PROP);
695:       assertEquals(43, Node.IS_CONSTANT_NAME);
696:       assertEquals(50, Node.FREE_CALL);
697:       assertEquals(46, Node.IS_NAMESPACE);
698:       assertEquals(54, Node.SLASH_V);
699:       assertFalse(node0.isGetProp());
700:       assertFalse(node0.isComma());
701:       assertFalse(node0.isThis());
702:       assertFalse(node0.isAnd());
703:       assertFalse(node0.isFalse());
704:       assertFalse(node0.isWith());
705:       assertFalse(node0.isBreak());
706:       assertFalse(node0.isInstanceOf());
707:       assertFalse(node0.isExprResult());
708:       assertFalse(node0.isThrow());
709:       assertFalse(node0.isIn());
710:       assertFalse(node0.isInc());
711:       assertFalse(node0.isOr());
712:       assertFalse(node0.isTypeOf());
713:       assertFalse(node0.hasChildren());
714:       assertEquals((-1), node0.getSourcePosition());
715:       assertFalse(node0.isDec());
716:       assertFalse(node0.isReturn());
717:       assertFalse(node0.isContinue());
718:       assertFalse(node0.isAssign());
719:       assertFalse(node0.isDelProp());
720:       assertFalse(node0.isCast());
721:       assertFalse(node0.isGetElem());
722:       assertFalse(node0.isDebugger());
723:       assertFalse(node0.isWhile());
724:       assertFalse(node0.isObjectLit());
725:       assertFalse(node0.isNot());
726:       assertFalse(node0.isParamList());
727:       assertEquals(0, node0.getChildCount());
728:       assertFalse(node0.isNull());
729:       assertFalse(node0.isCatch());
730:       assertFalse(node0.isStringKey());
731:       assertFalse(node0.isName());
732:       assertFalse(node0.isCall());
733:       assertFalse(node0.isVoid());
734:       assertFalse(node0.isNew());
735:       assertFalse(node0.isFunction());
736:       assertFalse(node0.isDefaultCase());
737:       assertFalse(node0.isVar());
738:       assertFalse(node0.isTrue());
739:       assertEquals(40, node0.getType());
740:       assertFalse(node0.isDo());
741:       assertFalse(node0.isAdd());
742:       assertFalse(node0.isEmpty());
743:       assertFalse(node0.isSetterDef());
744:       assertFalse(node0.isAssignAdd());
745:       assertFalse(node0.isNumber());
746:       assertFalse(node0.isGetterDef());
747:       assertFalse(node0.isIf());
748:       assertFalse(node0.isLabel());
749:       assertFalse(node0.isNE());
750:       assertFalse(node0.isFor());
751:       assertFalse(node0.hasMoreThanOneChild());
752:       assertFalse(node0.isLabelName());
753:       assertEquals((-1), node0.getLineno());
754:       assertFalse(node0.isArrayLit());
755:       assertEquals((-1), node0.getCharno());
756:       assertFalse(node0.isSwitch());
757:       assertFalse(node0.isTry());
758:       assertFalse(node0.isRegExp());
759:       assertTrue(node0.isString());
760:       assertFalse(node0.isHook());
761:       assertFalse(node0.isBlock());
762:       assertFalse(node0.isCase());
763:       assertFalse(node0.hasOneChild());
764:       assertFalse(node0.isScript());
765:       assertFalse(iterable0.contains(node0));
766:       assertNotNull(iterable0);
767:       
768:       boolean boolean3 = node0.getBooleanProp((-1128));
769:       assertEquals(4095, Node.COLUMN_MASK);
770:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
771:       assertEquals(55, Node.INFERRED_FUNCTION);
772:       assertEquals(39, Node.EMPTY_BLOCK);
773:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
774:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
775:       assertEquals(57, Node.REFLECTED_OBJECT);
776:       assertEquals(53, Node.INPUT_ID);
777:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
778:       assertEquals(52, Node.LENGTH);
779:       assertEquals(29, Node.JSDOC_INFO_PROP);
780:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
781:       assertEquals(56, Node.CHANGE_TIME);
782:       assertEquals(36, Node.QUOTED_PROP);
783:       assertEquals(37, Node.OPT_ARG_NAME);
784:       assertEquals(8, Node.FLAG_NO_THROWS);
785:       assertEquals(48, Node.DIRECTIVES);
786:       assertEquals(49, Node.DIRECT_EVAL);
787:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
788:       assertEquals(51, Node.STATIC_SOURCE_FILE);
789:       assertEquals(12, Node.COLUMN_BITS);
790:       assertEquals(32, Node.INCRDECR_PROP);
791:       assertEquals(1, Node.DECR_FLAG);
792:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
793:       assertEquals(15, Node.NO_SIDE_EFFECTS);
794:       assertEquals(57, Node.LAST_PROP);
795:       assertEquals(47, Node.IS_DISPATCHER);
796:       assertEquals(2, Node.POST_FLAG);
797:       assertEquals(30, Node.VAR_ARGS_NAME);
798:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
799:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
800:       assertEquals(40, Node.ORIGINALNAME_PROP);
801:       assertEquals(43, Node.IS_CONSTANT_NAME);
802:       assertEquals(50, Node.FREE_CALL);
803:       assertEquals(46, Node.IS_NAMESPACE);
804:       assertEquals(54, Node.SLASH_V);
805:       assertFalse(node0.isGetProp());
806:       assertFalse(node0.isComma());
807:       assertFalse(node0.isThis());
808:       assertFalse(node0.isAnd());
809:       assertFalse(node0.isFalse());
810:       assertFalse(node0.isWith());
811:       assertFalse(node0.isBreak());
812:       assertFalse(node0.isInstanceOf());
813:       assertFalse(node0.isExprResult());
814:       assertFalse(node0.isThrow());
815:       assertFalse(node0.isIn());
816:       assertFalse(node0.isInc());
817:       assertFalse(node0.isOr());
818:       assertFalse(node0.isTypeOf());
819:       assertFalse(node0.hasChildren());
820:       assertEquals((-1), node0.getSourcePosition());
821:       assertFalse(node0.isDec());
822:       assertFalse(node0.isReturn());
823:       assertFalse(node0.isContinue());
824:       assertFalse(node0.isAssign());
825:       assertFalse(node0.isDelProp());
826:       assertFalse(node0.isCast());
827:       assertFalse(node0.isGetElem());
828:       assertFalse(node0.isDebugger());
829:       assertFalse(node0.isWhile());
830:       assertFalse(node0.isObjectLit());
831:       assertFalse(node0.isNot());
832:       assertFalse(node0.isParamList());
833:       assertEquals(0, node0.getChildCount());
834:       assertFalse(node0.isNull());
835:       assertFalse(node0.isCatch());
836:       assertFalse(node0.isStringKey());
837:       assertFalse(node0.isName());
838:       assertFalse(node0.isCall());
839:       assertFalse(node0.isVoid());
840:       assertFalse(node0.isNew());
841:       assertFalse(node0.isFunction());
842:       assertFalse(node0.isDefaultCase());
843:       assertFalse(node0.isVar());
844:       assertFalse(node0.isTrue());
845:       assertEquals(40, node0.getType());
846:       assertFalse(node0.isDo());
847:       assertFalse(node0.isAdd());
848:       assertFalse(node0.isEmpty());
849:       assertFalse(node0.isSetterDef());
850:       assertFalse(node0.isAssignAdd());
851:       assertFalse(node0.isNumber());
852:       assertFalse(node0.isGetterDef());
853:       assertFalse(node0.isIf());
854:       assertFalse(node0.isLabel());
855:       assertFalse(node0.isNE());
856:       assertFalse(node0.isFor());
857:       assertFalse(node0.hasMoreThanOneChild());
858:       assertFalse(node0.isLabelName());
859:       assertEquals((-1), node0.getLineno());
860:       assertFalse(node0.isArrayLit());
861:       assertEquals((-1), node0.getCharno());
862:       assertFalse(node0.isSwitch());
863:       assertFalse(node0.isTry());
864:       assertFalse(node0.isRegExp());
865:       assertTrue(node0.isString());
866:       assertFalse(node0.isHook());
867:       assertFalse(node0.isBlock());
868:       assertFalse(node0.isCase());
869:       assertFalse(node0.hasOneChild());
870:       assertFalse(node0.isScript());
871:       assertFalse(boolean3);
872:       assertFalse(boolean3 == boolean0);
873:       assertTrue(boolean3 == boolean2);
874:       assertTrue(boolean3 == boolean1);
875:       
876:       boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
877:       assertFalse(boolean4);
878:       assertTrue(boolean4 == boolean3);
879:       assertTrue(boolean4 == boolean2);
880:       assertFalse(boolean4 == boolean0);
881:       assertTrue(boolean4 == boolean1);
882:       
883:       Node node1 = Node.newString(154, "index", 54, 30);
884:       assertEquals(40, Node.ORIGINALNAME_PROP);
885:       assertEquals(57, Node.REFLECTED_OBJECT);
886:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
887:       assertEquals(50, Node.FREE_CALL);
888:       assertEquals(52, Node.LENGTH);
889:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
890:       assertEquals(8, Node.FLAG_NO_THROWS);
891:       assertEquals(48, Node.DIRECTIVES);
892:       assertEquals(49, Node.DIRECT_EVAL);
893:       assertEquals(54, Node.SLASH_V);
894:       assertEquals(12, Node.COLUMN_BITS);
895:       assertEquals(4095, Node.COLUMN_MASK);
896:       assertEquals(32, Node.INCRDECR_PROP);
897:       assertEquals(51, Node.STATIC_SOURCE_FILE);
898:       assertEquals(1, Node.DECR_FLAG);
899:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
900:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
901:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
902:       assertEquals(29, Node.JSDOC_INFO_PROP);
903:       assertEquals(53, Node.INPUT_ID);
904:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
905:       assertEquals(37, Node.OPT_ARG_NAME);
906:       assertEquals(36, Node.QUOTED_PROP);
907:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
908:       assertEquals(46, Node.IS_NAMESPACE);
909:       assertEquals(43, Node.IS_CONSTANT_NAME);
910:       assertEquals(56, Node.CHANGE_TIME);
911:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
912:       assertEquals(55, Node.INFERRED_FUNCTION);
913:       assertEquals(2, Node.POST_FLAG);
914:       assertEquals(15, Node.NO_SIDE_EFFECTS);
915:       assertEquals(39, Node.EMPTY_BLOCK);
916:       assertEquals(47, Node.IS_DISPATCHER);
917:       assertEquals(30, Node.VAR_ARGS_NAME);
918:       assertEquals(57, Node.LAST_PROP);
919:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
920:       assertFalse(node1.isNew());
921:       assertEquals(30, node1.getCharno());
922:       assertFalse(node1.isWhile());
923:       assertFalse(node1.isVar());
924:       assertFalse(node1.isBlock());
925:       assertFalse(node1.isDo());
926:       assertFalse(node1.isSetterDef());
927:       assertFalse(node1.isAdd());
928:       assertFalse(node1.isOr());
929:       assertFalse(node1.isTypeOf());
930:       assertFalse(node1.isDec());
931:       assertFalse(node1.hasChildren());
932:       assertFalse(node1.isReturn());
933:       assertFalse(node1.isNull());
934:       assertFalse(node1.isGetElem());
935:       assertFalse(node1.hasMoreThanOneChild());
936:       assertFalse(node1.isAssign());
937:       assertFalse(node1.isName());
938:       assertFalse(node1.isCatch());
939:       assertFalse(node1.isCall());
940:       assertFalse(node1.isVoid());
941:       assertFalse(node1.isTry());
942:       assertFalse(node1.isRegExp());
943:       assertFalse(node1.isDefaultCase());
944:       assertFalse(node1.isTrue());
945:       assertFalse(node1.isGetterDef());
946:       assertFalse(node1.isNumber());
947:       assertFalse(node1.hasOneChild());
948:       assertFalse(node1.isEmpty());
949:       assertFalse(node1.isScript());
950:       assertFalse(node1.isLabel());
951:       assertFalse(node1.isAssignAdd());
952:       assertFalse(node1.isParamList());
953:       assertEquals(0, node1.getChildCount());
954:       assertEquals(154, node1.getType());
955:       assertFalse(node1.isLabelName());
956:       assertFalse(node1.isArrayLit());
957:       assertFalse(node1.isSwitch());
958:       assertFalse(node1.isHook());
959:       assertFalse(node1.isThrow());
960:       assertFalse(node1.isCase());
961:       assertEquals(221214, node1.getSourcePosition());
962:       assertFalse(node1.isIn());
963:       assertFalse(node1.isString());
964:       assertFalse(node1.isInc());
965:       assertFalse(node1.isGetProp());
966:       assertFalse(node1.isComma());
967:       assertFalse(node1.isIf());
968:       assertFalse(node1.isNE());
969:       assertFalse(node1.isThis());
970:       assertFalse(node1.isFor());
971:       assertFalse(node1.isWith());
972:       assertFalse(node1.isDelProp());
973:       assertFalse(node1.isInstanceOf());
974:       assertFalse(node1.isBreak());
975:       assertFalse(node1.isExprResult());
976:       assertFalse(node1.isDebugger());
977:       assertFalse(node1.isFunction());
978:       assertFalse(node1.isObjectLit());
979:       assertFalse(node1.isNot());
980:       assertEquals(54, node1.getLineno());
981:       assertTrue(node1.isStringKey());
982:       assertFalse(node1.isFalse());
983:       assertFalse(node1.isContinue());
984:       assertFalse(node1.isAnd());
985:       assertFalse(node1.isCast());
986:       assertNotSame(node1, node0);
987:       assertFalse(node1.equals((Object)node0));
988:       assertNotNull(node1);
989:       
990:       boolean boolean5 = node1.isOptionalArg();
991:       assertEquals(40, Node.ORIGINALNAME_PROP);
992:       assertEquals(57, Node.REFLECTED_OBJECT);
993:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
994:       assertEquals(50, Node.FREE_CALL);
995:       assertEquals(52, Node.LENGTH);
996:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
997:       assertEquals(8, Node.FLAG_NO_THROWS);
998:       assertEquals(48, Node.DIRECTIVES);
999:       assertEquals(49, Node.DIRECT_EVAL);
1000:       assertEquals(54, Node.SLASH_V);
1001:       assertEquals(12, Node.COLUMN_BITS);
1002:       assertEquals(4095, Node.COLUMN_MASK);
1003:       assertEquals(32, Node.INCRDECR_PROP);
1004:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1005:       assertEquals(1, Node.DECR_FLAG);
1006:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1007:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1008:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1009:       assertEquals(29, Node.JSDOC_INFO_PROP);
1010:       assertEquals(53, Node.INPUT_ID);
1011:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1012:       assertEquals(37, Node.OPT_ARG_NAME);
1013:       assertEquals(36, Node.QUOTED_PROP);
1014:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1015:       assertEquals(46, Node.IS_NAMESPACE);
1016:       assertEquals(43, Node.IS_CONSTANT_NAME);
1017:       assertEquals(56, Node.CHANGE_TIME);
1018:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1019:       assertEquals(55, Node.INFERRED_FUNCTION);
1020:       assertEquals(2, Node.POST_FLAG);
1021:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1022:       assertEquals(39, Node.EMPTY_BLOCK);
1023:       assertEquals(47, Node.IS_DISPATCHER);
1024:       assertEquals(30, Node.VAR_ARGS_NAME);
1025:       assertEquals(57, Node.LAST_PROP);
1026:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1027:       assertFalse(node1.isNew());
1028:       assertEquals(30, node1.getCharno());
1029:       assertFalse(node1.isWhile());
1030:       assertFalse(node1.isVar());
1031:       assertFalse(node1.isBlock());
1032:       assertFalse(node1.isDo());
1033:       assertFalse(node1.isSetterDef());
1034:       assertFalse(node1.isAdd());
1035:       assertFalse(node1.isOr());
1036:       assertFalse(node1.isTypeOf());
1037:       assertFalse(node1.isDec());
1038:       assertFalse(node1.hasChildren());
1039:       assertFalse(node1.isReturn());
1040:       assertFalse(node1.isNull());
1041:       assertFalse(node1.isGetElem());
1042:       assertFalse(node1.hasMoreThanOneChild());
1043:       assertFalse(node1.isAssign());
1044:       assertFalse(node1.isName());
1045:       assertFalse(node1.isCatch());
1046:       assertFalse(node1.isCall());
1047:       assertFalse(node1.isVoid());
1048:       assertFalse(node1.isTry());
1049:       assertFalse(node1.isRegExp());
1050:       assertFalse(node1.isDefaultCase());
1051:       assertFalse(node1.isTrue());
1052:       assertFalse(node1.isGetterDef());
1053:       assertFalse(node1.isNumber());
1054:       assertFalse(node1.hasOneChild());
1055:       assertFalse(node1.isEmpty());
1056:       assertFalse(node1.isScript());
1057:       assertFalse(node1.isLabel());
1058:       assertFalse(node1.isAssignAdd());
1059:       assertFalse(node1.isParamList());
1060:       assertEquals(0, node1.getChildCount());
1061:       assertEquals(154, node1.getType());
1062:       assertFalse(node1.isLabelName());
1063:       assertFalse(node1.isArrayLit());
1064:       assertFalse(node1.isSwitch());
1065:       assertFalse(node1.isHook());
1066:       assertFalse(node1.isThrow());
1067:       assertFalse(node1.isCase());
1068:       assertEquals(221214, node1.getSourcePosition());
1069:       assertFalse(node1.isIn());
1070:       assertFalse(node1.isString());
1071:       assertFalse(node1.isInc());
1072:       assertFalse(node1.isGetProp());
1073:       assertFalse(node1.isComma());
1074:       assertFalse(node1.isIf());
1075:       assertFalse(node1.isNE());
1076:       assertFalse(node1.isThis());
1077:       assertFalse(node1.isFor());
1078:       assertFalse(node1.isWith());
1079:       assertFalse(node1.isDelProp());
1080:       assertFalse(node1.isInstanceOf());
1081:       assertFalse(node1.isBreak());
1082:       assertFalse(node1.isExprResult());
1083:       assertFalse(node1.isDebugger());
1084:       assertFalse(node1.isFunction());
1085:       assertFalse(node1.isObjectLit());
1086:       assertFalse(node1.isNot());
1087:       assertEquals(54, node1.getLineno());
1088:       assertTrue(node1.isStringKey());
1089:       assertFalse(node1.isFalse());
1090:       assertFalse(node1.isContinue());
1091:       assertFalse(node1.isAnd());
1092:       assertFalse(node1.isCast());
1093:       assertFalse(boolean5);
1094:       assertNotSame(node1, node0);
1095:       assertFalse(node1.equals((Object)node0));
1096:       assertFalse(boolean5 == boolean0);
1097:       assertTrue(boolean5 == boolean4);
1098:       assertTrue(boolean5 == boolean3);
1099:       assertTrue(boolean5 == boolean1);
1100:       assertTrue(boolean5 == boolean2);
1101:       
1102:       Node node2 = node0.copyInformationFromForTree(node1);
1103:       assertEquals(4095, Node.COLUMN_MASK);
1104:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1105:       assertEquals(55, Node.INFERRED_FUNCTION);
1106:       assertEquals(39, Node.EMPTY_BLOCK);
1107:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1108:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1109:       assertEquals(57, Node.REFLECTED_OBJECT);
1110:       assertEquals(53, Node.INPUT_ID);
1111:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1112:       assertEquals(52, Node.LENGTH);
1113:       assertEquals(29, Node.JSDOC_INFO_PROP);
1114:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1115:       assertEquals(56, Node.CHANGE_TIME);
1116:       assertEquals(36, Node.QUOTED_PROP);
1117:       assertEquals(37, Node.OPT_ARG_NAME);
1118:       assertEquals(8, Node.FLAG_NO_THROWS);
1119:       assertEquals(48, Node.DIRECTIVES);
1120:       assertEquals(49, Node.DIRECT_EVAL);
1121:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1122:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1123:       assertEquals(12, Node.COLUMN_BITS);
1124:       assertEquals(32, Node.INCRDECR_PROP);
1125:       assertEquals(1, Node.DECR_FLAG);
1126:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1127:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1128:       assertEquals(57, Node.LAST_PROP);
1129:       assertEquals(47, Node.IS_DISPATCHER);
1130:       assertEquals(2, Node.POST_FLAG);
1131:       assertEquals(30, Node.VAR_ARGS_NAME);
1132:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1133:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1134:       assertEquals(40, Node.ORIGINALNAME_PROP);
1135:       assertEquals(43, Node.IS_CONSTANT_NAME);
1136:       assertEquals(50, Node.FREE_CALL);
1137:       assertEquals(46, Node.IS_NAMESPACE);
1138:       assertEquals(54, Node.SLASH_V);
1139:       assertEquals(40, Node.ORIGINALNAME_PROP);
1140:       assertEquals(57, Node.REFLECTED_OBJECT);
1141:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1142:       assertEquals(50, Node.FREE_CALL);
1143:       assertEquals(52, Node.LENGTH);
1144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1145:       assertEquals(8, Node.FLAG_NO_THROWS);
1146:       assertEquals(48, Node.DIRECTIVES);
1147:       assertEquals(49, Node.DIRECT_EVAL);
1148:       assertEquals(54, Node.SLASH_V);
1149:       assertEquals(12, Node.COLUMN_BITS);
1150:       assertEquals(4095, Node.COLUMN_MASK);
1151:       assertEquals(32, Node.INCRDECR_PROP);
1152:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1153:       assertEquals(1, Node.DECR_FLAG);
1154:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1155:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1156:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1157:       assertEquals(29, Node.JSDOC_INFO_PROP);
1158:       assertEquals(53, Node.INPUT_ID);
1159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1160:       assertEquals(37, Node.OPT_ARG_NAME);
1161:       assertEquals(36, Node.QUOTED_PROP);
1162:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1163:       assertEquals(46, Node.IS_NAMESPACE);
1164:       assertEquals(43, Node.IS_CONSTANT_NAME);
1165:       assertEquals(56, Node.CHANGE_TIME);
1166:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1167:       assertEquals(55, Node.INFERRED_FUNCTION);
1168:       assertEquals(2, Node.POST_FLAG);
1169:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1170:       assertEquals(39, Node.EMPTY_BLOCK);
1171:       assertEquals(47, Node.IS_DISPATCHER);
1172:       assertEquals(30, Node.VAR_ARGS_NAME);
1173:       assertEquals(57, Node.LAST_PROP);
1174:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1175:       assertEquals(2, Node.POST_FLAG);
1176:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1177:       assertEquals(37, Node.OPT_ARG_NAME);
1178:       assertEquals(56, Node.CHANGE_TIME);
1179:       assertEquals(47, Node.IS_DISPATCHER);
1180:       assertEquals(12, Node.COLUMN_BITS);
1181:       assertEquals(32, Node.INCRDECR_PROP);
1182:       assertEquals(46, Node.IS_NAMESPACE);
1183:       assertEquals(49, Node.DIRECT_EVAL);
1184:       assertEquals(30, Node.VAR_ARGS_NAME);
1185:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1186:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1187:       assertEquals(54, Node.SLASH_V);
1188:       assertEquals(43, Node.IS_CONSTANT_NAME);
1189:       assertEquals(1, Node.DECR_FLAG);
1190:       assertEquals(50, Node.FREE_CALL);
1191:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1192:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1193:       assertEquals(48, Node.DIRECTIVES);
1194:       assertEquals(39, Node.EMPTY_BLOCK);
1195:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1196:       assertEquals(40, Node.ORIGINALNAME_PROP);
1197:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1198:       assertEquals(4095, Node.COLUMN_MASK);
1199:       assertEquals(53, Node.INPUT_ID);
1200:       assertEquals(36, Node.QUOTED_PROP);
1201:       assertEquals(57, Node.LAST_PROP);
1202:       assertEquals(57, Node.REFLECTED_OBJECT);
1203:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1204:       assertEquals(29, Node.JSDOC_INFO_PROP);
1205:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1206:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1207:       assertEquals(55, Node.INFERRED_FUNCTION);
1208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1209:       assertEquals(52, Node.LENGTH);
1210:       assertEquals(8, Node.FLAG_NO_THROWS);
1211:       assertFalse(node0.isGetProp());
1212:       assertFalse(node0.isComma());
1213:       assertFalse(node0.isThis());
1214:       assertFalse(node0.isAnd());
1215:       assertFalse(node0.isFalse());
1216:       assertFalse(node0.isWith());
1217:       assertFalse(node0.isBreak());
1218:       assertFalse(node0.isInstanceOf());
1219:       assertFalse(node0.isExprResult());
1220:       assertFalse(node0.isThrow());
1221:       assertEquals(221214, node0.getSourcePosition());
1222:       assertFalse(node0.isIn());
1223:       assertFalse(node0.isInc());
1224:       assertFalse(node0.isOr());
1225:       assertFalse(node0.isTypeOf());
1226:       assertFalse(node0.hasChildren());
1227:       assertFalse(node0.isDec());
1228:       assertFalse(node0.isReturn());
1229:       assertFalse(node0.isContinue());
1230:       assertFalse(node0.isAssign());
1231:       assertFalse(node0.isDelProp());
1232:       assertFalse(node0.isCast());
1233:       assertFalse(node0.isGetElem());
1234:       assertFalse(node0.isDebugger());
1235:       assertEquals(30, node0.getCharno());
1236:       assertEquals(54, node0.getLineno());
1237:       assertFalse(node0.isWhile());
1238:       assertFalse(node0.isObjectLit());
1239:       assertFalse(node0.isNot());
1240:       assertFalse(node0.isParamList());
1241:       assertEquals(0, node0.getChildCount());
1242:       assertFalse(node0.isNull());
1243:       assertFalse(node0.isCatch());
1244:       assertFalse(node0.isStringKey());
1245:       assertFalse(node0.isName());
1246:       assertFalse(node0.isCall());
1247:       assertFalse(node0.isVoid());
1248:       assertFalse(node0.isNew());
1249:       assertFalse(node0.isFunction());
1250:       assertFalse(node0.isDefaultCase());
1251:       assertFalse(node0.isVar());
1252:       assertFalse(node0.isTrue());
1253:       assertEquals(40, node0.getType());
1254:       assertFalse(node0.isDo());
1255:       assertFalse(node0.isAdd());
1256:       assertFalse(node0.isEmpty());
1257:       assertFalse(node0.isSetterDef());
1258:       assertFalse(node0.isAssignAdd());
1259:       assertFalse(node0.isNumber());
1260:       assertFalse(node0.isGetterDef());
1261:       assertFalse(node0.isIf());
1262:       assertFalse(node0.isLabel());
1263:       assertFalse(node0.isNE());
1264:       assertFalse(node0.isFor());
1265:       assertFalse(node0.hasMoreThanOneChild());
1266:       assertFalse(node0.isLabelName());
1267:       assertFalse(node0.isArrayLit());
1268:       assertFalse(node0.isSwitch());
1269:       assertFalse(node0.isTry());
1270:       assertFalse(node0.isRegExp());
1271:       assertTrue(node0.isString());
1272:       assertFalse(node0.isHook());
1273:       assertFalse(node0.isBlock());
1274:       assertFalse(node0.isCase());
1275:       assertFalse(node0.hasOneChild());
1276:       assertFalse(node0.isScript());
1277:       assertFalse(node1.isNew());
1278:       assertEquals(30, node1.getCharno());
1279:       assertFalse(node1.isWhile());
1280:       assertFalse(node1.isVar());
1281:       assertFalse(node1.isBlock());
1282:       assertFalse(node1.isDo());
1283:       assertFalse(node1.isSetterDef());
1284:       assertFalse(node1.isAdd());
1285:       assertFalse(node1.isOr());
1286:       assertFalse(node1.isTypeOf());
1287:       assertFalse(node1.isDec());
1288:       assertFalse(node1.hasChildren());
1289:       assertFalse(node1.isReturn());
1290:       assertFalse(node1.isNull());
1291:       assertFalse(node1.isGetElem());
1292:       assertFalse(node1.hasMoreThanOneChild());
1293:       assertFalse(node1.isAssign());
1294:       assertFalse(node1.isName());
1295:       assertFalse(node1.isCatch());
1296:       assertFalse(node1.isCall());
1297:       assertFalse(node1.isVoid());
1298:       assertFalse(node1.isTry());
1299:       assertFalse(node1.isRegExp());
1300:       assertFalse(node1.isDefaultCase());
1301:       assertFalse(node1.isTrue());
1302:       assertFalse(node1.isGetterDef());
1303:       assertFalse(node1.isNumber());
1304:       assertFalse(node1.hasOneChild());
1305:       assertFalse(node1.isEmpty());
1306:       assertFalse(node1.isScript());
1307:       assertFalse(node1.isLabel());
1308:       assertFalse(node1.isAssignAdd());
1309:       assertFalse(node1.isParamList());
1310:       assertEquals(0, node1.getChildCount());
1311:       assertEquals(154, node1.getType());
1312:       assertFalse(node1.isLabelName());
1313:       assertFalse(node1.isArrayLit());
1314:       assertFalse(node1.isSwitch());
1315:       assertFalse(node1.isHook());
1316:       assertFalse(node1.isThrow());
1317:       assertFalse(node1.isCase());
1318:       assertEquals(221214, node1.getSourcePosition());
1319:       assertFalse(node1.isIn());
1320:       assertFalse(node1.isString());
1321:       assertFalse(node1.isInc());
1322:       assertFalse(node1.isGetProp());
1323:       assertFalse(node1.isComma());
1324:       assertFalse(node1.isIf());
1325:       assertFalse(node1.isNE());
1326:       assertFalse(node1.isThis());
1327:       assertFalse(node1.isFor());
1328:       assertFalse(node1.isWith());
1329:       assertFalse(node1.isDelProp());
1330:       assertFalse(node1.isInstanceOf());
1331:       assertFalse(node1.isBreak());
1332:       assertFalse(node1.isExprResult());
1333:       assertFalse(node1.isDebugger());
1334:       assertFalse(node1.isFunction());
1335:       assertFalse(node1.isObjectLit());
1336:       assertFalse(node1.isNot());
1337:       assertEquals(54, node1.getLineno());
1338:       assertTrue(node1.isStringKey());
1339:       assertFalse(node1.isFalse());
1340:       assertFalse(node1.isContinue());
1341:       assertFalse(node1.isAnd());
1342:       assertFalse(node1.isCast());
1343:       assertFalse(node2.hasChildren());
1344:       assertFalse(node2.isNumber());
1345:       assertFalse(node2.isTypeOf());
1346:       assertFalse(node2.isLabelName());
1347:       assertFalse(node2.isAssign());
1348:       assertFalse(node2.isDec());
1349:       assertFalse(node2.isGetElem());
1350:       assertFalse(node2.isCast());
1351:       assertFalse(node2.isOr());
1352:       assertFalse(node2.isWhile());
1353:       assertFalse(node2.isWith());
1354:       assertFalse(node2.isNot());
1355:       assertFalse(node2.isObjectLit());
1356:       assertFalse(node2.isExprResult());
1357:       assertFalse(node2.hasMoreThanOneChild());
1358:       assertFalse(node2.isInstanceOf());
1359:       assertFalse(node2.isScript());
1360:       assertFalse(node2.isReturn());
1361:       assertTrue(node2.isString());
1362:       assertFalse(node2.hasOneChild());
1363:       assertFalse(node2.isComma());
1364:       assertFalse(node2.isThis());
1365:       assertFalse(node2.isBlock());
1366:       assertFalse(node2.isBreak());
1367:       assertFalse(node2.isName());
1368:       assertFalse(node2.isCall());
1369:       assertFalse(node2.isParamList());
1370:       assertFalse(node2.isSwitch());
1371:       assertFalse(node2.isNull());
1372:       assertFalse(node2.isStringKey());
1373:       assertFalse(node2.isDefaultCase());
1374:       assertFalse(node2.isDo());
1375:       assertFalse(node2.isAdd());
1376:       assertFalse(node2.isLabel());
1377:       assertFalse(node2.isAssignAdd());
1378:       assertFalse(node2.isNew());
1379:       assertEquals(221214, node2.getSourcePosition());
1380:       assertEquals(0, node2.getChildCount());
1381:       assertFalse(node2.isVar());
1382:       assertFalse(node2.isDelProp());
1383:       assertFalse(node2.isIf());
1384:       assertFalse(node2.isGetterDef());
1385:       assertFalse(node2.isEmpty());
1386:       assertFalse(node2.isIn());
1387:       assertFalse(node2.isArrayLit());
1388:       assertFalse(node2.isVoid());
1389:       assertFalse(node2.isDebugger());
1390:       assertFalse(node2.isTrue());
1391:       assertFalse(node2.isNE());
1392:       assertFalse(node2.isRegExp());
1393:       assertFalse(node2.isCase());
1394:       assertEquals(54, node2.getLineno());
1395:       assertFalse(node2.isCatch());
1396:       assertFalse(node2.isTry());
1397:       assertFalse(node2.isHook());
1398:       assertFalse(node2.isFor());
1399:       assertFalse(node2.isFalse());
1400:       assertFalse(node2.isGetProp());
1401:       assertFalse(node2.isSetterDef());
1402:       assertEquals(30, node2.getCharno());
1403:       assertFalse(node2.isAnd());
1404:       assertFalse(node2.isFunction());
1405:       assertFalse(node2.isInc());
1406:       assertFalse(node2.isContinue());
1407:       assertEquals(40, node2.getType());
1408:       assertFalse(node2.isThrow());
1409:       assertNotSame(node0, node1);
1410:       assertSame(node0, node2);
1411:       assertNotSame(node1, node0);
1412:       assertNotSame(node1, node2);
1413:       assertNotSame(node2, node1);
1414:       assertSame(node2, node0);
1415:       assertFalse(node0.equals((Object)node1));
1416:       assertFalse(node1.equals((Object)node0));
1417:       assertFalse(node2.equals((Object)node1));
1418:       assertNotNull(node2);
1419:       
1420:       // Undeclared exception!
1421:       try { 
1422:         node0.addChildrenAfter(node1, node1);
1423:         fail("Expecting exception: IllegalArgumentException");
1424:       
1425:       } catch(IllegalArgumentException e) {
1426:          //
1427:          // no message in exception (getMessage() returned null)
1428:          //
1429:          verifyException("com.google.common.base.Preconditions", e);
1430:       }
1431:   }
1432: }
RegularFileObject[/tmp/EvoSuite_197_1628161972920/com/google/javascript/rhino/Node_197_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:12:53 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_197_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_197_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.common.collect.RegularImmutableSet",
109:       "com.google.javascript.rhino.jstype.ModificationVisitor",
110:       "com.google.javascript.rhino.jstype.PropertyMap$1",
111:       "com.google.common.collect.AbstractMapEntry",
112:       "com.google.javascript.rhino.Node$AncestorIterable$1",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.common.collect.SingletonImmutableSet",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.EmptyImmutableSet",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
227:       "com.google.common.collect.ImmutableList",
228:       "com.google.common.collect.SingletonImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
230:       "com.google.javascript.rhino.jstype.StringType",
231:       "com.google.javascript.rhino.Node$AbstractPropListItem",
232:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
233:       "com.google.javascript.rhino.jstype.TemplatizedType",
234:       "com.google.javascript.rhino.jstype.Visitor",
235:       "com.google.javascript.rhino.jstype.NoResolvedType",
236:       "com.google.javascript.rhino.jstype.JSTypeNative",
237:       "com.google.javascript.rhino.jstype.AllType",
238:       "com.google.common.collect.Maps",
239:       "com.google.common.collect.SetMultimap",
240:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
241:       "com.google.common.collect.Maps$EntryTransformer",
242:       "com.google.javascript.rhino.JSTypeExpression",
243:       "com.google.common.collect.Iterators$MergingIterator"
244:     );
245:   } 
246: 
247:   private static void resetClasses() {
248:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_197_tmp__ESTest_scaffolding.class.getClassLoader()); 
249: 
250:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
251:       "com.google.javascript.rhino.Node",
252:       "com.google.javascript.rhino.Node$NumberNode",
253:       "com.google.javascript.rhino.Node$StringNode",
254:       "com.google.javascript.rhino.Node$AbstractPropListItem",
255:       "com.google.javascript.rhino.Node$ObjectPropListItem",
256:       "com.google.javascript.rhino.Node$IntPropListItem",
257:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
258:       "com.google.javascript.rhino.Node$AncestorIterable",
259:       "com.google.javascript.rhino.Node$NodeMismatch",
260:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
261:       "com.google.javascript.rhino.Node$SideEffectFlags",
262:       "com.google.javascript.rhino.Token",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Preconditions",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.SimpleErrorReporter",
336:       "com.google.common.base.Objects",
337:       "com.google.common.collect.AbstractIndexedListIterator",
338:       "com.google.common.collect.ImmutableList$1",
339:       "com.google.javascript.rhino.JSDocInfo",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.common.collect.Platform",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
347:       "com.google.javascript.rhino.InputId",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.Iterables",
350:       "com.google.javascript.rhino.Node$AncestorIterable$1",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.javascript.rhino.jstype.NamedType",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.AbstractMultimap$Values",
361:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
362:       "com.google.common.collect.AbstractMapBasedMultimap$1",
363:       "com.google.common.collect.Multimaps$Entries",
364:       "com.google.common.collect.AbstractMultimap$Entries",
365:       "com.google.common.collect.AbstractMapBasedMultimap$2",
366:       "com.google.javascript.rhino.jstype.JSType$TypePair",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
368:       "com.google.javascript.rhino.jstype.TernaryValue"
369:     );
370:   }
371: }

[MASTER] 11:12:53.113 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("index");
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertNotNull(node0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertNotNull(node_FileLevelJsDocBuilder0);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

Set<String> set0 = node0.getDirectives();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertNull(set0);

boolean boolean1 = node0.isFromExterns();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);

node0.setCharno((-564));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());

boolean boolean2 = node0.isCatch();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(boolean2);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);

Iterable<Node> iterable0 = node0.children();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

boolean boolean3 = node0.getBooleanProp((-1128));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(boolean3);
assertFalse(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);

boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
assertFalse(boolean4);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);

Node node1 = Node.newString(154, "index", 54, 30);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node1.isNew());
assertEquals(30, node1.getCharno());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertEquals(154, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertEquals(221214, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isDelProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(54, node1.getLineno());
assertTrue(node1.isStringKey());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);

boolean boolean5 = node1.isOptionalArg();
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node1.isNew());
assertEquals(30, node1.getCharno());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertEquals(154, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertEquals(221214, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isDelProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(54, node1.getLineno());
assertTrue(node1.isStringKey());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(boolean5);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);

Node node2 = node0.copyInformationFromForTree(node1);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertEquals(221214, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDebugger());
assertEquals(30, node0.getCharno());
assertEquals(54, node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node1.isNew());
assertEquals(30, node1.getCharno());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertEquals(154, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertEquals(221214, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isDelProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(54, node1.getLineno());
assertTrue(node1.isStringKey());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isOr());
assertFalse(node2.isWhile());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isReturn());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertEquals(221214, node2.getSourcePosition());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertEquals(54, node2.getLineno());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertEquals(30, node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertFalse(node2.isThrow());
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);

node0.addChildrenAfter(node1, node1);

[MASTER] 11:13:04.583 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_274_1628161984418/com/google/javascript/rhino/Node_274_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_274_1628161984418/com/google/javascript/rhino/Node_274_tmp__ESTest_scaffolding.java]]
[MASTER] 11:13:04.583 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:13:04.583 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:13:04.584 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 654
[MASTER] 11:13:04.585 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_274_1628161984418/com/google/javascript/rhino/Node_274_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:13:04 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.Node;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_274_tmp__ESTest extends Node_274_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = new Node(114, 114, 114);
24:       assertEquals(57, Node.LAST_PROP);
25:       assertEquals(30, Node.VAR_ARGS_NAME);
26:       assertEquals(54, Node.SLASH_V);
27:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
28:       assertEquals(51, Node.STATIC_SOURCE_FILE);
29:       assertEquals(12, Node.COLUMN_BITS);
30:       assertEquals(32, Node.INCRDECR_PROP);
31:       assertEquals(52, Node.LENGTH);
32:       assertEquals(1, Node.DECR_FLAG);
33:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
34:       assertEquals(15, Node.NO_SIDE_EFFECTS);
35:       assertEquals(2, Node.POST_FLAG);
36:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
37:       assertEquals(50, Node.FREE_CALL);
38:       assertEquals(47, Node.IS_DISPATCHER);
39:       assertEquals(46, Node.IS_NAMESPACE);
40:       assertEquals(40, Node.ORIGINALNAME_PROP);
41:       assertEquals(43, Node.IS_CONSTANT_NAME);
42:       assertEquals(36, Node.QUOTED_PROP);
43:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
44:       assertEquals(55, Node.INFERRED_FUNCTION);
45:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
46:       assertEquals(53, Node.INPUT_ID);
47:       assertEquals(29, Node.JSDOC_INFO_PROP);
48:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
49:       assertEquals(39, Node.EMPTY_BLOCK);
50:       assertEquals(56, Node.CHANGE_TIME);
51:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
52:       assertEquals(8, Node.FLAG_NO_THROWS);
53:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
54:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
55:       assertEquals(4095, Node.COLUMN_MASK);
56:       assertEquals(57, Node.REFLECTED_OBJECT);
57:       assertEquals(48, Node.DIRECTIVES);
58:       assertEquals(49, Node.DIRECT_EVAL);
59:       assertEquals(37, Node.OPT_ARG_NAME);
60:       assertFalse(node0.isString());
61:       assertFalse(node0.isCase());
62:       assertTrue(node0.isDo());
63:       assertEquals(114, node0.getCharno());
64:       assertFalse(node0.isHook());
65:       assertFalse(node0.isFalse());
66:       assertFalse(node0.isFor());
67:       assertFalse(node0.isArrayLit());
68:       assertFalse(node0.isTry());
69:       assertFalse(node0.isGetProp());
70:       assertFalse(node0.isDebugger());
71:       assertFalse(node0.isSwitch());
72:       assertFalse(node0.isGetterDef());
73:       assertFalse(node0.isObjectLit());
74:       assertFalse(node0.isDefaultCase());
75:       assertFalse(node0.isExprResult());
76:       assertEquals(0, node0.getChildCount());
77:       assertFalse(node0.isComma());
78:       assertFalse(node0.isName());
79:       assertFalse(node0.isCall());
80:       assertFalse(node0.isGetElem());
81:       assertFalse(node0.isVar());
82:       assertFalse(node0.isEmpty());
83:       assertFalse(node0.isBreak());
84:       assertFalse(node0.isDelProp());
85:       assertFalse(node0.isNew());
86:       assertFalse(node0.isVoid());
87:       assertFalse(node0.isTrue());
88:       assertFalse(node0.isAdd());
89:       assertFalse(node0.isNull());
90:       assertFalse(node0.isOr());
91:       assertFalse(node0.isContinue());
92:       assertFalse(node0.hasMoreThanOneChild());
93:       assertFalse(node0.isWhile());
94:       assertEquals(467058, node0.getSourcePosition());
95:       assertFalse(node0.isBlock());
96:       assertFalse(node0.isAssignAdd());
97:       assertFalse(node0.hasChildren());
98:       assertFalse(node0.isReturn());
99:       assertFalse(node0.isTypeOf());
100:       assertFalse(node0.isLabel());
101:       assertFalse(node0.isAssign());
102:       assertFalse(node0.isDec());
103:       assertFalse(node0.isCast());
104:       assertFalse(node0.isStringKey());
105:       assertFalse(node0.isLabelName());
106:       assertFalse(node0.hasOneChild());
107:       assertEquals(114, node0.getLineno());
108:       assertFalse(node0.isScript());
109:       assertFalse(node0.isParamList());
110:       assertFalse(node0.isNumber());
111:       assertFalse(node0.isNot());
112:       assertFalse(node0.isAnd());
113:       assertFalse(node0.isCatch());
114:       assertFalse(node0.isInstanceOf());
115:       assertFalse(node0.isFunction());
116:       assertFalse(node0.isThis());
117:       assertFalse(node0.isWith());
118:       assertFalse(node0.isRegExp());
119:       assertFalse(node0.isThrow());
120:       assertFalse(node0.isIf());
121:       assertFalse(node0.isInc());
122:       assertFalse(node0.isSetterDef());
123:       assertFalse(node0.isNE());
124:       assertEquals(114, node0.getType());
125:       assertFalse(node0.isIn());
126:       assertNotNull(node0);
127:       
128:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
129:       assertNotNull(fileSystemHandling0);
130:       
131:       Set<String> set0 = node0.getDirectives();
132:       assertEquals(57, Node.LAST_PROP);
133:       assertEquals(30, Node.VAR_ARGS_NAME);
134:       assertEquals(54, Node.SLASH_V);
135:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
136:       assertEquals(51, Node.STATIC_SOURCE_FILE);
137:       assertEquals(12, Node.COLUMN_BITS);
138:       assertEquals(32, Node.INCRDECR_PROP);
139:       assertEquals(52, Node.LENGTH);
140:       assertEquals(1, Node.DECR_FLAG);
141:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
142:       assertEquals(15, Node.NO_SIDE_EFFECTS);
143:       assertEquals(2, Node.POST_FLAG);
144:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
145:       assertEquals(50, Node.FREE_CALL);
146:       assertEquals(47, Node.IS_DISPATCHER);
147:       assertEquals(46, Node.IS_NAMESPACE);
148:       assertEquals(40, Node.ORIGINALNAME_PROP);
149:       assertEquals(43, Node.IS_CONSTANT_NAME);
150:       assertEquals(36, Node.QUOTED_PROP);
151:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
152:       assertEquals(55, Node.INFERRED_FUNCTION);
153:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
154:       assertEquals(53, Node.INPUT_ID);
155:       assertEquals(29, Node.JSDOC_INFO_PROP);
156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
157:       assertEquals(39, Node.EMPTY_BLOCK);
158:       assertEquals(56, Node.CHANGE_TIME);
159:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
160:       assertEquals(8, Node.FLAG_NO_THROWS);
161:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
162:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
163:       assertEquals(4095, Node.COLUMN_MASK);
164:       assertEquals(57, Node.REFLECTED_OBJECT);
165:       assertEquals(48, Node.DIRECTIVES);
166:       assertEquals(49, Node.DIRECT_EVAL);
167:       assertEquals(37, Node.OPT_ARG_NAME);
168:       assertFalse(node0.isString());
169:       assertFalse(node0.isCase());
170:       assertTrue(node0.isDo());
171:       assertEquals(114, node0.getCharno());
172:       assertFalse(node0.isHook());
173:       assertFalse(node0.isFalse());
174:       assertFalse(node0.isFor());
175:       assertFalse(node0.isArrayLit());
176:       assertFalse(node0.isTry());
177:       assertFalse(node0.isGetProp());
178:       assertFalse(node0.isDebugger());
179:       assertFalse(node0.isSwitch());
180:       assertFalse(node0.isGetterDef());
181:       assertFalse(node0.isObjectLit());
182:       assertFalse(node0.isDefaultCase());
183:       assertFalse(node0.isExprResult());
184:       assertEquals(0, node0.getChildCount());
185:       assertFalse(node0.isComma());
186:       assertFalse(node0.isName());
187:       assertFalse(node0.isCall());
188:       assertFalse(node0.isGetElem());
189:       assertFalse(node0.isVar());
190:       assertFalse(node0.isEmpty());
191:       assertFalse(node0.isBreak());
192:       assertFalse(node0.isDelProp());
193:       assertFalse(node0.isNew());
194:       assertFalse(node0.isVoid());
195:       assertFalse(node0.isTrue());
196:       assertFalse(node0.isAdd());
197:       assertFalse(node0.isNull());
198:       assertFalse(node0.isOr());
199:       assertFalse(node0.isContinue());
200:       assertFalse(node0.hasMoreThanOneChild());
201:       assertFalse(node0.isWhile());
202:       assertEquals(467058, node0.getSourcePosition());
203:       assertFalse(node0.isBlock());
204:       assertFalse(node0.isAssignAdd());
205:       assertFalse(node0.hasChildren());
206:       assertFalse(node0.isReturn());
207:       assertFalse(node0.isTypeOf());
208:       assertFalse(node0.isLabel());
209:       assertFalse(node0.isAssign());
210:       assertFalse(node0.isDec());
211:       assertFalse(node0.isCast());
212:       assertFalse(node0.isStringKey());
213:       assertFalse(node0.isLabelName());
214:       assertFalse(node0.hasOneChild());
215:       assertEquals(114, node0.getLineno());
216:       assertFalse(node0.isScript());
217:       assertFalse(node0.isParamList());
218:       assertFalse(node0.isNumber());
219:       assertFalse(node0.isNot());
220:       assertFalse(node0.isAnd());
221:       assertFalse(node0.isCatch());
222:       assertFalse(node0.isInstanceOf());
223:       assertFalse(node0.isFunction());
224:       assertFalse(node0.isThis());
225:       assertFalse(node0.isWith());
226:       assertFalse(node0.isRegExp());
227:       assertFalse(node0.isThrow());
228:       assertFalse(node0.isIf());
229:       assertFalse(node0.isInc());
230:       assertFalse(node0.isSetterDef());
231:       assertFalse(node0.isNE());
232:       assertEquals(114, node0.getType());
233:       assertFalse(node0.isIn());
234:       assertNull(set0);
235:       
236:       boolean boolean0 = node0.isFromExterns();
237:       assertEquals(57, Node.LAST_PROP);
238:       assertEquals(30, Node.VAR_ARGS_NAME);
239:       assertEquals(54, Node.SLASH_V);
240:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
241:       assertEquals(51, Node.STATIC_SOURCE_FILE);
242:       assertEquals(12, Node.COLUMN_BITS);
243:       assertEquals(32, Node.INCRDECR_PROP);
244:       assertEquals(52, Node.LENGTH);
245:       assertEquals(1, Node.DECR_FLAG);
246:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
247:       assertEquals(15, Node.NO_SIDE_EFFECTS);
248:       assertEquals(2, Node.POST_FLAG);
249:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
250:       assertEquals(50, Node.FREE_CALL);
251:       assertEquals(47, Node.IS_DISPATCHER);
252:       assertEquals(46, Node.IS_NAMESPACE);
253:       assertEquals(40, Node.ORIGINALNAME_PROP);
254:       assertEquals(43, Node.IS_CONSTANT_NAME);
255:       assertEquals(36, Node.QUOTED_PROP);
256:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
257:       assertEquals(55, Node.INFERRED_FUNCTION);
258:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
259:       assertEquals(53, Node.INPUT_ID);
260:       assertEquals(29, Node.JSDOC_INFO_PROP);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(39, Node.EMPTY_BLOCK);
263:       assertEquals(56, Node.CHANGE_TIME);
264:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
265:       assertEquals(8, Node.FLAG_NO_THROWS);
266:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
268:       assertEquals(4095, Node.COLUMN_MASK);
269:       assertEquals(57, Node.REFLECTED_OBJECT);
270:       assertEquals(48, Node.DIRECTIVES);
271:       assertEquals(49, Node.DIRECT_EVAL);
272:       assertEquals(37, Node.OPT_ARG_NAME);
273:       assertFalse(node0.isString());
274:       assertFalse(node0.isCase());
275:       assertTrue(node0.isDo());
276:       assertEquals(114, node0.getCharno());
277:       assertFalse(node0.isHook());
278:       assertFalse(node0.isFalse());
279:       assertFalse(node0.isFor());
280:       assertFalse(node0.isArrayLit());
281:       assertFalse(node0.isTry());
282:       assertFalse(node0.isGetProp());
283:       assertFalse(node0.isDebugger());
284:       assertFalse(node0.isSwitch());
285:       assertFalse(node0.isGetterDef());
286:       assertFalse(node0.isObjectLit());
287:       assertFalse(node0.isDefaultCase());
288:       assertFalse(node0.isExprResult());
289:       assertEquals(0, node0.getChildCount());
290:       assertFalse(node0.isComma());
291:       assertFalse(node0.isName());
292:       assertFalse(node0.isCall());
293:       assertFalse(node0.isGetElem());
294:       assertFalse(node0.isVar());
295:       assertFalse(node0.isEmpty());
296:       assertFalse(node0.isBreak());
297:       assertFalse(node0.isDelProp());
298:       assertFalse(node0.isNew());
299:       assertFalse(node0.isVoid());
300:       assertFalse(node0.isTrue());
301:       assertFalse(node0.isAdd());
302:       assertFalse(node0.isNull());
303:       assertFalse(node0.isOr());
304:       assertFalse(node0.isContinue());
305:       assertFalse(node0.hasMoreThanOneChild());
306:       assertFalse(node0.isWhile());
307:       assertEquals(467058, node0.getSourcePosition());
308:       assertFalse(node0.isBlock());
309:       assertFalse(node0.isAssignAdd());
310:       assertFalse(node0.hasChildren());
311:       assertFalse(node0.isReturn());
312:       assertFalse(node0.isTypeOf());
313:       assertFalse(node0.isLabel());
314:       assertFalse(node0.isAssign());
315:       assertFalse(node0.isDec());
316:       assertFalse(node0.isCast());
317:       assertFalse(node0.isStringKey());
318:       assertFalse(node0.isLabelName());
319:       assertFalse(node0.hasOneChild());
320:       assertEquals(114, node0.getLineno());
321:       assertFalse(node0.isScript());
322:       assertFalse(node0.isParamList());
323:       assertFalse(node0.isNumber());
324:       assertFalse(node0.isNot());
325:       assertFalse(node0.isAnd());
326:       assertFalse(node0.isCatch());
327:       assertFalse(node0.isInstanceOf());
328:       assertFalse(node0.isFunction());
329:       assertFalse(node0.isThis());
330:       assertFalse(node0.isWith());
331:       assertFalse(node0.isRegExp());
332:       assertFalse(node0.isThrow());
333:       assertFalse(node0.isIf());
334:       assertFalse(node0.isInc());
335:       assertFalse(node0.isSetterDef());
336:       assertFalse(node0.isNE());
337:       assertEquals(114, node0.getType());
338:       assertFalse(node0.isIn());
339:       assertFalse(boolean0);
340:       
341:       node0.setCharno((-564));
342:       assertEquals(57, Node.LAST_PROP);
343:       assertEquals(30, Node.VAR_ARGS_NAME);
344:       assertEquals(54, Node.SLASH_V);
345:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
346:       assertEquals(51, Node.STATIC_SOURCE_FILE);
347:       assertEquals(12, Node.COLUMN_BITS);
348:       assertEquals(32, Node.INCRDECR_PROP);
349:       assertEquals(52, Node.LENGTH);
350:       assertEquals(1, Node.DECR_FLAG);
351:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
352:       assertEquals(15, Node.NO_SIDE_EFFECTS);
353:       assertEquals(2, Node.POST_FLAG);
354:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
355:       assertEquals(50, Node.FREE_CALL);
356:       assertEquals(47, Node.IS_DISPATCHER);
357:       assertEquals(46, Node.IS_NAMESPACE);
358:       assertEquals(40, Node.ORIGINALNAME_PROP);
359:       assertEquals(43, Node.IS_CONSTANT_NAME);
360:       assertEquals(36, Node.QUOTED_PROP);
361:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
362:       assertEquals(55, Node.INFERRED_FUNCTION);
363:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
364:       assertEquals(53, Node.INPUT_ID);
365:       assertEquals(29, Node.JSDOC_INFO_PROP);
366:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
367:       assertEquals(39, Node.EMPTY_BLOCK);
368:       assertEquals(56, Node.CHANGE_TIME);
369:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
370:       assertEquals(8, Node.FLAG_NO_THROWS);
371:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
373:       assertEquals(4095, Node.COLUMN_MASK);
374:       assertEquals(57, Node.REFLECTED_OBJECT);
375:       assertEquals(48, Node.DIRECTIVES);
376:       assertEquals(49, Node.DIRECT_EVAL);
377:       assertEquals(37, Node.OPT_ARG_NAME);
378:       assertFalse(node0.isString());
379:       assertFalse(node0.isCase());
380:       assertTrue(node0.isDo());
381:       assertFalse(node0.isHook());
382:       assertFalse(node0.isFalse());
383:       assertFalse(node0.isFor());
384:       assertFalse(node0.isArrayLit());
385:       assertFalse(node0.isTry());
386:       assertFalse(node0.isGetProp());
387:       assertFalse(node0.isDebugger());
388:       assertEquals((-1), node0.getCharno());
389:       assertFalse(node0.isSwitch());
390:       assertFalse(node0.isGetterDef());
391:       assertFalse(node0.isObjectLit());
392:       assertFalse(node0.isDefaultCase());
393:       assertFalse(node0.isExprResult());
394:       assertEquals(0, node0.getChildCount());
395:       assertFalse(node0.isComma());
396:       assertFalse(node0.isName());
397:       assertFalse(node0.isCall());
398:       assertFalse(node0.isGetElem());
399:       assertFalse(node0.isVar());
400:       assertFalse(node0.isEmpty());
401:       assertFalse(node0.isBreak());
402:       assertFalse(node0.isDelProp());
403:       assertFalse(node0.isNew());
404:       assertFalse(node0.isVoid());
405:       assertFalse(node0.isTrue());
406:       assertFalse(node0.isAdd());
407:       assertFalse(node0.isNull());
408:       assertFalse(node0.isOr());
409:       assertFalse(node0.isContinue());
410:       assertFalse(node0.hasMoreThanOneChild());
411:       assertFalse(node0.isWhile());
412:       assertEquals((-1), node0.getLineno());
413:       assertFalse(node0.isBlock());
414:       assertFalse(node0.isAssignAdd());
415:       assertFalse(node0.hasChildren());
416:       assertFalse(node0.isReturn());
417:       assertFalse(node0.isTypeOf());
418:       assertFalse(node0.isLabel());
419:       assertFalse(node0.isAssign());
420:       assertFalse(node0.isDec());
421:       assertFalse(node0.isCast());
422:       assertFalse(node0.isStringKey());
423:       assertFalse(node0.isLabelName());
424:       assertFalse(node0.hasOneChild());
425:       assertFalse(node0.isScript());
426:       assertFalse(node0.isParamList());
427:       assertFalse(node0.isNumber());
428:       assertFalse(node0.isNot());
429:       assertEquals((-1), node0.getSourcePosition());
430:       assertFalse(node0.isAnd());
431:       assertFalse(node0.isCatch());
432:       assertFalse(node0.isInstanceOf());
433:       assertFalse(node0.isFunction());
434:       assertFalse(node0.isThis());
435:       assertFalse(node0.isWith());
436:       assertFalse(node0.isRegExp());
437:       assertFalse(node0.isThrow());
438:       assertFalse(node0.isIf());
439:       assertFalse(node0.isInc());
440:       assertFalse(node0.isSetterDef());
441:       assertFalse(node0.isNE());
442:       assertEquals(114, node0.getType());
443:       assertFalse(node0.isIn());
444:       
445:       boolean boolean1 = node0.isCatch();
446:       assertEquals(57, Node.LAST_PROP);
447:       assertEquals(30, Node.VAR_ARGS_NAME);
448:       assertEquals(54, Node.SLASH_V);
449:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
450:       assertEquals(51, Node.STATIC_SOURCE_FILE);
451:       assertEquals(12, Node.COLUMN_BITS);
452:       assertEquals(32, Node.INCRDECR_PROP);
453:       assertEquals(52, Node.LENGTH);
454:       assertEquals(1, Node.DECR_FLAG);
455:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
456:       assertEquals(15, Node.NO_SIDE_EFFECTS);
457:       assertEquals(2, Node.POST_FLAG);
458:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
459:       assertEquals(50, Node.FREE_CALL);
460:       assertEquals(47, Node.IS_DISPATCHER);
461:       assertEquals(46, Node.IS_NAMESPACE);
462:       assertEquals(40, Node.ORIGINALNAME_PROP);
463:       assertEquals(43, Node.IS_CONSTANT_NAME);
464:       assertEquals(36, Node.QUOTED_PROP);
465:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
466:       assertEquals(55, Node.INFERRED_FUNCTION);
467:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
468:       assertEquals(53, Node.INPUT_ID);
469:       assertEquals(29, Node.JSDOC_INFO_PROP);
470:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
471:       assertEquals(39, Node.EMPTY_BLOCK);
472:       assertEquals(56, Node.CHANGE_TIME);
473:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
474:       assertEquals(8, Node.FLAG_NO_THROWS);
475:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
476:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
477:       assertEquals(4095, Node.COLUMN_MASK);
478:       assertEquals(57, Node.REFLECTED_OBJECT);
479:       assertEquals(48, Node.DIRECTIVES);
480:       assertEquals(49, Node.DIRECT_EVAL);
481:       assertEquals(37, Node.OPT_ARG_NAME);
482:       assertFalse(node0.isString());
483:       assertFalse(node0.isCase());
484:       assertTrue(node0.isDo());
485:       assertFalse(node0.isHook());
486:       assertFalse(node0.isFalse());
487:       assertFalse(node0.isFor());
488:       assertFalse(node0.isArrayLit());
489:       assertFalse(node0.isTry());
490:       assertFalse(node0.isGetProp());
491:       assertFalse(node0.isDebugger());
492:       assertEquals((-1), node0.getCharno());
493:       assertFalse(node0.isSwitch());
494:       assertFalse(node0.isGetterDef());
495:       assertFalse(node0.isObjectLit());
496:       assertFalse(node0.isDefaultCase());
497:       assertFalse(node0.isExprResult());
498:       assertEquals(0, node0.getChildCount());
499:       assertFalse(node0.isComma());
500:       assertFalse(node0.isName());
501:       assertFalse(node0.isCall());
502:       assertFalse(node0.isGetElem());
503:       assertFalse(node0.isVar());
504:       assertFalse(node0.isEmpty());
505:       assertFalse(node0.isBreak());
506:       assertFalse(node0.isDelProp());
507:       assertFalse(node0.isNew());
508:       assertFalse(node0.isVoid());
509:       assertFalse(node0.isTrue());
510:       assertFalse(node0.isAdd());
511:       assertFalse(node0.isNull());
512:       assertFalse(node0.isOr());
513:       assertFalse(node0.isContinue());
514:       assertFalse(node0.hasMoreThanOneChild());
515:       assertFalse(node0.isWhile());
516:       assertEquals((-1), node0.getLineno());
517:       assertFalse(node0.isBlock());
518:       assertFalse(node0.isAssignAdd());
519:       assertFalse(node0.hasChildren());
520:       assertFalse(node0.isReturn());
521:       assertFalse(node0.isTypeOf());
522:       assertFalse(node0.isLabel());
523:       assertFalse(node0.isAssign());
524:       assertFalse(node0.isDec());
525:       assertFalse(node0.isCast());
526:       assertFalse(node0.isStringKey());
527:       assertFalse(node0.isLabelName());
528:       assertFalse(node0.hasOneChild());
529:       assertFalse(node0.isScript());
530:       assertFalse(node0.isParamList());
531:       assertFalse(node0.isNumber());
532:       assertFalse(node0.isNot());
533:       assertEquals((-1), node0.getSourcePosition());
534:       assertFalse(node0.isAnd());
535:       assertFalse(node0.isCatch());
536:       assertFalse(node0.isInstanceOf());
537:       assertFalse(node0.isFunction());
538:       assertFalse(node0.isThis());
539:       assertFalse(node0.isWith());
540:       assertFalse(node0.isRegExp());
541:       assertFalse(node0.isThrow());
542:       assertFalse(node0.isIf());
543:       assertFalse(node0.isInc());
544:       assertFalse(node0.isSetterDef());
545:       assertFalse(node0.isNE());
546:       assertEquals(114, node0.getType());
547:       assertFalse(node0.isIn());
548:       assertFalse(boolean1);
549:       assertTrue(boolean1 == boolean0);
550:       
551:       Iterable<Node> iterable0 = node0.children();
552:       assertEquals(57, Node.LAST_PROP);
553:       assertEquals(30, Node.VAR_ARGS_NAME);
554:       assertEquals(54, Node.SLASH_V);
555:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
556:       assertEquals(51, Node.STATIC_SOURCE_FILE);
557:       assertEquals(12, Node.COLUMN_BITS);
558:       assertEquals(32, Node.INCRDECR_PROP);
559:       assertEquals(52, Node.LENGTH);
560:       assertEquals(1, Node.DECR_FLAG);
561:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
562:       assertEquals(15, Node.NO_SIDE_EFFECTS);
563:       assertEquals(2, Node.POST_FLAG);
564:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
565:       assertEquals(50, Node.FREE_CALL);
566:       assertEquals(47, Node.IS_DISPATCHER);
567:       assertEquals(46, Node.IS_NAMESPACE);
568:       assertEquals(40, Node.ORIGINALNAME_PROP);
569:       assertEquals(43, Node.IS_CONSTANT_NAME);
570:       assertEquals(36, Node.QUOTED_PROP);
571:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
572:       assertEquals(55, Node.INFERRED_FUNCTION);
573:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
574:       assertEquals(53, Node.INPUT_ID);
575:       assertEquals(29, Node.JSDOC_INFO_PROP);
576:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
577:       assertEquals(39, Node.EMPTY_BLOCK);
578:       assertEquals(56, Node.CHANGE_TIME);
579:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
580:       assertEquals(8, Node.FLAG_NO_THROWS);
581:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
582:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
583:       assertEquals(4095, Node.COLUMN_MASK);
584:       assertEquals(57, Node.REFLECTED_OBJECT);
585:       assertEquals(48, Node.DIRECTIVES);
586:       assertEquals(49, Node.DIRECT_EVAL);
587:       assertEquals(37, Node.OPT_ARG_NAME);
588:       assertFalse(node0.isString());
589:       assertFalse(node0.isCase());
590:       assertTrue(node0.isDo());
591:       assertFalse(node0.isHook());
592:       assertFalse(node0.isFalse());
593:       assertFalse(node0.isFor());
594:       assertFalse(node0.isArrayLit());
595:       assertFalse(node0.isTry());
596:       assertFalse(node0.isGetProp());
597:       assertFalse(node0.isDebugger());
598:       assertEquals((-1), node0.getCharno());
599:       assertFalse(node0.isSwitch());
600:       assertFalse(node0.isGetterDef());
601:       assertFalse(node0.isObjectLit());
602:       assertFalse(node0.isDefaultCase());
603:       assertFalse(node0.isExprResult());
604:       assertEquals(0, node0.getChildCount());
605:       assertFalse(node0.isComma());
606:       assertFalse(node0.isName());
607:       assertFalse(node0.isCall());
608:       assertFalse(node0.isGetElem());
609:       assertFalse(node0.isVar());
610:       assertFalse(node0.isEmpty());
611:       assertFalse(node0.isBreak());
612:       assertFalse(node0.isDelProp());
613:       assertFalse(node0.isNew());
614:       assertFalse(node0.isVoid());
615:       assertFalse(node0.isTrue());
616:       assertFalse(node0.isAdd());
617:       assertFalse(node0.isNull());
618:       assertFalse(node0.isOr());
619:       assertFalse(node0.isContinue());
620:       assertFalse(node0.hasMoreThanOneChild());
621:       assertFalse(node0.isWhile());
622:       assertEquals((-1), node0.getLineno());
623:       assertFalse(node0.isBlock());
624:       assertFalse(node0.isAssignAdd());
625:       assertFalse(node0.hasChildren());
626:       assertFalse(node0.isReturn());
627:       assertFalse(node0.isTypeOf());
628:       assertFalse(node0.isLabel());
629:       assertFalse(node0.isAssign());
630:       assertFalse(node0.isDec());
631:       assertFalse(node0.isCast());
632:       assertFalse(node0.isStringKey());
633:       assertFalse(node0.isLabelName());
634:       assertFalse(node0.hasOneChild());
635:       assertFalse(node0.isScript());
636:       assertFalse(node0.isParamList());
637:       assertFalse(node0.isNumber());
638:       assertFalse(node0.isNot());
639:       assertEquals((-1), node0.getSourcePosition());
640:       assertFalse(node0.isAnd());
641:       assertFalse(node0.isCatch());
642:       assertFalse(node0.isInstanceOf());
643:       assertFalse(node0.isFunction());
644:       assertFalse(node0.isThis());
645:       assertFalse(node0.isWith());
646:       assertFalse(node0.isRegExp());
647:       assertFalse(node0.isThrow());
648:       assertFalse(node0.isIf());
649:       assertFalse(node0.isInc());
650:       assertFalse(node0.isSetterDef());
651:       assertFalse(node0.isNE());
652:       assertEquals(114, node0.getType());
653:       assertFalse(node0.isIn());
654:       assertFalse(iterable0.contains(node0));
655:       assertNotNull(iterable0);
656:       
657:       int int0 = node0.getIntProp(114);
658:       assertEquals(57, Node.LAST_PROP);
659:       assertEquals(30, Node.VAR_ARGS_NAME);
660:       assertEquals(54, Node.SLASH_V);
661:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
662:       assertEquals(51, Node.STATIC_SOURCE_FILE);
663:       assertEquals(12, Node.COLUMN_BITS);
664:       assertEquals(32, Node.INCRDECR_PROP);
665:       assertEquals(52, Node.LENGTH);
666:       assertEquals(1, Node.DECR_FLAG);
667:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
668:       assertEquals(15, Node.NO_SIDE_EFFECTS);
669:       assertEquals(2, Node.POST_FLAG);
670:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
671:       assertEquals(50, Node.FREE_CALL);
672:       assertEquals(47, Node.IS_DISPATCHER);
673:       assertEquals(46, Node.IS_NAMESPACE);
674:       assertEquals(40, Node.ORIGINALNAME_PROP);
675:       assertEquals(43, Node.IS_CONSTANT_NAME);
676:       assertEquals(36, Node.QUOTED_PROP);
677:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
678:       assertEquals(55, Node.INFERRED_FUNCTION);
679:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
680:       assertEquals(53, Node.INPUT_ID);
681:       assertEquals(29, Node.JSDOC_INFO_PROP);
682:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
683:       assertEquals(39, Node.EMPTY_BLOCK);
684:       assertEquals(56, Node.CHANGE_TIME);
685:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
686:       assertEquals(8, Node.FLAG_NO_THROWS);
687:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
688:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
689:       assertEquals(4095, Node.COLUMN_MASK);
690:       assertEquals(57, Node.REFLECTED_OBJECT);
691:       assertEquals(48, Node.DIRECTIVES);
692:       assertEquals(49, Node.DIRECT_EVAL);
693:       assertEquals(37, Node.OPT_ARG_NAME);
694:       assertFalse(node0.isString());
695:       assertFalse(node0.isCase());
696:       assertTrue(node0.isDo());
697:       assertFalse(node0.isHook());
698:       assertFalse(node0.isFalse());
699:       assertFalse(node0.isFor());
700:       assertFalse(node0.isArrayLit());
701:       assertFalse(node0.isTry());
702:       assertFalse(node0.isGetProp());
703:       assertFalse(node0.isDebugger());
704:       assertEquals((-1), node0.getCharno());
705:       assertFalse(node0.isSwitch());
706:       assertFalse(node0.isGetterDef());
707:       assertFalse(node0.isObjectLit());
708:       assertFalse(node0.isDefaultCase());
709:       assertFalse(node0.isExprResult());
710:       assertEquals(0, node0.getChildCount());
711:       assertFalse(node0.isComma());
712:       assertFalse(node0.isName());
713:       assertFalse(node0.isCall());
714:       assertFalse(node0.isGetElem());
715:       assertFalse(node0.isVar());
716:       assertFalse(node0.isEmpty());
717:       assertFalse(node0.isBreak());
718:       assertFalse(node0.isDelProp());
719:       assertFalse(node0.isNew());
720:       assertFalse(node0.isVoid());
721:       assertFalse(node0.isTrue());
722:       assertFalse(node0.isAdd());
723:       assertFalse(node0.isNull());
724:       assertFalse(node0.isOr());
725:       assertFalse(node0.isContinue());
726:       assertFalse(node0.hasMoreThanOneChild());
727:       assertFalse(node0.isWhile());
728:       assertEquals((-1), node0.getLineno());
729:       assertFalse(node0.isBlock());
730:       assertFalse(node0.isAssignAdd());
731:       assertFalse(node0.hasChildren());
732:       assertFalse(node0.isReturn());
733:       assertFalse(node0.isTypeOf());
734:       assertFalse(node0.isLabel());
735:       assertFalse(node0.isAssign());
736:       assertFalse(node0.isDec());
737:       assertFalse(node0.isCast());
738:       assertFalse(node0.isStringKey());
739:       assertFalse(node0.isLabelName());
740:       assertFalse(node0.hasOneChild());
741:       assertFalse(node0.isScript());
742:       assertFalse(node0.isParamList());
743:       assertFalse(node0.isNumber());
744:       assertFalse(node0.isNot());
745:       assertEquals((-1), node0.getSourcePosition());
746:       assertFalse(node0.isAnd());
747:       assertFalse(node0.isCatch());
748:       assertFalse(node0.isInstanceOf());
749:       assertFalse(node0.isFunction());
750:       assertFalse(node0.isThis());
751:       assertFalse(node0.isWith());
752:       assertFalse(node0.isRegExp());
753:       assertFalse(node0.isThrow());
754:       assertFalse(node0.isIf());
755:       assertFalse(node0.isInc());
756:       assertFalse(node0.isSetterDef());
757:       assertFalse(node0.isNE());
758:       assertEquals(114, node0.getType());
759:       assertFalse(node0.isIn());
760:       assertEquals(0, int0);
761:       
762:       JSDocInfo jSDocInfo0 = new JSDocInfo(false);
763:       assertNull(jSDocInfo0.getOriginalCommentString());
764:       assertFalse(jSDocInfo0.isJaggerProvide());
765:       assertFalse(jSDocInfo0.hasType());
766:       assertFalse(jSDocInfo0.isStableIdGenerator());
767:       assertFalse(jSDocInfo0.isMappedIdGenerator());
768:       assertNull(jSDocInfo0.getLicense());
769:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
770:       assertFalse(jSDocInfo0.isDefine());
771:       assertNull(jSDocInfo0.getReturnDescription());
772:       assertFalse(jSDocInfo0.isHidden());
773:       assertFalse(jSDocInfo0.isNoCompile());
774:       assertFalse(jSDocInfo0.isDisposes());
775:       assertFalse(jSDocInfo0.isExterns());
776:       assertEquals(0, jSDocInfo0.getParameterCount());
777:       assertFalse(jSDocInfo0.isNoAlias());
778:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
779:       assertFalse(jSDocInfo0.hasReturnType());
780:       assertFalse(jSDocInfo0.isExpose());
781:       assertFalse(jSDocInfo0.makesStructs());
782:       assertFalse(jSDocInfo0.isDeprecated());
783:       assertFalse(jSDocInfo0.isNoShadow());
784:       assertFalse(jSDocInfo0.shouldPreserveTry());
785:       assertFalse(jSDocInfo0.containsDeclaration());
786:       assertEquals("JSDocInfo", jSDocInfo0.toString());
787:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
788:       assertFalse(jSDocInfo0.makesDicts());
789:       assertFalse(jSDocInfo0.isNgInject());
790:       assertFalse(jSDocInfo0.isNoSideEffects());
791:       assertNull(jSDocInfo0.getMeaning());
792:       assertFalse(jSDocInfo0.isConstant());
793:       assertNull(jSDocInfo0.getFileOverview());
794:       assertNull(jSDocInfo0.getVisibility());
795:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
796:       assertNull(jSDocInfo0.getLendsName());
797:       assertNull(jSDocInfo0.getDescription());
798:       assertFalse(jSDocInfo0.isJaggerInject());
799:       assertFalse(jSDocInfo0.isConstructor());
800:       assertFalse(jSDocInfo0.hasTypedefType());
801:       assertFalse(jSDocInfo0.hasModifies());
802:       assertFalse(jSDocInfo0.hasEnumParameterType());
803:       assertFalse(jSDocInfo0.hasThisType());
804:       assertFalse(jSDocInfo0.isIdGenerator());
805:       assertFalse(jSDocInfo0.isInterface());
806:       assertNull(jSDocInfo0.getBlockDescription());
807:       assertFalse(jSDocInfo0.hasBaseType());
808:       assertNull(jSDocInfo0.getDeprecationReason());
809:       assertFalse(jSDocInfo0.hasFileOverview());
810:       assertNull(jSDocInfo0.getVersion());
811:       assertFalse(jSDocInfo0.isNoTypeCheck());
812:       assertFalse(jSDocInfo0.isImplicitCast());
813:       assertFalse(jSDocInfo0.isWizaction());
814:       assertFalse(jSDocInfo0.isExport());
815:       assertFalse(jSDocInfo0.isOverride());
816:       assertFalse(jSDocInfo0.isJavaDispatch());
817:       assertFalse(jSDocInfo0.isJaggerModule());
818:       assertNotNull(jSDocInfo0);
819:       
820:       Node node1 = node0.setJSDocInfo(jSDocInfo0);
821:       assertEquals(57, Node.LAST_PROP);
822:       assertEquals(30, Node.VAR_ARGS_NAME);
823:       assertEquals(54, Node.SLASH_V);
824:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
825:       assertEquals(51, Node.STATIC_SOURCE_FILE);
826:       assertEquals(12, Node.COLUMN_BITS);
827:       assertEquals(32, Node.INCRDECR_PROP);
828:       assertEquals(52, Node.LENGTH);
829:       assertEquals(1, Node.DECR_FLAG);
830:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
831:       assertEquals(15, Node.NO_SIDE_EFFECTS);
832:       assertEquals(2, Node.POST_FLAG);
833:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
834:       assertEquals(50, Node.FREE_CALL);
835:       assertEquals(47, Node.IS_DISPATCHER);
836:       assertEquals(46, Node.IS_NAMESPACE);
837:       assertEquals(40, Node.ORIGINALNAME_PROP);
838:       assertEquals(43, Node.IS_CONSTANT_NAME);
839:       assertEquals(36, Node.QUOTED_PROP);
840:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
841:       assertEquals(55, Node.INFERRED_FUNCTION);
842:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
843:       assertEquals(53, Node.INPUT_ID);
844:       assertEquals(29, Node.JSDOC_INFO_PROP);
845:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
846:       assertEquals(39, Node.EMPTY_BLOCK);
847:       assertEquals(56, Node.CHANGE_TIME);
848:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
849:       assertEquals(8, Node.FLAG_NO_THROWS);
850:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
851:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
852:       assertEquals(4095, Node.COLUMN_MASK);
853:       assertEquals(57, Node.REFLECTED_OBJECT);
854:       assertEquals(48, Node.DIRECTIVES);
855:       assertEquals(49, Node.DIRECT_EVAL);
856:       assertEquals(37, Node.OPT_ARG_NAME);
857:       assertEquals(52, Node.LENGTH);
858:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
859:       assertEquals(15, Node.NO_SIDE_EFFECTS);
860:       assertEquals(40, Node.ORIGINALNAME_PROP);
861:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
862:       assertEquals(49, Node.DIRECT_EVAL);
863:       assertEquals(50, Node.FREE_CALL);
864:       assertEquals(57, Node.REFLECTED_OBJECT);
865:       assertEquals(46, Node.IS_NAMESPACE);
866:       assertEquals(54, Node.SLASH_V);
867:       assertEquals(2, Node.POST_FLAG);
868:       assertEquals(8, Node.FLAG_NO_THROWS);
869:       assertEquals(39, Node.EMPTY_BLOCK);
870:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
871:       assertEquals(55, Node.INFERRED_FUNCTION);
872:       assertEquals(29, Node.JSDOC_INFO_PROP);
873:       assertEquals(30, Node.VAR_ARGS_NAME);
874:       assertEquals(57, Node.LAST_PROP);
875:       assertEquals(47, Node.IS_DISPATCHER);
876:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
877:       assertEquals(53, Node.INPUT_ID);
878:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
879:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
880:       assertEquals(36, Node.QUOTED_PROP);
881:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
882:       assertEquals(43, Node.IS_CONSTANT_NAME);
883:       assertEquals(56, Node.CHANGE_TIME);
884:       assertEquals(37, Node.OPT_ARG_NAME);
885:       assertEquals(48, Node.DIRECTIVES);
886:       assertEquals(32, Node.INCRDECR_PROP);
887:       assertEquals(51, Node.STATIC_SOURCE_FILE);
888:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
889:       assertEquals(4095, Node.COLUMN_MASK);
890:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
891:       assertEquals(1, Node.DECR_FLAG);
892:       assertEquals(12, Node.COLUMN_BITS);
893:       assertFalse(node0.isString());
894:       assertFalse(node0.isCase());
895:       assertTrue(node0.isDo());
896:       assertFalse(node0.isHook());
897:       assertFalse(node0.isFalse());
898:       assertFalse(node0.isFor());
899:       assertFalse(node0.isArrayLit());
900:       assertFalse(node0.isTry());
901:       assertFalse(node0.isGetProp());
902:       assertFalse(node0.isDebugger());
903:       assertEquals((-1), node0.getCharno());
904:       assertFalse(node0.isSwitch());
905:       assertFalse(node0.isGetterDef());
906:       assertFalse(node0.isObjectLit());
907:       assertFalse(node0.isDefaultCase());
908:       assertFalse(node0.isExprResult());
909:       assertEquals(0, node0.getChildCount());
910:       assertFalse(node0.isComma());
911:       assertFalse(node0.isName());
912:       assertFalse(node0.isCall());
913:       assertFalse(node0.isGetElem());
914:       assertFalse(node0.isVar());
915:       assertFalse(node0.isEmpty());
916:       assertFalse(node0.isBreak());
917:       assertFalse(node0.isDelProp());
918:       assertFalse(node0.isNew());
919:       assertFalse(node0.isVoid());
920:       assertFalse(node0.isTrue());
921:       assertFalse(node0.isAdd());
922:       assertFalse(node0.isNull());
923:       assertFalse(node0.isOr());
924:       assertFalse(node0.isContinue());
925:       assertFalse(node0.hasMoreThanOneChild());
926:       assertFalse(node0.isWhile());
927:       assertEquals((-1), node0.getLineno());
928:       assertFalse(node0.isBlock());
929:       assertFalse(node0.isAssignAdd());
930:       assertFalse(node0.hasChildren());
931:       assertFalse(node0.isReturn());
932:       assertFalse(node0.isTypeOf());
933:       assertFalse(node0.isLabel());
934:       assertFalse(node0.isAssign());
935:       assertFalse(node0.isDec());
936:       assertFalse(node0.isCast());
937:       assertFalse(node0.isStringKey());
938:       assertFalse(node0.isLabelName());
939:       assertFalse(node0.hasOneChild());
940:       assertFalse(node0.isScript());
941:       assertFalse(node0.isParamList());
942:       assertFalse(node0.isNumber());
943:       assertFalse(node0.isNot());
944:       assertEquals((-1), node0.getSourcePosition());
945:       assertFalse(node0.isAnd());
946:       assertFalse(node0.isCatch());
947:       assertFalse(node0.isInstanceOf());
948:       assertFalse(node0.isFunction());
949:       assertFalse(node0.isThis());
950:       assertFalse(node0.isWith());
951:       assertFalse(node0.isRegExp());
952:       assertFalse(node0.isThrow());
953:       assertFalse(node0.isIf());
954:       assertFalse(node0.isInc());
955:       assertFalse(node0.isSetterDef());
956:       assertFalse(node0.isNE());
957:       assertEquals(114, node0.getType());
958:       assertFalse(node0.isIn());
959:       assertNull(jSDocInfo0.getOriginalCommentString());
960:       assertFalse(jSDocInfo0.isJaggerProvide());
961:       assertFalse(jSDocInfo0.hasType());
962:       assertFalse(jSDocInfo0.isStableIdGenerator());
963:       assertFalse(jSDocInfo0.isMappedIdGenerator());
964:       assertNull(jSDocInfo0.getLicense());
965:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
966:       assertFalse(jSDocInfo0.isDefine());
967:       assertNull(jSDocInfo0.getReturnDescription());
968:       assertFalse(jSDocInfo0.isHidden());
969:       assertFalse(jSDocInfo0.isNoCompile());
970:       assertFalse(jSDocInfo0.isDisposes());
971:       assertFalse(jSDocInfo0.isExterns());
972:       assertEquals(0, jSDocInfo0.getParameterCount());
973:       assertFalse(jSDocInfo0.isNoAlias());
974:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
975:       assertFalse(jSDocInfo0.hasReturnType());
976:       assertFalse(jSDocInfo0.isExpose());
977:       assertFalse(jSDocInfo0.makesStructs());
978:       assertFalse(jSDocInfo0.isDeprecated());
979:       assertFalse(jSDocInfo0.isNoShadow());
980:       assertFalse(jSDocInfo0.shouldPreserveTry());
981:       assertFalse(jSDocInfo0.containsDeclaration());
982:       assertEquals("JSDocInfo", jSDocInfo0.toString());
983:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
984:       assertFalse(jSDocInfo0.makesDicts());
985:       assertFalse(jSDocInfo0.isNgInject());
986:       assertFalse(jSDocInfo0.isNoSideEffects());
987:       assertNull(jSDocInfo0.getMeaning());
988:       assertFalse(jSDocInfo0.isConstant());
989:       assertNull(jSDocInfo0.getFileOverview());
990:       assertNull(jSDocInfo0.getVisibility());
991:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
992:       assertNull(jSDocInfo0.getLendsName());
993:       assertNull(jSDocInfo0.getDescription());
994:       assertFalse(jSDocInfo0.isJaggerInject());
995:       assertFalse(jSDocInfo0.isConstructor());
996:       assertFalse(jSDocInfo0.hasTypedefType());
997:       assertFalse(jSDocInfo0.hasModifies());
998:       assertFalse(jSDocInfo0.hasEnumParameterType());
999:       assertFalse(jSDocInfo0.hasThisType());
1000:       assertFalse(jSDocInfo0.isIdGenerator());
1001:       assertFalse(jSDocInfo0.isInterface());
1002:       assertNull(jSDocInfo0.getBlockDescription());
1003:       assertFalse(jSDocInfo0.hasBaseType());
1004:       assertNull(jSDocInfo0.getDeprecationReason());
1005:       assertFalse(jSDocInfo0.hasFileOverview());
1006:       assertNull(jSDocInfo0.getVersion());
1007:       assertFalse(jSDocInfo0.isNoTypeCheck());
1008:       assertFalse(jSDocInfo0.isImplicitCast());
1009:       assertFalse(jSDocInfo0.isWizaction());
1010:       assertFalse(jSDocInfo0.isExport());
1011:       assertFalse(jSDocInfo0.isOverride());
1012:       assertFalse(jSDocInfo0.isJavaDispatch());
1013:       assertFalse(jSDocInfo0.isJaggerModule());
1014:       assertFalse(node1.isString());
1015:       assertFalse(node1.isSwitch());
1016:       assertTrue(node1.isDo());
1017:       assertEquals((-1), node1.getCharno());
1018:       assertFalse(node1.isIn());
1019:       assertFalse(node1.isCase());
1020:       assertFalse(node1.isInc());
1021:       assertFalse(node1.isGetterDef());
1022:       assertFalse(node1.isThrow());
1023:       assertFalse(node1.isArrayLit());
1024:       assertFalse(node1.isFalse());
1025:       assertFalse(node1.isDefaultCase());
1026:       assertFalse(node1.isNot());
1027:       assertFalse(node1.isVoid());
1028:       assertFalse(node1.isDebugger());
1029:       assertFalse(node1.isAnd());
1030:       assertFalse(node1.isTrue());
1031:       assertFalse(node1.isObjectLit());
1032:       assertFalse(node1.isGetProp());
1033:       assertFalse(node1.isEmpty());
1034:       assertFalse(node1.hasChildren());
1035:       assertFalse(node1.isDec());
1036:       assertFalse(node1.isBreak());
1037:       assertFalse(node1.isAssign());
1038:       assertFalse(node1.isComma());
1039:       assertFalse(node1.isName());
1040:       assertFalse(node1.isTypeOf());
1041:       assertFalse(node1.isDelProp());
1042:       assertFalse(node1.isReturn());
1043:       assertFalse(node1.isNull());
1044:       assertFalse(node1.isGetElem());
1045:       assertFalse(node1.isCall());
1046:       assertFalse(node1.isExprResult());
1047:       assertFalse(node1.isWhile());
1048:       assertFalse(node1.isBlock());
1049:       assertFalse(node1.isOr());
1050:       assertFalse(node1.isAssignAdd());
1051:       assertFalse(node1.isNew());
1052:       assertFalse(node1.isAdd());
1053:       assertFalse(node1.isNumber());
1054:       assertEquals((-1), node1.getSourcePosition());
1055:       assertFalse(node1.isLabelName());
1056:       assertFalse(node1.isStringKey());
1057:       assertFalse(node1.isLabel());
1058:       assertFalse(node1.isParamList());
1059:       assertFalse(node1.isVar());
1060:       assertEquals(0, node1.getChildCount());
1061:       assertFalse(node1.isContinue());
1062:       assertFalse(node1.isCast());
1063:       assertFalse(node1.isWith());
1064:       assertFalse(node1.isFunction());
1065:       assertFalse(node1.isRegExp());
1066:       assertFalse(node1.hasOneChild());
1067:       assertFalse(node1.isTry());
1068:       assertEquals(114, node1.getType());
1069:       assertFalse(node1.isSetterDef());
1070:       assertFalse(node1.isScript());
1071:       assertFalse(node1.isIf());
1072:       assertFalse(node1.isNE());
1073:       assertFalse(node1.isThis());
1074:       assertFalse(node1.isFor());
1075:       assertFalse(node1.isInstanceOf());
1076:       assertFalse(node1.isHook());
1077:       assertFalse(node1.hasMoreThanOneChild());
1078:       assertEquals((-1), node1.getLineno());
1079:       assertFalse(node1.isCatch());
1080:       assertSame(node0, node1);
1081:       assertSame(node1, node0);
1082:       assertNotNull(node1);
1083:       
1084:       Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
1085:       assertEquals(57, Node.LAST_PROP);
1086:       assertEquals(30, Node.VAR_ARGS_NAME);
1087:       assertEquals(54, Node.SLASH_V);
1088:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1089:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1090:       assertEquals(12, Node.COLUMN_BITS);
1091:       assertEquals(32, Node.INCRDECR_PROP);
1092:       assertEquals(52, Node.LENGTH);
1093:       assertEquals(1, Node.DECR_FLAG);
1094:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1095:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1096:       assertEquals(2, Node.POST_FLAG);
1097:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1098:       assertEquals(50, Node.FREE_CALL);
1099:       assertEquals(47, Node.IS_DISPATCHER);
1100:       assertEquals(46, Node.IS_NAMESPACE);
1101:       assertEquals(40, Node.ORIGINALNAME_PROP);
1102:       assertEquals(43, Node.IS_CONSTANT_NAME);
1103:       assertEquals(36, Node.QUOTED_PROP);
1104:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1105:       assertEquals(55, Node.INFERRED_FUNCTION);
1106:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1107:       assertEquals(53, Node.INPUT_ID);
1108:       assertEquals(29, Node.JSDOC_INFO_PROP);
1109:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1110:       assertEquals(39, Node.EMPTY_BLOCK);
1111:       assertEquals(56, Node.CHANGE_TIME);
1112:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1113:       assertEquals(8, Node.FLAG_NO_THROWS);
1114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1115:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1116:       assertEquals(4095, Node.COLUMN_MASK);
1117:       assertEquals(57, Node.REFLECTED_OBJECT);
1118:       assertEquals(48, Node.DIRECTIVES);
1119:       assertEquals(49, Node.DIRECT_EVAL);
1120:       assertEquals(37, Node.OPT_ARG_NAME);
1121:       assertFalse(node0.isString());
1122:       assertFalse(node0.isCase());
1123:       assertTrue(node0.isDo());
1124:       assertFalse(node0.isHook());
1125:       assertFalse(node0.isFalse());
1126:       assertFalse(node0.isFor());
1127:       assertFalse(node0.isArrayLit());
1128:       assertFalse(node0.isTry());
1129:       assertFalse(node0.isGetProp());
1130:       assertFalse(node0.isDebugger());
1131:       assertEquals((-1), node0.getCharno());
1132:       assertFalse(node0.isSwitch());
1133:       assertFalse(node0.isGetterDef());
1134:       assertFalse(node0.isObjectLit());
1135:       assertFalse(node0.isDefaultCase());
1136:       assertFalse(node0.isExprResult());
1137:       assertEquals(0, node0.getChildCount());
1138:       assertFalse(node0.isComma());
1139:       assertFalse(node0.isName());
1140:       assertFalse(node0.isCall());
1141:       assertFalse(node0.isGetElem());
1142:       assertFalse(node0.isVar());
1143:       assertFalse(node0.isEmpty());
1144:       assertFalse(node0.isBreak());
1145:       assertFalse(node0.isDelProp());
1146:       assertFalse(node0.isNew());
1147:       assertFalse(node0.isVoid());
1148:       assertFalse(node0.isTrue());
1149:       assertFalse(node0.isAdd());
1150:       assertFalse(node0.isNull());
1151:       assertFalse(node0.isOr());
1152:       assertFalse(node0.isContinue());
1153:       assertFalse(node0.hasMoreThanOneChild());
1154:       assertFalse(node0.isWhile());
1155:       assertEquals((-1), node0.getLineno());
1156:       assertFalse(node0.isBlock());
1157:       assertFalse(node0.isAssignAdd());
1158:       assertFalse(node0.hasChildren());
1159:       assertFalse(node0.isReturn());
1160:       assertFalse(node0.isTypeOf());
1161:       assertFalse(node0.isLabel());
1162:       assertFalse(node0.isAssign());
1163:       assertFalse(node0.isDec());
1164:       assertFalse(node0.isCast());
1165:       assertFalse(node0.isStringKey());
1166:       assertFalse(node0.isLabelName());
1167:       assertFalse(node0.hasOneChild());
1168:       assertFalse(node0.isScript());
1169:       assertFalse(node0.isParamList());
1170:       assertFalse(node0.isNumber());
1171:       assertFalse(node0.isNot());
1172:       assertEquals((-1), node0.getSourcePosition());
1173:       assertFalse(node0.isAnd());
1174:       assertFalse(node0.isCatch());
1175:       assertFalse(node0.isInstanceOf());
1176:       assertFalse(node0.isFunction());
1177:       assertFalse(node0.isThis());
1178:       assertFalse(node0.isWith());
1179:       assertFalse(node0.isRegExp());
1180:       assertFalse(node0.isThrow());
1181:       assertFalse(node0.isIf());
1182:       assertFalse(node0.isInc());
1183:       assertFalse(node0.isSetterDef());
1184:       assertFalse(node0.isNE());
1185:       assertEquals(114, node0.getType());
1186:       assertFalse(node0.isIn());
1187:       assertNotNull(node_NodeMismatch0);
1188:       
1189:       boolean boolean2 = node_NodeMismatch0.equals(fileSystemHandling0);
1190:       assertEquals(57, Node.LAST_PROP);
1191:       assertEquals(30, Node.VAR_ARGS_NAME);
1192:       assertEquals(54, Node.SLASH_V);
1193:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1194:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1195:       assertEquals(12, Node.COLUMN_BITS);
1196:       assertEquals(32, Node.INCRDECR_PROP);
1197:       assertEquals(52, Node.LENGTH);
1198:       assertEquals(1, Node.DECR_FLAG);
1199:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1200:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1201:       assertEquals(2, Node.POST_FLAG);
1202:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1203:       assertEquals(50, Node.FREE_CALL);
1204:       assertEquals(47, Node.IS_DISPATCHER);
1205:       assertEquals(46, Node.IS_NAMESPACE);
1206:       assertEquals(40, Node.ORIGINALNAME_PROP);
1207:       assertEquals(43, Node.IS_CONSTANT_NAME);
1208:       assertEquals(36, Node.QUOTED_PROP);
1209:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1210:       assertEquals(55, Node.INFERRED_FUNCTION);
1211:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1212:       assertEquals(53, Node.INPUT_ID);
1213:       assertEquals(29, Node.JSDOC_INFO_PROP);
1214:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1215:       assertEquals(39, Node.EMPTY_BLOCK);
1216:       assertEquals(56, Node.CHANGE_TIME);
1217:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1218:       assertEquals(8, Node.FLAG_NO_THROWS);
1219:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1220:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1221:       assertEquals(4095, Node.COLUMN_MASK);
1222:       assertEquals(57, Node.REFLECTED_OBJECT);
1223:       assertEquals(48, Node.DIRECTIVES);
1224:       assertEquals(49, Node.DIRECT_EVAL);
1225:       assertEquals(37, Node.OPT_ARG_NAME);
1226:       assertFalse(node0.isString());
1227:       assertFalse(node0.isCase());
1228:       assertTrue(node0.isDo());
1229:       assertFalse(node0.isHook());
1230:       assertFalse(node0.isFalse());
1231:       assertFalse(node0.isFor());
1232:       assertFalse(node0.isArrayLit());
1233:       assertFalse(node0.isTry());
1234:       assertFalse(node0.isGetProp());
1235:       assertFalse(node0.isDebugger());
1236:       assertEquals((-1), node0.getCharno());
1237:       assertFalse(node0.isSwitch());
1238:       assertFalse(node0.isGetterDef());
1239:       assertFalse(node0.isObjectLit());
1240:       assertFalse(node0.isDefaultCase());
1241:       assertFalse(node0.isExprResult());
1242:       assertEquals(0, node0.getChildCount());
1243:       assertFalse(node0.isComma());
1244:       assertFalse(node0.isName());
1245:       assertFalse(node0.isCall());
1246:       assertFalse(node0.isGetElem());
1247:       assertFalse(node0.isVar());
1248:       assertFalse(node0.isEmpty());
1249:       assertFalse(node0.isBreak());
1250:       assertFalse(node0.isDelProp());
1251:       assertFalse(node0.isNew());
1252:       assertFalse(node0.isVoid());
1253:       assertFalse(node0.isTrue());
1254:       assertFalse(node0.isAdd());
1255:       assertFalse(node0.isNull());
1256:       assertFalse(node0.isOr());
1257:       assertFalse(node0.isContinue());
1258:       assertFalse(node0.hasMoreThanOneChild());
1259:       assertFalse(node0.isWhile());
1260:       assertEquals((-1), node0.getLineno());
1261:       assertFalse(node0.isBlock());
1262:       assertFalse(node0.isAssignAdd());
1263:       assertFalse(node0.hasChildren());
1264:       assertFalse(node0.isReturn());
1265:       assertFalse(node0.isTypeOf());
1266:       assertFalse(node0.isLabel());
1267:       assertFalse(node0.isAssign());
1268:       assertFalse(node0.isDec());
1269:       assertFalse(node0.isCast());
1270:       assertFalse(node0.isStringKey());
1271:       assertFalse(node0.isLabelName());
1272:       assertFalse(node0.hasOneChild());
1273:       assertFalse(node0.isScript());
1274:       assertFalse(node0.isParamList());
1275:       assertFalse(node0.isNumber());
1276:       assertFalse(node0.isNot());
1277:       assertEquals((-1), node0.getSourcePosition());
1278:       assertFalse(node0.isAnd());
1279:       assertFalse(node0.isCatch());
1280:       assertFalse(node0.isInstanceOf());
1281:       assertFalse(node0.isFunction());
1282:       assertFalse(node0.isThis());
1283:       assertFalse(node0.isWith());
1284:       assertFalse(node0.isRegExp());
1285:       assertFalse(node0.isThrow());
1286:       assertFalse(node0.isIf());
1287:       assertFalse(node0.isInc());
1288:       assertFalse(node0.isSetterDef());
1289:       assertFalse(node0.isNE());
1290:       assertEquals(114, node0.getType());
1291:       assertFalse(node0.isIn());
1292:       assertFalse(boolean2);
1293:       assertSame(node0, node1);
1294:       assertTrue(boolean2 == boolean0);
1295:       assertTrue(boolean2 == boolean1);
1296:       
1297:       boolean boolean3 = node0.isVoid();
1298:       assertEquals(57, Node.LAST_PROP);
1299:       assertEquals(30, Node.VAR_ARGS_NAME);
1300:       assertEquals(54, Node.SLASH_V);
1301:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1302:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1303:       assertEquals(12, Node.COLUMN_BITS);
1304:       assertEquals(32, Node.INCRDECR_PROP);
1305:       assertEquals(52, Node.LENGTH);
1306:       assertEquals(1, Node.DECR_FLAG);
1307:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1308:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1309:       assertEquals(2, Node.POST_FLAG);
1310:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1311:       assertEquals(50, Node.FREE_CALL);
1312:       assertEquals(47, Node.IS_DISPATCHER);
1313:       assertEquals(46, Node.IS_NAMESPACE);
1314:       assertEquals(40, Node.ORIGINALNAME_PROP);
1315:       assertEquals(43, Node.IS_CONSTANT_NAME);
1316:       assertEquals(36, Node.QUOTED_PROP);
1317:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1318:       assertEquals(55, Node.INFERRED_FUNCTION);
1319:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1320:       assertEquals(53, Node.INPUT_ID);
1321:       assertEquals(29, Node.JSDOC_INFO_PROP);
1322:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1323:       assertEquals(39, Node.EMPTY_BLOCK);
1324:       assertEquals(56, Node.CHANGE_TIME);
1325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1326:       assertEquals(8, Node.FLAG_NO_THROWS);
1327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1328:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1329:       assertEquals(4095, Node.COLUMN_MASK);
1330:       assertEquals(57, Node.REFLECTED_OBJECT);
1331:       assertEquals(48, Node.DIRECTIVES);
1332:       assertEquals(49, Node.DIRECT_EVAL);
1333:       assertEquals(37, Node.OPT_ARG_NAME);
1334:       assertFalse(node0.isString());
1335:       assertFalse(node0.isCase());
1336:       assertTrue(node0.isDo());
1337:       assertFalse(node0.isHook());
1338:       assertFalse(node0.isFalse());
1339:       assertFalse(node0.isFor());
1340:       assertFalse(node0.isArrayLit());
1341:       assertFalse(node0.isTry());
1342:       assertFalse(node0.isGetProp());
1343:       assertFalse(node0.isDebugger());
1344:       assertEquals((-1), node0.getCharno());
1345:       assertFalse(node0.isSwitch());
1346:       assertFalse(node0.isGetterDef());
1347:       assertFalse(node0.isObjectLit());
1348:       assertFalse(node0.isDefaultCase());
1349:       assertFalse(node0.isExprResult());
1350:       assertEquals(0, node0.getChildCount());
1351:       assertFalse(node0.isComma());
1352:       assertFalse(node0.isName());
1353:       assertFalse(node0.isCall());
1354:       assertFalse(node0.isGetElem());
1355:       assertFalse(node0.isVar());
1356:       assertFalse(node0.isEmpty());
1357:       assertFalse(node0.isBreak());
1358:       assertFalse(node0.isDelProp());
1359:       assertFalse(node0.isNew());
1360:       assertFalse(node0.isVoid());
1361:       assertFalse(node0.isTrue());
1362:       assertFalse(node0.isAdd());
1363:       assertFalse(node0.isNull());
1364:       assertFalse(node0.isOr());
1365:       assertFalse(node0.isContinue());
1366:       assertFalse(node0.hasMoreThanOneChild());
1367:       assertFalse(node0.isWhile());
1368:       assertEquals((-1), node0.getLineno());
1369:       assertFalse(node0.isBlock());
1370:       assertFalse(node0.isAssignAdd());
1371:       assertFalse(node0.hasChildren());
1372:       assertFalse(node0.isReturn());
1373:       assertFalse(node0.isTypeOf());
1374:       assertFalse(node0.isLabel());
1375:       assertFalse(node0.isAssign());
1376:       assertFalse(node0.isDec());
1377:       assertFalse(node0.isCast());
1378:       assertFalse(node0.isStringKey());
1379:       assertFalse(node0.isLabelName());
1380:       assertFalse(node0.hasOneChild());
1381:       assertFalse(node0.isScript());
1382:       assertFalse(node0.isParamList());
1383:       assertFalse(node0.isNumber());
1384:       assertFalse(node0.isNot());
1385:       assertEquals((-1), node0.getSourcePosition());
1386:       assertFalse(node0.isAnd());
1387:       assertFalse(node0.isCatch());
1388:       assertFalse(node0.isInstanceOf());
1389:       assertFalse(node0.isFunction());
1390:       assertFalse(node0.isThis());
1391:       assertFalse(node0.isWith());
1392:       assertFalse(node0.isRegExp());
1393:       assertFalse(node0.isThrow());
1394:       assertFalse(node0.isIf());
1395:       assertFalse(node0.isInc());
1396:       assertFalse(node0.isSetterDef());
1397:       assertFalse(node0.isNE());
1398:       assertEquals(114, node0.getType());
1399:       assertFalse(node0.isIn());
1400:       assertFalse(boolean3);
1401:       assertSame(node0, node1);
1402:       assertTrue(boolean3 == boolean1);
1403:       assertTrue(boolean3 == boolean0);
1404:       assertTrue(boolean3 == boolean2);
1405:   }
1406: }
RegularFileObject[/tmp/EvoSuite_274_1628161984418/com/google/javascript/rhino/Node_274_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:13:04 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_274_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_274_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.common.collect.RegularImmutableSet",
109:       "com.google.javascript.rhino.jstype.ModificationVisitor",
110:       "com.google.javascript.rhino.jstype.PropertyMap$1",
111:       "com.google.common.collect.AbstractMapEntry",
112:       "com.google.javascript.rhino.Node$AncestorIterable$1",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.common.collect.SingletonImmutableSet",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.EmptyImmutableSet",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
227:       "com.google.common.collect.ImmutableList",
228:       "com.google.common.collect.SingletonImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
230:       "com.google.javascript.rhino.jstype.StringType",
231:       "com.google.javascript.rhino.Node$AbstractPropListItem",
232:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
233:       "com.google.javascript.rhino.jstype.TemplatizedType",
234:       "com.google.javascript.rhino.jstype.Visitor",
235:       "com.google.javascript.rhino.jstype.NoResolvedType",
236:       "com.google.javascript.rhino.jstype.JSTypeNative",
237:       "com.google.javascript.rhino.jstype.AllType",
238:       "com.google.common.collect.Maps",
239:       "com.google.common.collect.SetMultimap",
240:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
241:       "com.google.common.collect.Maps$EntryTransformer",
242:       "com.google.javascript.rhino.JSTypeExpression",
243:       "com.google.common.collect.Iterators$MergingIterator"
244:     );
245:   } 
246: 
247:   private static void resetClasses() {
248:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_274_tmp__ESTest_scaffolding.class.getClassLoader()); 
249: 
250:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
251:       "com.google.javascript.rhino.Node",
252:       "com.google.javascript.rhino.Node$NumberNode",
253:       "com.google.javascript.rhino.Node$StringNode",
254:       "com.google.javascript.rhino.Node$AbstractPropListItem",
255:       "com.google.javascript.rhino.Node$ObjectPropListItem",
256:       "com.google.javascript.rhino.Node$IntPropListItem",
257:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
258:       "com.google.javascript.rhino.Node$AncestorIterable",
259:       "com.google.javascript.rhino.Node$NodeMismatch",
260:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
261:       "com.google.javascript.rhino.Node$SideEffectFlags",
262:       "com.google.javascript.rhino.Token",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Preconditions",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.SimpleErrorReporter",
336:       "com.google.common.base.Objects",
337:       "com.google.common.collect.AbstractIndexedListIterator",
338:       "com.google.common.collect.ImmutableList$1",
339:       "com.google.javascript.rhino.JSDocInfo",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.common.collect.Platform",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
347:       "com.google.javascript.rhino.InputId",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.Iterables",
350:       "com.google.javascript.rhino.Node$AncestorIterable$1",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.javascript.rhino.jstype.NamedType",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.AbstractMultimap$Values",
361:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
362:       "com.google.common.collect.AbstractMapBasedMultimap$1",
363:       "com.google.common.collect.Multimaps$Entries",
364:       "com.google.common.collect.AbstractMultimap$Entries",
365:       "com.google.common.collect.AbstractMapBasedMultimap$2",
366:       "com.google.javascript.rhino.jstype.JSType$TypePair",
367:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
368:       "com.google.javascript.rhino.jstype.TernaryValue"
369:     );
370:   }
371: }

[MASTER] 11:13:04.622 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(114, 114, 114);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isDo());
assertEquals(114, node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals(467058, node0.getSourcePosition());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals(114, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(114, node0.getType());
assertFalse(node0.isIn());
assertNotNull(node0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

Set<String> set0 = node0.getDirectives();
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isDo());
assertEquals(114, node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals(467058, node0.getSourcePosition());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals(114, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(114, node0.getType());
assertFalse(node0.isIn());
assertNull(set0);

boolean boolean0 = node0.isFromExterns();
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isDo());
assertEquals(114, node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals(467058, node0.getSourcePosition());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals(114, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(114, node0.getType());
assertFalse(node0.isIn());
assertFalse(boolean0);

node0.setCharno((-564));
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isDo());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(114, node0.getType());
assertFalse(node0.isIn());

boolean boolean1 = node0.isCatch();
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isDo());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(114, node0.getType());
assertFalse(node0.isIn());
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

Iterable<Node> iterable0 = node0.children();
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isDo());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(114, node0.getType());
assertFalse(node0.isIn());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

int int0 = node0.getIntProp(114);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isDo());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(114, node0.getType());
assertFalse(node0.isIn());
assertEquals(0, int0);

JSDocInfo jSDocInfo0 = new JSDocInfo(false);
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isExterns());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isNoAlias());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.containsDeclaration());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.hasBaseType());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasFileOverview());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isJaggerModule());
assertNotNull(jSDocInfo0);

Node node1 = node0.setJSDocInfo(jSDocInfo0);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isDo());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(114, node0.getType());
assertFalse(node0.isIn());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isExterns());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isNoAlias());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.containsDeclaration());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.hasBaseType());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasFileOverview());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertTrue(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isTrue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertEquals(114, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node1);

Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isDo());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(114, node0.getType());
assertFalse(node0.isIn());
assertNotNull(node_NodeMismatch0);

boolean boolean2 = node_NodeMismatch0.equals(fileSystemHandling0);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isDo());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(114, node0.getType());
assertFalse(node0.isIn());
assertFalse(boolean2);
assertSame(node0, node1);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

boolean boolean3 = node0.isVoid();
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isDo());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertEquals(114, node0.getType());
assertFalse(node0.isIn());
assertFalse(boolean3);
assertSame(node0, node1);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);


[MASTER] 11:13:19.370 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:19.687 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:19.984 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:20.212 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:21.160 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:21.361 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:21.540 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:21.716 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:21.919 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:22.091 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:22.298 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:22.492 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:22.701 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:22.874 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:23.044 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:23.217 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:23.387 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:23.559 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:23.743 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:23.919 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:24.210 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:24.405 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:24.580 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:24.762 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:24.933 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:25.110 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/29
* Done!

* Computation finished
