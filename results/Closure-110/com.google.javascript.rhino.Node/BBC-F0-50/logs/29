* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 10429
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2790600284
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:49:58.841 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:50:08.480 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:52:05.587 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 605s and 397 generations, 212011 statements, best individual has fitness: 3015.0
* Minimizing test suite
[MASTER] 18:01:17.947 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 796
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 611
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 102
* Number of covered goals: 102
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 530
* Number of covered goals: 462
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 46%
* Total number of goals: 4536
* Number of covered goals: 2067
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 90%
* Total number of goals: 233
* Number of covered goals: 210
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 714
* Number of covered goals: 569
* Generated 764 tests with total length 10999
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:02:32.147 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6752166666666667% of time used, but only 43/764 tests minimized), falling back to using all assertions
[MASTER] 18:02:51.838 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 18:03:02.315 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 10 seconds more than allowed.
[MASTER] 18:03:08.371 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_63_1629223387938/com/google/javascript/rhino/Node_63_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_63_1629223387938/com/google/javascript/rhino/Node_63_tmp__ESTest_scaffolding.java]]
[MASTER] 18:03:08.371 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:03:08.371 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:03:08.375 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 633
[MASTER] 18:03:08.380 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_63_1629223387938/com/google/javascript/rhino/Node_63_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:03:07 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_63_tmp__ESTest extends Node_63_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       String string0 = "gs1IcjVs7cZy}^~";
25:       boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
26:       assertFalse(boolean0);
27:       
28:       Node node0 = Node.newString(1, "gs1IcjVs7cZy}^~", 1493, 4358);
29:       assertFalse(node0.isNE());
30:       assertFalse(node0.isDelProp());
31:       assertFalse(node0.isFor());
32:       assertFalse(node0.isIf());
33:       assertFalse(node0.isCase());
34:       assertFalse(node0.isGetterDef());
35:       assertFalse(node0.isEmpty());
36:       assertFalse(node0.isIn());
37:       assertFalse(node0.isString());
38:       assertEquals(6119423, node0.getSourcePosition());
39:       assertFalse(node0.isTrue());
40:       assertFalse(node0.isVoid());
41:       assertFalse(node0.isRegExp());
42:       assertFalse(node0.isTry());
43:       assertFalse(node0.isCatch());
44:       assertFalse(node0.isHook());
45:       assertFalse(node0.isComma());
46:       assertFalse(node0.isSetterDef());
47:       assertFalse(node0.isGetProp());
48:       assertFalse(node0.isThrow());
49:       assertFalse(node0.isObjectLit());
50:       assertFalse(node0.isNot());
51:       assertFalse(node0.isFunction());
52:       assertFalse(node0.isInc());
53:       assertFalse(node0.isDebugger());
54:       assertFalse(node0.isAnd());
55:       assertFalse(node0.isCast());
56:       assertFalse(node0.isFalse());
57:       assertFalse(node0.isContinue());
58:       assertFalse(node0.isTypeOf());
59:       assertFalse(node0.hasChildren());
60:       assertFalse(node0.isDec());
61:       assertFalse(node0.isLabel());
62:       assertFalse(node0.isLabelName());
63:       assertFalse(node0.isAssignAdd());
64:       assertFalse(node0.isReturn());
65:       assertFalse(node0.hasOneChild());
66:       assertFalse(node0.isOr());
67:       assertFalse(node0.isNumber());
68:       assertFalse(node0.isScript());
69:       assertFalse(node0.isExprResult());
70:       assertFalse(node0.isBlock());
71:       assertFalse(node0.isWhile());
72:       assertFalse(node0.hasMoreThanOneChild());
73:       assertFalse(node0.isCall());
74:       assertFalse(node0.isGetElem());
75:       assertFalse(node0.isAssign());
76:       assertFalse(node0.isWith());
77:       assertFalse(node0.isInstanceOf());
78:       assertFalse(node0.isThis());
79:       assertFalse(node0.isNull());
80:       assertFalse(node0.isBreak());
81:       assertFalse(node0.isName());
82:       assertFalse(node0.isStringKey());
83:       assertFalse(node0.isParamList());
84:       assertFalse(node0.isAdd());
85:       assertEquals(1493, node0.getLineno());
86:       assertFalse(node0.isSwitch());
87:       assertEquals(4095, node0.getCharno());
88:       assertFalse(node0.isNew());
89:       assertFalse(node0.isDo());
90:       assertFalse(node0.isDefaultCase());
91:       assertFalse(node0.isVar());
92:       assertEquals(0, node0.getChildCount());
93:       assertFalse(node0.isArrayLit());
94:       assertEquals(1, node0.getType());
95:       assertNotNull(node0);
96:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
97:       assertEquals(53, Node.INPUT_ID);
98:       assertEquals(29, Node.JSDOC_INFO_PROP);
99:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
100:       assertEquals(43, Node.IS_CONSTANT_NAME);
101:       assertEquals(56, Node.CHANGE_TIME);
102:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
103:       assertEquals(36, Node.QUOTED_PROP);
104:       assertEquals(46, Node.IS_NAMESPACE);
105:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
106:       assertEquals(55, Node.INFERRED_FUNCTION);
107:       assertEquals(39, Node.EMPTY_BLOCK);
108:       assertEquals(30, Node.VAR_ARGS_NAME);
109:       assertEquals(57, Node.LAST_PROP);
110:       assertEquals(2, Node.POST_FLAG);
111:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
112:       assertEquals(47, Node.IS_DISPATCHER);
113:       assertEquals(52, Node.LENGTH);
114:       assertEquals(40, Node.ORIGINALNAME_PROP);
115:       assertEquals(15, Node.NO_SIDE_EFFECTS);
116:       assertEquals(49, Node.DIRECT_EVAL);
117:       assertEquals(50, Node.FREE_CALL);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(8, Node.FLAG_NO_THROWS);
120:       assertEquals(54, Node.SLASH_V);
121:       assertEquals(51, Node.STATIC_SOURCE_FILE);
122:       assertEquals(57, Node.REFLECTED_OBJECT);
123:       assertEquals(32, Node.INCRDECR_PROP);
124:       assertEquals(4095, Node.COLUMN_MASK);
125:       assertEquals(37, Node.OPT_ARG_NAME);
126:       assertEquals(48, Node.DIRECTIVES);
127:       assertEquals(1, Node.DECR_FLAG);
128:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
129:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
130:       assertEquals(12, Node.COLUMN_BITS);
131:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
132:       
133:       Node node1 = Node.newNumber((double) 49, 52, 494);
134:       assertFalse(node1.isDo());
135:       assertEquals(39, node1.getType());
136:       assertFalse(node1.isAdd());
137:       assertEquals(213486, node1.getSourcePosition());
138:       assertFalse(node1.hasMoreThanOneChild());
139:       assertFalse(node1.isContinue());
140:       assertFalse(node1.isReturn());
141:       assertFalse(node1.isLabel());
142:       assertFalse(node1.isNew());
143:       assertFalse(node1.isBlock());
144:       assertFalse(node1.isAssignAdd());
145:       assertFalse(node1.isVar());
146:       assertFalse(node1.isWhile());
147:       assertFalse(node1.isLabelName());
148:       assertFalse(node1.isCast());
149:       assertFalse(node1.isStringKey());
150:       assertFalse(node1.isParamList());
151:       assertFalse(node1.isScript());
152:       assertFalse(node1.isRegExp());
153:       assertFalse(node1.isFunction());
154:       assertEquals(52, node1.getLineno());
155:       assertFalse(node1.isCatch());
156:       assertFalse(node1.isWith());
157:       assertFalse(node1.hasOneChild());
158:       assertFalse(node1.isTry());
159:       assertFalse(node1.isFor());
160:       assertFalse(node1.isIf());
161:       assertFalse(node1.isThis());
162:       assertFalse(node1.isSetterDef());
163:       assertFalse(node1.isInstanceOf());
164:       assertFalse(node1.isIn());
165:       assertFalse(node1.isNE());
166:       assertFalse(node1.isCase());
167:       assertFalse(node1.isInc());
168:       assertFalse(node1.isString());
169:       assertFalse(node1.isHook());
170:       assertTrue(node1.isNumber());
171:       assertFalse(node1.isThrow());
172:       assertFalse(node1.isGetterDef());
173:       assertFalse(node1.isFalse());
174:       assertFalse(node1.isGetProp());
175:       assertEquals(494, node1.getCharno());
176:       assertFalse(node1.isArrayLit());
177:       assertFalse(node1.isSwitch());
178:       assertFalse(node1.isAnd());
179:       assertFalse(node1.isDefaultCase());
180:       assertFalse(node1.isNot());
181:       assertFalse(node1.isDebugger());
182:       assertFalse(node1.isObjectLit());
183:       assertFalse(node1.isExprResult());
184:       assertEquals(0, node1.getChildCount());
185:       assertFalse(node1.isBreak());
186:       assertFalse(node1.hasChildren());
187:       assertFalse(node1.isDec());
188:       assertFalse(node1.isDelProp());
189:       assertFalse(node1.isTypeOf());
190:       assertFalse(node1.isNull());
191:       assertFalse(node1.isComma());
192:       assertFalse(node1.isAssign());
193:       assertFalse(node1.isGetElem());
194:       assertFalse(node1.isEmpty());
195:       assertFalse(node1.isCall());
196:       assertFalse(node1.isOr());
197:       assertFalse(node1.isTrue());
198:       assertFalse(node1.isVoid());
199:       assertFalse(node1.isName());
200:       assertNotNull(node1);
201:       assertFalse(node1.equals((Object)node0));
202:       assertEquals(32, Node.INCRDECR_PROP);
203:       assertEquals(56, Node.CHANGE_TIME);
204:       assertEquals(51, Node.STATIC_SOURCE_FILE);
205:       assertEquals(12, Node.COLUMN_BITS);
206:       assertEquals(2, Node.POST_FLAG);
207:       assertEquals(46, Node.IS_NAMESPACE);
208:       assertEquals(47, Node.IS_DISPATCHER);
209:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
210:       assertEquals(29, Node.JSDOC_INFO_PROP);
211:       assertEquals(1, Node.DECR_FLAG);
212:       assertEquals(57, Node.LAST_PROP);
213:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
214:       assertEquals(15, Node.NO_SIDE_EFFECTS);
215:       assertEquals(53, Node.INPUT_ID);
216:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
217:       assertEquals(52, Node.LENGTH);
218:       assertEquals(36, Node.QUOTED_PROP);
219:       assertEquals(57, Node.REFLECTED_OBJECT);
220:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
221:       assertEquals(49, Node.DIRECT_EVAL);
222:       assertEquals(4095, Node.COLUMN_MASK);
223:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
225:       assertEquals(37, Node.OPT_ARG_NAME);
226:       assertEquals(48, Node.DIRECTIVES);
227:       assertEquals(8, Node.FLAG_NO_THROWS);
228:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
229:       assertEquals(50, Node.FREE_CALL);
230:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
231:       assertEquals(55, Node.INFERRED_FUNCTION);
232:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
233:       assertEquals(39, Node.EMPTY_BLOCK);
234:       assertEquals(54, Node.SLASH_V);
235:       assertEquals(43, Node.IS_CONSTANT_NAME);
236:       assertEquals(30, Node.VAR_ARGS_NAME);
237:       assertEquals(40, Node.ORIGINALNAME_PROP);
238:       
239:       JSDocInfo jSDocInfo0 = new JSDocInfo(false);
240:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
241:       assertFalse(jSDocInfo0.isExterns());
242:       assertFalse(jSDocInfo0.isIdGenerator());
243:       assertFalse(jSDocInfo0.isNoShadow());
244:       assertFalse(jSDocInfo0.isWizaction());
245:       assertFalse(jSDocInfo0.isOverride());
246:       assertEquals("JSDocInfo", jSDocInfo0.toString());
247:       assertFalse(jSDocInfo0.isNgInject());
248:       assertFalse(jSDocInfo0.makesDicts());
249:       assertNull(jSDocInfo0.getVersion());
250:       assertFalse(jSDocInfo0.isJaggerModule());
251:       assertNull(jSDocInfo0.getMeaning());
252:       assertFalse(jSDocInfo0.isNoSideEffects());
253:       assertFalse(jSDocInfo0.makesStructs());
254:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
255:       assertFalse(jSDocInfo0.isMappedIdGenerator());
256:       assertFalse(jSDocInfo0.isJaggerProvide());
257:       assertFalse(jSDocInfo0.isDisposes());
258:       assertFalse(jSDocInfo0.hasType());
259:       assertFalse(jSDocInfo0.containsDeclaration());
260:       assertFalse(jSDocInfo0.hasTypedefType());
261:       assertNull(jSDocInfo0.getOriginalCommentString());
262:       assertNull(jSDocInfo0.getLendsName());
263:       assertFalse(jSDocInfo0.isDeprecated());
264:       assertFalse(jSDocInfo0.hasModifies());
265:       assertFalse(jSDocInfo0.isExpose());
266:       assertFalse(jSDocInfo0.isHidden());
267:       assertEquals(0, jSDocInfo0.getParameterCount());
268:       assertFalse(jSDocInfo0.hasBaseType());
269:       assertFalse(jSDocInfo0.isExport());
270:       assertNull(jSDocInfo0.getReturnDescription());
271:       assertFalse(jSDocInfo0.isDefine());
272:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
273:       assertFalse(jSDocInfo0.shouldPreserveTry());
274:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
275:       assertFalse(jSDocInfo0.isStableIdGenerator());
276:       assertNull(jSDocInfo0.getLicense());
277:       assertFalse(jSDocInfo0.isNoTypeCheck());
278:       assertFalse(jSDocInfo0.isNoAlias());
279:       assertFalse(jSDocInfo0.hasReturnType());
280:       assertFalse(jSDocInfo0.isConstant());
281:       assertFalse(jSDocInfo0.hasThisType());
282:       assertNull(jSDocInfo0.getDescription());
283:       assertNull(jSDocInfo0.getFileOverview());
284:       assertFalse(jSDocInfo0.isJavaDispatch());
285:       assertNull(jSDocInfo0.getVisibility());
286:       assertFalse(jSDocInfo0.hasEnumParameterType());
287:       assertFalse(jSDocInfo0.isImplicitCast());
288:       assertFalse(jSDocInfo0.isNoCompile());
289:       assertFalse(jSDocInfo0.isJaggerInject());
290:       assertFalse(jSDocInfo0.hasFileOverview());
291:       assertFalse(jSDocInfo0.isConstructor());
292:       assertNull(jSDocInfo0.getBlockDescription());
293:       assertFalse(jSDocInfo0.isInterface());
294:       assertNull(jSDocInfo0.getDeprecationReason());
295:       assertNotNull(jSDocInfo0);
296:       
297:       Node node2 = node1.setJSDocInfo(jSDocInfo0);
298:       assertFalse(node1.isDo());
299:       assertEquals(39, node1.getType());
300:       assertFalse(node1.isAdd());
301:       assertEquals(213486, node1.getSourcePosition());
302:       assertFalse(node1.hasMoreThanOneChild());
303:       assertFalse(node1.isContinue());
304:       assertFalse(node1.isReturn());
305:       assertFalse(node1.isLabel());
306:       assertFalse(node1.isNew());
307:       assertFalse(node1.isBlock());
308:       assertFalse(node1.isAssignAdd());
309:       assertFalse(node1.isVar());
310:       assertFalse(node1.isWhile());
311:       assertFalse(node1.isLabelName());
312:       assertFalse(node1.isCast());
313:       assertFalse(node1.isStringKey());
314:       assertFalse(node1.isParamList());
315:       assertFalse(node1.isScript());
316:       assertFalse(node1.isRegExp());
317:       assertFalse(node1.isFunction());
318:       assertEquals(52, node1.getLineno());
319:       assertFalse(node1.isCatch());
320:       assertFalse(node1.isWith());
321:       assertFalse(node1.hasOneChild());
322:       assertFalse(node1.isTry());
323:       assertFalse(node1.isFor());
324:       assertFalse(node1.isIf());
325:       assertFalse(node1.isThis());
326:       assertFalse(node1.isSetterDef());
327:       assertFalse(node1.isInstanceOf());
328:       assertFalse(node1.isIn());
329:       assertFalse(node1.isNE());
330:       assertFalse(node1.isCase());
331:       assertFalse(node1.isInc());
332:       assertFalse(node1.isString());
333:       assertFalse(node1.isHook());
334:       assertTrue(node1.isNumber());
335:       assertFalse(node1.isThrow());
336:       assertFalse(node1.isGetterDef());
337:       assertFalse(node1.isFalse());
338:       assertFalse(node1.isGetProp());
339:       assertEquals(494, node1.getCharno());
340:       assertFalse(node1.isArrayLit());
341:       assertFalse(node1.isSwitch());
342:       assertFalse(node1.isAnd());
343:       assertFalse(node1.isDefaultCase());
344:       assertFalse(node1.isNot());
345:       assertFalse(node1.isDebugger());
346:       assertFalse(node1.isObjectLit());
347:       assertFalse(node1.isExprResult());
348:       assertEquals(0, node1.getChildCount());
349:       assertFalse(node1.isBreak());
350:       assertFalse(node1.hasChildren());
351:       assertFalse(node1.isDec());
352:       assertFalse(node1.isDelProp());
353:       assertFalse(node1.isTypeOf());
354:       assertFalse(node1.isNull());
355:       assertFalse(node1.isComma());
356:       assertFalse(node1.isAssign());
357:       assertFalse(node1.isGetElem());
358:       assertFalse(node1.isEmpty());
359:       assertFalse(node1.isCall());
360:       assertFalse(node1.isOr());
361:       assertFalse(node1.isTrue());
362:       assertFalse(node1.isVoid());
363:       assertFalse(node1.isName());
364:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
365:       assertFalse(jSDocInfo0.isExterns());
366:       assertFalse(jSDocInfo0.isIdGenerator());
367:       assertFalse(jSDocInfo0.isNoShadow());
368:       assertFalse(jSDocInfo0.isWizaction());
369:       assertFalse(jSDocInfo0.isOverride());
370:       assertEquals("JSDocInfo", jSDocInfo0.toString());
371:       assertFalse(jSDocInfo0.isNgInject());
372:       assertFalse(jSDocInfo0.makesDicts());
373:       assertNull(jSDocInfo0.getVersion());
374:       assertFalse(jSDocInfo0.isJaggerModule());
375:       assertNull(jSDocInfo0.getMeaning());
376:       assertFalse(jSDocInfo0.isNoSideEffects());
377:       assertFalse(jSDocInfo0.makesStructs());
378:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
379:       assertFalse(jSDocInfo0.isMappedIdGenerator());
380:       assertFalse(jSDocInfo0.isJaggerProvide());
381:       assertFalse(jSDocInfo0.isDisposes());
382:       assertFalse(jSDocInfo0.hasType());
383:       assertFalse(jSDocInfo0.containsDeclaration());
384:       assertFalse(jSDocInfo0.hasTypedefType());
385:       assertNull(jSDocInfo0.getOriginalCommentString());
386:       assertNull(jSDocInfo0.getLendsName());
387:       assertFalse(jSDocInfo0.isDeprecated());
388:       assertFalse(jSDocInfo0.hasModifies());
389:       assertFalse(jSDocInfo0.isExpose());
390:       assertFalse(jSDocInfo0.isHidden());
391:       assertEquals(0, jSDocInfo0.getParameterCount());
392:       assertFalse(jSDocInfo0.hasBaseType());
393:       assertFalse(jSDocInfo0.isExport());
394:       assertNull(jSDocInfo0.getReturnDescription());
395:       assertFalse(jSDocInfo0.isDefine());
396:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
397:       assertFalse(jSDocInfo0.shouldPreserveTry());
398:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
399:       assertFalse(jSDocInfo0.isStableIdGenerator());
400:       assertNull(jSDocInfo0.getLicense());
401:       assertFalse(jSDocInfo0.isNoTypeCheck());
402:       assertFalse(jSDocInfo0.isNoAlias());
403:       assertFalse(jSDocInfo0.hasReturnType());
404:       assertFalse(jSDocInfo0.isConstant());
405:       assertFalse(jSDocInfo0.hasThisType());
406:       assertNull(jSDocInfo0.getDescription());
407:       assertNull(jSDocInfo0.getFileOverview());
408:       assertFalse(jSDocInfo0.isJavaDispatch());
409:       assertNull(jSDocInfo0.getVisibility());
410:       assertFalse(jSDocInfo0.hasEnumParameterType());
411:       assertFalse(jSDocInfo0.isImplicitCast());
412:       assertFalse(jSDocInfo0.isNoCompile());
413:       assertFalse(jSDocInfo0.isJaggerInject());
414:       assertFalse(jSDocInfo0.hasFileOverview());
415:       assertFalse(jSDocInfo0.isConstructor());
416:       assertNull(jSDocInfo0.getBlockDescription());
417:       assertFalse(jSDocInfo0.isInterface());
418:       assertNull(jSDocInfo0.getDeprecationReason());
419:       assertFalse(node2.isDefaultCase());
420:       assertFalse(node2.isTrue());
421:       assertFalse(node2.isDebugger());
422:       assertFalse(node2.isRegExp());
423:       assertFalse(node2.isFunction());
424:       assertFalse(node2.isArrayLit());
425:       assertFalse(node2.isCatch());
426:       assertFalse(node2.isParamList());
427:       assertFalse(node2.isDelProp());
428:       assertFalse(node2.isVoid());
429:       assertFalse(node2.isIf());
430:       assertFalse(node2.isNE());
431:       assertFalse(node2.isSetterDef());
432:       assertFalse(node2.isEmpty());
433:       assertFalse(node2.isNull());
434:       assertEquals(494, node2.getCharno());
435:       assertEquals(0, node2.getChildCount());
436:       assertFalse(node2.isIn());
437:       assertFalse(node2.isAdd());
438:       assertFalse(node2.isVar());
439:       assertFalse(node2.isNew());
440:       assertEquals(39, node2.getType());
441:       assertEquals(213486, node2.getSourcePosition());
442:       assertFalse(node2.isInc());
443:       assertFalse(node2.hasMoreThanOneChild());
444:       assertFalse(node2.isStringKey());
445:       assertFalse(node2.isSwitch());
446:       assertFalse(node2.isThis());
447:       assertFalse(node2.isFor());
448:       assertFalse(node2.isGetterDef());
449:       assertFalse(node2.isHook());
450:       assertFalse(node2.hasOneChild());
451:       assertFalse(node2.isBlock());
452:       assertFalse(node2.isCase());
453:       assertFalse(node2.isTry());
454:       assertFalse(node2.isScript());
455:       assertFalse(node2.isExprResult());
456:       assertFalse(node2.isNot());
457:       assertEquals(52, node2.getLineno());
458:       assertFalse(node2.isWith());
459:       assertFalse(node2.isObjectLit());
460:       assertFalse(node2.isInstanceOf());
461:       assertFalse(node2.isCast());
462:       assertFalse(node2.isGetElem());
463:       assertFalse(node2.isAnd());
464:       assertFalse(node2.isLabelName());
465:       assertFalse(node2.isFalse());
466:       assertFalse(node2.isLabel());
467:       assertFalse(node2.isOr());
468:       assertFalse(node2.isThrow());
469:       assertFalse(node2.isAssignAdd());
470:       assertFalse(node2.isDo());
471:       assertFalse(node2.isString());
472:       assertFalse(node2.isWhile());
473:       assertFalse(node2.isContinue());
474:       assertFalse(node2.isCall());
475:       assertFalse(node2.isName());
476:       assertFalse(node2.isBreak());
477:       assertFalse(node2.hasChildren());
478:       assertFalse(node2.isDec());
479:       assertFalse(node2.isComma());
480:       assertFalse(node2.isAssign());
481:       assertFalse(node2.isTypeOf());
482:       assertFalse(node2.isReturn());
483:       assertFalse(node2.isGetProp());
484:       assertTrue(node2.isNumber());
485:       assertNotNull(node2);
486:       assertFalse(node1.equals((Object)node0));
487:       assertFalse(node2.equals((Object)node0));
488:       assertEquals(32, Node.INCRDECR_PROP);
489:       assertEquals(56, Node.CHANGE_TIME);
490:       assertEquals(51, Node.STATIC_SOURCE_FILE);
491:       assertEquals(12, Node.COLUMN_BITS);
492:       assertEquals(2, Node.POST_FLAG);
493:       assertEquals(46, Node.IS_NAMESPACE);
494:       assertEquals(47, Node.IS_DISPATCHER);
495:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
496:       assertEquals(29, Node.JSDOC_INFO_PROP);
497:       assertEquals(1, Node.DECR_FLAG);
498:       assertEquals(57, Node.LAST_PROP);
499:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
500:       assertEquals(15, Node.NO_SIDE_EFFECTS);
501:       assertEquals(53, Node.INPUT_ID);
502:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
503:       assertEquals(52, Node.LENGTH);
504:       assertEquals(36, Node.QUOTED_PROP);
505:       assertEquals(57, Node.REFLECTED_OBJECT);
506:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
507:       assertEquals(49, Node.DIRECT_EVAL);
508:       assertEquals(4095, Node.COLUMN_MASK);
509:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
510:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
511:       assertEquals(37, Node.OPT_ARG_NAME);
512:       assertEquals(48, Node.DIRECTIVES);
513:       assertEquals(8, Node.FLAG_NO_THROWS);
514:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
515:       assertEquals(50, Node.FREE_CALL);
516:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
517:       assertEquals(55, Node.INFERRED_FUNCTION);
518:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
519:       assertEquals(39, Node.EMPTY_BLOCK);
520:       assertEquals(54, Node.SLASH_V);
521:       assertEquals(43, Node.IS_CONSTANT_NAME);
522:       assertEquals(30, Node.VAR_ARGS_NAME);
523:       assertEquals(40, Node.ORIGINALNAME_PROP);
524:       assertEquals(8, Node.FLAG_NO_THROWS);
525:       assertEquals(48, Node.DIRECTIVES);
526:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
527:       assertEquals(4095, Node.COLUMN_MASK);
528:       assertEquals(40, Node.ORIGINALNAME_PROP);
529:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
530:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
531:       assertEquals(43, Node.IS_CONSTANT_NAME);
532:       assertEquals(54, Node.SLASH_V);
533:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
534:       assertEquals(1, Node.DECR_FLAG);
535:       assertEquals(50, Node.FREE_CALL);
536:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
537:       assertEquals(37, Node.OPT_ARG_NAME);
538:       assertEquals(32, Node.INCRDECR_PROP);
539:       assertEquals(2, Node.POST_FLAG);
540:       assertEquals(56, Node.CHANGE_TIME);
541:       assertEquals(51, Node.STATIC_SOURCE_FILE);
542:       assertEquals(12, Node.COLUMN_BITS);
543:       assertEquals(47, Node.IS_DISPATCHER);
544:       assertEquals(46, Node.IS_NAMESPACE);
545:       assertEquals(30, Node.VAR_ARGS_NAME);
546:       assertEquals(49, Node.DIRECT_EVAL);
547:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
548:       assertEquals(53, Node.INPUT_ID);
549:       assertEquals(52, Node.LENGTH);
550:       assertEquals(36, Node.QUOTED_PROP);
551:       assertEquals(57, Node.REFLECTED_OBJECT);
552:       assertEquals(57, Node.LAST_PROP);
553:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
554:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
555:       assertEquals(15, Node.NO_SIDE_EFFECTS);
556:       assertEquals(39, Node.EMPTY_BLOCK);
557:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
558:       assertEquals(55, Node.INFERRED_FUNCTION);
559:       assertEquals(29, Node.JSDOC_INFO_PROP);
560:       assertSame(node1, node2);
561:       assertSame(node2, node1);
562:       
563:       Iterable<Node> iterable0 = node0.children();
564:       assertFalse(node0.isNE());
565:       assertFalse(node0.isDelProp());
566:       assertFalse(node0.isFor());
567:       assertFalse(node0.isIf());
568:       assertFalse(node0.isCase());
569:       assertFalse(node0.isGetterDef());
570:       assertFalse(node0.isEmpty());
571:       assertFalse(node0.isIn());
572:       assertFalse(node0.isString());
573:       assertEquals(6119423, node0.getSourcePosition());
574:       assertFalse(node0.isTrue());
575:       assertFalse(node0.isVoid());
576:       assertFalse(node0.isRegExp());
577:       assertFalse(node0.isTry());
578:       assertFalse(node0.isCatch());
579:       assertFalse(node0.isHook());
580:       assertFalse(node0.isComma());
581:       assertFalse(node0.isSetterDef());
582:       assertFalse(node0.isGetProp());
583:       assertFalse(node0.isThrow());
584:       assertFalse(node0.isObjectLit());
585:       assertFalse(node0.isNot());
586:       assertFalse(node0.isFunction());
587:       assertFalse(node0.isInc());
588:       assertFalse(node0.isDebugger());
589:       assertFalse(node0.isAnd());
590:       assertFalse(node0.isCast());
591:       assertFalse(node0.isFalse());
592:       assertFalse(node0.isContinue());
593:       assertFalse(node0.isTypeOf());
594:       assertFalse(node0.hasChildren());
595:       assertFalse(node0.isDec());
596:       assertFalse(node0.isLabel());
597:       assertFalse(node0.isLabelName());
598:       assertFalse(node0.isAssignAdd());
599:       assertFalse(node0.isReturn());
600:       assertFalse(node0.hasOneChild());
601:       assertFalse(node0.isOr());
602:       assertFalse(node0.isNumber());
603:       assertFalse(node0.isScript());
604:       assertFalse(node0.isExprResult());
605:       assertFalse(node0.isBlock());
606:       assertFalse(node0.isWhile());
607:       assertFalse(node0.hasMoreThanOneChild());
608:       assertFalse(node0.isCall());
609:       assertFalse(node0.isGetElem());
610:       assertFalse(node0.isAssign());
611:       assertFalse(node0.isWith());
612:       assertFalse(node0.isInstanceOf());
613:       assertFalse(node0.isThis());
614:       assertFalse(node0.isNull());
615:       assertFalse(node0.isBreak());
616:       assertFalse(node0.isName());
617:       assertFalse(node0.isStringKey());
618:       assertFalse(node0.isParamList());
619:       assertFalse(node0.isAdd());
620:       assertEquals(1493, node0.getLineno());
621:       assertFalse(node0.isSwitch());
622:       assertEquals(4095, node0.getCharno());
623:       assertFalse(node0.isNew());
624:       assertFalse(node0.isDo());
625:       assertFalse(node0.isDefaultCase());
626:       assertFalse(node0.isVar());
627:       assertEquals(0, node0.getChildCount());
628:       assertFalse(node0.isArrayLit());
629:       assertEquals(1, node0.getType());
630:       assertNotNull(iterable0);
631:       assertFalse(node0.equals((Object)node2));
632:       assertFalse(node0.equals((Object)node1));
633:       assertFalse(iterable0.contains(node0));
634:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
635:       assertEquals(53, Node.INPUT_ID);
636:       assertEquals(29, Node.JSDOC_INFO_PROP);
637:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
638:       assertEquals(43, Node.IS_CONSTANT_NAME);
639:       assertEquals(56, Node.CHANGE_TIME);
640:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
641:       assertEquals(36, Node.QUOTED_PROP);
642:       assertEquals(46, Node.IS_NAMESPACE);
643:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
644:       assertEquals(55, Node.INFERRED_FUNCTION);
645:       assertEquals(39, Node.EMPTY_BLOCK);
646:       assertEquals(30, Node.VAR_ARGS_NAME);
647:       assertEquals(57, Node.LAST_PROP);
648:       assertEquals(2, Node.POST_FLAG);
649:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
650:       assertEquals(47, Node.IS_DISPATCHER);
651:       assertEquals(52, Node.LENGTH);
652:       assertEquals(40, Node.ORIGINALNAME_PROP);
653:       assertEquals(15, Node.NO_SIDE_EFFECTS);
654:       assertEquals(49, Node.DIRECT_EVAL);
655:       assertEquals(50, Node.FREE_CALL);
656:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
657:       assertEquals(8, Node.FLAG_NO_THROWS);
658:       assertEquals(54, Node.SLASH_V);
659:       assertEquals(51, Node.STATIC_SOURCE_FILE);
660:       assertEquals(57, Node.REFLECTED_OBJECT);
661:       assertEquals(32, Node.INCRDECR_PROP);
662:       assertEquals(4095, Node.COLUMN_MASK);
663:       assertEquals(37, Node.OPT_ARG_NAME);
664:       assertEquals(48, Node.DIRECTIVES);
665:       assertEquals(1, Node.DECR_FLAG);
666:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
667:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
668:       assertEquals(12, Node.COLUMN_BITS);
669:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
670:       
671:       boolean boolean1 = node0.isAnd();
672:       assertFalse(node0.isNE());
673:       assertFalse(node0.isDelProp());
674:       assertFalse(node0.isFor());
675:       assertFalse(node0.isIf());
676:       assertFalse(node0.isCase());
677:       assertFalse(node0.isGetterDef());
678:       assertFalse(node0.isEmpty());
679:       assertFalse(node0.isIn());
680:       assertFalse(node0.isString());
681:       assertEquals(6119423, node0.getSourcePosition());
682:       assertFalse(node0.isTrue());
683:       assertFalse(node0.isVoid());
684:       assertFalse(node0.isRegExp());
685:       assertFalse(node0.isTry());
686:       assertFalse(node0.isCatch());
687:       assertFalse(node0.isHook());
688:       assertFalse(node0.isComma());
689:       assertFalse(node0.isSetterDef());
690:       assertFalse(node0.isGetProp());
691:       assertFalse(node0.isThrow());
692:       assertFalse(node0.isObjectLit());
693:       assertFalse(node0.isNot());
694:       assertFalse(node0.isFunction());
695:       assertFalse(node0.isInc());
696:       assertFalse(node0.isDebugger());
697:       assertFalse(node0.isAnd());
698:       assertFalse(node0.isCast());
699:       assertFalse(node0.isFalse());
700:       assertFalse(node0.isContinue());
701:       assertFalse(node0.isTypeOf());
702:       assertFalse(node0.hasChildren());
703:       assertFalse(node0.isDec());
704:       assertFalse(node0.isLabel());
705:       assertFalse(node0.isLabelName());
706:       assertFalse(node0.isAssignAdd());
707:       assertFalse(node0.isReturn());
708:       assertFalse(node0.hasOneChild());
709:       assertFalse(node0.isOr());
710:       assertFalse(node0.isNumber());
711:       assertFalse(node0.isScript());
712:       assertFalse(node0.isExprResult());
713:       assertFalse(node0.isBlock());
714:       assertFalse(node0.isWhile());
715:       assertFalse(node0.hasMoreThanOneChild());
716:       assertFalse(node0.isCall());
717:       assertFalse(node0.isGetElem());
718:       assertFalse(node0.isAssign());
719:       assertFalse(node0.isWith());
720:       assertFalse(node0.isInstanceOf());
721:       assertFalse(node0.isThis());
722:       assertFalse(node0.isNull());
723:       assertFalse(node0.isBreak());
724:       assertFalse(node0.isName());
725:       assertFalse(node0.isStringKey());
726:       assertFalse(node0.isParamList());
727:       assertFalse(node0.isAdd());
728:       assertEquals(1493, node0.getLineno());
729:       assertFalse(node0.isSwitch());
730:       assertEquals(4095, node0.getCharno());
731:       assertFalse(node0.isNew());
732:       assertFalse(node0.isDo());
733:       assertFalse(node0.isDefaultCase());
734:       assertFalse(node0.isVar());
735:       assertEquals(0, node0.getChildCount());
736:       assertFalse(node0.isArrayLit());
737:       assertEquals(1, node0.getType());
738:       assertFalse(node0.equals((Object)node2));
739:       assertFalse(node0.equals((Object)node1));
740:       assertTrue(boolean1 == boolean0);
741:       assertFalse(boolean1);
742:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
743:       assertEquals(53, Node.INPUT_ID);
744:       assertEquals(29, Node.JSDOC_INFO_PROP);
745:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
746:       assertEquals(43, Node.IS_CONSTANT_NAME);
747:       assertEquals(56, Node.CHANGE_TIME);
748:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
749:       assertEquals(36, Node.QUOTED_PROP);
750:       assertEquals(46, Node.IS_NAMESPACE);
751:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
752:       assertEquals(55, Node.INFERRED_FUNCTION);
753:       assertEquals(39, Node.EMPTY_BLOCK);
754:       assertEquals(30, Node.VAR_ARGS_NAME);
755:       assertEquals(57, Node.LAST_PROP);
756:       assertEquals(2, Node.POST_FLAG);
757:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
758:       assertEquals(47, Node.IS_DISPATCHER);
759:       assertEquals(52, Node.LENGTH);
760:       assertEquals(40, Node.ORIGINALNAME_PROP);
761:       assertEquals(15, Node.NO_SIDE_EFFECTS);
762:       assertEquals(49, Node.DIRECT_EVAL);
763:       assertEquals(50, Node.FREE_CALL);
764:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
765:       assertEquals(8, Node.FLAG_NO_THROWS);
766:       assertEquals(54, Node.SLASH_V);
767:       assertEquals(51, Node.STATIC_SOURCE_FILE);
768:       assertEquals(57, Node.REFLECTED_OBJECT);
769:       assertEquals(32, Node.INCRDECR_PROP);
770:       assertEquals(4095, Node.COLUMN_MASK);
771:       assertEquals(37, Node.OPT_ARG_NAME);
772:       assertEquals(48, Node.DIRECTIVES);
773:       assertEquals(1, Node.DECR_FLAG);
774:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
775:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
776:       assertEquals(12, Node.COLUMN_BITS);
777:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
778:       
779:       jSDocInfo0.setLendsName("com.google.javascript.rhino.Node$AncestorIterable");
780:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
781:       assertFalse(jSDocInfo0.isExterns());
782:       assertFalse(jSDocInfo0.isIdGenerator());
783:       assertFalse(jSDocInfo0.isNoShadow());
784:       assertFalse(jSDocInfo0.isWizaction());
785:       assertFalse(jSDocInfo0.isOverride());
786:       assertEquals("JSDocInfo", jSDocInfo0.toString());
787:       assertFalse(jSDocInfo0.isNgInject());
788:       assertFalse(jSDocInfo0.makesDicts());
789:       assertNull(jSDocInfo0.getVersion());
790:       assertFalse(jSDocInfo0.isJaggerModule());
791:       assertNull(jSDocInfo0.getMeaning());
792:       assertFalse(jSDocInfo0.isNoSideEffects());
793:       assertFalse(jSDocInfo0.makesStructs());
794:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
795:       assertFalse(jSDocInfo0.isMappedIdGenerator());
796:       assertFalse(jSDocInfo0.isJaggerProvide());
797:       assertFalse(jSDocInfo0.isDisposes());
798:       assertFalse(jSDocInfo0.hasType());
799:       assertFalse(jSDocInfo0.containsDeclaration());
800:       assertFalse(jSDocInfo0.hasTypedefType());
801:       assertNull(jSDocInfo0.getOriginalCommentString());
802:       assertFalse(jSDocInfo0.isDeprecated());
803:       assertFalse(jSDocInfo0.hasModifies());
804:       assertFalse(jSDocInfo0.isExpose());
805:       assertFalse(jSDocInfo0.isHidden());
806:       assertEquals(0, jSDocInfo0.getParameterCount());
807:       assertFalse(jSDocInfo0.hasBaseType());
808:       assertFalse(jSDocInfo0.isExport());
809:       assertNull(jSDocInfo0.getReturnDescription());
810:       assertFalse(jSDocInfo0.isDefine());
811:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
812:       assertFalse(jSDocInfo0.shouldPreserveTry());
813:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
814:       assertFalse(jSDocInfo0.isStableIdGenerator());
815:       assertNull(jSDocInfo0.getLicense());
816:       assertFalse(jSDocInfo0.isNoTypeCheck());
817:       assertFalse(jSDocInfo0.isNoAlias());
818:       assertFalse(jSDocInfo0.hasReturnType());
819:       assertFalse(jSDocInfo0.isConstant());
820:       assertFalse(jSDocInfo0.hasThisType());
821:       assertNull(jSDocInfo0.getDescription());
822:       assertNull(jSDocInfo0.getFileOverview());
823:       assertFalse(jSDocInfo0.isJavaDispatch());
824:       assertNull(jSDocInfo0.getVisibility());
825:       assertFalse(jSDocInfo0.hasEnumParameterType());
826:       assertFalse(jSDocInfo0.isImplicitCast());
827:       assertFalse(jSDocInfo0.isNoCompile());
828:       assertEquals("com.google.javascript.rhino.Node$AncestorIterable", jSDocInfo0.getLendsName());
829:       assertFalse(jSDocInfo0.isJaggerInject());
830:       assertFalse(jSDocInfo0.hasFileOverview());
831:       assertFalse(jSDocInfo0.isConstructor());
832:       assertNull(jSDocInfo0.getBlockDescription());
833:       assertFalse(jSDocInfo0.isInterface());
834:       assertNull(jSDocInfo0.getDeprecationReason());
835:       
836:       node1.addSuppression("gs1IcjVs7cZy}^~");
837:       assertFalse(node1.isDo());
838:       assertEquals(39, node1.getType());
839:       assertFalse(node1.isAdd());
840:       assertEquals(213486, node1.getSourcePosition());
841:       assertFalse(node1.hasMoreThanOneChild());
842:       assertFalse(node1.isContinue());
843:       assertFalse(node1.isReturn());
844:       assertFalse(node1.isLabel());
845:       assertFalse(node1.isNew());
846:       assertFalse(node1.isBlock());
847:       assertFalse(node1.isAssignAdd());
848:       assertFalse(node1.isVar());
849:       assertFalse(node1.isWhile());
850:       assertFalse(node1.isLabelName());
851:       assertFalse(node1.isCast());
852:       assertFalse(node1.isStringKey());
853:       assertFalse(node1.isParamList());
854:       assertFalse(node1.isScript());
855:       assertFalse(node1.isRegExp());
856:       assertFalse(node1.isFunction());
857:       assertEquals(52, node1.getLineno());
858:       assertFalse(node1.isCatch());
859:       assertFalse(node1.isWith());
860:       assertFalse(node1.hasOneChild());
861:       assertFalse(node1.isTry());
862:       assertFalse(node1.isFor());
863:       assertFalse(node1.isIf());
864:       assertFalse(node1.isThis());
865:       assertFalse(node1.isSetterDef());
866:       assertFalse(node1.isInstanceOf());
867:       assertFalse(node1.isIn());
868:       assertFalse(node1.isNE());
869:       assertFalse(node1.isCase());
870:       assertFalse(node1.isInc());
871:       assertFalse(node1.isString());
872:       assertFalse(node1.isHook());
873:       assertTrue(node1.isNumber());
874:       assertFalse(node1.isThrow());
875:       assertFalse(node1.isGetterDef());
876:       assertFalse(node1.isFalse());
877:       assertFalse(node1.isGetProp());
878:       assertEquals(494, node1.getCharno());
879:       assertFalse(node1.isArrayLit());
880:       assertFalse(node1.isSwitch());
881:       assertFalse(node1.isAnd());
882:       assertFalse(node1.isDefaultCase());
883:       assertFalse(node1.isNot());
884:       assertFalse(node1.isDebugger());
885:       assertFalse(node1.isObjectLit());
886:       assertFalse(node1.isExprResult());
887:       assertEquals(0, node1.getChildCount());
888:       assertFalse(node1.isBreak());
889:       assertFalse(node1.hasChildren());
890:       assertFalse(node1.isDec());
891:       assertFalse(node1.isDelProp());
892:       assertFalse(node1.isTypeOf());
893:       assertFalse(node1.isNull());
894:       assertFalse(node1.isComma());
895:       assertFalse(node1.isAssign());
896:       assertFalse(node1.isGetElem());
897:       assertFalse(node1.isEmpty());
898:       assertFalse(node1.isCall());
899:       assertFalse(node1.isOr());
900:       assertFalse(node1.isTrue());
901:       assertFalse(node1.isVoid());
902:       assertFalse(node1.isName());
903:       assertFalse(node1.equals((Object)node0));
904:       assertEquals(32, Node.INCRDECR_PROP);
905:       assertEquals(56, Node.CHANGE_TIME);
906:       assertEquals(51, Node.STATIC_SOURCE_FILE);
907:       assertEquals(12, Node.COLUMN_BITS);
908:       assertEquals(2, Node.POST_FLAG);
909:       assertEquals(46, Node.IS_NAMESPACE);
910:       assertEquals(47, Node.IS_DISPATCHER);
911:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
912:       assertEquals(29, Node.JSDOC_INFO_PROP);
913:       assertEquals(1, Node.DECR_FLAG);
914:       assertEquals(57, Node.LAST_PROP);
915:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
916:       assertEquals(15, Node.NO_SIDE_EFFECTS);
917:       assertEquals(53, Node.INPUT_ID);
918:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
919:       assertEquals(52, Node.LENGTH);
920:       assertEquals(36, Node.QUOTED_PROP);
921:       assertEquals(57, Node.REFLECTED_OBJECT);
922:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
923:       assertEquals(49, Node.DIRECT_EVAL);
924:       assertEquals(4095, Node.COLUMN_MASK);
925:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
926:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
927:       assertEquals(37, Node.OPT_ARG_NAME);
928:       assertEquals(48, Node.DIRECTIVES);
929:       assertEquals(8, Node.FLAG_NO_THROWS);
930:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
931:       assertEquals(50, Node.FREE_CALL);
932:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
933:       assertEquals(55, Node.INFERRED_FUNCTION);
934:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
935:       assertEquals(39, Node.EMPTY_BLOCK);
936:       assertEquals(54, Node.SLASH_V);
937:       assertEquals(43, Node.IS_CONSTANT_NAME);
938:       assertEquals(30, Node.VAR_ARGS_NAME);
939:       assertEquals(40, Node.ORIGINALNAME_PROP);
940:       assertSame(node1, node2);
941:       
942:       boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
943:       assertTrue(boolean2 == boolean0);
944:       assertTrue(boolean2 == boolean1);
945:       assertFalse(boolean2);
946:       
947:       boolean boolean3 = node0.isArrayLit();
948:       assertFalse(node0.isNE());
949:       assertFalse(node0.isDelProp());
950:       assertFalse(node0.isFor());
951:       assertFalse(node0.isIf());
952:       assertFalse(node0.isCase());
953:       assertFalse(node0.isGetterDef());
954:       assertFalse(node0.isEmpty());
955:       assertFalse(node0.isIn());
956:       assertFalse(node0.isString());
957:       assertEquals(6119423, node0.getSourcePosition());
958:       assertFalse(node0.isTrue());
959:       assertFalse(node0.isVoid());
960:       assertFalse(node0.isRegExp());
961:       assertFalse(node0.isTry());
962:       assertFalse(node0.isCatch());
963:       assertFalse(node0.isHook());
964:       assertFalse(node0.isComma());
965:       assertFalse(node0.isSetterDef());
966:       assertFalse(node0.isGetProp());
967:       assertFalse(node0.isThrow());
968:       assertFalse(node0.isObjectLit());
969:       assertFalse(node0.isNot());
970:       assertFalse(node0.isFunction());
971:       assertFalse(node0.isInc());
972:       assertFalse(node0.isDebugger());
973:       assertFalse(node0.isAnd());
974:       assertFalse(node0.isCast());
975:       assertFalse(node0.isFalse());
976:       assertFalse(node0.isContinue());
977:       assertFalse(node0.isTypeOf());
978:       assertFalse(node0.hasChildren());
979:       assertFalse(node0.isDec());
980:       assertFalse(node0.isLabel());
981:       assertFalse(node0.isLabelName());
982:       assertFalse(node0.isAssignAdd());
983:       assertFalse(node0.isReturn());
984:       assertFalse(node0.hasOneChild());
985:       assertFalse(node0.isOr());
986:       assertFalse(node0.isNumber());
987:       assertFalse(node0.isScript());
988:       assertFalse(node0.isExprResult());
989:       assertFalse(node0.isBlock());
990:       assertFalse(node0.isWhile());
991:       assertFalse(node0.hasMoreThanOneChild());
992:       assertFalse(node0.isCall());
993:       assertFalse(node0.isGetElem());
994:       assertFalse(node0.isAssign());
995:       assertFalse(node0.isWith());
996:       assertFalse(node0.isInstanceOf());
997:       assertFalse(node0.isThis());
998:       assertFalse(node0.isNull());
999:       assertFalse(node0.isBreak());
1000:       assertFalse(node0.isName());
1001:       assertFalse(node0.isStringKey());
1002:       assertFalse(node0.isParamList());
1003:       assertFalse(node0.isAdd());
1004:       assertEquals(1493, node0.getLineno());
1005:       assertFalse(node0.isSwitch());
1006:       assertEquals(4095, node0.getCharno());
1007:       assertFalse(node0.isNew());
1008:       assertFalse(node0.isDo());
1009:       assertFalse(node0.isDefaultCase());
1010:       assertFalse(node0.isVar());
1011:       assertEquals(0, node0.getChildCount());
1012:       assertFalse(node0.isArrayLit());
1013:       assertEquals(1, node0.getType());
1014:       assertFalse(node0.equals((Object)node2));
1015:       assertFalse(node0.equals((Object)node1));
1016:       assertTrue(boolean3 == boolean0);
1017:       assertTrue(boolean3 == boolean2);
1018:       assertTrue(boolean3 == boolean1);
1019:       assertFalse(boolean3);
1020:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1021:       assertEquals(53, Node.INPUT_ID);
1022:       assertEquals(29, Node.JSDOC_INFO_PROP);
1023:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1024:       assertEquals(43, Node.IS_CONSTANT_NAME);
1025:       assertEquals(56, Node.CHANGE_TIME);
1026:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1027:       assertEquals(36, Node.QUOTED_PROP);
1028:       assertEquals(46, Node.IS_NAMESPACE);
1029:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1030:       assertEquals(55, Node.INFERRED_FUNCTION);
1031:       assertEquals(39, Node.EMPTY_BLOCK);
1032:       assertEquals(30, Node.VAR_ARGS_NAME);
1033:       assertEquals(57, Node.LAST_PROP);
1034:       assertEquals(2, Node.POST_FLAG);
1035:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1036:       assertEquals(47, Node.IS_DISPATCHER);
1037:       assertEquals(52, Node.LENGTH);
1038:       assertEquals(40, Node.ORIGINALNAME_PROP);
1039:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1040:       assertEquals(49, Node.DIRECT_EVAL);
1041:       assertEquals(50, Node.FREE_CALL);
1042:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1043:       assertEquals(8, Node.FLAG_NO_THROWS);
1044:       assertEquals(54, Node.SLASH_V);
1045:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1046:       assertEquals(57, Node.REFLECTED_OBJECT);
1047:       assertEquals(32, Node.INCRDECR_PROP);
1048:       assertEquals(4095, Node.COLUMN_MASK);
1049:       assertEquals(37, Node.OPT_ARG_NAME);
1050:       assertEquals(48, Node.DIRECTIVES);
1051:       assertEquals(1, Node.DECR_FLAG);
1052:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1053:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1054:       assertEquals(12, Node.COLUMN_BITS);
1055:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1056:       
1057:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node2);
1058:       assertFalse(node1.isDo());
1059:       assertEquals(39, node1.getType());
1060:       assertFalse(node1.isAdd());
1061:       assertEquals(213486, node1.getSourcePosition());
1062:       assertFalse(node1.hasMoreThanOneChild());
1063:       assertFalse(node1.isContinue());
1064:       assertFalse(node1.isReturn());
1065:       assertFalse(node1.isLabel());
1066:       assertFalse(node1.isNew());
1067:       assertFalse(node1.isBlock());
1068:       assertFalse(node1.isAssignAdd());
1069:       assertFalse(node1.isVar());
1070:       assertFalse(node1.isWhile());
1071:       assertFalse(node1.isLabelName());
1072:       assertFalse(node1.isCast());
1073:       assertFalse(node1.isStringKey());
1074:       assertFalse(node1.isParamList());
1075:       assertFalse(node1.isScript());
1076:       assertFalse(node1.isRegExp());
1077:       assertFalse(node1.isFunction());
1078:       assertEquals(52, node1.getLineno());
1079:       assertFalse(node1.isCatch());
1080:       assertFalse(node1.isWith());
1081:       assertFalse(node1.hasOneChild());
1082:       assertFalse(node1.isTry());
1083:       assertFalse(node1.isFor());
1084:       assertFalse(node1.isIf());
1085:       assertFalse(node1.isThis());
1086:       assertFalse(node1.isSetterDef());
1087:       assertFalse(node1.isInstanceOf());
1088:       assertFalse(node1.isIn());
1089:       assertFalse(node1.isNE());
1090:       assertFalse(node1.isCase());
1091:       assertFalse(node1.isInc());
1092:       assertFalse(node1.isString());
1093:       assertFalse(node1.isHook());
1094:       assertTrue(node1.isNumber());
1095:       assertFalse(node1.isThrow());
1096:       assertFalse(node1.isGetterDef());
1097:       assertFalse(node1.isFalse());
1098:       assertFalse(node1.isGetProp());
1099:       assertEquals(494, node1.getCharno());
1100:       assertFalse(node1.isArrayLit());
1101:       assertFalse(node1.isSwitch());
1102:       assertFalse(node1.isAnd());
1103:       assertFalse(node1.isDefaultCase());
1104:       assertFalse(node1.isNot());
1105:       assertFalse(node1.isDebugger());
1106:       assertFalse(node1.isObjectLit());
1107:       assertFalse(node1.isExprResult());
1108:       assertEquals(0, node1.getChildCount());
1109:       assertFalse(node1.isBreak());
1110:       assertFalse(node1.hasChildren());
1111:       assertFalse(node1.isDec());
1112:       assertFalse(node1.isDelProp());
1113:       assertFalse(node1.isTypeOf());
1114:       assertFalse(node1.isNull());
1115:       assertFalse(node1.isComma());
1116:       assertFalse(node1.isAssign());
1117:       assertFalse(node1.isGetElem());
1118:       assertFalse(node1.isEmpty());
1119:       assertFalse(node1.isCall());
1120:       assertFalse(node1.isOr());
1121:       assertFalse(node1.isTrue());
1122:       assertFalse(node1.isVoid());
1123:       assertFalse(node1.isName());
1124:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1125:       assertFalse(jSDocInfo0.isExterns());
1126:       assertFalse(jSDocInfo0.isIdGenerator());
1127:       assertFalse(jSDocInfo0.isNoShadow());
1128:       assertFalse(jSDocInfo0.isWizaction());
1129:       assertFalse(jSDocInfo0.isOverride());
1130:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1131:       assertFalse(jSDocInfo0.isNgInject());
1132:       assertFalse(jSDocInfo0.makesDicts());
1133:       assertNull(jSDocInfo0.getVersion());
1134:       assertFalse(jSDocInfo0.isJaggerModule());
1135:       assertNull(jSDocInfo0.getMeaning());
1136:       assertFalse(jSDocInfo0.isNoSideEffects());
1137:       assertFalse(jSDocInfo0.makesStructs());
1138:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1139:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1140:       assertFalse(jSDocInfo0.isJaggerProvide());
1141:       assertFalse(jSDocInfo0.isDisposes());
1142:       assertFalse(jSDocInfo0.hasType());
1143:       assertFalse(jSDocInfo0.containsDeclaration());
1144:       assertFalse(jSDocInfo0.hasTypedefType());
1145:       assertNull(jSDocInfo0.getOriginalCommentString());
1146:       assertFalse(jSDocInfo0.isDeprecated());
1147:       assertFalse(jSDocInfo0.hasModifies());
1148:       assertFalse(jSDocInfo0.isExpose());
1149:       assertFalse(jSDocInfo0.isHidden());
1150:       assertEquals(0, jSDocInfo0.getParameterCount());
1151:       assertFalse(jSDocInfo0.hasBaseType());
1152:       assertFalse(jSDocInfo0.isExport());
1153:       assertNull(jSDocInfo0.getReturnDescription());
1154:       assertFalse(jSDocInfo0.isDefine());
1155:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1156:       assertFalse(jSDocInfo0.shouldPreserveTry());
1157:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1158:       assertFalse(jSDocInfo0.isStableIdGenerator());
1159:       assertNull(jSDocInfo0.getLicense());
1160:       assertFalse(jSDocInfo0.isNoTypeCheck());
1161:       assertFalse(jSDocInfo0.isNoAlias());
1162:       assertFalse(jSDocInfo0.hasReturnType());
1163:       assertFalse(jSDocInfo0.isConstant());
1164:       assertFalse(jSDocInfo0.hasThisType());
1165:       assertNull(jSDocInfo0.getDescription());
1166:       assertNull(jSDocInfo0.getFileOverview());
1167:       assertFalse(jSDocInfo0.isJavaDispatch());
1168:       assertNull(jSDocInfo0.getVisibility());
1169:       assertFalse(jSDocInfo0.hasEnumParameterType());
1170:       assertFalse(jSDocInfo0.isImplicitCast());
1171:       assertFalse(jSDocInfo0.isNoCompile());
1172:       assertEquals("com.google.javascript.rhino.Node$AncestorIterable", jSDocInfo0.getLendsName());
1173:       assertFalse(jSDocInfo0.isJaggerInject());
1174:       assertFalse(jSDocInfo0.hasFileOverview());
1175:       assertFalse(jSDocInfo0.isConstructor());
1176:       assertNull(jSDocInfo0.getBlockDescription());
1177:       assertFalse(jSDocInfo0.isInterface());
1178:       assertNull(jSDocInfo0.getDeprecationReason());
1179:       assertFalse(node2.isDefaultCase());
1180:       assertFalse(node2.isTrue());
1181:       assertFalse(node2.isDebugger());
1182:       assertFalse(node2.isRegExp());
1183:       assertFalse(node2.isFunction());
1184:       assertFalse(node2.isArrayLit());
1185:       assertFalse(node2.isCatch());
1186:       assertFalse(node2.isParamList());
1187:       assertFalse(node2.isDelProp());
1188:       assertFalse(node2.isVoid());
1189:       assertFalse(node2.isIf());
1190:       assertFalse(node2.isNE());
1191:       assertFalse(node2.isSetterDef());
1192:       assertFalse(node2.isEmpty());
1193:       assertFalse(node2.isNull());
1194:       assertEquals(494, node2.getCharno());
1195:       assertEquals(0, node2.getChildCount());
1196:       assertFalse(node2.isIn());
1197:       assertFalse(node2.isAdd());
1198:       assertFalse(node2.isVar());
1199:       assertFalse(node2.isNew());
1200:       assertEquals(39, node2.getType());
1201:       assertEquals(213486, node2.getSourcePosition());
1202:       assertFalse(node2.isInc());
1203:       assertFalse(node2.hasMoreThanOneChild());
1204:       assertFalse(node2.isStringKey());
1205:       assertFalse(node2.isSwitch());
1206:       assertFalse(node2.isThis());
1207:       assertFalse(node2.isFor());
1208:       assertFalse(node2.isGetterDef());
1209:       assertFalse(node2.isHook());
1210:       assertFalse(node2.hasOneChild());
1211:       assertFalse(node2.isBlock());
1212:       assertFalse(node2.isCase());
1213:       assertFalse(node2.isTry());
1214:       assertFalse(node2.isScript());
1215:       assertFalse(node2.isExprResult());
1216:       assertFalse(node2.isNot());
1217:       assertEquals(52, node2.getLineno());
1218:       assertFalse(node2.isWith());
1219:       assertFalse(node2.isObjectLit());
1220:       assertFalse(node2.isInstanceOf());
1221:       assertFalse(node2.isCast());
1222:       assertFalse(node2.isGetElem());
1223:       assertFalse(node2.isAnd());
1224:       assertFalse(node2.isLabelName());
1225:       assertFalse(node2.isFalse());
1226:       assertFalse(node2.isLabel());
1227:       assertFalse(node2.isOr());
1228:       assertFalse(node2.isThrow());
1229:       assertFalse(node2.isAssignAdd());
1230:       assertFalse(node2.isDo());
1231:       assertFalse(node2.isString());
1232:       assertFalse(node2.isWhile());
1233:       assertFalse(node2.isContinue());
1234:       assertFalse(node2.isCall());
1235:       assertFalse(node2.isName());
1236:       assertFalse(node2.isBreak());
1237:       assertFalse(node2.hasChildren());
1238:       assertFalse(node2.isDec());
1239:       assertFalse(node2.isComma());
1240:       assertFalse(node2.isAssign());
1241:       assertFalse(node2.isTypeOf());
1242:       assertFalse(node2.isReturn());
1243:       assertFalse(node2.isGetProp());
1244:       assertTrue(node2.isNumber());
1245:       assertNull(node_NodeMismatch0);
1246:       assertFalse(node1.equals((Object)node0));
1247:       assertFalse(node2.equals((Object)node0));
1248:       assertEquals(32, Node.INCRDECR_PROP);
1249:       assertEquals(56, Node.CHANGE_TIME);
1250:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1251:       assertEquals(12, Node.COLUMN_BITS);
1252:       assertEquals(2, Node.POST_FLAG);
1253:       assertEquals(46, Node.IS_NAMESPACE);
1254:       assertEquals(47, Node.IS_DISPATCHER);
1255:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1256:       assertEquals(29, Node.JSDOC_INFO_PROP);
1257:       assertEquals(1, Node.DECR_FLAG);
1258:       assertEquals(57, Node.LAST_PROP);
1259:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1260:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1261:       assertEquals(53, Node.INPUT_ID);
1262:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1263:       assertEquals(52, Node.LENGTH);
1264:       assertEquals(36, Node.QUOTED_PROP);
1265:       assertEquals(57, Node.REFLECTED_OBJECT);
1266:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1267:       assertEquals(49, Node.DIRECT_EVAL);
1268:       assertEquals(4095, Node.COLUMN_MASK);
1269:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1270:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1271:       assertEquals(37, Node.OPT_ARG_NAME);
1272:       assertEquals(48, Node.DIRECTIVES);
1273:       assertEquals(8, Node.FLAG_NO_THROWS);
1274:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1275:       assertEquals(50, Node.FREE_CALL);
1276:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1277:       assertEquals(55, Node.INFERRED_FUNCTION);
1278:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1279:       assertEquals(39, Node.EMPTY_BLOCK);
1280:       assertEquals(54, Node.SLASH_V);
1281:       assertEquals(43, Node.IS_CONSTANT_NAME);
1282:       assertEquals(30, Node.VAR_ARGS_NAME);
1283:       assertEquals(40, Node.ORIGINALNAME_PROP);
1284:       assertEquals(8, Node.FLAG_NO_THROWS);
1285:       assertEquals(48, Node.DIRECTIVES);
1286:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1287:       assertEquals(4095, Node.COLUMN_MASK);
1288:       assertEquals(40, Node.ORIGINALNAME_PROP);
1289:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1290:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1291:       assertEquals(43, Node.IS_CONSTANT_NAME);
1292:       assertEquals(54, Node.SLASH_V);
1293:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1294:       assertEquals(1, Node.DECR_FLAG);
1295:       assertEquals(50, Node.FREE_CALL);
1296:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1297:       assertEquals(37, Node.OPT_ARG_NAME);
1298:       assertEquals(32, Node.INCRDECR_PROP);
1299:       assertEquals(2, Node.POST_FLAG);
1300:       assertEquals(56, Node.CHANGE_TIME);
1301:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1302:       assertEquals(12, Node.COLUMN_BITS);
1303:       assertEquals(47, Node.IS_DISPATCHER);
1304:       assertEquals(46, Node.IS_NAMESPACE);
1305:       assertEquals(30, Node.VAR_ARGS_NAME);
1306:       assertEquals(49, Node.DIRECT_EVAL);
1307:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1308:       assertEquals(53, Node.INPUT_ID);
1309:       assertEquals(52, Node.LENGTH);
1310:       assertEquals(36, Node.QUOTED_PROP);
1311:       assertEquals(57, Node.REFLECTED_OBJECT);
1312:       assertEquals(57, Node.LAST_PROP);
1313:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1314:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1315:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1316:       assertEquals(39, Node.EMPTY_BLOCK);
1317:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1318:       assertEquals(55, Node.INFERRED_FUNCTION);
1319:       assertEquals(29, Node.JSDOC_INFO_PROP);
1320:       assertSame(node1, node2);
1321:       assertSame(node2, node1);
1322:       
1323:       boolean boolean4 = node0.mayMutateGlobalStateOrThrow();
1324:       assertFalse(node0.isNE());
1325:       assertFalse(node0.isDelProp());
1326:       assertFalse(node0.isFor());
1327:       assertFalse(node0.isIf());
1328:       assertFalse(node0.isCase());
1329:       assertFalse(node0.isGetterDef());
1330:       assertFalse(node0.isEmpty());
1331:       assertFalse(node0.isIn());
1332:       assertFalse(node0.isString());
1333:       assertEquals(6119423, node0.getSourcePosition());
1334:       assertFalse(node0.isTrue());
1335:       assertFalse(node0.isVoid());
1336:       assertFalse(node0.isRegExp());
1337:       assertFalse(node0.isTry());
1338:       assertFalse(node0.isCatch());
1339:       assertFalse(node0.isHook());
1340:       assertFalse(node0.isComma());
1341:       assertFalse(node0.isSetterDef());
1342:       assertFalse(node0.isGetProp());
1343:       assertFalse(node0.isThrow());
1344:       assertFalse(node0.isObjectLit());
1345:       assertFalse(node0.isNot());
1346:       assertFalse(node0.isFunction());
1347:       assertFalse(node0.isInc());
1348:       assertFalse(node0.isDebugger());
1349:       assertFalse(node0.isAnd());
1350:       assertFalse(node0.isCast());
1351:       assertFalse(node0.isFalse());
1352:       assertFalse(node0.isContinue());
1353:       assertFalse(node0.isTypeOf());
1354:       assertFalse(node0.hasChildren());
1355:       assertFalse(node0.isDec());
1356:       assertFalse(node0.isLabel());
1357:       assertFalse(node0.isLabelName());
1358:       assertFalse(node0.isAssignAdd());
1359:       assertFalse(node0.isReturn());
1360:       assertFalse(node0.hasOneChild());
1361:       assertFalse(node0.isOr());
1362:       assertFalse(node0.isNumber());
1363:       assertFalse(node0.isScript());
1364:       assertFalse(node0.isExprResult());
1365:       assertFalse(node0.isBlock());
1366:       assertFalse(node0.isWhile());
1367:       assertFalse(node0.hasMoreThanOneChild());
1368:       assertFalse(node0.isCall());
1369:       assertFalse(node0.isGetElem());
1370:       assertFalse(node0.isAssign());
1371:       assertFalse(node0.isWith());
1372:       assertFalse(node0.isInstanceOf());
1373:       assertFalse(node0.isThis());
1374:       assertFalse(node0.isNull());
1375:       assertFalse(node0.isBreak());
1376:       assertFalse(node0.isName());
1377:       assertFalse(node0.isStringKey());
1378:       assertFalse(node0.isParamList());
1379:       assertFalse(node0.isAdd());
1380:       assertEquals(1493, node0.getLineno());
1381:       assertFalse(node0.isSwitch());
1382:       assertEquals(4095, node0.getCharno());
1383:       assertFalse(node0.isNew());
1384:       assertFalse(node0.isDo());
1385:       assertFalse(node0.isDefaultCase());
1386:       assertFalse(node0.isVar());
1387:       assertEquals(0, node0.getChildCount());
1388:       assertFalse(node0.isArrayLit());
1389:       assertEquals(1, node0.getType());
1390:       assertFalse(node0.equals((Object)node2));
1391:       assertFalse(node0.equals((Object)node1));
1392:       assertFalse(boolean4 == boolean1);
1393:       assertFalse(boolean4 == boolean0);
1394:       assertFalse(boolean4 == boolean3);
1395:       assertFalse(boolean4 == boolean2);
1396:       assertTrue(boolean4);
1397:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1398:       assertEquals(53, Node.INPUT_ID);
1399:       assertEquals(29, Node.JSDOC_INFO_PROP);
1400:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1401:       assertEquals(43, Node.IS_CONSTANT_NAME);
1402:       assertEquals(56, Node.CHANGE_TIME);
1403:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1404:       assertEquals(36, Node.QUOTED_PROP);
1405:       assertEquals(46, Node.IS_NAMESPACE);
1406:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1407:       assertEquals(55, Node.INFERRED_FUNCTION);
1408:       assertEquals(39, Node.EMPTY_BLOCK);
1409:       assertEquals(30, Node.VAR_ARGS_NAME);
1410:       assertEquals(57, Node.LAST_PROP);
1411:       assertEquals(2, Node.POST_FLAG);
1412:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1413:       assertEquals(47, Node.IS_DISPATCHER);
1414:       assertEquals(52, Node.LENGTH);
1415:       assertEquals(40, Node.ORIGINALNAME_PROP);
1416:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1417:       assertEquals(49, Node.DIRECT_EVAL);
1418:       assertEquals(50, Node.FREE_CALL);
1419:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1420:       assertEquals(8, Node.FLAG_NO_THROWS);
1421:       assertEquals(54, Node.SLASH_V);
1422:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1423:       assertEquals(57, Node.REFLECTED_OBJECT);
1424:       assertEquals(32, Node.INCRDECR_PROP);
1425:       assertEquals(4095, Node.COLUMN_MASK);
1426:       assertEquals(37, Node.OPT_ARG_NAME);
1427:       assertEquals(48, Node.DIRECTIVES);
1428:       assertEquals(1, Node.DECR_FLAG);
1429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1430:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1431:       assertEquals(12, Node.COLUMN_BITS);
1432:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1433:       
1434:       Object object0 = node1.getProp(56);
1435:       assertFalse(node1.isDo());
1436:       assertEquals(39, node1.getType());
1437:       assertFalse(node1.isAdd());
1438:       assertEquals(213486, node1.getSourcePosition());
1439:       assertFalse(node1.hasMoreThanOneChild());
1440:       assertFalse(node1.isContinue());
1441:       assertFalse(node1.isReturn());
1442:       assertFalse(node1.isLabel());
1443:       assertFalse(node1.isNew());
1444:       assertFalse(node1.isBlock());
1445:       assertFalse(node1.isAssignAdd());
1446:       assertFalse(node1.isVar());
1447:       assertFalse(node1.isWhile());
1448:       assertFalse(node1.isLabelName());
1449:       assertFalse(node1.isCast());
1450:       assertFalse(node1.isStringKey());
1451:       assertFalse(node1.isParamList());
1452:       assertFalse(node1.isScript());
1453:       assertFalse(node1.isRegExp());
1454:       assertFalse(node1.isFunction());
1455:       assertEquals(52, node1.getLineno());
1456:       assertFalse(node1.isCatch());
1457:       assertFalse(node1.isWith());
1458:       assertFalse(node1.hasOneChild());
1459:       assertFalse(node1.isTry());
1460:       assertFalse(node1.isFor());
1461:       assertFalse(node1.isIf());
1462:       assertFalse(node1.isThis());
1463:       assertFalse(node1.isSetterDef());
1464:       assertFalse(node1.isInstanceOf());
1465:       assertFalse(node1.isIn());
1466:       assertFalse(node1.isNE());
1467:       assertFalse(node1.isCase());
1468:       assertFalse(node1.isInc());
1469:       assertFalse(node1.isString());
1470:       assertFalse(node1.isHook());
1471:       assertTrue(node1.isNumber());
1472:       assertFalse(node1.isThrow());
1473:       assertFalse(node1.isGetterDef());
1474:       assertFalse(node1.isFalse());
1475:       assertFalse(node1.isGetProp());
1476:       assertEquals(494, node1.getCharno());
1477:       assertFalse(node1.isArrayLit());
1478:       assertFalse(node1.isSwitch());
1479:       assertFalse(node1.isAnd());
1480:       assertFalse(node1.isDefaultCase());
1481:       assertFalse(node1.isNot());
1482:       assertFalse(node1.isDebugger());
1483:       assertFalse(node1.isObjectLit());
1484:       assertFalse(node1.isExprResult());
1485:       assertEquals(0, node1.getChildCount());
1486:       assertFalse(node1.isBreak());
1487:       assertFalse(node1.hasChildren());
1488:       assertFalse(node1.isDec());
1489:       assertFalse(node1.isDelProp());
1490:       assertFalse(node1.isTypeOf());
1491:       assertFalse(node1.isNull());
1492:       assertFalse(node1.isComma());
1493:       assertFalse(node1.isAssign());
1494:       assertFalse(node1.isGetElem());
1495:       assertFalse(node1.isEmpty());
1496:       assertFalse(node1.isCall());
1497:       assertFalse(node1.isOr());
1498:       assertFalse(node1.isTrue());
1499:       assertFalse(node1.isVoid());
1500:       assertFalse(node1.isName());
1501:       assertNull(object0);
1502:       assertFalse(node1.equals((Object)node0));
1503:       assertEquals(32, Node.INCRDECR_PROP);
1504:       assertEquals(56, Node.CHANGE_TIME);
1505:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1506:       assertEquals(12, Node.COLUMN_BITS);
1507:       assertEquals(2, Node.POST_FLAG);
1508:       assertEquals(46, Node.IS_NAMESPACE);
1509:       assertEquals(47, Node.IS_DISPATCHER);
1510:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1511:       assertEquals(29, Node.JSDOC_INFO_PROP);
1512:       assertEquals(1, Node.DECR_FLAG);
1513:       assertEquals(57, Node.LAST_PROP);
1514:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1515:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1516:       assertEquals(53, Node.INPUT_ID);
1517:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1518:       assertEquals(52, Node.LENGTH);
1519:       assertEquals(36, Node.QUOTED_PROP);
1520:       assertEquals(57, Node.REFLECTED_OBJECT);
1521:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1522:       assertEquals(49, Node.DIRECT_EVAL);
1523:       assertEquals(4095, Node.COLUMN_MASK);
1524:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1525:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1526:       assertEquals(37, Node.OPT_ARG_NAME);
1527:       assertEquals(48, Node.DIRECTIVES);
1528:       assertEquals(8, Node.FLAG_NO_THROWS);
1529:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1530:       assertEquals(50, Node.FREE_CALL);
1531:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1532:       assertEquals(55, Node.INFERRED_FUNCTION);
1533:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1534:       assertEquals(39, Node.EMPTY_BLOCK);
1535:       assertEquals(54, Node.SLASH_V);
1536:       assertEquals(43, Node.IS_CONSTANT_NAME);
1537:       assertEquals(30, Node.VAR_ARGS_NAME);
1538:       assertEquals(40, Node.ORIGINALNAME_PROP);
1539:       assertSame(node1, node2);
1540:       
1541:       boolean boolean5 = node0.wasEmptyNode();
1542:       assertFalse(node0.isNE());
1543:       assertFalse(node0.isDelProp());
1544:       assertFalse(node0.isFor());
1545:       assertFalse(node0.isIf());
1546:       assertFalse(node0.isCase());
1547:       assertFalse(node0.isGetterDef());
1548:       assertFalse(node0.isEmpty());
1549:       assertFalse(node0.isIn());
1550:       assertFalse(node0.isString());
1551:       assertEquals(6119423, node0.getSourcePosition());
1552:       assertFalse(node0.isTrue());
1553:       assertFalse(node0.isVoid());
1554:       assertFalse(node0.isRegExp());
1555:       assertFalse(node0.isTry());
1556:       assertFalse(node0.isCatch());
1557:       assertFalse(node0.isHook());
1558:       assertFalse(node0.isComma());
1559:       assertFalse(node0.isSetterDef());
1560:       assertFalse(node0.isGetProp());
1561:       assertFalse(node0.isThrow());
1562:       assertFalse(node0.isObjectLit());
1563:       assertFalse(node0.isNot());
1564:       assertFalse(node0.isFunction());
1565:       assertFalse(node0.isInc());
1566:       assertFalse(node0.isDebugger());
1567:       assertFalse(node0.isAnd());
1568:       assertFalse(node0.isCast());
1569:       assertFalse(node0.isFalse());
1570:       assertFalse(node0.isContinue());
1571:       assertFalse(node0.isTypeOf());
1572:       assertFalse(node0.hasChildren());
1573:       assertFalse(node0.isDec());
1574:       assertFalse(node0.isLabel());
1575:       assertFalse(node0.isLabelName());
1576:       assertFalse(node0.isAssignAdd());
1577:       assertFalse(node0.isReturn());
1578:       assertFalse(node0.hasOneChild());
1579:       assertFalse(node0.isOr());
1580:       assertFalse(node0.isNumber());
1581:       assertFalse(node0.isScript());
1582:       assertFalse(node0.isExprResult());
1583:       assertFalse(node0.isBlock());
1584:       assertFalse(node0.isWhile());
1585:       assertFalse(node0.hasMoreThanOneChild());
1586:       assertFalse(node0.isCall());
1587:       assertFalse(node0.isGetElem());
1588:       assertFalse(node0.isAssign());
1589:       assertFalse(node0.isWith());
1590:       assertFalse(node0.isInstanceOf());
1591:       assertFalse(node0.isThis());
1592:       assertFalse(node0.isNull());
1593:       assertFalse(node0.isBreak());
1594:       assertFalse(node0.isName());
1595:       assertFalse(node0.isStringKey());
1596:       assertFalse(node0.isParamList());
1597:       assertFalse(node0.isAdd());
1598:       assertEquals(1493, node0.getLineno());
1599:       assertFalse(node0.isSwitch());
1600:       assertEquals(4095, node0.getCharno());
1601:       assertFalse(node0.isNew());
1602:       assertFalse(node0.isDo());
1603:       assertFalse(node0.isDefaultCase());
1604:       assertFalse(node0.isVar());
1605:       assertEquals(0, node0.getChildCount());
1606:       assertFalse(node0.isArrayLit());
1607:       assertEquals(1, node0.getType());
1608:       assertFalse(node0.equals((Object)node2));
1609:       assertFalse(node0.equals((Object)node1));
1610:       assertFalse(boolean5 == boolean4);
1611:       assertTrue(boolean5 == boolean0);
1612:       assertTrue(boolean5 == boolean2);
1613:       assertTrue(boolean5 == boolean3);
1614:       assertTrue(boolean5 == boolean1);
1615:       assertFalse(boolean5);
1616:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1617:       assertEquals(53, Node.INPUT_ID);
1618:       assertEquals(29, Node.JSDOC_INFO_PROP);
1619:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1620:       assertEquals(43, Node.IS_CONSTANT_NAME);
1621:       assertEquals(56, Node.CHANGE_TIME);
1622:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1623:       assertEquals(36, Node.QUOTED_PROP);
1624:       assertEquals(46, Node.IS_NAMESPACE);
1625:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1626:       assertEquals(55, Node.INFERRED_FUNCTION);
1627:       assertEquals(39, Node.EMPTY_BLOCK);
1628:       assertEquals(30, Node.VAR_ARGS_NAME);
1629:       assertEquals(57, Node.LAST_PROP);
1630:       assertEquals(2, Node.POST_FLAG);
1631:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1632:       assertEquals(47, Node.IS_DISPATCHER);
1633:       assertEquals(52, Node.LENGTH);
1634:       assertEquals(40, Node.ORIGINALNAME_PROP);
1635:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1636:       assertEquals(49, Node.DIRECT_EVAL);
1637:       assertEquals(50, Node.FREE_CALL);
1638:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1639:       assertEquals(8, Node.FLAG_NO_THROWS);
1640:       assertEquals(54, Node.SLASH_V);
1641:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1642:       assertEquals(57, Node.REFLECTED_OBJECT);
1643:       assertEquals(32, Node.INCRDECR_PROP);
1644:       assertEquals(4095, Node.COLUMN_MASK);
1645:       assertEquals(37, Node.OPT_ARG_NAME);
1646:       assertEquals(48, Node.DIRECTIVES);
1647:       assertEquals(1, Node.DECR_FLAG);
1648:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1649:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1650:       assertEquals(12, Node.COLUMN_BITS);
1651:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1652:       
1653:       int int0 = node1.getChangeTime();
1654:       assertFalse(node1.isDo());
1655:       assertEquals(39, node1.getType());
1656:       assertFalse(node1.isAdd());
1657:       assertEquals(213486, node1.getSourcePosition());
1658:       assertFalse(node1.hasMoreThanOneChild());
1659:       assertFalse(node1.isContinue());
1660:       assertFalse(node1.isReturn());
1661:       assertFalse(node1.isLabel());
1662:       assertFalse(node1.isNew());
1663:       assertFalse(node1.isBlock());
1664:       assertFalse(node1.isAssignAdd());
1665:       assertFalse(node1.isVar());
1666:       assertFalse(node1.isWhile());
1667:       assertFalse(node1.isLabelName());
1668:       assertFalse(node1.isCast());
1669:       assertFalse(node1.isStringKey());
1670:       assertFalse(node1.isParamList());
1671:       assertFalse(node1.isScript());
1672:       assertFalse(node1.isRegExp());
1673:       assertFalse(node1.isFunction());
1674:       assertEquals(52, node1.getLineno());
1675:       assertFalse(node1.isCatch());
1676:       assertFalse(node1.isWith());
1677:       assertFalse(node1.hasOneChild());
1678:       assertFalse(node1.isTry());
1679:       assertFalse(node1.isFor());
1680:       assertFalse(node1.isIf());
1681:       assertFalse(node1.isThis());
1682:       assertFalse(node1.isSetterDef());
1683:       assertFalse(node1.isInstanceOf());
1684:       assertFalse(node1.isIn());
1685:       assertFalse(node1.isNE());
1686:       assertFalse(node1.isCase());
1687:       assertFalse(node1.isInc());
1688:       assertFalse(node1.isString());
1689:       assertFalse(node1.isHook());
1690:       assertTrue(node1.isNumber());
1691:       assertFalse(node1.isThrow());
1692:       assertFalse(node1.isGetterDef());
1693:       assertFalse(node1.isFalse());
1694:       assertFalse(node1.isGetProp());
1695:       assertEquals(494, node1.getCharno());
1696:       assertFalse(node1.isArrayLit());
1697:       assertFalse(node1.isSwitch());
1698:       assertFalse(node1.isAnd());
1699:       assertFalse(node1.isDefaultCase());
1700:       assertFalse(node1.isNot());
1701:       assertFalse(node1.isDebugger());
1702:       assertFalse(node1.isObjectLit());
1703:       assertFalse(node1.isExprResult());
1704:       assertEquals(0, node1.getChildCount());
1705:       assertFalse(node1.isBreak());
1706:       assertFalse(node1.hasChildren());
1707:       assertFalse(node1.isDec());
1708:       assertFalse(node1.isDelProp());
1709:       assertFalse(node1.isTypeOf());
1710:       assertFalse(node1.isNull());
1711:       assertFalse(node1.isComma());
1712:       assertFalse(node1.isAssign());
1713:       assertFalse(node1.isGetElem());
1714:       assertFalse(node1.isEmpty());
1715:       assertFalse(node1.isCall());
1716:       assertFalse(node1.isOr());
1717:       assertFalse(node1.isTrue());
1718:       assertFalse(node1.isVoid());
1719:       assertFalse(node1.isName());
1720:       assertFalse(node1.equals((Object)node0));
1721:       assertEquals(0, int0);
1722:       assertEquals(32, Node.INCRDECR_PROP);
1723:       assertEquals(56, Node.CHANGE_TIME);
1724:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1725:       assertEquals(12, Node.COLUMN_BITS);
1726:       assertEquals(2, Node.POST_FLAG);
1727:       assertEquals(46, Node.IS_NAMESPACE);
1728:       assertEquals(47, Node.IS_DISPATCHER);
1729:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1730:       assertEquals(29, Node.JSDOC_INFO_PROP);
1731:       assertEquals(1, Node.DECR_FLAG);
1732:       assertEquals(57, Node.LAST_PROP);
1733:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1734:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1735:       assertEquals(53, Node.INPUT_ID);
1736:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1737:       assertEquals(52, Node.LENGTH);
1738:       assertEquals(36, Node.QUOTED_PROP);
1739:       assertEquals(57, Node.REFLECTED_OBJECT);
1740:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1741:       assertEquals(49, Node.DIRECT_EVAL);
1742:       assertEquals(4095, Node.COLUMN_MASK);
1743:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1744:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1745:       assertEquals(37, Node.OPT_ARG_NAME);
1746:       assertEquals(48, Node.DIRECTIVES);
1747:       assertEquals(8, Node.FLAG_NO_THROWS);
1748:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1749:       assertEquals(50, Node.FREE_CALL);
1750:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1751:       assertEquals(55, Node.INFERRED_FUNCTION);
1752:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1753:       assertEquals(39, Node.EMPTY_BLOCK);
1754:       assertEquals(54, Node.SLASH_V);
1755:       assertEquals(43, Node.IS_CONSTANT_NAME);
1756:       assertEquals(30, Node.VAR_ARGS_NAME);
1757:       assertEquals(40, Node.ORIGINALNAME_PROP);
1758:       assertSame(node1, node2);
1759:       
1760:       // Undeclared exception!
1761:       try { 
1762:         node0.getExistingIntProp(52);
1763:         fail("Expecting exception: IllegalStateException");
1764:       
1765:       } catch(IllegalStateException e) {
1766:          //
1767:          // missing prop: 52
1768:          //
1769:          verifyException("com.google.javascript.rhino.Node", e);
1770:       }
1771:   }
1772: }
RegularFileObject[/tmp/EvoSuite_63_1629223387938/com/google/javascript/rhino/Node_63_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:03:08 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_63_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_63_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.common.collect.RegularImmutableSet",
109:       "com.google.javascript.rhino.jstype.ModificationVisitor",
110:       "com.google.javascript.rhino.jstype.PropertyMap$1",
111:       "com.google.common.collect.AbstractMapEntry",
112:       "com.google.javascript.rhino.Node$AncestorIterable$1",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.common.collect.Iterables",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.common.collect.SingletonImmutableSet",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.common.collect.Iterators$1",
207:       "com.google.common.collect.Iterators$2",
208:       "com.google.javascript.rhino.jstype.NamespaceType",
209:       "com.google.common.collect.Iterators$3",
210:       "com.google.common.collect.Sets",
211:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
212:       "com.google.javascript.rhino.Node$ObjectPropListItem",
213:       "com.google.common.collect.Lists$StringAsImmutableList",
214:       "com.google.common.collect.Lists$2",
215:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
216:       "com.google.common.collect.ImmutableList$Builder",
217:       "com.google.common.collect.Lists$1",
218:       "com.google.javascript.rhino.jstype.StaticReference",
219:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
220:       "com.google.common.collect.Multiset",
221:       "com.google.common.collect.AbstractMultimap",
222:       "com.google.common.collect.Multimap",
223:       "com.google.common.collect.Iterators",
224:       "com.google.common.collect.EmptyImmutableSet",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
228:       "com.google.common.collect.ImmutableList",
229:       "com.google.common.collect.SingletonImmutableBiMap",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
231:       "com.google.javascript.rhino.jstype.StringType",
232:       "com.google.javascript.rhino.Node$AbstractPropListItem",
233:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
234:       "com.google.javascript.rhino.jstype.TemplatizedType",
235:       "com.google.javascript.rhino.jstype.Visitor",
236:       "com.google.javascript.rhino.jstype.NoResolvedType",
237:       "com.google.javascript.rhino.jstype.JSTypeNative",
238:       "com.google.javascript.rhino.jstype.AllType",
239:       "com.google.common.collect.Maps",
240:       "com.google.common.collect.SetMultimap",
241:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
242:       "com.google.common.collect.Maps$EntryTransformer",
243:       "com.google.javascript.rhino.JSTypeExpression",
244:       "com.google.common.collect.Iterators$MergingIterator"
245:     );
246:   } 
247: 
248:   private static void resetClasses() {
249:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_63_tmp__ESTest_scaffolding.class.getClassLoader()); 
250: 
251:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
252:       "com.google.javascript.rhino.Node",
253:       "com.google.javascript.rhino.Node$NumberNode",
254:       "com.google.javascript.rhino.Node$StringNode",
255:       "com.google.javascript.rhino.Node$AbstractPropListItem",
256:       "com.google.javascript.rhino.Node$ObjectPropListItem",
257:       "com.google.javascript.rhino.Node$IntPropListItem",
258:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
259:       "com.google.javascript.rhino.Node$AncestorIterable",
260:       "com.google.javascript.rhino.Node$NodeMismatch",
261:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
262:       "com.google.javascript.rhino.Node$SideEffectFlags",
263:       "com.google.javascript.rhino.Token",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Preconditions",
267:       "com.google.common.base.Joiner$1",
268:       "com.google.common.collect.Collections2",
269:       "com.google.common.base.Joiner$MapJoiner",
270:       "com.google.common.collect.Maps",
271:       "com.google.common.collect.AbstractMultimap",
272:       "com.google.common.collect.AbstractMapBasedMultimap",
273:       "com.google.common.collect.AbstractSetMultimap",
274:       "com.google.common.collect.LinkedHashMultimap",
275:       "com.google.common.collect.AbstractMapEntry",
276:       "com.google.common.collect.ImmutableEntry",
277:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
278:       "com.google.common.collect.AbstractListMultimap",
279:       "com.google.common.collect.ArrayListMultimap",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
281:       "com.google.common.collect.ImmutableCollection",
282:       "com.google.common.collect.RegularImmutableList",
283:       "com.google.common.collect.ObjectArrays",
284:       "com.google.common.collect.ImmutableList",
285:       "com.google.javascript.rhino.jstype.ModificationVisitor",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
287:       "com.google.common.collect.ImmutableCollection$Builder",
288:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
289:       "com.google.common.collect.ImmutableList$Builder",
290:       "com.google.common.collect.UnmodifiableIterator",
291:       "com.google.common.collect.UnmodifiableListIterator",
292:       "com.google.common.collect.Iterators$1",
293:       "com.google.common.collect.Iterators$2",
294:       "com.google.common.collect.Iterators",
295:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
296:       "com.google.javascript.rhino.jstype.JSType$1",
297:       "com.google.javascript.rhino.jstype.JSType",
298:       "com.google.javascript.rhino.jstype.ObjectType",
299:       "com.google.javascript.rhino.jstype.ProxyObjectType",
300:       "com.google.javascript.rhino.jstype.TemplateType",
301:       "com.google.javascript.rhino.jstype.ValueType",
302:       "com.google.javascript.rhino.jstype.BooleanType",
303:       "com.google.javascript.rhino.jstype.NullType",
304:       "com.google.javascript.rhino.jstype.NumberType",
305:       "com.google.javascript.rhino.jstype.StringType",
306:       "com.google.javascript.rhino.jstype.UnknownType",
307:       "com.google.javascript.rhino.jstype.VoidType",
308:       "com.google.javascript.rhino.jstype.AllType",
309:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
310:       "com.google.common.collect.ImmutableMap",
311:       "com.google.common.collect.ImmutableBiMap",
312:       "com.google.common.collect.EmptyImmutableBiMap",
313:       "com.google.javascript.rhino.jstype.PropertyMap$1",
314:       "com.google.javascript.rhino.jstype.PropertyMap",
315:       "com.google.javascript.rhino.jstype.FunctionType",
316:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.ImmutableList$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Platform",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.InputId",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.Iterators$12",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
366:       "com.google.javascript.rhino.jstype.JSType$TypePair",
367:       "com.google.javascript.rhino.jstype.TernaryValue",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
370:     );
371:   }
372: }

[MASTER] 18:03:08.459 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = "gs1IcjVs7cZy}^~";
boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

Node node0 = Node.newString(1, "gs1IcjVs7cZy}^~", 1493, 4358);
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertEquals(1493, node0.getLineno());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertEquals(1, node0.getType());
assertNotNull(node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node1 = Node.newNumber((double) 49, 52, 494);
assertFalse(node1.isDo());
assertEquals(39, node1.getType());
assertFalse(node1.isAdd());
assertEquals(213486, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(52, node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertTrue(node1.isNumber());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertEquals(494, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

JSDocInfo jSDocInfo0 = new JSDocInfo(false);
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isOverride());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesDicts());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerModule());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.makesStructs());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isHidden());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isDefine());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.hasThisType());
assertNull(jSDocInfo0.getDescription());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertNotNull(jSDocInfo0);

Node node2 = node1.setJSDocInfo(jSDocInfo0);
assertFalse(node1.isDo());
assertEquals(39, node1.getType());
assertFalse(node1.isAdd());
assertEquals(213486, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(52, node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertTrue(node1.isNumber());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertEquals(494, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isOverride());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesDicts());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerModule());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.makesStructs());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isHidden());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isDefine());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.hasThisType());
assertNull(jSDocInfo0.getDescription());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCatch());
assertFalse(node2.isParamList());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isNull());
assertEquals(494, node2.getCharno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isIn());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertEquals(39, node2.getType());
assertEquals(213486, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertEquals(52, node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertNotNull(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertSame(node1, node2);
assertSame(node2, node1);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertEquals(1493, node0.getLineno());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertEquals(1, node0.getType());
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean1 = node0.isAnd();
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertEquals(1493, node0.getLineno());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertEquals(1, node0.getType());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

jSDocInfo0.setLendsName("com.google.javascript.rhino.Node$AncestorIterable");
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isOverride());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesDicts());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerModule());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.makesStructs());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isHidden());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isDefine());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.hasThisType());
assertNull(jSDocInfo0.getDescription());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isNoCompile());
assertEquals("com.google.javascript.rhino.Node$AncestorIterable", jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());

node1.addSuppression("gs1IcjVs7cZy}^~");
assertFalse(node1.isDo());
assertEquals(39, node1.getType());
assertFalse(node1.isAdd());
assertEquals(213486, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(52, node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertTrue(node1.isNumber());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertEquals(494, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.equals((Object)node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertSame(node1, node2);

boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);

boolean boolean3 = node0.isArrayLit();
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertEquals(1493, node0.getLineno());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertEquals(1, node0.getType());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node2);
assertFalse(node1.isDo());
assertEquals(39, node1.getType());
assertFalse(node1.isAdd());
assertEquals(213486, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(52, node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertTrue(node1.isNumber());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertEquals(494, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isOverride());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesDicts());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerModule());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.makesStructs());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isHidden());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isDefine());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.hasThisType());
assertNull(jSDocInfo0.getDescription());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isNoCompile());
assertEquals("com.google.javascript.rhino.Node$AncestorIterable", jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCatch());
assertFalse(node2.isParamList());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isNull());
assertEquals(494, node2.getCharno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isIn());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertEquals(39, node2.getType());
assertEquals(213486, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertEquals(52, node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertNull(node_NodeMismatch0);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertSame(node1, node2);
assertSame(node2, node1);

boolean boolean4 = node0.mayMutateGlobalStateOrThrow();
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertEquals(1493, node0.getLineno());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertEquals(1, node0.getType());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(boolean4 == boolean1);
assertFalse(boolean4 == boolean0);
assertFalse(boolean4 == boolean3);
assertFalse(boolean4 == boolean2);
assertTrue(boolean4);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Object object0 = node1.getProp(56);
assertFalse(node1.isDo());
assertEquals(39, node1.getType());
assertFalse(node1.isAdd());
assertEquals(213486, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(52, node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertTrue(node1.isNumber());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertEquals(494, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertNull(object0);
assertFalse(node1.equals((Object)node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertSame(node1, node2);

boolean boolean5 = node0.wasEmptyNode();
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertEquals(1493, node0.getLineno());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertEquals(1, node0.getType());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(boolean5 == boolean4);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertFalse(boolean5);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

int int0 = node1.getChangeTime();
assertFalse(node1.isDo());
assertEquals(39, node1.getType());
assertFalse(node1.isAdd());
assertEquals(213486, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(52, node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertTrue(node1.isNumber());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertEquals(494, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.equals((Object)node0));
assertEquals(0, int0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertSame(node1, node2);

node0.getExistingIntProp(52);

[MASTER] 18:03:09.699 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_68_1629223389432/com/google/javascript/rhino/Node_68_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_68_1629223389432/com/google/javascript/rhino/Node_68_tmp__ESTest_scaffolding.java]]
[MASTER] 18:03:09.700 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:03:09.700 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:03:09.701 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 633
[MASTER] 18:03:09.703 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_68_1629223389432/com/google/javascript/rhino/Node_68_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:03:09 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_68_tmp__ESTest extends Node_68_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       String string0 = "gs1IcjVs7cZy}^~";
25:       boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
26:       assertFalse(boolean0);
27:       
28:       Node node0 = Node.newString(1, "gs1IcjVs7cZy}^~", 1473, 4358);
29:       assertEquals(1473, node0.getLineno());
30:       assertFalse(node0.isOr());
31:       assertFalse(node0.isLabel());
32:       assertFalse(node0.isDec());
33:       assertFalse(node0.hasChildren());
34:       assertFalse(node0.isReturn());
35:       assertFalse(node0.isAssignAdd());
36:       assertFalse(node0.isContinue());
37:       assertFalse(node0.isGetElem());
38:       assertFalse(node0.isAssign());
39:       assertFalse(node0.isLabelName());
40:       assertFalse(node0.isTypeOf());
41:       assertFalse(node0.hasMoreThanOneChild());
42:       assertFalse(node0.isCast());
43:       assertEquals(1, node0.getType());
44:       assertFalse(node0.isBlock());
45:       assertFalse(node0.isWhile());
46:       assertFalse(node0.isObjectLit());
47:       assertFalse(node0.isNot());
48:       assertFalse(node0.hasOneChild());
49:       assertFalse(node0.isNumber());
50:       assertFalse(node0.isScript());
51:       assertFalse(node0.isGetProp());
52:       assertFalse(node0.isComma());
53:       assertFalse(node0.isNull());
54:       assertFalse(node0.isStringKey());
55:       assertFalse(node0.isParamList());
56:       assertFalse(node0.isCall());
57:       assertFalse(node0.isName());
58:       assertFalse(node0.isBreak());
59:       assertEquals(0, node0.getChildCount());
60:       assertFalse(node0.isVoid());
61:       assertFalse(node0.isTrue());
62:       assertFalse(node0.isExprResult());
63:       assertFalse(node0.isNew());
64:       assertFalse(node0.isDefaultCase());
65:       assertFalse(node0.isVar());
66:       assertFalse(node0.isDo());
67:       assertEquals(6037503, node0.getSourcePosition());
68:       assertFalse(node0.isAdd());
69:       assertFalse(node0.isEmpty());
70:       assertFalse(node0.isDelProp());
71:       assertFalse(node0.isIf());
72:       assertFalse(node0.isFor());
73:       assertFalse(node0.isNE());
74:       assertFalse(node0.isArrayLit());
75:       assertFalse(node0.isDebugger());
76:       assertEquals(4095, node0.getCharno());
77:       assertFalse(node0.isTry());
78:       assertFalse(node0.isRegExp());
79:       assertFalse(node0.isHook());
80:       assertFalse(node0.isSwitch());
81:       assertFalse(node0.isCase());
82:       assertFalse(node0.isGetterDef());
83:       assertFalse(node0.isString());
84:       assertFalse(node0.isThis());
85:       assertFalse(node0.isSetterDef());
86:       assertFalse(node0.isThrow());
87:       assertFalse(node0.isAnd());
88:       assertFalse(node0.isFalse());
89:       assertFalse(node0.isWith());
90:       assertFalse(node0.isInstanceOf());
91:       assertFalse(node0.isCatch());
92:       assertFalse(node0.isFunction());
93:       assertFalse(node0.isInc());
94:       assertFalse(node0.isIn());
95:       assertNotNull(node0);
96:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
97:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
98:       assertEquals(53, Node.INPUT_ID);
99:       assertEquals(29, Node.JSDOC_INFO_PROP);
100:       assertEquals(47, Node.IS_DISPATCHER);
101:       assertEquals(2, Node.POST_FLAG);
102:       assertEquals(55, Node.INFERRED_FUNCTION);
103:       assertEquals(4095, Node.COLUMN_MASK);
104:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
105:       assertEquals(48, Node.DIRECTIVES);
106:       assertEquals(49, Node.DIRECT_EVAL);
107:       assertEquals(39, Node.EMPTY_BLOCK);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(56, Node.CHANGE_TIME);
110:       assertEquals(15, Node.NO_SIDE_EFFECTS);
111:       assertEquals(36, Node.QUOTED_PROP);
112:       assertEquals(8, Node.FLAG_NO_THROWS);
113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
115:       assertEquals(57, Node.REFLECTED_OBJECT);
116:       assertEquals(52, Node.LENGTH);
117:       assertEquals(40, Node.ORIGINALNAME_PROP);
118:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
119:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
122:       assertEquals(30, Node.VAR_ARGS_NAME);
123:       assertEquals(51, Node.STATIC_SOURCE_FILE);
124:       assertEquals(12, Node.COLUMN_BITS);
125:       assertEquals(32, Node.INCRDECR_PROP);
126:       assertEquals(46, Node.IS_NAMESPACE);
127:       assertEquals(1, Node.DECR_FLAG);
128:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
129:       assertEquals(43, Node.IS_CONSTANT_NAME);
130:       assertEquals(50, Node.FREE_CALL);
131:       assertEquals(54, Node.SLASH_V);
132:       
133:       Node node1 = new Node(16, 49, 43);
134:       assertFalse(node1.isBreak());
135:       assertFalse(node1.isThis());
136:       assertFalse(node1.isThrow());
137:       assertFalse(node1.isGetProp());
138:       assertFalse(node1.isObjectLit());
139:       assertFalse(node1.isInc());
140:       assertFalse(node1.isNot());
141:       assertFalse(node1.isAnd());
142:       assertFalse(node1.isSwitch());
143:       assertFalse(node1.isCast());
144:       assertFalse(node1.isFalse());
145:       assertEquals(200747, node1.getSourcePosition());
146:       assertFalse(node1.isDelProp());
147:       assertFalse(node1.isAssign());
148:       assertFalse(node1.isDec());
149:       assertFalse(node1.isGetElem());
150:       assertFalse(node1.isEmpty());
151:       assertFalse(node1.hasChildren());
152:       assertFalse(node1.isAssignAdd());
153:       assertFalse(node1.isOr());
154:       assertEquals(16, node1.getType());
155:       assertFalse(node1.isDebugger());
156:       assertFalse(node1.isString());
157:       assertFalse(node1.isWhile());
158:       assertFalse(node1.isTrue());
159:       assertFalse(node1.isVoid());
160:       assertEquals(43, node1.getCharno());
161:       assertFalse(node1.isReturn());
162:       assertFalse(node1.isExprResult());
163:       assertFalse(node1.isCall());
164:       assertFalse(node1.isComma());
165:       assertFalse(node1.isTypeOf());
166:       assertFalse(node1.isNull());
167:       assertFalse(node1.isSetterDef());
168:       assertFalse(node1.isParamList());
169:       assertFalse(node1.isVar());
170:       assertFalse(node1.isStringKey());
171:       assertFalse(node1.isName());
172:       assertEquals(49, node1.getLineno());
173:       assertFalse(node1.isNew());
174:       assertFalse(node1.isAdd());
175:       assertFalse(node1.isDo());
176:       assertFalse(node1.isDefaultCase());
177:       assertEquals(0, node1.getChildCount());
178:       assertFalse(node1.isArrayLit());
179:       assertFalse(node1.isLabel());
180:       assertFalse(node1.isFunction());
181:       assertFalse(node1.isContinue());
182:       assertFalse(node1.isGetterDef());
183:       assertFalse(node1.isLabelName());
184:       assertFalse(node1.isFor());
185:       assertFalse(node1.isNE());
186:       assertFalse(node1.isIf());
187:       assertFalse(node1.isTry());
188:       assertFalse(node1.hasOneChild());
189:       assertFalse(node1.isNumber());
190:       assertFalse(node1.isIn());
191:       assertFalse(node1.isScript());
192:       assertFalse(node1.isCase());
193:       assertFalse(node1.isInstanceOf());
194:       assertFalse(node1.isBlock());
195:       assertFalse(node1.isHook());
196:       assertFalse(node1.isCatch());
197:       assertFalse(node1.isRegExp());
198:       assertFalse(node1.hasMoreThanOneChild());
199:       assertFalse(node1.isWith());
200:       assertNotNull(node1);
201:       assertFalse(node1.equals((Object)node0));
202:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
203:       assertEquals(54, Node.SLASH_V);
204:       assertEquals(52, Node.LENGTH);
205:       assertEquals(15, Node.NO_SIDE_EFFECTS);
206:       assertEquals(40, Node.ORIGINALNAME_PROP);
207:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
208:       assertEquals(49, Node.DIRECT_EVAL);
209:       assertEquals(50, Node.FREE_CALL);
210:       assertEquals(46, Node.IS_NAMESPACE);
211:       assertEquals(51, Node.STATIC_SOURCE_FILE);
212:       assertEquals(57, Node.REFLECTED_OBJECT);
213:       assertEquals(48, Node.DIRECTIVES);
214:       assertEquals(37, Node.OPT_ARG_NAME);
215:       assertEquals(32, Node.INCRDECR_PROP);
216:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
217:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
218:       assertEquals(1, Node.DECR_FLAG);
219:       assertEquals(4095, Node.COLUMN_MASK);
220:       assertEquals(12, Node.COLUMN_BITS);
221:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
222:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
223:       assertEquals(53, Node.INPUT_ID);
224:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
225:       assertEquals(43, Node.IS_CONSTANT_NAME);
226:       assertEquals(56, Node.CHANGE_TIME);
227:       assertEquals(36, Node.QUOTED_PROP);
228:       assertEquals(2, Node.POST_FLAG);
229:       assertEquals(8, Node.FLAG_NO_THROWS);
230:       assertEquals(55, Node.INFERRED_FUNCTION);
231:       assertEquals(29, Node.JSDOC_INFO_PROP);
232:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
233:       assertEquals(39, Node.EMPTY_BLOCK);
234:       assertEquals(30, Node.VAR_ARGS_NAME);
235:       assertEquals(57, Node.LAST_PROP);
236:       assertEquals(47, Node.IS_DISPATCHER);
237:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
238:       
239:       JSDocInfo jSDocInfo0 = new JSDocInfo(false);
240:       assertFalse(jSDocInfo0.hasReturnType());
241:       assertFalse(jSDocInfo0.isNoTypeCheck());
242:       assertFalse(jSDocInfo0.isConstructor());
243:       assertFalse(jSDocInfo0.isJaggerInject());
244:       assertFalse(jSDocInfo0.isNoAlias());
245:       assertFalse(jSDocInfo0.isConstant());
246:       assertFalse(jSDocInfo0.containsDeclaration());
247:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
248:       assertFalse(jSDocInfo0.isExport());
249:       assertFalse(jSDocInfo0.isStableIdGenerator());
250:       assertNull(jSDocInfo0.getLendsName());
251:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
252:       assertFalse(jSDocInfo0.isJaggerProvide());
253:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
254:       assertNull(jSDocInfo0.getLicense());
255:       assertFalse(jSDocInfo0.isExpose());
256:       assertFalse(jSDocInfo0.hasBaseType());
257:       assertFalse(jSDocInfo0.hasType());
258:       assertFalse(jSDocInfo0.hasModifies());
259:       assertNull(jSDocInfo0.getOriginalCommentString());
260:       assertNull(jSDocInfo0.getReturnDescription());
261:       assertFalse(jSDocInfo0.hasTypedefType());
262:       assertFalse(jSDocInfo0.isDisposes());
263:       assertNull(jSDocInfo0.getDeprecationReason());
264:       assertFalse(jSDocInfo0.isNoCompile());
265:       assertFalse(jSDocInfo0.isHidden());
266:       assertFalse(jSDocInfo0.isJaggerModule());
267:       assertFalse(jSDocInfo0.isDeprecated());
268:       assertFalse(jSDocInfo0.isExterns());
269:       assertFalse(jSDocInfo0.isMappedIdGenerator());
270:       assertFalse(jSDocInfo0.isNgInject());
271:       assertFalse(jSDocInfo0.isNoShadow());
272:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
273:       assertFalse(jSDocInfo0.isNoSideEffects());
274:       assertNull(jSDocInfo0.getVersion());
275:       assertFalse(jSDocInfo0.isWizaction());
276:       assertFalse(jSDocInfo0.isOverride());
277:       assertFalse(jSDocInfo0.isJavaDispatch());
278:       assertFalse(jSDocInfo0.makesDicts());
279:       assertEquals("JSDocInfo", jSDocInfo0.toString());
280:       assertNull(jSDocInfo0.getMeaning());
281:       assertFalse(jSDocInfo0.isImplicitCast());
282:       assertFalse(jSDocInfo0.shouldPreserveTry());
283:       assertFalse(jSDocInfo0.hasFileOverview());
284:       assertNull(jSDocInfo0.getBlockDescription());
285:       assertFalse(jSDocInfo0.hasThisType());
286:       assertFalse(jSDocInfo0.isInterface());
287:       assertFalse(jSDocInfo0.makesStructs());
288:       assertFalse(jSDocInfo0.isIdGenerator());
289:       assertNull(jSDocInfo0.getDescription());
290:       assertFalse(jSDocInfo0.isDefine());
291:       assertEquals(0, jSDocInfo0.getParameterCount());
292:       assertNull(jSDocInfo0.getVisibility());
293:       assertFalse(jSDocInfo0.hasEnumParameterType());
294:       assertNull(jSDocInfo0.getFileOverview());
295:       assertNotNull(jSDocInfo0);
296:       
297:       Node node2 = node1.setJSDocInfo(jSDocInfo0);
298:       assertFalse(node1.isBreak());
299:       assertFalse(node1.isThis());
300:       assertFalse(node1.isThrow());
301:       assertFalse(node1.isGetProp());
302:       assertFalse(node1.isObjectLit());
303:       assertFalse(node1.isInc());
304:       assertFalse(node1.isNot());
305:       assertFalse(node1.isAnd());
306:       assertFalse(node1.isSwitch());
307:       assertFalse(node1.isCast());
308:       assertFalse(node1.isFalse());
309:       assertEquals(200747, node1.getSourcePosition());
310:       assertFalse(node1.isDelProp());
311:       assertFalse(node1.isAssign());
312:       assertFalse(node1.isDec());
313:       assertFalse(node1.isGetElem());
314:       assertFalse(node1.isEmpty());
315:       assertFalse(node1.hasChildren());
316:       assertFalse(node1.isAssignAdd());
317:       assertFalse(node1.isOr());
318:       assertEquals(16, node1.getType());
319:       assertFalse(node1.isDebugger());
320:       assertFalse(node1.isString());
321:       assertFalse(node1.isWhile());
322:       assertFalse(node1.isTrue());
323:       assertFalse(node1.isVoid());
324:       assertEquals(43, node1.getCharno());
325:       assertFalse(node1.isReturn());
326:       assertFalse(node1.isExprResult());
327:       assertFalse(node1.isCall());
328:       assertFalse(node1.isComma());
329:       assertFalse(node1.isTypeOf());
330:       assertFalse(node1.isNull());
331:       assertFalse(node1.isSetterDef());
332:       assertFalse(node1.isParamList());
333:       assertFalse(node1.isVar());
334:       assertFalse(node1.isStringKey());
335:       assertFalse(node1.isName());
336:       assertEquals(49, node1.getLineno());
337:       assertFalse(node1.isNew());
338:       assertFalse(node1.isAdd());
339:       assertFalse(node1.isDo());
340:       assertFalse(node1.isDefaultCase());
341:       assertEquals(0, node1.getChildCount());
342:       assertFalse(node1.isArrayLit());
343:       assertFalse(node1.isLabel());
344:       assertFalse(node1.isFunction());
345:       assertFalse(node1.isContinue());
346:       assertFalse(node1.isGetterDef());
347:       assertFalse(node1.isLabelName());
348:       assertFalse(node1.isFor());
349:       assertFalse(node1.isNE());
350:       assertFalse(node1.isIf());
351:       assertFalse(node1.isTry());
352:       assertFalse(node1.hasOneChild());
353:       assertFalse(node1.isNumber());
354:       assertFalse(node1.isIn());
355:       assertFalse(node1.isScript());
356:       assertFalse(node1.isCase());
357:       assertFalse(node1.isInstanceOf());
358:       assertFalse(node1.isBlock());
359:       assertFalse(node1.isHook());
360:       assertFalse(node1.isCatch());
361:       assertFalse(node1.isRegExp());
362:       assertFalse(node1.hasMoreThanOneChild());
363:       assertFalse(node1.isWith());
364:       assertFalse(jSDocInfo0.hasReturnType());
365:       assertFalse(jSDocInfo0.isNoTypeCheck());
366:       assertFalse(jSDocInfo0.isConstructor());
367:       assertFalse(jSDocInfo0.isJaggerInject());
368:       assertFalse(jSDocInfo0.isNoAlias());
369:       assertFalse(jSDocInfo0.isConstant());
370:       assertFalse(jSDocInfo0.containsDeclaration());
371:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
372:       assertFalse(jSDocInfo0.isExport());
373:       assertFalse(jSDocInfo0.isStableIdGenerator());
374:       assertNull(jSDocInfo0.getLendsName());
375:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
376:       assertFalse(jSDocInfo0.isJaggerProvide());
377:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
378:       assertNull(jSDocInfo0.getLicense());
379:       assertFalse(jSDocInfo0.isExpose());
380:       assertFalse(jSDocInfo0.hasBaseType());
381:       assertFalse(jSDocInfo0.hasType());
382:       assertFalse(jSDocInfo0.hasModifies());
383:       assertNull(jSDocInfo0.getOriginalCommentString());
384:       assertNull(jSDocInfo0.getReturnDescription());
385:       assertFalse(jSDocInfo0.hasTypedefType());
386:       assertFalse(jSDocInfo0.isDisposes());
387:       assertNull(jSDocInfo0.getDeprecationReason());
388:       assertFalse(jSDocInfo0.isNoCompile());
389:       assertFalse(jSDocInfo0.isHidden());
390:       assertFalse(jSDocInfo0.isJaggerModule());
391:       assertFalse(jSDocInfo0.isDeprecated());
392:       assertFalse(jSDocInfo0.isExterns());
393:       assertFalse(jSDocInfo0.isMappedIdGenerator());
394:       assertFalse(jSDocInfo0.isNgInject());
395:       assertFalse(jSDocInfo0.isNoShadow());
396:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
397:       assertFalse(jSDocInfo0.isNoSideEffects());
398:       assertNull(jSDocInfo0.getVersion());
399:       assertFalse(jSDocInfo0.isWizaction());
400:       assertFalse(jSDocInfo0.isOverride());
401:       assertFalse(jSDocInfo0.isJavaDispatch());
402:       assertFalse(jSDocInfo0.makesDicts());
403:       assertEquals("JSDocInfo", jSDocInfo0.toString());
404:       assertNull(jSDocInfo0.getMeaning());
405:       assertFalse(jSDocInfo0.isImplicitCast());
406:       assertFalse(jSDocInfo0.shouldPreserveTry());
407:       assertFalse(jSDocInfo0.hasFileOverview());
408:       assertNull(jSDocInfo0.getBlockDescription());
409:       assertFalse(jSDocInfo0.hasThisType());
410:       assertFalse(jSDocInfo0.isInterface());
411:       assertFalse(jSDocInfo0.makesStructs());
412:       assertFalse(jSDocInfo0.isIdGenerator());
413:       assertNull(jSDocInfo0.getDescription());
414:       assertFalse(jSDocInfo0.isDefine());
415:       assertEquals(0, jSDocInfo0.getParameterCount());
416:       assertNull(jSDocInfo0.getVisibility());
417:       assertFalse(jSDocInfo0.hasEnumParameterType());
418:       assertNull(jSDocInfo0.getFileOverview());
419:       assertFalse(node2.isInstanceOf());
420:       assertFalse(node2.isGetProp());
421:       assertFalse(node2.isObjectLit());
422:       assertFalse(node2.isWith());
423:       assertFalse(node2.isBreak());
424:       assertFalse(node2.isNot());
425:       assertFalse(node2.isAnd());
426:       assertFalse(node2.isHook());
427:       assertFalse(node2.hasOneChild());
428:       assertFalse(node2.isGetElem());
429:       assertFalse(node2.isExprResult());
430:       assertFalse(node2.hasChildren());
431:       assertFalse(node2.isDec());
432:       assertFalse(node2.isScript());
433:       assertFalse(node2.isTypeOf());
434:       assertFalse(node2.isAssign());
435:       assertFalse(node2.isComma());
436:       assertFalse(node2.isCase());
437:       assertFalse(node2.isThis());
438:       assertFalse(node2.isReturn());
439:       assertFalse(node2.isOr());
440:       assertFalse(node2.isLabel());
441:       assertFalse(node2.isGetterDef());
442:       assertFalse(node2.isDelProp());
443:       assertFalse(node2.isNumber());
444:       assertFalse(node2.isLabelName());
445:       assertFalse(node2.isSwitch());
446:       assertFalse(node2.isArrayLit());
447:       assertFalse(node2.isNew());
448:       assertFalse(node2.isAdd());
449:       assertFalse(node2.isEmpty());
450:       assertEquals(200747, node2.getSourcePosition());
451:       assertFalse(node2.isDefaultCase());
452:       assertFalse(node2.isDo());
453:       assertFalse(node2.isAssignAdd());
454:       assertFalse(node2.isVar());
455:       assertEquals(43, node2.getCharno());
456:       assertEquals(0, node2.getChildCount());
457:       assertFalse(node2.isCatch());
458:       assertFalse(node2.isNull());
459:       assertFalse(node2.isDebugger());
460:       assertFalse(node2.isVoid());
461:       assertFalse(node2.isStringKey());
462:       assertFalse(node2.isTrue());
463:       assertFalse(node2.isName());
464:       assertFalse(node2.isParamList());
465:       assertFalse(node2.isTry());
466:       assertFalse(node2.isCall());
467:       assertFalse(node2.isRegExp());
468:       assertFalse(node2.isBlock());
469:       assertFalse(node2.isFor());
470:       assertFalse(node2.isWhile());
471:       assertFalse(node2.isIn());
472:       assertFalse(node2.isContinue());
473:       assertEquals(16, node2.getType());
474:       assertFalse(node2.hasMoreThanOneChild());
475:       assertFalse(node2.isString());
476:       assertFalse(node2.isIf());
477:       assertFalse(node2.isNE());
478:       assertFalse(node2.isFalse());
479:       assertEquals(49, node2.getLineno());
480:       assertFalse(node2.isFunction());
481:       assertFalse(node2.isInc());
482:       assertFalse(node2.isCast());
483:       assertFalse(node2.isSetterDef());
484:       assertFalse(node2.isThrow());
485:       assertNotNull(node2);
486:       assertFalse(node1.equals((Object)node0));
487:       assertFalse(node2.equals((Object)node0));
488:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
489:       assertEquals(54, Node.SLASH_V);
490:       assertEquals(52, Node.LENGTH);
491:       assertEquals(15, Node.NO_SIDE_EFFECTS);
492:       assertEquals(40, Node.ORIGINALNAME_PROP);
493:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
494:       assertEquals(49, Node.DIRECT_EVAL);
495:       assertEquals(50, Node.FREE_CALL);
496:       assertEquals(46, Node.IS_NAMESPACE);
497:       assertEquals(51, Node.STATIC_SOURCE_FILE);
498:       assertEquals(57, Node.REFLECTED_OBJECT);
499:       assertEquals(48, Node.DIRECTIVES);
500:       assertEquals(37, Node.OPT_ARG_NAME);
501:       assertEquals(32, Node.INCRDECR_PROP);
502:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
503:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
504:       assertEquals(1, Node.DECR_FLAG);
505:       assertEquals(4095, Node.COLUMN_MASK);
506:       assertEquals(12, Node.COLUMN_BITS);
507:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
508:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
509:       assertEquals(53, Node.INPUT_ID);
510:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
511:       assertEquals(43, Node.IS_CONSTANT_NAME);
512:       assertEquals(56, Node.CHANGE_TIME);
513:       assertEquals(36, Node.QUOTED_PROP);
514:       assertEquals(2, Node.POST_FLAG);
515:       assertEquals(8, Node.FLAG_NO_THROWS);
516:       assertEquals(55, Node.INFERRED_FUNCTION);
517:       assertEquals(29, Node.JSDOC_INFO_PROP);
518:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
519:       assertEquals(39, Node.EMPTY_BLOCK);
520:       assertEquals(30, Node.VAR_ARGS_NAME);
521:       assertEquals(57, Node.LAST_PROP);
522:       assertEquals(47, Node.IS_DISPATCHER);
523:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
524:       assertEquals(50, Node.FREE_CALL);
525:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
526:       assertEquals(57, Node.REFLECTED_OBJECT);
527:       assertEquals(48, Node.DIRECTIVES);
528:       assertEquals(54, Node.SLASH_V);
529:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
530:       assertEquals(40, Node.ORIGINALNAME_PROP);
531:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
532:       assertEquals(30, Node.VAR_ARGS_NAME);
533:       assertEquals(49, Node.DIRECT_EVAL);
534:       assertEquals(57, Node.LAST_PROP);
535:       assertEquals(36, Node.QUOTED_PROP);
536:       assertEquals(53, Node.INPUT_ID);
537:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
538:       assertEquals(8, Node.FLAG_NO_THROWS);
539:       assertEquals(52, Node.LENGTH);
540:       assertEquals(15, Node.NO_SIDE_EFFECTS);
541:       assertEquals(55, Node.INFERRED_FUNCTION);
542:       assertEquals(39, Node.EMPTY_BLOCK);
543:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
544:       assertEquals(29, Node.JSDOC_INFO_PROP);
545:       assertEquals(56, Node.CHANGE_TIME);
546:       assertEquals(2, Node.POST_FLAG);
547:       assertEquals(47, Node.IS_DISPATCHER);
548:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
549:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
550:       assertEquals(37, Node.OPT_ARG_NAME);
551:       assertEquals(1, Node.DECR_FLAG);
552:       assertEquals(4095, Node.COLUMN_MASK);
553:       assertEquals(43, Node.IS_CONSTANT_NAME);
554:       assertEquals(51, Node.STATIC_SOURCE_FILE);
555:       assertEquals(12, Node.COLUMN_BITS);
556:       assertEquals(46, Node.IS_NAMESPACE);
557:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
558:       assertEquals(32, Node.INCRDECR_PROP);
559:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
560:       assertSame(node1, node2);
561:       assertSame(node2, node1);
562:       
563:       Iterable<Node> iterable0 = node0.children();
564:       assertEquals(1473, node0.getLineno());
565:       assertFalse(node0.isOr());
566:       assertFalse(node0.isLabel());
567:       assertFalse(node0.isDec());
568:       assertFalse(node0.hasChildren());
569:       assertFalse(node0.isReturn());
570:       assertFalse(node0.isAssignAdd());
571:       assertFalse(node0.isContinue());
572:       assertFalse(node0.isGetElem());
573:       assertFalse(node0.isAssign());
574:       assertFalse(node0.isLabelName());
575:       assertFalse(node0.isTypeOf());
576:       assertFalse(node0.hasMoreThanOneChild());
577:       assertFalse(node0.isCast());
578:       assertEquals(1, node0.getType());
579:       assertFalse(node0.isBlock());
580:       assertFalse(node0.isWhile());
581:       assertFalse(node0.isObjectLit());
582:       assertFalse(node0.isNot());
583:       assertFalse(node0.hasOneChild());
584:       assertFalse(node0.isNumber());
585:       assertFalse(node0.isScript());
586:       assertFalse(node0.isGetProp());
587:       assertFalse(node0.isComma());
588:       assertFalse(node0.isNull());
589:       assertFalse(node0.isStringKey());
590:       assertFalse(node0.isParamList());
591:       assertFalse(node0.isCall());
592:       assertFalse(node0.isName());
593:       assertFalse(node0.isBreak());
594:       assertEquals(0, node0.getChildCount());
595:       assertFalse(node0.isVoid());
596:       assertFalse(node0.isTrue());
597:       assertFalse(node0.isExprResult());
598:       assertFalse(node0.isNew());
599:       assertFalse(node0.isDefaultCase());
600:       assertFalse(node0.isVar());
601:       assertFalse(node0.isDo());
602:       assertEquals(6037503, node0.getSourcePosition());
603:       assertFalse(node0.isAdd());
604:       assertFalse(node0.isEmpty());
605:       assertFalse(node0.isDelProp());
606:       assertFalse(node0.isIf());
607:       assertFalse(node0.isFor());
608:       assertFalse(node0.isNE());
609:       assertFalse(node0.isArrayLit());
610:       assertFalse(node0.isDebugger());
611:       assertEquals(4095, node0.getCharno());
612:       assertFalse(node0.isTry());
613:       assertFalse(node0.isRegExp());
614:       assertFalse(node0.isHook());
615:       assertFalse(node0.isSwitch());
616:       assertFalse(node0.isCase());
617:       assertFalse(node0.isGetterDef());
618:       assertFalse(node0.isString());
619:       assertFalse(node0.isThis());
620:       assertFalse(node0.isSetterDef());
621:       assertFalse(node0.isThrow());
622:       assertFalse(node0.isAnd());
623:       assertFalse(node0.isFalse());
624:       assertFalse(node0.isWith());
625:       assertFalse(node0.isInstanceOf());
626:       assertFalse(node0.isCatch());
627:       assertFalse(node0.isFunction());
628:       assertFalse(node0.isInc());
629:       assertFalse(node0.isIn());
630:       assertNotNull(iterable0);
631:       assertFalse(node0.equals((Object)node1));
632:       assertFalse(node0.equals((Object)node2));
633:       assertFalse(iterable0.contains(node0));
634:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
635:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
636:       assertEquals(53, Node.INPUT_ID);
637:       assertEquals(29, Node.JSDOC_INFO_PROP);
638:       assertEquals(47, Node.IS_DISPATCHER);
639:       assertEquals(2, Node.POST_FLAG);
640:       assertEquals(55, Node.INFERRED_FUNCTION);
641:       assertEquals(4095, Node.COLUMN_MASK);
642:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
643:       assertEquals(48, Node.DIRECTIVES);
644:       assertEquals(49, Node.DIRECT_EVAL);
645:       assertEquals(39, Node.EMPTY_BLOCK);
646:       assertEquals(37, Node.OPT_ARG_NAME);
647:       assertEquals(56, Node.CHANGE_TIME);
648:       assertEquals(15, Node.NO_SIDE_EFFECTS);
649:       assertEquals(36, Node.QUOTED_PROP);
650:       assertEquals(8, Node.FLAG_NO_THROWS);
651:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
652:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
653:       assertEquals(57, Node.REFLECTED_OBJECT);
654:       assertEquals(52, Node.LENGTH);
655:       assertEquals(40, Node.ORIGINALNAME_PROP);
656:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
657:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
658:       assertEquals(57, Node.LAST_PROP);
659:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
660:       assertEquals(30, Node.VAR_ARGS_NAME);
661:       assertEquals(51, Node.STATIC_SOURCE_FILE);
662:       assertEquals(12, Node.COLUMN_BITS);
663:       assertEquals(32, Node.INCRDECR_PROP);
664:       assertEquals(46, Node.IS_NAMESPACE);
665:       assertEquals(1, Node.DECR_FLAG);
666:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
667:       assertEquals(43, Node.IS_CONSTANT_NAME);
668:       assertEquals(50, Node.FREE_CALL);
669:       assertEquals(54, Node.SLASH_V);
670:       
671:       boolean boolean1 = node0.isAnd();
672:       assertEquals(1473, node0.getLineno());
673:       assertFalse(node0.isOr());
674:       assertFalse(node0.isLabel());
675:       assertFalse(node0.isDec());
676:       assertFalse(node0.hasChildren());
677:       assertFalse(node0.isReturn());
678:       assertFalse(node0.isAssignAdd());
679:       assertFalse(node0.isContinue());
680:       assertFalse(node0.isGetElem());
681:       assertFalse(node0.isAssign());
682:       assertFalse(node0.isLabelName());
683:       assertFalse(node0.isTypeOf());
684:       assertFalse(node0.hasMoreThanOneChild());
685:       assertFalse(node0.isCast());
686:       assertEquals(1, node0.getType());
687:       assertFalse(node0.isBlock());
688:       assertFalse(node0.isWhile());
689:       assertFalse(node0.isObjectLit());
690:       assertFalse(node0.isNot());
691:       assertFalse(node0.hasOneChild());
692:       assertFalse(node0.isNumber());
693:       assertFalse(node0.isScript());
694:       assertFalse(node0.isGetProp());
695:       assertFalse(node0.isComma());
696:       assertFalse(node0.isNull());
697:       assertFalse(node0.isStringKey());
698:       assertFalse(node0.isParamList());
699:       assertFalse(node0.isCall());
700:       assertFalse(node0.isName());
701:       assertFalse(node0.isBreak());
702:       assertEquals(0, node0.getChildCount());
703:       assertFalse(node0.isVoid());
704:       assertFalse(node0.isTrue());
705:       assertFalse(node0.isExprResult());
706:       assertFalse(node0.isNew());
707:       assertFalse(node0.isDefaultCase());
708:       assertFalse(node0.isVar());
709:       assertFalse(node0.isDo());
710:       assertEquals(6037503, node0.getSourcePosition());
711:       assertFalse(node0.isAdd());
712:       assertFalse(node0.isEmpty());
713:       assertFalse(node0.isDelProp());
714:       assertFalse(node0.isIf());
715:       assertFalse(node0.isFor());
716:       assertFalse(node0.isNE());
717:       assertFalse(node0.isArrayLit());
718:       assertFalse(node0.isDebugger());
719:       assertEquals(4095, node0.getCharno());
720:       assertFalse(node0.isTry());
721:       assertFalse(node0.isRegExp());
722:       assertFalse(node0.isHook());
723:       assertFalse(node0.isSwitch());
724:       assertFalse(node0.isCase());
725:       assertFalse(node0.isGetterDef());
726:       assertFalse(node0.isString());
727:       assertFalse(node0.isThis());
728:       assertFalse(node0.isSetterDef());
729:       assertFalse(node0.isThrow());
730:       assertFalse(node0.isAnd());
731:       assertFalse(node0.isFalse());
732:       assertFalse(node0.isWith());
733:       assertFalse(node0.isInstanceOf());
734:       assertFalse(node0.isCatch());
735:       assertFalse(node0.isFunction());
736:       assertFalse(node0.isInc());
737:       assertFalse(node0.isIn());
738:       assertFalse(node0.equals((Object)node1));
739:       assertFalse(node0.equals((Object)node2));
740:       assertTrue(boolean1 == boolean0);
741:       assertFalse(boolean1);
742:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
743:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
744:       assertEquals(53, Node.INPUT_ID);
745:       assertEquals(29, Node.JSDOC_INFO_PROP);
746:       assertEquals(47, Node.IS_DISPATCHER);
747:       assertEquals(2, Node.POST_FLAG);
748:       assertEquals(55, Node.INFERRED_FUNCTION);
749:       assertEquals(4095, Node.COLUMN_MASK);
750:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
751:       assertEquals(48, Node.DIRECTIVES);
752:       assertEquals(49, Node.DIRECT_EVAL);
753:       assertEquals(39, Node.EMPTY_BLOCK);
754:       assertEquals(37, Node.OPT_ARG_NAME);
755:       assertEquals(56, Node.CHANGE_TIME);
756:       assertEquals(15, Node.NO_SIDE_EFFECTS);
757:       assertEquals(36, Node.QUOTED_PROP);
758:       assertEquals(8, Node.FLAG_NO_THROWS);
759:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
760:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
761:       assertEquals(57, Node.REFLECTED_OBJECT);
762:       assertEquals(52, Node.LENGTH);
763:       assertEquals(40, Node.ORIGINALNAME_PROP);
764:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
765:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
766:       assertEquals(57, Node.LAST_PROP);
767:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
768:       assertEquals(30, Node.VAR_ARGS_NAME);
769:       assertEquals(51, Node.STATIC_SOURCE_FILE);
770:       assertEquals(12, Node.COLUMN_BITS);
771:       assertEquals(32, Node.INCRDECR_PROP);
772:       assertEquals(46, Node.IS_NAMESPACE);
773:       assertEquals(1, Node.DECR_FLAG);
774:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
775:       assertEquals(43, Node.IS_CONSTANT_NAME);
776:       assertEquals(50, Node.FREE_CALL);
777:       assertEquals(54, Node.SLASH_V);
778:       
779:       jSDocInfo0.setLendsName("com.google.javascript.rhino.Node$AncestorIterable");
780:       assertFalse(jSDocInfo0.hasReturnType());
781:       assertFalse(jSDocInfo0.isNoTypeCheck());
782:       assertFalse(jSDocInfo0.isConstructor());
783:       assertFalse(jSDocInfo0.isJaggerInject());
784:       assertFalse(jSDocInfo0.isNoAlias());
785:       assertFalse(jSDocInfo0.isConstant());
786:       assertFalse(jSDocInfo0.containsDeclaration());
787:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
788:       assertFalse(jSDocInfo0.isExport());
789:       assertFalse(jSDocInfo0.isStableIdGenerator());
790:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
791:       assertFalse(jSDocInfo0.isJaggerProvide());
792:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
793:       assertNull(jSDocInfo0.getLicense());
794:       assertFalse(jSDocInfo0.isExpose());
795:       assertFalse(jSDocInfo0.hasBaseType());
796:       assertFalse(jSDocInfo0.hasType());
797:       assertFalse(jSDocInfo0.hasModifies());
798:       assertNull(jSDocInfo0.getOriginalCommentString());
799:       assertNull(jSDocInfo0.getReturnDescription());
800:       assertFalse(jSDocInfo0.hasTypedefType());
801:       assertFalse(jSDocInfo0.isDisposes());
802:       assertNull(jSDocInfo0.getDeprecationReason());
803:       assertFalse(jSDocInfo0.isNoCompile());
804:       assertFalse(jSDocInfo0.isHidden());
805:       assertFalse(jSDocInfo0.isJaggerModule());
806:       assertFalse(jSDocInfo0.isDeprecated());
807:       assertEquals("com.google.javascript.rhino.Node$AncestorIterable", jSDocInfo0.getLendsName());
808:       assertFalse(jSDocInfo0.isExterns());
809:       assertFalse(jSDocInfo0.isMappedIdGenerator());
810:       assertFalse(jSDocInfo0.isNgInject());
811:       assertFalse(jSDocInfo0.isNoShadow());
812:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
813:       assertFalse(jSDocInfo0.isNoSideEffects());
814:       assertNull(jSDocInfo0.getVersion());
815:       assertFalse(jSDocInfo0.isWizaction());
816:       assertFalse(jSDocInfo0.isOverride());
817:       assertFalse(jSDocInfo0.isJavaDispatch());
818:       assertFalse(jSDocInfo0.makesDicts());
819:       assertEquals("JSDocInfo", jSDocInfo0.toString());
820:       assertNull(jSDocInfo0.getMeaning());
821:       assertFalse(jSDocInfo0.isImplicitCast());
822:       assertFalse(jSDocInfo0.shouldPreserveTry());
823:       assertFalse(jSDocInfo0.hasFileOverview());
824:       assertNull(jSDocInfo0.getBlockDescription());
825:       assertFalse(jSDocInfo0.hasThisType());
826:       assertFalse(jSDocInfo0.isInterface());
827:       assertFalse(jSDocInfo0.makesStructs());
828:       assertFalse(jSDocInfo0.isIdGenerator());
829:       assertNull(jSDocInfo0.getDescription());
830:       assertFalse(jSDocInfo0.isDefine());
831:       assertEquals(0, jSDocInfo0.getParameterCount());
832:       assertNull(jSDocInfo0.getVisibility());
833:       assertFalse(jSDocInfo0.hasEnumParameterType());
834:       assertNull(jSDocInfo0.getFileOverview());
835:       
836:       node1.addSuppression("gs1IcjVs7cZy}^~");
837:       assertFalse(node1.isBreak());
838:       assertFalse(node1.isThis());
839:       assertFalse(node1.isThrow());
840:       assertFalse(node1.isGetProp());
841:       assertFalse(node1.isObjectLit());
842:       assertFalse(node1.isInc());
843:       assertFalse(node1.isNot());
844:       assertFalse(node1.isAnd());
845:       assertFalse(node1.isSwitch());
846:       assertFalse(node1.isCast());
847:       assertFalse(node1.isFalse());
848:       assertEquals(200747, node1.getSourcePosition());
849:       assertFalse(node1.isDelProp());
850:       assertFalse(node1.isAssign());
851:       assertFalse(node1.isDec());
852:       assertFalse(node1.isGetElem());
853:       assertFalse(node1.isEmpty());
854:       assertFalse(node1.hasChildren());
855:       assertFalse(node1.isAssignAdd());
856:       assertFalse(node1.isOr());
857:       assertEquals(16, node1.getType());
858:       assertFalse(node1.isDebugger());
859:       assertFalse(node1.isString());
860:       assertFalse(node1.isWhile());
861:       assertFalse(node1.isTrue());
862:       assertFalse(node1.isVoid());
863:       assertEquals(43, node1.getCharno());
864:       assertFalse(node1.isReturn());
865:       assertFalse(node1.isExprResult());
866:       assertFalse(node1.isCall());
867:       assertFalse(node1.isComma());
868:       assertFalse(node1.isTypeOf());
869:       assertFalse(node1.isNull());
870:       assertFalse(node1.isSetterDef());
871:       assertFalse(node1.isParamList());
872:       assertFalse(node1.isVar());
873:       assertFalse(node1.isStringKey());
874:       assertFalse(node1.isName());
875:       assertEquals(49, node1.getLineno());
876:       assertFalse(node1.isNew());
877:       assertFalse(node1.isAdd());
878:       assertFalse(node1.isDo());
879:       assertFalse(node1.isDefaultCase());
880:       assertEquals(0, node1.getChildCount());
881:       assertFalse(node1.isArrayLit());
882:       assertFalse(node1.isLabel());
883:       assertFalse(node1.isFunction());
884:       assertFalse(node1.isContinue());
885:       assertFalse(node1.isGetterDef());
886:       assertFalse(node1.isLabelName());
887:       assertFalse(node1.isFor());
888:       assertFalse(node1.isNE());
889:       assertFalse(node1.isIf());
890:       assertFalse(node1.isTry());
891:       assertFalse(node1.hasOneChild());
892:       assertFalse(node1.isNumber());
893:       assertFalse(node1.isIn());
894:       assertFalse(node1.isScript());
895:       assertFalse(node1.isCase());
896:       assertFalse(node1.isInstanceOf());
897:       assertFalse(node1.isBlock());
898:       assertFalse(node1.isHook());
899:       assertFalse(node1.isCatch());
900:       assertFalse(node1.isRegExp());
901:       assertFalse(node1.hasMoreThanOneChild());
902:       assertFalse(node1.isWith());
903:       assertFalse(node1.equals((Object)node0));
904:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
905:       assertEquals(54, Node.SLASH_V);
906:       assertEquals(52, Node.LENGTH);
907:       assertEquals(15, Node.NO_SIDE_EFFECTS);
908:       assertEquals(40, Node.ORIGINALNAME_PROP);
909:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
910:       assertEquals(49, Node.DIRECT_EVAL);
911:       assertEquals(50, Node.FREE_CALL);
912:       assertEquals(46, Node.IS_NAMESPACE);
913:       assertEquals(51, Node.STATIC_SOURCE_FILE);
914:       assertEquals(57, Node.REFLECTED_OBJECT);
915:       assertEquals(48, Node.DIRECTIVES);
916:       assertEquals(37, Node.OPT_ARG_NAME);
917:       assertEquals(32, Node.INCRDECR_PROP);
918:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
919:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
920:       assertEquals(1, Node.DECR_FLAG);
921:       assertEquals(4095, Node.COLUMN_MASK);
922:       assertEquals(12, Node.COLUMN_BITS);
923:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
924:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
925:       assertEquals(53, Node.INPUT_ID);
926:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
927:       assertEquals(43, Node.IS_CONSTANT_NAME);
928:       assertEquals(56, Node.CHANGE_TIME);
929:       assertEquals(36, Node.QUOTED_PROP);
930:       assertEquals(2, Node.POST_FLAG);
931:       assertEquals(8, Node.FLAG_NO_THROWS);
932:       assertEquals(55, Node.INFERRED_FUNCTION);
933:       assertEquals(29, Node.JSDOC_INFO_PROP);
934:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
935:       assertEquals(39, Node.EMPTY_BLOCK);
936:       assertEquals(30, Node.VAR_ARGS_NAME);
937:       assertEquals(57, Node.LAST_PROP);
938:       assertEquals(47, Node.IS_DISPATCHER);
939:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
940:       assertSame(node1, node2);
941:       
942:       boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
943:       assertTrue(boolean2 == boolean1);
944:       assertTrue(boolean2 == boolean0);
945:       assertFalse(boolean2);
946:       
947:       boolean boolean3 = node0.isArrayLit();
948:       assertEquals(1473, node0.getLineno());
949:       assertFalse(node0.isOr());
950:       assertFalse(node0.isLabel());
951:       assertFalse(node0.isDec());
952:       assertFalse(node0.hasChildren());
953:       assertFalse(node0.isReturn());
954:       assertFalse(node0.isAssignAdd());
955:       assertFalse(node0.isContinue());
956:       assertFalse(node0.isGetElem());
957:       assertFalse(node0.isAssign());
958:       assertFalse(node0.isLabelName());
959:       assertFalse(node0.isTypeOf());
960:       assertFalse(node0.hasMoreThanOneChild());
961:       assertFalse(node0.isCast());
962:       assertEquals(1, node0.getType());
963:       assertFalse(node0.isBlock());
964:       assertFalse(node0.isWhile());
965:       assertFalse(node0.isObjectLit());
966:       assertFalse(node0.isNot());
967:       assertFalse(node0.hasOneChild());
968:       assertFalse(node0.isNumber());
969:       assertFalse(node0.isScript());
970:       assertFalse(node0.isGetProp());
971:       assertFalse(node0.isComma());
972:       assertFalse(node0.isNull());
973:       assertFalse(node0.isStringKey());
974:       assertFalse(node0.isParamList());
975:       assertFalse(node0.isCall());
976:       assertFalse(node0.isName());
977:       assertFalse(node0.isBreak());
978:       assertEquals(0, node0.getChildCount());
979:       assertFalse(node0.isVoid());
980:       assertFalse(node0.isTrue());
981:       assertFalse(node0.isExprResult());
982:       assertFalse(node0.isNew());
983:       assertFalse(node0.isDefaultCase());
984:       assertFalse(node0.isVar());
985:       assertFalse(node0.isDo());
986:       assertEquals(6037503, node0.getSourcePosition());
987:       assertFalse(node0.isAdd());
988:       assertFalse(node0.isEmpty());
989:       assertFalse(node0.isDelProp());
990:       assertFalse(node0.isIf());
991:       assertFalse(node0.isFor());
992:       assertFalse(node0.isNE());
993:       assertFalse(node0.isArrayLit());
994:       assertFalse(node0.isDebugger());
995:       assertEquals(4095, node0.getCharno());
996:       assertFalse(node0.isTry());
997:       assertFalse(node0.isRegExp());
998:       assertFalse(node0.isHook());
999:       assertFalse(node0.isSwitch());
1000:       assertFalse(node0.isCase());
1001:       assertFalse(node0.isGetterDef());
1002:       assertFalse(node0.isString());
1003:       assertFalse(node0.isThis());
1004:       assertFalse(node0.isSetterDef());
1005:       assertFalse(node0.isThrow());
1006:       assertFalse(node0.isAnd());
1007:       assertFalse(node0.isFalse());
1008:       assertFalse(node0.isWith());
1009:       assertFalse(node0.isInstanceOf());
1010:       assertFalse(node0.isCatch());
1011:       assertFalse(node0.isFunction());
1012:       assertFalse(node0.isInc());
1013:       assertFalse(node0.isIn());
1014:       assertFalse(node0.equals((Object)node1));
1015:       assertFalse(node0.equals((Object)node2));
1016:       assertTrue(boolean3 == boolean1);
1017:       assertTrue(boolean3 == boolean0);
1018:       assertTrue(boolean3 == boolean2);
1019:       assertFalse(boolean3);
1020:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1021:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1022:       assertEquals(53, Node.INPUT_ID);
1023:       assertEquals(29, Node.JSDOC_INFO_PROP);
1024:       assertEquals(47, Node.IS_DISPATCHER);
1025:       assertEquals(2, Node.POST_FLAG);
1026:       assertEquals(55, Node.INFERRED_FUNCTION);
1027:       assertEquals(4095, Node.COLUMN_MASK);
1028:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1029:       assertEquals(48, Node.DIRECTIVES);
1030:       assertEquals(49, Node.DIRECT_EVAL);
1031:       assertEquals(39, Node.EMPTY_BLOCK);
1032:       assertEquals(37, Node.OPT_ARG_NAME);
1033:       assertEquals(56, Node.CHANGE_TIME);
1034:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1035:       assertEquals(36, Node.QUOTED_PROP);
1036:       assertEquals(8, Node.FLAG_NO_THROWS);
1037:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1038:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1039:       assertEquals(57, Node.REFLECTED_OBJECT);
1040:       assertEquals(52, Node.LENGTH);
1041:       assertEquals(40, Node.ORIGINALNAME_PROP);
1042:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1043:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1044:       assertEquals(57, Node.LAST_PROP);
1045:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1046:       assertEquals(30, Node.VAR_ARGS_NAME);
1047:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1048:       assertEquals(12, Node.COLUMN_BITS);
1049:       assertEquals(32, Node.INCRDECR_PROP);
1050:       assertEquals(46, Node.IS_NAMESPACE);
1051:       assertEquals(1, Node.DECR_FLAG);
1052:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1053:       assertEquals(43, Node.IS_CONSTANT_NAME);
1054:       assertEquals(50, Node.FREE_CALL);
1055:       assertEquals(54, Node.SLASH_V);
1056:       
1057:       node1.putIntProp(4095, 1473);
1058:       assertFalse(node1.isBreak());
1059:       assertFalse(node1.isThis());
1060:       assertFalse(node1.isThrow());
1061:       assertFalse(node1.isGetProp());
1062:       assertFalse(node1.isObjectLit());
1063:       assertFalse(node1.isInc());
1064:       assertFalse(node1.isNot());
1065:       assertFalse(node1.isAnd());
1066:       assertFalse(node1.isSwitch());
1067:       assertFalse(node1.isCast());
1068:       assertFalse(node1.isFalse());
1069:       assertEquals(200747, node1.getSourcePosition());
1070:       assertFalse(node1.isDelProp());
1071:       assertFalse(node1.isAssign());
1072:       assertFalse(node1.isDec());
1073:       assertFalse(node1.isGetElem());
1074:       assertFalse(node1.isEmpty());
1075:       assertFalse(node1.hasChildren());
1076:       assertFalse(node1.isAssignAdd());
1077:       assertFalse(node1.isOr());
1078:       assertEquals(16, node1.getType());
1079:       assertFalse(node1.isDebugger());
1080:       assertFalse(node1.isString());
1081:       assertFalse(node1.isWhile());
1082:       assertFalse(node1.isTrue());
1083:       assertFalse(node1.isVoid());
1084:       assertEquals(43, node1.getCharno());
1085:       assertFalse(node1.isReturn());
1086:       assertFalse(node1.isExprResult());
1087:       assertFalse(node1.isCall());
1088:       assertFalse(node1.isComma());
1089:       assertFalse(node1.isTypeOf());
1090:       assertFalse(node1.isNull());
1091:       assertFalse(node1.isSetterDef());
1092:       assertFalse(node1.isParamList());
1093:       assertFalse(node1.isVar());
1094:       assertFalse(node1.isStringKey());
1095:       assertFalse(node1.isName());
1096:       assertEquals(49, node1.getLineno());
1097:       assertFalse(node1.isNew());
1098:       assertFalse(node1.isAdd());
1099:       assertFalse(node1.isDo());
1100:       assertFalse(node1.isDefaultCase());
1101:       assertEquals(0, node1.getChildCount());
1102:       assertFalse(node1.isArrayLit());
1103:       assertFalse(node1.isLabel());
1104:       assertFalse(node1.isFunction());
1105:       assertFalse(node1.isContinue());
1106:       assertFalse(node1.isGetterDef());
1107:       assertFalse(node1.isLabelName());
1108:       assertFalse(node1.isFor());
1109:       assertFalse(node1.isNE());
1110:       assertFalse(node1.isIf());
1111:       assertFalse(node1.isTry());
1112:       assertFalse(node1.hasOneChild());
1113:       assertFalse(node1.isNumber());
1114:       assertFalse(node1.isIn());
1115:       assertFalse(node1.isScript());
1116:       assertFalse(node1.isCase());
1117:       assertFalse(node1.isInstanceOf());
1118:       assertFalse(node1.isBlock());
1119:       assertFalse(node1.isHook());
1120:       assertFalse(node1.isCatch());
1121:       assertFalse(node1.isRegExp());
1122:       assertFalse(node1.hasMoreThanOneChild());
1123:       assertFalse(node1.isWith());
1124:       assertFalse(node1.equals((Object)node0));
1125:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1126:       assertEquals(54, Node.SLASH_V);
1127:       assertEquals(52, Node.LENGTH);
1128:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1129:       assertEquals(40, Node.ORIGINALNAME_PROP);
1130:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1131:       assertEquals(49, Node.DIRECT_EVAL);
1132:       assertEquals(50, Node.FREE_CALL);
1133:       assertEquals(46, Node.IS_NAMESPACE);
1134:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1135:       assertEquals(57, Node.REFLECTED_OBJECT);
1136:       assertEquals(48, Node.DIRECTIVES);
1137:       assertEquals(37, Node.OPT_ARG_NAME);
1138:       assertEquals(32, Node.INCRDECR_PROP);
1139:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1140:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1141:       assertEquals(1, Node.DECR_FLAG);
1142:       assertEquals(4095, Node.COLUMN_MASK);
1143:       assertEquals(12, Node.COLUMN_BITS);
1144:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1145:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1146:       assertEquals(53, Node.INPUT_ID);
1147:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1148:       assertEquals(43, Node.IS_CONSTANT_NAME);
1149:       assertEquals(56, Node.CHANGE_TIME);
1150:       assertEquals(36, Node.QUOTED_PROP);
1151:       assertEquals(2, Node.POST_FLAG);
1152:       assertEquals(8, Node.FLAG_NO_THROWS);
1153:       assertEquals(55, Node.INFERRED_FUNCTION);
1154:       assertEquals(29, Node.JSDOC_INFO_PROP);
1155:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1156:       assertEquals(39, Node.EMPTY_BLOCK);
1157:       assertEquals(30, Node.VAR_ARGS_NAME);
1158:       assertEquals(57, Node.LAST_PROP);
1159:       assertEquals(47, Node.IS_DISPATCHER);
1160:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1161:       assertSame(node1, node2);
1162:       
1163:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node2);
1164:       assertFalse(node1.isBreak());
1165:       assertFalse(node1.isThis());
1166:       assertFalse(node1.isThrow());
1167:       assertFalse(node1.isGetProp());
1168:       assertFalse(node1.isObjectLit());
1169:       assertFalse(node1.isInc());
1170:       assertFalse(node1.isNot());
1171:       assertFalse(node1.isAnd());
1172:       assertFalse(node1.isSwitch());
1173:       assertFalse(node1.isCast());
1174:       assertFalse(node1.isFalse());
1175:       assertEquals(200747, node1.getSourcePosition());
1176:       assertFalse(node1.isDelProp());
1177:       assertFalse(node1.isAssign());
1178:       assertFalse(node1.isDec());
1179:       assertFalse(node1.isGetElem());
1180:       assertFalse(node1.isEmpty());
1181:       assertFalse(node1.hasChildren());
1182:       assertFalse(node1.isAssignAdd());
1183:       assertFalse(node1.isOr());
1184:       assertEquals(16, node1.getType());
1185:       assertFalse(node1.isDebugger());
1186:       assertFalse(node1.isString());
1187:       assertFalse(node1.isWhile());
1188:       assertFalse(node1.isTrue());
1189:       assertFalse(node1.isVoid());
1190:       assertEquals(43, node1.getCharno());
1191:       assertFalse(node1.isReturn());
1192:       assertFalse(node1.isExprResult());
1193:       assertFalse(node1.isCall());
1194:       assertFalse(node1.isComma());
1195:       assertFalse(node1.isTypeOf());
1196:       assertFalse(node1.isNull());
1197:       assertFalse(node1.isSetterDef());
1198:       assertFalse(node1.isParamList());
1199:       assertFalse(node1.isVar());
1200:       assertFalse(node1.isStringKey());
1201:       assertFalse(node1.isName());
1202:       assertEquals(49, node1.getLineno());
1203:       assertFalse(node1.isNew());
1204:       assertFalse(node1.isAdd());
1205:       assertFalse(node1.isDo());
1206:       assertFalse(node1.isDefaultCase());
1207:       assertEquals(0, node1.getChildCount());
1208:       assertFalse(node1.isArrayLit());
1209:       assertFalse(node1.isLabel());
1210:       assertFalse(node1.isFunction());
1211:       assertFalse(node1.isContinue());
1212:       assertFalse(node1.isGetterDef());
1213:       assertFalse(node1.isLabelName());
1214:       assertFalse(node1.isFor());
1215:       assertFalse(node1.isNE());
1216:       assertFalse(node1.isIf());
1217:       assertFalse(node1.isTry());
1218:       assertFalse(node1.hasOneChild());
1219:       assertFalse(node1.isNumber());
1220:       assertFalse(node1.isIn());
1221:       assertFalse(node1.isScript());
1222:       assertFalse(node1.isCase());
1223:       assertFalse(node1.isInstanceOf());
1224:       assertFalse(node1.isBlock());
1225:       assertFalse(node1.isHook());
1226:       assertFalse(node1.isCatch());
1227:       assertFalse(node1.isRegExp());
1228:       assertFalse(node1.hasMoreThanOneChild());
1229:       assertFalse(node1.isWith());
1230:       assertFalse(jSDocInfo0.hasReturnType());
1231:       assertFalse(jSDocInfo0.isNoTypeCheck());
1232:       assertFalse(jSDocInfo0.isConstructor());
1233:       assertFalse(jSDocInfo0.isJaggerInject());
1234:       assertFalse(jSDocInfo0.isNoAlias());
1235:       assertFalse(jSDocInfo0.isConstant());
1236:       assertFalse(jSDocInfo0.containsDeclaration());
1237:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1238:       assertFalse(jSDocInfo0.isExport());
1239:       assertFalse(jSDocInfo0.isStableIdGenerator());
1240:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1241:       assertFalse(jSDocInfo0.isJaggerProvide());
1242:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1243:       assertNull(jSDocInfo0.getLicense());
1244:       assertFalse(jSDocInfo0.isExpose());
1245:       assertFalse(jSDocInfo0.hasBaseType());
1246:       assertFalse(jSDocInfo0.hasType());
1247:       assertFalse(jSDocInfo0.hasModifies());
1248:       assertNull(jSDocInfo0.getOriginalCommentString());
1249:       assertNull(jSDocInfo0.getReturnDescription());
1250:       assertFalse(jSDocInfo0.hasTypedefType());
1251:       assertFalse(jSDocInfo0.isDisposes());
1252:       assertNull(jSDocInfo0.getDeprecationReason());
1253:       assertFalse(jSDocInfo0.isNoCompile());
1254:       assertFalse(jSDocInfo0.isHidden());
1255:       assertFalse(jSDocInfo0.isJaggerModule());
1256:       assertFalse(jSDocInfo0.isDeprecated());
1257:       assertEquals("com.google.javascript.rhino.Node$AncestorIterable", jSDocInfo0.getLendsName());
1258:       assertFalse(jSDocInfo0.isExterns());
1259:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1260:       assertFalse(jSDocInfo0.isNgInject());
1261:       assertFalse(jSDocInfo0.isNoShadow());
1262:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1263:       assertFalse(jSDocInfo0.isNoSideEffects());
1264:       assertNull(jSDocInfo0.getVersion());
1265:       assertFalse(jSDocInfo0.isWizaction());
1266:       assertFalse(jSDocInfo0.isOverride());
1267:       assertFalse(jSDocInfo0.isJavaDispatch());
1268:       assertFalse(jSDocInfo0.makesDicts());
1269:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1270:       assertNull(jSDocInfo0.getMeaning());
1271:       assertFalse(jSDocInfo0.isImplicitCast());
1272:       assertFalse(jSDocInfo0.shouldPreserveTry());
1273:       assertFalse(jSDocInfo0.hasFileOverview());
1274:       assertNull(jSDocInfo0.getBlockDescription());
1275:       assertFalse(jSDocInfo0.hasThisType());
1276:       assertFalse(jSDocInfo0.isInterface());
1277:       assertFalse(jSDocInfo0.makesStructs());
1278:       assertFalse(jSDocInfo0.isIdGenerator());
1279:       assertNull(jSDocInfo0.getDescription());
1280:       assertFalse(jSDocInfo0.isDefine());
1281:       assertEquals(0, jSDocInfo0.getParameterCount());
1282:       assertNull(jSDocInfo0.getVisibility());
1283:       assertFalse(jSDocInfo0.hasEnumParameterType());
1284:       assertNull(jSDocInfo0.getFileOverview());
1285:       assertFalse(node2.isInstanceOf());
1286:       assertFalse(node2.isGetProp());
1287:       assertFalse(node2.isObjectLit());
1288:       assertFalse(node2.isWith());
1289:       assertFalse(node2.isBreak());
1290:       assertFalse(node2.isNot());
1291:       assertFalse(node2.isAnd());
1292:       assertFalse(node2.isHook());
1293:       assertFalse(node2.hasOneChild());
1294:       assertFalse(node2.isGetElem());
1295:       assertFalse(node2.isExprResult());
1296:       assertFalse(node2.hasChildren());
1297:       assertFalse(node2.isDec());
1298:       assertFalse(node2.isScript());
1299:       assertFalse(node2.isTypeOf());
1300:       assertFalse(node2.isAssign());
1301:       assertFalse(node2.isComma());
1302:       assertFalse(node2.isCase());
1303:       assertFalse(node2.isThis());
1304:       assertFalse(node2.isReturn());
1305:       assertFalse(node2.isOr());
1306:       assertFalse(node2.isLabel());
1307:       assertFalse(node2.isGetterDef());
1308:       assertFalse(node2.isDelProp());
1309:       assertFalse(node2.isNumber());
1310:       assertFalse(node2.isLabelName());
1311:       assertFalse(node2.isSwitch());
1312:       assertFalse(node2.isArrayLit());
1313:       assertFalse(node2.isNew());
1314:       assertFalse(node2.isAdd());
1315:       assertFalse(node2.isEmpty());
1316:       assertEquals(200747, node2.getSourcePosition());
1317:       assertFalse(node2.isDefaultCase());
1318:       assertFalse(node2.isDo());
1319:       assertFalse(node2.isAssignAdd());
1320:       assertFalse(node2.isVar());
1321:       assertEquals(43, node2.getCharno());
1322:       assertEquals(0, node2.getChildCount());
1323:       assertFalse(node2.isCatch());
1324:       assertFalse(node2.isNull());
1325:       assertFalse(node2.isDebugger());
1326:       assertFalse(node2.isVoid());
1327:       assertFalse(node2.isStringKey());
1328:       assertFalse(node2.isTrue());
1329:       assertFalse(node2.isName());
1330:       assertFalse(node2.isParamList());
1331:       assertFalse(node2.isTry());
1332:       assertFalse(node2.isCall());
1333:       assertFalse(node2.isRegExp());
1334:       assertFalse(node2.isBlock());
1335:       assertFalse(node2.isFor());
1336:       assertFalse(node2.isWhile());
1337:       assertFalse(node2.isIn());
1338:       assertFalse(node2.isContinue());
1339:       assertEquals(16, node2.getType());
1340:       assertFalse(node2.hasMoreThanOneChild());
1341:       assertFalse(node2.isString());
1342:       assertFalse(node2.isIf());
1343:       assertFalse(node2.isNE());
1344:       assertFalse(node2.isFalse());
1345:       assertEquals(49, node2.getLineno());
1346:       assertFalse(node2.isFunction());
1347:       assertFalse(node2.isInc());
1348:       assertFalse(node2.isCast());
1349:       assertFalse(node2.isSetterDef());
1350:       assertFalse(node2.isThrow());
1351:       assertNull(node_NodeMismatch0);
1352:       assertFalse(node1.equals((Object)node0));
1353:       assertFalse(node2.equals((Object)node0));
1354:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1355:       assertEquals(54, Node.SLASH_V);
1356:       assertEquals(52, Node.LENGTH);
1357:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1358:       assertEquals(40, Node.ORIGINALNAME_PROP);
1359:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1360:       assertEquals(49, Node.DIRECT_EVAL);
1361:       assertEquals(50, Node.FREE_CALL);
1362:       assertEquals(46, Node.IS_NAMESPACE);
1363:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1364:       assertEquals(57, Node.REFLECTED_OBJECT);
1365:       assertEquals(48, Node.DIRECTIVES);
1366:       assertEquals(37, Node.OPT_ARG_NAME);
1367:       assertEquals(32, Node.INCRDECR_PROP);
1368:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1369:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1370:       assertEquals(1, Node.DECR_FLAG);
1371:       assertEquals(4095, Node.COLUMN_MASK);
1372:       assertEquals(12, Node.COLUMN_BITS);
1373:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1374:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1375:       assertEquals(53, Node.INPUT_ID);
1376:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1377:       assertEquals(43, Node.IS_CONSTANT_NAME);
1378:       assertEquals(56, Node.CHANGE_TIME);
1379:       assertEquals(36, Node.QUOTED_PROP);
1380:       assertEquals(2, Node.POST_FLAG);
1381:       assertEquals(8, Node.FLAG_NO_THROWS);
1382:       assertEquals(55, Node.INFERRED_FUNCTION);
1383:       assertEquals(29, Node.JSDOC_INFO_PROP);
1384:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1385:       assertEquals(39, Node.EMPTY_BLOCK);
1386:       assertEquals(30, Node.VAR_ARGS_NAME);
1387:       assertEquals(57, Node.LAST_PROP);
1388:       assertEquals(47, Node.IS_DISPATCHER);
1389:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1390:       assertEquals(50, Node.FREE_CALL);
1391:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1392:       assertEquals(57, Node.REFLECTED_OBJECT);
1393:       assertEquals(48, Node.DIRECTIVES);
1394:       assertEquals(54, Node.SLASH_V);
1395:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1396:       assertEquals(40, Node.ORIGINALNAME_PROP);
1397:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1398:       assertEquals(30, Node.VAR_ARGS_NAME);
1399:       assertEquals(49, Node.DIRECT_EVAL);
1400:       assertEquals(57, Node.LAST_PROP);
1401:       assertEquals(36, Node.QUOTED_PROP);
1402:       assertEquals(53, Node.INPUT_ID);
1403:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1404:       assertEquals(8, Node.FLAG_NO_THROWS);
1405:       assertEquals(52, Node.LENGTH);
1406:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1407:       assertEquals(55, Node.INFERRED_FUNCTION);
1408:       assertEquals(39, Node.EMPTY_BLOCK);
1409:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1410:       assertEquals(29, Node.JSDOC_INFO_PROP);
1411:       assertEquals(56, Node.CHANGE_TIME);
1412:       assertEquals(2, Node.POST_FLAG);
1413:       assertEquals(47, Node.IS_DISPATCHER);
1414:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1415:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1416:       assertEquals(37, Node.OPT_ARG_NAME);
1417:       assertEquals(1, Node.DECR_FLAG);
1418:       assertEquals(4095, Node.COLUMN_MASK);
1419:       assertEquals(43, Node.IS_CONSTANT_NAME);
1420:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1421:       assertEquals(12, Node.COLUMN_BITS);
1422:       assertEquals(46, Node.IS_NAMESPACE);
1423:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1424:       assertEquals(32, Node.INCRDECR_PROP);
1425:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1426:       assertSame(node1, node2);
1427:       assertSame(node2, node1);
1428:       
1429:       boolean boolean4 = node0.mayMutateGlobalStateOrThrow();
1430:       assertEquals(1473, node0.getLineno());
1431:       assertFalse(node0.isOr());
1432:       assertFalse(node0.isLabel());
1433:       assertFalse(node0.isDec());
1434:       assertFalse(node0.hasChildren());
1435:       assertFalse(node0.isReturn());
1436:       assertFalse(node0.isAssignAdd());
1437:       assertFalse(node0.isContinue());
1438:       assertFalse(node0.isGetElem());
1439:       assertFalse(node0.isAssign());
1440:       assertFalse(node0.isLabelName());
1441:       assertFalse(node0.isTypeOf());
1442:       assertFalse(node0.hasMoreThanOneChild());
1443:       assertFalse(node0.isCast());
1444:       assertEquals(1, node0.getType());
1445:       assertFalse(node0.isBlock());
1446:       assertFalse(node0.isWhile());
1447:       assertFalse(node0.isObjectLit());
1448:       assertFalse(node0.isNot());
1449:       assertFalse(node0.hasOneChild());
1450:       assertFalse(node0.isNumber());
1451:       assertFalse(node0.isScript());
1452:       assertFalse(node0.isGetProp());
1453:       assertFalse(node0.isComma());
1454:       assertFalse(node0.isNull());
1455:       assertFalse(node0.isStringKey());
1456:       assertFalse(node0.isParamList());
1457:       assertFalse(node0.isCall());
1458:       assertFalse(node0.isName());
1459:       assertFalse(node0.isBreak());
1460:       assertEquals(0, node0.getChildCount());
1461:       assertFalse(node0.isVoid());
1462:       assertFalse(node0.isTrue());
1463:       assertFalse(node0.isExprResult());
1464:       assertFalse(node0.isNew());
1465:       assertFalse(node0.isDefaultCase());
1466:       assertFalse(node0.isVar());
1467:       assertFalse(node0.isDo());
1468:       assertEquals(6037503, node0.getSourcePosition());
1469:       assertFalse(node0.isAdd());
1470:       assertFalse(node0.isEmpty());
1471:       assertFalse(node0.isDelProp());
1472:       assertFalse(node0.isIf());
1473:       assertFalse(node0.isFor());
1474:       assertFalse(node0.isNE());
1475:       assertFalse(node0.isArrayLit());
1476:       assertFalse(node0.isDebugger());
1477:       assertEquals(4095, node0.getCharno());
1478:       assertFalse(node0.isTry());
1479:       assertFalse(node0.isRegExp());
1480:       assertFalse(node0.isHook());
1481:       assertFalse(node0.isSwitch());
1482:       assertFalse(node0.isCase());
1483:       assertFalse(node0.isGetterDef());
1484:       assertFalse(node0.isString());
1485:       assertFalse(node0.isThis());
1486:       assertFalse(node0.isSetterDef());
1487:       assertFalse(node0.isThrow());
1488:       assertFalse(node0.isAnd());
1489:       assertFalse(node0.isFalse());
1490:       assertFalse(node0.isWith());
1491:       assertFalse(node0.isInstanceOf());
1492:       assertFalse(node0.isCatch());
1493:       assertFalse(node0.isFunction());
1494:       assertFalse(node0.isInc());
1495:       assertFalse(node0.isIn());
1496:       assertFalse(node0.equals((Object)node1));
1497:       assertFalse(node0.equals((Object)node2));
1498:       assertFalse(boolean4 == boolean3);
1499:       assertFalse(boolean4 == boolean0);
1500:       assertFalse(boolean4 == boolean2);
1501:       assertFalse(boolean4 == boolean1);
1502:       assertTrue(boolean4);
1503:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1504:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1505:       assertEquals(53, Node.INPUT_ID);
1506:       assertEquals(29, Node.JSDOC_INFO_PROP);
1507:       assertEquals(47, Node.IS_DISPATCHER);
1508:       assertEquals(2, Node.POST_FLAG);
1509:       assertEquals(55, Node.INFERRED_FUNCTION);
1510:       assertEquals(4095, Node.COLUMN_MASK);
1511:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1512:       assertEquals(48, Node.DIRECTIVES);
1513:       assertEquals(49, Node.DIRECT_EVAL);
1514:       assertEquals(39, Node.EMPTY_BLOCK);
1515:       assertEquals(37, Node.OPT_ARG_NAME);
1516:       assertEquals(56, Node.CHANGE_TIME);
1517:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1518:       assertEquals(36, Node.QUOTED_PROP);
1519:       assertEquals(8, Node.FLAG_NO_THROWS);
1520:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1521:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1522:       assertEquals(57, Node.REFLECTED_OBJECT);
1523:       assertEquals(52, Node.LENGTH);
1524:       assertEquals(40, Node.ORIGINALNAME_PROP);
1525:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1526:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1527:       assertEquals(57, Node.LAST_PROP);
1528:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1529:       assertEquals(30, Node.VAR_ARGS_NAME);
1530:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1531:       assertEquals(12, Node.COLUMN_BITS);
1532:       assertEquals(32, Node.INCRDECR_PROP);
1533:       assertEquals(46, Node.IS_NAMESPACE);
1534:       assertEquals(1, Node.DECR_FLAG);
1535:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1536:       assertEquals(43, Node.IS_CONSTANT_NAME);
1537:       assertEquals(50, Node.FREE_CALL);
1538:       assertEquals(54, Node.SLASH_V);
1539:       
1540:       Object object0 = node1.getProp(56);
1541:       assertFalse(node1.isBreak());
1542:       assertFalse(node1.isThis());
1543:       assertFalse(node1.isThrow());
1544:       assertFalse(node1.isGetProp());
1545:       assertFalse(node1.isObjectLit());
1546:       assertFalse(node1.isInc());
1547:       assertFalse(node1.isNot());
1548:       assertFalse(node1.isAnd());
1549:       assertFalse(node1.isSwitch());
1550:       assertFalse(node1.isCast());
1551:       assertFalse(node1.isFalse());
1552:       assertEquals(200747, node1.getSourcePosition());
1553:       assertFalse(node1.isDelProp());
1554:       assertFalse(node1.isAssign());
1555:       assertFalse(node1.isDec());
1556:       assertFalse(node1.isGetElem());
1557:       assertFalse(node1.isEmpty());
1558:       assertFalse(node1.hasChildren());
1559:       assertFalse(node1.isAssignAdd());
1560:       assertFalse(node1.isOr());
1561:       assertEquals(16, node1.getType());
1562:       assertFalse(node1.isDebugger());
1563:       assertFalse(node1.isString());
1564:       assertFalse(node1.isWhile());
1565:       assertFalse(node1.isTrue());
1566:       assertFalse(node1.isVoid());
1567:       assertEquals(43, node1.getCharno());
1568:       assertFalse(node1.isReturn());
1569:       assertFalse(node1.isExprResult());
1570:       assertFalse(node1.isCall());
1571:       assertFalse(node1.isComma());
1572:       assertFalse(node1.isTypeOf());
1573:       assertFalse(node1.isNull());
1574:       assertFalse(node1.isSetterDef());
1575:       assertFalse(node1.isParamList());
1576:       assertFalse(node1.isVar());
1577:       assertFalse(node1.isStringKey());
1578:       assertFalse(node1.isName());
1579:       assertEquals(49, node1.getLineno());
1580:       assertFalse(node1.isNew());
1581:       assertFalse(node1.isAdd());
1582:       assertFalse(node1.isDo());
1583:       assertFalse(node1.isDefaultCase());
1584:       assertEquals(0, node1.getChildCount());
1585:       assertFalse(node1.isArrayLit());
1586:       assertFalse(node1.isLabel());
1587:       assertFalse(node1.isFunction());
1588:       assertFalse(node1.isContinue());
1589:       assertFalse(node1.isGetterDef());
1590:       assertFalse(node1.isLabelName());
1591:       assertFalse(node1.isFor());
1592:       assertFalse(node1.isNE());
1593:       assertFalse(node1.isIf());
1594:       assertFalse(node1.isTry());
1595:       assertFalse(node1.hasOneChild());
1596:       assertFalse(node1.isNumber());
1597:       assertFalse(node1.isIn());
1598:       assertFalse(node1.isScript());
1599:       assertFalse(node1.isCase());
1600:       assertFalse(node1.isInstanceOf());
1601:       assertFalse(node1.isBlock());
1602:       assertFalse(node1.isHook());
1603:       assertFalse(node1.isCatch());
1604:       assertFalse(node1.isRegExp());
1605:       assertFalse(node1.hasMoreThanOneChild());
1606:       assertFalse(node1.isWith());
1607:       assertNull(object0);
1608:       assertFalse(node1.equals((Object)node0));
1609:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1610:       assertEquals(54, Node.SLASH_V);
1611:       assertEquals(52, Node.LENGTH);
1612:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1613:       assertEquals(40, Node.ORIGINALNAME_PROP);
1614:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1615:       assertEquals(49, Node.DIRECT_EVAL);
1616:       assertEquals(50, Node.FREE_CALL);
1617:       assertEquals(46, Node.IS_NAMESPACE);
1618:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1619:       assertEquals(57, Node.REFLECTED_OBJECT);
1620:       assertEquals(48, Node.DIRECTIVES);
1621:       assertEquals(37, Node.OPT_ARG_NAME);
1622:       assertEquals(32, Node.INCRDECR_PROP);
1623:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1624:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1625:       assertEquals(1, Node.DECR_FLAG);
1626:       assertEquals(4095, Node.COLUMN_MASK);
1627:       assertEquals(12, Node.COLUMN_BITS);
1628:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1629:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1630:       assertEquals(53, Node.INPUT_ID);
1631:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1632:       assertEquals(43, Node.IS_CONSTANT_NAME);
1633:       assertEquals(56, Node.CHANGE_TIME);
1634:       assertEquals(36, Node.QUOTED_PROP);
1635:       assertEquals(2, Node.POST_FLAG);
1636:       assertEquals(8, Node.FLAG_NO_THROWS);
1637:       assertEquals(55, Node.INFERRED_FUNCTION);
1638:       assertEquals(29, Node.JSDOC_INFO_PROP);
1639:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1640:       assertEquals(39, Node.EMPTY_BLOCK);
1641:       assertEquals(30, Node.VAR_ARGS_NAME);
1642:       assertEquals(57, Node.LAST_PROP);
1643:       assertEquals(47, Node.IS_DISPATCHER);
1644:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1645:       assertSame(node1, node2);
1646:       
1647:       boolean boolean5 = node0.wasEmptyNode();
1648:       assertEquals(1473, node0.getLineno());
1649:       assertFalse(node0.isOr());
1650:       assertFalse(node0.isLabel());
1651:       assertFalse(node0.isDec());
1652:       assertFalse(node0.hasChildren());
1653:       assertFalse(node0.isReturn());
1654:       assertFalse(node0.isAssignAdd());
1655:       assertFalse(node0.isContinue());
1656:       assertFalse(node0.isGetElem());
1657:       assertFalse(node0.isAssign());
1658:       assertFalse(node0.isLabelName());
1659:       assertFalse(node0.isTypeOf());
1660:       assertFalse(node0.hasMoreThanOneChild());
1661:       assertFalse(node0.isCast());
1662:       assertEquals(1, node0.getType());
1663:       assertFalse(node0.isBlock());
1664:       assertFalse(node0.isWhile());
1665:       assertFalse(node0.isObjectLit());
1666:       assertFalse(node0.isNot());
1667:       assertFalse(node0.hasOneChild());
1668:       assertFalse(node0.isNumber());
1669:       assertFalse(node0.isScript());
1670:       assertFalse(node0.isGetProp());
1671:       assertFalse(node0.isComma());
1672:       assertFalse(node0.isNull());
1673:       assertFalse(node0.isStringKey());
1674:       assertFalse(node0.isParamList());
1675:       assertFalse(node0.isCall());
1676:       assertFalse(node0.isName());
1677:       assertFalse(node0.isBreak());
1678:       assertEquals(0, node0.getChildCount());
1679:       assertFalse(node0.isVoid());
1680:       assertFalse(node0.isTrue());
1681:       assertFalse(node0.isExprResult());
1682:       assertFalse(node0.isNew());
1683:       assertFalse(node0.isDefaultCase());
1684:       assertFalse(node0.isVar());
1685:       assertFalse(node0.isDo());
1686:       assertEquals(6037503, node0.getSourcePosition());
1687:       assertFalse(node0.isAdd());
1688:       assertFalse(node0.isEmpty());
1689:       assertFalse(node0.isDelProp());
1690:       assertFalse(node0.isIf());
1691:       assertFalse(node0.isFor());
1692:       assertFalse(node0.isNE());
1693:       assertFalse(node0.isArrayLit());
1694:       assertFalse(node0.isDebugger());
1695:       assertEquals(4095, node0.getCharno());
1696:       assertFalse(node0.isTry());
1697:       assertFalse(node0.isRegExp());
1698:       assertFalse(node0.isHook());
1699:       assertFalse(node0.isSwitch());
1700:       assertFalse(node0.isCase());
1701:       assertFalse(node0.isGetterDef());
1702:       assertFalse(node0.isString());
1703:       assertFalse(node0.isThis());
1704:       assertFalse(node0.isSetterDef());
1705:       assertFalse(node0.isThrow());
1706:       assertFalse(node0.isAnd());
1707:       assertFalse(node0.isFalse());
1708:       assertFalse(node0.isWith());
1709:       assertFalse(node0.isInstanceOf());
1710:       assertFalse(node0.isCatch());
1711:       assertFalse(node0.isFunction());
1712:       assertFalse(node0.isInc());
1713:       assertFalse(node0.isIn());
1714:       assertTrue(boolean5 == boolean3);
1715:       assertTrue(boolean5 == boolean0);
1716:       assertTrue(boolean5 == boolean1);
1717:       assertTrue(boolean5 == boolean2);
1718:       assertFalse(boolean5 == boolean4);
1719:       assertFalse(node0.equals((Object)node1));
1720:       assertFalse(node0.equals((Object)node2));
1721:       assertFalse(boolean5);
1722:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1723:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1724:       assertEquals(53, Node.INPUT_ID);
1725:       assertEquals(29, Node.JSDOC_INFO_PROP);
1726:       assertEquals(47, Node.IS_DISPATCHER);
1727:       assertEquals(2, Node.POST_FLAG);
1728:       assertEquals(55, Node.INFERRED_FUNCTION);
1729:       assertEquals(4095, Node.COLUMN_MASK);
1730:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1731:       assertEquals(48, Node.DIRECTIVES);
1732:       assertEquals(49, Node.DIRECT_EVAL);
1733:       assertEquals(39, Node.EMPTY_BLOCK);
1734:       assertEquals(37, Node.OPT_ARG_NAME);
1735:       assertEquals(56, Node.CHANGE_TIME);
1736:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1737:       assertEquals(36, Node.QUOTED_PROP);
1738:       assertEquals(8, Node.FLAG_NO_THROWS);
1739:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1740:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1741:       assertEquals(57, Node.REFLECTED_OBJECT);
1742:       assertEquals(52, Node.LENGTH);
1743:       assertEquals(40, Node.ORIGINALNAME_PROP);
1744:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1745:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1746:       assertEquals(57, Node.LAST_PROP);
1747:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1748:       assertEquals(30, Node.VAR_ARGS_NAME);
1749:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1750:       assertEquals(12, Node.COLUMN_BITS);
1751:       assertEquals(32, Node.INCRDECR_PROP);
1752:       assertEquals(46, Node.IS_NAMESPACE);
1753:       assertEquals(1, Node.DECR_FLAG);
1754:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1755:       assertEquals(43, Node.IS_CONSTANT_NAME);
1756:       assertEquals(50, Node.FREE_CALL);
1757:       assertEquals(54, Node.SLASH_V);
1758:       
1759:       int int0 = node1.getChangeTime();
1760:       assertFalse(node1.isBreak());
1761:       assertFalse(node1.isThis());
1762:       assertFalse(node1.isThrow());
1763:       assertFalse(node1.isGetProp());
1764:       assertFalse(node1.isObjectLit());
1765:       assertFalse(node1.isInc());
1766:       assertFalse(node1.isNot());
1767:       assertFalse(node1.isAnd());
1768:       assertFalse(node1.isSwitch());
1769:       assertFalse(node1.isCast());
1770:       assertFalse(node1.isFalse());
1771:       assertEquals(200747, node1.getSourcePosition());
1772:       assertFalse(node1.isDelProp());
1773:       assertFalse(node1.isAssign());
1774:       assertFalse(node1.isDec());
1775:       assertFalse(node1.isGetElem());
1776:       assertFalse(node1.isEmpty());
1777:       assertFalse(node1.hasChildren());
1778:       assertFalse(node1.isAssignAdd());
1779:       assertFalse(node1.isOr());
1780:       assertEquals(16, node1.getType());
1781:       assertFalse(node1.isDebugger());
1782:       assertFalse(node1.isString());
1783:       assertFalse(node1.isWhile());
1784:       assertFalse(node1.isTrue());
1785:       assertFalse(node1.isVoid());
1786:       assertEquals(43, node1.getCharno());
1787:       assertFalse(node1.isReturn());
1788:       assertFalse(node1.isExprResult());
1789:       assertFalse(node1.isCall());
1790:       assertFalse(node1.isComma());
1791:       assertFalse(node1.isTypeOf());
1792:       assertFalse(node1.isNull());
1793:       assertFalse(node1.isSetterDef());
1794:       assertFalse(node1.isParamList());
1795:       assertFalse(node1.isVar());
1796:       assertFalse(node1.isStringKey());
1797:       assertFalse(node1.isName());
1798:       assertEquals(49, node1.getLineno());
1799:       assertFalse(node1.isNew());
1800:       assertFalse(node1.isAdd());
1801:       assertFalse(node1.isDo());
1802:       assertFalse(node1.isDefaultCase());
1803:       assertEquals(0, node1.getChildCount());
1804:       assertFalse(node1.isArrayLit());
1805:       assertFalse(node1.isLabel());
1806:       assertFalse(node1.isFunction());
1807:       assertFalse(node1.isContinue());
1808:       assertFalse(node1.isGetterDef());
1809:       assertFalse(node1.isLabelName());
1810:       assertFalse(node1.isFor());
1811:       assertFalse(node1.isNE());
1812:       assertFalse(node1.isIf());
1813:       assertFalse(node1.isTry());
1814:       assertFalse(node1.hasOneChild());
1815:       assertFalse(node1.isNumber());
1816:       assertFalse(node1.isIn());
1817:       assertFalse(node1.isScript());
1818:       assertFalse(node1.isCase());
1819:       assertFalse(node1.isInstanceOf());
1820:       assertFalse(node1.isBlock());
1821:       assertFalse(node1.isHook());
1822:       assertFalse(node1.isCatch());
1823:       assertFalse(node1.isRegExp());
1824:       assertFalse(node1.hasMoreThanOneChild());
1825:       assertFalse(node1.isWith());
1826:       assertFalse(node1.equals((Object)node0));
1827:       assertEquals(0, int0);
1828:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1829:       assertEquals(54, Node.SLASH_V);
1830:       assertEquals(52, Node.LENGTH);
1831:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1832:       assertEquals(40, Node.ORIGINALNAME_PROP);
1833:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1834:       assertEquals(49, Node.DIRECT_EVAL);
1835:       assertEquals(50, Node.FREE_CALL);
1836:       assertEquals(46, Node.IS_NAMESPACE);
1837:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1838:       assertEquals(57, Node.REFLECTED_OBJECT);
1839:       assertEquals(48, Node.DIRECTIVES);
1840:       assertEquals(37, Node.OPT_ARG_NAME);
1841:       assertEquals(32, Node.INCRDECR_PROP);
1842:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1843:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1844:       assertEquals(1, Node.DECR_FLAG);
1845:       assertEquals(4095, Node.COLUMN_MASK);
1846:       assertEquals(12, Node.COLUMN_BITS);
1847:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1848:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1849:       assertEquals(53, Node.INPUT_ID);
1850:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1851:       assertEquals(43, Node.IS_CONSTANT_NAME);
1852:       assertEquals(56, Node.CHANGE_TIME);
1853:       assertEquals(36, Node.QUOTED_PROP);
1854:       assertEquals(2, Node.POST_FLAG);
1855:       assertEquals(8, Node.FLAG_NO_THROWS);
1856:       assertEquals(55, Node.INFERRED_FUNCTION);
1857:       assertEquals(29, Node.JSDOC_INFO_PROP);
1858:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1859:       assertEquals(39, Node.EMPTY_BLOCK);
1860:       assertEquals(30, Node.VAR_ARGS_NAME);
1861:       assertEquals(57, Node.LAST_PROP);
1862:       assertEquals(47, Node.IS_DISPATCHER);
1863:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1864:       assertSame(node1, node2);
1865:       
1866:       // Undeclared exception!
1867:       try { 
1868:         node0.getExistingIntProp(52);
1869:         fail("Expecting exception: IllegalStateException");
1870:       
1871:       } catch(IllegalStateException e) {
1872:          //
1873:          // missing prop: 52
1874:          //
1875:          verifyException("com.google.javascript.rhino.Node", e);
1876:       }
1877:   }
1878: }
RegularFileObject[/tmp/EvoSuite_68_1629223389432/com/google/javascript/rhino/Node_68_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:03:09 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_68_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_68_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.common.collect.RegularImmutableSet",
109:       "com.google.javascript.rhino.jstype.ModificationVisitor",
110:       "com.google.javascript.rhino.jstype.PropertyMap$1",
111:       "com.google.common.collect.AbstractMapEntry",
112:       "com.google.javascript.rhino.Node$AncestorIterable$1",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.common.collect.Iterables",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.common.collect.SingletonImmutableSet",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.common.collect.Iterators$1",
207:       "com.google.common.collect.Iterators$2",
208:       "com.google.javascript.rhino.jstype.NamespaceType",
209:       "com.google.common.collect.Iterators$3",
210:       "com.google.common.collect.Sets",
211:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
212:       "com.google.javascript.rhino.Node$ObjectPropListItem",
213:       "com.google.common.collect.Lists$StringAsImmutableList",
214:       "com.google.common.collect.Lists$2",
215:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
216:       "com.google.common.collect.ImmutableList$Builder",
217:       "com.google.common.collect.Lists$1",
218:       "com.google.javascript.rhino.jstype.StaticReference",
219:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
220:       "com.google.common.collect.Multiset",
221:       "com.google.common.collect.AbstractMultimap",
222:       "com.google.common.collect.Multimap",
223:       "com.google.common.collect.Iterators",
224:       "com.google.common.collect.EmptyImmutableSet",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
228:       "com.google.common.collect.ImmutableList",
229:       "com.google.common.collect.SingletonImmutableBiMap",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
231:       "com.google.javascript.rhino.jstype.StringType",
232:       "com.google.javascript.rhino.Node$AbstractPropListItem",
233:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
234:       "com.google.javascript.rhino.jstype.TemplatizedType",
235:       "com.google.javascript.rhino.jstype.Visitor",
236:       "com.google.javascript.rhino.jstype.NoResolvedType",
237:       "com.google.javascript.rhino.jstype.JSTypeNative",
238:       "com.google.javascript.rhino.jstype.AllType",
239:       "com.google.common.collect.Maps",
240:       "com.google.common.collect.SetMultimap",
241:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
242:       "com.google.common.collect.Maps$EntryTransformer",
243:       "com.google.javascript.rhino.JSTypeExpression",
244:       "com.google.common.collect.Iterators$MergingIterator"
245:     );
246:   } 
247: 
248:   private static void resetClasses() {
249:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_68_tmp__ESTest_scaffolding.class.getClassLoader()); 
250: 
251:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
252:       "com.google.javascript.rhino.Node",
253:       "com.google.javascript.rhino.Node$NumberNode",
254:       "com.google.javascript.rhino.Node$StringNode",
255:       "com.google.javascript.rhino.Node$AbstractPropListItem",
256:       "com.google.javascript.rhino.Node$ObjectPropListItem",
257:       "com.google.javascript.rhino.Node$IntPropListItem",
258:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
259:       "com.google.javascript.rhino.Node$AncestorIterable",
260:       "com.google.javascript.rhino.Node$NodeMismatch",
261:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
262:       "com.google.javascript.rhino.Node$SideEffectFlags",
263:       "com.google.javascript.rhino.Token",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Preconditions",
267:       "com.google.common.base.Joiner$1",
268:       "com.google.common.collect.Collections2",
269:       "com.google.common.base.Joiner$MapJoiner",
270:       "com.google.common.collect.Maps",
271:       "com.google.common.collect.AbstractMultimap",
272:       "com.google.common.collect.AbstractMapBasedMultimap",
273:       "com.google.common.collect.AbstractSetMultimap",
274:       "com.google.common.collect.LinkedHashMultimap",
275:       "com.google.common.collect.AbstractMapEntry",
276:       "com.google.common.collect.ImmutableEntry",
277:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
278:       "com.google.common.collect.AbstractListMultimap",
279:       "com.google.common.collect.ArrayListMultimap",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
281:       "com.google.common.collect.ImmutableCollection",
282:       "com.google.common.collect.RegularImmutableList",
283:       "com.google.common.collect.ObjectArrays",
284:       "com.google.common.collect.ImmutableList",
285:       "com.google.javascript.rhino.jstype.ModificationVisitor",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
287:       "com.google.common.collect.ImmutableCollection$Builder",
288:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
289:       "com.google.common.collect.ImmutableList$Builder",
290:       "com.google.common.collect.UnmodifiableIterator",
291:       "com.google.common.collect.UnmodifiableListIterator",
292:       "com.google.common.collect.Iterators$1",
293:       "com.google.common.collect.Iterators$2",
294:       "com.google.common.collect.Iterators",
295:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
296:       "com.google.javascript.rhino.jstype.JSType$1",
297:       "com.google.javascript.rhino.jstype.JSType",
298:       "com.google.javascript.rhino.jstype.ObjectType",
299:       "com.google.javascript.rhino.jstype.ProxyObjectType",
300:       "com.google.javascript.rhino.jstype.TemplateType",
301:       "com.google.javascript.rhino.jstype.ValueType",
302:       "com.google.javascript.rhino.jstype.BooleanType",
303:       "com.google.javascript.rhino.jstype.NullType",
304:       "com.google.javascript.rhino.jstype.NumberType",
305:       "com.google.javascript.rhino.jstype.StringType",
306:       "com.google.javascript.rhino.jstype.UnknownType",
307:       "com.google.javascript.rhino.jstype.VoidType",
308:       "com.google.javascript.rhino.jstype.AllType",
309:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
310:       "com.google.common.collect.ImmutableMap",
311:       "com.google.common.collect.ImmutableBiMap",
312:       "com.google.common.collect.EmptyImmutableBiMap",
313:       "com.google.javascript.rhino.jstype.PropertyMap$1",
314:       "com.google.javascript.rhino.jstype.PropertyMap",
315:       "com.google.javascript.rhino.jstype.FunctionType",
316:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.ImmutableList$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Platform",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.InputId",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.Iterators$12",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
366:       "com.google.javascript.rhino.jstype.JSType$TypePair",
367:       "com.google.javascript.rhino.jstype.TernaryValue",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
370:     );
371:   }
372: }

[MASTER] 18:03:09.857 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = "gs1IcjVs7cZy}^~";
boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

Node node0 = Node.newString(1, "gs1IcjVs7cZy}^~", 1473, 4358);
assertEquals(1473, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertEquals(1, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertEquals(6037503, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertNotNull(node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);

Node node1 = new Node(16, 49, 43);
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertEquals(200747, node1.getSourcePosition());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(16, node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertEquals(43, node1.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertEquals(49, node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

JSDocInfo jSDocInfo0 = new JSDocInfo(false);
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.containsDeclaration());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLendsName());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.hasModifies());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isDisposes());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isNoShadow());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.makesDicts());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.hasFileOverview());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isIdGenerator());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isDefine());
assertEquals(0, jSDocInfo0.getParameterCount());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertNull(jSDocInfo0.getFileOverview());
assertNotNull(jSDocInfo0);

Node node2 = node1.setJSDocInfo(jSDocInfo0);
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertEquals(200747, node1.getSourcePosition());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(16, node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertEquals(43, node1.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertEquals(49, node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.containsDeclaration());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLendsName());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.hasModifies());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isDisposes());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isNoShadow());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.makesDicts());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.hasFileOverview());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isIdGenerator());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isDefine());
assertEquals(0, jSDocInfo0.getParameterCount());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isScript());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isCase());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertEquals(200747, node2.getSourcePosition());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertEquals(43, node2.getCharno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isStringKey());
assertFalse(node2.isTrue());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isWhile());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertEquals(16, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isString());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFalse());
assertEquals(49, node2.getLineno());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertNotNull(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertSame(node1, node2);
assertSame(node2, node1);

Iterable<Node> iterable0 = node0.children();
assertEquals(1473, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertEquals(1, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertEquals(6037503, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(iterable0.contains(node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);

boolean boolean1 = node0.isAnd();
assertEquals(1473, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertEquals(1, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertEquals(6037503, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);

jSDocInfo0.setLendsName("com.google.javascript.rhino.Node$AncestorIterable");
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.containsDeclaration());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.hasModifies());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isDisposes());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isDeprecated());
assertEquals("com.google.javascript.rhino.Node$AncestorIterable", jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isNoShadow());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.makesDicts());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.hasFileOverview());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isIdGenerator());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isDefine());
assertEquals(0, jSDocInfo0.getParameterCount());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertNull(jSDocInfo0.getFileOverview());

node1.addSuppression("gs1IcjVs7cZy}^~");
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertEquals(200747, node1.getSourcePosition());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(16, node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertEquals(43, node1.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertEquals(49, node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertSame(node1, node2);

boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);

boolean boolean3 = node0.isArrayLit();
assertEquals(1473, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertEquals(1, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertEquals(6037503, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);

node1.putIntProp(4095, 1473);
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertEquals(200747, node1.getSourcePosition());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(16, node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertEquals(43, node1.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertEquals(49, node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertSame(node1, node2);

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node2);
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertEquals(200747, node1.getSourcePosition());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(16, node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertEquals(43, node1.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertEquals(49, node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.containsDeclaration());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.hasModifies());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isDisposes());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isDeprecated());
assertEquals("com.google.javascript.rhino.Node$AncestorIterable", jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isNoShadow());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.makesDicts());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.hasFileOverview());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isIdGenerator());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isDefine());
assertEquals(0, jSDocInfo0.getParameterCount());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isScript());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isCase());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertEquals(200747, node2.getSourcePosition());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertEquals(43, node2.getCharno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isStringKey());
assertFalse(node2.isTrue());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isWhile());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertEquals(16, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isString());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFalse());
assertEquals(49, node2.getLineno());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertNull(node_NodeMismatch0);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertSame(node1, node2);
assertSame(node2, node1);

boolean boolean4 = node0.mayMutateGlobalStateOrThrow();
assertEquals(1473, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertEquals(1, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertEquals(6037503, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(boolean4 == boolean3);
assertFalse(boolean4 == boolean0);
assertFalse(boolean4 == boolean2);
assertFalse(boolean4 == boolean1);
assertTrue(boolean4);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);

Object object0 = node1.getProp(56);
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertEquals(200747, node1.getSourcePosition());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(16, node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertEquals(43, node1.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertEquals(49, node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertNull(object0);
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertSame(node1, node2);

boolean boolean5 = node0.wasEmptyNode();
assertEquals(1473, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertEquals(1, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertEquals(6037503, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertFalse(boolean5 == boolean4);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(boolean5);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);

int int0 = node1.getChangeTime();
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertEquals(200747, node1.getSourcePosition());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(16, node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertEquals(43, node1.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertEquals(49, node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.equals((Object)node0));
assertEquals(0, int0);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertSame(node1, node2);

node0.getExistingIntProp(52);

[MASTER] 18:03:14.523 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_98_1629223394468/com/google/javascript/rhino/Node_98_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_98_1629223394468/com/google/javascript/rhino/Node_98_tmp__ESTest_scaffolding.java]]
[MASTER] 18:03:14.523 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:03:14.523 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:03:14.524 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 208
[MASTER] 18:03:14.524 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_98_1629223394468/com/google/javascript/rhino/Node_98_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:03:14 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.common.collect.ImmutableList;
12: import com.google.javascript.rhino.JSDocInfo;
13: import com.google.javascript.rhino.Node;
14: import com.google.javascript.rhino.SimpleErrorReporter;
15: import com.google.javascript.rhino.jstype.JSType;
16: import com.google.javascript.rhino.jstype.JSTypeRegistry;
17: import java.util.Iterator;
18: import java.util.List;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.testdata.EvoSuiteFile;
22: import org.evosuite.runtime.testdata.FileSystemHandling;
23: import org.junit.runner.RunWith;
24: 
25: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
26: public class Node_98_tmp__ESTest extends Node_98_tmp__ESTest_scaffolding {
27: 
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       Node node0 = new Node((-376));
31:       assertFalse(node0.isGetProp());
32:       assertFalse(node0.isThis());
33:       assertFalse(node0.isInstanceOf());
34:       assertFalse(node0.isComma());
35:       assertFalse(node0.isObjectLit());
36:       assertFalse(node0.isNot());
37:       assertFalse(node0.isWith());
38:       assertFalse(node0.isBreak());
39:       assertFalse(node0.isAnd());
40:       assertEquals((-1), node0.getCharno());
41:       assertFalse(node0.isHook());
42:       assertFalse(node0.isExprResult());
43:       assertFalse(node0.isScript());
44:       assertFalse(node0.isAssign());
45:       assertFalse(node0.isString());
46:       assertFalse(node0.isCase());
47:       assertFalse(node0.hasChildren());
48:       assertEquals((-376), node0.getType());
49:       assertFalse(node0.hasOneChild());
50:       assertEquals((-1), node0.getLineno());
51:       assertFalse(node0.hasMoreThanOneChild());
52:       assertEquals((-1), node0.getSourcePosition());
53:       assertFalse(node0.isIn());
54:       assertFalse(node0.isContinue());
55:       assertFalse(node0.isNE());
56:       assertFalse(node0.isIf());
57:       assertFalse(node0.isInc());
58:       assertFalse(node0.isCast());
59:       assertFalse(node0.isFalse());
60:       assertFalse(node0.isFunction());
61:       assertFalse(node0.isThrow());
62:       assertFalse(node0.isSetterDef());
63:       assertFalse(node0.isCatch());
64:       assertEquals(0, node0.getChildCount());
65:       assertFalse(node0.isStringKey());
66:       assertFalse(node0.isNull());
67:       assertFalse(node0.isCall());
68:       assertFalse(node0.isParamList());
69:       assertFalse(node0.isVoid());
70:       assertFalse(node0.isName());
71:       assertFalse(node0.isTry());
72:       assertFalse(node0.isBlock());
73:       assertFalse(node0.isDebugger());
74:       assertFalse(node0.isRegExp());
75:       assertFalse(node0.isFor());
76:       assertFalse(node0.isWhile());
77:       assertFalse(node0.isAssignAdd());
78:       assertFalse(node0.isOr());
79:       assertFalse(node0.isLabel());
80:       assertFalse(node0.isReturn());
81:       assertFalse(node0.isDec());
82:       assertFalse(node0.isGetterDef());
83:       assertFalse(node0.isTypeOf());
84:       assertFalse(node0.isNumber());
85:       assertFalse(node0.isLabelName());
86:       assertFalse(node0.isGetElem());
87:       assertFalse(node0.isSwitch());
88:       assertFalse(node0.isArrayLit());
89:       assertFalse(node0.isDelProp());
90:       assertFalse(node0.isAdd());
91:       assertFalse(node0.isNew());
92:       assertFalse(node0.isTrue());
93:       assertFalse(node0.isEmpty());
94:       assertFalse(node0.isDo());
95:       assertFalse(node0.isVar());
96:       assertFalse(node0.isDefaultCase());
97:       assertNotNull(node0);
98:       assertEquals(40, Node.ORIGINALNAME_PROP);
99:       assertEquals(50, Node.FREE_CALL);
100:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
101:       assertEquals(57, Node.REFLECTED_OBJECT);
102:       assertEquals(54, Node.SLASH_V);
103:       assertEquals(48, Node.DIRECTIVES);
104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
105:       assertEquals(55, Node.INFERRED_FUNCTION);
106:       assertEquals(49, Node.DIRECT_EVAL);
107:       assertEquals(30, Node.VAR_ARGS_NAME);
108:       assertEquals(57, Node.LAST_PROP);
109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
110:       assertEquals(8, Node.FLAG_NO_THROWS);
111:       assertEquals(39, Node.EMPTY_BLOCK);
112:       assertEquals(36, Node.QUOTED_PROP);
113:       assertEquals(52, Node.LENGTH);
114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
115:       assertEquals(15, Node.NO_SIDE_EFFECTS);
116:       assertEquals(53, Node.INPUT_ID);
117:       assertEquals(29, Node.JSDOC_INFO_PROP);
118:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
119:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
120:       assertEquals(56, Node.CHANGE_TIME);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
123:       assertEquals(37, Node.OPT_ARG_NAME);
124:       assertEquals(2, Node.POST_FLAG);
125:       assertEquals(4095, Node.COLUMN_MASK);
126:       assertEquals(51, Node.STATIC_SOURCE_FILE);
127:       assertEquals(1, Node.DECR_FLAG);
128:       assertEquals(32, Node.INCRDECR_PROP);
129:       assertEquals(43, Node.IS_CONSTANT_NAME);
130:       assertEquals(12, Node.COLUMN_BITS);
131:       assertEquals(46, Node.IS_NAMESPACE);
132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
133:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
134:       
135:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
136:       assertEquals(0, node_SideEffectFlags0.valueOf());
137:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
138:       assertNotNull(node_SideEffectFlags0);
139:       
140:       Iterable<Node> iterable0 = node0.children();
141:       assertFalse(node0.isGetProp());
142:       assertFalse(node0.isThis());
143:       assertFalse(node0.isInstanceOf());
144:       assertFalse(node0.isComma());
145:       assertFalse(node0.isObjectLit());
146:       assertFalse(node0.isNot());
147:       assertFalse(node0.isWith());
148:       assertFalse(node0.isBreak());
149:       assertFalse(node0.isAnd());
150:       assertEquals((-1), node0.getCharno());
151:       assertFalse(node0.isHook());
152:       assertFalse(node0.isExprResult());
153:       assertFalse(node0.isScript());
154:       assertFalse(node0.isAssign());
155:       assertFalse(node0.isString());
156:       assertFalse(node0.isCase());
157:       assertFalse(node0.hasChildren());
158:       assertEquals((-376), node0.getType());
159:       assertFalse(node0.hasOneChild());
160:       assertEquals((-1), node0.getLineno());
161:       assertFalse(node0.hasMoreThanOneChild());
162:       assertEquals((-1), node0.getSourcePosition());
163:       assertFalse(node0.isIn());
164:       assertFalse(node0.isContinue());
165:       assertFalse(node0.isNE());
166:       assertFalse(node0.isIf());
167:       assertFalse(node0.isInc());
168:       assertFalse(node0.isCast());
169:       assertFalse(node0.isFalse());
170:       assertFalse(node0.isFunction());
171:       assertFalse(node0.isThrow());
172:       assertFalse(node0.isSetterDef());
173:       assertFalse(node0.isCatch());
174:       assertEquals(0, node0.getChildCount());
175:       assertFalse(node0.isStringKey());
176:       assertFalse(node0.isNull());
177:       assertFalse(node0.isCall());
178:       assertFalse(node0.isParamList());
179:       assertFalse(node0.isVoid());
180:       assertFalse(node0.isName());
181:       assertFalse(node0.isTry());
182:       assertFalse(node0.isBlock());
183:       assertFalse(node0.isDebugger());
184:       assertFalse(node0.isRegExp());
185:       assertFalse(node0.isFor());
186:       assertFalse(node0.isWhile());
187:       assertFalse(node0.isAssignAdd());
188:       assertFalse(node0.isOr());
189:       assertFalse(node0.isLabel());
190:       assertFalse(node0.isReturn());
191:       assertFalse(node0.isDec());
192:       assertFalse(node0.isGetterDef());
193:       assertFalse(node0.isTypeOf());
194:       assertFalse(node0.isNumber());
195:       assertFalse(node0.isLabelName());
196:       assertFalse(node0.isGetElem());
197:       assertFalse(node0.isSwitch());
198:       assertFalse(node0.isArrayLit());
199:       assertFalse(node0.isDelProp());
200:       assertFalse(node0.isAdd());
201:       assertFalse(node0.isNew());
202:       assertFalse(node0.isTrue());
203:       assertFalse(node0.isEmpty());
204:       assertFalse(node0.isDo());
205:       assertFalse(node0.isVar());
206:       assertFalse(node0.isDefaultCase());
207:       assertNotNull(iterable0);
208:       assertFalse(iterable0.contains(node0));
209:       assertEquals(40, Node.ORIGINALNAME_PROP);
210:       assertEquals(50, Node.FREE_CALL);
211:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
212:       assertEquals(57, Node.REFLECTED_OBJECT);
213:       assertEquals(54, Node.SLASH_V);
214:       assertEquals(48, Node.DIRECTIVES);
215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
216:       assertEquals(55, Node.INFERRED_FUNCTION);
217:       assertEquals(49, Node.DIRECT_EVAL);
218:       assertEquals(30, Node.VAR_ARGS_NAME);
219:       assertEquals(57, Node.LAST_PROP);
220:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
221:       assertEquals(8, Node.FLAG_NO_THROWS);
222:       assertEquals(39, Node.EMPTY_BLOCK);
223:       assertEquals(36, Node.QUOTED_PROP);
224:       assertEquals(52, Node.LENGTH);
225:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
226:       assertEquals(15, Node.NO_SIDE_EFFECTS);
227:       assertEquals(53, Node.INPUT_ID);
228:       assertEquals(29, Node.JSDOC_INFO_PROP);
229:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
230:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
231:       assertEquals(56, Node.CHANGE_TIME);
232:       assertEquals(47, Node.IS_DISPATCHER);
233:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
234:       assertEquals(37, Node.OPT_ARG_NAME);
235:       assertEquals(2, Node.POST_FLAG);
236:       assertEquals(4095, Node.COLUMN_MASK);
237:       assertEquals(51, Node.STATIC_SOURCE_FILE);
238:       assertEquals(1, Node.DECR_FLAG);
239:       assertEquals(32, Node.INCRDECR_PROP);
240:       assertEquals(43, Node.IS_CONSTANT_NAME);
241:       assertEquals(12, Node.COLUMN_BITS);
242:       assertEquals(46, Node.IS_NAMESPACE);
243:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
244:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
245:       
246:       boolean boolean0 = node0.isAnd();
247:       assertFalse(node0.isGetProp());
248:       assertFalse(node0.isThis());
249:       assertFalse(node0.isInstanceOf());
250:       assertFalse(node0.isComma());
251:       assertFalse(node0.isObjectLit());
252:       assertFalse(node0.isNot());
253:       assertFalse(node0.isWith());
254:       assertFalse(node0.isBreak());
255:       assertFalse(node0.isAnd());
256:       assertEquals((-1), node0.getCharno());
257:       assertFalse(node0.isHook());
258:       assertFalse(node0.isExprResult());
259:       assertFalse(node0.isScript());
260:       assertFalse(node0.isAssign());
261:       assertFalse(node0.isString());
262:       assertFalse(node0.isCase());
263:       assertFalse(node0.hasChildren());
264:       assertEquals((-376), node0.getType());
265:       assertFalse(node0.hasOneChild());
266:       assertEquals((-1), node0.getLineno());
267:       assertFalse(node0.hasMoreThanOneChild());
268:       assertEquals((-1), node0.getSourcePosition());
269:       assertFalse(node0.isIn());
270:       assertFalse(node0.isContinue());
271:       assertFalse(node0.isNE());
272:       assertFalse(node0.isIf());
273:       assertFalse(node0.isInc());
274:       assertFalse(node0.isCast());
275:       assertFalse(node0.isFalse());
276:       assertFalse(node0.isFunction());
277:       assertFalse(node0.isThrow());
278:       assertFalse(node0.isSetterDef());
279:       assertFalse(node0.isCatch());
280:       assertEquals(0, node0.getChildCount());
281:       assertFalse(node0.isStringKey());
282:       assertFalse(node0.isNull());
283:       assertFalse(node0.isCall());
284:       assertFalse(node0.isParamList());
285:       assertFalse(node0.isVoid());
286:       assertFalse(node0.isName());
287:       assertFalse(node0.isTry());
288:       assertFalse(node0.isBlock());
289:       assertFalse(node0.isDebugger());
290:       assertFalse(node0.isRegExp());
291:       assertFalse(node0.isFor());
292:       assertFalse(node0.isWhile());
293:       assertFalse(node0.isAssignAdd());
294:       assertFalse(node0.isOr());
295:       assertFalse(node0.isLabel());
296:       assertFalse(node0.isReturn());
297:       assertFalse(node0.isDec());
298:       assertFalse(node0.isGetterDef());
299:       assertFalse(node0.isTypeOf());
300:       assertFalse(node0.isNumber());
301:       assertFalse(node0.isLabelName());
302:       assertFalse(node0.isGetElem());
303:       assertFalse(node0.isSwitch());
304:       assertFalse(node0.isArrayLit());
305:       assertFalse(node0.isDelProp());
306:       assertFalse(node0.isAdd());
307:       assertFalse(node0.isNew());
308:       assertFalse(node0.isTrue());
309:       assertFalse(node0.isEmpty());
310:       assertFalse(node0.isDo());
311:       assertFalse(node0.isVar());
312:       assertFalse(node0.isDefaultCase());
313:       assertFalse(boolean0);
314:       assertEquals(40, Node.ORIGINALNAME_PROP);
315:       assertEquals(50, Node.FREE_CALL);
316:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
317:       assertEquals(57, Node.REFLECTED_OBJECT);
318:       assertEquals(54, Node.SLASH_V);
319:       assertEquals(48, Node.DIRECTIVES);
320:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
321:       assertEquals(55, Node.INFERRED_FUNCTION);
322:       assertEquals(49, Node.DIRECT_EVAL);
323:       assertEquals(30, Node.VAR_ARGS_NAME);
324:       assertEquals(57, Node.LAST_PROP);
325:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
326:       assertEquals(8, Node.FLAG_NO_THROWS);
327:       assertEquals(39, Node.EMPTY_BLOCK);
328:       assertEquals(36, Node.QUOTED_PROP);
329:       assertEquals(52, Node.LENGTH);
330:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
331:       assertEquals(15, Node.NO_SIDE_EFFECTS);
332:       assertEquals(53, Node.INPUT_ID);
333:       assertEquals(29, Node.JSDOC_INFO_PROP);
334:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
335:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
336:       assertEquals(56, Node.CHANGE_TIME);
337:       assertEquals(47, Node.IS_DISPATCHER);
338:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
339:       assertEquals(37, Node.OPT_ARG_NAME);
340:       assertEquals(2, Node.POST_FLAG);
341:       assertEquals(4095, Node.COLUMN_MASK);
342:       assertEquals(51, Node.STATIC_SOURCE_FILE);
343:       assertEquals(1, Node.DECR_FLAG);
344:       assertEquals(32, Node.INCRDECR_PROP);
345:       assertEquals(43, Node.IS_CONSTANT_NAME);
346:       assertEquals(12, Node.COLUMN_BITS);
347:       assertEquals(46, Node.IS_NAMESPACE);
348:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
349:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
350:       
351:       JSDocInfo jSDocInfo0 = new JSDocInfo();
352:       assertFalse(jSDocInfo0.isDisposes());
353:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
354:       assertFalse(jSDocInfo0.isDefine());
355:       assertFalse(jSDocInfo0.hasBaseType());
356:       assertFalse(jSDocInfo0.hasType());
357:       assertEquals(0, jSDocInfo0.getParameterCount());
358:       assertNull(jSDocInfo0.getOriginalCommentString());
359:       assertFalse(jSDocInfo0.isJaggerProvide());
360:       assertNull(jSDocInfo0.getReturnDescription());
361:       assertFalse(jSDocInfo0.shouldPreserveTry());
362:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
363:       assertFalse(jSDocInfo0.isStableIdGenerator());
364:       assertNull(jSDocInfo0.getLicense());
365:       assertFalse(jSDocInfo0.isHidden());
366:       assertFalse(jSDocInfo0.containsDeclaration());
367:       assertFalse(jSDocInfo0.hasTypedefType());
368:       assertFalse(jSDocInfo0.makesDicts());
369:       assertFalse(jSDocInfo0.isNoAlias());
370:       assertFalse(jSDocInfo0.hasReturnType());
371:       assertFalse(jSDocInfo0.hasModifies());
372:       assertFalse(jSDocInfo0.isNoSideEffects());
373:       assertFalse(jSDocInfo0.isNoShadow());
374:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
375:       assertFalse(jSDocInfo0.isExterns());
376:       assertFalse(jSDocInfo0.isExpose());
377:       assertFalse(jSDocInfo0.isNgInject());
378:       assertFalse(jSDocInfo0.isMappedIdGenerator());
379:       assertNull(jSDocInfo0.getLendsName());
380:       assertFalse(jSDocInfo0.isDeprecated());
381:       assertNull(jSDocInfo0.getVisibility());
382:       assertNull(jSDocInfo0.getFileOverview());
383:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
384:       assertFalse(jSDocInfo0.isOverride());
385:       assertEquals("JSDocInfo", jSDocInfo0.toString());
386:       assertFalse(jSDocInfo0.isConstant());
387:       assertNull(jSDocInfo0.getVersion());
388:       assertNull(jSDocInfo0.getMeaning());
389:       assertNull(jSDocInfo0.getDescription());
390:       assertFalse(jSDocInfo0.makesStructs());
391:       assertFalse(jSDocInfo0.hasEnumParameterType());
392:       assertFalse(jSDocInfo0.isJaggerModule());
393:       assertFalse(jSDocInfo0.isNoCompile());
394:       assertFalse(jSDocInfo0.isNoTypeCheck());
395:       assertNull(jSDocInfo0.getDeprecationReason());
396:       assertFalse(jSDocInfo0.isExport());
397:       assertFalse(jSDocInfo0.isConstructor());
398:       assertFalse(jSDocInfo0.isJavaDispatch());
399:       assertFalse(jSDocInfo0.hasThisType());
400:       assertFalse(jSDocInfo0.isIdGenerator());
401:       assertFalse(jSDocInfo0.hasFileOverview());
402:       assertFalse(jSDocInfo0.isWizaction());
403:       assertNull(jSDocInfo0.getBlockDescription());
404:       assertFalse(jSDocInfo0.isInterface());
405:       assertFalse(jSDocInfo0.isJaggerInject());
406:       assertFalse(jSDocInfo0.isImplicitCast());
407:       assertNotNull(jSDocInfo0);
408:       
409:       jSDocInfo0.setLendsName("VBW%NQp.wgG*(w~");
410:       assertFalse(jSDocInfo0.isDisposes());
411:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
412:       assertFalse(jSDocInfo0.isDefine());
413:       assertFalse(jSDocInfo0.hasBaseType());
414:       assertFalse(jSDocInfo0.hasType());
415:       assertEquals(0, jSDocInfo0.getParameterCount());
416:       assertNull(jSDocInfo0.getOriginalCommentString());
417:       assertFalse(jSDocInfo0.isJaggerProvide());
418:       assertNull(jSDocInfo0.getReturnDescription());
419:       assertFalse(jSDocInfo0.shouldPreserveTry());
420:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
421:       assertFalse(jSDocInfo0.isStableIdGenerator());
422:       assertNull(jSDocInfo0.getLicense());
423:       assertFalse(jSDocInfo0.isHidden());
424:       assertFalse(jSDocInfo0.containsDeclaration());
425:       assertFalse(jSDocInfo0.hasTypedefType());
426:       assertFalse(jSDocInfo0.makesDicts());
427:       assertFalse(jSDocInfo0.isNoAlias());
428:       assertFalse(jSDocInfo0.hasReturnType());
429:       assertFalse(jSDocInfo0.hasModifies());
430:       assertFalse(jSDocInfo0.isNoSideEffects());
431:       assertFalse(jSDocInfo0.isNoShadow());
432:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
433:       assertFalse(jSDocInfo0.isExterns());
434:       assertFalse(jSDocInfo0.isExpose());
435:       assertEquals("VBW%NQp.wgG*(w~", jSDocInfo0.getLendsName());
436:       assertFalse(jSDocInfo0.isNgInject());
437:       assertFalse(jSDocInfo0.isMappedIdGenerator());
438:       assertFalse(jSDocInfo0.isDeprecated());
439:       assertNull(jSDocInfo0.getVisibility());
440:       assertNull(jSDocInfo0.getFileOverview());
441:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
442:       assertFalse(jSDocInfo0.isOverride());
443:       assertEquals("JSDocInfo", jSDocInfo0.toString());
444:       assertFalse(jSDocInfo0.isConstant());
445:       assertNull(jSDocInfo0.getVersion());
446:       assertNull(jSDocInfo0.getMeaning());
447:       assertNull(jSDocInfo0.getDescription());
448:       assertFalse(jSDocInfo0.makesStructs());
449:       assertFalse(jSDocInfo0.hasEnumParameterType());
450:       assertFalse(jSDocInfo0.isJaggerModule());
451:       assertFalse(jSDocInfo0.isNoCompile());
452:       assertFalse(jSDocInfo0.isNoTypeCheck());
453:       assertNull(jSDocInfo0.getDeprecationReason());
454:       assertFalse(jSDocInfo0.isExport());
455:       assertFalse(jSDocInfo0.isConstructor());
456:       assertFalse(jSDocInfo0.isJavaDispatch());
457:       assertFalse(jSDocInfo0.hasThisType());
458:       assertFalse(jSDocInfo0.isIdGenerator());
459:       assertFalse(jSDocInfo0.hasFileOverview());
460:       assertFalse(jSDocInfo0.isWizaction());
461:       assertNull(jSDocInfo0.getBlockDescription());
462:       assertFalse(jSDocInfo0.isInterface());
463:       assertFalse(jSDocInfo0.isJaggerInject());
464:       assertFalse(jSDocInfo0.isImplicitCast());
465:       
466:       node0.addSuppression("com.google.javascript.rhino.Node$AncestorIterable");
467:       assertFalse(node0.isGetProp());
468:       assertFalse(node0.isThis());
469:       assertFalse(node0.isInstanceOf());
470:       assertFalse(node0.isComma());
471:       assertFalse(node0.isObjectLit());
472:       assertFalse(node0.isNot());
473:       assertFalse(node0.isWith());
474:       assertFalse(node0.isBreak());
475:       assertFalse(node0.isAnd());
476:       assertEquals((-1), node0.getCharno());
477:       assertFalse(node0.isHook());
478:       assertFalse(node0.isExprResult());
479:       assertFalse(node0.isScript());
480:       assertFalse(node0.isAssign());
481:       assertFalse(node0.isString());
482:       assertFalse(node0.isCase());
483:       assertFalse(node0.hasChildren());
484:       assertEquals((-376), node0.getType());
485:       assertFalse(node0.hasOneChild());
486:       assertEquals((-1), node0.getLineno());
487:       assertFalse(node0.hasMoreThanOneChild());
488:       assertEquals((-1), node0.getSourcePosition());
489:       assertFalse(node0.isIn());
490:       assertFalse(node0.isContinue());
491:       assertFalse(node0.isNE());
492:       assertFalse(node0.isIf());
493:       assertFalse(node0.isInc());
494:       assertFalse(node0.isCast());
495:       assertFalse(node0.isFalse());
496:       assertFalse(node0.isFunction());
497:       assertFalse(node0.isThrow());
498:       assertFalse(node0.isSetterDef());
499:       assertFalse(node0.isCatch());
500:       assertEquals(0, node0.getChildCount());
501:       assertFalse(node0.isStringKey());
502:       assertFalse(node0.isNull());
503:       assertFalse(node0.isCall());
504:       assertFalse(node0.isParamList());
505:       assertFalse(node0.isVoid());
506:       assertFalse(node0.isName());
507:       assertFalse(node0.isTry());
508:       assertFalse(node0.isBlock());
509:       assertFalse(node0.isDebugger());
510:       assertFalse(node0.isRegExp());
511:       assertFalse(node0.isFor());
512:       assertFalse(node0.isWhile());
513:       assertFalse(node0.isAssignAdd());
514:       assertFalse(node0.isOr());
515:       assertFalse(node0.isLabel());
516:       assertFalse(node0.isReturn());
517:       assertFalse(node0.isDec());
518:       assertFalse(node0.isGetterDef());
519:       assertFalse(node0.isTypeOf());
520:       assertFalse(node0.isNumber());
521:       assertFalse(node0.isLabelName());
522:       assertFalse(node0.isGetElem());
523:       assertFalse(node0.isSwitch());
524:       assertFalse(node0.isArrayLit());
525:       assertFalse(node0.isDelProp());
526:       assertFalse(node0.isAdd());
527:       assertFalse(node0.isNew());
528:       assertFalse(node0.isTrue());
529:       assertFalse(node0.isEmpty());
530:       assertFalse(node0.isDo());
531:       assertFalse(node0.isVar());
532:       assertFalse(node0.isDefaultCase());
533:       assertEquals(40, Node.ORIGINALNAME_PROP);
534:       assertEquals(50, Node.FREE_CALL);
535:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
536:       assertEquals(57, Node.REFLECTED_OBJECT);
537:       assertEquals(54, Node.SLASH_V);
538:       assertEquals(48, Node.DIRECTIVES);
539:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
540:       assertEquals(55, Node.INFERRED_FUNCTION);
541:       assertEquals(49, Node.DIRECT_EVAL);
542:       assertEquals(30, Node.VAR_ARGS_NAME);
543:       assertEquals(57, Node.LAST_PROP);
544:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
545:       assertEquals(8, Node.FLAG_NO_THROWS);
546:       assertEquals(39, Node.EMPTY_BLOCK);
547:       assertEquals(36, Node.QUOTED_PROP);
548:       assertEquals(52, Node.LENGTH);
549:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
550:       assertEquals(15, Node.NO_SIDE_EFFECTS);
551:       assertEquals(53, Node.INPUT_ID);
552:       assertEquals(29, Node.JSDOC_INFO_PROP);
553:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
554:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
555:       assertEquals(56, Node.CHANGE_TIME);
556:       assertEquals(47, Node.IS_DISPATCHER);
557:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
558:       assertEquals(37, Node.OPT_ARG_NAME);
559:       assertEquals(2, Node.POST_FLAG);
560:       assertEquals(4095, Node.COLUMN_MASK);
561:       assertEquals(51, Node.STATIC_SOURCE_FILE);
562:       assertEquals(1, Node.DECR_FLAG);
563:       assertEquals(32, Node.INCRDECR_PROP);
564:       assertEquals(43, Node.IS_CONSTANT_NAME);
565:       assertEquals(12, Node.COLUMN_BITS);
566:       assertEquals(46, Node.IS_NAMESPACE);
567:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
568:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
569:       
570:       boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
571:       assertTrue(boolean1 == boolean0);
572:       assertFalse(boolean1);
573:       
574:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
575:       assertNotNull(simpleErrorReporter0);
576:       
577:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
578:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
579:       assertNotNull(jSTypeRegistry0);
580:       
581:       // Undeclared exception!
582:       try { 
583:         ImmutableList.copyOf((Iterator<? extends JSType>) null);
584:         fail("Expecting exception: NullPointerException");
585:       
586:       } catch(NullPointerException e) {
587:          //
588:          // no message in exception (getMessage() returned null)
589:          //
590:          verifyException("com.google.common.collect.ImmutableList", e);
591:       }
592:   }
593: }
RegularFileObject[/tmp/EvoSuite_98_1629223394468/com/google/javascript/rhino/Node_98_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:03:14 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_98_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_98_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.common.collect.RegularImmutableSet",
109:       "com.google.javascript.rhino.jstype.ModificationVisitor",
110:       "com.google.javascript.rhino.jstype.PropertyMap$1",
111:       "com.google.common.collect.AbstractMapEntry",
112:       "com.google.javascript.rhino.Node$AncestorIterable$1",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.common.collect.Iterables",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.common.collect.SingletonImmutableSet",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.common.collect.Iterators$1",
207:       "com.google.common.collect.Iterators$2",
208:       "com.google.javascript.rhino.jstype.NamespaceType",
209:       "com.google.common.collect.Iterators$3",
210:       "com.google.common.collect.Sets",
211:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
212:       "com.google.javascript.rhino.Node$ObjectPropListItem",
213:       "com.google.common.collect.Lists$StringAsImmutableList",
214:       "com.google.common.collect.Lists$2",
215:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
216:       "com.google.common.collect.ImmutableList$Builder",
217:       "com.google.common.collect.Lists$1",
218:       "com.google.javascript.rhino.jstype.StaticReference",
219:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
220:       "com.google.common.collect.Multiset",
221:       "com.google.common.collect.AbstractMultimap",
222:       "com.google.common.collect.Multimap",
223:       "com.google.common.collect.Iterators",
224:       "com.google.common.collect.EmptyImmutableSet",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
228:       "com.google.common.collect.ImmutableList",
229:       "com.google.common.collect.SingletonImmutableBiMap",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
231:       "com.google.javascript.rhino.jstype.StringType",
232:       "com.google.javascript.rhino.Node$AbstractPropListItem",
233:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
234:       "com.google.javascript.rhino.jstype.TemplatizedType",
235:       "com.google.javascript.rhino.jstype.Visitor",
236:       "com.google.javascript.rhino.jstype.NoResolvedType",
237:       "com.google.javascript.rhino.jstype.JSTypeNative",
238:       "com.google.javascript.rhino.jstype.AllType",
239:       "com.google.common.collect.Maps",
240:       "com.google.common.collect.SetMultimap",
241:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
242:       "com.google.common.collect.Maps$EntryTransformer",
243:       "com.google.javascript.rhino.JSTypeExpression",
244:       "com.google.common.collect.Iterators$MergingIterator"
245:     );
246:   } 
247: 
248:   private static void resetClasses() {
249:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_98_tmp__ESTest_scaffolding.class.getClassLoader()); 
250: 
251:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
252:       "com.google.javascript.rhino.Node",
253:       "com.google.javascript.rhino.Node$NumberNode",
254:       "com.google.javascript.rhino.Node$StringNode",
255:       "com.google.javascript.rhino.Node$AbstractPropListItem",
256:       "com.google.javascript.rhino.Node$ObjectPropListItem",
257:       "com.google.javascript.rhino.Node$IntPropListItem",
258:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
259:       "com.google.javascript.rhino.Node$AncestorIterable",
260:       "com.google.javascript.rhino.Node$NodeMismatch",
261:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
262:       "com.google.javascript.rhino.Node$SideEffectFlags",
263:       "com.google.javascript.rhino.Token",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Preconditions",
267:       "com.google.common.base.Joiner$1",
268:       "com.google.common.collect.Collections2",
269:       "com.google.common.base.Joiner$MapJoiner",
270:       "com.google.common.collect.Maps",
271:       "com.google.common.collect.AbstractMultimap",
272:       "com.google.common.collect.AbstractMapBasedMultimap",
273:       "com.google.common.collect.AbstractSetMultimap",
274:       "com.google.common.collect.LinkedHashMultimap",
275:       "com.google.common.collect.AbstractMapEntry",
276:       "com.google.common.collect.ImmutableEntry",
277:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
278:       "com.google.common.collect.AbstractListMultimap",
279:       "com.google.common.collect.ArrayListMultimap",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
281:       "com.google.common.collect.ImmutableCollection",
282:       "com.google.common.collect.RegularImmutableList",
283:       "com.google.common.collect.ObjectArrays",
284:       "com.google.common.collect.ImmutableList",
285:       "com.google.javascript.rhino.jstype.ModificationVisitor",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
287:       "com.google.common.collect.ImmutableCollection$Builder",
288:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
289:       "com.google.common.collect.ImmutableList$Builder",
290:       "com.google.common.collect.UnmodifiableIterator",
291:       "com.google.common.collect.UnmodifiableListIterator",
292:       "com.google.common.collect.Iterators$1",
293:       "com.google.common.collect.Iterators$2",
294:       "com.google.common.collect.Iterators",
295:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
296:       "com.google.javascript.rhino.jstype.JSType$1",
297:       "com.google.javascript.rhino.jstype.JSType",
298:       "com.google.javascript.rhino.jstype.ObjectType",
299:       "com.google.javascript.rhino.jstype.ProxyObjectType",
300:       "com.google.javascript.rhino.jstype.TemplateType",
301:       "com.google.javascript.rhino.jstype.ValueType",
302:       "com.google.javascript.rhino.jstype.BooleanType",
303:       "com.google.javascript.rhino.jstype.NullType",
304:       "com.google.javascript.rhino.jstype.NumberType",
305:       "com.google.javascript.rhino.jstype.StringType",
306:       "com.google.javascript.rhino.jstype.UnknownType",
307:       "com.google.javascript.rhino.jstype.VoidType",
308:       "com.google.javascript.rhino.jstype.AllType",
309:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
310:       "com.google.common.collect.ImmutableMap",
311:       "com.google.common.collect.ImmutableBiMap",
312:       "com.google.common.collect.EmptyImmutableBiMap",
313:       "com.google.javascript.rhino.jstype.PropertyMap$1",
314:       "com.google.javascript.rhino.jstype.PropertyMap",
315:       "com.google.javascript.rhino.jstype.FunctionType",
316:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.ImmutableList$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Platform",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.InputId",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.Iterators$12",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
366:       "com.google.javascript.rhino.jstype.JSType$TypePair",
367:       "com.google.javascript.rhino.jstype.TernaryValue",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
370:     );
371:   }
372: }

[MASTER] 18:03:14.533 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node((-376));
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isAssign());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.hasChildren());
assertEquals((-376), node0.getType());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertNotNull(node0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isAssign());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.hasChildren());
assertEquals((-376), node0.getType());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

boolean boolean0 = node0.isAnd();
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isAssign());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.hasChildren());
assertEquals((-376), node0.getType());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(boolean0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

JSDocInfo jSDocInfo0 = new JSDocInfo();
assertFalse(jSDocInfo0.isDisposes());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isNoShadow());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isDeprecated());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getFileOverview());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isOverride());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getVersion());
assertNull(jSDocInfo0.getMeaning());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isWizaction());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isImplicitCast());
assertNotNull(jSDocInfo0);

jSDocInfo0.setLendsName("VBW%NQp.wgG*(w~");
assertFalse(jSDocInfo0.isDisposes());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.hasType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isNoShadow());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isExpose());
assertEquals("VBW%NQp.wgG*(w~", jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isDeprecated());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getFileOverview());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isOverride());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getVersion());
assertNull(jSDocInfo0.getMeaning());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isWizaction());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isImplicitCast());

node0.addSuppression("com.google.javascript.rhino.Node$AncestorIterable");
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isAssign());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.hasChildren());
assertEquals((-376), node0.getType());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

ImmutableList.copyOf((Iterator<? extends JSType>) null);

[MASTER] 18:03:17.898 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_118_1629223397724/com/google/javascript/rhino/Node_118_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_118_1629223397724/com/google/javascript/rhino/Node_118_tmp__ESTest_scaffolding.java]]
[MASTER] 18:03:17.898 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:03:17.898 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:03:17.899 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 577
[MASTER] 18:03:17.901 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_118_1629223397724/com/google/javascript/rhino/Node_118_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:03:17 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_118_tmp__ESTest extends Node_118_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       String string0 = "gs1IcjVs7cZy}^~";
25:       boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
26:       assertFalse(boolean0);
27:       
28:       Node node0 = Node.newString(1, "gs1IcjVs7cZy}^~", 1493, 4358);
29:       assertEquals(4095, node0.getCharno());
30:       assertFalse(node0.isSwitch());
31:       assertFalse(node0.isString());
32:       assertFalse(node0.isHook());
33:       assertFalse(node0.isIn());
34:       assertFalse(node0.isCase());
35:       assertFalse(node0.isInc());
36:       assertFalse(node0.isGetterDef());
37:       assertFalse(node0.isFalse());
38:       assertFalse(node0.isThrow());
39:       assertFalse(node0.isAnd());
40:       assertFalse(node0.isArrayLit());
41:       assertFalse(node0.isScript());
42:       assertFalse(node0.isRegExp());
43:       assertFalse(node0.isFunction());
44:       assertFalse(node0.isWith());
45:       assertEquals(1493, node0.getLineno());
46:       assertEquals(6119423, node0.getSourcePosition());
47:       assertFalse(node0.hasOneChild());
48:       assertFalse(node0.isTry());
49:       assertFalse(node0.isSetterDef());
50:       assertFalse(node0.isNE());
51:       assertFalse(node0.isIf());
52:       assertFalse(node0.isFor());
53:       assertFalse(node0.isThis());
54:       assertFalse(node0.isInstanceOf());
55:       assertFalse(node0.hasMoreThanOneChild());
56:       assertFalse(node0.isCatch());
57:       assertFalse(node0.isWhile());
58:       assertFalse(node0.isBlock());
59:       assertFalse(node0.isVar());
60:       assertFalse(node0.isAssignAdd());
61:       assertFalse(node0.isNew());
62:       assertFalse(node0.isAdd());
63:       assertFalse(node0.isDo());
64:       assertFalse(node0.isNumber());
65:       assertFalse(node0.isParamList());
66:       assertFalse(node0.isStringKey());
67:       assertFalse(node0.isLabel());
68:       assertFalse(node0.isCast());
69:       assertEquals(0, node0.getChildCount());
70:       assertFalse(node0.isContinue());
71:       assertFalse(node0.isLabelName());
72:       assertEquals(1, node0.getType());
73:       assertFalse(node0.isDefaultCase());
74:       assertFalse(node0.isNot());
75:       assertFalse(node0.isObjectLit());
76:       assertFalse(node0.isTrue());
77:       assertFalse(node0.isDebugger());
78:       assertFalse(node0.isEmpty());
79:       assertFalse(node0.isGetProp());
80:       assertFalse(node0.isDec());
81:       assertFalse(node0.isDelProp());
82:       assertFalse(node0.isTypeOf());
83:       assertFalse(node0.isNull());
84:       assertFalse(node0.isAssign());
85:       assertFalse(node0.isOr());
86:       assertFalse(node0.isComma());
87:       assertFalse(node0.isReturn());
88:       assertFalse(node0.hasChildren());
89:       assertFalse(node0.isGetElem());
90:       assertFalse(node0.isName());
91:       assertFalse(node0.isExprResult());
92:       assertFalse(node0.isVoid());
93:       assertFalse(node0.isCall());
94:       assertFalse(node0.isBreak());
95:       assertNotNull(node0);
96:       assertEquals(37, Node.OPT_ARG_NAME);
97:       assertEquals(46, Node.IS_NAMESPACE);
98:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
99:       assertEquals(12, Node.COLUMN_BITS);
100:       assertEquals(56, Node.CHANGE_TIME);
101:       assertEquals(32, Node.INCRDECR_PROP);
102:       assertEquals(29, Node.JSDOC_INFO_PROP);
103:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
104:       assertEquals(1, Node.DECR_FLAG);
105:       assertEquals(15, Node.NO_SIDE_EFFECTS);
106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
107:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
108:       assertEquals(57, Node.REFLECTED_OBJECT);
109:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
110:       assertEquals(49, Node.DIRECT_EVAL);
111:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
112:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
113:       assertEquals(4095, Node.COLUMN_MASK);
114:       assertEquals(48, Node.DIRECTIVES);
115:       assertEquals(39, Node.EMPTY_BLOCK);
116:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
117:       assertEquals(50, Node.FREE_CALL);
118:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
119:       assertEquals(36, Node.QUOTED_PROP);
120:       assertEquals(55, Node.INFERRED_FUNCTION);
121:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
122:       assertEquals(52, Node.LENGTH);
123:       assertEquals(8, Node.FLAG_NO_THROWS);
124:       assertEquals(53, Node.INPUT_ID);
125:       assertEquals(54, Node.SLASH_V);
126:       assertEquals(43, Node.IS_CONSTANT_NAME);
127:       assertEquals(57, Node.LAST_PROP);
128:       assertEquals(30, Node.VAR_ARGS_NAME);
129:       assertEquals(40, Node.ORIGINALNAME_PROP);
130:       assertEquals(47, Node.IS_DISPATCHER);
131:       assertEquals(2, Node.POST_FLAG);
132:       
133:       Node node1 = Node.newNumber((double) 49, 52, 494);
134:       assertFalse(node1.isTry());
135:       assertFalse(node1.isVoid());
136:       assertFalse(node1.isFunction());
137:       assertFalse(node1.isDebugger());
138:       assertFalse(node1.isTrue());
139:       assertFalse(node1.isFor());
140:       assertFalse(node1.isIf());
141:       assertFalse(node1.isDelProp());
142:       assertFalse(node1.isRegExp());
143:       assertFalse(node1.isCatch());
144:       assertFalse(node1.isArrayLit());
145:       assertEquals(494, node1.getCharno());
146:       assertEquals(0, node1.getChildCount());
147:       assertFalse(node1.isIn());
148:       assertFalse(node1.isNE());
149:       assertFalse(node1.isNull());
150:       assertFalse(node1.isEmpty());
151:       assertFalse(node1.isDefaultCase());
152:       assertFalse(node1.isSetterDef());
153:       assertFalse(node1.isInc());
154:       assertFalse(node1.isNew());
155:       assertFalse(node1.isSwitch());
156:       assertFalse(node1.isVar());
157:       assertFalse(node1.isHook());
158:       assertFalse(node1.isBlock());
159:       assertEquals(39, node1.getType());
160:       assertFalse(node1.isStringKey());
161:       assertFalse(node1.hasMoreThanOneChild());
162:       assertEquals(213486, node1.getSourcePosition());
163:       assertFalse(node1.isParamList());
164:       assertFalse(node1.isThis());
165:       assertFalse(node1.isCase());
166:       assertFalse(node1.isGetterDef());
167:       assertEquals(52, node1.getLineno());
168:       assertFalse(node1.isScript());
169:       assertFalse(node1.hasOneChild());
170:       assertFalse(node1.isAssign());
171:       assertFalse(node1.isLabelName());
172:       assertFalse(node1.isWith());
173:       assertFalse(node1.isDec());
174:       assertFalse(node1.isTypeOf());
175:       assertFalse(node1.isCast());
176:       assertFalse(node1.isInstanceOf());
177:       assertFalse(node1.isGetElem());
178:       assertFalse(node1.isExprResult());
179:       assertFalse(node1.isAssignAdd());
180:       assertFalse(node1.isOr());
181:       assertFalse(node1.isLabel());
182:       assertFalse(node1.isDo());
183:       assertFalse(node1.isAdd());
184:       assertFalse(node1.isThrow());
185:       assertFalse(node1.isContinue());
186:       assertFalse(node1.isFalse());
187:       assertFalse(node1.isName());
188:       assertFalse(node1.isBreak());
189:       assertFalse(node1.isCall());
190:       assertTrue(node1.isNumber());
191:       assertFalse(node1.isAnd());
192:       assertFalse(node1.isComma());
193:       assertFalse(node1.hasChildren());
194:       assertFalse(node1.isReturn());
195:       assertFalse(node1.isNot());
196:       assertFalse(node1.isString());
197:       assertFalse(node1.isWhile());
198:       assertFalse(node1.isObjectLit());
199:       assertFalse(node1.isGetProp());
200:       assertNotNull(node1);
201:       assertFalse(node1.equals((Object)node0));
202:       assertEquals(4095, Node.COLUMN_MASK);
203:       assertEquals(55, Node.INFERRED_FUNCTION);
204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
205:       assertEquals(48, Node.DIRECTIVES);
206:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
207:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
208:       assertEquals(40, Node.ORIGINALNAME_PROP);
209:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
210:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
211:       assertEquals(43, Node.IS_CONSTANT_NAME);
212:       assertEquals(54, Node.SLASH_V);
213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
214:       assertEquals(50, Node.FREE_CALL);
215:       assertEquals(12, Node.COLUMN_BITS);
216:       assertEquals(46, Node.IS_NAMESPACE);
217:       assertEquals(57, Node.LAST_PROP);
218:       assertEquals(1, Node.DECR_FLAG);
219:       assertEquals(49, Node.DIRECT_EVAL);
220:       assertEquals(32, Node.INCRDECR_PROP);
221:       assertEquals(37, Node.OPT_ARG_NAME);
222:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
223:       assertEquals(47, Node.IS_DISPATCHER);
224:       assertEquals(2, Node.POST_FLAG);
225:       assertEquals(30, Node.VAR_ARGS_NAME);
226:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
227:       assertEquals(57, Node.REFLECTED_OBJECT);
228:       assertEquals(29, Node.JSDOC_INFO_PROP);
229:       assertEquals(8, Node.FLAG_NO_THROWS);
230:       assertEquals(39, Node.EMPTY_BLOCK);
231:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
232:       assertEquals(56, Node.CHANGE_TIME);
233:       assertEquals(15, Node.NO_SIDE_EFFECTS);
234:       assertEquals(53, Node.INPUT_ID);
235:       assertEquals(52, Node.LENGTH);
236:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
237:       assertEquals(36, Node.QUOTED_PROP);
238:       
239:       JSDocInfo jSDocInfo0 = new JSDocInfo(false);
240:       assertFalse(jSDocInfo0.isNoSideEffects());
241:       assertFalse(jSDocInfo0.isJavaDispatch());
242:       assertFalse(jSDocInfo0.isMappedIdGenerator());
243:       assertFalse(jSDocInfo0.hasType());
244:       assertNull(jSDocInfo0.getOriginalCommentString());
245:       assertFalse(jSDocInfo0.makesDicts());
246:       assertFalse(jSDocInfo0.isDisposes());
247:       assertFalse(jSDocInfo0.isNoCompile());
248:       assertFalse(jSDocInfo0.isDeprecated());
249:       assertFalse(jSDocInfo0.isExterns());
250:       assertFalse(jSDocInfo0.isIdGenerator());
251:       assertNull(jSDocInfo0.getBlockDescription());
252:       assertFalse(jSDocInfo0.isInterface());
253:       assertFalse(jSDocInfo0.isHidden());
254:       assertNull(jSDocInfo0.getDeprecationReason());
255:       assertFalse(jSDocInfo0.isWizaction());
256:       assertFalse(jSDocInfo0.hasFileOverview());
257:       assertNull(jSDocInfo0.getReturnDescription());
258:       assertFalse(jSDocInfo0.isOverride());
259:       assertFalse(jSDocInfo0.hasBaseType());
260:       assertNull(jSDocInfo0.getVersion());
261:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
262:       assertNull(jSDocInfo0.getLicense());
263:       assertFalse(jSDocInfo0.isImplicitCast());
264:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
265:       assertFalse(jSDocInfo0.isJaggerProvide());
266:       assertFalse(jSDocInfo0.isExport());
267:       assertFalse(jSDocInfo0.isJaggerModule());
268:       assertFalse(jSDocInfo0.isStableIdGenerator());
269:       assertFalse(jSDocInfo0.isConstant());
270:       assertFalse(jSDocInfo0.isNoTypeCheck());
271:       assertFalse(jSDocInfo0.isJaggerInject());
272:       assertNull(jSDocInfo0.getDescription());
273:       assertFalse(jSDocInfo0.hasModifies());
274:       assertFalse(jSDocInfo0.hasThisType());
275:       assertFalse(jSDocInfo0.hasEnumParameterType());
276:       assertFalse(jSDocInfo0.containsDeclaration());
277:       assertFalse(jSDocInfo0.hasTypedefType());
278:       assertNull(jSDocInfo0.getVisibility());
279:       assertNull(jSDocInfo0.getFileOverview());
280:       assertNull(jSDocInfo0.getLendsName());
281:       assertFalse(jSDocInfo0.isConstructor());
282:       assertFalse(jSDocInfo0.makesStructs());
283:       assertFalse(jSDocInfo0.isExpose());
284:       assertEquals("JSDocInfo", jSDocInfo0.toString());
285:       assertFalse(jSDocInfo0.shouldPreserveTry());
286:       assertFalse(jSDocInfo0.isNoShadow());
287:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
288:       assertEquals(0, jSDocInfo0.getParameterCount());
289:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
290:       assertFalse(jSDocInfo0.isDefine());
291:       assertFalse(jSDocInfo0.isNgInject());
292:       assertNull(jSDocInfo0.getMeaning());
293:       assertFalse(jSDocInfo0.isNoAlias());
294:       assertFalse(jSDocInfo0.hasReturnType());
295:       assertNotNull(jSDocInfo0);
296:       
297:       Node node2 = new Node(31, node1);
298:       assertFalse(node1.isTry());
299:       assertFalse(node1.isVoid());
300:       assertFalse(node1.isFunction());
301:       assertFalse(node1.isDebugger());
302:       assertFalse(node1.isTrue());
303:       assertFalse(node1.isFor());
304:       assertFalse(node1.isIf());
305:       assertFalse(node1.isDelProp());
306:       assertFalse(node1.isRegExp());
307:       assertFalse(node1.isCatch());
308:       assertFalse(node1.isArrayLit());
309:       assertEquals(494, node1.getCharno());
310:       assertEquals(0, node1.getChildCount());
311:       assertFalse(node1.isIn());
312:       assertFalse(node1.isNE());
313:       assertFalse(node1.isNull());
314:       assertFalse(node1.isEmpty());
315:       assertFalse(node1.isDefaultCase());
316:       assertFalse(node1.isSetterDef());
317:       assertFalse(node1.isInc());
318:       assertFalse(node1.isNew());
319:       assertFalse(node1.isSwitch());
320:       assertFalse(node1.isVar());
321:       assertFalse(node1.isHook());
322:       assertFalse(node1.isBlock());
323:       assertEquals(39, node1.getType());
324:       assertFalse(node1.isStringKey());
325:       assertFalse(node1.hasMoreThanOneChild());
326:       assertEquals(213486, node1.getSourcePosition());
327:       assertFalse(node1.isParamList());
328:       assertFalse(node1.isThis());
329:       assertFalse(node1.isCase());
330:       assertFalse(node1.isGetterDef());
331:       assertEquals(52, node1.getLineno());
332:       assertFalse(node1.isScript());
333:       assertFalse(node1.hasOneChild());
334:       assertFalse(node1.isAssign());
335:       assertFalse(node1.isLabelName());
336:       assertFalse(node1.isWith());
337:       assertFalse(node1.isDec());
338:       assertFalse(node1.isTypeOf());
339:       assertFalse(node1.isCast());
340:       assertFalse(node1.isInstanceOf());
341:       assertFalse(node1.isGetElem());
342:       assertFalse(node1.isExprResult());
343:       assertFalse(node1.isAssignAdd());
344:       assertFalse(node1.isOr());
345:       assertFalse(node1.isLabel());
346:       assertFalse(node1.isDo());
347:       assertFalse(node1.isAdd());
348:       assertFalse(node1.isThrow());
349:       assertFalse(node1.isContinue());
350:       assertFalse(node1.isFalse());
351:       assertFalse(node1.isName());
352:       assertFalse(node1.isBreak());
353:       assertFalse(node1.isCall());
354:       assertTrue(node1.isNumber());
355:       assertFalse(node1.isAnd());
356:       assertFalse(node1.isComma());
357:       assertFalse(node1.hasChildren());
358:       assertFalse(node1.isReturn());
359:       assertFalse(node1.isNot());
360:       assertFalse(node1.isString());
361:       assertFalse(node1.isWhile());
362:       assertFalse(node1.isObjectLit());
363:       assertFalse(node1.isGetProp());
364:       assertEquals(1, node2.getChildCount());
365:       assertTrue(node2.hasChildren());
366:       assertFalse(node2.isString());
367:       assertFalse(node2.isIn());
368:       assertTrue(node2.hasOneChild());
369:       assertFalse(node2.isInc());
370:       assertFalse(node2.isCase());
371:       assertFalse(node2.isFor());
372:       assertFalse(node2.isArrayLit());
373:       assertFalse(node2.isGetterDef());
374:       assertFalse(node2.isFalse());
375:       assertFalse(node2.isFunction());
376:       assertEquals((-1), node2.getCharno());
377:       assertFalse(node2.isDebugger());
378:       assertFalse(node2.isSwitch());
379:       assertFalse(node2.isNot());
380:       assertFalse(node2.isObjectLit());
381:       assertFalse(node2.isComma());
382:       assertFalse(node2.isGetProp());
383:       assertFalse(node2.isDefaultCase());
384:       assertFalse(node2.isCall());
385:       assertFalse(node2.isGetElem());
386:       assertFalse(node2.isAssign());
387:       assertFalse(node2.isAdd());
388:       assertFalse(node2.isEmpty());
389:       assertFalse(node2.isNull());
390:       assertFalse(node2.isBreak());
391:       assertFalse(node2.isTrue());
392:       assertFalse(node2.isExprResult());
393:       assertFalse(node2.isName());
394:       assertFalse(node2.isVoid());
395:       assertFalse(node2.isReturn());
396:       assertTrue(node2.isDelProp());
397:       assertFalse(node2.isOr());
398:       assertFalse(node2.isLabel());
399:       assertFalse(node2.isContinue());
400:       assertFalse(node2.hasMoreThanOneChild());
401:       assertFalse(node2.isTypeOf());
402:       assertFalse(node2.isDec());
403:       assertFalse(node2.isBlock());
404:       assertFalse(node2.isAssignAdd());
405:       assertFalse(node2.isDo());
406:       assertFalse(node2.isNew());
407:       assertFalse(node2.isWhile());
408:       assertFalse(node2.isVar());
409:       assertFalse(node2.isCast());
410:       assertFalse(node2.isNumber());
411:       assertFalse(node2.isParamList());
412:       assertEquals((-1), node2.getSourcePosition());
413:       assertFalse(node2.isLabelName());
414:       assertFalse(node2.isStringKey());
415:       assertFalse(node2.isAnd());
416:       assertFalse(node2.isInstanceOf());
417:       assertFalse(node2.isCatch());
418:       assertFalse(node2.isWith());
419:       assertFalse(node2.isScript());
420:       assertFalse(node2.isRegExp());
421:       assertFalse(node2.isThis());
422:       assertFalse(node2.isSetterDef());
423:       assertFalse(node2.isTry());
424:       assertFalse(node2.isThrow());
425:       assertFalse(node2.isHook());
426:       assertEquals(31, node2.getType());
427:       assertFalse(node2.isNE());
428:       assertEquals((-1), node2.getLineno());
429:       assertFalse(node2.isIf());
430:       assertNotNull(node2);
431:       assertFalse(node1.equals((Object)node0));
432:       assertFalse(node2.equals((Object)node0));
433:       assertFalse(node2.equals((Object)node1));
434:       assertEquals(4095, Node.COLUMN_MASK);
435:       assertEquals(55, Node.INFERRED_FUNCTION);
436:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
437:       assertEquals(48, Node.DIRECTIVES);
438:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
439:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
440:       assertEquals(40, Node.ORIGINALNAME_PROP);
441:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
442:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
443:       assertEquals(43, Node.IS_CONSTANT_NAME);
444:       assertEquals(54, Node.SLASH_V);
445:       assertEquals(51, Node.STATIC_SOURCE_FILE);
446:       assertEquals(50, Node.FREE_CALL);
447:       assertEquals(12, Node.COLUMN_BITS);
448:       assertEquals(46, Node.IS_NAMESPACE);
449:       assertEquals(57, Node.LAST_PROP);
450:       assertEquals(1, Node.DECR_FLAG);
451:       assertEquals(49, Node.DIRECT_EVAL);
452:       assertEquals(32, Node.INCRDECR_PROP);
453:       assertEquals(37, Node.OPT_ARG_NAME);
454:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
455:       assertEquals(47, Node.IS_DISPATCHER);
456:       assertEquals(2, Node.POST_FLAG);
457:       assertEquals(30, Node.VAR_ARGS_NAME);
458:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
459:       assertEquals(57, Node.REFLECTED_OBJECT);
460:       assertEquals(29, Node.JSDOC_INFO_PROP);
461:       assertEquals(8, Node.FLAG_NO_THROWS);
462:       assertEquals(39, Node.EMPTY_BLOCK);
463:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
464:       assertEquals(56, Node.CHANGE_TIME);
465:       assertEquals(15, Node.NO_SIDE_EFFECTS);
466:       assertEquals(53, Node.INPUT_ID);
467:       assertEquals(52, Node.LENGTH);
468:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
469:       assertEquals(36, Node.QUOTED_PROP);
470:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
471:       assertEquals(2, Node.POST_FLAG);
472:       assertEquals(56, Node.CHANGE_TIME);
473:       assertEquals(47, Node.IS_DISPATCHER);
474:       assertEquals(32, Node.INCRDECR_PROP);
475:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
476:       assertEquals(29, Node.JSDOC_INFO_PROP);
477:       assertEquals(53, Node.INPUT_ID);
478:       assertEquals(1, Node.DECR_FLAG);
479:       assertEquals(49, Node.DIRECT_EVAL);
480:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
481:       assertEquals(36, Node.QUOTED_PROP);
482:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
483:       assertEquals(12, Node.COLUMN_BITS);
484:       assertEquals(48, Node.DIRECTIVES);
485:       assertEquals(37, Node.OPT_ARG_NAME);
486:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
487:       assertEquals(4095, Node.COLUMN_MASK);
488:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
489:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
490:       assertEquals(50, Node.FREE_CALL);
491:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
492:       assertEquals(57, Node.REFLECTED_OBJECT);
493:       assertEquals(52, Node.LENGTH);
494:       assertEquals(55, Node.INFERRED_FUNCTION);
495:       assertEquals(8, Node.FLAG_NO_THROWS);
496:       assertEquals(39, Node.EMPTY_BLOCK);
497:       assertEquals(15, Node.NO_SIDE_EFFECTS);
498:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
499:       assertEquals(30, Node.VAR_ARGS_NAME);
500:       assertEquals(57, Node.LAST_PROP);
501:       assertEquals(43, Node.IS_CONSTANT_NAME);
502:       assertEquals(51, Node.STATIC_SOURCE_FILE);
503:       assertEquals(46, Node.IS_NAMESPACE);
504:       assertEquals(54, Node.SLASH_V);
505:       assertEquals(40, Node.ORIGINALNAME_PROP);
506:       
507:       Iterable<Node> iterable0 = node0.children();
508:       assertEquals(4095, node0.getCharno());
509:       assertFalse(node0.isSwitch());
510:       assertFalse(node0.isString());
511:       assertFalse(node0.isHook());
512:       assertFalse(node0.isIn());
513:       assertFalse(node0.isCase());
514:       assertFalse(node0.isInc());
515:       assertFalse(node0.isGetterDef());
516:       assertFalse(node0.isFalse());
517:       assertFalse(node0.isThrow());
518:       assertFalse(node0.isAnd());
519:       assertFalse(node0.isArrayLit());
520:       assertFalse(node0.isScript());
521:       assertFalse(node0.isRegExp());
522:       assertFalse(node0.isFunction());
523:       assertFalse(node0.isWith());
524:       assertEquals(1493, node0.getLineno());
525:       assertEquals(6119423, node0.getSourcePosition());
526:       assertFalse(node0.hasOneChild());
527:       assertFalse(node0.isTry());
528:       assertFalse(node0.isSetterDef());
529:       assertFalse(node0.isNE());
530:       assertFalse(node0.isIf());
531:       assertFalse(node0.isFor());
532:       assertFalse(node0.isThis());
533:       assertFalse(node0.isInstanceOf());
534:       assertFalse(node0.hasMoreThanOneChild());
535:       assertFalse(node0.isCatch());
536:       assertFalse(node0.isWhile());
537:       assertFalse(node0.isBlock());
538:       assertFalse(node0.isVar());
539:       assertFalse(node0.isAssignAdd());
540:       assertFalse(node0.isNew());
541:       assertFalse(node0.isAdd());
542:       assertFalse(node0.isDo());
543:       assertFalse(node0.isNumber());
544:       assertFalse(node0.isParamList());
545:       assertFalse(node0.isStringKey());
546:       assertFalse(node0.isLabel());
547:       assertFalse(node0.isCast());
548:       assertEquals(0, node0.getChildCount());
549:       assertFalse(node0.isContinue());
550:       assertFalse(node0.isLabelName());
551:       assertEquals(1, node0.getType());
552:       assertFalse(node0.isDefaultCase());
553:       assertFalse(node0.isNot());
554:       assertFalse(node0.isObjectLit());
555:       assertFalse(node0.isTrue());
556:       assertFalse(node0.isDebugger());
557:       assertFalse(node0.isEmpty());
558:       assertFalse(node0.isGetProp());
559:       assertFalse(node0.isDec());
560:       assertFalse(node0.isDelProp());
561:       assertFalse(node0.isTypeOf());
562:       assertFalse(node0.isNull());
563:       assertFalse(node0.isAssign());
564:       assertFalse(node0.isOr());
565:       assertFalse(node0.isComma());
566:       assertFalse(node0.isReturn());
567:       assertFalse(node0.hasChildren());
568:       assertFalse(node0.isGetElem());
569:       assertFalse(node0.isName());
570:       assertFalse(node0.isExprResult());
571:       assertFalse(node0.isVoid());
572:       assertFalse(node0.isCall());
573:       assertFalse(node0.isBreak());
574:       assertNotNull(iterable0);
575:       assertFalse(node0.equals((Object)node2));
576:       assertFalse(node0.equals((Object)node1));
577:       assertFalse(iterable0.contains(node0));
578:       assertEquals(37, Node.OPT_ARG_NAME);
579:       assertEquals(46, Node.IS_NAMESPACE);
580:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
581:       assertEquals(12, Node.COLUMN_BITS);
582:       assertEquals(56, Node.CHANGE_TIME);
583:       assertEquals(32, Node.INCRDECR_PROP);
584:       assertEquals(29, Node.JSDOC_INFO_PROP);
585:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
586:       assertEquals(1, Node.DECR_FLAG);
587:       assertEquals(15, Node.NO_SIDE_EFFECTS);
588:       assertEquals(51, Node.STATIC_SOURCE_FILE);
589:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
590:       assertEquals(57, Node.REFLECTED_OBJECT);
591:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
592:       assertEquals(49, Node.DIRECT_EVAL);
593:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
594:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
595:       assertEquals(4095, Node.COLUMN_MASK);
596:       assertEquals(48, Node.DIRECTIVES);
597:       assertEquals(39, Node.EMPTY_BLOCK);
598:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
599:       assertEquals(50, Node.FREE_CALL);
600:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
601:       assertEquals(36, Node.QUOTED_PROP);
602:       assertEquals(55, Node.INFERRED_FUNCTION);
603:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
604:       assertEquals(52, Node.LENGTH);
605:       assertEquals(8, Node.FLAG_NO_THROWS);
606:       assertEquals(53, Node.INPUT_ID);
607:       assertEquals(54, Node.SLASH_V);
608:       assertEquals(43, Node.IS_CONSTANT_NAME);
609:       assertEquals(57, Node.LAST_PROP);
610:       assertEquals(30, Node.VAR_ARGS_NAME);
611:       assertEquals(40, Node.ORIGINALNAME_PROP);
612:       assertEquals(47, Node.IS_DISPATCHER);
613:       assertEquals(2, Node.POST_FLAG);
614:       
615:       boolean boolean1 = node0.isAnd();
616:       assertEquals(4095, node0.getCharno());
617:       assertFalse(node0.isSwitch());
618:       assertFalse(node0.isString());
619:       assertFalse(node0.isHook());
620:       assertFalse(node0.isIn());
621:       assertFalse(node0.isCase());
622:       assertFalse(node0.isInc());
623:       assertFalse(node0.isGetterDef());
624:       assertFalse(node0.isFalse());
625:       assertFalse(node0.isThrow());
626:       assertFalse(node0.isAnd());
627:       assertFalse(node0.isArrayLit());
628:       assertFalse(node0.isScript());
629:       assertFalse(node0.isRegExp());
630:       assertFalse(node0.isFunction());
631:       assertFalse(node0.isWith());
632:       assertEquals(1493, node0.getLineno());
633:       assertEquals(6119423, node0.getSourcePosition());
634:       assertFalse(node0.hasOneChild());
635:       assertFalse(node0.isTry());
636:       assertFalse(node0.isSetterDef());
637:       assertFalse(node0.isNE());
638:       assertFalse(node0.isIf());
639:       assertFalse(node0.isFor());
640:       assertFalse(node0.isThis());
641:       assertFalse(node0.isInstanceOf());
642:       assertFalse(node0.hasMoreThanOneChild());
643:       assertFalse(node0.isCatch());
644:       assertFalse(node0.isWhile());
645:       assertFalse(node0.isBlock());
646:       assertFalse(node0.isVar());
647:       assertFalse(node0.isAssignAdd());
648:       assertFalse(node0.isNew());
649:       assertFalse(node0.isAdd());
650:       assertFalse(node0.isDo());
651:       assertFalse(node0.isNumber());
652:       assertFalse(node0.isParamList());
653:       assertFalse(node0.isStringKey());
654:       assertFalse(node0.isLabel());
655:       assertFalse(node0.isCast());
656:       assertEquals(0, node0.getChildCount());
657:       assertFalse(node0.isContinue());
658:       assertFalse(node0.isLabelName());
659:       assertEquals(1, node0.getType());
660:       assertFalse(node0.isDefaultCase());
661:       assertFalse(node0.isNot());
662:       assertFalse(node0.isObjectLit());
663:       assertFalse(node0.isTrue());
664:       assertFalse(node0.isDebugger());
665:       assertFalse(node0.isEmpty());
666:       assertFalse(node0.isGetProp());
667:       assertFalse(node0.isDec());
668:       assertFalse(node0.isDelProp());
669:       assertFalse(node0.isTypeOf());
670:       assertFalse(node0.isNull());
671:       assertFalse(node0.isAssign());
672:       assertFalse(node0.isOr());
673:       assertFalse(node0.isComma());
674:       assertFalse(node0.isReturn());
675:       assertFalse(node0.hasChildren());
676:       assertFalse(node0.isGetElem());
677:       assertFalse(node0.isName());
678:       assertFalse(node0.isExprResult());
679:       assertFalse(node0.isVoid());
680:       assertFalse(node0.isCall());
681:       assertFalse(node0.isBreak());
682:       assertFalse(node0.equals((Object)node2));
683:       assertFalse(node0.equals((Object)node1));
684:       assertTrue(boolean1 == boolean0);
685:       assertFalse(boolean1);
686:       assertEquals(37, Node.OPT_ARG_NAME);
687:       assertEquals(46, Node.IS_NAMESPACE);
688:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
689:       assertEquals(12, Node.COLUMN_BITS);
690:       assertEquals(56, Node.CHANGE_TIME);
691:       assertEquals(32, Node.INCRDECR_PROP);
692:       assertEquals(29, Node.JSDOC_INFO_PROP);
693:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
694:       assertEquals(1, Node.DECR_FLAG);
695:       assertEquals(15, Node.NO_SIDE_EFFECTS);
696:       assertEquals(51, Node.STATIC_SOURCE_FILE);
697:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
698:       assertEquals(57, Node.REFLECTED_OBJECT);
699:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
700:       assertEquals(49, Node.DIRECT_EVAL);
701:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
702:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
703:       assertEquals(4095, Node.COLUMN_MASK);
704:       assertEquals(48, Node.DIRECTIVES);
705:       assertEquals(39, Node.EMPTY_BLOCK);
706:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
707:       assertEquals(50, Node.FREE_CALL);
708:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
709:       assertEquals(36, Node.QUOTED_PROP);
710:       assertEquals(55, Node.INFERRED_FUNCTION);
711:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
712:       assertEquals(52, Node.LENGTH);
713:       assertEquals(8, Node.FLAG_NO_THROWS);
714:       assertEquals(53, Node.INPUT_ID);
715:       assertEquals(54, Node.SLASH_V);
716:       assertEquals(43, Node.IS_CONSTANT_NAME);
717:       assertEquals(57, Node.LAST_PROP);
718:       assertEquals(30, Node.VAR_ARGS_NAME);
719:       assertEquals(40, Node.ORIGINALNAME_PROP);
720:       assertEquals(47, Node.IS_DISPATCHER);
721:       assertEquals(2, Node.POST_FLAG);
722:       
723:       jSDocInfo0.setLendsName("com.google.javascript.rhino.Node$AncestorIterable");
724:       assertFalse(jSDocInfo0.isNoSideEffects());
725:       assertFalse(jSDocInfo0.isJavaDispatch());
726:       assertEquals("com.google.javascript.rhino.Node$AncestorIterable", jSDocInfo0.getLendsName());
727:       assertFalse(jSDocInfo0.isMappedIdGenerator());
728:       assertFalse(jSDocInfo0.hasType());
729:       assertNull(jSDocInfo0.getOriginalCommentString());
730:       assertFalse(jSDocInfo0.makesDicts());
731:       assertFalse(jSDocInfo0.isDisposes());
732:       assertFalse(jSDocInfo0.isNoCompile());
733:       assertFalse(jSDocInfo0.isDeprecated());
734:       assertFalse(jSDocInfo0.isExterns());
735:       assertFalse(jSDocInfo0.isIdGenerator());
736:       assertNull(jSDocInfo0.getBlockDescription());
737:       assertFalse(jSDocInfo0.isInterface());
738:       assertFalse(jSDocInfo0.isHidden());
739:       assertNull(jSDocInfo0.getDeprecationReason());
740:       assertFalse(jSDocInfo0.isWizaction());
741:       assertFalse(jSDocInfo0.hasFileOverview());
742:       assertNull(jSDocInfo0.getReturnDescription());
743:       assertFalse(jSDocInfo0.isOverride());
744:       assertFalse(jSDocInfo0.hasBaseType());
745:       assertNull(jSDocInfo0.getVersion());
746:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
747:       assertNull(jSDocInfo0.getLicense());
748:       assertFalse(jSDocInfo0.isImplicitCast());
749:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
750:       assertFalse(jSDocInfo0.isJaggerProvide());
751:       assertFalse(jSDocInfo0.isExport());
752:       assertFalse(jSDocInfo0.isJaggerModule());
753:       assertFalse(jSDocInfo0.isStableIdGenerator());
754:       assertFalse(jSDocInfo0.isConstant());
755:       assertFalse(jSDocInfo0.isNoTypeCheck());
756:       assertFalse(jSDocInfo0.isJaggerInject());
757:       assertNull(jSDocInfo0.getDescription());
758:       assertFalse(jSDocInfo0.hasModifies());
759:       assertFalse(jSDocInfo0.hasThisType());
760:       assertFalse(jSDocInfo0.hasEnumParameterType());
761:       assertFalse(jSDocInfo0.containsDeclaration());
762:       assertFalse(jSDocInfo0.hasTypedefType());
763:       assertNull(jSDocInfo0.getVisibility());
764:       assertNull(jSDocInfo0.getFileOverview());
765:       assertFalse(jSDocInfo0.isConstructor());
766:       assertFalse(jSDocInfo0.makesStructs());
767:       assertFalse(jSDocInfo0.isExpose());
768:       assertEquals("JSDocInfo", jSDocInfo0.toString());
769:       assertFalse(jSDocInfo0.shouldPreserveTry());
770:       assertFalse(jSDocInfo0.isNoShadow());
771:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
772:       assertEquals(0, jSDocInfo0.getParameterCount());
773:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
774:       assertFalse(jSDocInfo0.isDefine());
775:       assertFalse(jSDocInfo0.isNgInject());
776:       assertNull(jSDocInfo0.getMeaning());
777:       assertFalse(jSDocInfo0.isNoAlias());
778:       assertFalse(jSDocInfo0.hasReturnType());
779:       
780:       node1.addSuppression("gs1IcjVs7cZy}^~");
781:       assertFalse(node1.isTry());
782:       assertFalse(node1.isVoid());
783:       assertFalse(node1.isFunction());
784:       assertFalse(node1.isDebugger());
785:       assertFalse(node1.isTrue());
786:       assertFalse(node1.isFor());
787:       assertFalse(node1.isIf());
788:       assertFalse(node1.isDelProp());
789:       assertFalse(node1.isRegExp());
790:       assertFalse(node1.isCatch());
791:       assertFalse(node1.isArrayLit());
792:       assertEquals(494, node1.getCharno());
793:       assertEquals(0, node1.getChildCount());
794:       assertFalse(node1.isIn());
795:       assertFalse(node1.isNE());
796:       assertFalse(node1.isNull());
797:       assertFalse(node1.isEmpty());
798:       assertFalse(node1.isDefaultCase());
799:       assertFalse(node1.isSetterDef());
800:       assertFalse(node1.isInc());
801:       assertFalse(node1.isNew());
802:       assertFalse(node1.isSwitch());
803:       assertFalse(node1.isVar());
804:       assertFalse(node1.isHook());
805:       assertFalse(node1.isBlock());
806:       assertEquals(39, node1.getType());
807:       assertFalse(node1.isStringKey());
808:       assertFalse(node1.hasMoreThanOneChild());
809:       assertEquals(213486, node1.getSourcePosition());
810:       assertFalse(node1.isParamList());
811:       assertFalse(node1.isThis());
812:       assertFalse(node1.isCase());
813:       assertFalse(node1.isGetterDef());
814:       assertEquals(52, node1.getLineno());
815:       assertFalse(node1.isScript());
816:       assertFalse(node1.hasOneChild());
817:       assertFalse(node1.isAssign());
818:       assertFalse(node1.isLabelName());
819:       assertFalse(node1.isWith());
820:       assertFalse(node1.isDec());
821:       assertFalse(node1.isTypeOf());
822:       assertFalse(node1.isCast());
823:       assertFalse(node1.isInstanceOf());
824:       assertFalse(node1.isGetElem());
825:       assertFalse(node1.isExprResult());
826:       assertFalse(node1.isAssignAdd());
827:       assertFalse(node1.isOr());
828:       assertFalse(node1.isLabel());
829:       assertFalse(node1.isDo());
830:       assertFalse(node1.isAdd());
831:       assertFalse(node1.isThrow());
832:       assertFalse(node1.isContinue());
833:       assertFalse(node1.isFalse());
834:       assertFalse(node1.isName());
835:       assertFalse(node1.isBreak());
836:       assertFalse(node1.isCall());
837:       assertTrue(node1.isNumber());
838:       assertFalse(node1.isAnd());
839:       assertFalse(node1.isComma());
840:       assertFalse(node1.hasChildren());
841:       assertFalse(node1.isReturn());
842:       assertFalse(node1.isNot());
843:       assertFalse(node1.isString());
844:       assertFalse(node1.isWhile());
845:       assertFalse(node1.isObjectLit());
846:       assertFalse(node1.isGetProp());
847:       assertFalse(node1.equals((Object)node2));
848:       assertFalse(node1.equals((Object)node0));
849:       assertEquals(4095, Node.COLUMN_MASK);
850:       assertEquals(55, Node.INFERRED_FUNCTION);
851:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
852:       assertEquals(48, Node.DIRECTIVES);
853:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
854:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
855:       assertEquals(40, Node.ORIGINALNAME_PROP);
856:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
857:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
858:       assertEquals(43, Node.IS_CONSTANT_NAME);
859:       assertEquals(54, Node.SLASH_V);
860:       assertEquals(51, Node.STATIC_SOURCE_FILE);
861:       assertEquals(50, Node.FREE_CALL);
862:       assertEquals(12, Node.COLUMN_BITS);
863:       assertEquals(46, Node.IS_NAMESPACE);
864:       assertEquals(57, Node.LAST_PROP);
865:       assertEquals(1, Node.DECR_FLAG);
866:       assertEquals(49, Node.DIRECT_EVAL);
867:       assertEquals(32, Node.INCRDECR_PROP);
868:       assertEquals(37, Node.OPT_ARG_NAME);
869:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
870:       assertEquals(47, Node.IS_DISPATCHER);
871:       assertEquals(2, Node.POST_FLAG);
872:       assertEquals(30, Node.VAR_ARGS_NAME);
873:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
874:       assertEquals(57, Node.REFLECTED_OBJECT);
875:       assertEquals(29, Node.JSDOC_INFO_PROP);
876:       assertEquals(8, Node.FLAG_NO_THROWS);
877:       assertEquals(39, Node.EMPTY_BLOCK);
878:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
879:       assertEquals(56, Node.CHANGE_TIME);
880:       assertEquals(15, Node.NO_SIDE_EFFECTS);
881:       assertEquals(53, Node.INPUT_ID);
882:       assertEquals(52, Node.LENGTH);
883:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
884:       assertEquals(36, Node.QUOTED_PROP);
885:       
886:       boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
887:       assertTrue(boolean2 == boolean0);
888:       assertTrue(boolean2 == boolean1);
889:       assertFalse(boolean2);
890:       
891:       boolean boolean3 = node0.isArrayLit();
892:       assertEquals(4095, node0.getCharno());
893:       assertFalse(node0.isSwitch());
894:       assertFalse(node0.isString());
895:       assertFalse(node0.isHook());
896:       assertFalse(node0.isIn());
897:       assertFalse(node0.isCase());
898:       assertFalse(node0.isInc());
899:       assertFalse(node0.isGetterDef());
900:       assertFalse(node0.isFalse());
901:       assertFalse(node0.isThrow());
902:       assertFalse(node0.isAnd());
903:       assertFalse(node0.isArrayLit());
904:       assertFalse(node0.isScript());
905:       assertFalse(node0.isRegExp());
906:       assertFalse(node0.isFunction());
907:       assertFalse(node0.isWith());
908:       assertEquals(1493, node0.getLineno());
909:       assertEquals(6119423, node0.getSourcePosition());
910:       assertFalse(node0.hasOneChild());
911:       assertFalse(node0.isTry());
912:       assertFalse(node0.isSetterDef());
913:       assertFalse(node0.isNE());
914:       assertFalse(node0.isIf());
915:       assertFalse(node0.isFor());
916:       assertFalse(node0.isThis());
917:       assertFalse(node0.isInstanceOf());
918:       assertFalse(node0.hasMoreThanOneChild());
919:       assertFalse(node0.isCatch());
920:       assertFalse(node0.isWhile());
921:       assertFalse(node0.isBlock());
922:       assertFalse(node0.isVar());
923:       assertFalse(node0.isAssignAdd());
924:       assertFalse(node0.isNew());
925:       assertFalse(node0.isAdd());
926:       assertFalse(node0.isDo());
927:       assertFalse(node0.isNumber());
928:       assertFalse(node0.isParamList());
929:       assertFalse(node0.isStringKey());
930:       assertFalse(node0.isLabel());
931:       assertFalse(node0.isCast());
932:       assertEquals(0, node0.getChildCount());
933:       assertFalse(node0.isContinue());
934:       assertFalse(node0.isLabelName());
935:       assertEquals(1, node0.getType());
936:       assertFalse(node0.isDefaultCase());
937:       assertFalse(node0.isNot());
938:       assertFalse(node0.isObjectLit());
939:       assertFalse(node0.isTrue());
940:       assertFalse(node0.isDebugger());
941:       assertFalse(node0.isEmpty());
942:       assertFalse(node0.isGetProp());
943:       assertFalse(node0.isDec());
944:       assertFalse(node0.isDelProp());
945:       assertFalse(node0.isTypeOf());
946:       assertFalse(node0.isNull());
947:       assertFalse(node0.isAssign());
948:       assertFalse(node0.isOr());
949:       assertFalse(node0.isComma());
950:       assertFalse(node0.isReturn());
951:       assertFalse(node0.hasChildren());
952:       assertFalse(node0.isGetElem());
953:       assertFalse(node0.isName());
954:       assertFalse(node0.isExprResult());
955:       assertFalse(node0.isVoid());
956:       assertFalse(node0.isCall());
957:       assertFalse(node0.isBreak());
958:       assertFalse(node0.equals((Object)node2));
959:       assertFalse(node0.equals((Object)node1));
960:       assertTrue(boolean3 == boolean1);
961:       assertTrue(boolean3 == boolean0);
962:       assertTrue(boolean3 == boolean2);
963:       assertFalse(boolean3);
964:       assertEquals(37, Node.OPT_ARG_NAME);
965:       assertEquals(46, Node.IS_NAMESPACE);
966:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
967:       assertEquals(12, Node.COLUMN_BITS);
968:       assertEquals(56, Node.CHANGE_TIME);
969:       assertEquals(32, Node.INCRDECR_PROP);
970:       assertEquals(29, Node.JSDOC_INFO_PROP);
971:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
972:       assertEquals(1, Node.DECR_FLAG);
973:       assertEquals(15, Node.NO_SIDE_EFFECTS);
974:       assertEquals(51, Node.STATIC_SOURCE_FILE);
975:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
976:       assertEquals(57, Node.REFLECTED_OBJECT);
977:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
978:       assertEquals(49, Node.DIRECT_EVAL);
979:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
980:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
981:       assertEquals(4095, Node.COLUMN_MASK);
982:       assertEquals(48, Node.DIRECTIVES);
983:       assertEquals(39, Node.EMPTY_BLOCK);
984:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
985:       assertEquals(50, Node.FREE_CALL);
986:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
987:       assertEquals(36, Node.QUOTED_PROP);
988:       assertEquals(55, Node.INFERRED_FUNCTION);
989:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
990:       assertEquals(52, Node.LENGTH);
991:       assertEquals(8, Node.FLAG_NO_THROWS);
992:       assertEquals(53, Node.INPUT_ID);
993:       assertEquals(54, Node.SLASH_V);
994:       assertEquals(43, Node.IS_CONSTANT_NAME);
995:       assertEquals(57, Node.LAST_PROP);
996:       assertEquals(30, Node.VAR_ARGS_NAME);
997:       assertEquals(40, Node.ORIGINALNAME_PROP);
998:       assertEquals(47, Node.IS_DISPATCHER);
999:       assertEquals(2, Node.POST_FLAG);
1000:       
1001:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node2);
1002:       assertFalse(node1.isTry());
1003:       assertFalse(node1.isVoid());
1004:       assertFalse(node1.isFunction());
1005:       assertFalse(node1.isDebugger());
1006:       assertFalse(node1.isTrue());
1007:       assertFalse(node1.isFor());
1008:       assertFalse(node1.isIf());
1009:       assertFalse(node1.isDelProp());
1010:       assertFalse(node1.isRegExp());
1011:       assertFalse(node1.isCatch());
1012:       assertFalse(node1.isArrayLit());
1013:       assertEquals(494, node1.getCharno());
1014:       assertEquals(0, node1.getChildCount());
1015:       assertFalse(node1.isIn());
1016:       assertFalse(node1.isNE());
1017:       assertFalse(node1.isNull());
1018:       assertFalse(node1.isEmpty());
1019:       assertFalse(node1.isDefaultCase());
1020:       assertFalse(node1.isSetterDef());
1021:       assertFalse(node1.isInc());
1022:       assertFalse(node1.isNew());
1023:       assertFalse(node1.isSwitch());
1024:       assertFalse(node1.isVar());
1025:       assertFalse(node1.isHook());
1026:       assertFalse(node1.isBlock());
1027:       assertEquals(39, node1.getType());
1028:       assertFalse(node1.isStringKey());
1029:       assertFalse(node1.hasMoreThanOneChild());
1030:       assertEquals(213486, node1.getSourcePosition());
1031:       assertFalse(node1.isParamList());
1032:       assertFalse(node1.isThis());
1033:       assertFalse(node1.isCase());
1034:       assertFalse(node1.isGetterDef());
1035:       assertEquals(52, node1.getLineno());
1036:       assertFalse(node1.isScript());
1037:       assertFalse(node1.hasOneChild());
1038:       assertFalse(node1.isAssign());
1039:       assertFalse(node1.isLabelName());
1040:       assertFalse(node1.isWith());
1041:       assertFalse(node1.isDec());
1042:       assertFalse(node1.isTypeOf());
1043:       assertFalse(node1.isCast());
1044:       assertFalse(node1.isInstanceOf());
1045:       assertFalse(node1.isGetElem());
1046:       assertFalse(node1.isExprResult());
1047:       assertFalse(node1.isAssignAdd());
1048:       assertFalse(node1.isOr());
1049:       assertFalse(node1.isLabel());
1050:       assertFalse(node1.isDo());
1051:       assertFalse(node1.isAdd());
1052:       assertFalse(node1.isThrow());
1053:       assertFalse(node1.isContinue());
1054:       assertFalse(node1.isFalse());
1055:       assertFalse(node1.isName());
1056:       assertFalse(node1.isBreak());
1057:       assertFalse(node1.isCall());
1058:       assertTrue(node1.isNumber());
1059:       assertFalse(node1.isAnd());
1060:       assertFalse(node1.isComma());
1061:       assertFalse(node1.hasChildren());
1062:       assertFalse(node1.isReturn());
1063:       assertFalse(node1.isNot());
1064:       assertFalse(node1.isString());
1065:       assertFalse(node1.isWhile());
1066:       assertFalse(node1.isObjectLit());
1067:       assertFalse(node1.isGetProp());
1068:       assertEquals(1, node2.getChildCount());
1069:       assertTrue(node2.hasChildren());
1070:       assertFalse(node2.isString());
1071:       assertFalse(node2.isIn());
1072:       assertTrue(node2.hasOneChild());
1073:       assertFalse(node2.isInc());
1074:       assertFalse(node2.isCase());
1075:       assertFalse(node2.isFor());
1076:       assertFalse(node2.isArrayLit());
1077:       assertFalse(node2.isGetterDef());
1078:       assertFalse(node2.isFalse());
1079:       assertFalse(node2.isFunction());
1080:       assertEquals((-1), node2.getCharno());
1081:       assertFalse(node2.isDebugger());
1082:       assertFalse(node2.isSwitch());
1083:       assertFalse(node2.isNot());
1084:       assertFalse(node2.isObjectLit());
1085:       assertFalse(node2.isComma());
1086:       assertFalse(node2.isGetProp());
1087:       assertFalse(node2.isDefaultCase());
1088:       assertFalse(node2.isCall());
1089:       assertFalse(node2.isGetElem());
1090:       assertFalse(node2.isAssign());
1091:       assertFalse(node2.isAdd());
1092:       assertFalse(node2.isEmpty());
1093:       assertFalse(node2.isNull());
1094:       assertFalse(node2.isBreak());
1095:       assertFalse(node2.isTrue());
1096:       assertFalse(node2.isExprResult());
1097:       assertFalse(node2.isName());
1098:       assertFalse(node2.isVoid());
1099:       assertFalse(node2.isReturn());
1100:       assertTrue(node2.isDelProp());
1101:       assertFalse(node2.isOr());
1102:       assertFalse(node2.isLabel());
1103:       assertFalse(node2.isContinue());
1104:       assertFalse(node2.hasMoreThanOneChild());
1105:       assertFalse(node2.isTypeOf());
1106:       assertFalse(node2.isDec());
1107:       assertFalse(node2.isBlock());
1108:       assertFalse(node2.isAssignAdd());
1109:       assertFalse(node2.isDo());
1110:       assertFalse(node2.isNew());
1111:       assertFalse(node2.isWhile());
1112:       assertFalse(node2.isVar());
1113:       assertFalse(node2.isCast());
1114:       assertFalse(node2.isNumber());
1115:       assertFalse(node2.isParamList());
1116:       assertEquals((-1), node2.getSourcePosition());
1117:       assertFalse(node2.isLabelName());
1118:       assertFalse(node2.isStringKey());
1119:       assertFalse(node2.isAnd());
1120:       assertFalse(node2.isInstanceOf());
1121:       assertFalse(node2.isCatch());
1122:       assertFalse(node2.isWith());
1123:       assertFalse(node2.isScript());
1124:       assertFalse(node2.isRegExp());
1125:       assertFalse(node2.isThis());
1126:       assertFalse(node2.isSetterDef());
1127:       assertFalse(node2.isTry());
1128:       assertFalse(node2.isThrow());
1129:       assertFalse(node2.isHook());
1130:       assertEquals(31, node2.getType());
1131:       assertFalse(node2.isNE());
1132:       assertEquals((-1), node2.getLineno());
1133:       assertFalse(node2.isIf());
1134:       assertNotNull(node_NodeMismatch0);
1135:       assertFalse(node1.equals((Object)node2));
1136:       assertFalse(node1.equals((Object)node0));
1137:       assertFalse(node2.equals((Object)node0));
1138:       assertFalse(node2.equals((Object)node1));
1139:       assertEquals(4095, Node.COLUMN_MASK);
1140:       assertEquals(55, Node.INFERRED_FUNCTION);
1141:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1142:       assertEquals(48, Node.DIRECTIVES);
1143:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1145:       assertEquals(40, Node.ORIGINALNAME_PROP);
1146:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1147:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1148:       assertEquals(43, Node.IS_CONSTANT_NAME);
1149:       assertEquals(54, Node.SLASH_V);
1150:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1151:       assertEquals(50, Node.FREE_CALL);
1152:       assertEquals(12, Node.COLUMN_BITS);
1153:       assertEquals(46, Node.IS_NAMESPACE);
1154:       assertEquals(57, Node.LAST_PROP);
1155:       assertEquals(1, Node.DECR_FLAG);
1156:       assertEquals(49, Node.DIRECT_EVAL);
1157:       assertEquals(32, Node.INCRDECR_PROP);
1158:       assertEquals(37, Node.OPT_ARG_NAME);
1159:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1160:       assertEquals(47, Node.IS_DISPATCHER);
1161:       assertEquals(2, Node.POST_FLAG);
1162:       assertEquals(30, Node.VAR_ARGS_NAME);
1163:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1164:       assertEquals(57, Node.REFLECTED_OBJECT);
1165:       assertEquals(29, Node.JSDOC_INFO_PROP);
1166:       assertEquals(8, Node.FLAG_NO_THROWS);
1167:       assertEquals(39, Node.EMPTY_BLOCK);
1168:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1169:       assertEquals(56, Node.CHANGE_TIME);
1170:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1171:       assertEquals(53, Node.INPUT_ID);
1172:       assertEquals(52, Node.LENGTH);
1173:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1174:       assertEquals(36, Node.QUOTED_PROP);
1175:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1176:       assertEquals(2, Node.POST_FLAG);
1177:       assertEquals(56, Node.CHANGE_TIME);
1178:       assertEquals(47, Node.IS_DISPATCHER);
1179:       assertEquals(32, Node.INCRDECR_PROP);
1180:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1181:       assertEquals(29, Node.JSDOC_INFO_PROP);
1182:       assertEquals(53, Node.INPUT_ID);
1183:       assertEquals(1, Node.DECR_FLAG);
1184:       assertEquals(49, Node.DIRECT_EVAL);
1185:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1186:       assertEquals(36, Node.QUOTED_PROP);
1187:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1188:       assertEquals(12, Node.COLUMN_BITS);
1189:       assertEquals(48, Node.DIRECTIVES);
1190:       assertEquals(37, Node.OPT_ARG_NAME);
1191:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1192:       assertEquals(4095, Node.COLUMN_MASK);
1193:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1194:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1195:       assertEquals(50, Node.FREE_CALL);
1196:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1197:       assertEquals(57, Node.REFLECTED_OBJECT);
1198:       assertEquals(52, Node.LENGTH);
1199:       assertEquals(55, Node.INFERRED_FUNCTION);
1200:       assertEquals(8, Node.FLAG_NO_THROWS);
1201:       assertEquals(39, Node.EMPTY_BLOCK);
1202:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1203:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1204:       assertEquals(30, Node.VAR_ARGS_NAME);
1205:       assertEquals(57, Node.LAST_PROP);
1206:       assertEquals(43, Node.IS_CONSTANT_NAME);
1207:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1208:       assertEquals(46, Node.IS_NAMESPACE);
1209:       assertEquals(54, Node.SLASH_V);
1210:       assertEquals(40, Node.ORIGINALNAME_PROP);
1211:       
1212:       boolean boolean4 = node0.isQualifiedName();
1213:       assertEquals(4095, node0.getCharno());
1214:       assertFalse(node0.isSwitch());
1215:       assertFalse(node0.isString());
1216:       assertFalse(node0.isHook());
1217:       assertFalse(node0.isIn());
1218:       assertFalse(node0.isCase());
1219:       assertFalse(node0.isInc());
1220:       assertFalse(node0.isGetterDef());
1221:       assertFalse(node0.isFalse());
1222:       assertFalse(node0.isThrow());
1223:       assertFalse(node0.isAnd());
1224:       assertFalse(node0.isArrayLit());
1225:       assertFalse(node0.isScript());
1226:       assertFalse(node0.isRegExp());
1227:       assertFalse(node0.isFunction());
1228:       assertFalse(node0.isWith());
1229:       assertEquals(1493, node0.getLineno());
1230:       assertEquals(6119423, node0.getSourcePosition());
1231:       assertFalse(node0.hasOneChild());
1232:       assertFalse(node0.isTry());
1233:       assertFalse(node0.isSetterDef());
1234:       assertFalse(node0.isNE());
1235:       assertFalse(node0.isIf());
1236:       assertFalse(node0.isFor());
1237:       assertFalse(node0.isThis());
1238:       assertFalse(node0.isInstanceOf());
1239:       assertFalse(node0.hasMoreThanOneChild());
1240:       assertFalse(node0.isCatch());
1241:       assertFalse(node0.isWhile());
1242:       assertFalse(node0.isBlock());
1243:       assertFalse(node0.isVar());
1244:       assertFalse(node0.isAssignAdd());
1245:       assertFalse(node0.isNew());
1246:       assertFalse(node0.isAdd());
1247:       assertFalse(node0.isDo());
1248:       assertFalse(node0.isNumber());
1249:       assertFalse(node0.isParamList());
1250:       assertFalse(node0.isStringKey());
1251:       assertFalse(node0.isLabel());
1252:       assertFalse(node0.isCast());
1253:       assertEquals(0, node0.getChildCount());
1254:       assertFalse(node0.isContinue());
1255:       assertFalse(node0.isLabelName());
1256:       assertEquals(1, node0.getType());
1257:       assertFalse(node0.isDefaultCase());
1258:       assertFalse(node0.isNot());
1259:       assertFalse(node0.isObjectLit());
1260:       assertFalse(node0.isTrue());
1261:       assertFalse(node0.isDebugger());
1262:       assertFalse(node0.isEmpty());
1263:       assertFalse(node0.isGetProp());
1264:       assertFalse(node0.isDec());
1265:       assertFalse(node0.isDelProp());
1266:       assertFalse(node0.isTypeOf());
1267:       assertFalse(node0.isNull());
1268:       assertFalse(node0.isAssign());
1269:       assertFalse(node0.isOr());
1270:       assertFalse(node0.isComma());
1271:       assertFalse(node0.isReturn());
1272:       assertFalse(node0.hasChildren());
1273:       assertFalse(node0.isGetElem());
1274:       assertFalse(node0.isName());
1275:       assertFalse(node0.isExprResult());
1276:       assertFalse(node0.isVoid());
1277:       assertFalse(node0.isCall());
1278:       assertFalse(node0.isBreak());
1279:       assertFalse(node0.equals((Object)node2));
1280:       assertFalse(node0.equals((Object)node1));
1281:       assertTrue(boolean4 == boolean0);
1282:       assertTrue(boolean4 == boolean3);
1283:       assertTrue(boolean4 == boolean1);
1284:       assertTrue(boolean4 == boolean2);
1285:       assertFalse(boolean4);
1286:       assertEquals(37, Node.OPT_ARG_NAME);
1287:       assertEquals(46, Node.IS_NAMESPACE);
1288:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1289:       assertEquals(12, Node.COLUMN_BITS);
1290:       assertEquals(56, Node.CHANGE_TIME);
1291:       assertEquals(32, Node.INCRDECR_PROP);
1292:       assertEquals(29, Node.JSDOC_INFO_PROP);
1293:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1294:       assertEquals(1, Node.DECR_FLAG);
1295:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1296:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1297:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1298:       assertEquals(57, Node.REFLECTED_OBJECT);
1299:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1300:       assertEquals(49, Node.DIRECT_EVAL);
1301:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1302:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1303:       assertEquals(4095, Node.COLUMN_MASK);
1304:       assertEquals(48, Node.DIRECTIVES);
1305:       assertEquals(39, Node.EMPTY_BLOCK);
1306:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1307:       assertEquals(50, Node.FREE_CALL);
1308:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1309:       assertEquals(36, Node.QUOTED_PROP);
1310:       assertEquals(55, Node.INFERRED_FUNCTION);
1311:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1312:       assertEquals(52, Node.LENGTH);
1313:       assertEquals(8, Node.FLAG_NO_THROWS);
1314:       assertEquals(53, Node.INPUT_ID);
1315:       assertEquals(54, Node.SLASH_V);
1316:       assertEquals(43, Node.IS_CONSTANT_NAME);
1317:       assertEquals(57, Node.LAST_PROP);
1318:       assertEquals(30, Node.VAR_ARGS_NAME);
1319:       assertEquals(40, Node.ORIGINALNAME_PROP);
1320:       assertEquals(47, Node.IS_DISPATCHER);
1321:       assertEquals(2, Node.POST_FLAG);
1322:       
1323:       int int0 = node1.getChangeTime();
1324:       assertFalse(node1.isTry());
1325:       assertFalse(node1.isVoid());
1326:       assertFalse(node1.isFunction());
1327:       assertFalse(node1.isDebugger());
1328:       assertFalse(node1.isTrue());
1329:       assertFalse(node1.isFor());
1330:       assertFalse(node1.isIf());
1331:       assertFalse(node1.isDelProp());
1332:       assertFalse(node1.isRegExp());
1333:       assertFalse(node1.isCatch());
1334:       assertFalse(node1.isArrayLit());
1335:       assertEquals(494, node1.getCharno());
1336:       assertEquals(0, node1.getChildCount());
1337:       assertFalse(node1.isIn());
1338:       assertFalse(node1.isNE());
1339:       assertFalse(node1.isNull());
1340:       assertFalse(node1.isEmpty());
1341:       assertFalse(node1.isDefaultCase());
1342:       assertFalse(node1.isSetterDef());
1343:       assertFalse(node1.isInc());
1344:       assertFalse(node1.isNew());
1345:       assertFalse(node1.isSwitch());
1346:       assertFalse(node1.isVar());
1347:       assertFalse(node1.isHook());
1348:       assertFalse(node1.isBlock());
1349:       assertEquals(39, node1.getType());
1350:       assertFalse(node1.isStringKey());
1351:       assertFalse(node1.hasMoreThanOneChild());
1352:       assertEquals(213486, node1.getSourcePosition());
1353:       assertFalse(node1.isParamList());
1354:       assertFalse(node1.isThis());
1355:       assertFalse(node1.isCase());
1356:       assertFalse(node1.isGetterDef());
1357:       assertEquals(52, node1.getLineno());
1358:       assertFalse(node1.isScript());
1359:       assertFalse(node1.hasOneChild());
1360:       assertFalse(node1.isAssign());
1361:       assertFalse(node1.isLabelName());
1362:       assertFalse(node1.isWith());
1363:       assertFalse(node1.isDec());
1364:       assertFalse(node1.isTypeOf());
1365:       assertFalse(node1.isCast());
1366:       assertFalse(node1.isInstanceOf());
1367:       assertFalse(node1.isGetElem());
1368:       assertFalse(node1.isExprResult());
1369:       assertFalse(node1.isAssignAdd());
1370:       assertFalse(node1.isOr());
1371:       assertFalse(node1.isLabel());
1372:       assertFalse(node1.isDo());
1373:       assertFalse(node1.isAdd());
1374:       assertFalse(node1.isThrow());
1375:       assertFalse(node1.isContinue());
1376:       assertFalse(node1.isFalse());
1377:       assertFalse(node1.isName());
1378:       assertFalse(node1.isBreak());
1379:       assertFalse(node1.isCall());
1380:       assertTrue(node1.isNumber());
1381:       assertFalse(node1.isAnd());
1382:       assertFalse(node1.isComma());
1383:       assertFalse(node1.hasChildren());
1384:       assertFalse(node1.isReturn());
1385:       assertFalse(node1.isNot());
1386:       assertFalse(node1.isString());
1387:       assertFalse(node1.isWhile());
1388:       assertFalse(node1.isObjectLit());
1389:       assertFalse(node1.isGetProp());
1390:       assertFalse(node1.equals((Object)node2));
1391:       assertFalse(node1.equals((Object)node0));
1392:       assertEquals(0, int0);
1393:       assertEquals(4095, Node.COLUMN_MASK);
1394:       assertEquals(55, Node.INFERRED_FUNCTION);
1395:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1396:       assertEquals(48, Node.DIRECTIVES);
1397:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1398:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1399:       assertEquals(40, Node.ORIGINALNAME_PROP);
1400:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1401:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1402:       assertEquals(43, Node.IS_CONSTANT_NAME);
1403:       assertEquals(54, Node.SLASH_V);
1404:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1405:       assertEquals(50, Node.FREE_CALL);
1406:       assertEquals(12, Node.COLUMN_BITS);
1407:       assertEquals(46, Node.IS_NAMESPACE);
1408:       assertEquals(57, Node.LAST_PROP);
1409:       assertEquals(1, Node.DECR_FLAG);
1410:       assertEquals(49, Node.DIRECT_EVAL);
1411:       assertEquals(32, Node.INCRDECR_PROP);
1412:       assertEquals(37, Node.OPT_ARG_NAME);
1413:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1414:       assertEquals(47, Node.IS_DISPATCHER);
1415:       assertEquals(2, Node.POST_FLAG);
1416:       assertEquals(30, Node.VAR_ARGS_NAME);
1417:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1418:       assertEquals(57, Node.REFLECTED_OBJECT);
1419:       assertEquals(29, Node.JSDOC_INFO_PROP);
1420:       assertEquals(8, Node.FLAG_NO_THROWS);
1421:       assertEquals(39, Node.EMPTY_BLOCK);
1422:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1423:       assertEquals(56, Node.CHANGE_TIME);
1424:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1425:       assertEquals(53, Node.INPUT_ID);
1426:       assertEquals(52, Node.LENGTH);
1427:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1428:       assertEquals(36, Node.QUOTED_PROP);
1429:       
1430:       // Undeclared exception!
1431:       try { 
1432:         node0.getExistingIntProp(52);
1433:         fail("Expecting exception: IllegalStateException");
1434:       
1435:       } catch(IllegalStateException e) {
1436:          //
1437:          // missing prop: 52
1438:          //
1439:          verifyException("com.google.javascript.rhino.Node", e);
1440:       }
1441:   }
1442: }
RegularFileObject[/tmp/EvoSuite_118_1629223397724/com/google/javascript/rhino/Node_118_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:03:17 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_118_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_118_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.common.collect.RegularImmutableSet",
109:       "com.google.javascript.rhino.jstype.ModificationVisitor",
110:       "com.google.javascript.rhino.jstype.PropertyMap$1",
111:       "com.google.common.collect.AbstractMapEntry",
112:       "com.google.javascript.rhino.Node$AncestorIterable$1",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.common.collect.Iterables",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.common.collect.SingletonImmutableSet",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.common.collect.Iterators$1",
207:       "com.google.common.collect.Iterators$2",
208:       "com.google.javascript.rhino.jstype.NamespaceType",
209:       "com.google.common.collect.Iterators$3",
210:       "com.google.common.collect.Sets",
211:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
212:       "com.google.javascript.rhino.Node$ObjectPropListItem",
213:       "com.google.common.collect.Lists$StringAsImmutableList",
214:       "com.google.common.collect.Lists$2",
215:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
216:       "com.google.common.collect.ImmutableList$Builder",
217:       "com.google.common.collect.Lists$1",
218:       "com.google.javascript.rhino.jstype.StaticReference",
219:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
220:       "com.google.common.collect.Multiset",
221:       "com.google.common.collect.AbstractMultimap",
222:       "com.google.common.collect.Multimap",
223:       "com.google.common.collect.Iterators",
224:       "com.google.common.collect.EmptyImmutableSet",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
228:       "com.google.common.collect.ImmutableList",
229:       "com.google.common.collect.SingletonImmutableBiMap",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
231:       "com.google.javascript.rhino.jstype.StringType",
232:       "com.google.javascript.rhino.Node$AbstractPropListItem",
233:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
234:       "com.google.javascript.rhino.jstype.TemplatizedType",
235:       "com.google.javascript.rhino.jstype.Visitor",
236:       "com.google.javascript.rhino.jstype.NoResolvedType",
237:       "com.google.javascript.rhino.jstype.JSTypeNative",
238:       "com.google.javascript.rhino.jstype.AllType",
239:       "com.google.common.collect.Maps",
240:       "com.google.common.collect.SetMultimap",
241:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
242:       "com.google.common.collect.Maps$EntryTransformer",
243:       "com.google.javascript.rhino.JSTypeExpression",
244:       "com.google.common.collect.Iterators$MergingIterator"
245:     );
246:   } 
247: 
248:   private static void resetClasses() {
249:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_118_tmp__ESTest_scaffolding.class.getClassLoader()); 
250: 
251:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
252:       "com.google.javascript.rhino.Node",
253:       "com.google.javascript.rhino.Node$NumberNode",
254:       "com.google.javascript.rhino.Node$StringNode",
255:       "com.google.javascript.rhino.Node$AbstractPropListItem",
256:       "com.google.javascript.rhino.Node$ObjectPropListItem",
257:       "com.google.javascript.rhino.Node$IntPropListItem",
258:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
259:       "com.google.javascript.rhino.Node$AncestorIterable",
260:       "com.google.javascript.rhino.Node$NodeMismatch",
261:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
262:       "com.google.javascript.rhino.Node$SideEffectFlags",
263:       "com.google.javascript.rhino.Token",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Preconditions",
267:       "com.google.common.base.Joiner$1",
268:       "com.google.common.collect.Collections2",
269:       "com.google.common.base.Joiner$MapJoiner",
270:       "com.google.common.collect.Maps",
271:       "com.google.common.collect.AbstractMultimap",
272:       "com.google.common.collect.AbstractMapBasedMultimap",
273:       "com.google.common.collect.AbstractSetMultimap",
274:       "com.google.common.collect.LinkedHashMultimap",
275:       "com.google.common.collect.AbstractMapEntry",
276:       "com.google.common.collect.ImmutableEntry",
277:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
278:       "com.google.common.collect.AbstractListMultimap",
279:       "com.google.common.collect.ArrayListMultimap",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
281:       "com.google.common.collect.ImmutableCollection",
282:       "com.google.common.collect.RegularImmutableList",
283:       "com.google.common.collect.ObjectArrays",
284:       "com.google.common.collect.ImmutableList",
285:       "com.google.javascript.rhino.jstype.ModificationVisitor",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
287:       "com.google.common.collect.ImmutableCollection$Builder",
288:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
289:       "com.google.common.collect.ImmutableList$Builder",
290:       "com.google.common.collect.UnmodifiableIterator",
291:       "com.google.common.collect.UnmodifiableListIterator",
292:       "com.google.common.collect.Iterators$1",
293:       "com.google.common.collect.Iterators$2",
294:       "com.google.common.collect.Iterators",
295:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
296:       "com.google.javascript.rhino.jstype.JSType$1",
297:       "com.google.javascript.rhino.jstype.JSType",
298:       "com.google.javascript.rhino.jstype.ObjectType",
299:       "com.google.javascript.rhino.jstype.ProxyObjectType",
300:       "com.google.javascript.rhino.jstype.TemplateType",
301:       "com.google.javascript.rhino.jstype.ValueType",
302:       "com.google.javascript.rhino.jstype.BooleanType",
303:       "com.google.javascript.rhino.jstype.NullType",
304:       "com.google.javascript.rhino.jstype.NumberType",
305:       "com.google.javascript.rhino.jstype.StringType",
306:       "com.google.javascript.rhino.jstype.UnknownType",
307:       "com.google.javascript.rhino.jstype.VoidType",
308:       "com.google.javascript.rhino.jstype.AllType",
309:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
310:       "com.google.common.collect.ImmutableMap",
311:       "com.google.common.collect.ImmutableBiMap",
312:       "com.google.common.collect.EmptyImmutableBiMap",
313:       "com.google.javascript.rhino.jstype.PropertyMap$1",
314:       "com.google.javascript.rhino.jstype.PropertyMap",
315:       "com.google.javascript.rhino.jstype.FunctionType",
316:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.ImmutableList$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Platform",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.InputId",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.Iterators$12",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
366:       "com.google.javascript.rhino.jstype.JSType$TypePair",
367:       "com.google.javascript.rhino.jstype.TernaryValue",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
370:     );
371:   }
372: }

[MASTER] 18:03:17.955 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = "gs1IcjVs7cZy}^~";
boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

Node node0 = Node.newString(1, "gs1IcjVs7cZy}^~", 1493, 4358);
assertEquals(4095, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertEquals(1493, node0.getLineno());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals(1, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertNotNull(node0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);

Node node1 = Node.newNumber((double) 49, 52, 494);
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(494, node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(213486, node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertEquals(52, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertTrue(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);

JSDocInfo jSDocInfo0 = new JSDocInfo(false);
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.hasType());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isIdGenerator());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.hasFileOverview());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.hasBaseType());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isImplicitCast());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isExpose());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isNoShadow());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertEquals(0, jSDocInfo0.getParameterCount());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isNgInject());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertNotNull(jSDocInfo0);

Node node2 = new Node(31, node1);
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(494, node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(213486, node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertEquals(52, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertTrue(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertTrue(node2.hasOneChild());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isSwitch());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isReturn());
assertTrue(node2.isDelProp());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isBlock());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isVar());
assertFalse(node2.isCast());
assertFalse(node2.isNumber());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertEquals(31, node2.getType());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertNotNull(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);

Iterable<Node> iterable0 = node0.children();
assertEquals(4095, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertEquals(1493, node0.getLineno());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals(1, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);

boolean boolean1 = node0.isAnd();
assertEquals(4095, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertEquals(1493, node0.getLineno());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals(1, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);

jSDocInfo0.setLendsName("com.google.javascript.rhino.Node$AncestorIterable");
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isJavaDispatch());
assertEquals("com.google.javascript.rhino.Node$AncestorIterable", jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.hasType());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isIdGenerator());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.hasFileOverview());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.hasBaseType());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isImplicitCast());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isExpose());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isNoShadow());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertEquals(0, jSDocInfo0.getParameterCount());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isNgInject());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());

node1.addSuppression("gs1IcjVs7cZy}^~");
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(494, node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(213486, node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertEquals(52, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertTrue(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);

boolean boolean3 = node0.isArrayLit();
assertEquals(4095, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertEquals(1493, node0.getLineno());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals(1, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node2);
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(494, node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(213486, node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertEquals(52, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertTrue(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertTrue(node2.hasOneChild());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isSwitch());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isReturn());
assertTrue(node2.isDelProp());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isBlock());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isVar());
assertFalse(node2.isCast());
assertFalse(node2.isNumber());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertEquals(31, node2.getType());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertNotNull(node_NodeMismatch0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean4 = node0.isQualifiedName();
assertEquals(4095, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertEquals(1493, node0.getLineno());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals(1, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertFalse(boolean4);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);

int int0 = node1.getChangeTime();
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(494, node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(213486, node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertEquals(52, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertTrue(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(0, int0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);

node0.getExistingIntProp(52);

[MASTER] 18:03:18.959 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_122_1629223398747/com/google/javascript/rhino/Node_122_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_122_1629223398747/com/google/javascript/rhino/Node_122_tmp__ESTest_scaffolding.java]]
[MASTER] 18:03:18.959 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:03:18.959 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:03:18.960 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 565
[MASTER] 18:03:18.962 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_122_1629223398747/com/google/javascript/rhino/Node_122_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:03:18 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import java.util.LinkedHashSet;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.testdata.EvoSuiteFile;
17: import org.evosuite.runtime.testdata.FileSystemHandling;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_122_tmp__ESTest extends Node_122_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
26:       assertFalse(boolean0);
27:       
28:       Node node0 = Node.newString(1, "gs1IcjVs7cZy}^~", 1493, 4358);
29:       assertFalse(node0.isContinue());
30:       assertFalse(node0.isDo());
31:       assertFalse(node0.isReturn());
32:       assertFalse(node0.isWhile());
33:       assertFalse(node0.isNew());
34:       assertFalse(node0.isAdd());
35:       assertFalse(node0.isAssignAdd());
36:       assertFalse(node0.isOr());
37:       assertFalse(node0.isNumber());
38:       assertFalse(node0.isLabelName());
39:       assertFalse(node0.isParamList());
40:       assertFalse(node0.isVar());
41:       assertFalse(node0.isStringKey());
42:       assertFalse(node0.isLabel());
43:       assertEquals(0, node0.getChildCount());
44:       assertFalse(node0.isCast());
45:       assertEquals(1, node0.getType());
46:       assertFalse(node0.isObjectLit());
47:       assertFalse(node0.isNot());
48:       assertFalse(node0.isDefaultCase());
49:       assertFalse(node0.isAnd());
50:       assertFalse(node0.isTrue());
51:       assertFalse(node0.isGetProp());
52:       assertFalse(node0.isDebugger());
53:       assertFalse(node0.isGetElem());
54:       assertFalse(node0.isName());
55:       assertFalse(node0.isDelProp());
56:       assertFalse(node0.isAssign());
57:       assertFalse(node0.isDec());
58:       assertFalse(node0.isNull());
59:       assertFalse(node0.hasChildren());
60:       assertFalse(node0.isComma());
61:       assertFalse(node0.isVoid());
62:       assertFalse(node0.isTypeOf());
63:       assertFalse(node0.isBreak());
64:       assertFalse(node0.isExprResult());
65:       assertFalse(node0.isCall());
66:       assertFalse(node0.isCase());
67:       assertFalse(node0.isSwitch());
68:       assertEquals(4095, node0.getCharno());
69:       assertFalse(node0.isIn());
70:       assertFalse(node0.isString());
71:       assertFalse(node0.isInc());
72:       assertFalse(node0.isEmpty());
73:       assertFalse(node0.isFalse());
74:       assertFalse(node0.isGetterDef());
75:       assertFalse(node0.isThrow());
76:       assertFalse(node0.isFunction());
77:       assertFalse(node0.isArrayLit());
78:       assertFalse(node0.isWith());
79:       assertEquals(6119423, node0.getSourcePosition());
80:       assertFalse(node0.isTry());
81:       assertFalse(node0.isScript());
82:       assertFalse(node0.hasOneChild());
83:       assertEquals(1493, node0.getLineno());
84:       assertFalse(node0.isSetterDef());
85:       assertFalse(node0.isFor());
86:       assertFalse(node0.isHook());
87:       assertFalse(node0.isIf());
88:       assertFalse(node0.isThis());
89:       assertFalse(node0.isNE());
90:       assertFalse(node0.isBlock());
91:       assertFalse(node0.isRegExp());
92:       assertFalse(node0.hasMoreThanOneChild());
93:       assertFalse(node0.isInstanceOf());
94:       assertFalse(node0.isCatch());
95:       assertNotNull(node0);
96:       assertEquals(2, Node.POST_FLAG);
97:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
98:       assertEquals(56, Node.CHANGE_TIME);
99:       assertEquals(29, Node.JSDOC_INFO_PROP);
100:       assertEquals(32, Node.INCRDECR_PROP);
101:       assertEquals(37, Node.OPT_ARG_NAME);
102:       assertEquals(46, Node.IS_NAMESPACE);
103:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
104:       assertEquals(51, Node.STATIC_SOURCE_FILE);
105:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
106:       assertEquals(49, Node.DIRECT_EVAL);
107:       assertEquals(1, Node.DECR_FLAG);
108:       assertEquals(12, Node.COLUMN_BITS);
109:       assertEquals(4095, Node.COLUMN_MASK);
110:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
111:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
112:       assertEquals(8, Node.FLAG_NO_THROWS);
113:       assertEquals(39, Node.EMPTY_BLOCK);
114:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
115:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
116:       assertEquals(48, Node.DIRECTIVES);
117:       assertEquals(55, Node.INFERRED_FUNCTION);
118:       assertEquals(57, Node.REFLECTED_OBJECT);
119:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
120:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
121:       assertEquals(52, Node.LENGTH);
122:       assertEquals(50, Node.FREE_CALL);
123:       assertEquals(36, Node.QUOTED_PROP);
124:       assertEquals(15, Node.NO_SIDE_EFFECTS);
125:       assertEquals(57, Node.LAST_PROP);
126:       assertEquals(54, Node.SLASH_V);
127:       assertEquals(43, Node.IS_CONSTANT_NAME);
128:       assertEquals(53, Node.INPUT_ID);
129:       assertEquals(40, Node.ORIGINALNAME_PROP);
130:       assertEquals(30, Node.VAR_ARGS_NAME);
131:       assertEquals(47, Node.IS_DISPATCHER);
132:       
133:       Node node1 = Node.newNumber((double) 49, 52, 494);
134:       assertFalse(node1.isRegExp());
135:       assertEquals(0, node1.getChildCount());
136:       assertFalse(node1.isCatch());
137:       assertFalse(node1.isFunction());
138:       assertFalse(node1.isTry());
139:       assertFalse(node1.isSetterDef());
140:       assertFalse(node1.isDefaultCase());
141:       assertFalse(node1.isStringKey());
142:       assertFalse(node1.isArrayLit());
143:       assertFalse(node1.isGetterDef());
144:       assertFalse(node1.isDebugger());
145:       assertFalse(node1.isParamList());
146:       assertFalse(node1.isCase());
147:       assertEquals(213486, node1.getSourcePosition());
148:       assertEquals(39, node1.getType());
149:       assertFalse(node1.hasMoreThanOneChild());
150:       assertFalse(node1.isIn());
151:       assertFalse(node1.isContinue());
152:       assertFalse(node1.isBlock());
153:       assertFalse(node1.isInc());
154:       assertFalse(node1.isHook());
155:       assertFalse(node1.isFor());
156:       assertFalse(node1.isNE());
157:       assertFalse(node1.isIf());
158:       assertFalse(node1.isNot());
159:       assertFalse(node1.isObjectLit());
160:       assertFalse(node1.isInstanceOf());
161:       assertFalse(node1.isScript());
162:       assertFalse(node1.isWith());
163:       assertEquals(52, node1.getLineno());
164:       assertFalse(node1.isComma());
165:       assertFalse(node1.isThis());
166:       assertFalse(node1.isGetProp());
167:       assertFalse(node1.hasOneChild());
168:       assertFalse(node1.isFalse());
169:       assertFalse(node1.isThrow());
170:       assertFalse(node1.isLabelName());
171:       assertFalse(node1.isCast());
172:       assertFalse(node1.isSwitch());
173:       assertFalse(node1.isAnd());
174:       assertFalse(node1.isDo());
175:       assertFalse(node1.isString());
176:       assertFalse(node1.isNew());
177:       assertEquals(494, node1.getCharno());
178:       assertFalse(node1.isAdd());
179:       assertFalse(node1.isReturn());
180:       assertTrue(node1.isNumber());
181:       assertFalse(node1.isLabel());
182:       assertFalse(node1.isVar());
183:       assertFalse(node1.isWhile());
184:       assertFalse(node1.isAssignAdd());
185:       assertFalse(node1.isGetElem());
186:       assertFalse(node1.isName());
187:       assertFalse(node1.isAssign());
188:       assertFalse(node1.isEmpty());
189:       assertFalse(node1.isCall());
190:       assertFalse(node1.isBreak());
191:       assertFalse(node1.hasChildren());
192:       assertFalse(node1.isDec());
193:       assertFalse(node1.isTypeOf());
194:       assertFalse(node1.isVoid());
195:       assertFalse(node1.isOr());
196:       assertFalse(node1.isTrue());
197:       assertFalse(node1.isExprResult());
198:       assertFalse(node1.isNull());
199:       assertFalse(node1.isDelProp());
200:       assertNotNull(node1);
201:       assertFalse(node1.equals((Object)node0));
202:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
203:       assertEquals(48, Node.DIRECTIVES);
204:       assertEquals(8, Node.FLAG_NO_THROWS);
205:       assertEquals(50, Node.FREE_CALL);
206:       assertEquals(55, Node.INFERRED_FUNCTION);
207:       assertEquals(52, Node.LENGTH);
208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
209:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
210:       assertEquals(39, Node.EMPTY_BLOCK);
211:       assertEquals(36, Node.QUOTED_PROP);
212:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
213:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
214:       assertEquals(57, Node.REFLECTED_OBJECT);
215:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
216:       assertEquals(4095, Node.COLUMN_MASK);
217:       assertEquals(49, Node.DIRECT_EVAL);
218:       assertEquals(37, Node.OPT_ARG_NAME);
219:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
220:       assertEquals(2, Node.POST_FLAG);
221:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
222:       assertEquals(56, Node.CHANGE_TIME);
223:       assertEquals(46, Node.IS_NAMESPACE);
224:       assertEquals(47, Node.IS_DISPATCHER);
225:       assertEquals(12, Node.COLUMN_BITS);
226:       assertEquals(51, Node.STATIC_SOURCE_FILE);
227:       assertEquals(32, Node.INCRDECR_PROP);
228:       assertEquals(29, Node.JSDOC_INFO_PROP);
229:       assertEquals(53, Node.INPUT_ID);
230:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
231:       assertEquals(1, Node.DECR_FLAG);
232:       assertEquals(15, Node.NO_SIDE_EFFECTS);
233:       assertEquals(43, Node.IS_CONSTANT_NAME);
234:       assertEquals(57, Node.LAST_PROP);
235:       assertEquals(30, Node.VAR_ARGS_NAME);
236:       assertEquals(54, Node.SLASH_V);
237:       assertEquals(40, Node.ORIGINALNAME_PROP);
238:       
239:       JSDocInfo jSDocInfo0 = new JSDocInfo(false);
240:       assertFalse(jSDocInfo0.hasBaseType());
241:       assertFalse(jSDocInfo0.isExport());
242:       assertEquals(0, jSDocInfo0.getParameterCount());
243:       assertFalse(jSDocInfo0.hasEnumParameterType());
244:       assertFalse(jSDocInfo0.containsDeclaration());
245:       assertFalse(jSDocInfo0.hasTypedefType());
246:       assertFalse(jSDocInfo0.isImplicitCast());
247:       assertFalse(jSDocInfo0.isDefine());
248:       assertFalse(jSDocInfo0.isConstructor());
249:       assertFalse(jSDocInfo0.hasModifies());
250:       assertFalse(jSDocInfo0.isJaggerInject());
251:       assertFalse(jSDocInfo0.hasFileOverview());
252:       assertFalse(jSDocInfo0.isConstant());
253:       assertFalse(jSDocInfo0.isJaggerProvide());
254:       assertFalse(jSDocInfo0.hasType());
255:       assertFalse(jSDocInfo0.isDisposes());
256:       assertFalse(jSDocInfo0.isJavaDispatch());
257:       assertNull(jSDocInfo0.getOriginalCommentString());
258:       assertNull(jSDocInfo0.getVersion());
259:       assertNull(jSDocInfo0.getReturnDescription());
260:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
261:       assertFalse(jSDocInfo0.isJaggerModule());
262:       assertNull(jSDocInfo0.getLicense());
263:       assertFalse(jSDocInfo0.isStableIdGenerator());
264:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
265:       assertFalse(jSDocInfo0.isNoTypeCheck());
266:       assertFalse(jSDocInfo0.isIdGenerator());
267:       assertFalse(jSDocInfo0.isExterns());
268:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
269:       assertFalse(jSDocInfo0.isOverride());
270:       assertFalse(jSDocInfo0.isNoCompile());
271:       assertFalse(jSDocInfo0.isWizaction());
272:       assertFalse(jSDocInfo0.isNgInject());
273:       assertFalse(jSDocInfo0.makesDicts());
274:       assertFalse(jSDocInfo0.isDeprecated());
275:       assertFalse(jSDocInfo0.isMappedIdGenerator());
276:       assertNull(jSDocInfo0.getLendsName());
277:       assertNull(jSDocInfo0.getBlockDescription());
278:       assertFalse(jSDocInfo0.isInterface());
279:       assertFalse(jSDocInfo0.isNoShadow());
280:       assertFalse(jSDocInfo0.isExpose());
281:       assertFalse(jSDocInfo0.isHidden());
282:       assertNull(jSDocInfo0.getDeprecationReason());
283:       assertFalse(jSDocInfo0.hasThisType());
284:       assertNull(jSDocInfo0.getMeaning());
285:       assertNull(jSDocInfo0.getVisibility());
286:       assertNull(jSDocInfo0.getFileOverview());
287:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
288:       assertEquals("JSDocInfo", jSDocInfo0.toString());
289:       assertFalse(jSDocInfo0.shouldPreserveTry());
290:       assertFalse(jSDocInfo0.makesStructs());
291:       assertNull(jSDocInfo0.getDescription());
292:       assertFalse(jSDocInfo0.isNoSideEffects());
293:       assertFalse(jSDocInfo0.isNoAlias());
294:       assertFalse(jSDocInfo0.hasReturnType());
295:       assertNotNull(jSDocInfo0);
296:       
297:       Node node2 = node1.setJSDocInfo(jSDocInfo0);
298:       assertFalse(node1.isRegExp());
299:       assertEquals(0, node1.getChildCount());
300:       assertFalse(node1.isCatch());
301:       assertFalse(node1.isFunction());
302:       assertFalse(node1.isTry());
303:       assertFalse(node1.isSetterDef());
304:       assertFalse(node1.isDefaultCase());
305:       assertFalse(node1.isStringKey());
306:       assertFalse(node1.isArrayLit());
307:       assertFalse(node1.isGetterDef());
308:       assertFalse(node1.isDebugger());
309:       assertFalse(node1.isParamList());
310:       assertFalse(node1.isCase());
311:       assertEquals(213486, node1.getSourcePosition());
312:       assertEquals(39, node1.getType());
313:       assertFalse(node1.hasMoreThanOneChild());
314:       assertFalse(node1.isIn());
315:       assertFalse(node1.isContinue());
316:       assertFalse(node1.isBlock());
317:       assertFalse(node1.isInc());
318:       assertFalse(node1.isHook());
319:       assertFalse(node1.isFor());
320:       assertFalse(node1.isNE());
321:       assertFalse(node1.isIf());
322:       assertFalse(node1.isNot());
323:       assertFalse(node1.isObjectLit());
324:       assertFalse(node1.isInstanceOf());
325:       assertFalse(node1.isScript());
326:       assertFalse(node1.isWith());
327:       assertEquals(52, node1.getLineno());
328:       assertFalse(node1.isComma());
329:       assertFalse(node1.isThis());
330:       assertFalse(node1.isGetProp());
331:       assertFalse(node1.hasOneChild());
332:       assertFalse(node1.isFalse());
333:       assertFalse(node1.isThrow());
334:       assertFalse(node1.isLabelName());
335:       assertFalse(node1.isCast());
336:       assertFalse(node1.isSwitch());
337:       assertFalse(node1.isAnd());
338:       assertFalse(node1.isDo());
339:       assertFalse(node1.isString());
340:       assertFalse(node1.isNew());
341:       assertEquals(494, node1.getCharno());
342:       assertFalse(node1.isAdd());
343:       assertFalse(node1.isReturn());
344:       assertTrue(node1.isNumber());
345:       assertFalse(node1.isLabel());
346:       assertFalse(node1.isVar());
347:       assertFalse(node1.isWhile());
348:       assertFalse(node1.isAssignAdd());
349:       assertFalse(node1.isGetElem());
350:       assertFalse(node1.isName());
351:       assertFalse(node1.isAssign());
352:       assertFalse(node1.isEmpty());
353:       assertFalse(node1.isCall());
354:       assertFalse(node1.isBreak());
355:       assertFalse(node1.hasChildren());
356:       assertFalse(node1.isDec());
357:       assertFalse(node1.isTypeOf());
358:       assertFalse(node1.isVoid());
359:       assertFalse(node1.isOr());
360:       assertFalse(node1.isTrue());
361:       assertFalse(node1.isExprResult());
362:       assertFalse(node1.isNull());
363:       assertFalse(node1.isDelProp());
364:       assertFalse(jSDocInfo0.hasBaseType());
365:       assertFalse(jSDocInfo0.isExport());
366:       assertEquals(0, jSDocInfo0.getParameterCount());
367:       assertFalse(jSDocInfo0.hasEnumParameterType());
368:       assertFalse(jSDocInfo0.containsDeclaration());
369:       assertFalse(jSDocInfo0.hasTypedefType());
370:       assertFalse(jSDocInfo0.isImplicitCast());
371:       assertFalse(jSDocInfo0.isDefine());
372:       assertFalse(jSDocInfo0.isConstructor());
373:       assertFalse(jSDocInfo0.hasModifies());
374:       assertFalse(jSDocInfo0.isJaggerInject());
375:       assertFalse(jSDocInfo0.hasFileOverview());
376:       assertFalse(jSDocInfo0.isConstant());
377:       assertFalse(jSDocInfo0.isJaggerProvide());
378:       assertFalse(jSDocInfo0.hasType());
379:       assertFalse(jSDocInfo0.isDisposes());
380:       assertFalse(jSDocInfo0.isJavaDispatch());
381:       assertNull(jSDocInfo0.getOriginalCommentString());
382:       assertNull(jSDocInfo0.getVersion());
383:       assertNull(jSDocInfo0.getReturnDescription());
384:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
385:       assertFalse(jSDocInfo0.isJaggerModule());
386:       assertNull(jSDocInfo0.getLicense());
387:       assertFalse(jSDocInfo0.isStableIdGenerator());
388:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
389:       assertFalse(jSDocInfo0.isNoTypeCheck());
390:       assertFalse(jSDocInfo0.isIdGenerator());
391:       assertFalse(jSDocInfo0.isExterns());
392:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
393:       assertFalse(jSDocInfo0.isOverride());
394:       assertFalse(jSDocInfo0.isNoCompile());
395:       assertFalse(jSDocInfo0.isWizaction());
396:       assertFalse(jSDocInfo0.isNgInject());
397:       assertFalse(jSDocInfo0.makesDicts());
398:       assertFalse(jSDocInfo0.isDeprecated());
399:       assertFalse(jSDocInfo0.isMappedIdGenerator());
400:       assertNull(jSDocInfo0.getLendsName());
401:       assertNull(jSDocInfo0.getBlockDescription());
402:       assertFalse(jSDocInfo0.isInterface());
403:       assertFalse(jSDocInfo0.isNoShadow());
404:       assertFalse(jSDocInfo0.isExpose());
405:       assertFalse(jSDocInfo0.isHidden());
406:       assertNull(jSDocInfo0.getDeprecationReason());
407:       assertFalse(jSDocInfo0.hasThisType());
408:       assertNull(jSDocInfo0.getMeaning());
409:       assertNull(jSDocInfo0.getVisibility());
410:       assertNull(jSDocInfo0.getFileOverview());
411:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
412:       assertEquals("JSDocInfo", jSDocInfo0.toString());
413:       assertFalse(jSDocInfo0.shouldPreserveTry());
414:       assertFalse(jSDocInfo0.makesStructs());
415:       assertNull(jSDocInfo0.getDescription());
416:       assertFalse(jSDocInfo0.isNoSideEffects());
417:       assertFalse(jSDocInfo0.isNoAlias());
418:       assertFalse(jSDocInfo0.hasReturnType());
419:       assertFalse(node2.isCase());
420:       assertFalse(node2.isString());
421:       assertTrue(node2.isNumber());
422:       assertFalse(node2.isIn());
423:       assertFalse(node2.isInc());
424:       assertFalse(node2.isGetterDef());
425:       assertFalse(node2.isFalse());
426:       assertFalse(node2.isThrow());
427:       assertEquals(494, node2.getCharno());
428:       assertFalse(node2.isSwitch());
429:       assertFalse(node2.isFunction());
430:       assertFalse(node2.isArrayLit());
431:       assertFalse(node2.isWith());
432:       assertFalse(node2.isRegExp());
433:       assertFalse(node2.isTry());
434:       assertEquals(52, node2.getLineno());
435:       assertFalse(node2.isScript());
436:       assertFalse(node2.hasOneChild());
437:       assertFalse(node2.isSetterDef());
438:       assertFalse(node2.isFor());
439:       assertFalse(node2.isIf());
440:       assertFalse(node2.isNE());
441:       assertFalse(node2.isHook());
442:       assertFalse(node2.isThis());
443:       assertFalse(node2.isInstanceOf());
444:       assertFalse(node2.isCatch());
445:       assertEquals(213486, node2.getSourcePosition());
446:       assertFalse(node2.isDo());
447:       assertEquals(39, node2.getType());
448:       assertFalse(node2.isWhile());
449:       assertFalse(node2.isContinue());
450:       assertFalse(node2.hasMoreThanOneChild());
451:       assertFalse(node2.isBlock());
452:       assertFalse(node2.isReturn());
453:       assertFalse(node2.isAssignAdd());
454:       assertFalse(node2.isOr());
455:       assertFalse(node2.isAdd());
456:       assertFalse(node2.isNew());
457:       assertFalse(node2.isLabelName());
458:       assertFalse(node2.isStringKey());
459:       assertFalse(node2.isVar());
460:       assertFalse(node2.isParamList());
461:       assertFalse(node2.isLabel());
462:       assertEquals(0, node2.getChildCount());
463:       assertFalse(node2.isCast());
464:       assertFalse(node2.isNot());
465:       assertFalse(node2.isAnd());
466:       assertFalse(node2.isObjectLit());
467:       assertFalse(node2.isDefaultCase());
468:       assertFalse(node2.isTrue());
469:       assertFalse(node2.isDebugger());
470:       assertFalse(node2.isGetProp());
471:       assertFalse(node2.isAssign());
472:       assertFalse(node2.isEmpty());
473:       assertFalse(node2.isName());
474:       assertFalse(node2.isDelProp());
475:       assertFalse(node2.isTypeOf());
476:       assertFalse(node2.isNull());
477:       assertFalse(node2.isComma());
478:       assertFalse(node2.isDec());
479:       assertFalse(node2.hasChildren());
480:       assertFalse(node2.isVoid());
481:       assertFalse(node2.isBreak());
482:       assertFalse(node2.isExprResult());
483:       assertFalse(node2.isCall());
484:       assertFalse(node2.isGetElem());
485:       assertNotNull(node2);
486:       assertFalse(node1.equals((Object)node0));
487:       assertFalse(node2.equals((Object)node0));
488:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
489:       assertEquals(48, Node.DIRECTIVES);
490:       assertEquals(8, Node.FLAG_NO_THROWS);
491:       assertEquals(50, Node.FREE_CALL);
492:       assertEquals(55, Node.INFERRED_FUNCTION);
493:       assertEquals(52, Node.LENGTH);
494:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
495:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
496:       assertEquals(39, Node.EMPTY_BLOCK);
497:       assertEquals(36, Node.QUOTED_PROP);
498:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
499:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
500:       assertEquals(57, Node.REFLECTED_OBJECT);
501:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
502:       assertEquals(4095, Node.COLUMN_MASK);
503:       assertEquals(49, Node.DIRECT_EVAL);
504:       assertEquals(37, Node.OPT_ARG_NAME);
505:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
506:       assertEquals(2, Node.POST_FLAG);
507:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
508:       assertEquals(56, Node.CHANGE_TIME);
509:       assertEquals(46, Node.IS_NAMESPACE);
510:       assertEquals(47, Node.IS_DISPATCHER);
511:       assertEquals(12, Node.COLUMN_BITS);
512:       assertEquals(51, Node.STATIC_SOURCE_FILE);
513:       assertEquals(32, Node.INCRDECR_PROP);
514:       assertEquals(29, Node.JSDOC_INFO_PROP);
515:       assertEquals(53, Node.INPUT_ID);
516:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
517:       assertEquals(1, Node.DECR_FLAG);
518:       assertEquals(15, Node.NO_SIDE_EFFECTS);
519:       assertEquals(43, Node.IS_CONSTANT_NAME);
520:       assertEquals(57, Node.LAST_PROP);
521:       assertEquals(30, Node.VAR_ARGS_NAME);
522:       assertEquals(54, Node.SLASH_V);
523:       assertEquals(40, Node.ORIGINALNAME_PROP);
524:       assertEquals(2, Node.POST_FLAG);
525:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
526:       assertEquals(37, Node.OPT_ARG_NAME);
527:       assertEquals(56, Node.CHANGE_TIME);
528:       assertEquals(47, Node.IS_DISPATCHER);
529:       assertEquals(32, Node.INCRDECR_PROP);
530:       assertEquals(51, Node.STATIC_SOURCE_FILE);
531:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
532:       assertEquals(29, Node.JSDOC_INFO_PROP);
533:       assertEquals(46, Node.IS_NAMESPACE);
534:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
535:       assertEquals(36, Node.QUOTED_PROP);
536:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
537:       assertEquals(1, Node.DECR_FLAG);
538:       assertEquals(49, Node.DIRECT_EVAL);
539:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
540:       assertEquals(4095, Node.COLUMN_MASK);
541:       assertEquals(12, Node.COLUMN_BITS);
542:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
543:       assertEquals(8, Node.FLAG_NO_THROWS);
544:       assertEquals(39, Node.EMPTY_BLOCK);
545:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
546:       assertEquals(48, Node.DIRECTIVES);
547:       assertEquals(55, Node.INFERRED_FUNCTION);
548:       assertEquals(57, Node.REFLECTED_OBJECT);
549:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
550:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
551:       assertEquals(52, Node.LENGTH);
552:       assertEquals(50, Node.FREE_CALL);
553:       assertEquals(43, Node.IS_CONSTANT_NAME);
554:       assertEquals(15, Node.NO_SIDE_EFFECTS);
555:       assertEquals(53, Node.INPUT_ID);
556:       assertEquals(54, Node.SLASH_V);
557:       assertEquals(57, Node.LAST_PROP);
558:       assertEquals(40, Node.ORIGINALNAME_PROP);
559:       assertEquals(30, Node.VAR_ARGS_NAME);
560:       assertSame(node1, node2);
561:       assertSame(node2, node1);
562:       
563:       Iterable<Node> iterable0 = new LinkedHashSet<Node>(29);
564:       assertNotNull(iterable0);
565:       assertFalse(iterable0.contains(node0));
566:       
567:       boolean boolean1 = node0.isAnd();
568:       assertFalse(node0.isContinue());
569:       assertFalse(node0.isDo());
570:       assertFalse(node0.isReturn());
571:       assertFalse(node0.isWhile());
572:       assertFalse(node0.isNew());
573:       assertFalse(node0.isAdd());
574:       assertFalse(node0.isAssignAdd());
575:       assertFalse(node0.isOr());
576:       assertFalse(node0.isNumber());
577:       assertFalse(node0.isLabelName());
578:       assertFalse(node0.isParamList());
579:       assertFalse(node0.isVar());
580:       assertFalse(node0.isStringKey());
581:       assertFalse(node0.isLabel());
582:       assertEquals(0, node0.getChildCount());
583:       assertFalse(node0.isCast());
584:       assertEquals(1, node0.getType());
585:       assertFalse(node0.isObjectLit());
586:       assertFalse(node0.isNot());
587:       assertFalse(node0.isDefaultCase());
588:       assertFalse(node0.isAnd());
589:       assertFalse(node0.isTrue());
590:       assertFalse(node0.isGetProp());
591:       assertFalse(node0.isDebugger());
592:       assertFalse(node0.isGetElem());
593:       assertFalse(node0.isName());
594:       assertFalse(node0.isDelProp());
595:       assertFalse(node0.isAssign());
596:       assertFalse(node0.isDec());
597:       assertFalse(node0.isNull());
598:       assertFalse(node0.hasChildren());
599:       assertFalse(node0.isComma());
600:       assertFalse(node0.isVoid());
601:       assertFalse(node0.isTypeOf());
602:       assertFalse(node0.isBreak());
603:       assertFalse(node0.isExprResult());
604:       assertFalse(node0.isCall());
605:       assertFalse(node0.isCase());
606:       assertFalse(node0.isSwitch());
607:       assertEquals(4095, node0.getCharno());
608:       assertFalse(node0.isIn());
609:       assertFalse(node0.isString());
610:       assertFalse(node0.isInc());
611:       assertFalse(node0.isEmpty());
612:       assertFalse(node0.isFalse());
613:       assertFalse(node0.isGetterDef());
614:       assertFalse(node0.isThrow());
615:       assertFalse(node0.isFunction());
616:       assertFalse(node0.isArrayLit());
617:       assertFalse(node0.isWith());
618:       assertEquals(6119423, node0.getSourcePosition());
619:       assertFalse(node0.isTry());
620:       assertFalse(node0.isScript());
621:       assertFalse(node0.hasOneChild());
622:       assertEquals(1493, node0.getLineno());
623:       assertFalse(node0.isSetterDef());
624:       assertFalse(node0.isFor());
625:       assertFalse(node0.isHook());
626:       assertFalse(node0.isIf());
627:       assertFalse(node0.isThis());
628:       assertFalse(node0.isNE());
629:       assertFalse(node0.isBlock());
630:       assertFalse(node0.isRegExp());
631:       assertFalse(node0.hasMoreThanOneChild());
632:       assertFalse(node0.isInstanceOf());
633:       assertFalse(node0.isCatch());
634:       assertFalse(node0.equals((Object)node1));
635:       assertFalse(node0.equals((Object)node2));
636:       assertTrue(boolean1 == boolean0);
637:       assertFalse(boolean1);
638:       assertEquals(2, Node.POST_FLAG);
639:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
640:       assertEquals(56, Node.CHANGE_TIME);
641:       assertEquals(29, Node.JSDOC_INFO_PROP);
642:       assertEquals(32, Node.INCRDECR_PROP);
643:       assertEquals(37, Node.OPT_ARG_NAME);
644:       assertEquals(46, Node.IS_NAMESPACE);
645:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
646:       assertEquals(51, Node.STATIC_SOURCE_FILE);
647:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
648:       assertEquals(49, Node.DIRECT_EVAL);
649:       assertEquals(1, Node.DECR_FLAG);
650:       assertEquals(12, Node.COLUMN_BITS);
651:       assertEquals(4095, Node.COLUMN_MASK);
652:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
653:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
654:       assertEquals(8, Node.FLAG_NO_THROWS);
655:       assertEquals(39, Node.EMPTY_BLOCK);
656:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
657:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
658:       assertEquals(48, Node.DIRECTIVES);
659:       assertEquals(55, Node.INFERRED_FUNCTION);
660:       assertEquals(57, Node.REFLECTED_OBJECT);
661:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
662:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
663:       assertEquals(52, Node.LENGTH);
664:       assertEquals(50, Node.FREE_CALL);
665:       assertEquals(36, Node.QUOTED_PROP);
666:       assertEquals(15, Node.NO_SIDE_EFFECTS);
667:       assertEquals(57, Node.LAST_PROP);
668:       assertEquals(54, Node.SLASH_V);
669:       assertEquals(43, Node.IS_CONSTANT_NAME);
670:       assertEquals(53, Node.INPUT_ID);
671:       assertEquals(40, Node.ORIGINALNAME_PROP);
672:       assertEquals(30, Node.VAR_ARGS_NAME);
673:       assertEquals(47, Node.IS_DISPATCHER);
674:       
675:       boolean boolean2 = node2.isStringKey();
676:       assertFalse(node1.isRegExp());
677:       assertEquals(0, node1.getChildCount());
678:       assertFalse(node1.isCatch());
679:       assertFalse(node1.isFunction());
680:       assertFalse(node1.isTry());
681:       assertFalse(node1.isSetterDef());
682:       assertFalse(node1.isDefaultCase());
683:       assertFalse(node1.isStringKey());
684:       assertFalse(node1.isArrayLit());
685:       assertFalse(node1.isGetterDef());
686:       assertFalse(node1.isDebugger());
687:       assertFalse(node1.isParamList());
688:       assertFalse(node1.isCase());
689:       assertEquals(213486, node1.getSourcePosition());
690:       assertEquals(39, node1.getType());
691:       assertFalse(node1.hasMoreThanOneChild());
692:       assertFalse(node1.isIn());
693:       assertFalse(node1.isContinue());
694:       assertFalse(node1.isBlock());
695:       assertFalse(node1.isInc());
696:       assertFalse(node1.isHook());
697:       assertFalse(node1.isFor());
698:       assertFalse(node1.isNE());
699:       assertFalse(node1.isIf());
700:       assertFalse(node1.isNot());
701:       assertFalse(node1.isObjectLit());
702:       assertFalse(node1.isInstanceOf());
703:       assertFalse(node1.isScript());
704:       assertFalse(node1.isWith());
705:       assertEquals(52, node1.getLineno());
706:       assertFalse(node1.isComma());
707:       assertFalse(node1.isThis());
708:       assertFalse(node1.isGetProp());
709:       assertFalse(node1.hasOneChild());
710:       assertFalse(node1.isFalse());
711:       assertFalse(node1.isThrow());
712:       assertFalse(node1.isLabelName());
713:       assertFalse(node1.isCast());
714:       assertFalse(node1.isSwitch());
715:       assertFalse(node1.isAnd());
716:       assertFalse(node1.isDo());
717:       assertFalse(node1.isString());
718:       assertFalse(node1.isNew());
719:       assertEquals(494, node1.getCharno());
720:       assertFalse(node1.isAdd());
721:       assertFalse(node1.isReturn());
722:       assertTrue(node1.isNumber());
723:       assertFalse(node1.isLabel());
724:       assertFalse(node1.isVar());
725:       assertFalse(node1.isWhile());
726:       assertFalse(node1.isAssignAdd());
727:       assertFalse(node1.isGetElem());
728:       assertFalse(node1.isName());
729:       assertFalse(node1.isAssign());
730:       assertFalse(node1.isEmpty());
731:       assertFalse(node1.isCall());
732:       assertFalse(node1.isBreak());
733:       assertFalse(node1.hasChildren());
734:       assertFalse(node1.isDec());
735:       assertFalse(node1.isTypeOf());
736:       assertFalse(node1.isVoid());
737:       assertFalse(node1.isOr());
738:       assertFalse(node1.isTrue());
739:       assertFalse(node1.isExprResult());
740:       assertFalse(node1.isNull());
741:       assertFalse(node1.isDelProp());
742:       assertFalse(jSDocInfo0.hasBaseType());
743:       assertFalse(jSDocInfo0.isExport());
744:       assertEquals(0, jSDocInfo0.getParameterCount());
745:       assertFalse(jSDocInfo0.hasEnumParameterType());
746:       assertFalse(jSDocInfo0.containsDeclaration());
747:       assertFalse(jSDocInfo0.hasTypedefType());
748:       assertFalse(jSDocInfo0.isImplicitCast());
749:       assertFalse(jSDocInfo0.isDefine());
750:       assertFalse(jSDocInfo0.isConstructor());
751:       assertFalse(jSDocInfo0.hasModifies());
752:       assertFalse(jSDocInfo0.isJaggerInject());
753:       assertFalse(jSDocInfo0.hasFileOverview());
754:       assertFalse(jSDocInfo0.isConstant());
755:       assertFalse(jSDocInfo0.isJaggerProvide());
756:       assertFalse(jSDocInfo0.hasType());
757:       assertFalse(jSDocInfo0.isDisposes());
758:       assertFalse(jSDocInfo0.isJavaDispatch());
759:       assertNull(jSDocInfo0.getOriginalCommentString());
760:       assertNull(jSDocInfo0.getVersion());
761:       assertNull(jSDocInfo0.getReturnDescription());
762:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
763:       assertFalse(jSDocInfo0.isJaggerModule());
764:       assertNull(jSDocInfo0.getLicense());
765:       assertFalse(jSDocInfo0.isStableIdGenerator());
766:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
767:       assertFalse(jSDocInfo0.isNoTypeCheck());
768:       assertFalse(jSDocInfo0.isIdGenerator());
769:       assertFalse(jSDocInfo0.isExterns());
770:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
771:       assertFalse(jSDocInfo0.isOverride());
772:       assertFalse(jSDocInfo0.isNoCompile());
773:       assertFalse(jSDocInfo0.isWizaction());
774:       assertFalse(jSDocInfo0.isNgInject());
775:       assertFalse(jSDocInfo0.makesDicts());
776:       assertFalse(jSDocInfo0.isDeprecated());
777:       assertFalse(jSDocInfo0.isMappedIdGenerator());
778:       assertNull(jSDocInfo0.getLendsName());
779:       assertNull(jSDocInfo0.getBlockDescription());
780:       assertFalse(jSDocInfo0.isInterface());
781:       assertFalse(jSDocInfo0.isNoShadow());
782:       assertFalse(jSDocInfo0.isExpose());
783:       assertFalse(jSDocInfo0.isHidden());
784:       assertNull(jSDocInfo0.getDeprecationReason());
785:       assertFalse(jSDocInfo0.hasThisType());
786:       assertNull(jSDocInfo0.getMeaning());
787:       assertNull(jSDocInfo0.getVisibility());
788:       assertNull(jSDocInfo0.getFileOverview());
789:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
790:       assertEquals("JSDocInfo", jSDocInfo0.toString());
791:       assertFalse(jSDocInfo0.shouldPreserveTry());
792:       assertFalse(jSDocInfo0.makesStructs());
793:       assertNull(jSDocInfo0.getDescription());
794:       assertFalse(jSDocInfo0.isNoSideEffects());
795:       assertFalse(jSDocInfo0.isNoAlias());
796:       assertFalse(jSDocInfo0.hasReturnType());
797:       assertFalse(node2.isCase());
798:       assertFalse(node2.isString());
799:       assertTrue(node2.isNumber());
800:       assertFalse(node2.isIn());
801:       assertFalse(node2.isInc());
802:       assertFalse(node2.isGetterDef());
803:       assertFalse(node2.isFalse());
804:       assertFalse(node2.isThrow());
805:       assertEquals(494, node2.getCharno());
806:       assertFalse(node2.isSwitch());
807:       assertFalse(node2.isFunction());
808:       assertFalse(node2.isArrayLit());
809:       assertFalse(node2.isWith());
810:       assertFalse(node2.isRegExp());
811:       assertFalse(node2.isTry());
812:       assertEquals(52, node2.getLineno());
813:       assertFalse(node2.isScript());
814:       assertFalse(node2.hasOneChild());
815:       assertFalse(node2.isSetterDef());
816:       assertFalse(node2.isFor());
817:       assertFalse(node2.isIf());
818:       assertFalse(node2.isNE());
819:       assertFalse(node2.isHook());
820:       assertFalse(node2.isThis());
821:       assertFalse(node2.isInstanceOf());
822:       assertFalse(node2.isCatch());
823:       assertEquals(213486, node2.getSourcePosition());
824:       assertFalse(node2.isDo());
825:       assertEquals(39, node2.getType());
826:       assertFalse(node2.isWhile());
827:       assertFalse(node2.isContinue());
828:       assertFalse(node2.hasMoreThanOneChild());
829:       assertFalse(node2.isBlock());
830:       assertFalse(node2.isReturn());
831:       assertFalse(node2.isAssignAdd());
832:       assertFalse(node2.isOr());
833:       assertFalse(node2.isAdd());
834:       assertFalse(node2.isNew());
835:       assertFalse(node2.isLabelName());
836:       assertFalse(node2.isStringKey());
837:       assertFalse(node2.isVar());
838:       assertFalse(node2.isParamList());
839:       assertFalse(node2.isLabel());
840:       assertEquals(0, node2.getChildCount());
841:       assertFalse(node2.isCast());
842:       assertFalse(node2.isNot());
843:       assertFalse(node2.isAnd());
844:       assertFalse(node2.isObjectLit());
845:       assertFalse(node2.isDefaultCase());
846:       assertFalse(node2.isTrue());
847:       assertFalse(node2.isDebugger());
848:       assertFalse(node2.isGetProp());
849:       assertFalse(node2.isAssign());
850:       assertFalse(node2.isEmpty());
851:       assertFalse(node2.isName());
852:       assertFalse(node2.isDelProp());
853:       assertFalse(node2.isTypeOf());
854:       assertFalse(node2.isNull());
855:       assertFalse(node2.isComma());
856:       assertFalse(node2.isDec());
857:       assertFalse(node2.hasChildren());
858:       assertFalse(node2.isVoid());
859:       assertFalse(node2.isBreak());
860:       assertFalse(node2.isExprResult());
861:       assertFalse(node2.isCall());
862:       assertFalse(node2.isGetElem());
863:       assertFalse(node1.equals((Object)node0));
864:       assertFalse(node2.equals((Object)node0));
865:       assertTrue(boolean2 == boolean1);
866:       assertTrue(boolean2 == boolean0);
867:       assertFalse(boolean2);
868:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
869:       assertEquals(48, Node.DIRECTIVES);
870:       assertEquals(8, Node.FLAG_NO_THROWS);
871:       assertEquals(50, Node.FREE_CALL);
872:       assertEquals(55, Node.INFERRED_FUNCTION);
873:       assertEquals(52, Node.LENGTH);
874:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
875:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
876:       assertEquals(39, Node.EMPTY_BLOCK);
877:       assertEquals(36, Node.QUOTED_PROP);
878:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
879:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
880:       assertEquals(57, Node.REFLECTED_OBJECT);
881:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
882:       assertEquals(4095, Node.COLUMN_MASK);
883:       assertEquals(49, Node.DIRECT_EVAL);
884:       assertEquals(37, Node.OPT_ARG_NAME);
885:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
886:       assertEquals(2, Node.POST_FLAG);
887:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
888:       assertEquals(56, Node.CHANGE_TIME);
889:       assertEquals(46, Node.IS_NAMESPACE);
890:       assertEquals(47, Node.IS_DISPATCHER);
891:       assertEquals(12, Node.COLUMN_BITS);
892:       assertEquals(51, Node.STATIC_SOURCE_FILE);
893:       assertEquals(32, Node.INCRDECR_PROP);
894:       assertEquals(29, Node.JSDOC_INFO_PROP);
895:       assertEquals(53, Node.INPUT_ID);
896:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
897:       assertEquals(1, Node.DECR_FLAG);
898:       assertEquals(15, Node.NO_SIDE_EFFECTS);
899:       assertEquals(43, Node.IS_CONSTANT_NAME);
900:       assertEquals(57, Node.LAST_PROP);
901:       assertEquals(30, Node.VAR_ARGS_NAME);
902:       assertEquals(54, Node.SLASH_V);
903:       assertEquals(40, Node.ORIGINALNAME_PROP);
904:       assertEquals(2, Node.POST_FLAG);
905:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
906:       assertEquals(37, Node.OPT_ARG_NAME);
907:       assertEquals(56, Node.CHANGE_TIME);
908:       assertEquals(47, Node.IS_DISPATCHER);
909:       assertEquals(32, Node.INCRDECR_PROP);
910:       assertEquals(51, Node.STATIC_SOURCE_FILE);
911:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
912:       assertEquals(29, Node.JSDOC_INFO_PROP);
913:       assertEquals(46, Node.IS_NAMESPACE);
914:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
915:       assertEquals(36, Node.QUOTED_PROP);
916:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
917:       assertEquals(1, Node.DECR_FLAG);
918:       assertEquals(49, Node.DIRECT_EVAL);
919:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
920:       assertEquals(4095, Node.COLUMN_MASK);
921:       assertEquals(12, Node.COLUMN_BITS);
922:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
923:       assertEquals(8, Node.FLAG_NO_THROWS);
924:       assertEquals(39, Node.EMPTY_BLOCK);
925:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
926:       assertEquals(48, Node.DIRECTIVES);
927:       assertEquals(55, Node.INFERRED_FUNCTION);
928:       assertEquals(57, Node.REFLECTED_OBJECT);
929:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
930:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
931:       assertEquals(52, Node.LENGTH);
932:       assertEquals(50, Node.FREE_CALL);
933:       assertEquals(43, Node.IS_CONSTANT_NAME);
934:       assertEquals(15, Node.NO_SIDE_EFFECTS);
935:       assertEquals(53, Node.INPUT_ID);
936:       assertEquals(54, Node.SLASH_V);
937:       assertEquals(57, Node.LAST_PROP);
938:       assertEquals(40, Node.ORIGINALNAME_PROP);
939:       assertEquals(30, Node.VAR_ARGS_NAME);
940:       assertSame(node1, node2);
941:       assertSame(node2, node1);
942:       
943:       boolean boolean3 = node2.isTypeOf();
944:       assertFalse(node1.isRegExp());
945:       assertEquals(0, node1.getChildCount());
946:       assertFalse(node1.isCatch());
947:       assertFalse(node1.isFunction());
948:       assertFalse(node1.isTry());
949:       assertFalse(node1.isSetterDef());
950:       assertFalse(node1.isDefaultCase());
951:       assertFalse(node1.isStringKey());
952:       assertFalse(node1.isArrayLit());
953:       assertFalse(node1.isGetterDef());
954:       assertFalse(node1.isDebugger());
955:       assertFalse(node1.isParamList());
956:       assertFalse(node1.isCase());
957:       assertEquals(213486, node1.getSourcePosition());
958:       assertEquals(39, node1.getType());
959:       assertFalse(node1.hasMoreThanOneChild());
960:       assertFalse(node1.isIn());
961:       assertFalse(node1.isContinue());
962:       assertFalse(node1.isBlock());
963:       assertFalse(node1.isInc());
964:       assertFalse(node1.isHook());
965:       assertFalse(node1.isFor());
966:       assertFalse(node1.isNE());
967:       assertFalse(node1.isIf());
968:       assertFalse(node1.isNot());
969:       assertFalse(node1.isObjectLit());
970:       assertFalse(node1.isInstanceOf());
971:       assertFalse(node1.isScript());
972:       assertFalse(node1.isWith());
973:       assertEquals(52, node1.getLineno());
974:       assertFalse(node1.isComma());
975:       assertFalse(node1.isThis());
976:       assertFalse(node1.isGetProp());
977:       assertFalse(node1.hasOneChild());
978:       assertFalse(node1.isFalse());
979:       assertFalse(node1.isThrow());
980:       assertFalse(node1.isLabelName());
981:       assertFalse(node1.isCast());
982:       assertFalse(node1.isSwitch());
983:       assertFalse(node1.isAnd());
984:       assertFalse(node1.isDo());
985:       assertFalse(node1.isString());
986:       assertFalse(node1.isNew());
987:       assertEquals(494, node1.getCharno());
988:       assertFalse(node1.isAdd());
989:       assertFalse(node1.isReturn());
990:       assertTrue(node1.isNumber());
991:       assertFalse(node1.isLabel());
992:       assertFalse(node1.isVar());
993:       assertFalse(node1.isWhile());
994:       assertFalse(node1.isAssignAdd());
995:       assertFalse(node1.isGetElem());
996:       assertFalse(node1.isName());
997:       assertFalse(node1.isAssign());
998:       assertFalse(node1.isEmpty());
999:       assertFalse(node1.isCall());
1000:       assertFalse(node1.isBreak());
1001:       assertFalse(node1.hasChildren());
1002:       assertFalse(node1.isDec());
1003:       assertFalse(node1.isTypeOf());
1004:       assertFalse(node1.isVoid());
1005:       assertFalse(node1.isOr());
1006:       assertFalse(node1.isTrue());
1007:       assertFalse(node1.isExprResult());
1008:       assertFalse(node1.isNull());
1009:       assertFalse(node1.isDelProp());
1010:       assertFalse(jSDocInfo0.hasBaseType());
1011:       assertFalse(jSDocInfo0.isExport());
1012:       assertEquals(0, jSDocInfo0.getParameterCount());
1013:       assertFalse(jSDocInfo0.hasEnumParameterType());
1014:       assertFalse(jSDocInfo0.containsDeclaration());
1015:       assertFalse(jSDocInfo0.hasTypedefType());
1016:       assertFalse(jSDocInfo0.isImplicitCast());
1017:       assertFalse(jSDocInfo0.isDefine());
1018:       assertFalse(jSDocInfo0.isConstructor());
1019:       assertFalse(jSDocInfo0.hasModifies());
1020:       assertFalse(jSDocInfo0.isJaggerInject());
1021:       assertFalse(jSDocInfo0.hasFileOverview());
1022:       assertFalse(jSDocInfo0.isConstant());
1023:       assertFalse(jSDocInfo0.isJaggerProvide());
1024:       assertFalse(jSDocInfo0.hasType());
1025:       assertFalse(jSDocInfo0.isDisposes());
1026:       assertFalse(jSDocInfo0.isJavaDispatch());
1027:       assertNull(jSDocInfo0.getOriginalCommentString());
1028:       assertNull(jSDocInfo0.getVersion());
1029:       assertNull(jSDocInfo0.getReturnDescription());
1030:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1031:       assertFalse(jSDocInfo0.isJaggerModule());
1032:       assertNull(jSDocInfo0.getLicense());
1033:       assertFalse(jSDocInfo0.isStableIdGenerator());
1034:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1035:       assertFalse(jSDocInfo0.isNoTypeCheck());
1036:       assertFalse(jSDocInfo0.isIdGenerator());
1037:       assertFalse(jSDocInfo0.isExterns());
1038:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1039:       assertFalse(jSDocInfo0.isOverride());
1040:       assertFalse(jSDocInfo0.isNoCompile());
1041:       assertFalse(jSDocInfo0.isWizaction());
1042:       assertFalse(jSDocInfo0.isNgInject());
1043:       assertFalse(jSDocInfo0.makesDicts());
1044:       assertFalse(jSDocInfo0.isDeprecated());
1045:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1046:       assertNull(jSDocInfo0.getLendsName());
1047:       assertNull(jSDocInfo0.getBlockDescription());
1048:       assertFalse(jSDocInfo0.isInterface());
1049:       assertFalse(jSDocInfo0.isNoShadow());
1050:       assertFalse(jSDocInfo0.isExpose());
1051:       assertFalse(jSDocInfo0.isHidden());
1052:       assertNull(jSDocInfo0.getDeprecationReason());
1053:       assertFalse(jSDocInfo0.hasThisType());
1054:       assertNull(jSDocInfo0.getMeaning());
1055:       assertNull(jSDocInfo0.getVisibility());
1056:       assertNull(jSDocInfo0.getFileOverview());
1057:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1058:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1059:       assertFalse(jSDocInfo0.shouldPreserveTry());
1060:       assertFalse(jSDocInfo0.makesStructs());
1061:       assertNull(jSDocInfo0.getDescription());
1062:       assertFalse(jSDocInfo0.isNoSideEffects());
1063:       assertFalse(jSDocInfo0.isNoAlias());
1064:       assertFalse(jSDocInfo0.hasReturnType());
1065:       assertFalse(node2.isCase());
1066:       assertFalse(node2.isString());
1067:       assertTrue(node2.isNumber());
1068:       assertFalse(node2.isIn());
1069:       assertFalse(node2.isInc());
1070:       assertFalse(node2.isGetterDef());
1071:       assertFalse(node2.isFalse());
1072:       assertFalse(node2.isThrow());
1073:       assertEquals(494, node2.getCharno());
1074:       assertFalse(node2.isSwitch());
1075:       assertFalse(node2.isFunction());
1076:       assertFalse(node2.isArrayLit());
1077:       assertFalse(node2.isWith());
1078:       assertFalse(node2.isRegExp());
1079:       assertFalse(node2.isTry());
1080:       assertEquals(52, node2.getLineno());
1081:       assertFalse(node2.isScript());
1082:       assertFalse(node2.hasOneChild());
1083:       assertFalse(node2.isSetterDef());
1084:       assertFalse(node2.isFor());
1085:       assertFalse(node2.isIf());
1086:       assertFalse(node2.isNE());
1087:       assertFalse(node2.isHook());
1088:       assertFalse(node2.isThis());
1089:       assertFalse(node2.isInstanceOf());
1090:       assertFalse(node2.isCatch());
1091:       assertEquals(213486, node2.getSourcePosition());
1092:       assertFalse(node2.isDo());
1093:       assertEquals(39, node2.getType());
1094:       assertFalse(node2.isWhile());
1095:       assertFalse(node2.isContinue());
1096:       assertFalse(node2.hasMoreThanOneChild());
1097:       assertFalse(node2.isBlock());
1098:       assertFalse(node2.isReturn());
1099:       assertFalse(node2.isAssignAdd());
1100:       assertFalse(node2.isOr());
1101:       assertFalse(node2.isAdd());
1102:       assertFalse(node2.isNew());
1103:       assertFalse(node2.isLabelName());
1104:       assertFalse(node2.isStringKey());
1105:       assertFalse(node2.isVar());
1106:       assertFalse(node2.isParamList());
1107:       assertFalse(node2.isLabel());
1108:       assertEquals(0, node2.getChildCount());
1109:       assertFalse(node2.isCast());
1110:       assertFalse(node2.isNot());
1111:       assertFalse(node2.isAnd());
1112:       assertFalse(node2.isObjectLit());
1113:       assertFalse(node2.isDefaultCase());
1114:       assertFalse(node2.isTrue());
1115:       assertFalse(node2.isDebugger());
1116:       assertFalse(node2.isGetProp());
1117:       assertFalse(node2.isAssign());
1118:       assertFalse(node2.isEmpty());
1119:       assertFalse(node2.isName());
1120:       assertFalse(node2.isDelProp());
1121:       assertFalse(node2.isTypeOf());
1122:       assertFalse(node2.isNull());
1123:       assertFalse(node2.isComma());
1124:       assertFalse(node2.isDec());
1125:       assertFalse(node2.hasChildren());
1126:       assertFalse(node2.isVoid());
1127:       assertFalse(node2.isBreak());
1128:       assertFalse(node2.isExprResult());
1129:       assertFalse(node2.isCall());
1130:       assertFalse(node2.isGetElem());
1131:       assertFalse(node1.equals((Object)node0));
1132:       assertFalse(node2.equals((Object)node0));
1133:       assertTrue(boolean3 == boolean2);
1134:       assertTrue(boolean3 == boolean0);
1135:       assertTrue(boolean3 == boolean1);
1136:       assertFalse(boolean3);
1137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1138:       assertEquals(48, Node.DIRECTIVES);
1139:       assertEquals(8, Node.FLAG_NO_THROWS);
1140:       assertEquals(50, Node.FREE_CALL);
1141:       assertEquals(55, Node.INFERRED_FUNCTION);
1142:       assertEquals(52, Node.LENGTH);
1143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1144:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1145:       assertEquals(39, Node.EMPTY_BLOCK);
1146:       assertEquals(36, Node.QUOTED_PROP);
1147:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1148:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1149:       assertEquals(57, Node.REFLECTED_OBJECT);
1150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1151:       assertEquals(4095, Node.COLUMN_MASK);
1152:       assertEquals(49, Node.DIRECT_EVAL);
1153:       assertEquals(37, Node.OPT_ARG_NAME);
1154:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1155:       assertEquals(2, Node.POST_FLAG);
1156:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1157:       assertEquals(56, Node.CHANGE_TIME);
1158:       assertEquals(46, Node.IS_NAMESPACE);
1159:       assertEquals(47, Node.IS_DISPATCHER);
1160:       assertEquals(12, Node.COLUMN_BITS);
1161:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1162:       assertEquals(32, Node.INCRDECR_PROP);
1163:       assertEquals(29, Node.JSDOC_INFO_PROP);
1164:       assertEquals(53, Node.INPUT_ID);
1165:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1166:       assertEquals(1, Node.DECR_FLAG);
1167:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1168:       assertEquals(43, Node.IS_CONSTANT_NAME);
1169:       assertEquals(57, Node.LAST_PROP);
1170:       assertEquals(30, Node.VAR_ARGS_NAME);
1171:       assertEquals(54, Node.SLASH_V);
1172:       assertEquals(40, Node.ORIGINALNAME_PROP);
1173:       assertEquals(2, Node.POST_FLAG);
1174:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1175:       assertEquals(37, Node.OPT_ARG_NAME);
1176:       assertEquals(56, Node.CHANGE_TIME);
1177:       assertEquals(47, Node.IS_DISPATCHER);
1178:       assertEquals(32, Node.INCRDECR_PROP);
1179:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1180:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1181:       assertEquals(29, Node.JSDOC_INFO_PROP);
1182:       assertEquals(46, Node.IS_NAMESPACE);
1183:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1184:       assertEquals(36, Node.QUOTED_PROP);
1185:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1186:       assertEquals(1, Node.DECR_FLAG);
1187:       assertEquals(49, Node.DIRECT_EVAL);
1188:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1189:       assertEquals(4095, Node.COLUMN_MASK);
1190:       assertEquals(12, Node.COLUMN_BITS);
1191:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1192:       assertEquals(8, Node.FLAG_NO_THROWS);
1193:       assertEquals(39, Node.EMPTY_BLOCK);
1194:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1195:       assertEquals(48, Node.DIRECTIVES);
1196:       assertEquals(55, Node.INFERRED_FUNCTION);
1197:       assertEquals(57, Node.REFLECTED_OBJECT);
1198:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1199:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1200:       assertEquals(52, Node.LENGTH);
1201:       assertEquals(50, Node.FREE_CALL);
1202:       assertEquals(43, Node.IS_CONSTANT_NAME);
1203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1204:       assertEquals(53, Node.INPUT_ID);
1205:       assertEquals(54, Node.SLASH_V);
1206:       assertEquals(57, Node.LAST_PROP);
1207:       assertEquals(40, Node.ORIGINALNAME_PROP);
1208:       assertEquals(30, Node.VAR_ARGS_NAME);
1209:       assertSame(node1, node2);
1210:       assertSame(node2, node1);
1211:       
1212:       // Undeclared exception!
1213:       try { 
1214:         node2.getAncestor((-3399));
1215:         fail("Expecting exception: IllegalArgumentException");
1216:       
1217:       } catch(IllegalArgumentException e) {
1218:          //
1219:          // no message in exception (getMessage() returned null)
1220:          //
1221:          verifyException("com.google.common.base.Preconditions", e);
1222:       }
1223:   }
1224: }
RegularFileObject[/tmp/EvoSuite_122_1629223398747/com/google/javascript/rhino/Node_122_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:03:18 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_122_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_122_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.common.collect.RegularImmutableSet",
109:       "com.google.javascript.rhino.jstype.ModificationVisitor",
110:       "com.google.javascript.rhino.jstype.PropertyMap$1",
111:       "com.google.common.collect.AbstractMapEntry",
112:       "com.google.javascript.rhino.Node$AncestorIterable$1",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.common.collect.Iterables",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.common.collect.SingletonImmutableSet",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.common.collect.Iterators$1",
207:       "com.google.common.collect.Iterators$2",
208:       "com.google.javascript.rhino.jstype.NamespaceType",
209:       "com.google.common.collect.Iterators$3",
210:       "com.google.common.collect.Sets",
211:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
212:       "com.google.javascript.rhino.Node$ObjectPropListItem",
213:       "com.google.common.collect.Lists$StringAsImmutableList",
214:       "com.google.common.collect.Lists$2",
215:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
216:       "com.google.common.collect.ImmutableList$Builder",
217:       "com.google.common.collect.Lists$1",
218:       "com.google.javascript.rhino.jstype.StaticReference",
219:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
220:       "com.google.common.collect.Multiset",
221:       "com.google.common.collect.AbstractMultimap",
222:       "com.google.common.collect.Multimap",
223:       "com.google.common.collect.Iterators",
224:       "com.google.common.collect.EmptyImmutableSet",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
228:       "com.google.common.collect.ImmutableList",
229:       "com.google.common.collect.SingletonImmutableBiMap",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
231:       "com.google.javascript.rhino.jstype.StringType",
232:       "com.google.javascript.rhino.Node$AbstractPropListItem",
233:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
234:       "com.google.javascript.rhino.jstype.TemplatizedType",
235:       "com.google.javascript.rhino.jstype.Visitor",
236:       "com.google.javascript.rhino.jstype.NoResolvedType",
237:       "com.google.javascript.rhino.jstype.JSTypeNative",
238:       "com.google.javascript.rhino.jstype.AllType",
239:       "com.google.common.collect.Maps",
240:       "com.google.common.collect.SetMultimap",
241:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
242:       "com.google.common.collect.Maps$EntryTransformer",
243:       "com.google.javascript.rhino.JSTypeExpression",
244:       "com.google.common.collect.Iterators$MergingIterator"
245:     );
246:   } 
247: 
248:   private static void resetClasses() {
249:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_122_tmp__ESTest_scaffolding.class.getClassLoader()); 
250: 
251:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
252:       "com.google.javascript.rhino.Node",
253:       "com.google.javascript.rhino.Node$NumberNode",
254:       "com.google.javascript.rhino.Node$StringNode",
255:       "com.google.javascript.rhino.Node$AbstractPropListItem",
256:       "com.google.javascript.rhino.Node$ObjectPropListItem",
257:       "com.google.javascript.rhino.Node$IntPropListItem",
258:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
259:       "com.google.javascript.rhino.Node$AncestorIterable",
260:       "com.google.javascript.rhino.Node$NodeMismatch",
261:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
262:       "com.google.javascript.rhino.Node$SideEffectFlags",
263:       "com.google.javascript.rhino.Token",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Preconditions",
267:       "com.google.common.base.Joiner$1",
268:       "com.google.common.collect.Collections2",
269:       "com.google.common.base.Joiner$MapJoiner",
270:       "com.google.common.collect.Maps",
271:       "com.google.common.collect.AbstractMultimap",
272:       "com.google.common.collect.AbstractMapBasedMultimap",
273:       "com.google.common.collect.AbstractSetMultimap",
274:       "com.google.common.collect.LinkedHashMultimap",
275:       "com.google.common.collect.AbstractMapEntry",
276:       "com.google.common.collect.ImmutableEntry",
277:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
278:       "com.google.common.collect.AbstractListMultimap",
279:       "com.google.common.collect.ArrayListMultimap",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
281:       "com.google.common.collect.ImmutableCollection",
282:       "com.google.common.collect.RegularImmutableList",
283:       "com.google.common.collect.ObjectArrays",
284:       "com.google.common.collect.ImmutableList",
285:       "com.google.javascript.rhino.jstype.ModificationVisitor",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
287:       "com.google.common.collect.ImmutableCollection$Builder",
288:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
289:       "com.google.common.collect.ImmutableList$Builder",
290:       "com.google.common.collect.UnmodifiableIterator",
291:       "com.google.common.collect.UnmodifiableListIterator",
292:       "com.google.common.collect.Iterators$1",
293:       "com.google.common.collect.Iterators$2",
294:       "com.google.common.collect.Iterators",
295:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
296:       "com.google.javascript.rhino.jstype.JSType$1",
297:       "com.google.javascript.rhino.jstype.JSType",
298:       "com.google.javascript.rhino.jstype.ObjectType",
299:       "com.google.javascript.rhino.jstype.ProxyObjectType",
300:       "com.google.javascript.rhino.jstype.TemplateType",
301:       "com.google.javascript.rhino.jstype.ValueType",
302:       "com.google.javascript.rhino.jstype.BooleanType",
303:       "com.google.javascript.rhino.jstype.NullType",
304:       "com.google.javascript.rhino.jstype.NumberType",
305:       "com.google.javascript.rhino.jstype.StringType",
306:       "com.google.javascript.rhino.jstype.UnknownType",
307:       "com.google.javascript.rhino.jstype.VoidType",
308:       "com.google.javascript.rhino.jstype.AllType",
309:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
310:       "com.google.common.collect.ImmutableMap",
311:       "com.google.common.collect.ImmutableBiMap",
312:       "com.google.common.collect.EmptyImmutableBiMap",
313:       "com.google.javascript.rhino.jstype.PropertyMap$1",
314:       "com.google.javascript.rhino.jstype.PropertyMap",
315:       "com.google.javascript.rhino.jstype.FunctionType",
316:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.ImmutableList$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Platform",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.InputId",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.Iterators$12",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
366:       "com.google.javascript.rhino.jstype.JSType$TypePair",
367:       "com.google.javascript.rhino.jstype.TernaryValue",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
370:     );
371:   }
372: }

[MASTER] 18:03:19.018 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

Node node0 = Node.newString(1, "gs1IcjVs7cZy}^~", 1493, 4358);
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertEquals(1, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isTrue());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertEquals(1493, node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertNotNull(node0);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

Node node1 = Node.newNumber((double) 49, 52, 494);
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertEquals(213486, node1.getSourcePosition());
assertEquals(39, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertEquals(52, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isNew());
assertEquals(494, node1.getCharno());
assertFalse(node1.isAdd());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);

JSDocInfo jSDocInfo0 = new JSDocInfo(false);
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isExport());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getVersion());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isJaggerModule());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isExterns());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasThisType());
assertNull(jSDocInfo0.getMeaning());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getFileOverview());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.makesStructs());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertNotNull(jSDocInfo0);

Node node2 = node1.setJSDocInfo(jSDocInfo0);
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertEquals(213486, node1.getSourcePosition());
assertEquals(39, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertEquals(52, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isNew());
assertEquals(494, node1.getCharno());
assertFalse(node1.isAdd());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isExport());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getVersion());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isJaggerModule());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isExterns());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasThisType());
assertNull(jSDocInfo0.getMeaning());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getFileOverview());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.makesStructs());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertTrue(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertEquals(494, node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertEquals(52, node2.getLineno());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(213486, node2.getSourcePosition());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCast());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.isAssign());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertNotNull(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertSame(node1, node2);
assertSame(node2, node1);

Iterable<Node> iterable0 = new LinkedHashSet<Node>(29);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

boolean boolean1 = node0.isAnd();
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertEquals(1, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isTrue());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isWith());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertEquals(1493, node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean2 = node2.isStringKey();
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertEquals(213486, node1.getSourcePosition());
assertEquals(39, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertEquals(52, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isNew());
assertEquals(494, node1.getCharno());
assertFalse(node1.isAdd());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isExport());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getVersion());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isJaggerModule());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isExterns());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasThisType());
assertNull(jSDocInfo0.getMeaning());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getFileOverview());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.makesStructs());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertTrue(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertEquals(494, node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertEquals(52, node2.getLineno());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(213486, node2.getSourcePosition());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCast());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.isAssign());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertSame(node1, node2);
assertSame(node2, node1);

boolean boolean3 = node2.isTypeOf();
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertEquals(213486, node1.getSourcePosition());
assertEquals(39, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertEquals(52, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isNew());
assertEquals(494, node1.getCharno());
assertFalse(node1.isAdd());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isExport());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getVersion());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isJaggerModule());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isExterns());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasThisType());
assertNull(jSDocInfo0.getMeaning());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getFileOverview());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.makesStructs());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertTrue(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertEquals(494, node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertEquals(52, node2.getLineno());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(213486, node2.getSourcePosition());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCast());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.isAssign());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertSame(node1, node2);
assertSame(node2, node1);

node2.getAncestor((-3399));

[MASTER] 18:03:21.267 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_137_1629223401049/com/google/javascript/rhino/Node_137_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_137_1629223401049/com/google/javascript/rhino/Node_137_tmp__ESTest_scaffolding.java]]
[MASTER] 18:03:21.267 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:03:21.267 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:03:21.267 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 580
[MASTER] 18:03:21.268 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_137_1629223401049/com/google/javascript/rhino/Node_137_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:03:21 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_137_tmp__ESTest extends Node_137_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       String string0 = "gs1IcjVs7cZy}^~";
25:       boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
26:       assertFalse(boolean0);
27:       
28:       Node node0 = Node.newString(1, "gs1IcjVs7cZy}^~", 1493, 4358);
29:       assertFalse(node0.isObjectLit());
30:       assertFalse(node0.isNot());
31:       assertFalse(node0.isInstanceOf());
32:       assertEquals(1493, node0.getLineno());
33:       assertFalse(node0.isScript());
34:       assertFalse(node0.isWith());
35:       assertEquals(1, node0.getType());
36:       assertFalse(node0.isExprResult());
37:       assertFalse(node0.isAnd());
38:       assertFalse(node0.isGetElem());
39:       assertFalse(node0.isAssign());
40:       assertFalse(node0.hasOneChild());
41:       assertFalse(node0.isBreak());
42:       assertFalse(node0.isDec());
43:       assertFalse(node0.isNumber());
44:       assertFalse(node0.isTypeOf());
45:       assertFalse(node0.isGetProp());
46:       assertFalse(node0.isThis());
47:       assertFalse(node0.isComma());
48:       assertFalse(node0.isHook());
49:       assertFalse(node0.hasChildren());
50:       assertFalse(node0.isReturn());
51:       assertFalse(node0.isIn());
52:       assertFalse(node0.hasMoreThanOneChild());
53:       assertFalse(node0.isString());
54:       assertFalse(node0.isContinue());
55:       assertFalse(node0.isIf());
56:       assertFalse(node0.isNE());
57:       assertFalse(node0.isThrow());
58:       assertFalse(node0.isFalse());
59:       assertFalse(node0.isCast());
60:       assertFalse(node0.isFunction());
61:       assertFalse(node0.isInc());
62:       assertFalse(node0.isSetterDef());
63:       assertEquals(0, node0.getChildCount());
64:       assertFalse(node0.isRegExp());
65:       assertFalse(node0.isCatch());
66:       assertFalse(node0.isVoid());
67:       assertFalse(node0.isTrue());
68:       assertFalse(node0.isDebugger());
69:       assertFalse(node0.isNull());
70:       assertFalse(node0.isParamList());
71:       assertFalse(node0.isStringKey());
72:       assertFalse(node0.isCall());
73:       assertFalse(node0.isName());
74:       assertFalse(node0.isFor());
75:       assertFalse(node0.isGetterDef());
76:       assertFalse(node0.isBlock());
77:       assertFalse(node0.isTry());
78:       assertEquals(6119423, node0.getSourcePosition());
79:       assertFalse(node0.isWhile());
80:       assertFalse(node0.isDo());
81:       assertFalse(node0.isCase());
82:       assertFalse(node0.isOr());
83:       assertEquals(4095, node0.getCharno());
84:       assertFalse(node0.isDelProp());
85:       assertFalse(node0.isSwitch());
86:       assertFalse(node0.isLabelName());
87:       assertFalse(node0.isArrayLit());
88:       assertFalse(node0.isEmpty());
89:       assertFalse(node0.isAdd());
90:       assertFalse(node0.isLabel());
91:       assertFalse(node0.isNew());
92:       assertFalse(node0.isDefaultCase());
93:       assertFalse(node0.isAssignAdd());
94:       assertFalse(node0.isVar());
95:       assertNotNull(node0);
96:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
97:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
98:       assertEquals(8, Node.FLAG_NO_THROWS);
99:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
100:       assertEquals(50, Node.FREE_CALL);
101:       assertEquals(57, Node.REFLECTED_OBJECT);
102:       assertEquals(4095, Node.COLUMN_MASK);
103:       assertEquals(48, Node.DIRECTIVES);
104:       assertEquals(40, Node.ORIGINALNAME_PROP);
105:       assertEquals(36, Node.QUOTED_PROP);
106:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
107:       assertEquals(57, Node.LAST_PROP);
108:       assertEquals(30, Node.VAR_ARGS_NAME);
109:       assertEquals(55, Node.INFERRED_FUNCTION);
110:       assertEquals(52, Node.LENGTH);
111:       assertEquals(53, Node.INPUT_ID);
112:       assertEquals(29, Node.JSDOC_INFO_PROP);
113:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
114:       assertEquals(39, Node.EMPTY_BLOCK);
115:       assertEquals(15, Node.NO_SIDE_EFFECTS);
116:       assertEquals(56, Node.CHANGE_TIME);
117:       assertEquals(2, Node.POST_FLAG);
118:       assertEquals(47, Node.IS_DISPATCHER);
119:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
120:       assertEquals(46, Node.IS_NAMESPACE);
121:       assertEquals(49, Node.DIRECT_EVAL);
122:       assertEquals(37, Node.OPT_ARG_NAME);
123:       assertEquals(43, Node.IS_CONSTANT_NAME);
124:       assertEquals(54, Node.SLASH_V);
125:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
126:       assertEquals(51, Node.STATIC_SOURCE_FILE);
127:       assertEquals(12, Node.COLUMN_BITS);
128:       assertEquals(32, Node.INCRDECR_PROP);
129:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
130:       assertEquals(1, Node.DECR_FLAG);
131:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
132:       
133:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
134:       assertNotNull(fileSystemHandling0);
135:       
136:       Node node1 = Node.newNumber((double) 49, 52, 496);
137:       assertFalse(node1.isCatch());
138:       assertFalse(node1.isRegExp());
139:       assertFalse(node1.isFunction());
140:       assertFalse(node1.isDefaultCase());
141:       assertEquals(0, node1.getChildCount());
142:       assertFalse(node1.isArrayLit());
143:       assertFalse(node1.isStringKey());
144:       assertFalse(node1.isTry());
145:       assertFalse(node1.isParamList());
146:       assertFalse(node1.isGetterDef());
147:       assertFalse(node1.isDebugger());
148:       assertEquals(213488, node1.getSourcePosition());
149:       assertFalse(node1.isAssignAdd());
150:       assertFalse(node1.isDo());
151:       assertTrue(node1.isNumber());
152:       assertFalse(node1.isTypeOf());
153:       assertFalse(node1.isWhile());
154:       assertFalse(node1.isAssign());
155:       assertFalse(node1.isLabel());
156:       assertFalse(node1.isReturn());
157:       assertFalse(node1.hasChildren());
158:       assertFalse(node1.isDec());
159:       assertFalse(node1.isVar());
160:       assertFalse(node1.isCall());
161:       assertFalse(node1.isAdd());
162:       assertFalse(node1.isEmpty());
163:       assertFalse(node1.isGetElem());
164:       assertFalse(node1.isName());
165:       assertFalse(node1.isBreak());
166:       assertFalse(node1.isDelProp());
167:       assertFalse(node1.isVoid());
168:       assertFalse(node1.isNew());
169:       assertFalse(node1.isTrue());
170:       assertFalse(node1.isNull());
171:       assertFalse(node1.isOr());
172:       assertFalse(node1.isAnd());
173:       assertFalse(node1.isInstanceOf());
174:       assertFalse(node1.isGetProp());
175:       assertFalse(node1.isThis());
176:       assertFalse(node1.isExprResult());
177:       assertFalse(node1.isFalse());
178:       assertFalse(node1.isWith());
179:       assertFalse(node1.isComma());
180:       assertFalse(node1.isCast());
181:       assertFalse(node1.isHook());
182:       assertFalse(node1.isLabelName());
183:       assertFalse(node1.hasOneChild());
184:       assertFalse(node1.isSwitch());
185:       assertEquals(52, node1.getLineno());
186:       assertFalse(node1.isScript());
187:       assertFalse(node1.isString());
188:       assertFalse(node1.isNot());
189:       assertFalse(node1.isObjectLit());
190:       assertFalse(node1.hasMoreThanOneChild());
191:       assertFalse(node1.isIn());
192:       assertFalse(node1.isContinue());
193:       assertFalse(node1.isCase());
194:       assertEquals(496, node1.getCharno());
195:       assertFalse(node1.isFor());
196:       assertEquals(39, node1.getType());
197:       assertFalse(node1.isBlock());
198:       assertFalse(node1.isThrow());
199:       assertFalse(node1.isNE());
200:       assertFalse(node1.isSetterDef());
201:       assertFalse(node1.isInc());
202:       assertFalse(node1.isIf());
203:       assertNotNull(node1);
204:       assertFalse(node1.equals((Object)node0));
205:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
206:       assertEquals(50, Node.FREE_CALL);
207:       assertEquals(8, Node.FLAG_NO_THROWS);
208:       assertEquals(39, Node.EMPTY_BLOCK);
209:       assertEquals(40, Node.ORIGINALNAME_PROP);
210:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
211:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
212:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
213:       assertEquals(57, Node.LAST_PROP);
214:       assertEquals(49, Node.DIRECT_EVAL);
215:       assertEquals(15, Node.NO_SIDE_EFFECTS);
216:       assertEquals(36, Node.QUOTED_PROP);
217:       assertEquals(55, Node.INFERRED_FUNCTION);
218:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
219:       assertEquals(4095, Node.COLUMN_MASK);
220:       assertEquals(52, Node.LENGTH);
221:       assertEquals(57, Node.REFLECTED_OBJECT);
222:       assertEquals(37, Node.OPT_ARG_NAME);
223:       assertEquals(48, Node.DIRECTIVES);
224:       assertEquals(56, Node.CHANGE_TIME);
225:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
226:       assertEquals(29, Node.JSDOC_INFO_PROP);
227:       assertEquals(47, Node.IS_DISPATCHER);
228:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
229:       assertEquals(2, Node.POST_FLAG);
230:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
231:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
232:       assertEquals(32, Node.INCRDECR_PROP);
233:       assertEquals(53, Node.INPUT_ID);
234:       assertEquals(12, Node.COLUMN_BITS);
235:       assertEquals(30, Node.VAR_ARGS_NAME);
236:       assertEquals(1, Node.DECR_FLAG);
237:       assertEquals(46, Node.IS_NAMESPACE);
238:       assertEquals(51, Node.STATIC_SOURCE_FILE);
239:       assertEquals(54, Node.SLASH_V);
240:       assertEquals(43, Node.IS_CONSTANT_NAME);
241:       
242:       JSDocInfo jSDocInfo0 = new JSDocInfo(true);
243:       assertFalse(jSDocInfo0.hasType());
244:       assertFalse(jSDocInfo0.isJaggerProvide());
245:       assertFalse(jSDocInfo0.isMappedIdGenerator());
246:       assertFalse(jSDocInfo0.isStableIdGenerator());
247:       assertFalse(jSDocInfo0.isNoCompile());
248:       assertNull(jSDocInfo0.getDeprecationReason());
249:       assertFalse(jSDocInfo0.isHidden());
250:       assertNull(jSDocInfo0.getOriginalCommentString());
251:       assertFalse(jSDocInfo0.isDefine());
252:       assertFalse(jSDocInfo0.isDisposes());
253:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
254:       assertFalse(jSDocInfo0.isExterns());
255:       assertFalse(jSDocInfo0.isNgInject());
256:       assertEquals(0, jSDocInfo0.getParameterCount());
257:       assertFalse(jSDocInfo0.isExpose());
258:       assertFalse(jSDocInfo0.makesStructs());
259:       assertFalse(jSDocInfo0.shouldPreserveTry());
260:       assertFalse(jSDocInfo0.isNoShadow());
261:       assertFalse(jSDocInfo0.isDeprecated());
262:       assertNull(jSDocInfo0.getLendsName());
263:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
264:       assertFalse(jSDocInfo0.containsDeclaration());
265:       assertFalse(jSDocInfo0.makesDicts());
266:       assertFalse(jSDocInfo0.hasReturnType());
267:       assertFalse(jSDocInfo0.isNoAlias());
268:       assertEquals("JSDocInfo", jSDocInfo0.toString());
269:       assertFalse(jSDocInfo0.isNoSideEffects());
270:       assertNull(jSDocInfo0.getMeaning());
271:       assertFalse(jSDocInfo0.hasThisType());
272:       assertFalse(jSDocInfo0.isConstant());
273:       assertFalse(jSDocInfo0.hasModifies());
274:       assertFalse(jSDocInfo0.isJaggerInject());
275:       assertNull(jSDocInfo0.getDescription());
276:       assertFalse(jSDocInfo0.hasEnumParameterType());
277:       assertFalse(jSDocInfo0.hasTypedefType());
278:       assertFalse(jSDocInfo0.isConstructor());
279:       assertNull(jSDocInfo0.getVisibility());
280:       assertNull(jSDocInfo0.getFileOverview());
281:       assertNull(jSDocInfo0.getBlockDescription());
282:       assertFalse(jSDocInfo0.hasBaseType());
283:       assertFalse(jSDocInfo0.isIdGenerator());
284:       assertFalse(jSDocInfo0.isInterface());
285:       assertNull(jSDocInfo0.getReturnDescription());
286:       assertFalse(jSDocInfo0.hasFileOverview());
287:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
288:       assertNull(jSDocInfo0.getLicense());
289:       assertFalse(jSDocInfo0.isJaggerModule());
290:       assertFalse(jSDocInfo0.isNoTypeCheck());
291:       assertFalse(jSDocInfo0.isImplicitCast());
292:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
293:       assertFalse(jSDocInfo0.isWizaction());
294:       assertFalse(jSDocInfo0.isExport());
295:       assertFalse(jSDocInfo0.isOverride());
296:       assertFalse(jSDocInfo0.isJavaDispatch());
297:       assertNull(jSDocInfo0.getVersion());
298:       assertNotNull(jSDocInfo0);
299:       
300:       Node node2 = new Node(43, node0, node0, node0);
301:       assertFalse(node0.isObjectLit());
302:       assertFalse(node0.isNot());
303:       assertFalse(node0.isInstanceOf());
304:       assertEquals(1493, node0.getLineno());
305:       assertFalse(node0.isScript());
306:       assertFalse(node0.isWith());
307:       assertEquals(1, node0.getType());
308:       assertFalse(node0.isExprResult());
309:       assertFalse(node0.isAnd());
310:       assertFalse(node0.isGetElem());
311:       assertFalse(node0.isAssign());
312:       assertFalse(node0.hasOneChild());
313:       assertFalse(node0.isBreak());
314:       assertFalse(node0.isDec());
315:       assertFalse(node0.isNumber());
316:       assertFalse(node0.isTypeOf());
317:       assertFalse(node0.isGetProp());
318:       assertFalse(node0.isThis());
319:       assertFalse(node0.isComma());
320:       assertFalse(node0.isHook());
321:       assertFalse(node0.hasChildren());
322:       assertFalse(node0.isReturn());
323:       assertFalse(node0.isIn());
324:       assertFalse(node0.hasMoreThanOneChild());
325:       assertFalse(node0.isString());
326:       assertFalse(node0.isContinue());
327:       assertFalse(node0.isIf());
328:       assertFalse(node0.isNE());
329:       assertFalse(node0.isThrow());
330:       assertFalse(node0.isFalse());
331:       assertFalse(node0.isCast());
332:       assertFalse(node0.isFunction());
333:       assertFalse(node0.isInc());
334:       assertFalse(node0.isSetterDef());
335:       assertEquals(0, node0.getChildCount());
336:       assertFalse(node0.isRegExp());
337:       assertFalse(node0.isCatch());
338:       assertFalse(node0.isVoid());
339:       assertFalse(node0.isTrue());
340:       assertFalse(node0.isDebugger());
341:       assertFalse(node0.isNull());
342:       assertFalse(node0.isParamList());
343:       assertFalse(node0.isStringKey());
344:       assertFalse(node0.isCall());
345:       assertFalse(node0.isName());
346:       assertFalse(node0.isFor());
347:       assertFalse(node0.isGetterDef());
348:       assertFalse(node0.isBlock());
349:       assertFalse(node0.isTry());
350:       assertEquals(6119423, node0.getSourcePosition());
351:       assertFalse(node0.isWhile());
352:       assertFalse(node0.isDo());
353:       assertFalse(node0.isCase());
354:       assertFalse(node0.isOr());
355:       assertEquals(4095, node0.getCharno());
356:       assertFalse(node0.isDelProp());
357:       assertFalse(node0.isSwitch());
358:       assertFalse(node0.isLabelName());
359:       assertFalse(node0.isArrayLit());
360:       assertFalse(node0.isEmpty());
361:       assertFalse(node0.isAdd());
362:       assertFalse(node0.isLabel());
363:       assertFalse(node0.isNew());
364:       assertFalse(node0.isDefaultCase());
365:       assertFalse(node0.isAssignAdd());
366:       assertFalse(node0.isVar());
367:       assertFalse(node2.isSwitch());
368:       assertFalse(node2.isInc());
369:       assertFalse(node2.isThrow());
370:       assertFalse(node2.isHook());
371:       assertFalse(node2.isThis());
372:       assertFalse(node2.isComma());
373:       assertEquals(1, node2.getChildCount());
374:       assertTrue(node2.hasChildren());
375:       assertFalse(node2.isIn());
376:       assertFalse(node2.isInstanceOf());
377:       assertFalse(node2.isBreak());
378:       assertFalse(node2.isDelProp());
379:       assertFalse(node2.isEmpty());
380:       assertFalse(node2.isIf());
381:       assertFalse(node2.isNE());
382:       assertFalse(node2.isExprResult());
383:       assertFalse(node2.isCast());
384:       assertFalse(node2.isVoid());
385:       assertFalse(node2.isAssign());
386:       assertFalse(node2.isGetElem());
387:       assertTrue(node2.hasOneChild());
388:       assertFalse(node2.isTypeOf());
389:       assertFalse(node2.isFunction());
390:       assertFalse(node2.isDec());
391:       assertFalse(node2.isReturn());
392:       assertFalse(node2.isGetProp());
393:       assertFalse(node2.isNot());
394:       assertFalse(node2.isAnd());
395:       assertFalse(node2.isString());
396:       assertFalse(node2.isObjectLit());
397:       assertFalse(node2.isDebugger());
398:       assertEquals((-1), node2.getSourcePosition());
399:       assertFalse(node2.isAdd());
400:       assertFalse(node2.isBlock());
401:       assertFalse(node2.isNew());
402:       assertFalse(node2.isDo());
403:       assertFalse(node2.isCall());
404:       assertFalse(node2.isContinue());
405:       assertFalse(node2.isWhile());
406:       assertFalse(node2.isVar());
407:       assertFalse(node2.hasMoreThanOneChild());
408:       assertFalse(node2.isAssignAdd());
409:       assertFalse(node2.isOr());
410:       assertFalse(node2.isLabel());
411:       assertFalse(node2.isSetterDef());
412:       assertEquals((-1), node2.getLineno());
413:       assertFalse(node2.isName());
414:       assertFalse(node2.isNull());
415:       assertFalse(node2.isTrue());
416:       assertFalse(node2.isTry());
417:       assertFalse(node2.isScript());
418:       assertFalse(node2.isArrayLit());
419:       assertFalse(node2.isDefaultCase());
420:       assertFalse(node2.isFor());
421:       assertFalse(node2.isWith());
422:       assertFalse(node2.isCatch());
423:       assertFalse(node2.isRegExp());
424:       assertFalse(node2.isParamList());
425:       assertEquals(43, node2.getType());
426:       assertTrue(node2.isFalse());
427:       assertFalse(node2.isCase());
428:       assertFalse(node2.isLabelName());
429:       assertFalse(node2.isStringKey());
430:       assertFalse(node2.isNumber());
431:       assertFalse(node2.isGetterDef());
432:       assertEquals((-1), node2.getCharno());
433:       assertNotNull(node2);
434:       assertFalse(node0.equals((Object)node1));
435:       assertFalse(node2.equals((Object)node0));
436:       assertFalse(node2.equals((Object)node1));
437:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
438:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
439:       assertEquals(8, Node.FLAG_NO_THROWS);
440:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
441:       assertEquals(50, Node.FREE_CALL);
442:       assertEquals(57, Node.REFLECTED_OBJECT);
443:       assertEquals(4095, Node.COLUMN_MASK);
444:       assertEquals(48, Node.DIRECTIVES);
445:       assertEquals(40, Node.ORIGINALNAME_PROP);
446:       assertEquals(36, Node.QUOTED_PROP);
447:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
448:       assertEquals(57, Node.LAST_PROP);
449:       assertEquals(30, Node.VAR_ARGS_NAME);
450:       assertEquals(55, Node.INFERRED_FUNCTION);
451:       assertEquals(52, Node.LENGTH);
452:       assertEquals(53, Node.INPUT_ID);
453:       assertEquals(29, Node.JSDOC_INFO_PROP);
454:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
455:       assertEquals(39, Node.EMPTY_BLOCK);
456:       assertEquals(15, Node.NO_SIDE_EFFECTS);
457:       assertEquals(56, Node.CHANGE_TIME);
458:       assertEquals(2, Node.POST_FLAG);
459:       assertEquals(47, Node.IS_DISPATCHER);
460:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
461:       assertEquals(46, Node.IS_NAMESPACE);
462:       assertEquals(49, Node.DIRECT_EVAL);
463:       assertEquals(37, Node.OPT_ARG_NAME);
464:       assertEquals(43, Node.IS_CONSTANT_NAME);
465:       assertEquals(54, Node.SLASH_V);
466:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
467:       assertEquals(51, Node.STATIC_SOURCE_FILE);
468:       assertEquals(12, Node.COLUMN_BITS);
469:       assertEquals(32, Node.INCRDECR_PROP);
470:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
471:       assertEquals(1, Node.DECR_FLAG);
472:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
473:       assertEquals(12, Node.COLUMN_BITS);
474:       assertEquals(1, Node.DECR_FLAG);
475:       assertEquals(51, Node.STATIC_SOURCE_FILE);
476:       assertEquals(30, Node.VAR_ARGS_NAME);
477:       assertEquals(2, Node.POST_FLAG);
478:       assertEquals(15, Node.NO_SIDE_EFFECTS);
479:       assertEquals(47, Node.IS_DISPATCHER);
480:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
481:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
482:       assertEquals(32, Node.INCRDECR_PROP);
483:       assertEquals(57, Node.LAST_PROP);
484:       assertEquals(40, Node.ORIGINALNAME_PROP);
485:       assertEquals(50, Node.FREE_CALL);
486:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
487:       assertEquals(54, Node.SLASH_V);
488:       assertEquals(46, Node.IS_NAMESPACE);
489:       assertEquals(43, Node.IS_CONSTANT_NAME);
490:       assertEquals(55, Node.INFERRED_FUNCTION);
491:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
492:       assertEquals(4095, Node.COLUMN_MASK);
493:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
494:       assertEquals(39, Node.EMPTY_BLOCK);
495:       assertEquals(57, Node.REFLECTED_OBJECT);
496:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
497:       assertEquals(52, Node.LENGTH);
498:       assertEquals(29, Node.JSDOC_INFO_PROP);
499:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
500:       assertEquals(53, Node.INPUT_ID);
501:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
502:       assertEquals(8, Node.FLAG_NO_THROWS);
503:       assertEquals(48, Node.DIRECTIVES);
504:       assertEquals(37, Node.OPT_ARG_NAME);
505:       assertEquals(36, Node.QUOTED_PROP);
506:       assertEquals(49, Node.DIRECT_EVAL);
507:       assertEquals(56, Node.CHANGE_TIME);
508:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
509:       
510:       Iterable<Node> iterable0 = node0.children();
511:       assertFalse(node0.isObjectLit());
512:       assertFalse(node0.isNot());
513:       assertFalse(node0.isInstanceOf());
514:       assertEquals(1493, node0.getLineno());
515:       assertFalse(node0.isScript());
516:       assertFalse(node0.isWith());
517:       assertEquals(1, node0.getType());
518:       assertFalse(node0.isExprResult());
519:       assertFalse(node0.isAnd());
520:       assertFalse(node0.isGetElem());
521:       assertFalse(node0.isAssign());
522:       assertFalse(node0.hasOneChild());
523:       assertFalse(node0.isBreak());
524:       assertFalse(node0.isDec());
525:       assertFalse(node0.isNumber());
526:       assertFalse(node0.isTypeOf());
527:       assertFalse(node0.isGetProp());
528:       assertFalse(node0.isThis());
529:       assertFalse(node0.isComma());
530:       assertFalse(node0.isHook());
531:       assertFalse(node0.hasChildren());
532:       assertFalse(node0.isReturn());
533:       assertFalse(node0.isIn());
534:       assertFalse(node0.hasMoreThanOneChild());
535:       assertFalse(node0.isString());
536:       assertFalse(node0.isContinue());
537:       assertFalse(node0.isIf());
538:       assertFalse(node0.isNE());
539:       assertFalse(node0.isThrow());
540:       assertFalse(node0.isFalse());
541:       assertFalse(node0.isCast());
542:       assertFalse(node0.isFunction());
543:       assertFalse(node0.isInc());
544:       assertFalse(node0.isSetterDef());
545:       assertEquals(0, node0.getChildCount());
546:       assertFalse(node0.isRegExp());
547:       assertFalse(node0.isCatch());
548:       assertFalse(node0.isVoid());
549:       assertFalse(node0.isTrue());
550:       assertFalse(node0.isDebugger());
551:       assertFalse(node0.isNull());
552:       assertFalse(node0.isParamList());
553:       assertFalse(node0.isStringKey());
554:       assertFalse(node0.isCall());
555:       assertFalse(node0.isName());
556:       assertFalse(node0.isFor());
557:       assertFalse(node0.isGetterDef());
558:       assertFalse(node0.isBlock());
559:       assertFalse(node0.isTry());
560:       assertEquals(6119423, node0.getSourcePosition());
561:       assertFalse(node0.isWhile());
562:       assertFalse(node0.isDo());
563:       assertFalse(node0.isCase());
564:       assertFalse(node0.isOr());
565:       assertEquals(4095, node0.getCharno());
566:       assertFalse(node0.isDelProp());
567:       assertFalse(node0.isSwitch());
568:       assertFalse(node0.isLabelName());
569:       assertFalse(node0.isArrayLit());
570:       assertFalse(node0.isEmpty());
571:       assertFalse(node0.isAdd());
572:       assertFalse(node0.isLabel());
573:       assertFalse(node0.isNew());
574:       assertFalse(node0.isDefaultCase());
575:       assertFalse(node0.isAssignAdd());
576:       assertFalse(node0.isVar());
577:       assertNotNull(iterable0);
578:       assertFalse(node0.equals((Object)node2));
579:       assertFalse(node0.equals((Object)node1));
580:       assertFalse(iterable0.contains(node2));
581:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
582:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
583:       assertEquals(8, Node.FLAG_NO_THROWS);
584:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
585:       assertEquals(50, Node.FREE_CALL);
586:       assertEquals(57, Node.REFLECTED_OBJECT);
587:       assertEquals(4095, Node.COLUMN_MASK);
588:       assertEquals(48, Node.DIRECTIVES);
589:       assertEquals(40, Node.ORIGINALNAME_PROP);
590:       assertEquals(36, Node.QUOTED_PROP);
591:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
592:       assertEquals(57, Node.LAST_PROP);
593:       assertEquals(30, Node.VAR_ARGS_NAME);
594:       assertEquals(55, Node.INFERRED_FUNCTION);
595:       assertEquals(52, Node.LENGTH);
596:       assertEquals(53, Node.INPUT_ID);
597:       assertEquals(29, Node.JSDOC_INFO_PROP);
598:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
599:       assertEquals(39, Node.EMPTY_BLOCK);
600:       assertEquals(15, Node.NO_SIDE_EFFECTS);
601:       assertEquals(56, Node.CHANGE_TIME);
602:       assertEquals(2, Node.POST_FLAG);
603:       assertEquals(47, Node.IS_DISPATCHER);
604:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
605:       assertEquals(46, Node.IS_NAMESPACE);
606:       assertEquals(49, Node.DIRECT_EVAL);
607:       assertEquals(37, Node.OPT_ARG_NAME);
608:       assertEquals(43, Node.IS_CONSTANT_NAME);
609:       assertEquals(54, Node.SLASH_V);
610:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
611:       assertEquals(51, Node.STATIC_SOURCE_FILE);
612:       assertEquals(12, Node.COLUMN_BITS);
613:       assertEquals(32, Node.INCRDECR_PROP);
614:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
615:       assertEquals(1, Node.DECR_FLAG);
616:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
617:       
618:       boolean boolean1 = node0.isAnd();
619:       assertFalse(node0.isObjectLit());
620:       assertFalse(node0.isNot());
621:       assertFalse(node0.isInstanceOf());
622:       assertEquals(1493, node0.getLineno());
623:       assertFalse(node0.isScript());
624:       assertFalse(node0.isWith());
625:       assertEquals(1, node0.getType());
626:       assertFalse(node0.isExprResult());
627:       assertFalse(node0.isAnd());
628:       assertFalse(node0.isGetElem());
629:       assertFalse(node0.isAssign());
630:       assertFalse(node0.hasOneChild());
631:       assertFalse(node0.isBreak());
632:       assertFalse(node0.isDec());
633:       assertFalse(node0.isNumber());
634:       assertFalse(node0.isTypeOf());
635:       assertFalse(node0.isGetProp());
636:       assertFalse(node0.isThis());
637:       assertFalse(node0.isComma());
638:       assertFalse(node0.isHook());
639:       assertFalse(node0.hasChildren());
640:       assertFalse(node0.isReturn());
641:       assertFalse(node0.isIn());
642:       assertFalse(node0.hasMoreThanOneChild());
643:       assertFalse(node0.isString());
644:       assertFalse(node0.isContinue());
645:       assertFalse(node0.isIf());
646:       assertFalse(node0.isNE());
647:       assertFalse(node0.isThrow());
648:       assertFalse(node0.isFalse());
649:       assertFalse(node0.isCast());
650:       assertFalse(node0.isFunction());
651:       assertFalse(node0.isInc());
652:       assertFalse(node0.isSetterDef());
653:       assertEquals(0, node0.getChildCount());
654:       assertFalse(node0.isRegExp());
655:       assertFalse(node0.isCatch());
656:       assertFalse(node0.isVoid());
657:       assertFalse(node0.isTrue());
658:       assertFalse(node0.isDebugger());
659:       assertFalse(node0.isNull());
660:       assertFalse(node0.isParamList());
661:       assertFalse(node0.isStringKey());
662:       assertFalse(node0.isCall());
663:       assertFalse(node0.isName());
664:       assertFalse(node0.isFor());
665:       assertFalse(node0.isGetterDef());
666:       assertFalse(node0.isBlock());
667:       assertFalse(node0.isTry());
668:       assertEquals(6119423, node0.getSourcePosition());
669:       assertFalse(node0.isWhile());
670:       assertFalse(node0.isDo());
671:       assertFalse(node0.isCase());
672:       assertFalse(node0.isOr());
673:       assertEquals(4095, node0.getCharno());
674:       assertFalse(node0.isDelProp());
675:       assertFalse(node0.isSwitch());
676:       assertFalse(node0.isLabelName());
677:       assertFalse(node0.isArrayLit());
678:       assertFalse(node0.isEmpty());
679:       assertFalse(node0.isAdd());
680:       assertFalse(node0.isLabel());
681:       assertFalse(node0.isNew());
682:       assertFalse(node0.isDefaultCase());
683:       assertFalse(node0.isAssignAdd());
684:       assertFalse(node0.isVar());
685:       assertFalse(node0.equals((Object)node2));
686:       assertFalse(node0.equals((Object)node1));
687:       assertTrue(boolean1 == boolean0);
688:       assertFalse(boolean1);
689:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
690:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
691:       assertEquals(8, Node.FLAG_NO_THROWS);
692:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
693:       assertEquals(50, Node.FREE_CALL);
694:       assertEquals(57, Node.REFLECTED_OBJECT);
695:       assertEquals(4095, Node.COLUMN_MASK);
696:       assertEquals(48, Node.DIRECTIVES);
697:       assertEquals(40, Node.ORIGINALNAME_PROP);
698:       assertEquals(36, Node.QUOTED_PROP);
699:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
700:       assertEquals(57, Node.LAST_PROP);
701:       assertEquals(30, Node.VAR_ARGS_NAME);
702:       assertEquals(55, Node.INFERRED_FUNCTION);
703:       assertEquals(52, Node.LENGTH);
704:       assertEquals(53, Node.INPUT_ID);
705:       assertEquals(29, Node.JSDOC_INFO_PROP);
706:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
707:       assertEquals(39, Node.EMPTY_BLOCK);
708:       assertEquals(15, Node.NO_SIDE_EFFECTS);
709:       assertEquals(56, Node.CHANGE_TIME);
710:       assertEquals(2, Node.POST_FLAG);
711:       assertEquals(47, Node.IS_DISPATCHER);
712:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
713:       assertEquals(46, Node.IS_NAMESPACE);
714:       assertEquals(49, Node.DIRECT_EVAL);
715:       assertEquals(37, Node.OPT_ARG_NAME);
716:       assertEquals(43, Node.IS_CONSTANT_NAME);
717:       assertEquals(54, Node.SLASH_V);
718:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
719:       assertEquals(51, Node.STATIC_SOURCE_FILE);
720:       assertEquals(12, Node.COLUMN_BITS);
721:       assertEquals(32, Node.INCRDECR_PROP);
722:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
723:       assertEquals(1, Node.DECR_FLAG);
724:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
725:       
726:       jSDocInfo0.setLendsName("com.google.javascript.rhino.Node$AncestorIterable");
727:       assertFalse(jSDocInfo0.hasType());
728:       assertFalse(jSDocInfo0.isJaggerProvide());
729:       assertEquals("com.google.javascript.rhino.Node$AncestorIterable", jSDocInfo0.getLendsName());
730:       assertFalse(jSDocInfo0.isMappedIdGenerator());
731:       assertFalse(jSDocInfo0.isStableIdGenerator());
732:       assertFalse(jSDocInfo0.isNoCompile());
733:       assertNull(jSDocInfo0.getDeprecationReason());
734:       assertFalse(jSDocInfo0.isHidden());
735:       assertNull(jSDocInfo0.getOriginalCommentString());
736:       assertFalse(jSDocInfo0.isDefine());
737:       assertFalse(jSDocInfo0.isDisposes());
738:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
739:       assertFalse(jSDocInfo0.isExterns());
740:       assertFalse(jSDocInfo0.isNgInject());
741:       assertEquals(0, jSDocInfo0.getParameterCount());
742:       assertFalse(jSDocInfo0.isExpose());
743:       assertFalse(jSDocInfo0.makesStructs());
744:       assertFalse(jSDocInfo0.shouldPreserveTry());
745:       assertFalse(jSDocInfo0.isNoShadow());
746:       assertFalse(jSDocInfo0.isDeprecated());
747:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
748:       assertFalse(jSDocInfo0.containsDeclaration());
749:       assertFalse(jSDocInfo0.makesDicts());
750:       assertFalse(jSDocInfo0.hasReturnType());
751:       assertFalse(jSDocInfo0.isNoAlias());
752:       assertEquals("JSDocInfo", jSDocInfo0.toString());
753:       assertFalse(jSDocInfo0.isNoSideEffects());
754:       assertNull(jSDocInfo0.getMeaning());
755:       assertFalse(jSDocInfo0.hasThisType());
756:       assertFalse(jSDocInfo0.isConstant());
757:       assertFalse(jSDocInfo0.hasModifies());
758:       assertFalse(jSDocInfo0.isJaggerInject());
759:       assertNull(jSDocInfo0.getDescription());
760:       assertFalse(jSDocInfo0.hasEnumParameterType());
761:       assertFalse(jSDocInfo0.hasTypedefType());
762:       assertFalse(jSDocInfo0.isConstructor());
763:       assertNull(jSDocInfo0.getVisibility());
764:       assertNull(jSDocInfo0.getFileOverview());
765:       assertNull(jSDocInfo0.getBlockDescription());
766:       assertFalse(jSDocInfo0.hasBaseType());
767:       assertFalse(jSDocInfo0.isIdGenerator());
768:       assertFalse(jSDocInfo0.isInterface());
769:       assertNull(jSDocInfo0.getReturnDescription());
770:       assertFalse(jSDocInfo0.hasFileOverview());
771:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
772:       assertNull(jSDocInfo0.getLicense());
773:       assertFalse(jSDocInfo0.isJaggerModule());
774:       assertFalse(jSDocInfo0.isNoTypeCheck());
775:       assertFalse(jSDocInfo0.isImplicitCast());
776:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
777:       assertFalse(jSDocInfo0.isWizaction());
778:       assertFalse(jSDocInfo0.isExport());
779:       assertFalse(jSDocInfo0.isOverride());
780:       assertFalse(jSDocInfo0.isJavaDispatch());
781:       assertNull(jSDocInfo0.getVersion());
782:       
783:       node1.addSuppression("gs1IcjVs7cZy}^~");
784:       assertFalse(node1.isCatch());
785:       assertFalse(node1.isRegExp());
786:       assertFalse(node1.isFunction());
787:       assertFalse(node1.isDefaultCase());
788:       assertEquals(0, node1.getChildCount());
789:       assertFalse(node1.isArrayLit());
790:       assertFalse(node1.isStringKey());
791:       assertFalse(node1.isTry());
792:       assertFalse(node1.isParamList());
793:       assertFalse(node1.isGetterDef());
794:       assertFalse(node1.isDebugger());
795:       assertEquals(213488, node1.getSourcePosition());
796:       assertFalse(node1.isAssignAdd());
797:       assertFalse(node1.isDo());
798:       assertTrue(node1.isNumber());
799:       assertFalse(node1.isTypeOf());
800:       assertFalse(node1.isWhile());
801:       assertFalse(node1.isAssign());
802:       assertFalse(node1.isLabel());
803:       assertFalse(node1.isReturn());
804:       assertFalse(node1.hasChildren());
805:       assertFalse(node1.isDec());
806:       assertFalse(node1.isVar());
807:       assertFalse(node1.isCall());
808:       assertFalse(node1.isAdd());
809:       assertFalse(node1.isEmpty());
810:       assertFalse(node1.isGetElem());
811:       assertFalse(node1.isName());
812:       assertFalse(node1.isBreak());
813:       assertFalse(node1.isDelProp());
814:       assertFalse(node1.isVoid());
815:       assertFalse(node1.isNew());
816:       assertFalse(node1.isTrue());
817:       assertFalse(node1.isNull());
818:       assertFalse(node1.isOr());
819:       assertFalse(node1.isAnd());
820:       assertFalse(node1.isInstanceOf());
821:       assertFalse(node1.isGetProp());
822:       assertFalse(node1.isThis());
823:       assertFalse(node1.isExprResult());
824:       assertFalse(node1.isFalse());
825:       assertFalse(node1.isWith());
826:       assertFalse(node1.isComma());
827:       assertFalse(node1.isCast());
828:       assertFalse(node1.isHook());
829:       assertFalse(node1.isLabelName());
830:       assertFalse(node1.hasOneChild());
831:       assertFalse(node1.isSwitch());
832:       assertEquals(52, node1.getLineno());
833:       assertFalse(node1.isScript());
834:       assertFalse(node1.isString());
835:       assertFalse(node1.isNot());
836:       assertFalse(node1.isObjectLit());
837:       assertFalse(node1.hasMoreThanOneChild());
838:       assertFalse(node1.isIn());
839:       assertFalse(node1.isContinue());
840:       assertFalse(node1.isCase());
841:       assertEquals(496, node1.getCharno());
842:       assertFalse(node1.isFor());
843:       assertEquals(39, node1.getType());
844:       assertFalse(node1.isBlock());
845:       assertFalse(node1.isThrow());
846:       assertFalse(node1.isNE());
847:       assertFalse(node1.isSetterDef());
848:       assertFalse(node1.isInc());
849:       assertFalse(node1.isIf());
850:       assertFalse(node1.equals((Object)node0));
851:       assertFalse(node1.equals((Object)node2));
852:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
853:       assertEquals(50, Node.FREE_CALL);
854:       assertEquals(8, Node.FLAG_NO_THROWS);
855:       assertEquals(39, Node.EMPTY_BLOCK);
856:       assertEquals(40, Node.ORIGINALNAME_PROP);
857:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
858:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
859:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
860:       assertEquals(57, Node.LAST_PROP);
861:       assertEquals(49, Node.DIRECT_EVAL);
862:       assertEquals(15, Node.NO_SIDE_EFFECTS);
863:       assertEquals(36, Node.QUOTED_PROP);
864:       assertEquals(55, Node.INFERRED_FUNCTION);
865:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
866:       assertEquals(4095, Node.COLUMN_MASK);
867:       assertEquals(52, Node.LENGTH);
868:       assertEquals(57, Node.REFLECTED_OBJECT);
869:       assertEquals(37, Node.OPT_ARG_NAME);
870:       assertEquals(48, Node.DIRECTIVES);
871:       assertEquals(56, Node.CHANGE_TIME);
872:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
873:       assertEquals(29, Node.JSDOC_INFO_PROP);
874:       assertEquals(47, Node.IS_DISPATCHER);
875:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
876:       assertEquals(2, Node.POST_FLAG);
877:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
878:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
879:       assertEquals(32, Node.INCRDECR_PROP);
880:       assertEquals(53, Node.INPUT_ID);
881:       assertEquals(12, Node.COLUMN_BITS);
882:       assertEquals(30, Node.VAR_ARGS_NAME);
883:       assertEquals(1, Node.DECR_FLAG);
884:       assertEquals(46, Node.IS_NAMESPACE);
885:       assertEquals(51, Node.STATIC_SOURCE_FILE);
886:       assertEquals(54, Node.SLASH_V);
887:       assertEquals(43, Node.IS_CONSTANT_NAME);
888:       
889:       boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
890:       assertTrue(boolean2 == boolean1);
891:       assertTrue(boolean2 == boolean0);
892:       assertFalse(boolean2);
893:       
894:       boolean boolean3 = node0.isArrayLit();
895:       assertFalse(node0.isObjectLit());
896:       assertFalse(node0.isNot());
897:       assertFalse(node0.isInstanceOf());
898:       assertEquals(1493, node0.getLineno());
899:       assertFalse(node0.isScript());
900:       assertFalse(node0.isWith());
901:       assertEquals(1, node0.getType());
902:       assertFalse(node0.isExprResult());
903:       assertFalse(node0.isAnd());
904:       assertFalse(node0.isGetElem());
905:       assertFalse(node0.isAssign());
906:       assertFalse(node0.hasOneChild());
907:       assertFalse(node0.isBreak());
908:       assertFalse(node0.isDec());
909:       assertFalse(node0.isNumber());
910:       assertFalse(node0.isTypeOf());
911:       assertFalse(node0.isGetProp());
912:       assertFalse(node0.isThis());
913:       assertFalse(node0.isComma());
914:       assertFalse(node0.isHook());
915:       assertFalse(node0.hasChildren());
916:       assertFalse(node0.isReturn());
917:       assertFalse(node0.isIn());
918:       assertFalse(node0.hasMoreThanOneChild());
919:       assertFalse(node0.isString());
920:       assertFalse(node0.isContinue());
921:       assertFalse(node0.isIf());
922:       assertFalse(node0.isNE());
923:       assertFalse(node0.isThrow());
924:       assertFalse(node0.isFalse());
925:       assertFalse(node0.isCast());
926:       assertFalse(node0.isFunction());
927:       assertFalse(node0.isInc());
928:       assertFalse(node0.isSetterDef());
929:       assertEquals(0, node0.getChildCount());
930:       assertFalse(node0.isRegExp());
931:       assertFalse(node0.isCatch());
932:       assertFalse(node0.isVoid());
933:       assertFalse(node0.isTrue());
934:       assertFalse(node0.isDebugger());
935:       assertFalse(node0.isNull());
936:       assertFalse(node0.isParamList());
937:       assertFalse(node0.isStringKey());
938:       assertFalse(node0.isCall());
939:       assertFalse(node0.isName());
940:       assertFalse(node0.isFor());
941:       assertFalse(node0.isGetterDef());
942:       assertFalse(node0.isBlock());
943:       assertFalse(node0.isTry());
944:       assertEquals(6119423, node0.getSourcePosition());
945:       assertFalse(node0.isWhile());
946:       assertFalse(node0.isDo());
947:       assertFalse(node0.isCase());
948:       assertFalse(node0.isOr());
949:       assertEquals(4095, node0.getCharno());
950:       assertFalse(node0.isDelProp());
951:       assertFalse(node0.isSwitch());
952:       assertFalse(node0.isLabelName());
953:       assertFalse(node0.isArrayLit());
954:       assertFalse(node0.isEmpty());
955:       assertFalse(node0.isAdd());
956:       assertFalse(node0.isLabel());
957:       assertFalse(node0.isNew());
958:       assertFalse(node0.isDefaultCase());
959:       assertFalse(node0.isAssignAdd());
960:       assertFalse(node0.isVar());
961:       assertFalse(node0.equals((Object)node2));
962:       assertFalse(node0.equals((Object)node1));
963:       assertTrue(boolean3 == boolean2);
964:       assertTrue(boolean3 == boolean1);
965:       assertTrue(boolean3 == boolean0);
966:       assertFalse(boolean3);
967:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
968:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
969:       assertEquals(8, Node.FLAG_NO_THROWS);
970:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
971:       assertEquals(50, Node.FREE_CALL);
972:       assertEquals(57, Node.REFLECTED_OBJECT);
973:       assertEquals(4095, Node.COLUMN_MASK);
974:       assertEquals(48, Node.DIRECTIVES);
975:       assertEquals(40, Node.ORIGINALNAME_PROP);
976:       assertEquals(36, Node.QUOTED_PROP);
977:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
978:       assertEquals(57, Node.LAST_PROP);
979:       assertEquals(30, Node.VAR_ARGS_NAME);
980:       assertEquals(55, Node.INFERRED_FUNCTION);
981:       assertEquals(52, Node.LENGTH);
982:       assertEquals(53, Node.INPUT_ID);
983:       assertEquals(29, Node.JSDOC_INFO_PROP);
984:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
985:       assertEquals(39, Node.EMPTY_BLOCK);
986:       assertEquals(15, Node.NO_SIDE_EFFECTS);
987:       assertEquals(56, Node.CHANGE_TIME);
988:       assertEquals(2, Node.POST_FLAG);
989:       assertEquals(47, Node.IS_DISPATCHER);
990:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
991:       assertEquals(46, Node.IS_NAMESPACE);
992:       assertEquals(49, Node.DIRECT_EVAL);
993:       assertEquals(37, Node.OPT_ARG_NAME);
994:       assertEquals(43, Node.IS_CONSTANT_NAME);
995:       assertEquals(54, Node.SLASH_V);
996:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
997:       assertEquals(51, Node.STATIC_SOURCE_FILE);
998:       assertEquals(12, Node.COLUMN_BITS);
999:       assertEquals(32, Node.INCRDECR_PROP);
1000:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1001:       assertEquals(1, Node.DECR_FLAG);
1002:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1003:       
1004:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
1005:       assertFalse(node0.isObjectLit());
1006:       assertFalse(node0.isNot());
1007:       assertFalse(node0.isInstanceOf());
1008:       assertEquals(1493, node0.getLineno());
1009:       assertFalse(node0.isScript());
1010:       assertFalse(node0.isWith());
1011:       assertEquals(1, node0.getType());
1012:       assertFalse(node0.isExprResult());
1013:       assertFalse(node0.isAnd());
1014:       assertFalse(node0.isGetElem());
1015:       assertFalse(node0.isAssign());
1016:       assertFalse(node0.hasOneChild());
1017:       assertFalse(node0.isBreak());
1018:       assertFalse(node0.isDec());
1019:       assertFalse(node0.isNumber());
1020:       assertFalse(node0.isTypeOf());
1021:       assertFalse(node0.isGetProp());
1022:       assertFalse(node0.isThis());
1023:       assertFalse(node0.isComma());
1024:       assertFalse(node0.isHook());
1025:       assertFalse(node0.hasChildren());
1026:       assertFalse(node0.isReturn());
1027:       assertFalse(node0.isIn());
1028:       assertFalse(node0.hasMoreThanOneChild());
1029:       assertFalse(node0.isString());
1030:       assertFalse(node0.isContinue());
1031:       assertFalse(node0.isIf());
1032:       assertFalse(node0.isNE());
1033:       assertFalse(node0.isThrow());
1034:       assertFalse(node0.isFalse());
1035:       assertFalse(node0.isCast());
1036:       assertFalse(node0.isFunction());
1037:       assertFalse(node0.isInc());
1038:       assertFalse(node0.isSetterDef());
1039:       assertEquals(0, node0.getChildCount());
1040:       assertFalse(node0.isRegExp());
1041:       assertFalse(node0.isCatch());
1042:       assertFalse(node0.isVoid());
1043:       assertFalse(node0.isTrue());
1044:       assertFalse(node0.isDebugger());
1045:       assertFalse(node0.isNull());
1046:       assertFalse(node0.isParamList());
1047:       assertFalse(node0.isStringKey());
1048:       assertFalse(node0.isCall());
1049:       assertFalse(node0.isName());
1050:       assertFalse(node0.isFor());
1051:       assertFalse(node0.isGetterDef());
1052:       assertFalse(node0.isBlock());
1053:       assertFalse(node0.isTry());
1054:       assertEquals(6119423, node0.getSourcePosition());
1055:       assertFalse(node0.isWhile());
1056:       assertFalse(node0.isDo());
1057:       assertFalse(node0.isCase());
1058:       assertFalse(node0.isOr());
1059:       assertEquals(4095, node0.getCharno());
1060:       assertFalse(node0.isDelProp());
1061:       assertFalse(node0.isSwitch());
1062:       assertFalse(node0.isLabelName());
1063:       assertFalse(node0.isArrayLit());
1064:       assertFalse(node0.isEmpty());
1065:       assertFalse(node0.isAdd());
1066:       assertFalse(node0.isLabel());
1067:       assertFalse(node0.isNew());
1068:       assertFalse(node0.isDefaultCase());
1069:       assertFalse(node0.isAssignAdd());
1070:       assertFalse(node0.isVar());
1071:       assertNull(node_NodeMismatch0);
1072:       assertFalse(node0.equals((Object)node2));
1073:       assertFalse(node0.equals((Object)node1));
1074:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1075:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1076:       assertEquals(8, Node.FLAG_NO_THROWS);
1077:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1078:       assertEquals(50, Node.FREE_CALL);
1079:       assertEquals(57, Node.REFLECTED_OBJECT);
1080:       assertEquals(4095, Node.COLUMN_MASK);
1081:       assertEquals(48, Node.DIRECTIVES);
1082:       assertEquals(40, Node.ORIGINALNAME_PROP);
1083:       assertEquals(36, Node.QUOTED_PROP);
1084:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1085:       assertEquals(57, Node.LAST_PROP);
1086:       assertEquals(30, Node.VAR_ARGS_NAME);
1087:       assertEquals(55, Node.INFERRED_FUNCTION);
1088:       assertEquals(52, Node.LENGTH);
1089:       assertEquals(53, Node.INPUT_ID);
1090:       assertEquals(29, Node.JSDOC_INFO_PROP);
1091:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1092:       assertEquals(39, Node.EMPTY_BLOCK);
1093:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1094:       assertEquals(56, Node.CHANGE_TIME);
1095:       assertEquals(2, Node.POST_FLAG);
1096:       assertEquals(47, Node.IS_DISPATCHER);
1097:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1098:       assertEquals(46, Node.IS_NAMESPACE);
1099:       assertEquals(49, Node.DIRECT_EVAL);
1100:       assertEquals(37, Node.OPT_ARG_NAME);
1101:       assertEquals(43, Node.IS_CONSTANT_NAME);
1102:       assertEquals(54, Node.SLASH_V);
1103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1104:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1105:       assertEquals(12, Node.COLUMN_BITS);
1106:       assertEquals(32, Node.INCRDECR_PROP);
1107:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1108:       assertEquals(1, Node.DECR_FLAG);
1109:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1110:       
1111:       boolean boolean4 = node0.wasEmptyNode();
1112:       assertFalse(node0.isObjectLit());
1113:       assertFalse(node0.isNot());
1114:       assertFalse(node0.isInstanceOf());
1115:       assertEquals(1493, node0.getLineno());
1116:       assertFalse(node0.isScript());
1117:       assertFalse(node0.isWith());
1118:       assertEquals(1, node0.getType());
1119:       assertFalse(node0.isExprResult());
1120:       assertFalse(node0.isAnd());
1121:       assertFalse(node0.isGetElem());
1122:       assertFalse(node0.isAssign());
1123:       assertFalse(node0.hasOneChild());
1124:       assertFalse(node0.isBreak());
1125:       assertFalse(node0.isDec());
1126:       assertFalse(node0.isNumber());
1127:       assertFalse(node0.isTypeOf());
1128:       assertFalse(node0.isGetProp());
1129:       assertFalse(node0.isThis());
1130:       assertFalse(node0.isComma());
1131:       assertFalse(node0.isHook());
1132:       assertFalse(node0.hasChildren());
1133:       assertFalse(node0.isReturn());
1134:       assertFalse(node0.isIn());
1135:       assertFalse(node0.hasMoreThanOneChild());
1136:       assertFalse(node0.isString());
1137:       assertFalse(node0.isContinue());
1138:       assertFalse(node0.isIf());
1139:       assertFalse(node0.isNE());
1140:       assertFalse(node0.isThrow());
1141:       assertFalse(node0.isFalse());
1142:       assertFalse(node0.isCast());
1143:       assertFalse(node0.isFunction());
1144:       assertFalse(node0.isInc());
1145:       assertFalse(node0.isSetterDef());
1146:       assertEquals(0, node0.getChildCount());
1147:       assertFalse(node0.isRegExp());
1148:       assertFalse(node0.isCatch());
1149:       assertFalse(node0.isVoid());
1150:       assertFalse(node0.isTrue());
1151:       assertFalse(node0.isDebugger());
1152:       assertFalse(node0.isNull());
1153:       assertFalse(node0.isParamList());
1154:       assertFalse(node0.isStringKey());
1155:       assertFalse(node0.isCall());
1156:       assertFalse(node0.isName());
1157:       assertFalse(node0.isFor());
1158:       assertFalse(node0.isGetterDef());
1159:       assertFalse(node0.isBlock());
1160:       assertFalse(node0.isTry());
1161:       assertEquals(6119423, node0.getSourcePosition());
1162:       assertFalse(node0.isWhile());
1163:       assertFalse(node0.isDo());
1164:       assertFalse(node0.isCase());
1165:       assertFalse(node0.isOr());
1166:       assertEquals(4095, node0.getCharno());
1167:       assertFalse(node0.isDelProp());
1168:       assertFalse(node0.isSwitch());
1169:       assertFalse(node0.isLabelName());
1170:       assertFalse(node0.isArrayLit());
1171:       assertFalse(node0.isEmpty());
1172:       assertFalse(node0.isAdd());
1173:       assertFalse(node0.isLabel());
1174:       assertFalse(node0.isNew());
1175:       assertFalse(node0.isDefaultCase());
1176:       assertFalse(node0.isAssignAdd());
1177:       assertFalse(node0.isVar());
1178:       assertFalse(node0.equals((Object)node2));
1179:       assertFalse(node0.equals((Object)node1));
1180:       assertTrue(boolean4 == boolean2);
1181:       assertTrue(boolean4 == boolean0);
1182:       assertTrue(boolean4 == boolean3);
1183:       assertTrue(boolean4 == boolean1);
1184:       assertFalse(boolean4);
1185:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1186:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1187:       assertEquals(8, Node.FLAG_NO_THROWS);
1188:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1189:       assertEquals(50, Node.FREE_CALL);
1190:       assertEquals(57, Node.REFLECTED_OBJECT);
1191:       assertEquals(4095, Node.COLUMN_MASK);
1192:       assertEquals(48, Node.DIRECTIVES);
1193:       assertEquals(40, Node.ORIGINALNAME_PROP);
1194:       assertEquals(36, Node.QUOTED_PROP);
1195:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1196:       assertEquals(57, Node.LAST_PROP);
1197:       assertEquals(30, Node.VAR_ARGS_NAME);
1198:       assertEquals(55, Node.INFERRED_FUNCTION);
1199:       assertEquals(52, Node.LENGTH);
1200:       assertEquals(53, Node.INPUT_ID);
1201:       assertEquals(29, Node.JSDOC_INFO_PROP);
1202:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1203:       assertEquals(39, Node.EMPTY_BLOCK);
1204:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1205:       assertEquals(56, Node.CHANGE_TIME);
1206:       assertEquals(2, Node.POST_FLAG);
1207:       assertEquals(47, Node.IS_DISPATCHER);
1208:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1209:       assertEquals(46, Node.IS_NAMESPACE);
1210:       assertEquals(49, Node.DIRECT_EVAL);
1211:       assertEquals(37, Node.OPT_ARG_NAME);
1212:       assertEquals(43, Node.IS_CONSTANT_NAME);
1213:       assertEquals(54, Node.SLASH_V);
1214:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1215:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1216:       assertEquals(12, Node.COLUMN_BITS);
1217:       assertEquals(32, Node.INCRDECR_PROP);
1218:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1219:       assertEquals(1, Node.DECR_FLAG);
1220:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1221:       
1222:       int int0 = node1.getChangeTime();
1223:       assertFalse(node1.isCatch());
1224:       assertFalse(node1.isRegExp());
1225:       assertFalse(node1.isFunction());
1226:       assertFalse(node1.isDefaultCase());
1227:       assertEquals(0, node1.getChildCount());
1228:       assertFalse(node1.isArrayLit());
1229:       assertFalse(node1.isStringKey());
1230:       assertFalse(node1.isTry());
1231:       assertFalse(node1.isParamList());
1232:       assertFalse(node1.isGetterDef());
1233:       assertFalse(node1.isDebugger());
1234:       assertEquals(213488, node1.getSourcePosition());
1235:       assertFalse(node1.isAssignAdd());
1236:       assertFalse(node1.isDo());
1237:       assertTrue(node1.isNumber());
1238:       assertFalse(node1.isTypeOf());
1239:       assertFalse(node1.isWhile());
1240:       assertFalse(node1.isAssign());
1241:       assertFalse(node1.isLabel());
1242:       assertFalse(node1.isReturn());
1243:       assertFalse(node1.hasChildren());
1244:       assertFalse(node1.isDec());
1245:       assertFalse(node1.isVar());
1246:       assertFalse(node1.isCall());
1247:       assertFalse(node1.isAdd());
1248:       assertFalse(node1.isEmpty());
1249:       assertFalse(node1.isGetElem());
1250:       assertFalse(node1.isName());
1251:       assertFalse(node1.isBreak());
1252:       assertFalse(node1.isDelProp());
1253:       assertFalse(node1.isVoid());
1254:       assertFalse(node1.isNew());
1255:       assertFalse(node1.isTrue());
1256:       assertFalse(node1.isNull());
1257:       assertFalse(node1.isOr());
1258:       assertFalse(node1.isAnd());
1259:       assertFalse(node1.isInstanceOf());
1260:       assertFalse(node1.isGetProp());
1261:       assertFalse(node1.isThis());
1262:       assertFalse(node1.isExprResult());
1263:       assertFalse(node1.isFalse());
1264:       assertFalse(node1.isWith());
1265:       assertFalse(node1.isComma());
1266:       assertFalse(node1.isCast());
1267:       assertFalse(node1.isHook());
1268:       assertFalse(node1.isLabelName());
1269:       assertFalse(node1.hasOneChild());
1270:       assertFalse(node1.isSwitch());
1271:       assertEquals(52, node1.getLineno());
1272:       assertFalse(node1.isScript());
1273:       assertFalse(node1.isString());
1274:       assertFalse(node1.isNot());
1275:       assertFalse(node1.isObjectLit());
1276:       assertFalse(node1.hasMoreThanOneChild());
1277:       assertFalse(node1.isIn());
1278:       assertFalse(node1.isContinue());
1279:       assertFalse(node1.isCase());
1280:       assertEquals(496, node1.getCharno());
1281:       assertFalse(node1.isFor());
1282:       assertEquals(39, node1.getType());
1283:       assertFalse(node1.isBlock());
1284:       assertFalse(node1.isThrow());
1285:       assertFalse(node1.isNE());
1286:       assertFalse(node1.isSetterDef());
1287:       assertFalse(node1.isInc());
1288:       assertFalse(node1.isIf());
1289:       assertFalse(node1.equals((Object)node0));
1290:       assertFalse(node1.equals((Object)node2));
1291:       assertEquals(0, int0);
1292:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1293:       assertEquals(50, Node.FREE_CALL);
1294:       assertEquals(8, Node.FLAG_NO_THROWS);
1295:       assertEquals(39, Node.EMPTY_BLOCK);
1296:       assertEquals(40, Node.ORIGINALNAME_PROP);
1297:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1298:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1299:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1300:       assertEquals(57, Node.LAST_PROP);
1301:       assertEquals(49, Node.DIRECT_EVAL);
1302:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1303:       assertEquals(36, Node.QUOTED_PROP);
1304:       assertEquals(55, Node.INFERRED_FUNCTION);
1305:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1306:       assertEquals(4095, Node.COLUMN_MASK);
1307:       assertEquals(52, Node.LENGTH);
1308:       assertEquals(57, Node.REFLECTED_OBJECT);
1309:       assertEquals(37, Node.OPT_ARG_NAME);
1310:       assertEquals(48, Node.DIRECTIVES);
1311:       assertEquals(56, Node.CHANGE_TIME);
1312:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1313:       assertEquals(29, Node.JSDOC_INFO_PROP);
1314:       assertEquals(47, Node.IS_DISPATCHER);
1315:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1316:       assertEquals(2, Node.POST_FLAG);
1317:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1318:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1319:       assertEquals(32, Node.INCRDECR_PROP);
1320:       assertEquals(53, Node.INPUT_ID);
1321:       assertEquals(12, Node.COLUMN_BITS);
1322:       assertEquals(30, Node.VAR_ARGS_NAME);
1323:       assertEquals(1, Node.DECR_FLAG);
1324:       assertEquals(46, Node.IS_NAMESPACE);
1325:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1326:       assertEquals(54, Node.SLASH_V);
1327:       assertEquals(43, Node.IS_CONSTANT_NAME);
1328:       
1329:       // Undeclared exception!
1330:       try { 
1331:         node0.getExistingIntProp(52);
1332:         fail("Expecting exception: IllegalStateException");
1333:       
1334:       } catch(IllegalStateException e) {
1335:          //
1336:          // missing prop: 52
1337:          //
1338:          verifyException("com.google.javascript.rhino.Node", e);
1339:       }
1340:   }
1341: }
RegularFileObject[/tmp/EvoSuite_137_1629223401049/com/google/javascript/rhino/Node_137_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:03:21 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_137_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_137_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.Platform",
101:       "com.google.common.collect.ImmutableMapKeySet",
102:       "com.google.javascript.rhino.JSDocInfo$Marker",
103:       "com.google.common.collect.RegularImmutableMap",
104:       "com.google.common.collect.RegularImmutableBiMap",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.javascript.rhino.jstype.RecordType",
107:       "com.google.common.collect.SortedMapDifference",
108:       "com.google.common.collect.RegularImmutableSet",
109:       "com.google.javascript.rhino.jstype.ModificationVisitor",
110:       "com.google.javascript.rhino.jstype.PropertyMap$1",
111:       "com.google.common.collect.AbstractMapEntry",
112:       "com.google.javascript.rhino.Node$AncestorIterable$1",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.common.collect.Iterables",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.common.collect.SingletonImmutableSet",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.common.collect.Iterators$1",
207:       "com.google.common.collect.Iterators$2",
208:       "com.google.javascript.rhino.jstype.NamespaceType",
209:       "com.google.common.collect.Iterators$3",
210:       "com.google.common.collect.Sets",
211:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
212:       "com.google.javascript.rhino.Node$ObjectPropListItem",
213:       "com.google.common.collect.Lists$StringAsImmutableList",
214:       "com.google.common.collect.Lists$2",
215:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
216:       "com.google.common.collect.ImmutableList$Builder",
217:       "com.google.common.collect.Lists$1",
218:       "com.google.javascript.rhino.jstype.StaticReference",
219:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
220:       "com.google.common.collect.Multiset",
221:       "com.google.common.collect.AbstractMultimap",
222:       "com.google.common.collect.Multimap",
223:       "com.google.common.collect.Iterators",
224:       "com.google.common.collect.EmptyImmutableSet",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
228:       "com.google.common.collect.ImmutableList",
229:       "com.google.common.collect.SingletonImmutableBiMap",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
231:       "com.google.javascript.rhino.jstype.StringType",
232:       "com.google.javascript.rhino.Node$AbstractPropListItem",
233:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
234:       "com.google.javascript.rhino.jstype.TemplatizedType",
235:       "com.google.javascript.rhino.jstype.Visitor",
236:       "com.google.javascript.rhino.jstype.NoResolvedType",
237:       "com.google.javascript.rhino.jstype.JSTypeNative",
238:       "com.google.javascript.rhino.jstype.AllType",
239:       "com.google.common.collect.Maps",
240:       "com.google.common.collect.SetMultimap",
241:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
242:       "com.google.common.collect.Maps$EntryTransformer",
243:       "com.google.javascript.rhino.JSTypeExpression",
244:       "com.google.common.collect.Iterators$MergingIterator"
245:     );
246:   } 
247: 
248:   private static void resetClasses() {
249:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_137_tmp__ESTest_scaffolding.class.getClassLoader()); 
250: 
251:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
252:       "com.google.javascript.rhino.Node",
253:       "com.google.javascript.rhino.Node$NumberNode",
254:       "com.google.javascript.rhino.Node$StringNode",
255:       "com.google.javascript.rhino.Node$AbstractPropListItem",
256:       "com.google.javascript.rhino.Node$ObjectPropListItem",
257:       "com.google.javascript.rhino.Node$IntPropListItem",
258:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
259:       "com.google.javascript.rhino.Node$AncestorIterable",
260:       "com.google.javascript.rhino.Node$NodeMismatch",
261:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
262:       "com.google.javascript.rhino.Node$SideEffectFlags",
263:       "com.google.javascript.rhino.Token",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Preconditions",
267:       "com.google.common.base.Joiner$1",
268:       "com.google.common.collect.Collections2",
269:       "com.google.common.base.Joiner$MapJoiner",
270:       "com.google.common.collect.Maps",
271:       "com.google.common.collect.AbstractMultimap",
272:       "com.google.common.collect.AbstractMapBasedMultimap",
273:       "com.google.common.collect.AbstractSetMultimap",
274:       "com.google.common.collect.LinkedHashMultimap",
275:       "com.google.common.collect.AbstractMapEntry",
276:       "com.google.common.collect.ImmutableEntry",
277:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
278:       "com.google.common.collect.AbstractListMultimap",
279:       "com.google.common.collect.ArrayListMultimap",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
281:       "com.google.common.collect.ImmutableCollection",
282:       "com.google.common.collect.RegularImmutableList",
283:       "com.google.common.collect.ObjectArrays",
284:       "com.google.common.collect.ImmutableList",
285:       "com.google.javascript.rhino.jstype.ModificationVisitor",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
287:       "com.google.common.collect.ImmutableCollection$Builder",
288:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
289:       "com.google.common.collect.ImmutableList$Builder",
290:       "com.google.common.collect.UnmodifiableIterator",
291:       "com.google.common.collect.UnmodifiableListIterator",
292:       "com.google.common.collect.Iterators$1",
293:       "com.google.common.collect.Iterators$2",
294:       "com.google.common.collect.Iterators",
295:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
296:       "com.google.javascript.rhino.jstype.JSType$1",
297:       "com.google.javascript.rhino.jstype.JSType",
298:       "com.google.javascript.rhino.jstype.ObjectType",
299:       "com.google.javascript.rhino.jstype.ProxyObjectType",
300:       "com.google.javascript.rhino.jstype.TemplateType",
301:       "com.google.javascript.rhino.jstype.ValueType",
302:       "com.google.javascript.rhino.jstype.BooleanType",
303:       "com.google.javascript.rhino.jstype.NullType",
304:       "com.google.javascript.rhino.jstype.NumberType",
305:       "com.google.javascript.rhino.jstype.StringType",
306:       "com.google.javascript.rhino.jstype.UnknownType",
307:       "com.google.javascript.rhino.jstype.VoidType",
308:       "com.google.javascript.rhino.jstype.AllType",
309:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
310:       "com.google.common.collect.ImmutableMap",
311:       "com.google.common.collect.ImmutableBiMap",
312:       "com.google.common.collect.EmptyImmutableBiMap",
313:       "com.google.javascript.rhino.jstype.PropertyMap$1",
314:       "com.google.javascript.rhino.jstype.PropertyMap",
315:       "com.google.javascript.rhino.jstype.FunctionType",
316:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.ImmutableList$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Platform",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.InputId",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.Iterators$12",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
366:       "com.google.javascript.rhino.jstype.JSType$TypePair",
367:       "com.google.javascript.rhino.jstype.TernaryValue",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
370:     );
371:   }
372: }

[MASTER] 18:03:21.337 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = "gs1IcjVs7cZy}^~";
boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

Node node0 = Node.newString(1, "gs1IcjVs7cZy}^~", 1493, 4358);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertEquals(1493, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertEquals(1, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isOr());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertNotNull(node0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

Node node1 = Node.newNumber((double) 49, 52, 496);
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals(213488, node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertTrue(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertEquals(52, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertEquals(496, node1.getCharno());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

JSDocInfo jSDocInfo0 = new JSDocInfo(true);
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isNoCompile());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isDisposes());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isNgInject());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isDeprecated());
assertNull(jSDocInfo0.getLendsName());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isImplicitCast());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getVersion());
assertNotNull(jSDocInfo0);

Node node2 = new Node(43, node0, node0, node0);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertEquals(1493, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertEquals(1, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isOr());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isVoid());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertTrue(node2.hasOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isFunction());
assertFalse(node2.isDec());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isCall());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isVar());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isParamList());
assertEquals(43, node2.getType());
assertTrue(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertEquals(1493, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertEquals(1, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isOr());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node2));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean1 = node0.isAnd();
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertEquals(1493, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertEquals(1, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isOr());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

jSDocInfo0.setLendsName("com.google.javascript.rhino.Node$AncestorIterable");
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isJaggerProvide());
assertEquals("com.google.javascript.rhino.Node$AncestorIterable", jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isNoCompile());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isDisposes());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isNgInject());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isDeprecated());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isImplicitCast());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getVersion());

node1.addSuppression("gs1IcjVs7cZy}^~");
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals(213488, node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertTrue(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertEquals(52, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertEquals(496, node1.getCharno());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);

boolean boolean3 = node0.isArrayLit();
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertEquals(1493, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertEquals(1, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isOr());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(boolean3);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertEquals(1493, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertEquals(1, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isOr());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertNull(node_NodeMismatch0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean4 = node0.wasEmptyNode();
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertEquals(1493, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertEquals(1, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(6119423, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isOr());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertFalse(boolean4);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

int int0 = node1.getChangeTime();
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals(213488, node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertTrue(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertEquals(52, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertEquals(496, node1.getCharno());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(0, int0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

node0.getExistingIntProp(52);

[MASTER] 18:03:54.810 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:55.195 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:55.522 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:55.805 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:56.133 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:57.207 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:57.398 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:57.608 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:57.874 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:58.103 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:58.333 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:58.581 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:58.787 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:59.045 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:59.222 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:59.444 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/29
* Done!

* Computation finished
