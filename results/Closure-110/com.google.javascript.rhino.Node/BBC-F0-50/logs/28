* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 3775
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1336465415
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:49:54.433 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:49:57.183 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:49:57.863 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 2434: com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;:764 - ReplaceComparisonOperator == -> >=
[MASTER] 17:50:00.137 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.setQuotedString()V
[MASTER] 17:50:55.151 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 17:56:27.523 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 17:57:21.548 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.EnumType canUseFunctionalMocks=false, canBeMocked: true
* Search finished after 605s and 331 generations, 182501 statements, best individual has fitness: 3079.0
* Minimizing test suite
[MASTER] 18:01:17.161 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 799
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 599
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 102
* Number of covered goals: 102
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 86%
* Total number of goals: 530
* Number of covered goals: 455
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 45%
* Total number of goals: 4536
* Number of covered goals: 2030
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 78%
* Total number of goals: 714
* Number of covered goals: 559
* Generated 673 tests with total length 10702
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:02:32.163 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6772166666666667% of time used, but only 20/673 tests minimized), falling back to using all assertions
[MASTER] 18:02:51.570 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
[MASTER] 18:02:59.550 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 8 seconds more than allowed.
[MASTER] 18:03:06.346 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_48_1629223385817/com/google/javascript/rhino/Node_48_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_48_1629223385817/com/google/javascript/rhino/Node_48_tmp__ESTest_scaffolding.java]]
[MASTER] 18:03:06.346 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:03:06.346 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:03:06.351 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2211
[MASTER] 18:03:06.354 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_48_1629223385817/com/google/javascript/rhino/Node_48_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:03:05 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.ErrorReporter;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.BooleanLiteralSet;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import com.google.javascript.rhino.jstype.TemplateType;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_48_tmp__ESTest extends Node_48_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = Node.newNumber((double) (-220), (-220), (-220));
26:       assertEquals(51, Node.STATIC_SOURCE_FILE);
27:       assertEquals(32, Node.INCRDECR_PROP);
28:       assertEquals(37, Node.OPT_ARG_NAME);
29:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
30:       assertEquals(57, Node.LAST_PROP);
31:       assertEquals(47, Node.IS_DISPATCHER);
32:       assertEquals(2, Node.POST_FLAG);
33:       assertEquals(30, Node.VAR_ARGS_NAME);
34:       assertEquals(1, Node.DECR_FLAG);
35:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
36:       assertEquals(12, Node.COLUMN_BITS);
37:       assertEquals(40, Node.ORIGINALNAME_PROP);
38:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
39:       assertEquals(50, Node.FREE_CALL);
40:       assertEquals(43, Node.IS_CONSTANT_NAME);
41:       assertEquals(46, Node.IS_NAMESPACE);
42:       assertEquals(54, Node.SLASH_V);
43:       assertEquals(48, Node.DIRECTIVES);
44:       assertEquals(8, Node.FLAG_NO_THROWS);
45:       assertEquals(39, Node.EMPTY_BLOCK);
46:       assertEquals(4095, Node.COLUMN_MASK);
47:       assertEquals(55, Node.INFERRED_FUNCTION);
48:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
49:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
50:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
51:       assertEquals(52, Node.LENGTH);
52:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
53:       assertEquals(15, Node.NO_SIDE_EFFECTS);
54:       assertEquals(53, Node.INPUT_ID);
55:       assertEquals(29, Node.JSDOC_INFO_PROP);
56:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
57:       assertEquals(36, Node.QUOTED_PROP);
58:       assertEquals(49, Node.DIRECT_EVAL);
59:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
60:       assertEquals(56, Node.CHANGE_TIME);
61:       assertEquals(57, Node.REFLECTED_OBJECT);
62:       assertNotNull(node0);
63:       assertFalse(node0.isIn());
64:       assertTrue(node0.isNumber());
65:       assertFalse(node0.isCase());
66:       assertFalse(node0.isNE());
67:       assertFalse(node0.isSwitch());
68:       assertFalse(node0.isInc());
69:       assertFalse(node0.isIf());
70:       assertFalse(node0.isString());
71:       assertFalse(node0.isGetterDef());
72:       assertEquals((-1), node0.getCharno());
73:       assertFalse(node0.isTry());
74:       assertFalse(node0.isDelProp());
75:       assertFalse(node0.isBreak());
76:       assertFalse(node0.isThis());
77:       assertFalse(node0.isComma());
78:       assertFalse(node0.isRegExp());
79:       assertFalse(node0.isFor());
80:       assertFalse(node0.isHook());
81:       assertFalse(node0.isScript());
82:       assertFalse(node0.isVoid());
83:       assertFalse(node0.isTrue());
84:       assertFalse(node0.isNull());
85:       assertFalse(node0.isParamList());
86:       assertFalse(node0.isVar());
87:       assertFalse(node0.isStringKey());
88:       assertFalse(node0.isLabelName());
89:       assertFalse(node0.isAdd());
90:       assertFalse(node0.isEmpty());
91:       assertFalse(node0.isNew());
92:       assertFalse(node0.isArrayLit());
93:       assertFalse(node0.isDefaultCase());
94:       assertEquals(0, node0.getChildCount());
95:       assertFalse(node0.isLabel());
96:       assertFalse(node0.hasMoreThanOneChild());
97:       assertFalse(node0.isContinue());
98:       assertFalse(node0.isDo());
99:       assertFalse(node0.isAssignAdd());
100:       assertEquals((-1), node0.getLineno());
101:       assertFalse(node0.isOr());
102:       assertEquals((-1), node0.getSourcePosition());
103:       assertFalse(node0.isCall());
104:       assertFalse(node0.isName());
105:       assertFalse(node0.hasOneChild());
106:       assertFalse(node0.isGetElem());
107:       assertFalse(node0.isTypeOf());
108:       assertFalse(node0.isExprResult());
109:       assertFalse(node0.isWhile());
110:       assertFalse(node0.isWith());
111:       assertEquals(39, node0.getType());
112:       assertFalse(node0.isAssign());
113:       assertFalse(node0.isReturn());
114:       assertFalse(node0.isBlock());
115:       assertFalse(node0.isDec());
116:       assertFalse(node0.hasChildren());
117:       assertFalse(node0.isCatch());
118:       assertFalse(node0.isObjectLit());
119:       assertFalse(node0.isInstanceOf());
120:       assertFalse(node0.isAnd());
121:       assertFalse(node0.isGetProp());
122:       assertFalse(node0.isSetterDef());
123:       assertFalse(node0.isNot());
124:       assertFalse(node0.isDebugger());
125:       assertFalse(node0.isCast());
126:       assertFalse(node0.isThrow());
127:       assertFalse(node0.isFalse());
128:       assertFalse(node0.isFunction());
129:       
130:       Node node1 = new Node((-1));
131:       assertFalse(node1.equals((Object)node0));
132:       assertEquals(4095, Node.COLUMN_MASK);
133:       assertEquals(55, Node.INFERRED_FUNCTION);
134:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
135:       assertEquals(36, Node.QUOTED_PROP);
136:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
137:       assertEquals(43, Node.IS_CONSTANT_NAME);
138:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
139:       assertEquals(48, Node.DIRECTIVES);
140:       assertEquals(40, Node.ORIGINALNAME_PROP);
141:       assertEquals(57, Node.REFLECTED_OBJECT);
142:       assertEquals(29, Node.JSDOC_INFO_PROP);
143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
144:       assertEquals(52, Node.LENGTH);
145:       assertEquals(47, Node.IS_DISPATCHER);
146:       assertEquals(2, Node.POST_FLAG);
147:       assertEquals(8, Node.FLAG_NO_THROWS);
148:       assertEquals(39, Node.EMPTY_BLOCK);
149:       assertEquals(53, Node.INPUT_ID);
150:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
151:       assertEquals(15, Node.NO_SIDE_EFFECTS);
152:       assertEquals(57, Node.LAST_PROP);
153:       assertEquals(12, Node.COLUMN_BITS);
154:       assertEquals(46, Node.IS_NAMESPACE);
155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
156:       assertEquals(30, Node.VAR_ARGS_NAME);
157:       assertEquals(37, Node.OPT_ARG_NAME);
158:       assertEquals(56, Node.CHANGE_TIME);
159:       assertEquals(54, Node.SLASH_V);
160:       assertEquals(49, Node.DIRECT_EVAL);
161:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
162:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
163:       assertEquals(50, Node.FREE_CALL);
164:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
165:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
166:       assertEquals(32, Node.INCRDECR_PROP);
167:       assertEquals(1, Node.DECR_FLAG);
168:       assertNotNull(node1);
169:       assertFalse(node1.isWith());
170:       assertFalse(node1.isNot());
171:       assertFalse(node1.isScript());
172:       assertFalse(node1.isObjectLit());
173:       assertFalse(node1.isExprResult());
174:       assertFalse(node1.isInstanceOf());
175:       assertFalse(node1.hasOneChild());
176:       assertFalse(node1.isGetProp());
177:       assertFalse(node1.isThis());
178:       assertFalse(node1.isLabelName());
179:       assertEquals((-1), node1.getSourcePosition());
180:       assertFalse(node1.isCast());
181:       assertFalse(node1.isNumber());
182:       assertFalse(node1.isFalse());
183:       assertEquals((-1), node1.getCharno());
184:       assertFalse(node1.isSwitch());
185:       assertFalse(node1.isAnd());
186:       assertFalse(node1.isDo());
187:       assertFalse(node1.isString());
188:       assertFalse(node1.isReturn());
189:       assertFalse(node1.isAdd());
190:       assertFalse(node1.isNew());
191:       assertFalse(node1.isLabel());
192:       assertFalse(node1.isVar());
193:       assertFalse(node1.isWhile());
194:       assertFalse(node1.isAssignAdd());
195:       assertFalse(node1.isAssign());
196:       assertFalse(node1.isEmpty());
197:       assertFalse(node1.isDelProp());
198:       assertFalse(node1.isName());
199:       assertFalse(node1.isDec());
200:       assertFalse(node1.isGetElem());
201:       assertFalse(node1.isBreak());
202:       assertFalse(node1.hasChildren());
203:       assertFalse(node1.isComma());
204:       assertFalse(node1.isTypeOf());
205:       assertFalse(node1.isCall());
206:       assertFalse(node1.isOr());
207:       assertFalse(node1.isVoid());
208:       assertFalse(node1.isTrue());
209:       assertFalse(node1.isNull());
210:       assertFalse(node1.isFunction());
211:       assertFalse(node1.isCatch());
212:       assertFalse(node1.isRegExp());
213:       assertFalse(node1.isTry());
214:       assertEquals(0, node1.getChildCount());
215:       assertFalse(node1.isDefaultCase());
216:       assertFalse(node1.isGetterDef());
217:       assertEquals((-1), node1.getType());
218:       assertFalse(node1.isArrayLit());
219:       assertFalse(node1.isDebugger());
220:       assertFalse(node1.isStringKey());
221:       assertFalse(node1.isParamList());
222:       assertFalse(node1.isCase());
223:       assertFalse(node1.hasMoreThanOneChild());
224:       assertFalse(node1.isInc());
225:       assertFalse(node1.isIn());
226:       assertFalse(node1.isContinue());
227:       assertFalse(node1.isBlock());
228:       assertFalse(node1.isHook());
229:       assertFalse(node1.isThrow());
230:       assertFalse(node1.isFor());
231:       assertFalse(node1.isSetterDef());
232:       assertEquals((-1), node1.getLineno());
233:       assertFalse(node1.isNE());
234:       assertFalse(node1.isIf());
235:       
236:       double double0 = node0.getDouble();
237:       assertFalse(node0.equals((Object)node1));
238:       assertEquals(51, Node.STATIC_SOURCE_FILE);
239:       assertEquals(32, Node.INCRDECR_PROP);
240:       assertEquals(37, Node.OPT_ARG_NAME);
241:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
242:       assertEquals(57, Node.LAST_PROP);
243:       assertEquals(47, Node.IS_DISPATCHER);
244:       assertEquals(2, Node.POST_FLAG);
245:       assertEquals(30, Node.VAR_ARGS_NAME);
246:       assertEquals(1, Node.DECR_FLAG);
247:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
248:       assertEquals(12, Node.COLUMN_BITS);
249:       assertEquals(40, Node.ORIGINALNAME_PROP);
250:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
251:       assertEquals(50, Node.FREE_CALL);
252:       assertEquals(43, Node.IS_CONSTANT_NAME);
253:       assertEquals(46, Node.IS_NAMESPACE);
254:       assertEquals(54, Node.SLASH_V);
255:       assertEquals(48, Node.DIRECTIVES);
256:       assertEquals(8, Node.FLAG_NO_THROWS);
257:       assertEquals(39, Node.EMPTY_BLOCK);
258:       assertEquals(4095, Node.COLUMN_MASK);
259:       assertEquals(55, Node.INFERRED_FUNCTION);
260:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
261:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
262:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
263:       assertEquals(52, Node.LENGTH);
264:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
265:       assertEquals(15, Node.NO_SIDE_EFFECTS);
266:       assertEquals(53, Node.INPUT_ID);
267:       assertEquals(29, Node.JSDOC_INFO_PROP);
268:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
269:       assertEquals(36, Node.QUOTED_PROP);
270:       assertEquals(49, Node.DIRECT_EVAL);
271:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
272:       assertEquals(56, Node.CHANGE_TIME);
273:       assertEquals(57, Node.REFLECTED_OBJECT);
274:       assertEquals((-220.0), double0, 0.01);
275:       assertFalse(node0.isIn());
276:       assertTrue(node0.isNumber());
277:       assertFalse(node0.isCase());
278:       assertFalse(node0.isNE());
279:       assertFalse(node0.isSwitch());
280:       assertFalse(node0.isInc());
281:       assertFalse(node0.isIf());
282:       assertFalse(node0.isString());
283:       assertFalse(node0.isGetterDef());
284:       assertEquals((-1), node0.getCharno());
285:       assertFalse(node0.isTry());
286:       assertFalse(node0.isDelProp());
287:       assertFalse(node0.isBreak());
288:       assertFalse(node0.isThis());
289:       assertFalse(node0.isComma());
290:       assertFalse(node0.isRegExp());
291:       assertFalse(node0.isFor());
292:       assertFalse(node0.isHook());
293:       assertFalse(node0.isScript());
294:       assertFalse(node0.isVoid());
295:       assertFalse(node0.isTrue());
296:       assertFalse(node0.isNull());
297:       assertFalse(node0.isParamList());
298:       assertFalse(node0.isVar());
299:       assertFalse(node0.isStringKey());
300:       assertFalse(node0.isLabelName());
301:       assertFalse(node0.isAdd());
302:       assertFalse(node0.isEmpty());
303:       assertFalse(node0.isNew());
304:       assertFalse(node0.isArrayLit());
305:       assertFalse(node0.isDefaultCase());
306:       assertEquals(0, node0.getChildCount());
307:       assertFalse(node0.isLabel());
308:       assertFalse(node0.hasMoreThanOneChild());
309:       assertFalse(node0.isContinue());
310:       assertFalse(node0.isDo());
311:       assertFalse(node0.isAssignAdd());
312:       assertEquals((-1), node0.getLineno());
313:       assertFalse(node0.isOr());
314:       assertEquals((-1), node0.getSourcePosition());
315:       assertFalse(node0.isCall());
316:       assertFalse(node0.isName());
317:       assertFalse(node0.hasOneChild());
318:       assertFalse(node0.isGetElem());
319:       assertFalse(node0.isTypeOf());
320:       assertFalse(node0.isExprResult());
321:       assertFalse(node0.isWhile());
322:       assertFalse(node0.isWith());
323:       assertEquals(39, node0.getType());
324:       assertFalse(node0.isAssign());
325:       assertFalse(node0.isReturn());
326:       assertFalse(node0.isBlock());
327:       assertFalse(node0.isDec());
328:       assertFalse(node0.hasChildren());
329:       assertFalse(node0.isCatch());
330:       assertFalse(node0.isObjectLit());
331:       assertFalse(node0.isInstanceOf());
332:       assertFalse(node0.isAnd());
333:       assertFalse(node0.isGetProp());
334:       assertFalse(node0.isSetterDef());
335:       assertFalse(node0.isNot());
336:       assertFalse(node0.isDebugger());
337:       assertFalse(node0.isCast());
338:       assertFalse(node0.isThrow());
339:       assertFalse(node0.isFalse());
340:       assertFalse(node0.isFunction());
341:       
342:       String string0 = node1.toStringTree();
343:       assertFalse(node1.equals((Object)node0));
344:       assertEquals(4095, Node.COLUMN_MASK);
345:       assertEquals(55, Node.INFERRED_FUNCTION);
346:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
347:       assertEquals(36, Node.QUOTED_PROP);
348:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
349:       assertEquals(43, Node.IS_CONSTANT_NAME);
350:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
351:       assertEquals(48, Node.DIRECTIVES);
352:       assertEquals(40, Node.ORIGINALNAME_PROP);
353:       assertEquals(57, Node.REFLECTED_OBJECT);
354:       assertEquals(29, Node.JSDOC_INFO_PROP);
355:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
356:       assertEquals(52, Node.LENGTH);
357:       assertEquals(47, Node.IS_DISPATCHER);
358:       assertEquals(2, Node.POST_FLAG);
359:       assertEquals(8, Node.FLAG_NO_THROWS);
360:       assertEquals(39, Node.EMPTY_BLOCK);
361:       assertEquals(53, Node.INPUT_ID);
362:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
363:       assertEquals(15, Node.NO_SIDE_EFFECTS);
364:       assertEquals(57, Node.LAST_PROP);
365:       assertEquals(12, Node.COLUMN_BITS);
366:       assertEquals(46, Node.IS_NAMESPACE);
367:       assertEquals(51, Node.STATIC_SOURCE_FILE);
368:       assertEquals(30, Node.VAR_ARGS_NAME);
369:       assertEquals(37, Node.OPT_ARG_NAME);
370:       assertEquals(56, Node.CHANGE_TIME);
371:       assertEquals(54, Node.SLASH_V);
372:       assertEquals(49, Node.DIRECT_EVAL);
373:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
374:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
375:       assertEquals(50, Node.FREE_CALL);
376:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
377:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
378:       assertEquals(32, Node.INCRDECR_PROP);
379:       assertEquals(1, Node.DECR_FLAG);
380:       assertNotNull(string0);
381:       assertEquals("ERROR\n", string0);
382:       assertFalse(node1.isWith());
383:       assertFalse(node1.isNot());
384:       assertFalse(node1.isScript());
385:       assertFalse(node1.isObjectLit());
386:       assertFalse(node1.isExprResult());
387:       assertFalse(node1.isInstanceOf());
388:       assertFalse(node1.hasOneChild());
389:       assertFalse(node1.isGetProp());
390:       assertFalse(node1.isThis());
391:       assertFalse(node1.isLabelName());
392:       assertEquals((-1), node1.getSourcePosition());
393:       assertFalse(node1.isCast());
394:       assertFalse(node1.isNumber());
395:       assertFalse(node1.isFalse());
396:       assertEquals((-1), node1.getCharno());
397:       assertFalse(node1.isSwitch());
398:       assertFalse(node1.isAnd());
399:       assertFalse(node1.isDo());
400:       assertFalse(node1.isString());
401:       assertFalse(node1.isReturn());
402:       assertFalse(node1.isAdd());
403:       assertFalse(node1.isNew());
404:       assertFalse(node1.isLabel());
405:       assertFalse(node1.isVar());
406:       assertFalse(node1.isWhile());
407:       assertFalse(node1.isAssignAdd());
408:       assertFalse(node1.isAssign());
409:       assertFalse(node1.isEmpty());
410:       assertFalse(node1.isDelProp());
411:       assertFalse(node1.isName());
412:       assertFalse(node1.isDec());
413:       assertFalse(node1.isGetElem());
414:       assertFalse(node1.isBreak());
415:       assertFalse(node1.hasChildren());
416:       assertFalse(node1.isComma());
417:       assertFalse(node1.isTypeOf());
418:       assertFalse(node1.isCall());
419:       assertFalse(node1.isOr());
420:       assertFalse(node1.isVoid());
421:       assertFalse(node1.isTrue());
422:       assertFalse(node1.isNull());
423:       assertFalse(node1.isFunction());
424:       assertFalse(node1.isCatch());
425:       assertFalse(node1.isRegExp());
426:       assertFalse(node1.isTry());
427:       assertEquals(0, node1.getChildCount());
428:       assertFalse(node1.isDefaultCase());
429:       assertFalse(node1.isGetterDef());
430:       assertEquals((-1), node1.getType());
431:       assertFalse(node1.isArrayLit());
432:       assertFalse(node1.isDebugger());
433:       assertFalse(node1.isStringKey());
434:       assertFalse(node1.isParamList());
435:       assertFalse(node1.isCase());
436:       assertFalse(node1.hasMoreThanOneChild());
437:       assertFalse(node1.isInc());
438:       assertFalse(node1.isIn());
439:       assertFalse(node1.isContinue());
440:       assertFalse(node1.isBlock());
441:       assertFalse(node1.isHook());
442:       assertFalse(node1.isThrow());
443:       assertFalse(node1.isFor());
444:       assertFalse(node1.isSetterDef());
445:       assertEquals((-1), node1.getLineno());
446:       assertFalse(node1.isNE());
447:       assertFalse(node1.isIf());
448:       
449:       boolean boolean0 = node1.isQualifiedName();
450:       assertFalse(node1.equals((Object)node0));
451:       assertEquals(4095, Node.COLUMN_MASK);
452:       assertEquals(55, Node.INFERRED_FUNCTION);
453:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
454:       assertEquals(36, Node.QUOTED_PROP);
455:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
456:       assertEquals(43, Node.IS_CONSTANT_NAME);
457:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
458:       assertEquals(48, Node.DIRECTIVES);
459:       assertEquals(40, Node.ORIGINALNAME_PROP);
460:       assertEquals(57, Node.REFLECTED_OBJECT);
461:       assertEquals(29, Node.JSDOC_INFO_PROP);
462:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
463:       assertEquals(52, Node.LENGTH);
464:       assertEquals(47, Node.IS_DISPATCHER);
465:       assertEquals(2, Node.POST_FLAG);
466:       assertEquals(8, Node.FLAG_NO_THROWS);
467:       assertEquals(39, Node.EMPTY_BLOCK);
468:       assertEquals(53, Node.INPUT_ID);
469:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
470:       assertEquals(15, Node.NO_SIDE_EFFECTS);
471:       assertEquals(57, Node.LAST_PROP);
472:       assertEquals(12, Node.COLUMN_BITS);
473:       assertEquals(46, Node.IS_NAMESPACE);
474:       assertEquals(51, Node.STATIC_SOURCE_FILE);
475:       assertEquals(30, Node.VAR_ARGS_NAME);
476:       assertEquals(37, Node.OPT_ARG_NAME);
477:       assertEquals(56, Node.CHANGE_TIME);
478:       assertEquals(54, Node.SLASH_V);
479:       assertEquals(49, Node.DIRECT_EVAL);
480:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
481:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
482:       assertEquals(50, Node.FREE_CALL);
483:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
484:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
485:       assertEquals(32, Node.INCRDECR_PROP);
486:       assertEquals(1, Node.DECR_FLAG);
487:       assertFalse(boolean0);
488:       assertFalse(node1.isWith());
489:       assertFalse(node1.isNot());
490:       assertFalse(node1.isScript());
491:       assertFalse(node1.isObjectLit());
492:       assertFalse(node1.isExprResult());
493:       assertFalse(node1.isInstanceOf());
494:       assertFalse(node1.hasOneChild());
495:       assertFalse(node1.isGetProp());
496:       assertFalse(node1.isThis());
497:       assertFalse(node1.isLabelName());
498:       assertEquals((-1), node1.getSourcePosition());
499:       assertFalse(node1.isCast());
500:       assertFalse(node1.isNumber());
501:       assertFalse(node1.isFalse());
502:       assertEquals((-1), node1.getCharno());
503:       assertFalse(node1.isSwitch());
504:       assertFalse(node1.isAnd());
505:       assertFalse(node1.isDo());
506:       assertFalse(node1.isString());
507:       assertFalse(node1.isReturn());
508:       assertFalse(node1.isAdd());
509:       assertFalse(node1.isNew());
510:       assertFalse(node1.isLabel());
511:       assertFalse(node1.isVar());
512:       assertFalse(node1.isWhile());
513:       assertFalse(node1.isAssignAdd());
514:       assertFalse(node1.isAssign());
515:       assertFalse(node1.isEmpty());
516:       assertFalse(node1.isDelProp());
517:       assertFalse(node1.isName());
518:       assertFalse(node1.isDec());
519:       assertFalse(node1.isGetElem());
520:       assertFalse(node1.isBreak());
521:       assertFalse(node1.hasChildren());
522:       assertFalse(node1.isComma());
523:       assertFalse(node1.isTypeOf());
524:       assertFalse(node1.isCall());
525:       assertFalse(node1.isOr());
526:       assertFalse(node1.isVoid());
527:       assertFalse(node1.isTrue());
528:       assertFalse(node1.isNull());
529:       assertFalse(node1.isFunction());
530:       assertFalse(node1.isCatch());
531:       assertFalse(node1.isRegExp());
532:       assertFalse(node1.isTry());
533:       assertEquals(0, node1.getChildCount());
534:       assertFalse(node1.isDefaultCase());
535:       assertFalse(node1.isGetterDef());
536:       assertEquals((-1), node1.getType());
537:       assertFalse(node1.isArrayLit());
538:       assertFalse(node1.isDebugger());
539:       assertFalse(node1.isStringKey());
540:       assertFalse(node1.isParamList());
541:       assertFalse(node1.isCase());
542:       assertFalse(node1.hasMoreThanOneChild());
543:       assertFalse(node1.isInc());
544:       assertFalse(node1.isIn());
545:       assertFalse(node1.isContinue());
546:       assertFalse(node1.isBlock());
547:       assertFalse(node1.isHook());
548:       assertFalse(node1.isThrow());
549:       assertFalse(node1.isFor());
550:       assertFalse(node1.isSetterDef());
551:       assertEquals((-1), node1.getLineno());
552:       assertFalse(node1.isNE());
553:       assertFalse(node1.isIf());
554:       
555:       Node node2 = new Node(364, 36, 12);
556:       assertFalse(node2.equals((Object)node0));
557:       assertFalse(node2.equals((Object)node1));
558:       assertEquals(56, Node.CHANGE_TIME);
559:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
560:       assertEquals(36, Node.QUOTED_PROP);
561:       assertEquals(53, Node.INPUT_ID);
562:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
563:       assertEquals(29, Node.JSDOC_INFO_PROP);
564:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
565:       assertEquals(1, Node.DECR_FLAG);
566:       assertEquals(12, Node.COLUMN_BITS);
567:       assertEquals(32, Node.INCRDECR_PROP);
568:       assertEquals(49, Node.DIRECT_EVAL);
569:       assertEquals(37, Node.OPT_ARG_NAME);
570:       assertEquals(48, Node.DIRECTIVES);
571:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
572:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
573:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
574:       assertEquals(4095, Node.COLUMN_MASK);
575:       assertEquals(40, Node.ORIGINALNAME_PROP);
576:       assertEquals(57, Node.REFLECTED_OBJECT);
577:       assertEquals(8, Node.FLAG_NO_THROWS);
578:       assertEquals(54, Node.SLASH_V);
579:       assertEquals(15, Node.NO_SIDE_EFFECTS);
580:       assertEquals(39, Node.EMPTY_BLOCK);
581:       assertEquals(50, Node.FREE_CALL);
582:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
583:       assertEquals(52, Node.LENGTH);
584:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
585:       assertEquals(55, Node.INFERRED_FUNCTION);
586:       assertEquals(51, Node.STATIC_SOURCE_FILE);
587:       assertEquals(46, Node.IS_NAMESPACE);
588:       assertEquals(43, Node.IS_CONSTANT_NAME);
589:       assertEquals(57, Node.LAST_PROP);
590:       assertEquals(2, Node.POST_FLAG);
591:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
592:       assertEquals(47, Node.IS_DISPATCHER);
593:       assertEquals(30, Node.VAR_ARGS_NAME);
594:       assertNotNull(node2);
595:       assertFalse(node2.isIf());
596:       assertFalse(node2.isGetterDef());
597:       assertFalse(node2.isDelProp());
598:       assertFalse(node2.isFor());
599:       assertFalse(node2.isNE());
600:       assertFalse(node2.isVoid());
601:       assertFalse(node2.isFunction());
602:       assertFalse(node2.isArrayLit());
603:       assertEquals(147468, node2.getSourcePosition());
604:       assertFalse(node2.isDefaultCase());
605:       assertFalse(node2.isTrue());
606:       assertFalse(node2.isIn());
607:       assertFalse(node2.isSetterDef());
608:       assertFalse(node2.isInc());
609:       assertFalse(node2.isEmpty());
610:       assertFalse(node2.isBreak());
611:       assertFalse(node2.isFalse());
612:       assertFalse(node2.isName());
613:       assertFalse(node2.isComma());
614:       assertFalse(node2.isThrow());
615:       assertFalse(node2.isNull());
616:       assertFalse(node2.isCall());
617:       assertFalse(node2.isWhile());
618:       assertFalse(node2.isString());
619:       assertFalse(node2.isNot());
620:       assertFalse(node2.isObjectLit());
621:       assertFalse(node2.isAnd());
622:       assertFalse(node2.isDebugger());
623:       assertFalse(node2.isGetProp());
624:       assertFalse(node2.hasChildren());
625:       assertFalse(node2.isNumber());
626:       assertFalse(node2.isDec());
627:       assertFalse(node2.isLabelName());
628:       assertFalse(node2.isAssign());
629:       assertFalse(node2.isTypeOf());
630:       assertFalse(node2.isReturn());
631:       assertFalse(node2.isLabel());
632:       assertFalse(node2.isCast());
633:       assertFalse(node2.hasMoreThanOneChild());
634:       assertFalse(node2.isContinue());
635:       assertEquals(36, node2.getLineno());
636:       assertFalse(node2.isGetElem());
637:       assertFalse(node2.isExprResult());
638:       assertFalse(node2.isDo());
639:       assertFalse(node2.isAssignAdd());
640:       assertFalse(node2.isNew());
641:       assertEquals(364, node2.getType());
642:       assertFalse(node2.isOr());
643:       assertFalse(node2.isAdd());
644:       assertFalse(node2.isParamList());
645:       assertFalse(node2.isThis());
646:       assertFalse(node2.isStringKey());
647:       assertFalse(node2.isHook());
648:       assertFalse(node2.isVar());
649:       assertEquals(12, node2.getCharno());
650:       assertEquals(0, node2.getChildCount());
651:       assertFalse(node2.isCatch());
652:       assertFalse(node2.isInstanceOf());
653:       assertFalse(node2.isWith());
654:       assertFalse(node2.isCase());
655:       assertFalse(node2.isRegExp());
656:       assertFalse(node2.isSwitch());
657:       assertFalse(node2.isBlock());
658:       assertFalse(node2.hasOneChild());
659:       assertFalse(node2.isTry());
660:       assertFalse(node2.isScript());
661:       
662:       boolean boolean1 = node2.mayMutateGlobalStateOrThrow();
663:       assertFalse(node2.equals((Object)node0));
664:       assertFalse(node2.equals((Object)node1));
665:       assertFalse(boolean1 == boolean0);
666:       assertEquals(56, Node.CHANGE_TIME);
667:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
668:       assertEquals(36, Node.QUOTED_PROP);
669:       assertEquals(53, Node.INPUT_ID);
670:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
671:       assertEquals(29, Node.JSDOC_INFO_PROP);
672:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
673:       assertEquals(1, Node.DECR_FLAG);
674:       assertEquals(12, Node.COLUMN_BITS);
675:       assertEquals(32, Node.INCRDECR_PROP);
676:       assertEquals(49, Node.DIRECT_EVAL);
677:       assertEquals(37, Node.OPT_ARG_NAME);
678:       assertEquals(48, Node.DIRECTIVES);
679:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
680:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
681:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
682:       assertEquals(4095, Node.COLUMN_MASK);
683:       assertEquals(40, Node.ORIGINALNAME_PROP);
684:       assertEquals(57, Node.REFLECTED_OBJECT);
685:       assertEquals(8, Node.FLAG_NO_THROWS);
686:       assertEquals(54, Node.SLASH_V);
687:       assertEquals(15, Node.NO_SIDE_EFFECTS);
688:       assertEquals(39, Node.EMPTY_BLOCK);
689:       assertEquals(50, Node.FREE_CALL);
690:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
691:       assertEquals(52, Node.LENGTH);
692:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
693:       assertEquals(55, Node.INFERRED_FUNCTION);
694:       assertEquals(51, Node.STATIC_SOURCE_FILE);
695:       assertEquals(46, Node.IS_NAMESPACE);
696:       assertEquals(43, Node.IS_CONSTANT_NAME);
697:       assertEquals(57, Node.LAST_PROP);
698:       assertEquals(2, Node.POST_FLAG);
699:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
700:       assertEquals(47, Node.IS_DISPATCHER);
701:       assertEquals(30, Node.VAR_ARGS_NAME);
702:       assertTrue(boolean1);
703:       assertFalse(node2.isIf());
704:       assertFalse(node2.isGetterDef());
705:       assertFalse(node2.isDelProp());
706:       assertFalse(node2.isFor());
707:       assertFalse(node2.isNE());
708:       assertFalse(node2.isVoid());
709:       assertFalse(node2.isFunction());
710:       assertFalse(node2.isArrayLit());
711:       assertEquals(147468, node2.getSourcePosition());
712:       assertFalse(node2.isDefaultCase());
713:       assertFalse(node2.isTrue());
714:       assertFalse(node2.isIn());
715:       assertFalse(node2.isSetterDef());
716:       assertFalse(node2.isInc());
717:       assertFalse(node2.isEmpty());
718:       assertFalse(node2.isBreak());
719:       assertFalse(node2.isFalse());
720:       assertFalse(node2.isName());
721:       assertFalse(node2.isComma());
722:       assertFalse(node2.isThrow());
723:       assertFalse(node2.isNull());
724:       assertFalse(node2.isCall());
725:       assertFalse(node2.isWhile());
726:       assertFalse(node2.isString());
727:       assertFalse(node2.isNot());
728:       assertFalse(node2.isObjectLit());
729:       assertFalse(node2.isAnd());
730:       assertFalse(node2.isDebugger());
731:       assertFalse(node2.isGetProp());
732:       assertFalse(node2.hasChildren());
733:       assertFalse(node2.isNumber());
734:       assertFalse(node2.isDec());
735:       assertFalse(node2.isLabelName());
736:       assertFalse(node2.isAssign());
737:       assertFalse(node2.isTypeOf());
738:       assertFalse(node2.isReturn());
739:       assertFalse(node2.isLabel());
740:       assertFalse(node2.isCast());
741:       assertFalse(node2.hasMoreThanOneChild());
742:       assertFalse(node2.isContinue());
743:       assertEquals(36, node2.getLineno());
744:       assertFalse(node2.isGetElem());
745:       assertFalse(node2.isExprResult());
746:       assertFalse(node2.isDo());
747:       assertFalse(node2.isAssignAdd());
748:       assertFalse(node2.isNew());
749:       assertEquals(364, node2.getType());
750:       assertFalse(node2.isOr());
751:       assertFalse(node2.isAdd());
752:       assertFalse(node2.isParamList());
753:       assertFalse(node2.isThis());
754:       assertFalse(node2.isStringKey());
755:       assertFalse(node2.isHook());
756:       assertFalse(node2.isVar());
757:       assertEquals(12, node2.getCharno());
758:       assertEquals(0, node2.getChildCount());
759:       assertFalse(node2.isCatch());
760:       assertFalse(node2.isInstanceOf());
761:       assertFalse(node2.isWith());
762:       assertFalse(node2.isCase());
763:       assertFalse(node2.isRegExp());
764:       assertFalse(node2.isSwitch());
765:       assertFalse(node2.isBlock());
766:       assertFalse(node2.hasOneChild());
767:       assertFalse(node2.isTry());
768:       assertFalse(node2.isScript());
769:       assertNotSame(node2, node1);
770:       
771:       boolean boolean2 = node2.isNE();
772:       assertFalse(node2.equals((Object)node0));
773:       assertFalse(node2.equals((Object)node1));
774:       assertTrue(boolean2 == boolean0);
775:       assertFalse(boolean2 == boolean1);
776:       assertEquals(56, Node.CHANGE_TIME);
777:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
778:       assertEquals(36, Node.QUOTED_PROP);
779:       assertEquals(53, Node.INPUT_ID);
780:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
781:       assertEquals(29, Node.JSDOC_INFO_PROP);
782:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
783:       assertEquals(1, Node.DECR_FLAG);
784:       assertEquals(12, Node.COLUMN_BITS);
785:       assertEquals(32, Node.INCRDECR_PROP);
786:       assertEquals(49, Node.DIRECT_EVAL);
787:       assertEquals(37, Node.OPT_ARG_NAME);
788:       assertEquals(48, Node.DIRECTIVES);
789:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
790:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
791:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
792:       assertEquals(4095, Node.COLUMN_MASK);
793:       assertEquals(40, Node.ORIGINALNAME_PROP);
794:       assertEquals(57, Node.REFLECTED_OBJECT);
795:       assertEquals(8, Node.FLAG_NO_THROWS);
796:       assertEquals(54, Node.SLASH_V);
797:       assertEquals(15, Node.NO_SIDE_EFFECTS);
798:       assertEquals(39, Node.EMPTY_BLOCK);
799:       assertEquals(50, Node.FREE_CALL);
800:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
801:       assertEquals(52, Node.LENGTH);
802:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
803:       assertEquals(55, Node.INFERRED_FUNCTION);
804:       assertEquals(51, Node.STATIC_SOURCE_FILE);
805:       assertEquals(46, Node.IS_NAMESPACE);
806:       assertEquals(43, Node.IS_CONSTANT_NAME);
807:       assertEquals(57, Node.LAST_PROP);
808:       assertEquals(2, Node.POST_FLAG);
809:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
810:       assertEquals(47, Node.IS_DISPATCHER);
811:       assertEquals(30, Node.VAR_ARGS_NAME);
812:       assertFalse(boolean2);
813:       assertFalse(node2.isIf());
814:       assertFalse(node2.isGetterDef());
815:       assertFalse(node2.isDelProp());
816:       assertFalse(node2.isFor());
817:       assertFalse(node2.isNE());
818:       assertFalse(node2.isVoid());
819:       assertFalse(node2.isFunction());
820:       assertFalse(node2.isArrayLit());
821:       assertEquals(147468, node2.getSourcePosition());
822:       assertFalse(node2.isDefaultCase());
823:       assertFalse(node2.isTrue());
824:       assertFalse(node2.isIn());
825:       assertFalse(node2.isSetterDef());
826:       assertFalse(node2.isInc());
827:       assertFalse(node2.isEmpty());
828:       assertFalse(node2.isBreak());
829:       assertFalse(node2.isFalse());
830:       assertFalse(node2.isName());
831:       assertFalse(node2.isComma());
832:       assertFalse(node2.isThrow());
833:       assertFalse(node2.isNull());
834:       assertFalse(node2.isCall());
835:       assertFalse(node2.isWhile());
836:       assertFalse(node2.isString());
837:       assertFalse(node2.isNot());
838:       assertFalse(node2.isObjectLit());
839:       assertFalse(node2.isAnd());
840:       assertFalse(node2.isDebugger());
841:       assertFalse(node2.isGetProp());
842:       assertFalse(node2.hasChildren());
843:       assertFalse(node2.isNumber());
844:       assertFalse(node2.isDec());
845:       assertFalse(node2.isLabelName());
846:       assertFalse(node2.isAssign());
847:       assertFalse(node2.isTypeOf());
848:       assertFalse(node2.isReturn());
849:       assertFalse(node2.isLabel());
850:       assertFalse(node2.isCast());
851:       assertFalse(node2.hasMoreThanOneChild());
852:       assertFalse(node2.isContinue());
853:       assertEquals(36, node2.getLineno());
854:       assertFalse(node2.isGetElem());
855:       assertFalse(node2.isExprResult());
856:       assertFalse(node2.isDo());
857:       assertFalse(node2.isAssignAdd());
858:       assertFalse(node2.isNew());
859:       assertEquals(364, node2.getType());
860:       assertFalse(node2.isOr());
861:       assertFalse(node2.isAdd());
862:       assertFalse(node2.isParamList());
863:       assertFalse(node2.isThis());
864:       assertFalse(node2.isStringKey());
865:       assertFalse(node2.isHook());
866:       assertFalse(node2.isVar());
867:       assertEquals(12, node2.getCharno());
868:       assertEquals(0, node2.getChildCount());
869:       assertFalse(node2.isCatch());
870:       assertFalse(node2.isInstanceOf());
871:       assertFalse(node2.isWith());
872:       assertFalse(node2.isCase());
873:       assertFalse(node2.isRegExp());
874:       assertFalse(node2.isSwitch());
875:       assertFalse(node2.isBlock());
876:       assertFalse(node2.hasOneChild());
877:       assertFalse(node2.isTry());
878:       assertFalse(node2.isScript());
879:       assertNotSame(node2, node1);
880:       
881:       boolean boolean3 = node0.mayMutateGlobalStateOrThrow();
882:       assertFalse(node0.equals((Object)node1));
883:       assertFalse(node0.equals((Object)node2));
884:       assertFalse(boolean3 == boolean2);
885:       assertTrue(boolean3 == boolean1);
886:       assertFalse(boolean3 == boolean0);
887:       assertEquals(51, Node.STATIC_SOURCE_FILE);
888:       assertEquals(32, Node.INCRDECR_PROP);
889:       assertEquals(37, Node.OPT_ARG_NAME);
890:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
891:       assertEquals(57, Node.LAST_PROP);
892:       assertEquals(47, Node.IS_DISPATCHER);
893:       assertEquals(2, Node.POST_FLAG);
894:       assertEquals(30, Node.VAR_ARGS_NAME);
895:       assertEquals(1, Node.DECR_FLAG);
896:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
897:       assertEquals(12, Node.COLUMN_BITS);
898:       assertEquals(40, Node.ORIGINALNAME_PROP);
899:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
900:       assertEquals(50, Node.FREE_CALL);
901:       assertEquals(43, Node.IS_CONSTANT_NAME);
902:       assertEquals(46, Node.IS_NAMESPACE);
903:       assertEquals(54, Node.SLASH_V);
904:       assertEquals(48, Node.DIRECTIVES);
905:       assertEquals(8, Node.FLAG_NO_THROWS);
906:       assertEquals(39, Node.EMPTY_BLOCK);
907:       assertEquals(4095, Node.COLUMN_MASK);
908:       assertEquals(55, Node.INFERRED_FUNCTION);
909:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
910:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
911:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
912:       assertEquals(52, Node.LENGTH);
913:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
914:       assertEquals(15, Node.NO_SIDE_EFFECTS);
915:       assertEquals(53, Node.INPUT_ID);
916:       assertEquals(29, Node.JSDOC_INFO_PROP);
917:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
918:       assertEquals(36, Node.QUOTED_PROP);
919:       assertEquals(49, Node.DIRECT_EVAL);
920:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
921:       assertEquals(56, Node.CHANGE_TIME);
922:       assertEquals(57, Node.REFLECTED_OBJECT);
923:       assertTrue(boolean3);
924:       assertFalse(node0.isIn());
925:       assertTrue(node0.isNumber());
926:       assertFalse(node0.isCase());
927:       assertFalse(node0.isNE());
928:       assertFalse(node0.isSwitch());
929:       assertFalse(node0.isInc());
930:       assertFalse(node0.isIf());
931:       assertFalse(node0.isString());
932:       assertFalse(node0.isGetterDef());
933:       assertEquals((-1), node0.getCharno());
934:       assertFalse(node0.isTry());
935:       assertFalse(node0.isDelProp());
936:       assertFalse(node0.isBreak());
937:       assertFalse(node0.isThis());
938:       assertFalse(node0.isComma());
939:       assertFalse(node0.isRegExp());
940:       assertFalse(node0.isFor());
941:       assertFalse(node0.isHook());
942:       assertFalse(node0.isScript());
943:       assertFalse(node0.isVoid());
944:       assertFalse(node0.isTrue());
945:       assertFalse(node0.isNull());
946:       assertFalse(node0.isParamList());
947:       assertFalse(node0.isVar());
948:       assertFalse(node0.isStringKey());
949:       assertFalse(node0.isLabelName());
950:       assertFalse(node0.isAdd());
951:       assertFalse(node0.isEmpty());
952:       assertFalse(node0.isNew());
953:       assertFalse(node0.isArrayLit());
954:       assertFalse(node0.isDefaultCase());
955:       assertEquals(0, node0.getChildCount());
956:       assertFalse(node0.isLabel());
957:       assertFalse(node0.hasMoreThanOneChild());
958:       assertFalse(node0.isContinue());
959:       assertFalse(node0.isDo());
960:       assertFalse(node0.isAssignAdd());
961:       assertEquals((-1), node0.getLineno());
962:       assertFalse(node0.isOr());
963:       assertEquals((-1), node0.getSourcePosition());
964:       assertFalse(node0.isCall());
965:       assertFalse(node0.isName());
966:       assertFalse(node0.hasOneChild());
967:       assertFalse(node0.isGetElem());
968:       assertFalse(node0.isTypeOf());
969:       assertFalse(node0.isExprResult());
970:       assertFalse(node0.isWhile());
971:       assertFalse(node0.isWith());
972:       assertEquals(39, node0.getType());
973:       assertFalse(node0.isAssign());
974:       assertFalse(node0.isReturn());
975:       assertFalse(node0.isBlock());
976:       assertFalse(node0.isDec());
977:       assertFalse(node0.hasChildren());
978:       assertFalse(node0.isCatch());
979:       assertFalse(node0.isObjectLit());
980:       assertFalse(node0.isInstanceOf());
981:       assertFalse(node0.isAnd());
982:       assertFalse(node0.isGetProp());
983:       assertFalse(node0.isSetterDef());
984:       assertFalse(node0.isNot());
985:       assertFalse(node0.isDebugger());
986:       assertFalse(node0.isCast());
987:       assertFalse(node0.isThrow());
988:       assertFalse(node0.isFalse());
989:       assertFalse(node0.isFunction());
990:       
991:       String string1 = node0.getQualifiedName();
992:       assertFalse(node0.equals((Object)node1));
993:       assertFalse(node0.equals((Object)node2));
994:       assertEquals(51, Node.STATIC_SOURCE_FILE);
995:       assertEquals(32, Node.INCRDECR_PROP);
996:       assertEquals(37, Node.OPT_ARG_NAME);
997:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
998:       assertEquals(57, Node.LAST_PROP);
999:       assertEquals(47, Node.IS_DISPATCHER);
1000:       assertEquals(2, Node.POST_FLAG);
1001:       assertEquals(30, Node.VAR_ARGS_NAME);
1002:       assertEquals(1, Node.DECR_FLAG);
1003:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1004:       assertEquals(12, Node.COLUMN_BITS);
1005:       assertEquals(40, Node.ORIGINALNAME_PROP);
1006:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1007:       assertEquals(50, Node.FREE_CALL);
1008:       assertEquals(43, Node.IS_CONSTANT_NAME);
1009:       assertEquals(46, Node.IS_NAMESPACE);
1010:       assertEquals(54, Node.SLASH_V);
1011:       assertEquals(48, Node.DIRECTIVES);
1012:       assertEquals(8, Node.FLAG_NO_THROWS);
1013:       assertEquals(39, Node.EMPTY_BLOCK);
1014:       assertEquals(4095, Node.COLUMN_MASK);
1015:       assertEquals(55, Node.INFERRED_FUNCTION);
1016:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1017:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1018:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1019:       assertEquals(52, Node.LENGTH);
1020:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1021:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1022:       assertEquals(53, Node.INPUT_ID);
1023:       assertEquals(29, Node.JSDOC_INFO_PROP);
1024:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1025:       assertEquals(36, Node.QUOTED_PROP);
1026:       assertEquals(49, Node.DIRECT_EVAL);
1027:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1028:       assertEquals(56, Node.CHANGE_TIME);
1029:       assertEquals(57, Node.REFLECTED_OBJECT);
1030:       assertNull(string1);
1031:       assertFalse(node0.isIn());
1032:       assertTrue(node0.isNumber());
1033:       assertFalse(node0.isCase());
1034:       assertFalse(node0.isNE());
1035:       assertFalse(node0.isSwitch());
1036:       assertFalse(node0.isInc());
1037:       assertFalse(node0.isIf());
1038:       assertFalse(node0.isString());
1039:       assertFalse(node0.isGetterDef());
1040:       assertEquals((-1), node0.getCharno());
1041:       assertFalse(node0.isTry());
1042:       assertFalse(node0.isDelProp());
1043:       assertFalse(node0.isBreak());
1044:       assertFalse(node0.isThis());
1045:       assertFalse(node0.isComma());
1046:       assertFalse(node0.isRegExp());
1047:       assertFalse(node0.isFor());
1048:       assertFalse(node0.isHook());
1049:       assertFalse(node0.isScript());
1050:       assertFalse(node0.isVoid());
1051:       assertFalse(node0.isTrue());
1052:       assertFalse(node0.isNull());
1053:       assertFalse(node0.isParamList());
1054:       assertFalse(node0.isVar());
1055:       assertFalse(node0.isStringKey());
1056:       assertFalse(node0.isLabelName());
1057:       assertFalse(node0.isAdd());
1058:       assertFalse(node0.isEmpty());
1059:       assertFalse(node0.isNew());
1060:       assertFalse(node0.isArrayLit());
1061:       assertFalse(node0.isDefaultCase());
1062:       assertEquals(0, node0.getChildCount());
1063:       assertFalse(node0.isLabel());
1064:       assertFalse(node0.hasMoreThanOneChild());
1065:       assertFalse(node0.isContinue());
1066:       assertFalse(node0.isDo());
1067:       assertFalse(node0.isAssignAdd());
1068:       assertEquals((-1), node0.getLineno());
1069:       assertFalse(node0.isOr());
1070:       assertEquals((-1), node0.getSourcePosition());
1071:       assertFalse(node0.isCall());
1072:       assertFalse(node0.isName());
1073:       assertFalse(node0.hasOneChild());
1074:       assertFalse(node0.isGetElem());
1075:       assertFalse(node0.isTypeOf());
1076:       assertFalse(node0.isExprResult());
1077:       assertFalse(node0.isWhile());
1078:       assertFalse(node0.isWith());
1079:       assertEquals(39, node0.getType());
1080:       assertFalse(node0.isAssign());
1081:       assertFalse(node0.isReturn());
1082:       assertFalse(node0.isBlock());
1083:       assertFalse(node0.isDec());
1084:       assertFalse(node0.hasChildren());
1085:       assertFalse(node0.isCatch());
1086:       assertFalse(node0.isObjectLit());
1087:       assertFalse(node0.isInstanceOf());
1088:       assertFalse(node0.isAnd());
1089:       assertFalse(node0.isGetProp());
1090:       assertFalse(node0.isSetterDef());
1091:       assertFalse(node0.isNot());
1092:       assertFalse(node0.isDebugger());
1093:       assertFalse(node0.isCast());
1094:       assertFalse(node0.isThrow());
1095:       assertFalse(node0.isFalse());
1096:       assertFalse(node0.isFunction());
1097:       
1098:       node2.setType(935);
1099:       assertFalse(node2.equals((Object)node0));
1100:       assertFalse(node2.equals((Object)node1));
1101:       assertEquals(56, Node.CHANGE_TIME);
1102:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1103:       assertEquals(36, Node.QUOTED_PROP);
1104:       assertEquals(53, Node.INPUT_ID);
1105:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1106:       assertEquals(29, Node.JSDOC_INFO_PROP);
1107:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1108:       assertEquals(1, Node.DECR_FLAG);
1109:       assertEquals(12, Node.COLUMN_BITS);
1110:       assertEquals(32, Node.INCRDECR_PROP);
1111:       assertEquals(49, Node.DIRECT_EVAL);
1112:       assertEquals(37, Node.OPT_ARG_NAME);
1113:       assertEquals(48, Node.DIRECTIVES);
1114:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1115:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1116:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1117:       assertEquals(4095, Node.COLUMN_MASK);
1118:       assertEquals(40, Node.ORIGINALNAME_PROP);
1119:       assertEquals(57, Node.REFLECTED_OBJECT);
1120:       assertEquals(8, Node.FLAG_NO_THROWS);
1121:       assertEquals(54, Node.SLASH_V);
1122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1123:       assertEquals(39, Node.EMPTY_BLOCK);
1124:       assertEquals(50, Node.FREE_CALL);
1125:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1126:       assertEquals(52, Node.LENGTH);
1127:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1128:       assertEquals(55, Node.INFERRED_FUNCTION);
1129:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1130:       assertEquals(46, Node.IS_NAMESPACE);
1131:       assertEquals(43, Node.IS_CONSTANT_NAME);
1132:       assertEquals(57, Node.LAST_PROP);
1133:       assertEquals(2, Node.POST_FLAG);
1134:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1135:       assertEquals(47, Node.IS_DISPATCHER);
1136:       assertEquals(30, Node.VAR_ARGS_NAME);
1137:       assertFalse(node2.isIf());
1138:       assertFalse(node2.isGetterDef());
1139:       assertFalse(node2.isDelProp());
1140:       assertFalse(node2.isFor());
1141:       assertFalse(node2.isNE());
1142:       assertFalse(node2.isVoid());
1143:       assertFalse(node2.isFunction());
1144:       assertFalse(node2.isArrayLit());
1145:       assertEquals(147468, node2.getSourcePosition());
1146:       assertFalse(node2.isDefaultCase());
1147:       assertFalse(node2.isTrue());
1148:       assertFalse(node2.isIn());
1149:       assertFalse(node2.isSetterDef());
1150:       assertFalse(node2.isInc());
1151:       assertFalse(node2.isEmpty());
1152:       assertFalse(node2.isBreak());
1153:       assertFalse(node2.isFalse());
1154:       assertFalse(node2.isName());
1155:       assertFalse(node2.isComma());
1156:       assertFalse(node2.isThrow());
1157:       assertFalse(node2.isNull());
1158:       assertFalse(node2.isCall());
1159:       assertFalse(node2.isWhile());
1160:       assertFalse(node2.isString());
1161:       assertFalse(node2.isNot());
1162:       assertFalse(node2.isObjectLit());
1163:       assertFalse(node2.isAnd());
1164:       assertFalse(node2.isDebugger());
1165:       assertFalse(node2.isGetProp());
1166:       assertFalse(node2.hasChildren());
1167:       assertFalse(node2.isNumber());
1168:       assertFalse(node2.isDec());
1169:       assertFalse(node2.isLabelName());
1170:       assertFalse(node2.isAssign());
1171:       assertFalse(node2.isTypeOf());
1172:       assertFalse(node2.isReturn());
1173:       assertFalse(node2.isLabel());
1174:       assertFalse(node2.isCast());
1175:       assertFalse(node2.hasMoreThanOneChild());
1176:       assertFalse(node2.isContinue());
1177:       assertEquals(36, node2.getLineno());
1178:       assertFalse(node2.isGetElem());
1179:       assertFalse(node2.isExprResult());
1180:       assertFalse(node2.isDo());
1181:       assertFalse(node2.isAssignAdd());
1182:       assertFalse(node2.isNew());
1183:       assertFalse(node2.isOr());
1184:       assertFalse(node2.isAdd());
1185:       assertFalse(node2.isParamList());
1186:       assertFalse(node2.isThis());
1187:       assertFalse(node2.isStringKey());
1188:       assertFalse(node2.isHook());
1189:       assertFalse(node2.isVar());
1190:       assertEquals(12, node2.getCharno());
1191:       assertEquals(0, node2.getChildCount());
1192:       assertFalse(node2.isCatch());
1193:       assertFalse(node2.isInstanceOf());
1194:       assertFalse(node2.isWith());
1195:       assertEquals(935, node2.getType());
1196:       assertFalse(node2.isCase());
1197:       assertFalse(node2.isRegExp());
1198:       assertFalse(node2.isSwitch());
1199:       assertFalse(node2.isBlock());
1200:       assertFalse(node2.hasOneChild());
1201:       assertFalse(node2.isTry());
1202:       assertFalse(node2.isScript());
1203:       assertNotSame(node2, node1);
1204:       
1205:       node2.setSourceEncodedPositionForTree(55);
1206:       assertFalse(node2.equals((Object)node0));
1207:       assertFalse(node2.equals((Object)node1));
1208:       assertEquals(56, Node.CHANGE_TIME);
1209:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1210:       assertEquals(36, Node.QUOTED_PROP);
1211:       assertEquals(53, Node.INPUT_ID);
1212:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1213:       assertEquals(29, Node.JSDOC_INFO_PROP);
1214:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1215:       assertEquals(1, Node.DECR_FLAG);
1216:       assertEquals(12, Node.COLUMN_BITS);
1217:       assertEquals(32, Node.INCRDECR_PROP);
1218:       assertEquals(49, Node.DIRECT_EVAL);
1219:       assertEquals(37, Node.OPT_ARG_NAME);
1220:       assertEquals(48, Node.DIRECTIVES);
1221:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1222:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1223:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1224:       assertEquals(4095, Node.COLUMN_MASK);
1225:       assertEquals(40, Node.ORIGINALNAME_PROP);
1226:       assertEquals(57, Node.REFLECTED_OBJECT);
1227:       assertEquals(8, Node.FLAG_NO_THROWS);
1228:       assertEquals(54, Node.SLASH_V);
1229:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1230:       assertEquals(39, Node.EMPTY_BLOCK);
1231:       assertEquals(50, Node.FREE_CALL);
1232:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1233:       assertEquals(52, Node.LENGTH);
1234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1235:       assertEquals(55, Node.INFERRED_FUNCTION);
1236:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1237:       assertEquals(46, Node.IS_NAMESPACE);
1238:       assertEquals(43, Node.IS_CONSTANT_NAME);
1239:       assertEquals(57, Node.LAST_PROP);
1240:       assertEquals(2, Node.POST_FLAG);
1241:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1242:       assertEquals(47, Node.IS_DISPATCHER);
1243:       assertEquals(30, Node.VAR_ARGS_NAME);
1244:       assertFalse(node2.isIf());
1245:       assertFalse(node2.isGetterDef());
1246:       assertFalse(node2.isDelProp());
1247:       assertFalse(node2.isFor());
1248:       assertFalse(node2.isNE());
1249:       assertFalse(node2.isVoid());
1250:       assertFalse(node2.isFunction());
1251:       assertFalse(node2.isArrayLit());
1252:       assertFalse(node2.isDefaultCase());
1253:       assertFalse(node2.isTrue());
1254:       assertFalse(node2.isIn());
1255:       assertFalse(node2.isSetterDef());
1256:       assertFalse(node2.isInc());
1257:       assertFalse(node2.isEmpty());
1258:       assertFalse(node2.isBreak());
1259:       assertFalse(node2.isFalse());
1260:       assertFalse(node2.isName());
1261:       assertFalse(node2.isComma());
1262:       assertFalse(node2.isThrow());
1263:       assertFalse(node2.isNull());
1264:       assertEquals(0, node2.getLineno());
1265:       assertFalse(node2.isCall());
1266:       assertFalse(node2.isWhile());
1267:       assertFalse(node2.isString());
1268:       assertFalse(node2.isNot());
1269:       assertFalse(node2.isObjectLit());
1270:       assertFalse(node2.isAnd());
1271:       assertFalse(node2.isDebugger());
1272:       assertEquals(55, node2.getCharno());
1273:       assertFalse(node2.isGetProp());
1274:       assertFalse(node2.hasChildren());
1275:       assertFalse(node2.isNumber());
1276:       assertFalse(node2.isDec());
1277:       assertFalse(node2.isLabelName());
1278:       assertFalse(node2.isAssign());
1279:       assertFalse(node2.isTypeOf());
1280:       assertFalse(node2.isReturn());
1281:       assertFalse(node2.isLabel());
1282:       assertFalse(node2.isCast());
1283:       assertFalse(node2.hasMoreThanOneChild());
1284:       assertFalse(node2.isContinue());
1285:       assertFalse(node2.isGetElem());
1286:       assertFalse(node2.isExprResult());
1287:       assertFalse(node2.isDo());
1288:       assertFalse(node2.isAssignAdd());
1289:       assertFalse(node2.isNew());
1290:       assertFalse(node2.isOr());
1291:       assertFalse(node2.isAdd());
1292:       assertFalse(node2.isParamList());
1293:       assertFalse(node2.isThis());
1294:       assertFalse(node2.isStringKey());
1295:       assertFalse(node2.isHook());
1296:       assertFalse(node2.isVar());
1297:       assertEquals(0, node2.getChildCount());
1298:       assertFalse(node2.isCatch());
1299:       assertFalse(node2.isInstanceOf());
1300:       assertFalse(node2.isWith());
1301:       assertEquals(935, node2.getType());
1302:       assertFalse(node2.isCase());
1303:       assertFalse(node2.isRegExp());
1304:       assertFalse(node2.isSwitch());
1305:       assertFalse(node2.isBlock());
1306:       assertFalse(node2.hasOneChild());
1307:       assertEquals(55, node2.getSourcePosition());
1308:       assertFalse(node2.isTry());
1309:       assertFalse(node2.isScript());
1310:       assertNotSame(node2, node1);
1311:       
1312:       boolean boolean4 = node1.isSetterDef();
1313:       assertFalse(node1.equals((Object)node0));
1314:       assertFalse(node1.equals((Object)node2));
1315:       assertFalse(boolean4 == boolean3);
1316:       assertTrue(boolean4 == boolean0);
1317:       assertFalse(boolean4 == boolean1);
1318:       assertTrue(boolean4 == boolean2);
1319:       assertEquals(4095, Node.COLUMN_MASK);
1320:       assertEquals(55, Node.INFERRED_FUNCTION);
1321:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1322:       assertEquals(36, Node.QUOTED_PROP);
1323:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1324:       assertEquals(43, Node.IS_CONSTANT_NAME);
1325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1326:       assertEquals(48, Node.DIRECTIVES);
1327:       assertEquals(40, Node.ORIGINALNAME_PROP);
1328:       assertEquals(57, Node.REFLECTED_OBJECT);
1329:       assertEquals(29, Node.JSDOC_INFO_PROP);
1330:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1331:       assertEquals(52, Node.LENGTH);
1332:       assertEquals(47, Node.IS_DISPATCHER);
1333:       assertEquals(2, Node.POST_FLAG);
1334:       assertEquals(8, Node.FLAG_NO_THROWS);
1335:       assertEquals(39, Node.EMPTY_BLOCK);
1336:       assertEquals(53, Node.INPUT_ID);
1337:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1338:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1339:       assertEquals(57, Node.LAST_PROP);
1340:       assertEquals(12, Node.COLUMN_BITS);
1341:       assertEquals(46, Node.IS_NAMESPACE);
1342:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1343:       assertEquals(30, Node.VAR_ARGS_NAME);
1344:       assertEquals(37, Node.OPT_ARG_NAME);
1345:       assertEquals(56, Node.CHANGE_TIME);
1346:       assertEquals(54, Node.SLASH_V);
1347:       assertEquals(49, Node.DIRECT_EVAL);
1348:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1349:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1350:       assertEquals(50, Node.FREE_CALL);
1351:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1352:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1353:       assertEquals(32, Node.INCRDECR_PROP);
1354:       assertEquals(1, Node.DECR_FLAG);
1355:       assertFalse(boolean4);
1356:       assertFalse(node1.isWith());
1357:       assertFalse(node1.isNot());
1358:       assertFalse(node1.isScript());
1359:       assertFalse(node1.isObjectLit());
1360:       assertFalse(node1.isExprResult());
1361:       assertFalse(node1.isInstanceOf());
1362:       assertFalse(node1.hasOneChild());
1363:       assertFalse(node1.isGetProp());
1364:       assertFalse(node1.isThis());
1365:       assertFalse(node1.isLabelName());
1366:       assertEquals((-1), node1.getSourcePosition());
1367:       assertFalse(node1.isCast());
1368:       assertFalse(node1.isNumber());
1369:       assertFalse(node1.isFalse());
1370:       assertEquals((-1), node1.getCharno());
1371:       assertFalse(node1.isSwitch());
1372:       assertFalse(node1.isAnd());
1373:       assertFalse(node1.isDo());
1374:       assertFalse(node1.isString());
1375:       assertFalse(node1.isReturn());
1376:       assertFalse(node1.isAdd());
1377:       assertFalse(node1.isNew());
1378:       assertFalse(node1.isLabel());
1379:       assertFalse(node1.isVar());
1380:       assertFalse(node1.isWhile());
1381:       assertFalse(node1.isAssignAdd());
1382:       assertFalse(node1.isAssign());
1383:       assertFalse(node1.isEmpty());
1384:       assertFalse(node1.isDelProp());
1385:       assertFalse(node1.isName());
1386:       assertFalse(node1.isDec());
1387:       assertFalse(node1.isGetElem());
1388:       assertFalse(node1.isBreak());
1389:       assertFalse(node1.hasChildren());
1390:       assertFalse(node1.isComma());
1391:       assertFalse(node1.isTypeOf());
1392:       assertFalse(node1.isCall());
1393:       assertFalse(node1.isOr());
1394:       assertFalse(node1.isVoid());
1395:       assertFalse(node1.isTrue());
1396:       assertFalse(node1.isNull());
1397:       assertFalse(node1.isFunction());
1398:       assertFalse(node1.isCatch());
1399:       assertFalse(node1.isRegExp());
1400:       assertFalse(node1.isTry());
1401:       assertEquals(0, node1.getChildCount());
1402:       assertFalse(node1.isDefaultCase());
1403:       assertFalse(node1.isGetterDef());
1404:       assertEquals((-1), node1.getType());
1405:       assertFalse(node1.isArrayLit());
1406:       assertFalse(node1.isDebugger());
1407:       assertFalse(node1.isStringKey());
1408:       assertFalse(node1.isParamList());
1409:       assertFalse(node1.isCase());
1410:       assertFalse(node1.hasMoreThanOneChild());
1411:       assertFalse(node1.isInc());
1412:       assertFalse(node1.isIn());
1413:       assertFalse(node1.isContinue());
1414:       assertFalse(node1.isBlock());
1415:       assertFalse(node1.isHook());
1416:       assertFalse(node1.isThrow());
1417:       assertFalse(node1.isFor());
1418:       assertFalse(node1.isSetterDef());
1419:       assertEquals((-1), node1.getLineno());
1420:       assertFalse(node1.isNE());
1421:       assertFalse(node1.isIf());
1422:       assertNotSame(node1, node2);
1423:       
1424:       Node node3 = Node.newString("^}Wt8", 2268, (-3532));
1425:       assertFalse(node3.equals((Object)node0));
1426:       assertFalse(node3.equals((Object)node1));
1427:       assertFalse(node3.equals((Object)node2));
1428:       assertEquals(12, Node.COLUMN_BITS);
1429:       assertEquals(1, Node.DECR_FLAG);
1430:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1431:       assertEquals(30, Node.VAR_ARGS_NAME);
1432:       assertEquals(54, Node.SLASH_V);
1433:       assertEquals(37, Node.OPT_ARG_NAME);
1434:       assertEquals(49, Node.DIRECT_EVAL);
1435:       assertEquals(46, Node.IS_NAMESPACE);
1436:       assertEquals(56, Node.CHANGE_TIME);
1437:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1438:       assertEquals(50, Node.FREE_CALL);
1439:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1440:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1441:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1442:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1443:       assertEquals(32, Node.INCRDECR_PROP);
1444:       assertEquals(55, Node.INFERRED_FUNCTION);
1445:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1446:       assertEquals(4095, Node.COLUMN_MASK);
1447:       assertEquals(8, Node.FLAG_NO_THROWS);
1448:       assertEquals(48, Node.DIRECTIVES);
1449:       assertEquals(36, Node.QUOTED_PROP);
1450:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1451:       assertEquals(43, Node.IS_CONSTANT_NAME);
1452:       assertEquals(40, Node.ORIGINALNAME_PROP);
1453:       assertEquals(57, Node.REFLECTED_OBJECT);
1454:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1455:       assertEquals(52, Node.LENGTH);
1456:       assertEquals(29, Node.JSDOC_INFO_PROP);
1457:       assertEquals(53, Node.INPUT_ID);
1458:       assertEquals(2, Node.POST_FLAG);
1459:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1460:       assertEquals(39, Node.EMPTY_BLOCK);
1461:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1462:       assertEquals(47, Node.IS_DISPATCHER);
1463:       assertEquals(57, Node.LAST_PROP);
1464:       assertNotNull(node3);
1465:       assertFalse(node3.isDo());
1466:       assertFalse(node3.isWhile());
1467:       assertFalse(node3.isContinue());
1468:       assertFalse(node3.hasMoreThanOneChild());
1469:       assertFalse(node3.isLabel());
1470:       assertFalse(node3.isAssignAdd());
1471:       assertFalse(node3.isNew());
1472:       assertTrue(node3.isString());
1473:       assertFalse(node3.isVar());
1474:       assertFalse(node3.isDec());
1475:       assertFalse(node3.hasChildren());
1476:       assertFalse(node3.isBlock());
1477:       assertFalse(node3.isReturn());
1478:       assertFalse(node3.isAssign());
1479:       assertFalse(node3.isTypeOf());
1480:       assertFalse(node3.isName());
1481:       assertFalse(node3.isSetterDef());
1482:       assertFalse(node3.isGetElem());
1483:       assertFalse(node3.isCall());
1484:       assertFalse(node3.isOr());
1485:       assertFalse(node3.isAdd());
1486:       assertEquals((-1), node3.getLineno());
1487:       assertFalse(node3.isNull());
1488:       assertFalse(node3.isDefaultCase());
1489:       assertFalse(node3.isWith());
1490:       assertFalse(node3.isScript());
1491:       assertFalse(node3.isInstanceOf());
1492:       assertFalse(node3.isCatch());
1493:       assertFalse(node3.isTry());
1494:       assertEquals(0, node3.getChildCount());
1495:       assertFalse(node3.isRegExp());
1496:       assertFalse(node3.isThis());
1497:       assertFalse(node3.isLabelName());
1498:       assertFalse(node3.isFor());
1499:       assertFalse(node3.isStringKey());
1500:       assertFalse(node3.isGetterDef());
1501:       assertFalse(node3.isNumber());
1502:       assertFalse(node3.isArrayLit());
1503:       assertFalse(node3.hasOneChild());
1504:       assertFalse(node3.isSwitch());
1505:       assertFalse(node3.isParamList());
1506:       assertEquals((-1), node3.getCharno());
1507:       assertFalse(node3.isCase());
1508:       assertFalse(node3.isInc());
1509:       assertFalse(node3.isThrow());
1510:       assertFalse(node3.isHook());
1511:       assertFalse(node3.isEmpty());
1512:       assertFalse(node3.isIf());
1513:       assertFalse(node3.isDelProp());
1514:       assertFalse(node3.isBreak());
1515:       assertFalse(node3.isIn());
1516:       assertFalse(node3.isVoid());
1517:       assertFalse(node3.isNE());
1518:       assertFalse(node3.isTrue());
1519:       assertFalse(node3.isNot());
1520:       assertFalse(node3.isAnd());
1521:       assertFalse(node3.isObjectLit());
1522:       assertFalse(node3.isExprResult());
1523:       assertFalse(node3.isFunction());
1524:       assertFalse(node3.isComma());
1525:       assertEquals(40, node3.getType());
1526:       assertFalse(node3.isFalse());
1527:       assertFalse(node3.isCast());
1528:       assertFalse(node3.isGetProp());
1529:       assertEquals((-1), node3.getSourcePosition());
1530:       assertFalse(node3.isDebugger());
1531:       
1532:       Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node0);
1533:       assertFalse(node0.equals((Object)node1));
1534:       assertFalse(node0.equals((Object)node2));
1535:       assertFalse(node0.equals((Object)node3));
1536:       assertFalse(node2.equals((Object)node0));
1537:       assertFalse(node2.equals((Object)node3));
1538:       assertFalse(node2.equals((Object)node1));
1539:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1540:       assertEquals(32, Node.INCRDECR_PROP);
1541:       assertEquals(37, Node.OPT_ARG_NAME);
1542:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1543:       assertEquals(57, Node.LAST_PROP);
1544:       assertEquals(47, Node.IS_DISPATCHER);
1545:       assertEquals(2, Node.POST_FLAG);
1546:       assertEquals(30, Node.VAR_ARGS_NAME);
1547:       assertEquals(1, Node.DECR_FLAG);
1548:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1549:       assertEquals(12, Node.COLUMN_BITS);
1550:       assertEquals(40, Node.ORIGINALNAME_PROP);
1551:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1552:       assertEquals(50, Node.FREE_CALL);
1553:       assertEquals(43, Node.IS_CONSTANT_NAME);
1554:       assertEquals(46, Node.IS_NAMESPACE);
1555:       assertEquals(54, Node.SLASH_V);
1556:       assertEquals(48, Node.DIRECTIVES);
1557:       assertEquals(8, Node.FLAG_NO_THROWS);
1558:       assertEquals(39, Node.EMPTY_BLOCK);
1559:       assertEquals(4095, Node.COLUMN_MASK);
1560:       assertEquals(55, Node.INFERRED_FUNCTION);
1561:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1562:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1563:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1564:       assertEquals(52, Node.LENGTH);
1565:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1566:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1567:       assertEquals(53, Node.INPUT_ID);
1568:       assertEquals(29, Node.JSDOC_INFO_PROP);
1569:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1570:       assertEquals(36, Node.QUOTED_PROP);
1571:       assertEquals(49, Node.DIRECT_EVAL);
1572:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1573:       assertEquals(56, Node.CHANGE_TIME);
1574:       assertEquals(57, Node.REFLECTED_OBJECT);
1575:       assertEquals(56, Node.CHANGE_TIME);
1576:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1577:       assertEquals(36, Node.QUOTED_PROP);
1578:       assertEquals(53, Node.INPUT_ID);
1579:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1580:       assertEquals(29, Node.JSDOC_INFO_PROP);
1581:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1582:       assertEquals(1, Node.DECR_FLAG);
1583:       assertEquals(12, Node.COLUMN_BITS);
1584:       assertEquals(32, Node.INCRDECR_PROP);
1585:       assertEquals(49, Node.DIRECT_EVAL);
1586:       assertEquals(37, Node.OPT_ARG_NAME);
1587:       assertEquals(48, Node.DIRECTIVES);
1588:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1589:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1590:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1591:       assertEquals(4095, Node.COLUMN_MASK);
1592:       assertEquals(40, Node.ORIGINALNAME_PROP);
1593:       assertEquals(57, Node.REFLECTED_OBJECT);
1594:       assertEquals(8, Node.FLAG_NO_THROWS);
1595:       assertEquals(54, Node.SLASH_V);
1596:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1597:       assertEquals(39, Node.EMPTY_BLOCK);
1598:       assertEquals(50, Node.FREE_CALL);
1599:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1600:       assertEquals(52, Node.LENGTH);
1601:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1602:       assertEquals(55, Node.INFERRED_FUNCTION);
1603:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1604:       assertEquals(46, Node.IS_NAMESPACE);
1605:       assertEquals(43, Node.IS_CONSTANT_NAME);
1606:       assertEquals(57, Node.LAST_PROP);
1607:       assertEquals(2, Node.POST_FLAG);
1608:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1609:       assertEquals(47, Node.IS_DISPATCHER);
1610:       assertEquals(30, Node.VAR_ARGS_NAME);
1611:       assertNotNull(node_NodeMismatch0);
1612:       assertFalse(node0.isIn());
1613:       assertTrue(node0.isNumber());
1614:       assertFalse(node0.isCase());
1615:       assertFalse(node0.isNE());
1616:       assertFalse(node0.isSwitch());
1617:       assertFalse(node0.isInc());
1618:       assertFalse(node0.isIf());
1619:       assertFalse(node0.isString());
1620:       assertFalse(node0.isGetterDef());
1621:       assertEquals((-1), node0.getCharno());
1622:       assertFalse(node0.isTry());
1623:       assertFalse(node0.isDelProp());
1624:       assertFalse(node0.isBreak());
1625:       assertFalse(node0.isThis());
1626:       assertFalse(node0.isComma());
1627:       assertFalse(node0.isRegExp());
1628:       assertFalse(node0.isFor());
1629:       assertFalse(node0.isHook());
1630:       assertFalse(node0.isScript());
1631:       assertFalse(node0.isVoid());
1632:       assertFalse(node0.isTrue());
1633:       assertFalse(node0.isNull());
1634:       assertFalse(node0.isParamList());
1635:       assertFalse(node0.isVar());
1636:       assertFalse(node0.isStringKey());
1637:       assertFalse(node0.isLabelName());
1638:       assertFalse(node0.isAdd());
1639:       assertFalse(node0.isEmpty());
1640:       assertFalse(node0.isNew());
1641:       assertFalse(node0.isArrayLit());
1642:       assertFalse(node0.isDefaultCase());
1643:       assertEquals(0, node0.getChildCount());
1644:       assertFalse(node0.isLabel());
1645:       assertFalse(node0.hasMoreThanOneChild());
1646:       assertFalse(node0.isContinue());
1647:       assertFalse(node0.isDo());
1648:       assertFalse(node0.isAssignAdd());
1649:       assertEquals((-1), node0.getLineno());
1650:       assertFalse(node0.isOr());
1651:       assertEquals((-1), node0.getSourcePosition());
1652:       assertFalse(node0.isCall());
1653:       assertFalse(node0.isName());
1654:       assertFalse(node0.hasOneChild());
1655:       assertFalse(node0.isGetElem());
1656:       assertFalse(node0.isTypeOf());
1657:       assertFalse(node0.isExprResult());
1658:       assertFalse(node0.isWhile());
1659:       assertFalse(node0.isWith());
1660:       assertEquals(39, node0.getType());
1661:       assertFalse(node0.isAssign());
1662:       assertFalse(node0.isReturn());
1663:       assertFalse(node0.isBlock());
1664:       assertFalse(node0.isDec());
1665:       assertFalse(node0.hasChildren());
1666:       assertFalse(node0.isCatch());
1667:       assertFalse(node0.isObjectLit());
1668:       assertFalse(node0.isInstanceOf());
1669:       assertFalse(node0.isAnd());
1670:       assertFalse(node0.isGetProp());
1671:       assertFalse(node0.isSetterDef());
1672:       assertFalse(node0.isNot());
1673:       assertFalse(node0.isDebugger());
1674:       assertFalse(node0.isCast());
1675:       assertFalse(node0.isThrow());
1676:       assertFalse(node0.isFalse());
1677:       assertFalse(node0.isFunction());
1678:       assertFalse(node2.isIf());
1679:       assertFalse(node2.isGetterDef());
1680:       assertFalse(node2.isDelProp());
1681:       assertFalse(node2.isFor());
1682:       assertFalse(node2.isNE());
1683:       assertFalse(node2.isVoid());
1684:       assertFalse(node2.isFunction());
1685:       assertFalse(node2.isArrayLit());
1686:       assertFalse(node2.isDefaultCase());
1687:       assertFalse(node2.isTrue());
1688:       assertFalse(node2.isIn());
1689:       assertFalse(node2.isSetterDef());
1690:       assertFalse(node2.isInc());
1691:       assertFalse(node2.isEmpty());
1692:       assertFalse(node2.isBreak());
1693:       assertFalse(node2.isFalse());
1694:       assertFalse(node2.isName());
1695:       assertFalse(node2.isComma());
1696:       assertFalse(node2.isThrow());
1697:       assertFalse(node2.isNull());
1698:       assertEquals(0, node2.getLineno());
1699:       assertFalse(node2.isCall());
1700:       assertFalse(node2.isWhile());
1701:       assertFalse(node2.isString());
1702:       assertFalse(node2.isNot());
1703:       assertFalse(node2.isObjectLit());
1704:       assertFalse(node2.isAnd());
1705:       assertFalse(node2.isDebugger());
1706:       assertEquals(55, node2.getCharno());
1707:       assertFalse(node2.isGetProp());
1708:       assertFalse(node2.hasChildren());
1709:       assertFalse(node2.isNumber());
1710:       assertFalse(node2.isDec());
1711:       assertFalse(node2.isLabelName());
1712:       assertFalse(node2.isAssign());
1713:       assertFalse(node2.isTypeOf());
1714:       assertFalse(node2.isReturn());
1715:       assertFalse(node2.isLabel());
1716:       assertFalse(node2.isCast());
1717:       assertFalse(node2.hasMoreThanOneChild());
1718:       assertFalse(node2.isContinue());
1719:       assertFalse(node2.isGetElem());
1720:       assertFalse(node2.isExprResult());
1721:       assertFalse(node2.isDo());
1722:       assertFalse(node2.isAssignAdd());
1723:       assertFalse(node2.isNew());
1724:       assertFalse(node2.isOr());
1725:       assertFalse(node2.isAdd());
1726:       assertFalse(node2.isParamList());
1727:       assertFalse(node2.isThis());
1728:       assertFalse(node2.isStringKey());
1729:       assertFalse(node2.isHook());
1730:       assertFalse(node2.isVar());
1731:       assertEquals(0, node2.getChildCount());
1732:       assertFalse(node2.isCatch());
1733:       assertFalse(node2.isInstanceOf());
1734:       assertFalse(node2.isWith());
1735:       assertEquals(935, node2.getType());
1736:       assertFalse(node2.isCase());
1737:       assertFalse(node2.isRegExp());
1738:       assertFalse(node2.isSwitch());
1739:       assertFalse(node2.isBlock());
1740:       assertFalse(node2.hasOneChild());
1741:       assertEquals(55, node2.getSourcePosition());
1742:       assertFalse(node2.isTry());
1743:       assertFalse(node2.isScript());
1744:       assertNotSame(node2, node1);
1745:       
1746:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
1747:       assertNotNull(jSTypeRegistry0);
1748:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1749:       
1750:       TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
1751:       assertEquals(1, JSType.ENUMDECL);
1752:       assertEquals(0, JSType.NOT_ENUMDECL);
1753:       assertNotNull(templateType0);
1754:       assertEquals("Object#Key", templateType0.getReferenceName());
1755:       assertTrue(templateType0.hasAnyTemplateTypesInternal());
1756:       assertFalse(templateType0.hasCachedValues());
1757:       assertFalse(templateType0.isVoidType());
1758:       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
1759:       assertFalse(templateType0.isFunctionPrototypeType());
1760:       assertFalse(templateType0.isNumberValueType());
1761:       assertFalse(templateType0.isNullType());
1762:       assertFalse(templateType0.isBooleanValueType());
1763:       assertTrue(templateType0.isTemplateType());
1764:       assertFalse(templateType0.isStringValueType());
1765:       assertTrue(templateType0.isObject());
1766:       assertFalse(templateType0.isResolved());
1767:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1768:       
1769:       TemplateType templateType1 = templateType0.toMaybeTemplateType();
1770:       assertEquals(1, JSType.ENUMDECL);
1771:       assertEquals(0, JSType.NOT_ENUMDECL);
1772:       assertEquals(1, JSType.ENUMDECL);
1773:       assertEquals(0, JSType.NOT_ENUMDECL);
1774:       assertNotNull(templateType1);
1775:       assertEquals("Object#Key", templateType0.getReferenceName());
1776:       assertTrue(templateType0.hasAnyTemplateTypesInternal());
1777:       assertFalse(templateType0.hasCachedValues());
1778:       assertFalse(templateType0.isVoidType());
1779:       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
1780:       assertFalse(templateType0.isFunctionPrototypeType());
1781:       assertFalse(templateType0.isNumberValueType());
1782:       assertFalse(templateType0.isNullType());
1783:       assertFalse(templateType0.isBooleanValueType());
1784:       assertTrue(templateType0.isTemplateType());
1785:       assertFalse(templateType0.isStringValueType());
1786:       assertTrue(templateType0.isObject());
1787:       assertFalse(templateType0.isResolved());
1788:       assertEquals("Object#Key", templateType1.getReferenceName());
1789:       assertFalse(templateType1.isVoidType());
1790:       assertTrue(templateType1.hasAnyTemplateTypesInternal());
1791:       assertFalse(templateType1.isResolved());
1792:       assertFalse(templateType1.isStringValueType());
1793:       assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
1794:       assertFalse(templateType1.isNullType());
1795:       assertTrue(templateType1.isTemplateType());
1796:       assertFalse(templateType1.isBooleanValueType());
1797:       assertTrue(templateType1.isObject());
1798:       assertFalse(templateType1.isFunctionPrototypeType());
1799:       assertFalse(templateType1.isNumberValueType());
1800:       assertFalse(templateType1.hasCachedValues());
1801:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1802:       assertSame(templateType0, templateType1);
1803:       assertSame(templateType1, templateType0);
1804:       
1805:       boolean boolean5 = node_NodeMismatch0.equals(templateType1);
1806:       assertFalse(node0.equals((Object)node1));
1807:       assertFalse(node0.equals((Object)node2));
1808:       assertFalse(node0.equals((Object)node3));
1809:       assertTrue(boolean5 == boolean2);
1810:       assertFalse(boolean5 == boolean3);
1811:       assertTrue(boolean5 == boolean0);
1812:       assertFalse(boolean5 == boolean1);
1813:       assertTrue(boolean5 == boolean4);
1814:       assertFalse(node2.equals((Object)node0));
1815:       assertFalse(node2.equals((Object)node3));
1816:       assertFalse(node2.equals((Object)node1));
1817:       assertEquals(1, JSType.ENUMDECL);
1818:       assertEquals(0, JSType.NOT_ENUMDECL);
1819:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1820:       assertEquals(32, Node.INCRDECR_PROP);
1821:       assertEquals(37, Node.OPT_ARG_NAME);
1822:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1823:       assertEquals(57, Node.LAST_PROP);
1824:       assertEquals(47, Node.IS_DISPATCHER);
1825:       assertEquals(2, Node.POST_FLAG);
1826:       assertEquals(30, Node.VAR_ARGS_NAME);
1827:       assertEquals(1, Node.DECR_FLAG);
1828:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1829:       assertEquals(12, Node.COLUMN_BITS);
1830:       assertEquals(40, Node.ORIGINALNAME_PROP);
1831:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1832:       assertEquals(50, Node.FREE_CALL);
1833:       assertEquals(43, Node.IS_CONSTANT_NAME);
1834:       assertEquals(46, Node.IS_NAMESPACE);
1835:       assertEquals(54, Node.SLASH_V);
1836:       assertEquals(48, Node.DIRECTIVES);
1837:       assertEquals(8, Node.FLAG_NO_THROWS);
1838:       assertEquals(39, Node.EMPTY_BLOCK);
1839:       assertEquals(4095, Node.COLUMN_MASK);
1840:       assertEquals(55, Node.INFERRED_FUNCTION);
1841:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1842:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1843:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1844:       assertEquals(52, Node.LENGTH);
1845:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1846:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1847:       assertEquals(53, Node.INPUT_ID);
1848:       assertEquals(29, Node.JSDOC_INFO_PROP);
1849:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1850:       assertEquals(36, Node.QUOTED_PROP);
1851:       assertEquals(49, Node.DIRECT_EVAL);
1852:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1853:       assertEquals(56, Node.CHANGE_TIME);
1854:       assertEquals(57, Node.REFLECTED_OBJECT);
1855:       assertEquals(1, JSType.ENUMDECL);
1856:       assertEquals(0, JSType.NOT_ENUMDECL);
1857:       assertEquals(56, Node.CHANGE_TIME);
1858:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1859:       assertEquals(36, Node.QUOTED_PROP);
1860:       assertEquals(53, Node.INPUT_ID);
1861:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1862:       assertEquals(29, Node.JSDOC_INFO_PROP);
1863:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1864:       assertEquals(1, Node.DECR_FLAG);
1865:       assertEquals(12, Node.COLUMN_BITS);
1866:       assertEquals(32, Node.INCRDECR_PROP);
1867:       assertEquals(49, Node.DIRECT_EVAL);
1868:       assertEquals(37, Node.OPT_ARG_NAME);
1869:       assertEquals(48, Node.DIRECTIVES);
1870:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1871:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1872:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1873:       assertEquals(4095, Node.COLUMN_MASK);
1874:       assertEquals(40, Node.ORIGINALNAME_PROP);
1875:       assertEquals(57, Node.REFLECTED_OBJECT);
1876:       assertEquals(8, Node.FLAG_NO_THROWS);
1877:       assertEquals(54, Node.SLASH_V);
1878:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1879:       assertEquals(39, Node.EMPTY_BLOCK);
1880:       assertEquals(50, Node.FREE_CALL);
1881:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1882:       assertEquals(52, Node.LENGTH);
1883:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1884:       assertEquals(55, Node.INFERRED_FUNCTION);
1885:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1886:       assertEquals(46, Node.IS_NAMESPACE);
1887:       assertEquals(43, Node.IS_CONSTANT_NAME);
1888:       assertEquals(57, Node.LAST_PROP);
1889:       assertEquals(2, Node.POST_FLAG);
1890:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1891:       assertEquals(47, Node.IS_DISPATCHER);
1892:       assertEquals(30, Node.VAR_ARGS_NAME);
1893:       assertFalse(boolean5);
1894:       assertEquals("Object#Key", templateType0.getReferenceName());
1895:       assertTrue(templateType0.hasAnyTemplateTypesInternal());
1896:       assertFalse(templateType0.hasCachedValues());
1897:       assertFalse(templateType0.isVoidType());
1898:       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
1899:       assertFalse(templateType0.isFunctionPrototypeType());
1900:       assertFalse(templateType0.isNumberValueType());
1901:       assertFalse(templateType0.isNullType());
1902:       assertFalse(templateType0.isBooleanValueType());
1903:       assertTrue(templateType0.isTemplateType());
1904:       assertFalse(templateType0.isStringValueType());
1905:       assertTrue(templateType0.isObject());
1906:       assertFalse(templateType0.isResolved());
1907:       assertFalse(node0.isIn());
1908:       assertTrue(node0.isNumber());
1909:       assertFalse(node0.isCase());
1910:       assertFalse(node0.isNE());
1911:       assertFalse(node0.isSwitch());
1912:       assertFalse(node0.isInc());
1913:       assertFalse(node0.isIf());
1914:       assertFalse(node0.isString());
1915:       assertFalse(node0.isGetterDef());
1916:       assertEquals((-1), node0.getCharno());
1917:       assertFalse(node0.isTry());
1918:       assertFalse(node0.isDelProp());
1919:       assertFalse(node0.isBreak());
1920:       assertFalse(node0.isThis());
1921:       assertFalse(node0.isComma());
1922:       assertFalse(node0.isRegExp());
1923:       assertFalse(node0.isFor());
1924:       assertFalse(node0.isHook());
1925:       assertFalse(node0.isScript());
1926:       assertFalse(node0.isVoid());
1927:       assertFalse(node0.isTrue());
1928:       assertFalse(node0.isNull());
1929:       assertFalse(node0.isParamList());
1930:       assertFalse(node0.isVar());
1931:       assertFalse(node0.isStringKey());
1932:       assertFalse(node0.isLabelName());
1933:       assertFalse(node0.isAdd());
1934:       assertFalse(node0.isEmpty());
1935:       assertFalse(node0.isNew());
1936:       assertFalse(node0.isArrayLit());
1937:       assertFalse(node0.isDefaultCase());
1938:       assertEquals(0, node0.getChildCount());
1939:       assertFalse(node0.isLabel());
1940:       assertFalse(node0.hasMoreThanOneChild());
1941:       assertFalse(node0.isContinue());
1942:       assertFalse(node0.isDo());
1943:       assertFalse(node0.isAssignAdd());
1944:       assertEquals((-1), node0.getLineno());
1945:       assertFalse(node0.isOr());
1946:       assertEquals((-1), node0.getSourcePosition());
1947:       assertFalse(node0.isCall());
1948:       assertFalse(node0.isName());
1949:       assertFalse(node0.hasOneChild());
1950:       assertFalse(node0.isGetElem());
1951:       assertFalse(node0.isTypeOf());
1952:       assertFalse(node0.isExprResult());
1953:       assertFalse(node0.isWhile());
1954:       assertFalse(node0.isWith());
1955:       assertEquals(39, node0.getType());
1956:       assertFalse(node0.isAssign());
1957:       assertFalse(node0.isReturn());
1958:       assertFalse(node0.isBlock());
1959:       assertFalse(node0.isDec());
1960:       assertFalse(node0.hasChildren());
1961:       assertFalse(node0.isCatch());
1962:       assertFalse(node0.isObjectLit());
1963:       assertFalse(node0.isInstanceOf());
1964:       assertFalse(node0.isAnd());
1965:       assertFalse(node0.isGetProp());
1966:       assertFalse(node0.isSetterDef());
1967:       assertFalse(node0.isNot());
1968:       assertFalse(node0.isDebugger());
1969:       assertFalse(node0.isCast());
1970:       assertFalse(node0.isThrow());
1971:       assertFalse(node0.isFalse());
1972:       assertFalse(node0.isFunction());
1973:       assertEquals("Object#Key", templateType1.getReferenceName());
1974:       assertFalse(templateType1.isVoidType());
1975:       assertTrue(templateType1.hasAnyTemplateTypesInternal());
1976:       assertFalse(templateType1.isResolved());
1977:       assertFalse(templateType1.isStringValueType());
1978:       assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
1979:       assertFalse(templateType1.isNullType());
1980:       assertTrue(templateType1.isTemplateType());
1981:       assertFalse(templateType1.isBooleanValueType());
1982:       assertTrue(templateType1.isObject());
1983:       assertFalse(templateType1.isFunctionPrototypeType());
1984:       assertFalse(templateType1.isNumberValueType());
1985:       assertFalse(templateType1.hasCachedValues());
1986:       assertFalse(node2.isIf());
1987:       assertFalse(node2.isGetterDef());
1988:       assertFalse(node2.isDelProp());
1989:       assertFalse(node2.isFor());
1990:       assertFalse(node2.isNE());
1991:       assertFalse(node2.isVoid());
1992:       assertFalse(node2.isFunction());
1993:       assertFalse(node2.isArrayLit());
1994:       assertFalse(node2.isDefaultCase());
1995:       assertFalse(node2.isTrue());
1996:       assertFalse(node2.isIn());
1997:       assertFalse(node2.isSetterDef());
1998:       assertFalse(node2.isInc());
1999:       assertFalse(node2.isEmpty());
2000:       assertFalse(node2.isBreak());
2001:       assertFalse(node2.isFalse());
2002:       assertFalse(node2.isName());
2003:       assertFalse(node2.isComma());
2004:       assertFalse(node2.isThrow());
2005:       assertFalse(node2.isNull());
2006:       assertEquals(0, node2.getLineno());
2007:       assertFalse(node2.isCall());
2008:       assertFalse(node2.isWhile());
2009:       assertFalse(node2.isString());
2010:       assertFalse(node2.isNot());
2011:       assertFalse(node2.isObjectLit());
2012:       assertFalse(node2.isAnd());
2013:       assertFalse(node2.isDebugger());
2014:       assertEquals(55, node2.getCharno());
2015:       assertFalse(node2.isGetProp());
2016:       assertFalse(node2.hasChildren());
2017:       assertFalse(node2.isNumber());
2018:       assertFalse(node2.isDec());
2019:       assertFalse(node2.isLabelName());
2020:       assertFalse(node2.isAssign());
2021:       assertFalse(node2.isTypeOf());
2022:       assertFalse(node2.isReturn());
2023:       assertFalse(node2.isLabel());
2024:       assertFalse(node2.isCast());
2025:       assertFalse(node2.hasMoreThanOneChild());
2026:       assertFalse(node2.isContinue());
2027:       assertFalse(node2.isGetElem());
2028:       assertFalse(node2.isExprResult());
2029:       assertFalse(node2.isDo());
2030:       assertFalse(node2.isAssignAdd());
2031:       assertFalse(node2.isNew());
2032:       assertFalse(node2.isOr());
2033:       assertFalse(node2.isAdd());
2034:       assertFalse(node2.isParamList());
2035:       assertFalse(node2.isThis());
2036:       assertFalse(node2.isStringKey());
2037:       assertFalse(node2.isHook());
2038:       assertFalse(node2.isVar());
2039:       assertEquals(0, node2.getChildCount());
2040:       assertFalse(node2.isCatch());
2041:       assertFalse(node2.isInstanceOf());
2042:       assertFalse(node2.isWith());
2043:       assertEquals(935, node2.getType());
2044:       assertFalse(node2.isCase());
2045:       assertFalse(node2.isRegExp());
2046:       assertFalse(node2.isSwitch());
2047:       assertFalse(node2.isBlock());
2048:       assertFalse(node2.hasOneChild());
2049:       assertEquals(55, node2.getSourcePosition());
2050:       assertFalse(node2.isTry());
2051:       assertFalse(node2.isScript());
2052:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
2053:       assertSame(templateType0, templateType1);
2054:       assertSame(templateType1, templateType0);
2055:       assertNotSame(node2, node1);
2056:       
2057:       boolean boolean6 = node3.isFromExterns();
2058:       assertTrue(boolean6 == boolean2);
2059:       assertFalse(boolean6 == boolean1);
2060:       assertFalse(boolean6 == boolean3);
2061:       assertTrue(boolean6 == boolean4);
2062:       assertTrue(boolean6 == boolean5);
2063:       assertTrue(boolean6 == boolean0);
2064:       assertFalse(node3.equals((Object)node0));
2065:       assertFalse(node3.equals((Object)node1));
2066:       assertFalse(node3.equals((Object)node2));
2067:       assertEquals(12, Node.COLUMN_BITS);
2068:       assertEquals(1, Node.DECR_FLAG);
2069:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2070:       assertEquals(30, Node.VAR_ARGS_NAME);
2071:       assertEquals(54, Node.SLASH_V);
2072:       assertEquals(37, Node.OPT_ARG_NAME);
2073:       assertEquals(49, Node.DIRECT_EVAL);
2074:       assertEquals(46, Node.IS_NAMESPACE);
2075:       assertEquals(56, Node.CHANGE_TIME);
2076:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2077:       assertEquals(50, Node.FREE_CALL);
2078:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2079:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2080:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2081:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2082:       assertEquals(32, Node.INCRDECR_PROP);
2083:       assertEquals(55, Node.INFERRED_FUNCTION);
2084:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2085:       assertEquals(4095, Node.COLUMN_MASK);
2086:       assertEquals(8, Node.FLAG_NO_THROWS);
2087:       assertEquals(48, Node.DIRECTIVES);
2088:       assertEquals(36, Node.QUOTED_PROP);
2089:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2090:       assertEquals(43, Node.IS_CONSTANT_NAME);
2091:       assertEquals(40, Node.ORIGINALNAME_PROP);
2092:       assertEquals(57, Node.REFLECTED_OBJECT);
2093:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2094:       assertEquals(52, Node.LENGTH);
2095:       assertEquals(29, Node.JSDOC_INFO_PROP);
2096:       assertEquals(53, Node.INPUT_ID);
2097:       assertEquals(2, Node.POST_FLAG);
2098:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2099:       assertEquals(39, Node.EMPTY_BLOCK);
2100:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2101:       assertEquals(47, Node.IS_DISPATCHER);
2102:       assertEquals(57, Node.LAST_PROP);
2103:       assertFalse(boolean6);
2104:       assertFalse(node3.isDo());
2105:       assertFalse(node3.isWhile());
2106:       assertFalse(node3.isContinue());
2107:       assertFalse(node3.hasMoreThanOneChild());
2108:       assertFalse(node3.isLabel());
2109:       assertFalse(node3.isAssignAdd());
2110:       assertFalse(node3.isNew());
2111:       assertTrue(node3.isString());
2112:       assertFalse(node3.isVar());
2113:       assertFalse(node3.isDec());
2114:       assertFalse(node3.hasChildren());
2115:       assertFalse(node3.isBlock());
2116:       assertFalse(node3.isReturn());
2117:       assertFalse(node3.isAssign());
2118:       assertFalse(node3.isTypeOf());
2119:       assertFalse(node3.isName());
2120:       assertFalse(node3.isSetterDef());
2121:       assertFalse(node3.isGetElem());
2122:       assertFalse(node3.isCall());
2123:       assertFalse(node3.isOr());
2124:       assertFalse(node3.isAdd());
2125:       assertEquals((-1), node3.getLineno());
2126:       assertFalse(node3.isNull());
2127:       assertFalse(node3.isDefaultCase());
2128:       assertFalse(node3.isWith());
2129:       assertFalse(node3.isScript());
2130:       assertFalse(node3.isInstanceOf());
2131:       assertFalse(node3.isCatch());
2132:       assertFalse(node3.isTry());
2133:       assertEquals(0, node3.getChildCount());
2134:       assertFalse(node3.isRegExp());
2135:       assertFalse(node3.isThis());
2136:       assertFalse(node3.isLabelName());
2137:       assertFalse(node3.isFor());
2138:       assertFalse(node3.isStringKey());
2139:       assertFalse(node3.isGetterDef());
2140:       assertFalse(node3.isNumber());
2141:       assertFalse(node3.isArrayLit());
2142:       assertFalse(node3.hasOneChild());
2143:       assertFalse(node3.isSwitch());
2144:       assertFalse(node3.isParamList());
2145:       assertEquals((-1), node3.getCharno());
2146:       assertFalse(node3.isCase());
2147:       assertFalse(node3.isInc());
2148:       assertFalse(node3.isThrow());
2149:       assertFalse(node3.isHook());
2150:       assertFalse(node3.isEmpty());
2151:       assertFalse(node3.isIf());
2152:       assertFalse(node3.isDelProp());
2153:       assertFalse(node3.isBreak());
2154:       assertFalse(node3.isIn());
2155:       assertFalse(node3.isVoid());
2156:       assertFalse(node3.isNE());
2157:       assertFalse(node3.isTrue());
2158:       assertFalse(node3.isNot());
2159:       assertFalse(node3.isAnd());
2160:       assertFalse(node3.isObjectLit());
2161:       assertFalse(node3.isExprResult());
2162:       assertFalse(node3.isFunction());
2163:       assertFalse(node3.isComma());
2164:       assertEquals(40, node3.getType());
2165:       assertFalse(node3.isFalse());
2166:       assertFalse(node3.isCast());
2167:       assertFalse(node3.isGetProp());
2168:       assertEquals((-1), node3.getSourcePosition());
2169:       assertFalse(node3.isDebugger());
2170:       
2171:       Iterable<Node> iterable0 = node1.children();
2172:       assertFalse(node1.equals((Object)node0));
2173:       assertFalse(node1.equals((Object)node3));
2174:       assertFalse(node1.equals((Object)node2));
2175:       assertEquals(4095, Node.COLUMN_MASK);
2176:       assertEquals(55, Node.INFERRED_FUNCTION);
2177:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2178:       assertEquals(36, Node.QUOTED_PROP);
2179:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2180:       assertEquals(43, Node.IS_CONSTANT_NAME);
2181:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2182:       assertEquals(48, Node.DIRECTIVES);
2183:       assertEquals(40, Node.ORIGINALNAME_PROP);
2184:       assertEquals(57, Node.REFLECTED_OBJECT);
2185:       assertEquals(29, Node.JSDOC_INFO_PROP);
2186:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2187:       assertEquals(52, Node.LENGTH);
2188:       assertEquals(47, Node.IS_DISPATCHER);
2189:       assertEquals(2, Node.POST_FLAG);
2190:       assertEquals(8, Node.FLAG_NO_THROWS);
2191:       assertEquals(39, Node.EMPTY_BLOCK);
2192:       assertEquals(53, Node.INPUT_ID);
2193:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2194:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2195:       assertEquals(57, Node.LAST_PROP);
2196:       assertEquals(12, Node.COLUMN_BITS);
2197:       assertEquals(46, Node.IS_NAMESPACE);
2198:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2199:       assertEquals(30, Node.VAR_ARGS_NAME);
2200:       assertEquals(37, Node.OPT_ARG_NAME);
2201:       assertEquals(56, Node.CHANGE_TIME);
2202:       assertEquals(54, Node.SLASH_V);
2203:       assertEquals(49, Node.DIRECT_EVAL);
2204:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2205:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2206:       assertEquals(50, Node.FREE_CALL);
2207:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2209:       assertEquals(32, Node.INCRDECR_PROP);
2210:       assertEquals(1, Node.DECR_FLAG);
2211:       assertFalse(iterable0.contains(node0));
2212:       assertNotNull(iterable0);
2213:       assertFalse(node1.isWith());
2214:       assertFalse(node1.isNot());
2215:       assertFalse(node1.isScript());
2216:       assertFalse(node1.isObjectLit());
2217:       assertFalse(node1.isExprResult());
2218:       assertFalse(node1.isInstanceOf());
2219:       assertFalse(node1.hasOneChild());
2220:       assertFalse(node1.isGetProp());
2221:       assertFalse(node1.isThis());
2222:       assertFalse(node1.isLabelName());
2223:       assertEquals((-1), node1.getSourcePosition());
2224:       assertFalse(node1.isCast());
2225:       assertFalse(node1.isNumber());
2226:       assertFalse(node1.isFalse());
2227:       assertEquals((-1), node1.getCharno());
2228:       assertFalse(node1.isSwitch());
2229:       assertFalse(node1.isAnd());
2230:       assertFalse(node1.isDo());
2231:       assertFalse(node1.isString());
2232:       assertFalse(node1.isReturn());
2233:       assertFalse(node1.isAdd());
2234:       assertFalse(node1.isNew());
2235:       assertFalse(node1.isLabel());
2236:       assertFalse(node1.isVar());
2237:       assertFalse(node1.isWhile());
2238:       assertFalse(node1.isAssignAdd());
2239:       assertFalse(node1.isAssign());
2240:       assertFalse(node1.isEmpty());
2241:       assertFalse(node1.isDelProp());
2242:       assertFalse(node1.isName());
2243:       assertFalse(node1.isDec());
2244:       assertFalse(node1.isGetElem());
2245:       assertFalse(node1.isBreak());
2246:       assertFalse(node1.hasChildren());
2247:       assertFalse(node1.isComma());
2248:       assertFalse(node1.isTypeOf());
2249:       assertFalse(node1.isCall());
2250:       assertFalse(node1.isOr());
2251:       assertFalse(node1.isVoid());
2252:       assertFalse(node1.isTrue());
2253:       assertFalse(node1.isNull());
2254:       assertFalse(node1.isFunction());
2255:       assertFalse(node1.isCatch());
2256:       assertFalse(node1.isRegExp());
2257:       assertFalse(node1.isTry());
2258:       assertEquals(0, node1.getChildCount());
2259:       assertFalse(node1.isDefaultCase());
2260:       assertFalse(node1.isGetterDef());
2261:       assertEquals((-1), node1.getType());
2262:       assertFalse(node1.isArrayLit());
2263:       assertFalse(node1.isDebugger());
2264:       assertFalse(node1.isStringKey());
2265:       assertFalse(node1.isParamList());
2266:       assertFalse(node1.isCase());
2267:       assertFalse(node1.hasMoreThanOneChild());
2268:       assertFalse(node1.isInc());
2269:       assertFalse(node1.isIn());
2270:       assertFalse(node1.isContinue());
2271:       assertFalse(node1.isBlock());
2272:       assertFalse(node1.isHook());
2273:       assertFalse(node1.isThrow());
2274:       assertFalse(node1.isFor());
2275:       assertFalse(node1.isSetterDef());
2276:       assertEquals((-1), node1.getLineno());
2277:       assertFalse(node1.isNE());
2278:       assertFalse(node1.isIf());
2279:       assertNotSame(node1, node2);
2280:       
2281:       boolean boolean7 = node0.isDefaultCase();
2282:       assertFalse(node0.equals((Object)node1));
2283:       assertFalse(node0.equals((Object)node2));
2284:       assertFalse(node0.equals((Object)node3));
2285:       assertTrue(boolean7 == boolean6);
2286:       assertTrue(boolean7 == boolean5);
2287:       assertFalse(boolean7 == boolean3);
2288:       assertTrue(boolean7 == boolean2);
2289:       assertTrue(boolean7 == boolean4);
2290:       assertTrue(boolean7 == boolean0);
2291:       assertFalse(boolean7 == boolean1);
2292:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2293:       assertEquals(32, Node.INCRDECR_PROP);
2294:       assertEquals(37, Node.OPT_ARG_NAME);
2295:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2296:       assertEquals(57, Node.LAST_PROP);
2297:       assertEquals(47, Node.IS_DISPATCHER);
2298:       assertEquals(2, Node.POST_FLAG);
2299:       assertEquals(30, Node.VAR_ARGS_NAME);
2300:       assertEquals(1, Node.DECR_FLAG);
2301:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2302:       assertEquals(12, Node.COLUMN_BITS);
2303:       assertEquals(40, Node.ORIGINALNAME_PROP);
2304:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2305:       assertEquals(50, Node.FREE_CALL);
2306:       assertEquals(43, Node.IS_CONSTANT_NAME);
2307:       assertEquals(46, Node.IS_NAMESPACE);
2308:       assertEquals(54, Node.SLASH_V);
2309:       assertEquals(48, Node.DIRECTIVES);
2310:       assertEquals(8, Node.FLAG_NO_THROWS);
2311:       assertEquals(39, Node.EMPTY_BLOCK);
2312:       assertEquals(4095, Node.COLUMN_MASK);
2313:       assertEquals(55, Node.INFERRED_FUNCTION);
2314:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2315:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2316:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2317:       assertEquals(52, Node.LENGTH);
2318:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2319:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2320:       assertEquals(53, Node.INPUT_ID);
2321:       assertEquals(29, Node.JSDOC_INFO_PROP);
2322:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2323:       assertEquals(36, Node.QUOTED_PROP);
2324:       assertEquals(49, Node.DIRECT_EVAL);
2325:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2326:       assertEquals(56, Node.CHANGE_TIME);
2327:       assertEquals(57, Node.REFLECTED_OBJECT);
2328:       assertFalse(boolean7);
2329:       assertFalse(node0.isIn());
2330:       assertTrue(node0.isNumber());
2331:       assertFalse(node0.isCase());
2332:       assertFalse(node0.isNE());
2333:       assertFalse(node0.isSwitch());
2334:       assertFalse(node0.isInc());
2335:       assertFalse(node0.isIf());
2336:       assertFalse(node0.isString());
2337:       assertFalse(node0.isGetterDef());
2338:       assertEquals((-1), node0.getCharno());
2339:       assertFalse(node0.isTry());
2340:       assertFalse(node0.isDelProp());
2341:       assertFalse(node0.isBreak());
2342:       assertFalse(node0.isThis());
2343:       assertFalse(node0.isComma());
2344:       assertFalse(node0.isRegExp());
2345:       assertFalse(node0.isFor());
2346:       assertFalse(node0.isHook());
2347:       assertFalse(node0.isScript());
2348:       assertFalse(node0.isVoid());
2349:       assertFalse(node0.isTrue());
2350:       assertFalse(node0.isNull());
2351:       assertFalse(node0.isParamList());
2352:       assertFalse(node0.isVar());
2353:       assertFalse(node0.isStringKey());
2354:       assertFalse(node0.isLabelName());
2355:       assertFalse(node0.isAdd());
2356:       assertFalse(node0.isEmpty());
2357:       assertFalse(node0.isNew());
2358:       assertFalse(node0.isArrayLit());
2359:       assertFalse(node0.isDefaultCase());
2360:       assertEquals(0, node0.getChildCount());
2361:       assertFalse(node0.isLabel());
2362:       assertFalse(node0.hasMoreThanOneChild());
2363:       assertFalse(node0.isContinue());
2364:       assertFalse(node0.isDo());
2365:       assertFalse(node0.isAssignAdd());
2366:       assertEquals((-1), node0.getLineno());
2367:       assertFalse(node0.isOr());
2368:       assertEquals((-1), node0.getSourcePosition());
2369:       assertFalse(node0.isCall());
2370:       assertFalse(node0.isName());
2371:       assertFalse(node0.hasOneChild());
2372:       assertFalse(node0.isGetElem());
2373:       assertFalse(node0.isTypeOf());
2374:       assertFalse(node0.isExprResult());
2375:       assertFalse(node0.isWhile());
2376:       assertFalse(node0.isWith());
2377:       assertEquals(39, node0.getType());
2378:       assertFalse(node0.isAssign());
2379:       assertFalse(node0.isReturn());
2380:       assertFalse(node0.isBlock());
2381:       assertFalse(node0.isDec());
2382:       assertFalse(node0.hasChildren());
2383:       assertFalse(node0.isCatch());
2384:       assertFalse(node0.isObjectLit());
2385:       assertFalse(node0.isInstanceOf());
2386:       assertFalse(node0.isAnd());
2387:       assertFalse(node0.isGetProp());
2388:       assertFalse(node0.isSetterDef());
2389:       assertFalse(node0.isNot());
2390:       assertFalse(node0.isDebugger());
2391:       assertFalse(node0.isCast());
2392:       assertFalse(node0.isThrow());
2393:       assertFalse(node0.isFalse());
2394:       assertFalse(node0.isFunction());
2395:   }
2396: }
RegularFileObject[/tmp/EvoSuite_48_1629223385817/com/google/javascript/rhino/Node_48_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:03:06 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_48_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_48_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_48_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.TemplatizedType",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.common.base.Objects",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.javascript.rhino.JSTypeExpression",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
345:       "com.google.javascript.rhino.jstype.TernaryValue",
346:       "com.google.common.collect.AbstractMultimap$Values",
347:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
348:       "com.google.common.collect.AbstractMapBasedMultimap$1",
349:       "com.google.common.collect.Multimaps$Entries",
350:       "com.google.common.collect.AbstractMultimap$Entries",
351:       "com.google.common.collect.AbstractMapBasedMultimap$2",
352:       "com.google.javascript.rhino.jstype.JSType$2",
353:       "com.google.javascript.rhino.jstype.JSType$TypePair",
354:       "com.google.javascript.rhino.InputId",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.Platform",
358:       "com.google.common.collect.Iterables",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.common.collect.Iterators$12",
361:       "com.google.common.collect.ImmutableList$ReverseImmutableList"
362:     );
363:   }
364: }

[MASTER] 18:03:06.521 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) (-220), (-220), (-220));
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotNull(node0);
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());

Node node1 = new Node((-1));
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node1);
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFor());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());

double double0 = node0.getDouble();
assertFalse(node0.equals((Object)node1));
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals((-220.0), double0, 0.01);
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());

String string0 = node1.toStringTree();
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(string0);
assertEquals("ERROR\n", string0);
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFor());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());

boolean boolean0 = node1.isQualifiedName();
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(boolean0);
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFor());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());

Node node2 = new Node(364, 36, 12);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node2);
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertEquals(147468, node2.getSourcePosition());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isName());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertEquals(36, node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertEquals(364, node2.getType());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertEquals(12, node2.getCharno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isScript());

boolean boolean1 = node2.mayMutateGlobalStateOrThrow();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(boolean1 == boolean0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertTrue(boolean1);
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertEquals(147468, node2.getSourcePosition());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isName());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertEquals(36, node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertEquals(364, node2.getType());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertEquals(12, node2.getCharno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertNotSame(node2, node1);

boolean boolean2 = node2.isNE();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(boolean2);
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertEquals(147468, node2.getSourcePosition());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isName());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertEquals(36, node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertEquals(364, node2.getType());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertEquals(12, node2.getCharno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertNotSame(node2, node1);

boolean boolean3 = node0.mayMutateGlobalStateOrThrow();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3 == boolean0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertTrue(boolean3);
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());

String string1 = node0.getQualifiedName();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNull(string1);
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());

node2.setType(935);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertEquals(147468, node2.getSourcePosition());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isName());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertEquals(36, node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertEquals(12, node2.getCharno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertEquals(935, node2.getType());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertNotSame(node2, node1);

node2.setSourceEncodedPositionForTree(55);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isName());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isNull());
assertEquals(0, node2.getLineno());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertEquals(55, node2.getCharno());
assertFalse(node2.isGetProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertEquals(935, node2.getType());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.hasOneChild());
assertEquals(55, node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertNotSame(node2, node1);

boolean boolean4 = node1.isSetterDef();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertFalse(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(boolean4);
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFor());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertNotSame(node1, node2);

Node node3 = Node.newString("^}Wt8", 2268, (-3532));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node3);
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNew());
assertTrue(node3.isString());
assertFalse(node3.isVar());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isBlock());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isName());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNull());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isTry());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.isLabelName());
assertFalse(node3.isFor());
assertFalse(node3.isStringKey());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertFalse(node3.isHook());
assertFalse(node3.isEmpty());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isIn());
assertFalse(node3.isVoid());
assertFalse(node3.isNE());
assertFalse(node3.isTrue());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isExprResult());
assertFalse(node3.isFunction());
assertFalse(node3.isComma());
assertEquals(40, node3.getType());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isGetProp());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDebugger());

Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isName());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isNull());
assertEquals(0, node2.getLineno());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertEquals(55, node2.getCharno());
assertFalse(node2.isGetProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertEquals(935, node2.getType());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.hasOneChild());
assertEquals(55, node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertNotSame(node2, node1);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertNotNull(templateType0);
assertEquals("Object#Key", templateType0.getReferenceName());
assertTrue(templateType0.hasAnyTemplateTypesInternal());
assertFalse(templateType0.hasCachedValues());
assertFalse(templateType0.isVoidType());
assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
assertFalse(templateType0.isFunctionPrototypeType());
assertFalse(templateType0.isNumberValueType());
assertFalse(templateType0.isNullType());
assertFalse(templateType0.isBooleanValueType());
assertTrue(templateType0.isTemplateType());
assertFalse(templateType0.isStringValueType());
assertTrue(templateType0.isObject());
assertFalse(templateType0.isResolved());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

TemplateType templateType1 = templateType0.toMaybeTemplateType();
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertNotNull(templateType1);
assertEquals("Object#Key", templateType0.getReferenceName());
assertTrue(templateType0.hasAnyTemplateTypesInternal());
assertFalse(templateType0.hasCachedValues());
assertFalse(templateType0.isVoidType());
assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
assertFalse(templateType0.isFunctionPrototypeType());
assertFalse(templateType0.isNumberValueType());
assertFalse(templateType0.isNullType());
assertFalse(templateType0.isBooleanValueType());
assertTrue(templateType0.isTemplateType());
assertFalse(templateType0.isStringValueType());
assertTrue(templateType0.isObject());
assertFalse(templateType0.isResolved());
assertEquals("Object#Key", templateType1.getReferenceName());
assertFalse(templateType1.isVoidType());
assertTrue(templateType1.hasAnyTemplateTypesInternal());
assertFalse(templateType1.isResolved());
assertFalse(templateType1.isStringValueType());
assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
assertFalse(templateType1.isNullType());
assertTrue(templateType1.isTemplateType());
assertFalse(templateType1.isBooleanValueType());
assertTrue(templateType1.isObject());
assertFalse(templateType1.isFunctionPrototypeType());
assertFalse(templateType1.isNumberValueType());
assertFalse(templateType1.hasCachedValues());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertSame(templateType0, templateType1);
assertSame(templateType1, templateType0);

boolean boolean5 = node_NodeMismatch0.equals(templateType1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean5 == boolean2);
assertFalse(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertFalse(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(boolean5);
assertEquals("Object#Key", templateType0.getReferenceName());
assertTrue(templateType0.hasAnyTemplateTypesInternal());
assertFalse(templateType0.hasCachedValues());
assertFalse(templateType0.isVoidType());
assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
assertFalse(templateType0.isFunctionPrototypeType());
assertFalse(templateType0.isNumberValueType());
assertFalse(templateType0.isNullType());
assertFalse(templateType0.isBooleanValueType());
assertTrue(templateType0.isTemplateType());
assertFalse(templateType0.isStringValueType());
assertTrue(templateType0.isObject());
assertFalse(templateType0.isResolved());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals("Object#Key", templateType1.getReferenceName());
assertFalse(templateType1.isVoidType());
assertTrue(templateType1.hasAnyTemplateTypesInternal());
assertFalse(templateType1.isResolved());
assertFalse(templateType1.isStringValueType());
assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
assertFalse(templateType1.isNullType());
assertTrue(templateType1.isTemplateType());
assertFalse(templateType1.isBooleanValueType());
assertTrue(templateType1.isObject());
assertFalse(templateType1.isFunctionPrototypeType());
assertFalse(templateType1.isNumberValueType());
assertFalse(templateType1.hasCachedValues());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isName());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isNull());
assertEquals(0, node2.getLineno());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertEquals(55, node2.getCharno());
assertFalse(node2.isGetProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertEquals(935, node2.getType());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.hasOneChild());
assertEquals(55, node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertSame(templateType0, templateType1);
assertSame(templateType1, templateType0);
assertNotSame(node2, node1);

boolean boolean6 = node3.isFromExterns();
assertTrue(boolean6 == boolean2);
assertFalse(boolean6 == boolean1);
assertFalse(boolean6 == boolean3);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean0);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertFalse(boolean6);
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNew());
assertTrue(node3.isString());
assertFalse(node3.isVar());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isBlock());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isName());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNull());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isTry());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.isLabelName());
assertFalse(node3.isFor());
assertFalse(node3.isStringKey());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertFalse(node3.isHook());
assertFalse(node3.isEmpty());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isIn());
assertFalse(node3.isVoid());
assertFalse(node3.isNE());
assertFalse(node3.isTrue());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isExprResult());
assertFalse(node3.isFunction());
assertFalse(node3.isComma());
assertEquals(40, node3.getType());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isGetProp());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDebugger());

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFor());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertNotSame(node1, node2);

boolean boolean7 = node0.isDefaultCase();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean5);
assertFalse(boolean7 == boolean3);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean0);
assertFalse(boolean7 == boolean1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(boolean7);
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/28
* Done!

* Computation finished
