* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 3775
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1336465415
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:59:10.645 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:59:12.600 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:59:13.031 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 2434: com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;:764 - ReplaceComparisonOperator == -> >=
[MASTER] 10:59:14.523 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.setQuotedString()V
[MASTER] 10:59:41.981 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 374
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - true: 283
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 7169
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 2780
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 2780
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 11412
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 2780
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 4334
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 2780
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 2780
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 495
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 6290
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 2613
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 147
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 799
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 3770
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 232
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 4382
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 18808
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 2780
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 2780
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 374
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 6501
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 4325
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 20932
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 206
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 6979
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 690
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 11147
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 690
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 5820
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 19371
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 338
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 2613
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 5448
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 2942
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 315
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 6131
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 6252
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 588: 283
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 12884
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 592: 283
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 3680
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false: 7
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 5374
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 260
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 315
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 1845
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 43
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 5820
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 2780
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 76
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 349
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 576
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 19031
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 1770
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 2048
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 12530
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 218
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 1524
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 203
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 2520
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 396
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 3897
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 42
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 3739
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 13239
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 203
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 384
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 7
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 10262
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 690
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 4786
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 203
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 912
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 203
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 5093
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 4107
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 374
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 203
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 170
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 1515
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 25
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 19724
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 4786
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 3946
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 299
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 299
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 4301
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 203
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 1298
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 585
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 576
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 203
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 203
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 12914
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 6514
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 5793
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 54618
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 9312
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 1559
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 12770
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 23059
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 180
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 10883
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 203
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 80863
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 266
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 1869
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 1038
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 3719
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 751
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 154
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 3861
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 263
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 10290
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 3111
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 1845
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 1038
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 116
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 623
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 4429
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 2856
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 80863
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 283
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 19838
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 4334
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 10916
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 1845
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 3849
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 7
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 3876
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 50
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 233
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 277
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 5787
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 63388
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 1350
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 315
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 54618
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 2445
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 912
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 734
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 11590
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 404
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 2450
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 473
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 120
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 444
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 224
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 203
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 374
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 42
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 42
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 283
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 29073
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 11241
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 3614
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 12914
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - true: 245
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 397
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 357
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 576
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 2540
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 12621
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 2284
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 386
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 1061
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 26526
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 5378
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 54618
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 5793
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 5793
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 54618
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 1559
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 12832
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 576
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2026: 690
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 63388
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 283
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 283
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 203
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 80863
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 54618
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 5331
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 21325
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 1721
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 2450
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 368
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 5331
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 841
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 283
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 3495
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 283
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 1559
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 283
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 3846
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 690
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 26
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 912
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 95
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 576
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 10262
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 240
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 3282
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 12798
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 4704
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 283
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 26456
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 4407
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 6526
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 42
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 523
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 338
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 120
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 4334
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 3784
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1032: 42
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 1845
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 42
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 497
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 42
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 3226
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 690
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 27
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 76
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1029: 42
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 5643
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 3953
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 34062
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 101
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 7511
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 672: 10
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 1559
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 396
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 690
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 97
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 203
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 4458
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 11364
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 5189
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 19930
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 27
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 4458
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 4761
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 27
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 3282
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 149
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 3447
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 4887
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 7755
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 4334
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 167
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 1350
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 690
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 3624
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 27
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 5820
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 529
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 5820
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 368
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 368
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 78213
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 5820
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 10976
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 3454
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 5820
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 690
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 1699
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 5820
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 5820
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 2584
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 283
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: root-Branch: 283
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 4210
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 5435
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 368
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 203
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 6116
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 368
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 368
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 1559
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 368
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 6116
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 64897
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 6116
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 20653
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 6116
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 6921
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 3692
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 396
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 690
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 3248
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 374
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 120
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 14367
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 29634
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 8312
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 16371
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 2284
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 203
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 473
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 7755
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 55
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 374
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 2780
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 576
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 29
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 2038
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 2222
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 54618
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 792
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 19274
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 1845
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 2780
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 692
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - true: 25
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 15994
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 55
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 265
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 216
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 3633
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 15
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 5442
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 3282
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 120
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 42
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 183
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 283
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 2613
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 203
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 22225
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 5506
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 1699
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 576
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 51
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 12303
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - false: 690
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 16131
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 29823
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 22350
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 3886
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 4
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 3111
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 213
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 15713
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 2132
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 443
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 1687
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 1419
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 28
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 203
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;)V: I9 Branch 284 IF_ACMPNE L194 - false: 109
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 326
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 13039
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 160
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true: 715
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 1681
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 5448
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 13525
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 2033
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 5448
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 6979
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 5004
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 1307
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 2284
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 1298
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 2540
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 203
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 2540
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 185
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - false: 715
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 2540
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 1136
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 283
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 1307
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 2540
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 1025
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 2540
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 2540
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 1298
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 374
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 259
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 7
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 576
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 71
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 283
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 10320
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 10320
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - false: 17
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1015: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 283
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 42
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 20363
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 49
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1016: 42
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1024: 42
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 42
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 120
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 326
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - false: 25
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 2458
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 64897
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 120
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 3920
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 2312
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 2613
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 374
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 49
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: Line 1010: 42
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 1565
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 4350
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 13891
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 42
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 120
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 203
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 80
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 1419
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 120
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 13941
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 374
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 1038
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 690
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 5899
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 735
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 930
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 5899
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 25963
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 332
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 55
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 14351
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 55
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 2942
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 326
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 3790
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 203
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 2780
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 120
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 29
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 488
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 12923
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 28
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 690
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 23316
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 1873
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 1169
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: Line 214: 283
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 576
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 35
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 2311
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 825
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 2104
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 4704
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 120
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - false: 226
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 15470
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 5282
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 19523
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 283
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 19523
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 3817
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 5448
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 8312
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 3282
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 12412
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 120
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 120
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 120
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: root-Branch: 283
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 374
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 2312
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 531: 203
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 530: 203
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 912
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 19428
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 7516
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 203
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 2132
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 912
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 569
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 148
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 1419
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 1419
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 6888
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 443
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 1419
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 42
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 33
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 333
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 1324
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 1559
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 8143
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 3792
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 622: 226
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 5050
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 338
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 120
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 338
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 338
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 8143
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 338
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 1351
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 338
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 96
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;II)V: I11 Branch 285 IF_ACMPNE L202 - false: 59
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 19523
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 147
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 13941
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 3770
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 19523
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 993: 45
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 690
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 19523
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 19523
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 3155
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 989: 45
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 4786
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 992: 45
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 19523
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 2780
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 985: 45
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 19523
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 690
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 4786
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 987: 45
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 4786
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 20478
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 2780
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 1845
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 4786
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 1708
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 1524
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 9094
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: Line 1132: 283
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 9094
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 20858
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 54618
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 20963
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 1298
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 690
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 83
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 690
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 120
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 690
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 13740
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 1298
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 9165
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 690
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 283
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 283
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 4286
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 690
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 61
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 11384
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 8464
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 1845
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 19406
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 299
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 3130
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 3454
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 1298
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 3454
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 10877
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 203
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 203
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 15051
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 7169
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 11241
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 2613
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 4101
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 2613
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 283
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 26
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 6658
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 4430
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 1038
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 167
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 27
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 23189
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 690
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - true: 25
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 2284
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 3215
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 18150
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 120
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 203
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 120
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 7398
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 6116
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 792
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 24056
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 120
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 9830
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 21634
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 2613
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 126
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 61
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 8993
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 2071
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 368
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 368
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 1337
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 912
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 1037
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 78213
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 912
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 283
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 42
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 10929
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 3292
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 1516
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 203
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 21658
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 6116
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 80863
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 10147
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - false: 6
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 5820
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 60
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 690
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 283
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 42
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 42
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 1845
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 247
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 576
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 4711
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 5027
Number of times BBC is called in total: 4966686
* Search finished after 605s and 473 generations, 255811 statements, best individual has fitness: 2928.0
* Minimizing test suite
[MASTER] 11:10:34.705 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 802
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 613
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 108
* Number of covered goals: 108
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 86%
* Total number of goals: 530
* Number of covered goals: 458
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 4536
* Number of covered goals: 2152
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 714
* Number of covered goals: 572
* Generated 744 tests with total length 11863
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:11:41.658 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6754833333333333% of time used, but only 26/744 tests minimized), falling back to using all assertions
[MASTER] 11:12:01.225 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 11:12:08.616 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 7 seconds more than allowed.
[MASTER] 11:12:11.906 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_38_1628161931500/com/google/javascript/rhino/Node_38_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_38_1628161931500/com/google/javascript/rhino/Node_38_tmp__ESTest_scaffolding.java]]
[MASTER] 11:12:11.906 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:11.906 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:11.909 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1512
[MASTER] 11:12:11.912 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_38_1628161931500/com/google/javascript/rhino/Node_38_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:12:11 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.BooleanLiteralSet;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import com.google.javascript.rhino.jstype.TemplateType;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_38_tmp__ESTest extends Node_38_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = Node.newString("MHu;l");
26:       assertFalse(node0.isObjectLit());
27:       assertFalse(node0.isNot());
28:       assertFalse(node0.isWith());
29:       assertFalse(node0.isAnd());
30:       assertFalse(node0.isInstanceOf());
31:       assertFalse(node0.isCast());
32:       assertFalse(node0.isExprResult());
33:       assertFalse(node0.isBreak());
34:       assertFalse(node0.isFalse());
35:       assertFalse(node0.isThrow());
36:       assertFalse(node0.isOr());
37:       assertFalse(node0.isAssignAdd());
38:       assertFalse(node0.isInc());
39:       assertFalse(node0.isCase());
40:       assertFalse(node0.isDo());
41:       assertFalse(node0.hasMoreThanOneChild());
42:       assertEquals((-1), node0.getCharno());
43:       assertFalse(node0.isLabel());
44:       assertFalse(node0.isSwitch());
45:       assertEquals((-1), node0.getLineno());
46:       assertFalse(node0.isStringKey());
47:       assertFalse(node0.isLabelName());
48:       assertFalse(node0.isFor());
49:       assertFalse(node0.isHook());
50:       assertFalse(node0.isNumber());
51:       assertFalse(node0.isGetterDef());
52:       assertFalse(node0.isThis());
53:       assertFalse(node0.isBlock());
54:       assertTrue(node0.isString());
55:       assertFalse(node0.isTry());
56:       assertFalse(node0.hasOneChild());
57:       assertFalse(node0.isScript());
58:       assertEquals(40, node0.getType());
59:       assertFalse(node0.isCatch());
60:       assertFalse(node0.isDefaultCase());
61:       assertFalse(node0.isRegExp());
62:       assertEquals(0, node0.getChildCount());
63:       assertFalse(node0.isTrue());
64:       assertFalse(node0.isDebugger());
65:       assertFalse(node0.isVoid());
66:       assertFalse(node0.isFunction());
67:       assertFalse(node0.isParamList());
68:       assertFalse(node0.isArrayLit());
69:       assertFalse(node0.isName());
70:       assertFalse(node0.isEmpty());
71:       assertFalse(node0.isIf());
72:       assertFalse(node0.isNull());
73:       assertFalse(node0.isVar());
74:       assertFalse(node0.isNE());
75:       assertFalse(node0.isNew());
76:       assertFalse(node0.isAdd());
77:       assertFalse(node0.isIn());
78:       assertFalse(node0.isSetterDef());
79:       assertFalse(node0.isWhile());
80:       assertFalse(node0.isContinue());
81:       assertFalse(node0.isReturn());
82:       assertFalse(node0.isDelProp());
83:       assertFalse(node0.isCall());
84:       assertFalse(node0.isGetElem());
85:       assertFalse(node0.isAssign());
86:       assertEquals((-1), node0.getSourcePosition());
87:       assertFalse(node0.isDec());
88:       assertFalse(node0.isTypeOf());
89:       assertFalse(node0.isComma());
90:       assertFalse(node0.hasChildren());
91:       assertFalse(node0.isGetProp());
92:       assertEquals(15, Node.NO_SIDE_EFFECTS);
93:       assertEquals(57, Node.LAST_PROP);
94:       assertEquals(30, Node.VAR_ARGS_NAME);
95:       assertEquals(1, Node.DECR_FLAG);
96:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
97:       assertEquals(49, Node.DIRECT_EVAL);
98:       assertEquals(54, Node.SLASH_V);
99:       assertEquals(12, Node.COLUMN_BITS);
100:       assertEquals(40, Node.ORIGINALNAME_PROP);
101:       assertEquals(56, Node.CHANGE_TIME);
102:       assertEquals(47, Node.IS_DISPATCHER);
103:       assertEquals(2, Node.POST_FLAG);
104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
105:       assertEquals(39, Node.EMPTY_BLOCK);
106:       assertEquals(37, Node.OPT_ARG_NAME);
107:       assertEquals(48, Node.DIRECTIVES);
108:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
109:       assertEquals(57, Node.REFLECTED_OBJECT);
110:       assertEquals(29, Node.JSDOC_INFO_PROP);
111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
112:       assertEquals(53, Node.INPUT_ID);
113:       assertEquals(55, Node.INFERRED_FUNCTION);
114:       assertEquals(52, Node.LENGTH);
115:       assertEquals(8, Node.FLAG_NO_THROWS);
116:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
117:       assertEquals(43, Node.IS_CONSTANT_NAME);
118:       assertEquals(36, Node.QUOTED_PROP);
119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
120:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
121:       assertEquals(4095, Node.COLUMN_MASK);
122:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
123:       assertEquals(51, Node.STATIC_SOURCE_FILE);
124:       assertEquals(32, Node.INCRDECR_PROP);
125:       assertEquals(46, Node.IS_NAMESPACE);
126:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
127:       assertEquals(50, Node.FREE_CALL);
128:       assertNotNull(node0);
129:       
130:       node0.setSourceFileForTesting("MHu;l");
131:       assertFalse(node0.isObjectLit());
132:       assertFalse(node0.isNot());
133:       assertFalse(node0.isWith());
134:       assertFalse(node0.isAnd());
135:       assertFalse(node0.isInstanceOf());
136:       assertFalse(node0.isCast());
137:       assertFalse(node0.isExprResult());
138:       assertFalse(node0.isBreak());
139:       assertFalse(node0.isFalse());
140:       assertFalse(node0.isThrow());
141:       assertFalse(node0.isOr());
142:       assertFalse(node0.isAssignAdd());
143:       assertFalse(node0.isInc());
144:       assertFalse(node0.isCase());
145:       assertFalse(node0.isDo());
146:       assertFalse(node0.hasMoreThanOneChild());
147:       assertEquals((-1), node0.getCharno());
148:       assertFalse(node0.isLabel());
149:       assertFalse(node0.isSwitch());
150:       assertEquals((-1), node0.getLineno());
151:       assertFalse(node0.isStringKey());
152:       assertFalse(node0.isLabelName());
153:       assertFalse(node0.isFor());
154:       assertFalse(node0.isHook());
155:       assertFalse(node0.isNumber());
156:       assertFalse(node0.isGetterDef());
157:       assertFalse(node0.isThis());
158:       assertFalse(node0.isBlock());
159:       assertTrue(node0.isString());
160:       assertFalse(node0.isTry());
161:       assertFalse(node0.hasOneChild());
162:       assertFalse(node0.isScript());
163:       assertEquals(40, node0.getType());
164:       assertFalse(node0.isCatch());
165:       assertFalse(node0.isDefaultCase());
166:       assertFalse(node0.isRegExp());
167:       assertEquals(0, node0.getChildCount());
168:       assertFalse(node0.isTrue());
169:       assertFalse(node0.isDebugger());
170:       assertFalse(node0.isVoid());
171:       assertFalse(node0.isFunction());
172:       assertFalse(node0.isParamList());
173:       assertFalse(node0.isArrayLit());
174:       assertFalse(node0.isName());
175:       assertFalse(node0.isEmpty());
176:       assertFalse(node0.isIf());
177:       assertFalse(node0.isNull());
178:       assertFalse(node0.isVar());
179:       assertFalse(node0.isNE());
180:       assertFalse(node0.isNew());
181:       assertFalse(node0.isAdd());
182:       assertFalse(node0.isIn());
183:       assertFalse(node0.isSetterDef());
184:       assertFalse(node0.isWhile());
185:       assertFalse(node0.isContinue());
186:       assertFalse(node0.isReturn());
187:       assertFalse(node0.isDelProp());
188:       assertFalse(node0.isCall());
189:       assertFalse(node0.isGetElem());
190:       assertFalse(node0.isAssign());
191:       assertEquals((-1), node0.getSourcePosition());
192:       assertFalse(node0.isDec());
193:       assertFalse(node0.isTypeOf());
194:       assertFalse(node0.isComma());
195:       assertFalse(node0.hasChildren());
196:       assertFalse(node0.isGetProp());
197:       assertEquals(15, Node.NO_SIDE_EFFECTS);
198:       assertEquals(57, Node.LAST_PROP);
199:       assertEquals(30, Node.VAR_ARGS_NAME);
200:       assertEquals(1, Node.DECR_FLAG);
201:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
202:       assertEquals(49, Node.DIRECT_EVAL);
203:       assertEquals(54, Node.SLASH_V);
204:       assertEquals(12, Node.COLUMN_BITS);
205:       assertEquals(40, Node.ORIGINALNAME_PROP);
206:       assertEquals(56, Node.CHANGE_TIME);
207:       assertEquals(47, Node.IS_DISPATCHER);
208:       assertEquals(2, Node.POST_FLAG);
209:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
210:       assertEquals(39, Node.EMPTY_BLOCK);
211:       assertEquals(37, Node.OPT_ARG_NAME);
212:       assertEquals(48, Node.DIRECTIVES);
213:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
214:       assertEquals(57, Node.REFLECTED_OBJECT);
215:       assertEquals(29, Node.JSDOC_INFO_PROP);
216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
217:       assertEquals(53, Node.INPUT_ID);
218:       assertEquals(55, Node.INFERRED_FUNCTION);
219:       assertEquals(52, Node.LENGTH);
220:       assertEquals(8, Node.FLAG_NO_THROWS);
221:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
222:       assertEquals(43, Node.IS_CONSTANT_NAME);
223:       assertEquals(36, Node.QUOTED_PROP);
224:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
225:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
226:       assertEquals(4095, Node.COLUMN_MASK);
227:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
228:       assertEquals(51, Node.STATIC_SOURCE_FILE);
229:       assertEquals(32, Node.INCRDECR_PROP);
230:       assertEquals(46, Node.IS_NAMESPACE);
231:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
232:       assertEquals(50, Node.FREE_CALL);
233:       
234:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
235:       assertNotNull(simpleErrorReporter0);
236:       
237:       Node node1 = node0.removeFirstChild();
238:       assertFalse(node0.isObjectLit());
239:       assertFalse(node0.isNot());
240:       assertFalse(node0.isWith());
241:       assertFalse(node0.isAnd());
242:       assertFalse(node0.isInstanceOf());
243:       assertFalse(node0.isCast());
244:       assertFalse(node0.isExprResult());
245:       assertFalse(node0.isBreak());
246:       assertFalse(node0.isFalse());
247:       assertFalse(node0.isThrow());
248:       assertFalse(node0.isOr());
249:       assertFalse(node0.isAssignAdd());
250:       assertFalse(node0.isInc());
251:       assertFalse(node0.isCase());
252:       assertFalse(node0.isDo());
253:       assertFalse(node0.hasMoreThanOneChild());
254:       assertEquals((-1), node0.getCharno());
255:       assertFalse(node0.isLabel());
256:       assertFalse(node0.isSwitch());
257:       assertEquals((-1), node0.getLineno());
258:       assertFalse(node0.isStringKey());
259:       assertFalse(node0.isLabelName());
260:       assertFalse(node0.isFor());
261:       assertFalse(node0.isHook());
262:       assertFalse(node0.isNumber());
263:       assertFalse(node0.isGetterDef());
264:       assertFalse(node0.isThis());
265:       assertFalse(node0.isBlock());
266:       assertTrue(node0.isString());
267:       assertFalse(node0.isTry());
268:       assertFalse(node0.hasOneChild());
269:       assertFalse(node0.isScript());
270:       assertEquals(40, node0.getType());
271:       assertFalse(node0.isCatch());
272:       assertFalse(node0.isDefaultCase());
273:       assertFalse(node0.isRegExp());
274:       assertEquals(0, node0.getChildCount());
275:       assertFalse(node0.isTrue());
276:       assertFalse(node0.isDebugger());
277:       assertFalse(node0.isVoid());
278:       assertFalse(node0.isFunction());
279:       assertFalse(node0.isParamList());
280:       assertFalse(node0.isArrayLit());
281:       assertFalse(node0.isName());
282:       assertFalse(node0.isEmpty());
283:       assertFalse(node0.isIf());
284:       assertFalse(node0.isNull());
285:       assertFalse(node0.isVar());
286:       assertFalse(node0.isNE());
287:       assertFalse(node0.isNew());
288:       assertFalse(node0.isAdd());
289:       assertFalse(node0.isIn());
290:       assertFalse(node0.isSetterDef());
291:       assertFalse(node0.isWhile());
292:       assertFalse(node0.isContinue());
293:       assertFalse(node0.isReturn());
294:       assertFalse(node0.isDelProp());
295:       assertFalse(node0.isCall());
296:       assertFalse(node0.isGetElem());
297:       assertFalse(node0.isAssign());
298:       assertEquals((-1), node0.getSourcePosition());
299:       assertFalse(node0.isDec());
300:       assertFalse(node0.isTypeOf());
301:       assertFalse(node0.isComma());
302:       assertFalse(node0.hasChildren());
303:       assertFalse(node0.isGetProp());
304:       assertEquals(15, Node.NO_SIDE_EFFECTS);
305:       assertEquals(57, Node.LAST_PROP);
306:       assertEquals(30, Node.VAR_ARGS_NAME);
307:       assertEquals(1, Node.DECR_FLAG);
308:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
309:       assertEquals(49, Node.DIRECT_EVAL);
310:       assertEquals(54, Node.SLASH_V);
311:       assertEquals(12, Node.COLUMN_BITS);
312:       assertEquals(40, Node.ORIGINALNAME_PROP);
313:       assertEquals(56, Node.CHANGE_TIME);
314:       assertEquals(47, Node.IS_DISPATCHER);
315:       assertEquals(2, Node.POST_FLAG);
316:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
317:       assertEquals(39, Node.EMPTY_BLOCK);
318:       assertEquals(37, Node.OPT_ARG_NAME);
319:       assertEquals(48, Node.DIRECTIVES);
320:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
321:       assertEquals(57, Node.REFLECTED_OBJECT);
322:       assertEquals(29, Node.JSDOC_INFO_PROP);
323:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
324:       assertEquals(53, Node.INPUT_ID);
325:       assertEquals(55, Node.INFERRED_FUNCTION);
326:       assertEquals(52, Node.LENGTH);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
329:       assertEquals(43, Node.IS_CONSTANT_NAME);
330:       assertEquals(36, Node.QUOTED_PROP);
331:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
332:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
333:       assertEquals(4095, Node.COLUMN_MASK);
334:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
335:       assertEquals(51, Node.STATIC_SOURCE_FILE);
336:       assertEquals(32, Node.INCRDECR_PROP);
337:       assertEquals(46, Node.IS_NAMESPACE);
338:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
339:       assertEquals(50, Node.FREE_CALL);
340:       assertNull(node1);
341:       
342:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
343:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
344:       assertNotNull(jSTypeRegistry0);
345:       
346:       JSType[] jSTypeArray0 = new JSType[1];
347:       TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
348:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
349:       assertTrue(templateType0.isTemplateType());
350:       assertFalse(templateType0.isBooleanValueType());
351:       assertFalse(templateType0.hasCachedValues());
352:       assertFalse(templateType0.isFunctionPrototypeType());
353:       assertFalse(templateType0.isNumberValueType());
354:       assertFalse(templateType0.isStringValueType());
355:       assertEquals("Object#Element", templateType0.getReferenceName());
356:       assertTrue(templateType0.isObject());
357:       assertTrue(templateType0.hasAnyTemplateTypesInternal());
358:       assertFalse(templateType0.isVoidType());
359:       assertFalse(templateType0.isResolved());
360:       assertFalse(templateType0.isNullType());
361:       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
362:       assertEquals(1, JSType.ENUMDECL);
363:       assertEquals(0, JSType.NOT_ENUMDECL);
364:       assertNotNull(templateType0);
365:       
366:       jSTypeArray0[0] = (JSType) templateType0;
367:       Node node2 = new Node(36, 31, 29);
368:       assertFalse(node2.equals((Object)node0));
369:       assertFalse(node2.isHook());
370:       assertFalse(node2.isSwitch());
371:       assertFalse(node2.isInc());
372:       assertFalse(node2.isBreak());
373:       assertFalse(node2.isThrow());
374:       assertFalse(node2.isThis());
375:       assertFalse(node2.isComma());
376:       assertFalse(node2.isFalse());
377:       assertEquals(127005, node2.getSourcePosition());
378:       assertFalse(node2.isIn());
379:       assertFalse(node2.isInstanceOf());
380:       assertFalse(node2.isDelProp());
381:       assertFalse(node2.isIf());
382:       assertFalse(node2.isEmpty());
383:       assertFalse(node2.isNE());
384:       assertEquals(29, node2.getCharno());
385:       assertFalse(node2.isArrayLit());
386:       assertFalse(node2.hasOneChild());
387:       assertFalse(node2.isLabelName());
388:       assertFalse(node2.isTry());
389:       assertFalse(node2.isWith());
390:       assertFalse(node2.isDefaultCase());
391:       assertFalse(node2.isFor());
392:       assertFalse(node2.isCatch());
393:       assertFalse(node2.isRegExp());
394:       assertEquals(0, node2.getChildCount());
395:       assertEquals(31, node2.getLineno());
396:       assertFalse(node2.isParamList());
397:       assertFalse(node2.isCase());
398:       assertFalse(node2.isStringKey());
399:       assertFalse(node2.isScript());
400:       assertFalse(node2.isNumber());
401:       assertFalse(node2.isGetterDef());
402:       assertFalse(node2.isBlock());
403:       assertFalse(node2.isVar());
404:       assertFalse(node2.isAdd());
405:       assertFalse(node2.isCall());
406:       assertFalse(node2.isName());
407:       assertFalse(node2.isNew());
408:       assertFalse(node2.isWhile());
409:       assertFalse(node2.hasMoreThanOneChild());
410:       assertFalse(node2.isContinue());
411:       assertFalse(node2.isAssignAdd());
412:       assertFalse(node2.isLabel());
413:       assertFalse(node2.isSetterDef());
414:       assertFalse(node2.isDo());
415:       assertFalse(node2.isNull());
416:       assertFalse(node2.isTrue());
417:       assertFalse(node2.isOr());
418:       assertFalse(node2.isCast());
419:       assertFalse(node2.isExprResult());
420:       assertFalse(node2.isVoid());
421:       assertFalse(node2.hasChildren());
422:       assertFalse(node2.isGetElem());
423:       assertFalse(node2.isFunction());
424:       assertEquals(36, node2.getType());
425:       assertFalse(node2.isDec());
426:       assertFalse(node2.isTypeOf());
427:       assertFalse(node2.isAssign());
428:       assertFalse(node2.isReturn());
429:       assertFalse(node2.isAnd());
430:       assertFalse(node2.isGetProp());
431:       assertFalse(node2.isString());
432:       assertFalse(node2.isDebugger());
433:       assertFalse(node2.isObjectLit());
434:       assertFalse(node2.isNot());
435:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
436:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
437:       assertEquals(29, Node.JSDOC_INFO_PROP);
438:       assertEquals(53, Node.INPUT_ID);
439:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
440:       assertEquals(2, Node.POST_FLAG);
441:       assertEquals(47, Node.IS_DISPATCHER);
442:       assertEquals(12, Node.COLUMN_BITS);
443:       assertEquals(55, Node.INFERRED_FUNCTION);
444:       assertEquals(4095, Node.COLUMN_MASK);
445:       assertEquals(49, Node.DIRECT_EVAL);
446:       assertEquals(15, Node.NO_SIDE_EFFECTS);
447:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
448:       assertEquals(8, Node.FLAG_NO_THROWS);
449:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
450:       assertEquals(37, Node.OPT_ARG_NAME);
451:       assertEquals(36, Node.QUOTED_PROP);
452:       assertEquals(48, Node.DIRECTIVES);
453:       assertEquals(56, Node.CHANGE_TIME);
454:       assertEquals(57, Node.REFLECTED_OBJECT);
455:       assertEquals(50, Node.FREE_CALL);
456:       assertEquals(52, Node.LENGTH);
457:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
458:       assertEquals(40, Node.ORIGINALNAME_PROP);
459:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
460:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
461:       assertEquals(39, Node.EMPTY_BLOCK);
462:       assertEquals(57, Node.LAST_PROP);
463:       assertEquals(30, Node.VAR_ARGS_NAME);
464:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
465:       assertEquals(51, Node.STATIC_SOURCE_FILE);
466:       assertEquals(1, Node.DECR_FLAG);
467:       assertEquals(32, Node.INCRDECR_PROP);
468:       assertEquals(43, Node.IS_CONSTANT_NAME);
469:       assertEquals(46, Node.IS_NAMESPACE);
470:       assertEquals(54, Node.SLASH_V);
471:       assertNotNull(node2);
472:       
473:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
474:       assertFalse(node0.equals((Object)node2));
475:       assertFalse(node2.equals((Object)node0));
476:       assertFalse(node0.isObjectLit());
477:       assertFalse(node0.isNot());
478:       assertFalse(node0.isWith());
479:       assertFalse(node0.isAnd());
480:       assertFalse(node0.isInstanceOf());
481:       assertFalse(node0.isCast());
482:       assertFalse(node0.isExprResult());
483:       assertFalse(node0.isBreak());
484:       assertFalse(node0.isFalse());
485:       assertFalse(node0.isThrow());
486:       assertFalse(node0.isOr());
487:       assertFalse(node0.isAssignAdd());
488:       assertFalse(node0.isInc());
489:       assertFalse(node0.isCase());
490:       assertFalse(node0.isDo());
491:       assertFalse(node0.hasMoreThanOneChild());
492:       assertEquals((-1), node0.getCharno());
493:       assertFalse(node0.isLabel());
494:       assertFalse(node0.isSwitch());
495:       assertEquals((-1), node0.getLineno());
496:       assertFalse(node0.isStringKey());
497:       assertFalse(node0.isLabelName());
498:       assertFalse(node0.isFor());
499:       assertFalse(node0.isHook());
500:       assertFalse(node0.isNumber());
501:       assertFalse(node0.isGetterDef());
502:       assertFalse(node0.isThis());
503:       assertFalse(node0.isBlock());
504:       assertTrue(node0.isString());
505:       assertFalse(node0.isTry());
506:       assertFalse(node0.hasOneChild());
507:       assertFalse(node0.isScript());
508:       assertEquals(40, node0.getType());
509:       assertFalse(node0.isCatch());
510:       assertFalse(node0.isDefaultCase());
511:       assertFalse(node0.isRegExp());
512:       assertEquals(0, node0.getChildCount());
513:       assertFalse(node0.isTrue());
514:       assertFalse(node0.isDebugger());
515:       assertFalse(node0.isVoid());
516:       assertFalse(node0.isFunction());
517:       assertFalse(node0.isParamList());
518:       assertFalse(node0.isArrayLit());
519:       assertFalse(node0.isName());
520:       assertFalse(node0.isEmpty());
521:       assertFalse(node0.isIf());
522:       assertFalse(node0.isNull());
523:       assertFalse(node0.isVar());
524:       assertFalse(node0.isNE());
525:       assertFalse(node0.isNew());
526:       assertFalse(node0.isAdd());
527:       assertFalse(node0.isIn());
528:       assertFalse(node0.isSetterDef());
529:       assertFalse(node0.isWhile());
530:       assertFalse(node0.isContinue());
531:       assertFalse(node0.isReturn());
532:       assertFalse(node0.isDelProp());
533:       assertFalse(node0.isCall());
534:       assertFalse(node0.isGetElem());
535:       assertFalse(node0.isAssign());
536:       assertEquals((-1), node0.getSourcePosition());
537:       assertFalse(node0.isDec());
538:       assertFalse(node0.isTypeOf());
539:       assertFalse(node0.isComma());
540:       assertFalse(node0.hasChildren());
541:       assertFalse(node0.isGetProp());
542:       assertFalse(node2.isHook());
543:       assertFalse(node2.isSwitch());
544:       assertFalse(node2.isInc());
545:       assertFalse(node2.isBreak());
546:       assertFalse(node2.isThrow());
547:       assertFalse(node2.isThis());
548:       assertFalse(node2.isComma());
549:       assertFalse(node2.isFalse());
550:       assertEquals(127005, node2.getSourcePosition());
551:       assertFalse(node2.isIn());
552:       assertFalse(node2.isInstanceOf());
553:       assertFalse(node2.isDelProp());
554:       assertFalse(node2.isIf());
555:       assertFalse(node2.isEmpty());
556:       assertFalse(node2.isNE());
557:       assertEquals(29, node2.getCharno());
558:       assertFalse(node2.isArrayLit());
559:       assertFalse(node2.hasOneChild());
560:       assertFalse(node2.isLabelName());
561:       assertFalse(node2.isTry());
562:       assertFalse(node2.isWith());
563:       assertFalse(node2.isDefaultCase());
564:       assertFalse(node2.isFor());
565:       assertFalse(node2.isCatch());
566:       assertFalse(node2.isRegExp());
567:       assertEquals(0, node2.getChildCount());
568:       assertEquals(31, node2.getLineno());
569:       assertFalse(node2.isParamList());
570:       assertFalse(node2.isCase());
571:       assertFalse(node2.isStringKey());
572:       assertFalse(node2.isScript());
573:       assertFalse(node2.isNumber());
574:       assertFalse(node2.isGetterDef());
575:       assertFalse(node2.isBlock());
576:       assertFalse(node2.isVar());
577:       assertFalse(node2.isAdd());
578:       assertFalse(node2.isCall());
579:       assertFalse(node2.isName());
580:       assertFalse(node2.isNew());
581:       assertFalse(node2.isWhile());
582:       assertFalse(node2.hasMoreThanOneChild());
583:       assertFalse(node2.isContinue());
584:       assertFalse(node2.isAssignAdd());
585:       assertFalse(node2.isLabel());
586:       assertFalse(node2.isSetterDef());
587:       assertFalse(node2.isDo());
588:       assertFalse(node2.isNull());
589:       assertFalse(node2.isTrue());
590:       assertFalse(node2.isOr());
591:       assertFalse(node2.isCast());
592:       assertFalse(node2.isExprResult());
593:       assertFalse(node2.isVoid());
594:       assertFalse(node2.hasChildren());
595:       assertFalse(node2.isGetElem());
596:       assertFalse(node2.isFunction());
597:       assertEquals(36, node2.getType());
598:       assertFalse(node2.isDec());
599:       assertFalse(node2.isTypeOf());
600:       assertFalse(node2.isAssign());
601:       assertFalse(node2.isReturn());
602:       assertFalse(node2.isAnd());
603:       assertFalse(node2.isGetProp());
604:       assertFalse(node2.isString());
605:       assertFalse(node2.isDebugger());
606:       assertFalse(node2.isObjectLit());
607:       assertFalse(node2.isNot());
608:       assertEquals(15, Node.NO_SIDE_EFFECTS);
609:       assertEquals(57, Node.LAST_PROP);
610:       assertEquals(30, Node.VAR_ARGS_NAME);
611:       assertEquals(1, Node.DECR_FLAG);
612:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
613:       assertEquals(49, Node.DIRECT_EVAL);
614:       assertEquals(54, Node.SLASH_V);
615:       assertEquals(12, Node.COLUMN_BITS);
616:       assertEquals(40, Node.ORIGINALNAME_PROP);
617:       assertEquals(56, Node.CHANGE_TIME);
618:       assertEquals(47, Node.IS_DISPATCHER);
619:       assertEquals(2, Node.POST_FLAG);
620:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
621:       assertEquals(39, Node.EMPTY_BLOCK);
622:       assertEquals(37, Node.OPT_ARG_NAME);
623:       assertEquals(48, Node.DIRECTIVES);
624:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
625:       assertEquals(57, Node.REFLECTED_OBJECT);
626:       assertEquals(29, Node.JSDOC_INFO_PROP);
627:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
628:       assertEquals(53, Node.INPUT_ID);
629:       assertEquals(55, Node.INFERRED_FUNCTION);
630:       assertEquals(52, Node.LENGTH);
631:       assertEquals(8, Node.FLAG_NO_THROWS);
632:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
633:       assertEquals(43, Node.IS_CONSTANT_NAME);
634:       assertEquals(36, Node.QUOTED_PROP);
635:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
636:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
637:       assertEquals(4095, Node.COLUMN_MASK);
638:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
639:       assertEquals(51, Node.STATIC_SOURCE_FILE);
640:       assertEquals(32, Node.INCRDECR_PROP);
641:       assertEquals(46, Node.IS_NAMESPACE);
642:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
643:       assertEquals(50, Node.FREE_CALL);
644:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
645:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
646:       assertEquals(29, Node.JSDOC_INFO_PROP);
647:       assertEquals(53, Node.INPUT_ID);
648:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
649:       assertEquals(2, Node.POST_FLAG);
650:       assertEquals(47, Node.IS_DISPATCHER);
651:       assertEquals(12, Node.COLUMN_BITS);
652:       assertEquals(55, Node.INFERRED_FUNCTION);
653:       assertEquals(4095, Node.COLUMN_MASK);
654:       assertEquals(49, Node.DIRECT_EVAL);
655:       assertEquals(15, Node.NO_SIDE_EFFECTS);
656:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
657:       assertEquals(8, Node.FLAG_NO_THROWS);
658:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
659:       assertEquals(37, Node.OPT_ARG_NAME);
660:       assertEquals(36, Node.QUOTED_PROP);
661:       assertEquals(48, Node.DIRECTIVES);
662:       assertEquals(56, Node.CHANGE_TIME);
663:       assertEquals(57, Node.REFLECTED_OBJECT);
664:       assertEquals(50, Node.FREE_CALL);
665:       assertEquals(52, Node.LENGTH);
666:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
667:       assertEquals(40, Node.ORIGINALNAME_PROP);
668:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
669:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
670:       assertEquals(39, Node.EMPTY_BLOCK);
671:       assertEquals(57, Node.LAST_PROP);
672:       assertEquals(30, Node.VAR_ARGS_NAME);
673:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
674:       assertEquals(51, Node.STATIC_SOURCE_FILE);
675:       assertEquals(1, Node.DECR_FLAG);
676:       assertEquals(32, Node.INCRDECR_PROP);
677:       assertEquals(43, Node.IS_CONSTANT_NAME);
678:       assertEquals(46, Node.IS_NAMESPACE);
679:       assertEquals(54, Node.SLASH_V);
680:       assertNotNull(node_NodeMismatch0);
681:       
682:       boolean boolean0 = node2.isNull();
683:       assertFalse(node2.equals((Object)node0));
684:       assertFalse(node2.isHook());
685:       assertFalse(node2.isSwitch());
686:       assertFalse(node2.isInc());
687:       assertFalse(node2.isBreak());
688:       assertFalse(node2.isThrow());
689:       assertFalse(node2.isThis());
690:       assertFalse(node2.isComma());
691:       assertFalse(node2.isFalse());
692:       assertEquals(127005, node2.getSourcePosition());
693:       assertFalse(node2.isIn());
694:       assertFalse(node2.isInstanceOf());
695:       assertFalse(node2.isDelProp());
696:       assertFalse(node2.isIf());
697:       assertFalse(node2.isEmpty());
698:       assertFalse(node2.isNE());
699:       assertEquals(29, node2.getCharno());
700:       assertFalse(node2.isArrayLit());
701:       assertFalse(node2.hasOneChild());
702:       assertFalse(node2.isLabelName());
703:       assertFalse(node2.isTry());
704:       assertFalse(node2.isWith());
705:       assertFalse(node2.isDefaultCase());
706:       assertFalse(node2.isFor());
707:       assertFalse(node2.isCatch());
708:       assertFalse(node2.isRegExp());
709:       assertEquals(0, node2.getChildCount());
710:       assertEquals(31, node2.getLineno());
711:       assertFalse(node2.isParamList());
712:       assertFalse(node2.isCase());
713:       assertFalse(node2.isStringKey());
714:       assertFalse(node2.isScript());
715:       assertFalse(node2.isNumber());
716:       assertFalse(node2.isGetterDef());
717:       assertFalse(node2.isBlock());
718:       assertFalse(node2.isVar());
719:       assertFalse(node2.isAdd());
720:       assertFalse(node2.isCall());
721:       assertFalse(node2.isName());
722:       assertFalse(node2.isNew());
723:       assertFalse(node2.isWhile());
724:       assertFalse(node2.hasMoreThanOneChild());
725:       assertFalse(node2.isContinue());
726:       assertFalse(node2.isAssignAdd());
727:       assertFalse(node2.isLabel());
728:       assertFalse(node2.isSetterDef());
729:       assertFalse(node2.isDo());
730:       assertFalse(node2.isNull());
731:       assertFalse(node2.isTrue());
732:       assertFalse(node2.isOr());
733:       assertFalse(node2.isCast());
734:       assertFalse(node2.isExprResult());
735:       assertFalse(node2.isVoid());
736:       assertFalse(node2.hasChildren());
737:       assertFalse(node2.isGetElem());
738:       assertFalse(node2.isFunction());
739:       assertEquals(36, node2.getType());
740:       assertFalse(node2.isDec());
741:       assertFalse(node2.isTypeOf());
742:       assertFalse(node2.isAssign());
743:       assertFalse(node2.isReturn());
744:       assertFalse(node2.isAnd());
745:       assertFalse(node2.isGetProp());
746:       assertFalse(node2.isString());
747:       assertFalse(node2.isDebugger());
748:       assertFalse(node2.isObjectLit());
749:       assertFalse(node2.isNot());
750:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
751:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
752:       assertEquals(29, Node.JSDOC_INFO_PROP);
753:       assertEquals(53, Node.INPUT_ID);
754:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
755:       assertEquals(2, Node.POST_FLAG);
756:       assertEquals(47, Node.IS_DISPATCHER);
757:       assertEquals(12, Node.COLUMN_BITS);
758:       assertEquals(55, Node.INFERRED_FUNCTION);
759:       assertEquals(4095, Node.COLUMN_MASK);
760:       assertEquals(49, Node.DIRECT_EVAL);
761:       assertEquals(15, Node.NO_SIDE_EFFECTS);
762:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
763:       assertEquals(8, Node.FLAG_NO_THROWS);
764:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
765:       assertEquals(37, Node.OPT_ARG_NAME);
766:       assertEquals(36, Node.QUOTED_PROP);
767:       assertEquals(48, Node.DIRECTIVES);
768:       assertEquals(56, Node.CHANGE_TIME);
769:       assertEquals(57, Node.REFLECTED_OBJECT);
770:       assertEquals(50, Node.FREE_CALL);
771:       assertEquals(52, Node.LENGTH);
772:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
773:       assertEquals(40, Node.ORIGINALNAME_PROP);
774:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
775:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
776:       assertEquals(39, Node.EMPTY_BLOCK);
777:       assertEquals(57, Node.LAST_PROP);
778:       assertEquals(30, Node.VAR_ARGS_NAME);
779:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
780:       assertEquals(51, Node.STATIC_SOURCE_FILE);
781:       assertEquals(1, Node.DECR_FLAG);
782:       assertEquals(32, Node.INCRDECR_PROP);
783:       assertEquals(43, Node.IS_CONSTANT_NAME);
784:       assertEquals(46, Node.IS_NAMESPACE);
785:       assertEquals(54, Node.SLASH_V);
786:       assertFalse(boolean0);
787:       
788:       int int0 = Node.POST_FLAG;
789:       assertEquals(2, int0);
790:       
791:       Node node3 = new Node(52, node2, node0);
792:       assertFalse(node0.equals((Object)node2));
793:       assertFalse(node2.equals((Object)node0));
794:       assertFalse(node3.equals((Object)node2));
795:       assertFalse(node3.equals((Object)node0));
796:       assertFalse(node0.isObjectLit());
797:       assertFalse(node0.isNot());
798:       assertFalse(node0.isWith());
799:       assertFalse(node0.isAnd());
800:       assertFalse(node0.isInstanceOf());
801:       assertFalse(node0.isCast());
802:       assertFalse(node0.isExprResult());
803:       assertFalse(node0.isBreak());
804:       assertFalse(node0.isFalse());
805:       assertFalse(node0.isThrow());
806:       assertFalse(node0.isOr());
807:       assertFalse(node0.isAssignAdd());
808:       assertFalse(node0.isInc());
809:       assertFalse(node0.isCase());
810:       assertFalse(node0.isDo());
811:       assertFalse(node0.hasMoreThanOneChild());
812:       assertEquals((-1), node0.getCharno());
813:       assertFalse(node0.isLabel());
814:       assertFalse(node0.isSwitch());
815:       assertEquals((-1), node0.getLineno());
816:       assertFalse(node0.isStringKey());
817:       assertFalse(node0.isLabelName());
818:       assertFalse(node0.isFor());
819:       assertFalse(node0.isHook());
820:       assertFalse(node0.isNumber());
821:       assertFalse(node0.isGetterDef());
822:       assertFalse(node0.isThis());
823:       assertFalse(node0.isBlock());
824:       assertTrue(node0.isString());
825:       assertFalse(node0.isTry());
826:       assertFalse(node0.hasOneChild());
827:       assertFalse(node0.isScript());
828:       assertEquals(40, node0.getType());
829:       assertFalse(node0.isCatch());
830:       assertFalse(node0.isDefaultCase());
831:       assertFalse(node0.isRegExp());
832:       assertEquals(0, node0.getChildCount());
833:       assertFalse(node0.isTrue());
834:       assertFalse(node0.isDebugger());
835:       assertFalse(node0.isVoid());
836:       assertFalse(node0.isFunction());
837:       assertFalse(node0.isParamList());
838:       assertFalse(node0.isArrayLit());
839:       assertFalse(node0.isName());
840:       assertFalse(node0.isEmpty());
841:       assertFalse(node0.isIf());
842:       assertFalse(node0.isNull());
843:       assertFalse(node0.isVar());
844:       assertFalse(node0.isNE());
845:       assertFalse(node0.isNew());
846:       assertFalse(node0.isAdd());
847:       assertFalse(node0.isIn());
848:       assertFalse(node0.isSetterDef());
849:       assertFalse(node0.isWhile());
850:       assertFalse(node0.isContinue());
851:       assertFalse(node0.isReturn());
852:       assertFalse(node0.isDelProp());
853:       assertFalse(node0.isCall());
854:       assertFalse(node0.isGetElem());
855:       assertFalse(node0.isAssign());
856:       assertEquals((-1), node0.getSourcePosition());
857:       assertFalse(node0.isDec());
858:       assertFalse(node0.isTypeOf());
859:       assertFalse(node0.isComma());
860:       assertFalse(node0.hasChildren());
861:       assertFalse(node0.isGetProp());
862:       assertFalse(node2.isHook());
863:       assertFalse(node2.isSwitch());
864:       assertFalse(node2.isInc());
865:       assertFalse(node2.isBreak());
866:       assertFalse(node2.isThrow());
867:       assertFalse(node2.isThis());
868:       assertFalse(node2.isComma());
869:       assertFalse(node2.isFalse());
870:       assertEquals(127005, node2.getSourcePosition());
871:       assertFalse(node2.isIn());
872:       assertFalse(node2.isInstanceOf());
873:       assertFalse(node2.isDelProp());
874:       assertFalse(node2.isIf());
875:       assertFalse(node2.isEmpty());
876:       assertFalse(node2.isNE());
877:       assertEquals(29, node2.getCharno());
878:       assertFalse(node2.isArrayLit());
879:       assertFalse(node2.hasOneChild());
880:       assertFalse(node2.isLabelName());
881:       assertFalse(node2.isTry());
882:       assertFalse(node2.isWith());
883:       assertFalse(node2.isDefaultCase());
884:       assertFalse(node2.isFor());
885:       assertFalse(node2.isCatch());
886:       assertFalse(node2.isRegExp());
887:       assertEquals(0, node2.getChildCount());
888:       assertEquals(31, node2.getLineno());
889:       assertFalse(node2.isParamList());
890:       assertFalse(node2.isCase());
891:       assertFalse(node2.isStringKey());
892:       assertFalse(node2.isScript());
893:       assertFalse(node2.isNumber());
894:       assertFalse(node2.isGetterDef());
895:       assertFalse(node2.isBlock());
896:       assertFalse(node2.isVar());
897:       assertFalse(node2.isAdd());
898:       assertFalse(node2.isCall());
899:       assertFalse(node2.isName());
900:       assertFalse(node2.isNew());
901:       assertFalse(node2.isWhile());
902:       assertFalse(node2.hasMoreThanOneChild());
903:       assertFalse(node2.isContinue());
904:       assertFalse(node2.isAssignAdd());
905:       assertFalse(node2.isLabel());
906:       assertFalse(node2.isSetterDef());
907:       assertFalse(node2.isDo());
908:       assertFalse(node2.isNull());
909:       assertFalse(node2.isTrue());
910:       assertFalse(node2.isOr());
911:       assertFalse(node2.isCast());
912:       assertFalse(node2.isExprResult());
913:       assertFalse(node2.isVoid());
914:       assertFalse(node2.hasChildren());
915:       assertFalse(node2.isGetElem());
916:       assertFalse(node2.isFunction());
917:       assertEquals(36, node2.getType());
918:       assertFalse(node2.isDec());
919:       assertFalse(node2.isTypeOf());
920:       assertFalse(node2.isAssign());
921:       assertFalse(node2.isReturn());
922:       assertFalse(node2.isAnd());
923:       assertFalse(node2.isGetProp());
924:       assertFalse(node2.isString());
925:       assertFalse(node2.isDebugger());
926:       assertFalse(node2.isObjectLit());
927:       assertFalse(node2.isNot());
928:       assertFalse(node3.hasOneChild());
929:       assertFalse(node3.isExprResult());
930:       assertFalse(node3.isGetElem());
931:       assertFalse(node3.isScript());
932:       assertFalse(node3.isCast());
933:       assertFalse(node3.isWith());
934:       assertFalse(node3.isTypeOf());
935:       assertFalse(node3.isDec());
936:       assertFalse(node3.isAssign());
937:       assertFalse(node3.isAssignAdd());
938:       assertFalse(node3.isReturn());
939:       assertEquals((-1), node3.getLineno());
940:       assertFalse(node3.isOr());
941:       assertFalse(node3.isBreak());
942:       assertFalse(node3.isHook());
943:       assertFalse(node3.isNew());
944:       assertFalse(node3.isAdd());
945:       assertFalse(node3.isCase());
946:       assertFalse(node3.isDo());
947:       assertFalse(node3.isThis());
948:       assertFalse(node3.isVar());
949:       assertFalse(node3.isBlock());
950:       assertFalse(node3.isLabel());
951:       assertFalse(node3.isGetterDef());
952:       assertFalse(node3.isNumber());
953:       assertFalse(node3.isLabelName());
954:       assertFalse(node3.isParamList());
955:       assertEquals((-1), node3.getCharno());
956:       assertFalse(node3.isSwitch());
957:       assertFalse(node3.isStringKey());
958:       assertFalse(node3.isArrayLit());
959:       assertFalse(node3.isTry());
960:       assertFalse(node3.isFunction());
961:       assertFalse(node3.isEmpty());
962:       assertFalse(node3.isDefaultCase());
963:       assertFalse(node3.isRegExp());
964:       assertFalse(node3.isFor());
965:       assertFalse(node3.isIn());
966:       assertFalse(node3.isSetterDef());
967:       assertFalse(node3.isCatch());
968:       assertTrue(node3.hasChildren());
969:       assertFalse(node3.isDelProp());
970:       assertFalse(node3.isIf());
971:       assertTrue(node3.isInstanceOf());
972:       assertFalse(node3.isName());
973:       assertEquals(52, node3.getType());
974:       assertTrue(node3.hasMoreThanOneChild());
975:       assertFalse(node3.isVoid());
976:       assertFalse(node3.isTrue());
977:       assertFalse(node3.isNull());
978:       assertFalse(node3.isNE());
979:       assertFalse(node3.isCall());
980:       assertFalse(node3.isFalse());
981:       assertFalse(node3.isInc());
982:       assertFalse(node3.isWhile());
983:       assertFalse(node3.isComma());
984:       assertFalse(node3.isThrow());
985:       assertEquals(2, node3.getChildCount());
986:       assertFalse(node3.isObjectLit());
987:       assertFalse(node3.isContinue());
988:       assertFalse(node3.isGetProp());
989:       assertFalse(node3.isString());
990:       assertEquals((-1), node3.getSourcePosition());
991:       assertFalse(node3.isNot());
992:       assertFalse(node3.isAnd());
993:       assertFalse(node3.isDebugger());
994:       assertEquals(15, Node.NO_SIDE_EFFECTS);
995:       assertEquals(57, Node.LAST_PROP);
996:       assertEquals(30, Node.VAR_ARGS_NAME);
997:       assertEquals(1, Node.DECR_FLAG);
998:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
999:       assertEquals(49, Node.DIRECT_EVAL);
1000:       assertEquals(54, Node.SLASH_V);
1001:       assertEquals(12, Node.COLUMN_BITS);
1002:       assertEquals(40, Node.ORIGINALNAME_PROP);
1003:       assertEquals(56, Node.CHANGE_TIME);
1004:       assertEquals(47, Node.IS_DISPATCHER);
1005:       assertEquals(2, Node.POST_FLAG);
1006:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1007:       assertEquals(39, Node.EMPTY_BLOCK);
1008:       assertEquals(37, Node.OPT_ARG_NAME);
1009:       assertEquals(48, Node.DIRECTIVES);
1010:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1011:       assertEquals(57, Node.REFLECTED_OBJECT);
1012:       assertEquals(29, Node.JSDOC_INFO_PROP);
1013:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1014:       assertEquals(53, Node.INPUT_ID);
1015:       assertEquals(55, Node.INFERRED_FUNCTION);
1016:       assertEquals(52, Node.LENGTH);
1017:       assertEquals(8, Node.FLAG_NO_THROWS);
1018:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1019:       assertEquals(43, Node.IS_CONSTANT_NAME);
1020:       assertEquals(36, Node.QUOTED_PROP);
1021:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1022:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1023:       assertEquals(4095, Node.COLUMN_MASK);
1024:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1025:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1026:       assertEquals(32, Node.INCRDECR_PROP);
1027:       assertEquals(46, Node.IS_NAMESPACE);
1028:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1029:       assertEquals(50, Node.FREE_CALL);
1030:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1031:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1032:       assertEquals(29, Node.JSDOC_INFO_PROP);
1033:       assertEquals(53, Node.INPUT_ID);
1034:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1035:       assertEquals(2, Node.POST_FLAG);
1036:       assertEquals(47, Node.IS_DISPATCHER);
1037:       assertEquals(12, Node.COLUMN_BITS);
1038:       assertEquals(55, Node.INFERRED_FUNCTION);
1039:       assertEquals(4095, Node.COLUMN_MASK);
1040:       assertEquals(49, Node.DIRECT_EVAL);
1041:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1042:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1043:       assertEquals(8, Node.FLAG_NO_THROWS);
1044:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1045:       assertEquals(37, Node.OPT_ARG_NAME);
1046:       assertEquals(36, Node.QUOTED_PROP);
1047:       assertEquals(48, Node.DIRECTIVES);
1048:       assertEquals(56, Node.CHANGE_TIME);
1049:       assertEquals(57, Node.REFLECTED_OBJECT);
1050:       assertEquals(50, Node.FREE_CALL);
1051:       assertEquals(52, Node.LENGTH);
1052:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1053:       assertEquals(40, Node.ORIGINALNAME_PROP);
1054:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1055:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1056:       assertEquals(39, Node.EMPTY_BLOCK);
1057:       assertEquals(57, Node.LAST_PROP);
1058:       assertEquals(30, Node.VAR_ARGS_NAME);
1059:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1060:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1061:       assertEquals(1, Node.DECR_FLAG);
1062:       assertEquals(32, Node.INCRDECR_PROP);
1063:       assertEquals(43, Node.IS_CONSTANT_NAME);
1064:       assertEquals(46, Node.IS_NAMESPACE);
1065:       assertEquals(54, Node.SLASH_V);
1066:       assertEquals(40, Node.ORIGINALNAME_PROP);
1067:       assertEquals(57, Node.REFLECTED_OBJECT);
1068:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1069:       assertEquals(52, Node.LENGTH);
1070:       assertEquals(50, Node.FREE_CALL);
1071:       assertEquals(8, Node.FLAG_NO_THROWS);
1072:       assertEquals(39, Node.EMPTY_BLOCK);
1073:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1074:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1075:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1076:       assertEquals(57, Node.LAST_PROP);
1077:       assertEquals(1, Node.DECR_FLAG);
1078:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1079:       assertEquals(12, Node.COLUMN_BITS);
1080:       assertEquals(4095, Node.COLUMN_MASK);
1081:       assertEquals(55, Node.INFERRED_FUNCTION);
1082:       assertEquals(36, Node.QUOTED_PROP);
1083:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1084:       assertEquals(37, Node.OPT_ARG_NAME);
1085:       assertEquals(56, Node.CHANGE_TIME);
1086:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1087:       assertEquals(49, Node.DIRECT_EVAL);
1088:       assertEquals(48, Node.DIRECTIVES);
1089:       assertEquals(29, Node.JSDOC_INFO_PROP);
1090:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1091:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1092:       assertEquals(47, Node.IS_DISPATCHER);
1093:       assertEquals(2, Node.POST_FLAG);
1094:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1095:       assertEquals(53, Node.INPUT_ID);
1096:       assertEquals(32, Node.INCRDECR_PROP);
1097:       assertEquals(46, Node.IS_NAMESPACE);
1098:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1099:       assertEquals(30, Node.VAR_ARGS_NAME);
1100:       assertEquals(54, Node.SLASH_V);
1101:       assertEquals(43, Node.IS_CONSTANT_NAME);
1102:       assertNotNull(node3);
1103:       
1104:       boolean boolean1 = node_NodeMismatch0.equals(templateType0);
1105:       assertFalse(node0.equals((Object)node2));
1106:       assertFalse(node0.equals((Object)node3));
1107:       assertFalse(node2.equals((Object)node3));
1108:       assertFalse(node2.equals((Object)node0));
1109:       assertTrue(boolean1 == boolean0);
1110:       assertNotSame(node2, node3);
1111:       assertFalse(node0.isObjectLit());
1112:       assertFalse(node0.isNot());
1113:       assertFalse(node0.isWith());
1114:       assertFalse(node0.isAnd());
1115:       assertFalse(node0.isInstanceOf());
1116:       assertFalse(node0.isCast());
1117:       assertFalse(node0.isExprResult());
1118:       assertFalse(node0.isBreak());
1119:       assertFalse(node0.isFalse());
1120:       assertFalse(node0.isThrow());
1121:       assertFalse(node0.isOr());
1122:       assertFalse(node0.isAssignAdd());
1123:       assertFalse(node0.isInc());
1124:       assertFalse(node0.isCase());
1125:       assertFalse(node0.isDo());
1126:       assertFalse(node0.hasMoreThanOneChild());
1127:       assertEquals((-1), node0.getCharno());
1128:       assertFalse(node0.isLabel());
1129:       assertFalse(node0.isSwitch());
1130:       assertEquals((-1), node0.getLineno());
1131:       assertFalse(node0.isStringKey());
1132:       assertFalse(node0.isLabelName());
1133:       assertFalse(node0.isFor());
1134:       assertFalse(node0.isHook());
1135:       assertFalse(node0.isNumber());
1136:       assertFalse(node0.isGetterDef());
1137:       assertFalse(node0.isThis());
1138:       assertFalse(node0.isBlock());
1139:       assertTrue(node0.isString());
1140:       assertFalse(node0.isTry());
1141:       assertFalse(node0.hasOneChild());
1142:       assertFalse(node0.isScript());
1143:       assertEquals(40, node0.getType());
1144:       assertFalse(node0.isCatch());
1145:       assertFalse(node0.isDefaultCase());
1146:       assertFalse(node0.isRegExp());
1147:       assertEquals(0, node0.getChildCount());
1148:       assertFalse(node0.isTrue());
1149:       assertFalse(node0.isDebugger());
1150:       assertFalse(node0.isVoid());
1151:       assertFalse(node0.isFunction());
1152:       assertFalse(node0.isParamList());
1153:       assertFalse(node0.isArrayLit());
1154:       assertFalse(node0.isName());
1155:       assertFalse(node0.isEmpty());
1156:       assertFalse(node0.isIf());
1157:       assertFalse(node0.isNull());
1158:       assertFalse(node0.isVar());
1159:       assertFalse(node0.isNE());
1160:       assertFalse(node0.isNew());
1161:       assertFalse(node0.isAdd());
1162:       assertFalse(node0.isIn());
1163:       assertFalse(node0.isSetterDef());
1164:       assertFalse(node0.isWhile());
1165:       assertFalse(node0.isContinue());
1166:       assertFalse(node0.isReturn());
1167:       assertFalse(node0.isDelProp());
1168:       assertFalse(node0.isCall());
1169:       assertFalse(node0.isGetElem());
1170:       assertFalse(node0.isAssign());
1171:       assertEquals((-1), node0.getSourcePosition());
1172:       assertFalse(node0.isDec());
1173:       assertFalse(node0.isTypeOf());
1174:       assertFalse(node0.isComma());
1175:       assertFalse(node0.hasChildren());
1176:       assertFalse(node0.isGetProp());
1177:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1178:       assertTrue(templateType0.isTemplateType());
1179:       assertFalse(templateType0.isBooleanValueType());
1180:       assertFalse(templateType0.hasCachedValues());
1181:       assertFalse(templateType0.isFunctionPrototypeType());
1182:       assertFalse(templateType0.isNumberValueType());
1183:       assertFalse(templateType0.isStringValueType());
1184:       assertEquals("Object#Element", templateType0.getReferenceName());
1185:       assertTrue(templateType0.isObject());
1186:       assertTrue(templateType0.hasAnyTemplateTypesInternal());
1187:       assertFalse(templateType0.isVoidType());
1188:       assertFalse(templateType0.isResolved());
1189:       assertFalse(templateType0.isNullType());
1190:       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
1191:       assertFalse(node2.isHook());
1192:       assertFalse(node2.isSwitch());
1193:       assertFalse(node2.isInc());
1194:       assertFalse(node2.isBreak());
1195:       assertFalse(node2.isThrow());
1196:       assertFalse(node2.isThis());
1197:       assertFalse(node2.isComma());
1198:       assertFalse(node2.isFalse());
1199:       assertEquals(127005, node2.getSourcePosition());
1200:       assertFalse(node2.isIn());
1201:       assertFalse(node2.isInstanceOf());
1202:       assertFalse(node2.isDelProp());
1203:       assertFalse(node2.isIf());
1204:       assertFalse(node2.isEmpty());
1205:       assertFalse(node2.isNE());
1206:       assertEquals(29, node2.getCharno());
1207:       assertFalse(node2.isArrayLit());
1208:       assertFalse(node2.hasOneChild());
1209:       assertFalse(node2.isLabelName());
1210:       assertFalse(node2.isTry());
1211:       assertFalse(node2.isWith());
1212:       assertFalse(node2.isDefaultCase());
1213:       assertFalse(node2.isFor());
1214:       assertFalse(node2.isCatch());
1215:       assertFalse(node2.isRegExp());
1216:       assertEquals(0, node2.getChildCount());
1217:       assertEquals(31, node2.getLineno());
1218:       assertFalse(node2.isParamList());
1219:       assertFalse(node2.isCase());
1220:       assertFalse(node2.isStringKey());
1221:       assertFalse(node2.isScript());
1222:       assertFalse(node2.isNumber());
1223:       assertFalse(node2.isGetterDef());
1224:       assertFalse(node2.isBlock());
1225:       assertFalse(node2.isVar());
1226:       assertFalse(node2.isAdd());
1227:       assertFalse(node2.isCall());
1228:       assertFalse(node2.isName());
1229:       assertFalse(node2.isNew());
1230:       assertFalse(node2.isWhile());
1231:       assertFalse(node2.hasMoreThanOneChild());
1232:       assertFalse(node2.isContinue());
1233:       assertFalse(node2.isAssignAdd());
1234:       assertFalse(node2.isLabel());
1235:       assertFalse(node2.isSetterDef());
1236:       assertFalse(node2.isDo());
1237:       assertFalse(node2.isNull());
1238:       assertFalse(node2.isTrue());
1239:       assertFalse(node2.isOr());
1240:       assertFalse(node2.isCast());
1241:       assertFalse(node2.isExprResult());
1242:       assertFalse(node2.isVoid());
1243:       assertFalse(node2.hasChildren());
1244:       assertFalse(node2.isGetElem());
1245:       assertFalse(node2.isFunction());
1246:       assertEquals(36, node2.getType());
1247:       assertFalse(node2.isDec());
1248:       assertFalse(node2.isTypeOf());
1249:       assertFalse(node2.isAssign());
1250:       assertFalse(node2.isReturn());
1251:       assertFalse(node2.isAnd());
1252:       assertFalse(node2.isGetProp());
1253:       assertFalse(node2.isString());
1254:       assertFalse(node2.isDebugger());
1255:       assertFalse(node2.isObjectLit());
1256:       assertFalse(node2.isNot());
1257:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1258:       assertEquals(57, Node.LAST_PROP);
1259:       assertEquals(30, Node.VAR_ARGS_NAME);
1260:       assertEquals(1, Node.DECR_FLAG);
1261:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1262:       assertEquals(49, Node.DIRECT_EVAL);
1263:       assertEquals(54, Node.SLASH_V);
1264:       assertEquals(12, Node.COLUMN_BITS);
1265:       assertEquals(40, Node.ORIGINALNAME_PROP);
1266:       assertEquals(56, Node.CHANGE_TIME);
1267:       assertEquals(47, Node.IS_DISPATCHER);
1268:       assertEquals(2, Node.POST_FLAG);
1269:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1270:       assertEquals(39, Node.EMPTY_BLOCK);
1271:       assertEquals(37, Node.OPT_ARG_NAME);
1272:       assertEquals(48, Node.DIRECTIVES);
1273:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1274:       assertEquals(57, Node.REFLECTED_OBJECT);
1275:       assertEquals(29, Node.JSDOC_INFO_PROP);
1276:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1277:       assertEquals(53, Node.INPUT_ID);
1278:       assertEquals(55, Node.INFERRED_FUNCTION);
1279:       assertEquals(52, Node.LENGTH);
1280:       assertEquals(8, Node.FLAG_NO_THROWS);
1281:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1282:       assertEquals(43, Node.IS_CONSTANT_NAME);
1283:       assertEquals(36, Node.QUOTED_PROP);
1284:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1285:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1286:       assertEquals(4095, Node.COLUMN_MASK);
1287:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1288:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1289:       assertEquals(32, Node.INCRDECR_PROP);
1290:       assertEquals(46, Node.IS_NAMESPACE);
1291:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1292:       assertEquals(50, Node.FREE_CALL);
1293:       assertEquals(1, JSType.ENUMDECL);
1294:       assertEquals(0, JSType.NOT_ENUMDECL);
1295:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1296:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1297:       assertEquals(29, Node.JSDOC_INFO_PROP);
1298:       assertEquals(53, Node.INPUT_ID);
1299:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1300:       assertEquals(2, Node.POST_FLAG);
1301:       assertEquals(47, Node.IS_DISPATCHER);
1302:       assertEquals(12, Node.COLUMN_BITS);
1303:       assertEquals(55, Node.INFERRED_FUNCTION);
1304:       assertEquals(4095, Node.COLUMN_MASK);
1305:       assertEquals(49, Node.DIRECT_EVAL);
1306:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1307:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1308:       assertEquals(8, Node.FLAG_NO_THROWS);
1309:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1310:       assertEquals(37, Node.OPT_ARG_NAME);
1311:       assertEquals(36, Node.QUOTED_PROP);
1312:       assertEquals(48, Node.DIRECTIVES);
1313:       assertEquals(56, Node.CHANGE_TIME);
1314:       assertEquals(57, Node.REFLECTED_OBJECT);
1315:       assertEquals(50, Node.FREE_CALL);
1316:       assertEquals(52, Node.LENGTH);
1317:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1318:       assertEquals(40, Node.ORIGINALNAME_PROP);
1319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1320:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1321:       assertEquals(39, Node.EMPTY_BLOCK);
1322:       assertEquals(57, Node.LAST_PROP);
1323:       assertEquals(30, Node.VAR_ARGS_NAME);
1324:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1325:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1326:       assertEquals(1, Node.DECR_FLAG);
1327:       assertEquals(32, Node.INCRDECR_PROP);
1328:       assertEquals(43, Node.IS_CONSTANT_NAME);
1329:       assertEquals(46, Node.IS_NAMESPACE);
1330:       assertEquals(54, Node.SLASH_V);
1331:       assertFalse(boolean1);
1332:       
1333:       boolean boolean2 = node0.isFromExterns();
1334:       assertFalse(node0.equals((Object)node2));
1335:       assertFalse(node0.equals((Object)node3));
1336:       assertTrue(boolean2 == boolean0);
1337:       assertTrue(boolean2 == boolean1);
1338:       assertFalse(node0.isObjectLit());
1339:       assertFalse(node0.isNot());
1340:       assertFalse(node0.isWith());
1341:       assertFalse(node0.isAnd());
1342:       assertFalse(node0.isInstanceOf());
1343:       assertFalse(node0.isCast());
1344:       assertFalse(node0.isExprResult());
1345:       assertFalse(node0.isBreak());
1346:       assertFalse(node0.isFalse());
1347:       assertFalse(node0.isThrow());
1348:       assertFalse(node0.isOr());
1349:       assertFalse(node0.isAssignAdd());
1350:       assertFalse(node0.isInc());
1351:       assertFalse(node0.isCase());
1352:       assertFalse(node0.isDo());
1353:       assertFalse(node0.hasMoreThanOneChild());
1354:       assertEquals((-1), node0.getCharno());
1355:       assertFalse(node0.isLabel());
1356:       assertFalse(node0.isSwitch());
1357:       assertEquals((-1), node0.getLineno());
1358:       assertFalse(node0.isStringKey());
1359:       assertFalse(node0.isLabelName());
1360:       assertFalse(node0.isFor());
1361:       assertFalse(node0.isHook());
1362:       assertFalse(node0.isNumber());
1363:       assertFalse(node0.isGetterDef());
1364:       assertFalse(node0.isThis());
1365:       assertFalse(node0.isBlock());
1366:       assertTrue(node0.isString());
1367:       assertFalse(node0.isTry());
1368:       assertFalse(node0.hasOneChild());
1369:       assertFalse(node0.isScript());
1370:       assertEquals(40, node0.getType());
1371:       assertFalse(node0.isCatch());
1372:       assertFalse(node0.isDefaultCase());
1373:       assertFalse(node0.isRegExp());
1374:       assertEquals(0, node0.getChildCount());
1375:       assertFalse(node0.isTrue());
1376:       assertFalse(node0.isDebugger());
1377:       assertFalse(node0.isVoid());
1378:       assertFalse(node0.isFunction());
1379:       assertFalse(node0.isParamList());
1380:       assertFalse(node0.isArrayLit());
1381:       assertFalse(node0.isName());
1382:       assertFalse(node0.isEmpty());
1383:       assertFalse(node0.isIf());
1384:       assertFalse(node0.isNull());
1385:       assertFalse(node0.isVar());
1386:       assertFalse(node0.isNE());
1387:       assertFalse(node0.isNew());
1388:       assertFalse(node0.isAdd());
1389:       assertFalse(node0.isIn());
1390:       assertFalse(node0.isSetterDef());
1391:       assertFalse(node0.isWhile());
1392:       assertFalse(node0.isContinue());
1393:       assertFalse(node0.isReturn());
1394:       assertFalse(node0.isDelProp());
1395:       assertFalse(node0.isCall());
1396:       assertFalse(node0.isGetElem());
1397:       assertFalse(node0.isAssign());
1398:       assertEquals((-1), node0.getSourcePosition());
1399:       assertFalse(node0.isDec());
1400:       assertFalse(node0.isTypeOf());
1401:       assertFalse(node0.isComma());
1402:       assertFalse(node0.hasChildren());
1403:       assertFalse(node0.isGetProp());
1404:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1405:       assertEquals(57, Node.LAST_PROP);
1406:       assertEquals(30, Node.VAR_ARGS_NAME);
1407:       assertEquals(1, Node.DECR_FLAG);
1408:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1409:       assertEquals(49, Node.DIRECT_EVAL);
1410:       assertEquals(54, Node.SLASH_V);
1411:       assertEquals(12, Node.COLUMN_BITS);
1412:       assertEquals(40, Node.ORIGINALNAME_PROP);
1413:       assertEquals(56, Node.CHANGE_TIME);
1414:       assertEquals(47, Node.IS_DISPATCHER);
1415:       assertEquals(2, Node.POST_FLAG);
1416:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1417:       assertEquals(39, Node.EMPTY_BLOCK);
1418:       assertEquals(37, Node.OPT_ARG_NAME);
1419:       assertEquals(48, Node.DIRECTIVES);
1420:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1421:       assertEquals(57, Node.REFLECTED_OBJECT);
1422:       assertEquals(29, Node.JSDOC_INFO_PROP);
1423:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1424:       assertEquals(53, Node.INPUT_ID);
1425:       assertEquals(55, Node.INFERRED_FUNCTION);
1426:       assertEquals(52, Node.LENGTH);
1427:       assertEquals(8, Node.FLAG_NO_THROWS);
1428:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1429:       assertEquals(43, Node.IS_CONSTANT_NAME);
1430:       assertEquals(36, Node.QUOTED_PROP);
1431:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1433:       assertEquals(4095, Node.COLUMN_MASK);
1434:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1435:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1436:       assertEquals(32, Node.INCRDECR_PROP);
1437:       assertEquals(46, Node.IS_NAMESPACE);
1438:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1439:       assertEquals(50, Node.FREE_CALL);
1440:       assertFalse(boolean2);
1441:       
1442:       Iterable<Node> iterable0 = node2.children();
1443:       assertFalse(node2.equals((Object)node3));
1444:       assertFalse(node2.equals((Object)node0));
1445:       assertNotSame(node2, node3);
1446:       assertFalse(node2.isHook());
1447:       assertFalse(node2.isSwitch());
1448:       assertFalse(node2.isInc());
1449:       assertFalse(node2.isBreak());
1450:       assertFalse(node2.isThrow());
1451:       assertFalse(node2.isThis());
1452:       assertFalse(node2.isComma());
1453:       assertFalse(node2.isFalse());
1454:       assertEquals(127005, node2.getSourcePosition());
1455:       assertFalse(node2.isIn());
1456:       assertFalse(node2.isInstanceOf());
1457:       assertFalse(node2.isDelProp());
1458:       assertFalse(node2.isIf());
1459:       assertFalse(node2.isEmpty());
1460:       assertFalse(node2.isNE());
1461:       assertEquals(29, node2.getCharno());
1462:       assertFalse(node2.isArrayLit());
1463:       assertFalse(node2.hasOneChild());
1464:       assertFalse(node2.isLabelName());
1465:       assertFalse(node2.isTry());
1466:       assertFalse(node2.isWith());
1467:       assertFalse(node2.isDefaultCase());
1468:       assertFalse(node2.isFor());
1469:       assertFalse(node2.isCatch());
1470:       assertFalse(node2.isRegExp());
1471:       assertEquals(0, node2.getChildCount());
1472:       assertEquals(31, node2.getLineno());
1473:       assertFalse(node2.isParamList());
1474:       assertFalse(node2.isCase());
1475:       assertFalse(node2.isStringKey());
1476:       assertFalse(node2.isScript());
1477:       assertFalse(node2.isNumber());
1478:       assertFalse(node2.isGetterDef());
1479:       assertFalse(node2.isBlock());
1480:       assertFalse(node2.isVar());
1481:       assertFalse(node2.isAdd());
1482:       assertFalse(node2.isCall());
1483:       assertFalse(node2.isName());
1484:       assertFalse(node2.isNew());
1485:       assertFalse(node2.isWhile());
1486:       assertFalse(node2.hasMoreThanOneChild());
1487:       assertFalse(node2.isContinue());
1488:       assertFalse(node2.isAssignAdd());
1489:       assertFalse(node2.isLabel());
1490:       assertFalse(node2.isSetterDef());
1491:       assertFalse(node2.isDo());
1492:       assertFalse(node2.isNull());
1493:       assertFalse(node2.isTrue());
1494:       assertFalse(node2.isOr());
1495:       assertFalse(node2.isCast());
1496:       assertFalse(node2.isExprResult());
1497:       assertFalse(node2.isVoid());
1498:       assertFalse(node2.hasChildren());
1499:       assertFalse(node2.isGetElem());
1500:       assertFalse(node2.isFunction());
1501:       assertEquals(36, node2.getType());
1502:       assertFalse(node2.isDec());
1503:       assertFalse(node2.isTypeOf());
1504:       assertFalse(node2.isAssign());
1505:       assertFalse(node2.isReturn());
1506:       assertFalse(node2.isAnd());
1507:       assertFalse(node2.isGetProp());
1508:       assertFalse(node2.isString());
1509:       assertFalse(node2.isDebugger());
1510:       assertFalse(node2.isObjectLit());
1511:       assertFalse(node2.isNot());
1512:       assertFalse(iterable0.contains(node0));
1513:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1514:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1515:       assertEquals(29, Node.JSDOC_INFO_PROP);
1516:       assertEquals(53, Node.INPUT_ID);
1517:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1518:       assertEquals(2, Node.POST_FLAG);
1519:       assertEquals(47, Node.IS_DISPATCHER);
1520:       assertEquals(12, Node.COLUMN_BITS);
1521:       assertEquals(55, Node.INFERRED_FUNCTION);
1522:       assertEquals(4095, Node.COLUMN_MASK);
1523:       assertEquals(49, Node.DIRECT_EVAL);
1524:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1525:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1526:       assertEquals(8, Node.FLAG_NO_THROWS);
1527:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1528:       assertEquals(37, Node.OPT_ARG_NAME);
1529:       assertEquals(36, Node.QUOTED_PROP);
1530:       assertEquals(48, Node.DIRECTIVES);
1531:       assertEquals(56, Node.CHANGE_TIME);
1532:       assertEquals(57, Node.REFLECTED_OBJECT);
1533:       assertEquals(50, Node.FREE_CALL);
1534:       assertEquals(52, Node.LENGTH);
1535:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1536:       assertEquals(40, Node.ORIGINALNAME_PROP);
1537:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1538:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1539:       assertEquals(39, Node.EMPTY_BLOCK);
1540:       assertEquals(57, Node.LAST_PROP);
1541:       assertEquals(30, Node.VAR_ARGS_NAME);
1542:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1543:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1544:       assertEquals(1, Node.DECR_FLAG);
1545:       assertEquals(32, Node.INCRDECR_PROP);
1546:       assertEquals(43, Node.IS_CONSTANT_NAME);
1547:       assertEquals(46, Node.IS_NAMESPACE);
1548:       assertEquals(54, Node.SLASH_V);
1549:       assertNotNull(iterable0);
1550:       
1551:       boolean boolean3 = node0.isDefaultCase();
1552:       assertTrue(boolean3 == boolean2);
1553:       assertTrue(boolean3 == boolean1);
1554:       assertTrue(boolean3 == boolean0);
1555:       assertFalse(node0.equals((Object)node2));
1556:       assertFalse(node0.equals((Object)node3));
1557:       assertFalse(node0.isObjectLit());
1558:       assertFalse(node0.isNot());
1559:       assertFalse(node0.isWith());
1560:       assertFalse(node0.isAnd());
1561:       assertFalse(node0.isInstanceOf());
1562:       assertFalse(node0.isCast());
1563:       assertFalse(node0.isExprResult());
1564:       assertFalse(node0.isBreak());
1565:       assertFalse(node0.isFalse());
1566:       assertFalse(node0.isThrow());
1567:       assertFalse(node0.isOr());
1568:       assertFalse(node0.isAssignAdd());
1569:       assertFalse(node0.isInc());
1570:       assertFalse(node0.isCase());
1571:       assertFalse(node0.isDo());
1572:       assertFalse(node0.hasMoreThanOneChild());
1573:       assertEquals((-1), node0.getCharno());
1574:       assertFalse(node0.isLabel());
1575:       assertFalse(node0.isSwitch());
1576:       assertEquals((-1), node0.getLineno());
1577:       assertFalse(node0.isStringKey());
1578:       assertFalse(node0.isLabelName());
1579:       assertFalse(node0.isFor());
1580:       assertFalse(node0.isHook());
1581:       assertFalse(node0.isNumber());
1582:       assertFalse(node0.isGetterDef());
1583:       assertFalse(node0.isThis());
1584:       assertFalse(node0.isBlock());
1585:       assertTrue(node0.isString());
1586:       assertFalse(node0.isTry());
1587:       assertFalse(node0.hasOneChild());
1588:       assertFalse(node0.isScript());
1589:       assertEquals(40, node0.getType());
1590:       assertFalse(node0.isCatch());
1591:       assertFalse(node0.isDefaultCase());
1592:       assertFalse(node0.isRegExp());
1593:       assertEquals(0, node0.getChildCount());
1594:       assertFalse(node0.isTrue());
1595:       assertFalse(node0.isDebugger());
1596:       assertFalse(node0.isVoid());
1597:       assertFalse(node0.isFunction());
1598:       assertFalse(node0.isParamList());
1599:       assertFalse(node0.isArrayLit());
1600:       assertFalse(node0.isName());
1601:       assertFalse(node0.isEmpty());
1602:       assertFalse(node0.isIf());
1603:       assertFalse(node0.isNull());
1604:       assertFalse(node0.isVar());
1605:       assertFalse(node0.isNE());
1606:       assertFalse(node0.isNew());
1607:       assertFalse(node0.isAdd());
1608:       assertFalse(node0.isIn());
1609:       assertFalse(node0.isSetterDef());
1610:       assertFalse(node0.isWhile());
1611:       assertFalse(node0.isContinue());
1612:       assertFalse(node0.isReturn());
1613:       assertFalse(node0.isDelProp());
1614:       assertFalse(node0.isCall());
1615:       assertFalse(node0.isGetElem());
1616:       assertFalse(node0.isAssign());
1617:       assertEquals((-1), node0.getSourcePosition());
1618:       assertFalse(node0.isDec());
1619:       assertFalse(node0.isTypeOf());
1620:       assertFalse(node0.isComma());
1621:       assertFalse(node0.hasChildren());
1622:       assertFalse(node0.isGetProp());
1623:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1624:       assertEquals(57, Node.LAST_PROP);
1625:       assertEquals(30, Node.VAR_ARGS_NAME);
1626:       assertEquals(1, Node.DECR_FLAG);
1627:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1628:       assertEquals(49, Node.DIRECT_EVAL);
1629:       assertEquals(54, Node.SLASH_V);
1630:       assertEquals(12, Node.COLUMN_BITS);
1631:       assertEquals(40, Node.ORIGINALNAME_PROP);
1632:       assertEquals(56, Node.CHANGE_TIME);
1633:       assertEquals(47, Node.IS_DISPATCHER);
1634:       assertEquals(2, Node.POST_FLAG);
1635:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1636:       assertEquals(39, Node.EMPTY_BLOCK);
1637:       assertEquals(37, Node.OPT_ARG_NAME);
1638:       assertEquals(48, Node.DIRECTIVES);
1639:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1640:       assertEquals(57, Node.REFLECTED_OBJECT);
1641:       assertEquals(29, Node.JSDOC_INFO_PROP);
1642:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1643:       assertEquals(53, Node.INPUT_ID);
1644:       assertEquals(55, Node.INFERRED_FUNCTION);
1645:       assertEquals(52, Node.LENGTH);
1646:       assertEquals(8, Node.FLAG_NO_THROWS);
1647:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1648:       assertEquals(43, Node.IS_CONSTANT_NAME);
1649:       assertEquals(36, Node.QUOTED_PROP);
1650:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1651:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1652:       assertEquals(4095, Node.COLUMN_MASK);
1653:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1654:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1655:       assertEquals(32, Node.INCRDECR_PROP);
1656:       assertEquals(46, Node.IS_NAMESPACE);
1657:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1658:       assertEquals(50, Node.FREE_CALL);
1659:       assertFalse(boolean3);
1660:       
1661:       boolean boolean4 = node2.isLocalResultCall();
1662:       assertTrue(boolean4 == boolean3);
1663:       assertTrue(boolean4 == boolean0);
1664:       assertTrue(boolean4 == boolean2);
1665:       assertTrue(boolean4 == boolean1);
1666:       assertFalse(node2.equals((Object)node3));
1667:       assertFalse(node2.equals((Object)node0));
1668:       assertNotSame(node2, node3);
1669:       assertFalse(node2.isHook());
1670:       assertFalse(node2.isSwitch());
1671:       assertFalse(node2.isInc());
1672:       assertFalse(node2.isBreak());
1673:       assertFalse(node2.isThrow());
1674:       assertFalse(node2.isThis());
1675:       assertFalse(node2.isComma());
1676:       assertFalse(node2.isFalse());
1677:       assertEquals(127005, node2.getSourcePosition());
1678:       assertFalse(node2.isIn());
1679:       assertFalse(node2.isInstanceOf());
1680:       assertFalse(node2.isDelProp());
1681:       assertFalse(node2.isIf());
1682:       assertFalse(node2.isEmpty());
1683:       assertFalse(node2.isNE());
1684:       assertEquals(29, node2.getCharno());
1685:       assertFalse(node2.isArrayLit());
1686:       assertFalse(node2.hasOneChild());
1687:       assertFalse(node2.isLabelName());
1688:       assertFalse(node2.isTry());
1689:       assertFalse(node2.isWith());
1690:       assertFalse(node2.isDefaultCase());
1691:       assertFalse(node2.isFor());
1692:       assertFalse(node2.isCatch());
1693:       assertFalse(node2.isRegExp());
1694:       assertEquals(0, node2.getChildCount());
1695:       assertEquals(31, node2.getLineno());
1696:       assertFalse(node2.isParamList());
1697:       assertFalse(node2.isCase());
1698:       assertFalse(node2.isStringKey());
1699:       assertFalse(node2.isScript());
1700:       assertFalse(node2.isNumber());
1701:       assertFalse(node2.isGetterDef());
1702:       assertFalse(node2.isBlock());
1703:       assertFalse(node2.isVar());
1704:       assertFalse(node2.isAdd());
1705:       assertFalse(node2.isCall());
1706:       assertFalse(node2.isName());
1707:       assertFalse(node2.isNew());
1708:       assertFalse(node2.isWhile());
1709:       assertFalse(node2.hasMoreThanOneChild());
1710:       assertFalse(node2.isContinue());
1711:       assertFalse(node2.isAssignAdd());
1712:       assertFalse(node2.isLabel());
1713:       assertFalse(node2.isSetterDef());
1714:       assertFalse(node2.isDo());
1715:       assertFalse(node2.isNull());
1716:       assertFalse(node2.isTrue());
1717:       assertFalse(node2.isOr());
1718:       assertFalse(node2.isCast());
1719:       assertFalse(node2.isExprResult());
1720:       assertFalse(node2.isVoid());
1721:       assertFalse(node2.hasChildren());
1722:       assertFalse(node2.isGetElem());
1723:       assertFalse(node2.isFunction());
1724:       assertEquals(36, node2.getType());
1725:       assertFalse(node2.isDec());
1726:       assertFalse(node2.isTypeOf());
1727:       assertFalse(node2.isAssign());
1728:       assertFalse(node2.isReturn());
1729:       assertFalse(node2.isAnd());
1730:       assertFalse(node2.isGetProp());
1731:       assertFalse(node2.isString());
1732:       assertFalse(node2.isDebugger());
1733:       assertFalse(node2.isObjectLit());
1734:       assertFalse(node2.isNot());
1735:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1736:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1737:       assertEquals(29, Node.JSDOC_INFO_PROP);
1738:       assertEquals(53, Node.INPUT_ID);
1739:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1740:       assertEquals(2, Node.POST_FLAG);
1741:       assertEquals(47, Node.IS_DISPATCHER);
1742:       assertEquals(12, Node.COLUMN_BITS);
1743:       assertEquals(55, Node.INFERRED_FUNCTION);
1744:       assertEquals(4095, Node.COLUMN_MASK);
1745:       assertEquals(49, Node.DIRECT_EVAL);
1746:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1747:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1748:       assertEquals(8, Node.FLAG_NO_THROWS);
1749:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1750:       assertEquals(37, Node.OPT_ARG_NAME);
1751:       assertEquals(36, Node.QUOTED_PROP);
1752:       assertEquals(48, Node.DIRECTIVES);
1753:       assertEquals(56, Node.CHANGE_TIME);
1754:       assertEquals(57, Node.REFLECTED_OBJECT);
1755:       assertEquals(50, Node.FREE_CALL);
1756:       assertEquals(52, Node.LENGTH);
1757:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1758:       assertEquals(40, Node.ORIGINALNAME_PROP);
1759:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1760:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1761:       assertEquals(39, Node.EMPTY_BLOCK);
1762:       assertEquals(57, Node.LAST_PROP);
1763:       assertEquals(30, Node.VAR_ARGS_NAME);
1764:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1765:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1766:       assertEquals(1, Node.DECR_FLAG);
1767:       assertEquals(32, Node.INCRDECR_PROP);
1768:       assertEquals(43, Node.IS_CONSTANT_NAME);
1769:       assertEquals(46, Node.IS_NAMESPACE);
1770:       assertEquals(54, Node.SLASH_V);
1771:       assertFalse(boolean4);
1772:       
1773:       boolean boolean5 = node3.isBreak();
1774:       assertFalse(node0.equals((Object)node2));
1775:       assertFalse(node0.equals((Object)node3));
1776:       assertTrue(boolean5 == boolean3);
1777:       assertTrue(boolean5 == boolean0);
1778:       assertTrue(boolean5 == boolean4);
1779:       assertTrue(boolean5 == boolean2);
1780:       assertTrue(boolean5 == boolean1);
1781:       assertFalse(node2.equals((Object)node3));
1782:       assertFalse(node2.equals((Object)node0));
1783:       assertFalse(node3.equals((Object)node2));
1784:       assertFalse(node3.equals((Object)node0));
1785:       assertNotSame(node2, node3);
1786:       assertNotSame(node3, node2);
1787:       assertFalse(node0.isObjectLit());
1788:       assertFalse(node0.isNot());
1789:       assertFalse(node0.isWith());
1790:       assertFalse(node0.isAnd());
1791:       assertFalse(node0.isInstanceOf());
1792:       assertFalse(node0.isCast());
1793:       assertFalse(node0.isExprResult());
1794:       assertFalse(node0.isBreak());
1795:       assertFalse(node0.isFalse());
1796:       assertFalse(node0.isThrow());
1797:       assertFalse(node0.isOr());
1798:       assertFalse(node0.isAssignAdd());
1799:       assertFalse(node0.isInc());
1800:       assertFalse(node0.isCase());
1801:       assertFalse(node0.isDo());
1802:       assertFalse(node0.hasMoreThanOneChild());
1803:       assertEquals((-1), node0.getCharno());
1804:       assertFalse(node0.isLabel());
1805:       assertFalse(node0.isSwitch());
1806:       assertEquals((-1), node0.getLineno());
1807:       assertFalse(node0.isStringKey());
1808:       assertFalse(node0.isLabelName());
1809:       assertFalse(node0.isFor());
1810:       assertFalse(node0.isHook());
1811:       assertFalse(node0.isNumber());
1812:       assertFalse(node0.isGetterDef());
1813:       assertFalse(node0.isThis());
1814:       assertFalse(node0.isBlock());
1815:       assertTrue(node0.isString());
1816:       assertFalse(node0.isTry());
1817:       assertFalse(node0.hasOneChild());
1818:       assertFalse(node0.isScript());
1819:       assertEquals(40, node0.getType());
1820:       assertFalse(node0.isCatch());
1821:       assertFalse(node0.isDefaultCase());
1822:       assertFalse(node0.isRegExp());
1823:       assertEquals(0, node0.getChildCount());
1824:       assertFalse(node0.isTrue());
1825:       assertFalse(node0.isDebugger());
1826:       assertFalse(node0.isVoid());
1827:       assertFalse(node0.isFunction());
1828:       assertFalse(node0.isParamList());
1829:       assertFalse(node0.isArrayLit());
1830:       assertFalse(node0.isName());
1831:       assertFalse(node0.isEmpty());
1832:       assertFalse(node0.isIf());
1833:       assertFalse(node0.isNull());
1834:       assertFalse(node0.isVar());
1835:       assertFalse(node0.isNE());
1836:       assertFalse(node0.isNew());
1837:       assertFalse(node0.isAdd());
1838:       assertFalse(node0.isIn());
1839:       assertFalse(node0.isSetterDef());
1840:       assertFalse(node0.isWhile());
1841:       assertFalse(node0.isContinue());
1842:       assertFalse(node0.isReturn());
1843:       assertFalse(node0.isDelProp());
1844:       assertFalse(node0.isCall());
1845:       assertFalse(node0.isGetElem());
1846:       assertFalse(node0.isAssign());
1847:       assertEquals((-1), node0.getSourcePosition());
1848:       assertFalse(node0.isDec());
1849:       assertFalse(node0.isTypeOf());
1850:       assertFalse(node0.isComma());
1851:       assertFalse(node0.hasChildren());
1852:       assertFalse(node0.isGetProp());
1853:       assertFalse(node2.isHook());
1854:       assertFalse(node2.isSwitch());
1855:       assertFalse(node2.isInc());
1856:       assertFalse(node2.isBreak());
1857:       assertFalse(node2.isThrow());
1858:       assertFalse(node2.isThis());
1859:       assertFalse(node2.isComma());
1860:       assertFalse(node2.isFalse());
1861:       assertEquals(127005, node2.getSourcePosition());
1862:       assertFalse(node2.isIn());
1863:       assertFalse(node2.isInstanceOf());
1864:       assertFalse(node2.isDelProp());
1865:       assertFalse(node2.isIf());
1866:       assertFalse(node2.isEmpty());
1867:       assertFalse(node2.isNE());
1868:       assertEquals(29, node2.getCharno());
1869:       assertFalse(node2.isArrayLit());
1870:       assertFalse(node2.hasOneChild());
1871:       assertFalse(node2.isLabelName());
1872:       assertFalse(node2.isTry());
1873:       assertFalse(node2.isWith());
1874:       assertFalse(node2.isDefaultCase());
1875:       assertFalse(node2.isFor());
1876:       assertFalse(node2.isCatch());
1877:       assertFalse(node2.isRegExp());
1878:       assertEquals(0, node2.getChildCount());
1879:       assertEquals(31, node2.getLineno());
1880:       assertFalse(node2.isParamList());
1881:       assertFalse(node2.isCase());
1882:       assertFalse(node2.isStringKey());
1883:       assertFalse(node2.isScript());
1884:       assertFalse(node2.isNumber());
1885:       assertFalse(node2.isGetterDef());
1886:       assertFalse(node2.isBlock());
1887:       assertFalse(node2.isVar());
1888:       assertFalse(node2.isAdd());
1889:       assertFalse(node2.isCall());
1890:       assertFalse(node2.isName());
1891:       assertFalse(node2.isNew());
1892:       assertFalse(node2.isWhile());
1893:       assertFalse(node2.hasMoreThanOneChild());
1894:       assertFalse(node2.isContinue());
1895:       assertFalse(node2.isAssignAdd());
1896:       assertFalse(node2.isLabel());
1897:       assertFalse(node2.isSetterDef());
1898:       assertFalse(node2.isDo());
1899:       assertFalse(node2.isNull());
1900:       assertFalse(node2.isTrue());
1901:       assertFalse(node2.isOr());
1902:       assertFalse(node2.isCast());
1903:       assertFalse(node2.isExprResult());
1904:       assertFalse(node2.isVoid());
1905:       assertFalse(node2.hasChildren());
1906:       assertFalse(node2.isGetElem());
1907:       assertFalse(node2.isFunction());
1908:       assertEquals(36, node2.getType());
1909:       assertFalse(node2.isDec());
1910:       assertFalse(node2.isTypeOf());
1911:       assertFalse(node2.isAssign());
1912:       assertFalse(node2.isReturn());
1913:       assertFalse(node2.isAnd());
1914:       assertFalse(node2.isGetProp());
1915:       assertFalse(node2.isString());
1916:       assertFalse(node2.isDebugger());
1917:       assertFalse(node2.isObjectLit());
1918:       assertFalse(node2.isNot());
1919:       assertFalse(node3.hasOneChild());
1920:       assertFalse(node3.isExprResult());
1921:       assertFalse(node3.isGetElem());
1922:       assertFalse(node3.isScript());
1923:       assertFalse(node3.isCast());
1924:       assertFalse(node3.isWith());
1925:       assertFalse(node3.isTypeOf());
1926:       assertFalse(node3.isDec());
1927:       assertFalse(node3.isAssign());
1928:       assertFalse(node3.isAssignAdd());
1929:       assertFalse(node3.isReturn());
1930:       assertEquals((-1), node3.getLineno());
1931:       assertFalse(node3.isOr());
1932:       assertFalse(node3.isBreak());
1933:       assertFalse(node3.isHook());
1934:       assertFalse(node3.isNew());
1935:       assertFalse(node3.isAdd());
1936:       assertFalse(node3.isCase());
1937:       assertFalse(node3.isDo());
1938:       assertFalse(node3.isThis());
1939:       assertFalse(node3.isVar());
1940:       assertFalse(node3.isBlock());
1941:       assertFalse(node3.isLabel());
1942:       assertFalse(node3.isGetterDef());
1943:       assertFalse(node3.isNumber());
1944:       assertFalse(node3.isLabelName());
1945:       assertFalse(node3.isParamList());
1946:       assertEquals((-1), node3.getCharno());
1947:       assertFalse(node3.isSwitch());
1948:       assertFalse(node3.isStringKey());
1949:       assertFalse(node3.isArrayLit());
1950:       assertFalse(node3.isTry());
1951:       assertFalse(node3.isFunction());
1952:       assertFalse(node3.isEmpty());
1953:       assertFalse(node3.isDefaultCase());
1954:       assertFalse(node3.isRegExp());
1955:       assertFalse(node3.isFor());
1956:       assertFalse(node3.isIn());
1957:       assertFalse(node3.isSetterDef());
1958:       assertFalse(node3.isCatch());
1959:       assertTrue(node3.hasChildren());
1960:       assertFalse(node3.isDelProp());
1961:       assertFalse(node3.isIf());
1962:       assertTrue(node3.isInstanceOf());
1963:       assertFalse(node3.isName());
1964:       assertEquals(52, node3.getType());
1965:       assertTrue(node3.hasMoreThanOneChild());
1966:       assertFalse(node3.isVoid());
1967:       assertFalse(node3.isTrue());
1968:       assertFalse(node3.isNull());
1969:       assertFalse(node3.isNE());
1970:       assertFalse(node3.isCall());
1971:       assertFalse(node3.isFalse());
1972:       assertFalse(node3.isInc());
1973:       assertFalse(node3.isWhile());
1974:       assertFalse(node3.isComma());
1975:       assertFalse(node3.isThrow());
1976:       assertEquals(2, node3.getChildCount());
1977:       assertFalse(node3.isObjectLit());
1978:       assertFalse(node3.isContinue());
1979:       assertFalse(node3.isGetProp());
1980:       assertFalse(node3.isString());
1981:       assertEquals((-1), node3.getSourcePosition());
1982:       assertFalse(node3.isNot());
1983:       assertFalse(node3.isAnd());
1984:       assertFalse(node3.isDebugger());
1985:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1986:       assertEquals(57, Node.LAST_PROP);
1987:       assertEquals(30, Node.VAR_ARGS_NAME);
1988:       assertEquals(1, Node.DECR_FLAG);
1989:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1990:       assertEquals(49, Node.DIRECT_EVAL);
1991:       assertEquals(54, Node.SLASH_V);
1992:       assertEquals(12, Node.COLUMN_BITS);
1993:       assertEquals(40, Node.ORIGINALNAME_PROP);
1994:       assertEquals(56, Node.CHANGE_TIME);
1995:       assertEquals(47, Node.IS_DISPATCHER);
1996:       assertEquals(2, Node.POST_FLAG);
1997:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1998:       assertEquals(39, Node.EMPTY_BLOCK);
1999:       assertEquals(37, Node.OPT_ARG_NAME);
2000:       assertEquals(48, Node.DIRECTIVES);
2001:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2002:       assertEquals(57, Node.REFLECTED_OBJECT);
2003:       assertEquals(29, Node.JSDOC_INFO_PROP);
2004:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2005:       assertEquals(53, Node.INPUT_ID);
2006:       assertEquals(55, Node.INFERRED_FUNCTION);
2007:       assertEquals(52, Node.LENGTH);
2008:       assertEquals(8, Node.FLAG_NO_THROWS);
2009:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2010:       assertEquals(43, Node.IS_CONSTANT_NAME);
2011:       assertEquals(36, Node.QUOTED_PROP);
2012:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2013:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2014:       assertEquals(4095, Node.COLUMN_MASK);
2015:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2016:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2017:       assertEquals(32, Node.INCRDECR_PROP);
2018:       assertEquals(46, Node.IS_NAMESPACE);
2019:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2020:       assertEquals(50, Node.FREE_CALL);
2021:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2022:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2023:       assertEquals(29, Node.JSDOC_INFO_PROP);
2024:       assertEquals(53, Node.INPUT_ID);
2025:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2026:       assertEquals(2, Node.POST_FLAG);
2027:       assertEquals(47, Node.IS_DISPATCHER);
2028:       assertEquals(12, Node.COLUMN_BITS);
2029:       assertEquals(55, Node.INFERRED_FUNCTION);
2030:       assertEquals(4095, Node.COLUMN_MASK);
2031:       assertEquals(49, Node.DIRECT_EVAL);
2032:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2033:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2034:       assertEquals(8, Node.FLAG_NO_THROWS);
2035:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2036:       assertEquals(37, Node.OPT_ARG_NAME);
2037:       assertEquals(36, Node.QUOTED_PROP);
2038:       assertEquals(48, Node.DIRECTIVES);
2039:       assertEquals(56, Node.CHANGE_TIME);
2040:       assertEquals(57, Node.REFLECTED_OBJECT);
2041:       assertEquals(50, Node.FREE_CALL);
2042:       assertEquals(52, Node.LENGTH);
2043:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2044:       assertEquals(40, Node.ORIGINALNAME_PROP);
2045:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2046:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2047:       assertEquals(39, Node.EMPTY_BLOCK);
2048:       assertEquals(57, Node.LAST_PROP);
2049:       assertEquals(30, Node.VAR_ARGS_NAME);
2050:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2051:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2052:       assertEquals(1, Node.DECR_FLAG);
2053:       assertEquals(32, Node.INCRDECR_PROP);
2054:       assertEquals(43, Node.IS_CONSTANT_NAME);
2055:       assertEquals(46, Node.IS_NAMESPACE);
2056:       assertEquals(54, Node.SLASH_V);
2057:       assertEquals(40, Node.ORIGINALNAME_PROP);
2058:       assertEquals(57, Node.REFLECTED_OBJECT);
2059:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2060:       assertEquals(52, Node.LENGTH);
2061:       assertEquals(50, Node.FREE_CALL);
2062:       assertEquals(8, Node.FLAG_NO_THROWS);
2063:       assertEquals(39, Node.EMPTY_BLOCK);
2064:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2065:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2066:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2067:       assertEquals(57, Node.LAST_PROP);
2068:       assertEquals(1, Node.DECR_FLAG);
2069:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2070:       assertEquals(12, Node.COLUMN_BITS);
2071:       assertEquals(4095, Node.COLUMN_MASK);
2072:       assertEquals(55, Node.INFERRED_FUNCTION);
2073:       assertEquals(36, Node.QUOTED_PROP);
2074:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2075:       assertEquals(37, Node.OPT_ARG_NAME);
2076:       assertEquals(56, Node.CHANGE_TIME);
2077:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2078:       assertEquals(49, Node.DIRECT_EVAL);
2079:       assertEquals(48, Node.DIRECTIVES);
2080:       assertEquals(29, Node.JSDOC_INFO_PROP);
2081:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2082:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2083:       assertEquals(47, Node.IS_DISPATCHER);
2084:       assertEquals(2, Node.POST_FLAG);
2085:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2086:       assertEquals(53, Node.INPUT_ID);
2087:       assertEquals(32, Node.INCRDECR_PROP);
2088:       assertEquals(46, Node.IS_NAMESPACE);
2089:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2090:       assertEquals(30, Node.VAR_ARGS_NAME);
2091:       assertEquals(54, Node.SLASH_V);
2092:       assertEquals(43, Node.IS_CONSTANT_NAME);
2093:       assertFalse(boolean5);
2094:       
2095:       Node node4 = node3.removeFirstChild();
2096:       assertFalse(node0.equals((Object)node2));
2097:       assertFalse(node0.equals((Object)node3));
2098:       assertFalse(node4.equals((Object)node0));
2099:       assertFalse(node4.equals((Object)node3));
2100:       assertFalse(node2.equals((Object)node3));
2101:       assertFalse(node2.equals((Object)node0));
2102:       assertFalse(node3.equals((Object)node2));
2103:       assertFalse(node3.equals((Object)node0));
2104:       assertSame(node4, node2);
2105:       assertNotSame(node4, node3);
2106:       assertNotSame(node2, node3);
2107:       assertSame(node2, node4);
2108:       assertNotSame(node3, node2);
2109:       assertNotSame(node3, node4);
2110:       assertFalse(node0.isObjectLit());
2111:       assertFalse(node0.isNot());
2112:       assertFalse(node0.isWith());
2113:       assertFalse(node0.isAnd());
2114:       assertFalse(node0.isInstanceOf());
2115:       assertFalse(node0.isCast());
2116:       assertFalse(node0.isExprResult());
2117:       assertFalse(node0.isBreak());
2118:       assertFalse(node0.isFalse());
2119:       assertFalse(node0.isThrow());
2120:       assertFalse(node0.isOr());
2121:       assertFalse(node0.isAssignAdd());
2122:       assertFalse(node0.isInc());
2123:       assertFalse(node0.isCase());
2124:       assertFalse(node0.isDo());
2125:       assertFalse(node0.hasMoreThanOneChild());
2126:       assertEquals((-1), node0.getCharno());
2127:       assertFalse(node0.isLabel());
2128:       assertFalse(node0.isSwitch());
2129:       assertEquals((-1), node0.getLineno());
2130:       assertFalse(node0.isStringKey());
2131:       assertFalse(node0.isLabelName());
2132:       assertFalse(node0.isFor());
2133:       assertFalse(node0.isHook());
2134:       assertFalse(node0.isNumber());
2135:       assertFalse(node0.isGetterDef());
2136:       assertFalse(node0.isThis());
2137:       assertFalse(node0.isBlock());
2138:       assertTrue(node0.isString());
2139:       assertFalse(node0.isTry());
2140:       assertFalse(node0.hasOneChild());
2141:       assertFalse(node0.isScript());
2142:       assertEquals(40, node0.getType());
2143:       assertFalse(node0.isCatch());
2144:       assertFalse(node0.isDefaultCase());
2145:       assertFalse(node0.isRegExp());
2146:       assertEquals(0, node0.getChildCount());
2147:       assertFalse(node0.isTrue());
2148:       assertFalse(node0.isDebugger());
2149:       assertFalse(node0.isVoid());
2150:       assertFalse(node0.isFunction());
2151:       assertFalse(node0.isParamList());
2152:       assertFalse(node0.isArrayLit());
2153:       assertFalse(node0.isName());
2154:       assertFalse(node0.isEmpty());
2155:       assertFalse(node0.isIf());
2156:       assertFalse(node0.isNull());
2157:       assertFalse(node0.isVar());
2158:       assertFalse(node0.isNE());
2159:       assertFalse(node0.isNew());
2160:       assertFalse(node0.isAdd());
2161:       assertFalse(node0.isIn());
2162:       assertFalse(node0.isSetterDef());
2163:       assertFalse(node0.isWhile());
2164:       assertFalse(node0.isContinue());
2165:       assertFalse(node0.isReturn());
2166:       assertFalse(node0.isDelProp());
2167:       assertFalse(node0.isCall());
2168:       assertFalse(node0.isGetElem());
2169:       assertFalse(node0.isAssign());
2170:       assertEquals((-1), node0.getSourcePosition());
2171:       assertFalse(node0.isDec());
2172:       assertFalse(node0.isTypeOf());
2173:       assertFalse(node0.isComma());
2174:       assertFalse(node0.hasChildren());
2175:       assertFalse(node0.isGetProp());
2176:       assertFalse(node4.isInc());
2177:       assertFalse(node4.isCase());
2178:       assertFalse(node4.isSwitch());
2179:       assertFalse(node4.isHook());
2180:       assertFalse(node4.isFalse());
2181:       assertFalse(node4.isGetterDef());
2182:       assertFalse(node4.isThis());
2183:       assertFalse(node4.isComma());
2184:       assertFalse(node4.isGetProp());
2185:       assertFalse(node4.isFor());
2186:       assertFalse(node4.isNot());
2187:       assertFalse(node4.isObjectLit());
2188:       assertFalse(node4.isString());
2189:       assertFalse(node4.isRegExp());
2190:       assertEquals(36, node4.getType());
2191:       assertFalse(node4.isScript());
2192:       assertFalse(node4.isDebugger());
2193:       assertFalse(node4.isTry());
2194:       assertFalse(node4.isAnd());
2195:       assertFalse(node4.isInstanceOf());
2196:       assertFalse(node4.isCatch());
2197:       assertFalse(node4.isCast());
2198:       assertFalse(node4.isFunction());
2199:       assertFalse(node4.isWith());
2200:       assertFalse(node4.isNE());
2201:       assertFalse(node4.isSetterDef());
2202:       assertFalse(node4.isThrow());
2203:       assertFalse(node4.isIf());
2204:       assertEquals(127005, node4.getSourcePosition());
2205:       assertEquals(29, node4.getCharno());
2206:       assertFalse(node4.isIn());
2207:       assertFalse(node4.isNew());
2208:       assertFalse(node4.isBlock());
2209:       assertFalse(node4.isDo());
2210:       assertFalse(node4.isWhile());
2211:       assertFalse(node4.isVar());
2212:       assertFalse(node4.isCall());
2213:       assertFalse(node4.isReturn());
2214:       assertFalse(node4.isLabel());
2215:       assertFalse(node4.hasMoreThanOneChild());
2216:       assertFalse(node4.isContinue());
2217:       assertFalse(node4.isNumber());
2218:       assertFalse(node4.isTypeOf());
2219:       assertFalse(node4.isDec());
2220:       assertFalse(node4.hasChildren());
2221:       assertFalse(node4.isStringKey());
2222:       assertFalse(node4.isLabelName());
2223:       assertFalse(node4.isParamList());
2224:       assertFalse(node4.hasOneChild());
2225:       assertFalse(node4.isTrue());
2226:       assertFalse(node4.isExprResult());
2227:       assertFalse(node4.isVoid());
2228:       assertFalse(node4.isDefaultCase());
2229:       assertFalse(node4.isArrayLit());
2230:       assertEquals(0, node4.getChildCount());
2231:       assertEquals(31, node4.getLineno());
2232:       assertFalse(node4.isGetElem());
2233:       assertFalse(node4.isAssign());
2234:       assertFalse(node4.isNull());
2235:       assertFalse(node4.isBreak());
2236:       assertFalse(node4.isName());
2237:       assertFalse(node4.isDelProp());
2238:       assertFalse(node4.isAssignAdd());
2239:       assertFalse(node4.isAdd());
2240:       assertFalse(node4.isEmpty());
2241:       assertFalse(node4.isOr());
2242:       assertFalse(node2.isHook());
2243:       assertFalse(node2.isSwitch());
2244:       assertFalse(node2.isInc());
2245:       assertFalse(node2.isBreak());
2246:       assertFalse(node2.isThrow());
2247:       assertFalse(node2.isThis());
2248:       assertFalse(node2.isComma());
2249:       assertFalse(node2.isFalse());
2250:       assertEquals(127005, node2.getSourcePosition());
2251:       assertFalse(node2.isIn());
2252:       assertFalse(node2.isInstanceOf());
2253:       assertFalse(node2.isDelProp());
2254:       assertFalse(node2.isIf());
2255:       assertFalse(node2.isEmpty());
2256:       assertFalse(node2.isNE());
2257:       assertEquals(29, node2.getCharno());
2258:       assertFalse(node2.isArrayLit());
2259:       assertFalse(node2.hasOneChild());
2260:       assertFalse(node2.isLabelName());
2261:       assertFalse(node2.isTry());
2262:       assertFalse(node2.isWith());
2263:       assertFalse(node2.isDefaultCase());
2264:       assertFalse(node2.isFor());
2265:       assertFalse(node2.isCatch());
2266:       assertFalse(node2.isRegExp());
2267:       assertEquals(0, node2.getChildCount());
2268:       assertEquals(31, node2.getLineno());
2269:       assertFalse(node2.isParamList());
2270:       assertFalse(node2.isCase());
2271:       assertFalse(node2.isStringKey());
2272:       assertFalse(node2.isScript());
2273:       assertFalse(node2.isNumber());
2274:       assertFalse(node2.isGetterDef());
2275:       assertFalse(node2.isBlock());
2276:       assertFalse(node2.isVar());
2277:       assertFalse(node2.isAdd());
2278:       assertFalse(node2.isCall());
2279:       assertFalse(node2.isName());
2280:       assertFalse(node2.isNew());
2281:       assertFalse(node2.isWhile());
2282:       assertFalse(node2.hasMoreThanOneChild());
2283:       assertFalse(node2.isContinue());
2284:       assertFalse(node2.isAssignAdd());
2285:       assertFalse(node2.isLabel());
2286:       assertFalse(node2.isSetterDef());
2287:       assertFalse(node2.isDo());
2288:       assertFalse(node2.isNull());
2289:       assertFalse(node2.isTrue());
2290:       assertFalse(node2.isOr());
2291:       assertFalse(node2.isCast());
2292:       assertFalse(node2.isExprResult());
2293:       assertFalse(node2.isVoid());
2294:       assertFalse(node2.hasChildren());
2295:       assertFalse(node2.isGetElem());
2296:       assertFalse(node2.isFunction());
2297:       assertEquals(36, node2.getType());
2298:       assertFalse(node2.isDec());
2299:       assertFalse(node2.isTypeOf());
2300:       assertFalse(node2.isAssign());
2301:       assertFalse(node2.isReturn());
2302:       assertFalse(node2.isAnd());
2303:       assertFalse(node2.isGetProp());
2304:       assertFalse(node2.isString());
2305:       assertFalse(node2.isDebugger());
2306:       assertFalse(node2.isObjectLit());
2307:       assertFalse(node2.isNot());
2308:       assertFalse(node3.isExprResult());
2309:       assertFalse(node3.isGetElem());
2310:       assertFalse(node3.isScript());
2311:       assertFalse(node3.isCast());
2312:       assertFalse(node3.isWith());
2313:       assertFalse(node3.isTypeOf());
2314:       assertFalse(node3.isDec());
2315:       assertFalse(node3.isAssign());
2316:       assertFalse(node3.isAssignAdd());
2317:       assertFalse(node3.isReturn());
2318:       assertEquals((-1), node3.getLineno());
2319:       assertFalse(node3.isOr());
2320:       assertFalse(node3.hasMoreThanOneChild());
2321:       assertFalse(node3.isBreak());
2322:       assertFalse(node3.isHook());
2323:       assertFalse(node3.isNew());
2324:       assertFalse(node3.isAdd());
2325:       assertFalse(node3.isCase());
2326:       assertFalse(node3.isDo());
2327:       assertFalse(node3.isThis());
2328:       assertFalse(node3.isVar());
2329:       assertFalse(node3.isBlock());
2330:       assertFalse(node3.isLabel());
2331:       assertFalse(node3.isGetterDef());
2332:       assertFalse(node3.isNumber());
2333:       assertFalse(node3.isLabelName());
2334:       assertFalse(node3.isParamList());
2335:       assertEquals((-1), node3.getCharno());
2336:       assertFalse(node3.isSwitch());
2337:       assertFalse(node3.isStringKey());
2338:       assertFalse(node3.isArrayLit());
2339:       assertFalse(node3.isTry());
2340:       assertFalse(node3.isFunction());
2341:       assertFalse(node3.isEmpty());
2342:       assertFalse(node3.isDefaultCase());
2343:       assertTrue(node3.hasOneChild());
2344:       assertFalse(node3.isRegExp());
2345:       assertFalse(node3.isFor());
2346:       assertEquals(1, node3.getChildCount());
2347:       assertFalse(node3.isIn());
2348:       assertFalse(node3.isSetterDef());
2349:       assertFalse(node3.isCatch());
2350:       assertTrue(node3.hasChildren());
2351:       assertFalse(node3.isDelProp());
2352:       assertFalse(node3.isIf());
2353:       assertTrue(node3.isInstanceOf());
2354:       assertFalse(node3.isName());
2355:       assertEquals(52, node3.getType());
2356:       assertFalse(node3.isVoid());
2357:       assertFalse(node3.isTrue());
2358:       assertFalse(node3.isNull());
2359:       assertFalse(node3.isNE());
2360:       assertFalse(node3.isCall());
2361:       assertFalse(node3.isFalse());
2362:       assertFalse(node3.isInc());
2363:       assertFalse(node3.isWhile());
2364:       assertFalse(node3.isComma());
2365:       assertFalse(node3.isThrow());
2366:       assertFalse(node3.isObjectLit());
2367:       assertFalse(node3.isContinue());
2368:       assertFalse(node3.isGetProp());
2369:       assertFalse(node3.isString());
2370:       assertEquals((-1), node3.getSourcePosition());
2371:       assertFalse(node3.isNot());
2372:       assertFalse(node3.isAnd());
2373:       assertFalse(node3.isDebugger());
2374:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2375:       assertEquals(57, Node.LAST_PROP);
2376:       assertEquals(30, Node.VAR_ARGS_NAME);
2377:       assertEquals(1, Node.DECR_FLAG);
2378:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2379:       assertEquals(49, Node.DIRECT_EVAL);
2380:       assertEquals(54, Node.SLASH_V);
2381:       assertEquals(12, Node.COLUMN_BITS);
2382:       assertEquals(40, Node.ORIGINALNAME_PROP);
2383:       assertEquals(56, Node.CHANGE_TIME);
2384:       assertEquals(47, Node.IS_DISPATCHER);
2385:       assertEquals(2, Node.POST_FLAG);
2386:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2387:       assertEquals(39, Node.EMPTY_BLOCK);
2388:       assertEquals(37, Node.OPT_ARG_NAME);
2389:       assertEquals(48, Node.DIRECTIVES);
2390:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2391:       assertEquals(57, Node.REFLECTED_OBJECT);
2392:       assertEquals(29, Node.JSDOC_INFO_PROP);
2393:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2394:       assertEquals(53, Node.INPUT_ID);
2395:       assertEquals(55, Node.INFERRED_FUNCTION);
2396:       assertEquals(52, Node.LENGTH);
2397:       assertEquals(8, Node.FLAG_NO_THROWS);
2398:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2399:       assertEquals(43, Node.IS_CONSTANT_NAME);
2400:       assertEquals(36, Node.QUOTED_PROP);
2401:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2402:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2403:       assertEquals(4095, Node.COLUMN_MASK);
2404:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2405:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2406:       assertEquals(32, Node.INCRDECR_PROP);
2407:       assertEquals(46, Node.IS_NAMESPACE);
2408:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2409:       assertEquals(50, Node.FREE_CALL);
2410:       assertEquals(53, Node.INPUT_ID);
2411:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2412:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2413:       assertEquals(4095, Node.COLUMN_MASK);
2414:       assertEquals(2, Node.POST_FLAG);
2415:       assertEquals(47, Node.IS_DISPATCHER);
2416:       assertEquals(32, Node.INCRDECR_PROP);
2417:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2418:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2419:       assertEquals(50, Node.FREE_CALL);
2420:       assertEquals(43, Node.IS_CONSTANT_NAME);
2421:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2422:       assertEquals(46, Node.IS_NAMESPACE);
2423:       assertEquals(54, Node.SLASH_V);
2424:       assertEquals(52, Node.LENGTH);
2425:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2426:       assertEquals(40, Node.ORIGINALNAME_PROP);
2427:       assertEquals(30, Node.VAR_ARGS_NAME);
2428:       assertEquals(1, Node.DECR_FLAG);
2429:       assertEquals(57, Node.LAST_PROP);
2430:       assertEquals(12, Node.COLUMN_BITS);
2431:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2432:       assertEquals(48, Node.DIRECTIVES);
2433:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2434:       assertEquals(8, Node.FLAG_NO_THROWS);
2435:       assertEquals(55, Node.INFERRED_FUNCTION);
2436:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2437:       assertEquals(37, Node.OPT_ARG_NAME);
2438:       assertEquals(39, Node.EMPTY_BLOCK);
2439:       assertEquals(29, Node.JSDOC_INFO_PROP);
2440:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2441:       assertEquals(49, Node.DIRECT_EVAL);
2442:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2443:       assertEquals(56, Node.CHANGE_TIME);
2444:       assertEquals(36, Node.QUOTED_PROP);
2445:       assertEquals(57, Node.REFLECTED_OBJECT);
2446:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2447:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2448:       assertEquals(29, Node.JSDOC_INFO_PROP);
2449:       assertEquals(53, Node.INPUT_ID);
2450:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2451:       assertEquals(2, Node.POST_FLAG);
2452:       assertEquals(47, Node.IS_DISPATCHER);
2453:       assertEquals(12, Node.COLUMN_BITS);
2454:       assertEquals(55, Node.INFERRED_FUNCTION);
2455:       assertEquals(4095, Node.COLUMN_MASK);
2456:       assertEquals(49, Node.DIRECT_EVAL);
2457:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2458:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2459:       assertEquals(8, Node.FLAG_NO_THROWS);
2460:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2461:       assertEquals(37, Node.OPT_ARG_NAME);
2462:       assertEquals(36, Node.QUOTED_PROP);
2463:       assertEquals(48, Node.DIRECTIVES);
2464:       assertEquals(56, Node.CHANGE_TIME);
2465:       assertEquals(57, Node.REFLECTED_OBJECT);
2466:       assertEquals(50, Node.FREE_CALL);
2467:       assertEquals(52, Node.LENGTH);
2468:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2469:       assertEquals(40, Node.ORIGINALNAME_PROP);
2470:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2471:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2472:       assertEquals(39, Node.EMPTY_BLOCK);
2473:       assertEquals(57, Node.LAST_PROP);
2474:       assertEquals(30, Node.VAR_ARGS_NAME);
2475:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2476:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2477:       assertEquals(1, Node.DECR_FLAG);
2478:       assertEquals(32, Node.INCRDECR_PROP);
2479:       assertEquals(43, Node.IS_CONSTANT_NAME);
2480:       assertEquals(46, Node.IS_NAMESPACE);
2481:       assertEquals(54, Node.SLASH_V);
2482:       assertEquals(40, Node.ORIGINALNAME_PROP);
2483:       assertEquals(57, Node.REFLECTED_OBJECT);
2484:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2485:       assertEquals(52, Node.LENGTH);
2486:       assertEquals(50, Node.FREE_CALL);
2487:       assertEquals(8, Node.FLAG_NO_THROWS);
2488:       assertEquals(39, Node.EMPTY_BLOCK);
2489:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2490:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2491:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2492:       assertEquals(57, Node.LAST_PROP);
2493:       assertEquals(1, Node.DECR_FLAG);
2494:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2495:       assertEquals(12, Node.COLUMN_BITS);
2496:       assertEquals(4095, Node.COLUMN_MASK);
2497:       assertEquals(55, Node.INFERRED_FUNCTION);
2498:       assertEquals(36, Node.QUOTED_PROP);
2499:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2500:       assertEquals(37, Node.OPT_ARG_NAME);
2501:       assertEquals(56, Node.CHANGE_TIME);
2502:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2503:       assertEquals(49, Node.DIRECT_EVAL);
2504:       assertEquals(48, Node.DIRECTIVES);
2505:       assertEquals(29, Node.JSDOC_INFO_PROP);
2506:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2507:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2508:       assertEquals(47, Node.IS_DISPATCHER);
2509:       assertEquals(2, Node.POST_FLAG);
2510:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2511:       assertEquals(53, Node.INPUT_ID);
2512:       assertEquals(32, Node.INCRDECR_PROP);
2513:       assertEquals(46, Node.IS_NAMESPACE);
2514:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2515:       assertEquals(30, Node.VAR_ARGS_NAME);
2516:       assertEquals(54, Node.SLASH_V);
2517:       assertEquals(43, Node.IS_CONSTANT_NAME);
2518:       assertNotNull(node4);
2519:   }
2520: }
RegularFileObject[/tmp/EvoSuite_38_1628161931500/com/google/javascript/rhino/Node_38_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:12:11 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_38_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_38_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_38_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.javascript.rhino.jstype.NamedType",
333:       "com.google.javascript.rhino.jstype.TemplatizedType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.javascript.rhino.JSTypeExpression",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.InputId",
348:       "com.google.javascript.rhino.jstype.JSType$TypePair",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.Platform",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
365:       "com.google.common.collect.Sets$ImprovedAbstractSet",
366:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
367:       "com.google.common.collect.Hashing",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet"
369:     );
370:   }
371: }

[MASTER] 11:12:12.066 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("MHu;l");
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNE());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node0);

node0.setSourceFileForTesting("MHu;l");
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNE());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

Node node1 = node0.removeFirstChild();
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNE());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNull(node1);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

JSType[] jSTypeArray0 = new JSType[1];
TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(templateType0.isTemplateType());
assertFalse(templateType0.isBooleanValueType());
assertFalse(templateType0.hasCachedValues());
assertFalse(templateType0.isFunctionPrototypeType());
assertFalse(templateType0.isNumberValueType());
assertFalse(templateType0.isStringValueType());
assertEquals("Object#Element", templateType0.getReferenceName());
assertTrue(templateType0.isObject());
assertTrue(templateType0.hasAnyTemplateTypesInternal());
assertFalse(templateType0.isVoidType());
assertFalse(templateType0.isResolved());
assertFalse(templateType0.isNullType());
assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertNotNull(templateType0);

jSTypeArray0[0] = (JSType) templateType0;
Node node2 = new Node(36, 31, 29);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertEquals(127005, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertEquals(29, node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertEquals(31, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isFunction());
assertEquals(36, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(node2);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNE());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertEquals(127005, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertEquals(29, node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertEquals(31, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isFunction());
assertEquals(36, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(node_NodeMismatch0);

boolean boolean0 = node2.isNull();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertEquals(127005, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertEquals(29, node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertEquals(31, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isFunction());
assertEquals(36, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean0);

int int0 = Node.POST_FLAG;
assertEquals(2, int0);

Node node3 = new Node(52, node2, node0);
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNE());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertEquals(127005, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertEquals(29, node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertEquals(31, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isFunction());
assertEquals(36, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node3.hasOneChild());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isScript());
assertFalse(node3.isCast());
assertFalse(node3.isWith());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isBreak());
assertFalse(node3.isHook());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isCase());
assertFalse(node3.isDo());
assertFalse(node3.isThis());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isLabel());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isLabelName());
assertFalse(node3.isParamList());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isFunction());
assertFalse(node3.isEmpty());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isFor());
assertFalse(node3.isIn());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCatch());
assertTrue(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertTrue(node3.isInstanceOf());
assertFalse(node3.isName());
assertEquals(52, node3.getType());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isNE());
assertFalse(node3.isCall());
assertFalse(node3.isFalse());
assertFalse(node3.isInc());
assertFalse(node3.isWhile());
assertFalse(node3.isComma());
assertFalse(node3.isThrow());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isObjectLit());
assertFalse(node3.isContinue());
assertFalse(node3.isGetProp());
assertFalse(node3.isString());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node3);

boolean boolean1 = node_NodeMismatch0.equals(templateType0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertNotSame(node2, node3);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNE());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(templateType0.isTemplateType());
assertFalse(templateType0.isBooleanValueType());
assertFalse(templateType0.hasCachedValues());
assertFalse(templateType0.isFunctionPrototypeType());
assertFalse(templateType0.isNumberValueType());
assertFalse(templateType0.isStringValueType());
assertEquals("Object#Element", templateType0.getReferenceName());
assertTrue(templateType0.isObject());
assertTrue(templateType0.hasAnyTemplateTypesInternal());
assertFalse(templateType0.isVoidType());
assertFalse(templateType0.isResolved());
assertFalse(templateType0.isNullType());
assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertEquals(127005, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertEquals(29, node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertEquals(31, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isFunction());
assertEquals(36, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean1);

boolean boolean2 = node0.isFromExterns();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNE());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(boolean2);

Iterable<Node> iterable0 = node2.children();
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node3);
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertEquals(127005, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertEquals(29, node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertEquals(31, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isFunction());
assertEquals(36, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(iterable0.contains(node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(iterable0);

boolean boolean3 = node0.isDefaultCase();
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNE());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(boolean3);

boolean boolean4 = node2.isLocalResultCall();
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node3);
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertEquals(127005, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertEquals(29, node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertEquals(31, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isFunction());
assertEquals(36, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean4);

boolean boolean5 = node3.isBreak();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertNotSame(node2, node3);
assertNotSame(node3, node2);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNE());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertEquals(127005, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertEquals(29, node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertEquals(31, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isFunction());
assertEquals(36, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node3.hasOneChild());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isScript());
assertFalse(node3.isCast());
assertFalse(node3.isWith());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isBreak());
assertFalse(node3.isHook());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isCase());
assertFalse(node3.isDo());
assertFalse(node3.isThis());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isLabel());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isLabelName());
assertFalse(node3.isParamList());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isFunction());
assertFalse(node3.isEmpty());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isFor());
assertFalse(node3.isIn());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCatch());
assertTrue(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertTrue(node3.isInstanceOf());
assertFalse(node3.isName());
assertEquals(52, node3.getType());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isNE());
assertFalse(node3.isCall());
assertFalse(node3.isFalse());
assertFalse(node3.isInc());
assertFalse(node3.isWhile());
assertFalse(node3.isComma());
assertFalse(node3.isThrow());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isObjectLit());
assertFalse(node3.isContinue());
assertFalse(node3.isGetProp());
assertFalse(node3.isString());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(boolean5);

Node node4 = node3.removeFirstChild();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertSame(node4, node2);
assertNotSame(node4, node3);
assertNotSame(node2, node3);
assertSame(node2, node4);
assertNotSame(node3, node2);
assertNotSame(node3, node4);
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNE());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node4.isInc());
assertFalse(node4.isCase());
assertFalse(node4.isSwitch());
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isGetterDef());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.isGetProp());
assertFalse(node4.isFor());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isString());
assertFalse(node4.isRegExp());
assertEquals(36, node4.getType());
assertFalse(node4.isScript());
assertFalse(node4.isDebugger());
assertFalse(node4.isTry());
assertFalse(node4.isAnd());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCatch());
assertFalse(node4.isCast());
assertFalse(node4.isFunction());
assertFalse(node4.isWith());
assertFalse(node4.isNE());
assertFalse(node4.isSetterDef());
assertFalse(node4.isThrow());
assertFalse(node4.isIf());
assertEquals(127005, node4.getSourcePosition());
assertEquals(29, node4.getCharno());
assertFalse(node4.isIn());
assertFalse(node4.isNew());
assertFalse(node4.isBlock());
assertFalse(node4.isDo());
assertFalse(node4.isWhile());
assertFalse(node4.isVar());
assertFalse(node4.isCall());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isContinue());
assertFalse(node4.isNumber());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isStringKey());
assertFalse(node4.isLabelName());
assertFalse(node4.isParamList());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTrue());
assertFalse(node4.isExprResult());
assertFalse(node4.isVoid());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isArrayLit());
assertEquals(0, node4.getChildCount());
assertEquals(31, node4.getLineno());
assertFalse(node4.isGetElem());
assertFalse(node4.isAssign());
assertFalse(node4.isNull());
assertFalse(node4.isBreak());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isAdd());
assertFalse(node4.isEmpty());
assertFalse(node4.isOr());
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertEquals(127005, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertEquals(29, node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertEquals(31, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isFunction());
assertEquals(36, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isScript());
assertFalse(node3.isCast());
assertFalse(node3.isWith());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isBreak());
assertFalse(node3.isHook());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isCase());
assertFalse(node3.isDo());
assertFalse(node3.isThis());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isLabel());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isLabelName());
assertFalse(node3.isParamList());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isFunction());
assertFalse(node3.isEmpty());
assertFalse(node3.isDefaultCase());
assertTrue(node3.hasOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isFor());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isIn());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCatch());
assertTrue(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertTrue(node3.isInstanceOf());
assertFalse(node3.isName());
assertEquals(52, node3.getType());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isNE());
assertFalse(node3.isCall());
assertFalse(node3.isFalse());
assertFalse(node3.isInc());
assertFalse(node3.isWhile());
assertFalse(node3.isComma());
assertFalse(node3.isThrow());
assertFalse(node3.isObjectLit());
assertFalse(node3.isContinue());
assertFalse(node3.isGetProp());
assertFalse(node3.isString());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node4);


[MASTER] 11:12:13.046 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_48_1628161932682/com/google/javascript/rhino/Node_48_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_48_1628161932682/com/google/javascript/rhino/Node_48_tmp__ESTest_scaffolding.java]]
[MASTER] 11:12:13.046 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:13.046 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:13.047 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2242
[MASTER] 11:12:13.049 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_48_1628161932682/com/google/javascript/rhino/Node_48_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:12:12 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.ErrorReporter;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.BooleanLiteralSet;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import com.google.javascript.rhino.jstype.TemplateType;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_48_tmp__ESTest extends Node_48_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = Node.newNumber((double) (-220), (-220), (-220));
26:       assertFalse(node0.hasMoreThanOneChild());
27:       assertEquals((-1), node0.getLineno());
28:       assertFalse(node0.isOr());
29:       assertFalse(node0.isContinue());
30:       assertEquals((-1), node0.getSourcePosition());
31:       assertFalse(node0.isLabelName());
32:       assertFalse(node0.isVar());
33:       assertFalse(node0.isAdd());
34:       assertFalse(node0.isNew());
35:       assertFalse(node0.isCast());
36:       assertFalse(node0.isSetterDef());
37:       assertFalse(node0.isDo());
38:       assertFalse(node0.isLabel());
39:       assertFalse(node0.isAssignAdd());
40:       assertEquals(0, node0.getChildCount());
41:       assertFalse(node0.isWith());
42:       assertFalse(node0.isCatch());
43:       assertFalse(node0.isInstanceOf());
44:       assertFalse(node0.isParamList());
45:       assertFalse(node0.isStringKey());
46:       assertFalse(node0.isHook());
47:       assertFalse(node0.hasOneChild());
48:       assertFalse(node0.isRegExp());
49:       assertFalse(node0.isScript());
50:       assertFalse(node0.isThis());
51:       assertFalse(node0.isBlock());
52:       assertFalse(node0.isFor());
53:       assertFalse(node0.isTry());
54:       assertEquals(39, node0.getType());
55:       assertFalse(node0.isIn());
56:       assertTrue(node0.isNumber());
57:       assertFalse(node0.isCase());
58:       assertFalse(node0.isString());
59:       assertFalse(node0.isSwitch());
60:       assertFalse(node0.isIf());
61:       assertEquals((-1), node0.getCharno());
62:       assertFalse(node0.isGetterDef());
63:       assertFalse(node0.isDelProp());
64:       assertFalse(node0.isNE());
65:       assertFalse(node0.isArrayLit());
66:       assertFalse(node0.isEmpty());
67:       assertFalse(node0.isFalse());
68:       assertFalse(node0.isDefaultCase());
69:       assertFalse(node0.isInc());
70:       assertFalse(node0.isFunction());
71:       assertFalse(node0.isThrow());
72:       assertFalse(node0.isObjectLit());
73:       assertFalse(node0.isGetProp());
74:       assertFalse(node0.isNull());
75:       assertFalse(node0.isVoid());
76:       assertFalse(node0.isBreak());
77:       assertFalse(node0.isDebugger());
78:       assertFalse(node0.isNot());
79:       assertFalse(node0.isName());
80:       assertFalse(node0.isTrue());
81:       assertFalse(node0.isAnd());
82:       assertFalse(node0.isGetElem());
83:       assertFalse(node0.isCall());
84:       assertFalse(node0.isExprResult());
85:       assertFalse(node0.isTypeOf());
86:       assertFalse(node0.hasChildren());
87:       assertFalse(node0.isComma());
88:       assertFalse(node0.isDec());
89:       assertFalse(node0.isAssign());
90:       assertFalse(node0.isReturn());
91:       assertFalse(node0.isWhile());
92:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
93:       assertEquals(55, Node.INFERRED_FUNCTION);
94:       assertEquals(36, Node.QUOTED_PROP);
95:       assertEquals(4095, Node.COLUMN_MASK);
96:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
97:       assertEquals(43, Node.IS_CONSTANT_NAME);
98:       assertEquals(48, Node.DIRECTIVES);
99:       assertEquals(29, Node.JSDOC_INFO_PROP);
100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
101:       assertEquals(40, Node.ORIGINALNAME_PROP);
102:       assertEquals(56, Node.CHANGE_TIME);
103:       assertEquals(57, Node.REFLECTED_OBJECT);
104:       assertEquals(8, Node.FLAG_NO_THROWS);
105:       assertEquals(47, Node.IS_DISPATCHER);
106:       assertEquals(2, Node.POST_FLAG);
107:       assertEquals(53, Node.INPUT_ID);
108:       assertEquals(52, Node.LENGTH);
109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
110:       assertEquals(15, Node.NO_SIDE_EFFECTS);
111:       assertEquals(39, Node.EMPTY_BLOCK);
112:       assertEquals(57, Node.LAST_PROP);
113:       assertEquals(49, Node.DIRECT_EVAL);
114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
115:       assertEquals(12, Node.COLUMN_BITS);
116:       assertEquals(30, Node.VAR_ARGS_NAME);
117:       assertEquals(46, Node.IS_NAMESPACE);
118:       assertEquals(54, Node.SLASH_V);
119:       assertEquals(37, Node.OPT_ARG_NAME);
120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
121:       assertEquals(50, Node.FREE_CALL);
122:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
123:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
125:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
126:       assertEquals(32, Node.INCRDECR_PROP);
127:       assertEquals(1, Node.DECR_FLAG);
128:       assertNotNull(node0);
129:       
130:       Node node1 = new Node((-1));
131:       assertFalse(node1.equals((Object)node0));
132:       assertFalse(node1.isContinue());
133:       assertFalse(node1.hasMoreThanOneChild());
134:       assertFalse(node1.isAssignAdd());
135:       assertFalse(node1.isLabel());
136:       assertFalse(node1.isOr());
137:       assertFalse(node1.isWhile());
138:       assertFalse(node1.isReturn());
139:       assertEquals((-1), node1.getSourcePosition());
140:       assertFalse(node1.isNumber());
141:       assertFalse(node1.isAdd());
142:       assertFalse(node1.isDo());
143:       assertFalse(node1.isNew());
144:       assertFalse(node1.isVar());
145:       assertFalse(node1.isCast());
146:       assertFalse(node1.isStringKey());
147:       assertFalse(node1.isParamList());
148:       assertFalse(node1.isLabelName());
149:       assertFalse(node1.isCatch());
150:       assertFalse(node1.isInstanceOf());
151:       assertFalse(node1.isThis());
152:       assertFalse(node1.isScript());
153:       assertFalse(node1.isTry());
154:       assertFalse(node1.isSetterDef());
155:       assertFalse(node1.hasOneChild());
156:       assertFalse(node1.isFor());
157:       assertFalse(node1.isBlock());
158:       assertFalse(node1.isHook());
159:       assertFalse(node1.isRegExp());
160:       assertFalse(node1.isNE());
161:       assertFalse(node1.isIf());
162:       assertFalse(node1.isWith());
163:       assertEquals((-1), node1.getLineno());
164:       assertFalse(node1.isIn());
165:       assertFalse(node1.isGetterDef());
166:       assertFalse(node1.isEmpty());
167:       assertFalse(node1.isCase());
168:       assertFalse(node1.isString());
169:       assertFalse(node1.isInc());
170:       assertFalse(node1.isArrayLit());
171:       assertFalse(node1.isFalse());
172:       assertEquals((-1), node1.getCharno());
173:       assertFalse(node1.isThrow());
174:       assertFalse(node1.isDebugger());
175:       assertFalse(node1.isSwitch());
176:       assertFalse(node1.isFunction());
177:       assertEquals((-1), node1.getType());
178:       assertFalse(node1.isAnd());
179:       assertFalse(node1.isObjectLit());
180:       assertEquals(0, node1.getChildCount());
181:       assertFalse(node1.isNot());
182:       assertFalse(node1.isDefaultCase());
183:       assertFalse(node1.isGetProp());
184:       assertFalse(node1.isName());
185:       assertFalse(node1.isAssign());
186:       assertFalse(node1.hasChildren());
187:       assertFalse(node1.isNull());
188:       assertFalse(node1.isTrue());
189:       assertFalse(node1.isComma());
190:       assertFalse(node1.isDec());
191:       assertFalse(node1.isVoid());
192:       assertFalse(node1.isDelProp());
193:       assertFalse(node1.isTypeOf());
194:       assertFalse(node1.isBreak());
195:       assertFalse(node1.isCall());
196:       assertFalse(node1.isExprResult());
197:       assertFalse(node1.isGetElem());
198:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
199:       assertEquals(43, Node.IS_CONSTANT_NAME);
200:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
201:       assertEquals(39, Node.EMPTY_BLOCK);
202:       assertEquals(53, Node.INPUT_ID);
203:       assertEquals(55, Node.INFERRED_FUNCTION);
204:       assertEquals(36, Node.QUOTED_PROP);
205:       assertEquals(8, Node.FLAG_NO_THROWS);
206:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
207:       assertEquals(29, Node.JSDOC_INFO_PROP);
208:       assertEquals(50, Node.FREE_CALL);
209:       assertEquals(40, Node.ORIGINALNAME_PROP);
210:       assertEquals(47, Node.IS_DISPATCHER);
211:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
212:       assertEquals(2, Node.POST_FLAG);
213:       assertEquals(49, Node.DIRECT_EVAL);
214:       assertEquals(30, Node.VAR_ARGS_NAME);
215:       assertEquals(1, Node.DECR_FLAG);
216:       assertEquals(15, Node.NO_SIDE_EFFECTS);
217:       assertEquals(12, Node.COLUMN_BITS);
218:       assertEquals(57, Node.LAST_PROP);
219:       assertEquals(32, Node.INCRDECR_PROP);
220:       assertEquals(46, Node.IS_NAMESPACE);
221:       assertEquals(54, Node.SLASH_V);
222:       assertEquals(57, Node.REFLECTED_OBJECT);
223:       assertEquals(51, Node.STATIC_SOURCE_FILE);
224:       assertEquals(52, Node.LENGTH);
225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
226:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
227:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
228:       assertEquals(56, Node.CHANGE_TIME);
229:       assertEquals(48, Node.DIRECTIVES);
230:       assertEquals(37, Node.OPT_ARG_NAME);
231:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
232:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
233:       assertEquals(4095, Node.COLUMN_MASK);
234:       assertNotNull(node1);
235:       
236:       double double0 = node0.getDouble();
237:       assertFalse(node0.equals((Object)node1));
238:       assertFalse(node0.hasMoreThanOneChild());
239:       assertEquals((-1), node0.getLineno());
240:       assertFalse(node0.isOr());
241:       assertFalse(node0.isContinue());
242:       assertEquals((-1), node0.getSourcePosition());
243:       assertFalse(node0.isLabelName());
244:       assertFalse(node0.isVar());
245:       assertFalse(node0.isAdd());
246:       assertFalse(node0.isNew());
247:       assertFalse(node0.isCast());
248:       assertFalse(node0.isSetterDef());
249:       assertFalse(node0.isDo());
250:       assertFalse(node0.isLabel());
251:       assertFalse(node0.isAssignAdd());
252:       assertEquals(0, node0.getChildCount());
253:       assertFalse(node0.isWith());
254:       assertFalse(node0.isCatch());
255:       assertFalse(node0.isInstanceOf());
256:       assertFalse(node0.isParamList());
257:       assertFalse(node0.isStringKey());
258:       assertFalse(node0.isHook());
259:       assertFalse(node0.hasOneChild());
260:       assertFalse(node0.isRegExp());
261:       assertFalse(node0.isScript());
262:       assertFalse(node0.isThis());
263:       assertFalse(node0.isBlock());
264:       assertFalse(node0.isFor());
265:       assertFalse(node0.isTry());
266:       assertEquals(39, node0.getType());
267:       assertFalse(node0.isIn());
268:       assertTrue(node0.isNumber());
269:       assertFalse(node0.isCase());
270:       assertFalse(node0.isString());
271:       assertFalse(node0.isSwitch());
272:       assertFalse(node0.isIf());
273:       assertEquals((-1), node0.getCharno());
274:       assertFalse(node0.isGetterDef());
275:       assertFalse(node0.isDelProp());
276:       assertFalse(node0.isNE());
277:       assertFalse(node0.isArrayLit());
278:       assertFalse(node0.isEmpty());
279:       assertFalse(node0.isFalse());
280:       assertFalse(node0.isDefaultCase());
281:       assertFalse(node0.isInc());
282:       assertFalse(node0.isFunction());
283:       assertFalse(node0.isThrow());
284:       assertFalse(node0.isObjectLit());
285:       assertFalse(node0.isGetProp());
286:       assertFalse(node0.isNull());
287:       assertFalse(node0.isVoid());
288:       assertFalse(node0.isBreak());
289:       assertFalse(node0.isDebugger());
290:       assertFalse(node0.isNot());
291:       assertFalse(node0.isName());
292:       assertFalse(node0.isTrue());
293:       assertFalse(node0.isAnd());
294:       assertFalse(node0.isGetElem());
295:       assertFalse(node0.isCall());
296:       assertFalse(node0.isExprResult());
297:       assertFalse(node0.isTypeOf());
298:       assertFalse(node0.hasChildren());
299:       assertFalse(node0.isComma());
300:       assertFalse(node0.isDec());
301:       assertFalse(node0.isAssign());
302:       assertFalse(node0.isReturn());
303:       assertFalse(node0.isWhile());
304:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
305:       assertEquals(55, Node.INFERRED_FUNCTION);
306:       assertEquals(36, Node.QUOTED_PROP);
307:       assertEquals(4095, Node.COLUMN_MASK);
308:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
309:       assertEquals(43, Node.IS_CONSTANT_NAME);
310:       assertEquals(48, Node.DIRECTIVES);
311:       assertEquals(29, Node.JSDOC_INFO_PROP);
312:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
313:       assertEquals(40, Node.ORIGINALNAME_PROP);
314:       assertEquals(56, Node.CHANGE_TIME);
315:       assertEquals(57, Node.REFLECTED_OBJECT);
316:       assertEquals(8, Node.FLAG_NO_THROWS);
317:       assertEquals(47, Node.IS_DISPATCHER);
318:       assertEquals(2, Node.POST_FLAG);
319:       assertEquals(53, Node.INPUT_ID);
320:       assertEquals(52, Node.LENGTH);
321:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
322:       assertEquals(15, Node.NO_SIDE_EFFECTS);
323:       assertEquals(39, Node.EMPTY_BLOCK);
324:       assertEquals(57, Node.LAST_PROP);
325:       assertEquals(49, Node.DIRECT_EVAL);
326:       assertEquals(51, Node.STATIC_SOURCE_FILE);
327:       assertEquals(12, Node.COLUMN_BITS);
328:       assertEquals(30, Node.VAR_ARGS_NAME);
329:       assertEquals(46, Node.IS_NAMESPACE);
330:       assertEquals(54, Node.SLASH_V);
331:       assertEquals(37, Node.OPT_ARG_NAME);
332:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
333:       assertEquals(50, Node.FREE_CALL);
334:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
335:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
336:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
337:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
338:       assertEquals(32, Node.INCRDECR_PROP);
339:       assertEquals(1, Node.DECR_FLAG);
340:       assertEquals((-220.0), double0, 0.01);
341:       
342:       String string0 = node1.toStringTree();
343:       assertFalse(node1.equals((Object)node0));
344:       assertFalse(node1.isContinue());
345:       assertFalse(node1.hasMoreThanOneChild());
346:       assertFalse(node1.isAssignAdd());
347:       assertFalse(node1.isLabel());
348:       assertFalse(node1.isOr());
349:       assertFalse(node1.isWhile());
350:       assertFalse(node1.isReturn());
351:       assertEquals((-1), node1.getSourcePosition());
352:       assertFalse(node1.isNumber());
353:       assertFalse(node1.isAdd());
354:       assertFalse(node1.isDo());
355:       assertFalse(node1.isNew());
356:       assertFalse(node1.isVar());
357:       assertFalse(node1.isCast());
358:       assertFalse(node1.isStringKey());
359:       assertFalse(node1.isParamList());
360:       assertFalse(node1.isLabelName());
361:       assertFalse(node1.isCatch());
362:       assertFalse(node1.isInstanceOf());
363:       assertFalse(node1.isThis());
364:       assertFalse(node1.isScript());
365:       assertFalse(node1.isTry());
366:       assertFalse(node1.isSetterDef());
367:       assertFalse(node1.hasOneChild());
368:       assertFalse(node1.isFor());
369:       assertFalse(node1.isBlock());
370:       assertFalse(node1.isHook());
371:       assertFalse(node1.isRegExp());
372:       assertFalse(node1.isNE());
373:       assertFalse(node1.isIf());
374:       assertFalse(node1.isWith());
375:       assertEquals((-1), node1.getLineno());
376:       assertFalse(node1.isIn());
377:       assertFalse(node1.isGetterDef());
378:       assertFalse(node1.isEmpty());
379:       assertFalse(node1.isCase());
380:       assertFalse(node1.isString());
381:       assertFalse(node1.isInc());
382:       assertFalse(node1.isArrayLit());
383:       assertFalse(node1.isFalse());
384:       assertEquals((-1), node1.getCharno());
385:       assertFalse(node1.isThrow());
386:       assertFalse(node1.isDebugger());
387:       assertFalse(node1.isSwitch());
388:       assertFalse(node1.isFunction());
389:       assertEquals((-1), node1.getType());
390:       assertFalse(node1.isAnd());
391:       assertFalse(node1.isObjectLit());
392:       assertEquals(0, node1.getChildCount());
393:       assertFalse(node1.isNot());
394:       assertFalse(node1.isDefaultCase());
395:       assertFalse(node1.isGetProp());
396:       assertFalse(node1.isName());
397:       assertFalse(node1.isAssign());
398:       assertFalse(node1.hasChildren());
399:       assertFalse(node1.isNull());
400:       assertFalse(node1.isTrue());
401:       assertFalse(node1.isComma());
402:       assertFalse(node1.isDec());
403:       assertFalse(node1.isVoid());
404:       assertFalse(node1.isDelProp());
405:       assertFalse(node1.isTypeOf());
406:       assertFalse(node1.isBreak());
407:       assertFalse(node1.isCall());
408:       assertFalse(node1.isExprResult());
409:       assertFalse(node1.isGetElem());
410:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
411:       assertEquals(43, Node.IS_CONSTANT_NAME);
412:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
413:       assertEquals(39, Node.EMPTY_BLOCK);
414:       assertEquals(53, Node.INPUT_ID);
415:       assertEquals(55, Node.INFERRED_FUNCTION);
416:       assertEquals(36, Node.QUOTED_PROP);
417:       assertEquals(8, Node.FLAG_NO_THROWS);
418:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
419:       assertEquals(29, Node.JSDOC_INFO_PROP);
420:       assertEquals(50, Node.FREE_CALL);
421:       assertEquals(40, Node.ORIGINALNAME_PROP);
422:       assertEquals(47, Node.IS_DISPATCHER);
423:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
424:       assertEquals(2, Node.POST_FLAG);
425:       assertEquals(49, Node.DIRECT_EVAL);
426:       assertEquals(30, Node.VAR_ARGS_NAME);
427:       assertEquals(1, Node.DECR_FLAG);
428:       assertEquals(15, Node.NO_SIDE_EFFECTS);
429:       assertEquals(12, Node.COLUMN_BITS);
430:       assertEquals(57, Node.LAST_PROP);
431:       assertEquals(32, Node.INCRDECR_PROP);
432:       assertEquals(46, Node.IS_NAMESPACE);
433:       assertEquals(54, Node.SLASH_V);
434:       assertEquals(57, Node.REFLECTED_OBJECT);
435:       assertEquals(51, Node.STATIC_SOURCE_FILE);
436:       assertEquals(52, Node.LENGTH);
437:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
438:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
439:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
440:       assertEquals(56, Node.CHANGE_TIME);
441:       assertEquals(48, Node.DIRECTIVES);
442:       assertEquals(37, Node.OPT_ARG_NAME);
443:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
444:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
445:       assertEquals(4095, Node.COLUMN_MASK);
446:       assertNotNull(string0);
447:       assertEquals("ERROR\n", string0);
448:       
449:       boolean boolean0 = node1.isQualifiedName();
450:       assertFalse(node1.equals((Object)node0));
451:       assertFalse(node1.isContinue());
452:       assertFalse(node1.hasMoreThanOneChild());
453:       assertFalse(node1.isAssignAdd());
454:       assertFalse(node1.isLabel());
455:       assertFalse(node1.isOr());
456:       assertFalse(node1.isWhile());
457:       assertFalse(node1.isReturn());
458:       assertEquals((-1), node1.getSourcePosition());
459:       assertFalse(node1.isNumber());
460:       assertFalse(node1.isAdd());
461:       assertFalse(node1.isDo());
462:       assertFalse(node1.isNew());
463:       assertFalse(node1.isVar());
464:       assertFalse(node1.isCast());
465:       assertFalse(node1.isStringKey());
466:       assertFalse(node1.isParamList());
467:       assertFalse(node1.isLabelName());
468:       assertFalse(node1.isCatch());
469:       assertFalse(node1.isInstanceOf());
470:       assertFalse(node1.isThis());
471:       assertFalse(node1.isScript());
472:       assertFalse(node1.isTry());
473:       assertFalse(node1.isSetterDef());
474:       assertFalse(node1.hasOneChild());
475:       assertFalse(node1.isFor());
476:       assertFalse(node1.isBlock());
477:       assertFalse(node1.isHook());
478:       assertFalse(node1.isRegExp());
479:       assertFalse(node1.isNE());
480:       assertFalse(node1.isIf());
481:       assertFalse(node1.isWith());
482:       assertEquals((-1), node1.getLineno());
483:       assertFalse(node1.isIn());
484:       assertFalse(node1.isGetterDef());
485:       assertFalse(node1.isEmpty());
486:       assertFalse(node1.isCase());
487:       assertFalse(node1.isString());
488:       assertFalse(node1.isInc());
489:       assertFalse(node1.isArrayLit());
490:       assertFalse(node1.isFalse());
491:       assertEquals((-1), node1.getCharno());
492:       assertFalse(node1.isThrow());
493:       assertFalse(node1.isDebugger());
494:       assertFalse(node1.isSwitch());
495:       assertFalse(node1.isFunction());
496:       assertEquals((-1), node1.getType());
497:       assertFalse(node1.isAnd());
498:       assertFalse(node1.isObjectLit());
499:       assertEquals(0, node1.getChildCount());
500:       assertFalse(node1.isNot());
501:       assertFalse(node1.isDefaultCase());
502:       assertFalse(node1.isGetProp());
503:       assertFalse(node1.isName());
504:       assertFalse(node1.isAssign());
505:       assertFalse(node1.hasChildren());
506:       assertFalse(node1.isNull());
507:       assertFalse(node1.isTrue());
508:       assertFalse(node1.isComma());
509:       assertFalse(node1.isDec());
510:       assertFalse(node1.isVoid());
511:       assertFalse(node1.isDelProp());
512:       assertFalse(node1.isTypeOf());
513:       assertFalse(node1.isBreak());
514:       assertFalse(node1.isCall());
515:       assertFalse(node1.isExprResult());
516:       assertFalse(node1.isGetElem());
517:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
518:       assertEquals(43, Node.IS_CONSTANT_NAME);
519:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
520:       assertEquals(39, Node.EMPTY_BLOCK);
521:       assertEquals(53, Node.INPUT_ID);
522:       assertEquals(55, Node.INFERRED_FUNCTION);
523:       assertEquals(36, Node.QUOTED_PROP);
524:       assertEquals(8, Node.FLAG_NO_THROWS);
525:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
526:       assertEquals(29, Node.JSDOC_INFO_PROP);
527:       assertEquals(50, Node.FREE_CALL);
528:       assertEquals(40, Node.ORIGINALNAME_PROP);
529:       assertEquals(47, Node.IS_DISPATCHER);
530:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
531:       assertEquals(2, Node.POST_FLAG);
532:       assertEquals(49, Node.DIRECT_EVAL);
533:       assertEquals(30, Node.VAR_ARGS_NAME);
534:       assertEquals(1, Node.DECR_FLAG);
535:       assertEquals(15, Node.NO_SIDE_EFFECTS);
536:       assertEquals(12, Node.COLUMN_BITS);
537:       assertEquals(57, Node.LAST_PROP);
538:       assertEquals(32, Node.INCRDECR_PROP);
539:       assertEquals(46, Node.IS_NAMESPACE);
540:       assertEquals(54, Node.SLASH_V);
541:       assertEquals(57, Node.REFLECTED_OBJECT);
542:       assertEquals(51, Node.STATIC_SOURCE_FILE);
543:       assertEquals(52, Node.LENGTH);
544:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
545:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
546:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
547:       assertEquals(56, Node.CHANGE_TIME);
548:       assertEquals(48, Node.DIRECTIVES);
549:       assertEquals(37, Node.OPT_ARG_NAME);
550:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
551:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
552:       assertEquals(4095, Node.COLUMN_MASK);
553:       assertFalse(boolean0);
554:       
555:       Node node2 = new Node(364, 36, 12);
556:       assertFalse(node2.equals((Object)node1));
557:       assertFalse(node2.equals((Object)node0));
558:       assertFalse(node2.isNE());
559:       assertFalse(node2.isIn());
560:       assertFalse(node2.isGetterDef());
561:       assertFalse(node2.isDelProp());
562:       assertFalse(node2.isIf());
563:       assertFalse(node2.isArrayLit());
564:       assertFalse(node2.isVoid());
565:       assertEquals(147468, node2.getSourcePosition());
566:       assertFalse(node2.isFunction());
567:       assertFalse(node2.isTrue());
568:       assertFalse(node2.isInc());
569:       assertFalse(node2.isEmpty());
570:       assertFalse(node2.isThrow());
571:       assertFalse(node2.isDefaultCase());
572:       assertFalse(node2.isComma());
573:       assertFalse(node2.isGetProp());
574:       assertFalse(node2.isNull());
575:       assertFalse(node2.isFalse());
576:       assertFalse(node2.isCall());
577:       assertFalse(node2.isAnd());
578:       assertFalse(node2.isBreak());
579:       assertFalse(node2.isName());
580:       assertFalse(node2.isExprResult());
581:       assertFalse(node2.isDebugger());
582:       assertFalse(node2.isString());
583:       assertFalse(node2.isNot());
584:       assertFalse(node2.isObjectLit());
585:       assertFalse(node2.isWhile());
586:       assertEquals(36, node2.getLineno());
587:       assertFalse(node2.isReturn());
588:       assertFalse(node2.isLabel());
589:       assertFalse(node2.hasChildren());
590:       assertFalse(node2.isNumber());
591:       assertFalse(node2.isTypeOf());
592:       assertFalse(node2.isOr());
593:       assertFalse(node2.isDec());
594:       assertFalse(node2.isAssign());
595:       assertFalse(node2.hasMoreThanOneChild());
596:       assertFalse(node2.isContinue());
597:       assertFalse(node2.isGetElem());
598:       assertFalse(node2.isCast());
599:       assertFalse(node2.isLabelName());
600:       assertFalse(node2.isAdd());
601:       assertFalse(node2.isVar());
602:       assertFalse(node2.isAssignAdd());
603:       assertEquals(364, node2.getType());
604:       assertFalse(node2.isNew());
605:       assertFalse(node2.isDo());
606:       assertFalse(node2.isParamList());
607:       assertFalse(node2.isThis());
608:       assertFalse(node2.isSetterDef());
609:       assertEquals(12, node2.getCharno());
610:       assertEquals(0, node2.getChildCount());
611:       assertFalse(node2.isInstanceOf());
612:       assertFalse(node2.isCatch());
613:       assertFalse(node2.isStringKey());
614:       assertFalse(node2.isSwitch());
615:       assertFalse(node2.isBlock());
616:       assertFalse(node2.isScript());
617:       assertFalse(node2.isWith());
618:       assertFalse(node2.isRegExp());
619:       assertFalse(node2.isFor());
620:       assertFalse(node2.isHook());
621:       assertFalse(node2.hasOneChild());
622:       assertFalse(node2.isCase());
623:       assertFalse(node2.isTry());
624:       assertEquals(48, Node.DIRECTIVES);
625:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
626:       assertEquals(40, Node.ORIGINALNAME_PROP);
627:       assertEquals(4095, Node.COLUMN_MASK);
628:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
629:       assertEquals(52, Node.LENGTH);
630:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
631:       assertEquals(57, Node.REFLECTED_OBJECT);
632:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
633:       assertEquals(15, Node.NO_SIDE_EFFECTS);
634:       assertEquals(57, Node.LAST_PROP);
635:       assertEquals(36, Node.QUOTED_PROP);
636:       assertEquals(8, Node.FLAG_NO_THROWS);
637:       assertEquals(39, Node.EMPTY_BLOCK);
638:       assertEquals(53, Node.INPUT_ID);
639:       assertEquals(55, Node.INFERRED_FUNCTION);
640:       assertEquals(29, Node.JSDOC_INFO_PROP);
641:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
642:       assertEquals(32, Node.INCRDECR_PROP);
643:       assertEquals(51, Node.STATIC_SOURCE_FILE);
644:       assertEquals(56, Node.CHANGE_TIME);
645:       assertEquals(12, Node.COLUMN_BITS);
646:       assertEquals(46, Node.IS_NAMESPACE);
647:       assertEquals(47, Node.IS_DISPATCHER);
648:       assertEquals(2, Node.POST_FLAG);
649:       assertEquals(30, Node.VAR_ARGS_NAME);
650:       assertEquals(49, Node.DIRECT_EVAL);
651:       assertEquals(37, Node.OPT_ARG_NAME);
652:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
653:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
654:       assertEquals(43, Node.IS_CONSTANT_NAME);
655:       assertEquals(54, Node.SLASH_V);
656:       assertEquals(1, Node.DECR_FLAG);
657:       assertEquals(50, Node.FREE_CALL);
658:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
659:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
660:       assertNotNull(node2);
661:       
662:       boolean boolean1 = node2.mayMutateGlobalStateOrThrow();
663:       assertFalse(node2.equals((Object)node1));
664:       assertFalse(node2.equals((Object)node0));
665:       assertFalse(boolean1 == boolean0);
666:       assertNotSame(node2, node1);
667:       assertFalse(node2.isNE());
668:       assertFalse(node2.isIn());
669:       assertFalse(node2.isGetterDef());
670:       assertFalse(node2.isDelProp());
671:       assertFalse(node2.isIf());
672:       assertFalse(node2.isArrayLit());
673:       assertFalse(node2.isVoid());
674:       assertEquals(147468, node2.getSourcePosition());
675:       assertFalse(node2.isFunction());
676:       assertFalse(node2.isTrue());
677:       assertFalse(node2.isInc());
678:       assertFalse(node2.isEmpty());
679:       assertFalse(node2.isThrow());
680:       assertFalse(node2.isDefaultCase());
681:       assertFalse(node2.isComma());
682:       assertFalse(node2.isGetProp());
683:       assertFalse(node2.isNull());
684:       assertFalse(node2.isFalse());
685:       assertFalse(node2.isCall());
686:       assertFalse(node2.isAnd());
687:       assertFalse(node2.isBreak());
688:       assertFalse(node2.isName());
689:       assertFalse(node2.isExprResult());
690:       assertFalse(node2.isDebugger());
691:       assertFalse(node2.isString());
692:       assertFalse(node2.isNot());
693:       assertFalse(node2.isObjectLit());
694:       assertFalse(node2.isWhile());
695:       assertEquals(36, node2.getLineno());
696:       assertFalse(node2.isReturn());
697:       assertFalse(node2.isLabel());
698:       assertFalse(node2.hasChildren());
699:       assertFalse(node2.isNumber());
700:       assertFalse(node2.isTypeOf());
701:       assertFalse(node2.isOr());
702:       assertFalse(node2.isDec());
703:       assertFalse(node2.isAssign());
704:       assertFalse(node2.hasMoreThanOneChild());
705:       assertFalse(node2.isContinue());
706:       assertFalse(node2.isGetElem());
707:       assertFalse(node2.isCast());
708:       assertFalse(node2.isLabelName());
709:       assertFalse(node2.isAdd());
710:       assertFalse(node2.isVar());
711:       assertFalse(node2.isAssignAdd());
712:       assertEquals(364, node2.getType());
713:       assertFalse(node2.isNew());
714:       assertFalse(node2.isDo());
715:       assertFalse(node2.isParamList());
716:       assertFalse(node2.isThis());
717:       assertFalse(node2.isSetterDef());
718:       assertEquals(12, node2.getCharno());
719:       assertEquals(0, node2.getChildCount());
720:       assertFalse(node2.isInstanceOf());
721:       assertFalse(node2.isCatch());
722:       assertFalse(node2.isStringKey());
723:       assertFalse(node2.isSwitch());
724:       assertFalse(node2.isBlock());
725:       assertFalse(node2.isScript());
726:       assertFalse(node2.isWith());
727:       assertFalse(node2.isRegExp());
728:       assertFalse(node2.isFor());
729:       assertFalse(node2.isHook());
730:       assertFalse(node2.hasOneChild());
731:       assertFalse(node2.isCase());
732:       assertFalse(node2.isTry());
733:       assertEquals(48, Node.DIRECTIVES);
734:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
735:       assertEquals(40, Node.ORIGINALNAME_PROP);
736:       assertEquals(4095, Node.COLUMN_MASK);
737:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
738:       assertEquals(52, Node.LENGTH);
739:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
740:       assertEquals(57, Node.REFLECTED_OBJECT);
741:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
742:       assertEquals(15, Node.NO_SIDE_EFFECTS);
743:       assertEquals(57, Node.LAST_PROP);
744:       assertEquals(36, Node.QUOTED_PROP);
745:       assertEquals(8, Node.FLAG_NO_THROWS);
746:       assertEquals(39, Node.EMPTY_BLOCK);
747:       assertEquals(53, Node.INPUT_ID);
748:       assertEquals(55, Node.INFERRED_FUNCTION);
749:       assertEquals(29, Node.JSDOC_INFO_PROP);
750:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
751:       assertEquals(32, Node.INCRDECR_PROP);
752:       assertEquals(51, Node.STATIC_SOURCE_FILE);
753:       assertEquals(56, Node.CHANGE_TIME);
754:       assertEquals(12, Node.COLUMN_BITS);
755:       assertEquals(46, Node.IS_NAMESPACE);
756:       assertEquals(47, Node.IS_DISPATCHER);
757:       assertEquals(2, Node.POST_FLAG);
758:       assertEquals(30, Node.VAR_ARGS_NAME);
759:       assertEquals(49, Node.DIRECT_EVAL);
760:       assertEquals(37, Node.OPT_ARG_NAME);
761:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
762:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
763:       assertEquals(43, Node.IS_CONSTANT_NAME);
764:       assertEquals(54, Node.SLASH_V);
765:       assertEquals(1, Node.DECR_FLAG);
766:       assertEquals(50, Node.FREE_CALL);
767:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
768:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
769:       assertTrue(boolean1);
770:       
771:       boolean boolean2 = node2.isNE();
772:       assertFalse(node2.equals((Object)node1));
773:       assertFalse(node2.equals((Object)node0));
774:       assertFalse(boolean2 == boolean1);
775:       assertTrue(boolean2 == boolean0);
776:       assertNotSame(node2, node1);
777:       assertFalse(node2.isNE());
778:       assertFalse(node2.isIn());
779:       assertFalse(node2.isGetterDef());
780:       assertFalse(node2.isDelProp());
781:       assertFalse(node2.isIf());
782:       assertFalse(node2.isArrayLit());
783:       assertFalse(node2.isVoid());
784:       assertEquals(147468, node2.getSourcePosition());
785:       assertFalse(node2.isFunction());
786:       assertFalse(node2.isTrue());
787:       assertFalse(node2.isInc());
788:       assertFalse(node2.isEmpty());
789:       assertFalse(node2.isThrow());
790:       assertFalse(node2.isDefaultCase());
791:       assertFalse(node2.isComma());
792:       assertFalse(node2.isGetProp());
793:       assertFalse(node2.isNull());
794:       assertFalse(node2.isFalse());
795:       assertFalse(node2.isCall());
796:       assertFalse(node2.isAnd());
797:       assertFalse(node2.isBreak());
798:       assertFalse(node2.isName());
799:       assertFalse(node2.isExprResult());
800:       assertFalse(node2.isDebugger());
801:       assertFalse(node2.isString());
802:       assertFalse(node2.isNot());
803:       assertFalse(node2.isObjectLit());
804:       assertFalse(node2.isWhile());
805:       assertEquals(36, node2.getLineno());
806:       assertFalse(node2.isReturn());
807:       assertFalse(node2.isLabel());
808:       assertFalse(node2.hasChildren());
809:       assertFalse(node2.isNumber());
810:       assertFalse(node2.isTypeOf());
811:       assertFalse(node2.isOr());
812:       assertFalse(node2.isDec());
813:       assertFalse(node2.isAssign());
814:       assertFalse(node2.hasMoreThanOneChild());
815:       assertFalse(node2.isContinue());
816:       assertFalse(node2.isGetElem());
817:       assertFalse(node2.isCast());
818:       assertFalse(node2.isLabelName());
819:       assertFalse(node2.isAdd());
820:       assertFalse(node2.isVar());
821:       assertFalse(node2.isAssignAdd());
822:       assertEquals(364, node2.getType());
823:       assertFalse(node2.isNew());
824:       assertFalse(node2.isDo());
825:       assertFalse(node2.isParamList());
826:       assertFalse(node2.isThis());
827:       assertFalse(node2.isSetterDef());
828:       assertEquals(12, node2.getCharno());
829:       assertEquals(0, node2.getChildCount());
830:       assertFalse(node2.isInstanceOf());
831:       assertFalse(node2.isCatch());
832:       assertFalse(node2.isStringKey());
833:       assertFalse(node2.isSwitch());
834:       assertFalse(node2.isBlock());
835:       assertFalse(node2.isScript());
836:       assertFalse(node2.isWith());
837:       assertFalse(node2.isRegExp());
838:       assertFalse(node2.isFor());
839:       assertFalse(node2.isHook());
840:       assertFalse(node2.hasOneChild());
841:       assertFalse(node2.isCase());
842:       assertFalse(node2.isTry());
843:       assertEquals(48, Node.DIRECTIVES);
844:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
845:       assertEquals(40, Node.ORIGINALNAME_PROP);
846:       assertEquals(4095, Node.COLUMN_MASK);
847:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
848:       assertEquals(52, Node.LENGTH);
849:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
850:       assertEquals(57, Node.REFLECTED_OBJECT);
851:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
852:       assertEquals(15, Node.NO_SIDE_EFFECTS);
853:       assertEquals(57, Node.LAST_PROP);
854:       assertEquals(36, Node.QUOTED_PROP);
855:       assertEquals(8, Node.FLAG_NO_THROWS);
856:       assertEquals(39, Node.EMPTY_BLOCK);
857:       assertEquals(53, Node.INPUT_ID);
858:       assertEquals(55, Node.INFERRED_FUNCTION);
859:       assertEquals(29, Node.JSDOC_INFO_PROP);
860:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
861:       assertEquals(32, Node.INCRDECR_PROP);
862:       assertEquals(51, Node.STATIC_SOURCE_FILE);
863:       assertEquals(56, Node.CHANGE_TIME);
864:       assertEquals(12, Node.COLUMN_BITS);
865:       assertEquals(46, Node.IS_NAMESPACE);
866:       assertEquals(47, Node.IS_DISPATCHER);
867:       assertEquals(2, Node.POST_FLAG);
868:       assertEquals(30, Node.VAR_ARGS_NAME);
869:       assertEquals(49, Node.DIRECT_EVAL);
870:       assertEquals(37, Node.OPT_ARG_NAME);
871:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
872:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
873:       assertEquals(43, Node.IS_CONSTANT_NAME);
874:       assertEquals(54, Node.SLASH_V);
875:       assertEquals(1, Node.DECR_FLAG);
876:       assertEquals(50, Node.FREE_CALL);
877:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
878:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
879:       assertFalse(boolean2);
880:       
881:       boolean boolean3 = node0.mayMutateGlobalStateOrThrow();
882:       assertFalse(node0.equals((Object)node2));
883:       assertFalse(node0.equals((Object)node1));
884:       assertFalse(boolean3 == boolean0);
885:       assertFalse(boolean3 == boolean2);
886:       assertTrue(boolean3 == boolean1);
887:       assertFalse(node0.hasMoreThanOneChild());
888:       assertEquals((-1), node0.getLineno());
889:       assertFalse(node0.isOr());
890:       assertFalse(node0.isContinue());
891:       assertEquals((-1), node0.getSourcePosition());
892:       assertFalse(node0.isLabelName());
893:       assertFalse(node0.isVar());
894:       assertFalse(node0.isAdd());
895:       assertFalse(node0.isNew());
896:       assertFalse(node0.isCast());
897:       assertFalse(node0.isSetterDef());
898:       assertFalse(node0.isDo());
899:       assertFalse(node0.isLabel());
900:       assertFalse(node0.isAssignAdd());
901:       assertEquals(0, node0.getChildCount());
902:       assertFalse(node0.isWith());
903:       assertFalse(node0.isCatch());
904:       assertFalse(node0.isInstanceOf());
905:       assertFalse(node0.isParamList());
906:       assertFalse(node0.isStringKey());
907:       assertFalse(node0.isHook());
908:       assertFalse(node0.hasOneChild());
909:       assertFalse(node0.isRegExp());
910:       assertFalse(node0.isScript());
911:       assertFalse(node0.isThis());
912:       assertFalse(node0.isBlock());
913:       assertFalse(node0.isFor());
914:       assertFalse(node0.isTry());
915:       assertEquals(39, node0.getType());
916:       assertFalse(node0.isIn());
917:       assertTrue(node0.isNumber());
918:       assertFalse(node0.isCase());
919:       assertFalse(node0.isString());
920:       assertFalse(node0.isSwitch());
921:       assertFalse(node0.isIf());
922:       assertEquals((-1), node0.getCharno());
923:       assertFalse(node0.isGetterDef());
924:       assertFalse(node0.isDelProp());
925:       assertFalse(node0.isNE());
926:       assertFalse(node0.isArrayLit());
927:       assertFalse(node0.isEmpty());
928:       assertFalse(node0.isFalse());
929:       assertFalse(node0.isDefaultCase());
930:       assertFalse(node0.isInc());
931:       assertFalse(node0.isFunction());
932:       assertFalse(node0.isThrow());
933:       assertFalse(node0.isObjectLit());
934:       assertFalse(node0.isGetProp());
935:       assertFalse(node0.isNull());
936:       assertFalse(node0.isVoid());
937:       assertFalse(node0.isBreak());
938:       assertFalse(node0.isDebugger());
939:       assertFalse(node0.isNot());
940:       assertFalse(node0.isName());
941:       assertFalse(node0.isTrue());
942:       assertFalse(node0.isAnd());
943:       assertFalse(node0.isGetElem());
944:       assertFalse(node0.isCall());
945:       assertFalse(node0.isExprResult());
946:       assertFalse(node0.isTypeOf());
947:       assertFalse(node0.hasChildren());
948:       assertFalse(node0.isComma());
949:       assertFalse(node0.isDec());
950:       assertFalse(node0.isAssign());
951:       assertFalse(node0.isReturn());
952:       assertFalse(node0.isWhile());
953:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
954:       assertEquals(55, Node.INFERRED_FUNCTION);
955:       assertEquals(36, Node.QUOTED_PROP);
956:       assertEquals(4095, Node.COLUMN_MASK);
957:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
958:       assertEquals(43, Node.IS_CONSTANT_NAME);
959:       assertEquals(48, Node.DIRECTIVES);
960:       assertEquals(29, Node.JSDOC_INFO_PROP);
961:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
962:       assertEquals(40, Node.ORIGINALNAME_PROP);
963:       assertEquals(56, Node.CHANGE_TIME);
964:       assertEquals(57, Node.REFLECTED_OBJECT);
965:       assertEquals(8, Node.FLAG_NO_THROWS);
966:       assertEquals(47, Node.IS_DISPATCHER);
967:       assertEquals(2, Node.POST_FLAG);
968:       assertEquals(53, Node.INPUT_ID);
969:       assertEquals(52, Node.LENGTH);
970:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
971:       assertEquals(15, Node.NO_SIDE_EFFECTS);
972:       assertEquals(39, Node.EMPTY_BLOCK);
973:       assertEquals(57, Node.LAST_PROP);
974:       assertEquals(49, Node.DIRECT_EVAL);
975:       assertEquals(51, Node.STATIC_SOURCE_FILE);
976:       assertEquals(12, Node.COLUMN_BITS);
977:       assertEquals(30, Node.VAR_ARGS_NAME);
978:       assertEquals(46, Node.IS_NAMESPACE);
979:       assertEquals(54, Node.SLASH_V);
980:       assertEquals(37, Node.OPT_ARG_NAME);
981:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
982:       assertEquals(50, Node.FREE_CALL);
983:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
984:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
985:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
986:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
987:       assertEquals(32, Node.INCRDECR_PROP);
988:       assertEquals(1, Node.DECR_FLAG);
989:       assertTrue(boolean3);
990:       
991:       String string1 = node0.getQualifiedName();
992:       assertFalse(node0.equals((Object)node2));
993:       assertFalse(node0.equals((Object)node1));
994:       assertFalse(node0.hasMoreThanOneChild());
995:       assertEquals((-1), node0.getLineno());
996:       assertFalse(node0.isOr());
997:       assertFalse(node0.isContinue());
998:       assertEquals((-1), node0.getSourcePosition());
999:       assertFalse(node0.isLabelName());
1000:       assertFalse(node0.isVar());
1001:       assertFalse(node0.isAdd());
1002:       assertFalse(node0.isNew());
1003:       assertFalse(node0.isCast());
1004:       assertFalse(node0.isSetterDef());
1005:       assertFalse(node0.isDo());
1006:       assertFalse(node0.isLabel());
1007:       assertFalse(node0.isAssignAdd());
1008:       assertEquals(0, node0.getChildCount());
1009:       assertFalse(node0.isWith());
1010:       assertFalse(node0.isCatch());
1011:       assertFalse(node0.isInstanceOf());
1012:       assertFalse(node0.isParamList());
1013:       assertFalse(node0.isStringKey());
1014:       assertFalse(node0.isHook());
1015:       assertFalse(node0.hasOneChild());
1016:       assertFalse(node0.isRegExp());
1017:       assertFalse(node0.isScript());
1018:       assertFalse(node0.isThis());
1019:       assertFalse(node0.isBlock());
1020:       assertFalse(node0.isFor());
1021:       assertFalse(node0.isTry());
1022:       assertEquals(39, node0.getType());
1023:       assertFalse(node0.isIn());
1024:       assertTrue(node0.isNumber());
1025:       assertFalse(node0.isCase());
1026:       assertFalse(node0.isString());
1027:       assertFalse(node0.isSwitch());
1028:       assertFalse(node0.isIf());
1029:       assertEquals((-1), node0.getCharno());
1030:       assertFalse(node0.isGetterDef());
1031:       assertFalse(node0.isDelProp());
1032:       assertFalse(node0.isNE());
1033:       assertFalse(node0.isArrayLit());
1034:       assertFalse(node0.isEmpty());
1035:       assertFalse(node0.isFalse());
1036:       assertFalse(node0.isDefaultCase());
1037:       assertFalse(node0.isInc());
1038:       assertFalse(node0.isFunction());
1039:       assertFalse(node0.isThrow());
1040:       assertFalse(node0.isObjectLit());
1041:       assertFalse(node0.isGetProp());
1042:       assertFalse(node0.isNull());
1043:       assertFalse(node0.isVoid());
1044:       assertFalse(node0.isBreak());
1045:       assertFalse(node0.isDebugger());
1046:       assertFalse(node0.isNot());
1047:       assertFalse(node0.isName());
1048:       assertFalse(node0.isTrue());
1049:       assertFalse(node0.isAnd());
1050:       assertFalse(node0.isGetElem());
1051:       assertFalse(node0.isCall());
1052:       assertFalse(node0.isExprResult());
1053:       assertFalse(node0.isTypeOf());
1054:       assertFalse(node0.hasChildren());
1055:       assertFalse(node0.isComma());
1056:       assertFalse(node0.isDec());
1057:       assertFalse(node0.isAssign());
1058:       assertFalse(node0.isReturn());
1059:       assertFalse(node0.isWhile());
1060:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1061:       assertEquals(55, Node.INFERRED_FUNCTION);
1062:       assertEquals(36, Node.QUOTED_PROP);
1063:       assertEquals(4095, Node.COLUMN_MASK);
1064:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1065:       assertEquals(43, Node.IS_CONSTANT_NAME);
1066:       assertEquals(48, Node.DIRECTIVES);
1067:       assertEquals(29, Node.JSDOC_INFO_PROP);
1068:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1069:       assertEquals(40, Node.ORIGINALNAME_PROP);
1070:       assertEquals(56, Node.CHANGE_TIME);
1071:       assertEquals(57, Node.REFLECTED_OBJECT);
1072:       assertEquals(8, Node.FLAG_NO_THROWS);
1073:       assertEquals(47, Node.IS_DISPATCHER);
1074:       assertEquals(2, Node.POST_FLAG);
1075:       assertEquals(53, Node.INPUT_ID);
1076:       assertEquals(52, Node.LENGTH);
1077:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1078:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1079:       assertEquals(39, Node.EMPTY_BLOCK);
1080:       assertEquals(57, Node.LAST_PROP);
1081:       assertEquals(49, Node.DIRECT_EVAL);
1082:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1083:       assertEquals(12, Node.COLUMN_BITS);
1084:       assertEquals(30, Node.VAR_ARGS_NAME);
1085:       assertEquals(46, Node.IS_NAMESPACE);
1086:       assertEquals(54, Node.SLASH_V);
1087:       assertEquals(37, Node.OPT_ARG_NAME);
1088:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1089:       assertEquals(50, Node.FREE_CALL);
1090:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1091:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1092:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1093:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1094:       assertEquals(32, Node.INCRDECR_PROP);
1095:       assertEquals(1, Node.DECR_FLAG);
1096:       assertNull(string1);
1097:       
1098:       node2.setType(935);
1099:       assertFalse(node2.equals((Object)node1));
1100:       assertFalse(node2.equals((Object)node0));
1101:       assertNotSame(node2, node1);
1102:       assertFalse(node2.isNE());
1103:       assertFalse(node2.isIn());
1104:       assertFalse(node2.isGetterDef());
1105:       assertFalse(node2.isDelProp());
1106:       assertFalse(node2.isIf());
1107:       assertFalse(node2.isArrayLit());
1108:       assertFalse(node2.isVoid());
1109:       assertEquals(147468, node2.getSourcePosition());
1110:       assertFalse(node2.isFunction());
1111:       assertFalse(node2.isTrue());
1112:       assertFalse(node2.isInc());
1113:       assertFalse(node2.isEmpty());
1114:       assertFalse(node2.isThrow());
1115:       assertFalse(node2.isDefaultCase());
1116:       assertFalse(node2.isComma());
1117:       assertFalse(node2.isGetProp());
1118:       assertFalse(node2.isNull());
1119:       assertFalse(node2.isFalse());
1120:       assertFalse(node2.isCall());
1121:       assertFalse(node2.isAnd());
1122:       assertFalse(node2.isBreak());
1123:       assertFalse(node2.isName());
1124:       assertFalse(node2.isExprResult());
1125:       assertFalse(node2.isDebugger());
1126:       assertFalse(node2.isString());
1127:       assertFalse(node2.isNot());
1128:       assertFalse(node2.isObjectLit());
1129:       assertFalse(node2.isWhile());
1130:       assertEquals(36, node2.getLineno());
1131:       assertFalse(node2.isReturn());
1132:       assertFalse(node2.isLabel());
1133:       assertFalse(node2.hasChildren());
1134:       assertFalse(node2.isNumber());
1135:       assertFalse(node2.isTypeOf());
1136:       assertFalse(node2.isOr());
1137:       assertFalse(node2.isDec());
1138:       assertFalse(node2.isAssign());
1139:       assertFalse(node2.hasMoreThanOneChild());
1140:       assertFalse(node2.isContinue());
1141:       assertFalse(node2.isGetElem());
1142:       assertFalse(node2.isCast());
1143:       assertFalse(node2.isLabelName());
1144:       assertFalse(node2.isAdd());
1145:       assertFalse(node2.isVar());
1146:       assertFalse(node2.isAssignAdd());
1147:       assertFalse(node2.isNew());
1148:       assertFalse(node2.isDo());
1149:       assertFalse(node2.isParamList());
1150:       assertFalse(node2.isThis());
1151:       assertFalse(node2.isSetterDef());
1152:       assertEquals(12, node2.getCharno());
1153:       assertEquals(0, node2.getChildCount());
1154:       assertFalse(node2.isInstanceOf());
1155:       assertFalse(node2.isCatch());
1156:       assertFalse(node2.isStringKey());
1157:       assertFalse(node2.isSwitch());
1158:       assertFalse(node2.isBlock());
1159:       assertFalse(node2.isScript());
1160:       assertEquals(935, node2.getType());
1161:       assertFalse(node2.isWith());
1162:       assertFalse(node2.isRegExp());
1163:       assertFalse(node2.isFor());
1164:       assertFalse(node2.isHook());
1165:       assertFalse(node2.hasOneChild());
1166:       assertFalse(node2.isCase());
1167:       assertFalse(node2.isTry());
1168:       assertEquals(48, Node.DIRECTIVES);
1169:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1170:       assertEquals(40, Node.ORIGINALNAME_PROP);
1171:       assertEquals(4095, Node.COLUMN_MASK);
1172:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1173:       assertEquals(52, Node.LENGTH);
1174:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1175:       assertEquals(57, Node.REFLECTED_OBJECT);
1176:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1177:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1178:       assertEquals(57, Node.LAST_PROP);
1179:       assertEquals(36, Node.QUOTED_PROP);
1180:       assertEquals(8, Node.FLAG_NO_THROWS);
1181:       assertEquals(39, Node.EMPTY_BLOCK);
1182:       assertEquals(53, Node.INPUT_ID);
1183:       assertEquals(55, Node.INFERRED_FUNCTION);
1184:       assertEquals(29, Node.JSDOC_INFO_PROP);
1185:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1186:       assertEquals(32, Node.INCRDECR_PROP);
1187:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1188:       assertEquals(56, Node.CHANGE_TIME);
1189:       assertEquals(12, Node.COLUMN_BITS);
1190:       assertEquals(46, Node.IS_NAMESPACE);
1191:       assertEquals(47, Node.IS_DISPATCHER);
1192:       assertEquals(2, Node.POST_FLAG);
1193:       assertEquals(30, Node.VAR_ARGS_NAME);
1194:       assertEquals(49, Node.DIRECT_EVAL);
1195:       assertEquals(37, Node.OPT_ARG_NAME);
1196:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1197:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1198:       assertEquals(43, Node.IS_CONSTANT_NAME);
1199:       assertEquals(54, Node.SLASH_V);
1200:       assertEquals(1, Node.DECR_FLAG);
1201:       assertEquals(50, Node.FREE_CALL);
1202:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1203:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1204:       
1205:       node2.setSourceEncodedPositionForTree(55);
1206:       assertFalse(node2.equals((Object)node1));
1207:       assertFalse(node2.equals((Object)node0));
1208:       assertNotSame(node2, node1);
1209:       assertFalse(node2.isNE());
1210:       assertFalse(node2.isIn());
1211:       assertFalse(node2.isGetterDef());
1212:       assertFalse(node2.isDelProp());
1213:       assertFalse(node2.isIf());
1214:       assertFalse(node2.isArrayLit());
1215:       assertFalse(node2.isVoid());
1216:       assertFalse(node2.isFunction());
1217:       assertFalse(node2.isTrue());
1218:       assertFalse(node2.isInc());
1219:       assertFalse(node2.isEmpty());
1220:       assertFalse(node2.isThrow());
1221:       assertFalse(node2.isDefaultCase());
1222:       assertFalse(node2.isComma());
1223:       assertFalse(node2.isGetProp());
1224:       assertFalse(node2.isNull());
1225:       assertFalse(node2.isFalse());
1226:       assertFalse(node2.isCall());
1227:       assertFalse(node2.isAnd());
1228:       assertEquals(0, node2.getLineno());
1229:       assertFalse(node2.isBreak());
1230:       assertFalse(node2.isName());
1231:       assertFalse(node2.isExprResult());
1232:       assertFalse(node2.isDebugger());
1233:       assertFalse(node2.isString());
1234:       assertFalse(node2.isNot());
1235:       assertFalse(node2.isObjectLit());
1236:       assertEquals(55, node2.getCharno());
1237:       assertFalse(node2.isWhile());
1238:       assertFalse(node2.isReturn());
1239:       assertFalse(node2.isLabel());
1240:       assertFalse(node2.hasChildren());
1241:       assertFalse(node2.isNumber());
1242:       assertFalse(node2.isTypeOf());
1243:       assertFalse(node2.isOr());
1244:       assertFalse(node2.isDec());
1245:       assertFalse(node2.isAssign());
1246:       assertFalse(node2.hasMoreThanOneChild());
1247:       assertFalse(node2.isContinue());
1248:       assertFalse(node2.isGetElem());
1249:       assertFalse(node2.isCast());
1250:       assertFalse(node2.isLabelName());
1251:       assertFalse(node2.isAdd());
1252:       assertFalse(node2.isVar());
1253:       assertFalse(node2.isAssignAdd());
1254:       assertFalse(node2.isNew());
1255:       assertFalse(node2.isDo());
1256:       assertFalse(node2.isParamList());
1257:       assertFalse(node2.isThis());
1258:       assertFalse(node2.isSetterDef());
1259:       assertEquals(0, node2.getChildCount());
1260:       assertFalse(node2.isInstanceOf());
1261:       assertFalse(node2.isCatch());
1262:       assertFalse(node2.isStringKey());
1263:       assertFalse(node2.isSwitch());
1264:       assertFalse(node2.isBlock());
1265:       assertFalse(node2.isScript());
1266:       assertEquals(935, node2.getType());
1267:       assertFalse(node2.isWith());
1268:       assertFalse(node2.isRegExp());
1269:       assertFalse(node2.isFor());
1270:       assertFalse(node2.isHook());
1271:       assertFalse(node2.hasOneChild());
1272:       assertFalse(node2.isCase());
1273:       assertEquals(55, node2.getSourcePosition());
1274:       assertFalse(node2.isTry());
1275:       assertEquals(48, Node.DIRECTIVES);
1276:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1277:       assertEquals(40, Node.ORIGINALNAME_PROP);
1278:       assertEquals(4095, Node.COLUMN_MASK);
1279:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1280:       assertEquals(52, Node.LENGTH);
1281:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1282:       assertEquals(57, Node.REFLECTED_OBJECT);
1283:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1284:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1285:       assertEquals(57, Node.LAST_PROP);
1286:       assertEquals(36, Node.QUOTED_PROP);
1287:       assertEquals(8, Node.FLAG_NO_THROWS);
1288:       assertEquals(39, Node.EMPTY_BLOCK);
1289:       assertEquals(53, Node.INPUT_ID);
1290:       assertEquals(55, Node.INFERRED_FUNCTION);
1291:       assertEquals(29, Node.JSDOC_INFO_PROP);
1292:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1293:       assertEquals(32, Node.INCRDECR_PROP);
1294:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1295:       assertEquals(56, Node.CHANGE_TIME);
1296:       assertEquals(12, Node.COLUMN_BITS);
1297:       assertEquals(46, Node.IS_NAMESPACE);
1298:       assertEquals(47, Node.IS_DISPATCHER);
1299:       assertEquals(2, Node.POST_FLAG);
1300:       assertEquals(30, Node.VAR_ARGS_NAME);
1301:       assertEquals(49, Node.DIRECT_EVAL);
1302:       assertEquals(37, Node.OPT_ARG_NAME);
1303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1304:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1305:       assertEquals(43, Node.IS_CONSTANT_NAME);
1306:       assertEquals(54, Node.SLASH_V);
1307:       assertEquals(1, Node.DECR_FLAG);
1308:       assertEquals(50, Node.FREE_CALL);
1309:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1310:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1311:       
1312:       boolean boolean4 = node1.isSetterDef();
1313:       assertFalse(node1.equals((Object)node2));
1314:       assertFalse(node1.equals((Object)node0));
1315:       assertFalse(boolean4 == boolean1);
1316:       assertFalse(boolean4 == boolean3);
1317:       assertTrue(boolean4 == boolean0);
1318:       assertTrue(boolean4 == boolean2);
1319:       assertNotSame(node1, node2);
1320:       assertFalse(node1.isContinue());
1321:       assertFalse(node1.hasMoreThanOneChild());
1322:       assertFalse(node1.isAssignAdd());
1323:       assertFalse(node1.isLabel());
1324:       assertFalse(node1.isOr());
1325:       assertFalse(node1.isWhile());
1326:       assertFalse(node1.isReturn());
1327:       assertEquals((-1), node1.getSourcePosition());
1328:       assertFalse(node1.isNumber());
1329:       assertFalse(node1.isAdd());
1330:       assertFalse(node1.isDo());
1331:       assertFalse(node1.isNew());
1332:       assertFalse(node1.isVar());
1333:       assertFalse(node1.isCast());
1334:       assertFalse(node1.isStringKey());
1335:       assertFalse(node1.isParamList());
1336:       assertFalse(node1.isLabelName());
1337:       assertFalse(node1.isCatch());
1338:       assertFalse(node1.isInstanceOf());
1339:       assertFalse(node1.isThis());
1340:       assertFalse(node1.isScript());
1341:       assertFalse(node1.isTry());
1342:       assertFalse(node1.isSetterDef());
1343:       assertFalse(node1.hasOneChild());
1344:       assertFalse(node1.isFor());
1345:       assertFalse(node1.isBlock());
1346:       assertFalse(node1.isHook());
1347:       assertFalse(node1.isRegExp());
1348:       assertFalse(node1.isNE());
1349:       assertFalse(node1.isIf());
1350:       assertFalse(node1.isWith());
1351:       assertEquals((-1), node1.getLineno());
1352:       assertFalse(node1.isIn());
1353:       assertFalse(node1.isGetterDef());
1354:       assertFalse(node1.isEmpty());
1355:       assertFalse(node1.isCase());
1356:       assertFalse(node1.isString());
1357:       assertFalse(node1.isInc());
1358:       assertFalse(node1.isArrayLit());
1359:       assertFalse(node1.isFalse());
1360:       assertEquals((-1), node1.getCharno());
1361:       assertFalse(node1.isThrow());
1362:       assertFalse(node1.isDebugger());
1363:       assertFalse(node1.isSwitch());
1364:       assertFalse(node1.isFunction());
1365:       assertEquals((-1), node1.getType());
1366:       assertFalse(node1.isAnd());
1367:       assertFalse(node1.isObjectLit());
1368:       assertEquals(0, node1.getChildCount());
1369:       assertFalse(node1.isNot());
1370:       assertFalse(node1.isDefaultCase());
1371:       assertFalse(node1.isGetProp());
1372:       assertFalse(node1.isName());
1373:       assertFalse(node1.isAssign());
1374:       assertFalse(node1.hasChildren());
1375:       assertFalse(node1.isNull());
1376:       assertFalse(node1.isTrue());
1377:       assertFalse(node1.isComma());
1378:       assertFalse(node1.isDec());
1379:       assertFalse(node1.isVoid());
1380:       assertFalse(node1.isDelProp());
1381:       assertFalse(node1.isTypeOf());
1382:       assertFalse(node1.isBreak());
1383:       assertFalse(node1.isCall());
1384:       assertFalse(node1.isExprResult());
1385:       assertFalse(node1.isGetElem());
1386:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1387:       assertEquals(43, Node.IS_CONSTANT_NAME);
1388:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1389:       assertEquals(39, Node.EMPTY_BLOCK);
1390:       assertEquals(53, Node.INPUT_ID);
1391:       assertEquals(55, Node.INFERRED_FUNCTION);
1392:       assertEquals(36, Node.QUOTED_PROP);
1393:       assertEquals(8, Node.FLAG_NO_THROWS);
1394:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1395:       assertEquals(29, Node.JSDOC_INFO_PROP);
1396:       assertEquals(50, Node.FREE_CALL);
1397:       assertEquals(40, Node.ORIGINALNAME_PROP);
1398:       assertEquals(47, Node.IS_DISPATCHER);
1399:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1400:       assertEquals(2, Node.POST_FLAG);
1401:       assertEquals(49, Node.DIRECT_EVAL);
1402:       assertEquals(30, Node.VAR_ARGS_NAME);
1403:       assertEquals(1, Node.DECR_FLAG);
1404:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1405:       assertEquals(12, Node.COLUMN_BITS);
1406:       assertEquals(57, Node.LAST_PROP);
1407:       assertEquals(32, Node.INCRDECR_PROP);
1408:       assertEquals(46, Node.IS_NAMESPACE);
1409:       assertEquals(54, Node.SLASH_V);
1410:       assertEquals(57, Node.REFLECTED_OBJECT);
1411:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1412:       assertEquals(52, Node.LENGTH);
1413:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1414:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1415:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1416:       assertEquals(56, Node.CHANGE_TIME);
1417:       assertEquals(48, Node.DIRECTIVES);
1418:       assertEquals(37, Node.OPT_ARG_NAME);
1419:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1420:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1421:       assertEquals(4095, Node.COLUMN_MASK);
1422:       assertFalse(boolean4);
1423:       
1424:       Node node3 = Node.newString("^}Wt8", 2268, (-3532));
1425:       assertFalse(node3.equals((Object)node2));
1426:       assertFalse(node3.equals((Object)node0));
1427:       assertFalse(node3.equals((Object)node1));
1428:       assertFalse(node3.isObjectLit());
1429:       assertFalse(node3.isInstanceOf());
1430:       assertFalse(node3.isAnd());
1431:       assertFalse(node3.isWith());
1432:       assertFalse(node3.isNot());
1433:       assertFalse(node3.isComma());
1434:       assertFalse(node3.isExprResult());
1435:       assertFalse(node3.isBreak());
1436:       assertFalse(node3.isAssign());
1437:       assertFalse(node3.isHook());
1438:       assertEquals((-1), node3.getSourcePosition());
1439:       assertFalse(node3.isDec());
1440:       assertEquals((-1), node3.getCharno());
1441:       assertFalse(node3.hasChildren());
1442:       assertFalse(node3.isThis());
1443:       assertFalse(node3.isScript());
1444:       assertFalse(node3.isNumber());
1445:       assertFalse(node3.hasOneChild());
1446:       assertFalse(node3.isCase());
1447:       assertFalse(node3.isGetProp());
1448:       assertFalse(node3.isReturn());
1449:       assertFalse(node3.isWhile());
1450:       assertFalse(node3.isOr());
1451:       assertFalse(node3.isLabel());
1452:       assertFalse(node3.isTypeOf());
1453:       assertFalse(node3.isSwitch());
1454:       assertFalse(node3.isLabelName());
1455:       assertFalse(node3.isDelProp());
1456:       assertFalse(node3.isGetElem());
1457:       assertFalse(node3.isVar());
1458:       assertFalse(node3.isName());
1459:       assertFalse(node3.isNull());
1460:       assertFalse(node3.isDefaultCase());
1461:       assertFalse(node3.isAssignAdd());
1462:       assertFalse(node3.isAdd());
1463:       assertFalse(node3.isEmpty());
1464:       assertFalse(node3.isDo());
1465:       assertFalse(node3.isNew());
1466:       assertFalse(node3.isCatch());
1467:       assertEquals(0, node3.getChildCount());
1468:       assertEquals(40, node3.getType());
1469:       assertFalse(node3.isFunction());
1470:       assertFalse(node3.isParamList());
1471:       assertFalse(node3.isTrue());
1472:       assertFalse(node3.isRegExp());
1473:       assertFalse(node3.isVoid());
1474:       assertFalse(node3.isArrayLit());
1475:       assertFalse(node3.isCall());
1476:       assertFalse(node3.isStringKey());
1477:       assertFalse(node3.isFor());
1478:       assertFalse(node3.isGetterDef());
1479:       assertFalse(node3.isBlock());
1480:       assertFalse(node3.isDebugger());
1481:       assertTrue(node3.isString());
1482:       assertFalse(node3.isTry());
1483:       assertFalse(node3.hasMoreThanOneChild());
1484:       assertFalse(node3.isIn());
1485:       assertFalse(node3.isContinue());
1486:       assertFalse(node3.isNE());
1487:       assertFalse(node3.isIf());
1488:       assertEquals((-1), node3.getLineno());
1489:       assertFalse(node3.isCast());
1490:       assertFalse(node3.isThrow());
1491:       assertFalse(node3.isFalse());
1492:       assertFalse(node3.isSetterDef());
1493:       assertFalse(node3.isInc());
1494:       assertEquals(30, Node.VAR_ARGS_NAME);
1495:       assertEquals(49, Node.DIRECT_EVAL);
1496:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1497:       assertEquals(1, Node.DECR_FLAG);
1498:       assertEquals(12, Node.COLUMN_BITS);
1499:       assertEquals(54, Node.SLASH_V);
1500:       assertEquals(57, Node.LAST_PROP);
1501:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1502:       assertEquals(37, Node.OPT_ARG_NAME);
1503:       assertEquals(40, Node.ORIGINALNAME_PROP);
1504:       assertEquals(2, Node.POST_FLAG);
1505:       assertEquals(50, Node.FREE_CALL);
1506:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1507:       assertEquals(32, Node.INCRDECR_PROP);
1508:       assertEquals(46, Node.IS_NAMESPACE);
1509:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1510:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1511:       assertEquals(36, Node.QUOTED_PROP);
1512:       assertEquals(43, Node.IS_CONSTANT_NAME);
1513:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1514:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1515:       assertEquals(4095, Node.COLUMN_MASK);
1516:       assertEquals(29, Node.JSDOC_INFO_PROP);
1517:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1518:       assertEquals(47, Node.IS_DISPATCHER);
1519:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1520:       assertEquals(48, Node.DIRECTIVES);
1521:       assertEquals(56, Node.CHANGE_TIME);
1522:       assertEquals(52, Node.LENGTH);
1523:       assertEquals(53, Node.INPUT_ID);
1524:       assertEquals(57, Node.REFLECTED_OBJECT);
1525:       assertEquals(55, Node.INFERRED_FUNCTION);
1526:       assertEquals(8, Node.FLAG_NO_THROWS);
1527:       assertEquals(39, Node.EMPTY_BLOCK);
1528:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1529:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1530:       assertNotNull(node3);
1531:       
1532:       Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node0);
1533:       assertFalse(node0.equals((Object)node2));
1534:       assertFalse(node0.equals((Object)node1));
1535:       assertFalse(node0.equals((Object)node3));
1536:       assertFalse(node2.equals((Object)node3));
1537:       assertFalse(node2.equals((Object)node1));
1538:       assertFalse(node2.equals((Object)node0));
1539:       assertNotSame(node2, node1);
1540:       assertFalse(node0.hasMoreThanOneChild());
1541:       assertEquals((-1), node0.getLineno());
1542:       assertFalse(node0.isOr());
1543:       assertFalse(node0.isContinue());
1544:       assertEquals((-1), node0.getSourcePosition());
1545:       assertFalse(node0.isLabelName());
1546:       assertFalse(node0.isVar());
1547:       assertFalse(node0.isAdd());
1548:       assertFalse(node0.isNew());
1549:       assertFalse(node0.isCast());
1550:       assertFalse(node0.isSetterDef());
1551:       assertFalse(node0.isDo());
1552:       assertFalse(node0.isLabel());
1553:       assertFalse(node0.isAssignAdd());
1554:       assertEquals(0, node0.getChildCount());
1555:       assertFalse(node0.isWith());
1556:       assertFalse(node0.isCatch());
1557:       assertFalse(node0.isInstanceOf());
1558:       assertFalse(node0.isParamList());
1559:       assertFalse(node0.isStringKey());
1560:       assertFalse(node0.isHook());
1561:       assertFalse(node0.hasOneChild());
1562:       assertFalse(node0.isRegExp());
1563:       assertFalse(node0.isScript());
1564:       assertFalse(node0.isThis());
1565:       assertFalse(node0.isBlock());
1566:       assertFalse(node0.isFor());
1567:       assertFalse(node0.isTry());
1568:       assertEquals(39, node0.getType());
1569:       assertFalse(node0.isIn());
1570:       assertTrue(node0.isNumber());
1571:       assertFalse(node0.isCase());
1572:       assertFalse(node0.isString());
1573:       assertFalse(node0.isSwitch());
1574:       assertFalse(node0.isIf());
1575:       assertEquals((-1), node0.getCharno());
1576:       assertFalse(node0.isGetterDef());
1577:       assertFalse(node0.isDelProp());
1578:       assertFalse(node0.isNE());
1579:       assertFalse(node0.isArrayLit());
1580:       assertFalse(node0.isEmpty());
1581:       assertFalse(node0.isFalse());
1582:       assertFalse(node0.isDefaultCase());
1583:       assertFalse(node0.isInc());
1584:       assertFalse(node0.isFunction());
1585:       assertFalse(node0.isThrow());
1586:       assertFalse(node0.isObjectLit());
1587:       assertFalse(node0.isGetProp());
1588:       assertFalse(node0.isNull());
1589:       assertFalse(node0.isVoid());
1590:       assertFalse(node0.isBreak());
1591:       assertFalse(node0.isDebugger());
1592:       assertFalse(node0.isNot());
1593:       assertFalse(node0.isName());
1594:       assertFalse(node0.isTrue());
1595:       assertFalse(node0.isAnd());
1596:       assertFalse(node0.isGetElem());
1597:       assertFalse(node0.isCall());
1598:       assertFalse(node0.isExprResult());
1599:       assertFalse(node0.isTypeOf());
1600:       assertFalse(node0.hasChildren());
1601:       assertFalse(node0.isComma());
1602:       assertFalse(node0.isDec());
1603:       assertFalse(node0.isAssign());
1604:       assertFalse(node0.isReturn());
1605:       assertFalse(node0.isWhile());
1606:       assertFalse(node2.isNE());
1607:       assertFalse(node2.isIn());
1608:       assertFalse(node2.isGetterDef());
1609:       assertFalse(node2.isDelProp());
1610:       assertFalse(node2.isIf());
1611:       assertFalse(node2.isArrayLit());
1612:       assertFalse(node2.isVoid());
1613:       assertFalse(node2.isFunction());
1614:       assertFalse(node2.isTrue());
1615:       assertFalse(node2.isInc());
1616:       assertFalse(node2.isEmpty());
1617:       assertFalse(node2.isThrow());
1618:       assertFalse(node2.isDefaultCase());
1619:       assertFalse(node2.isComma());
1620:       assertFalse(node2.isGetProp());
1621:       assertFalse(node2.isNull());
1622:       assertFalse(node2.isFalse());
1623:       assertFalse(node2.isCall());
1624:       assertFalse(node2.isAnd());
1625:       assertEquals(0, node2.getLineno());
1626:       assertFalse(node2.isBreak());
1627:       assertFalse(node2.isName());
1628:       assertFalse(node2.isExprResult());
1629:       assertFalse(node2.isDebugger());
1630:       assertFalse(node2.isString());
1631:       assertFalse(node2.isNot());
1632:       assertFalse(node2.isObjectLit());
1633:       assertEquals(55, node2.getCharno());
1634:       assertFalse(node2.isWhile());
1635:       assertFalse(node2.isReturn());
1636:       assertFalse(node2.isLabel());
1637:       assertFalse(node2.hasChildren());
1638:       assertFalse(node2.isNumber());
1639:       assertFalse(node2.isTypeOf());
1640:       assertFalse(node2.isOr());
1641:       assertFalse(node2.isDec());
1642:       assertFalse(node2.isAssign());
1643:       assertFalse(node2.hasMoreThanOneChild());
1644:       assertFalse(node2.isContinue());
1645:       assertFalse(node2.isGetElem());
1646:       assertFalse(node2.isCast());
1647:       assertFalse(node2.isLabelName());
1648:       assertFalse(node2.isAdd());
1649:       assertFalse(node2.isVar());
1650:       assertFalse(node2.isAssignAdd());
1651:       assertFalse(node2.isNew());
1652:       assertFalse(node2.isDo());
1653:       assertFalse(node2.isParamList());
1654:       assertFalse(node2.isThis());
1655:       assertFalse(node2.isSetterDef());
1656:       assertEquals(0, node2.getChildCount());
1657:       assertFalse(node2.isInstanceOf());
1658:       assertFalse(node2.isCatch());
1659:       assertFalse(node2.isStringKey());
1660:       assertFalse(node2.isSwitch());
1661:       assertFalse(node2.isBlock());
1662:       assertFalse(node2.isScript());
1663:       assertEquals(935, node2.getType());
1664:       assertFalse(node2.isWith());
1665:       assertFalse(node2.isRegExp());
1666:       assertFalse(node2.isFor());
1667:       assertFalse(node2.isHook());
1668:       assertFalse(node2.hasOneChild());
1669:       assertFalse(node2.isCase());
1670:       assertEquals(55, node2.getSourcePosition());
1671:       assertFalse(node2.isTry());
1672:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1673:       assertEquals(55, Node.INFERRED_FUNCTION);
1674:       assertEquals(36, Node.QUOTED_PROP);
1675:       assertEquals(4095, Node.COLUMN_MASK);
1676:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1677:       assertEquals(43, Node.IS_CONSTANT_NAME);
1678:       assertEquals(48, Node.DIRECTIVES);
1679:       assertEquals(29, Node.JSDOC_INFO_PROP);
1680:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1681:       assertEquals(40, Node.ORIGINALNAME_PROP);
1682:       assertEquals(56, Node.CHANGE_TIME);
1683:       assertEquals(57, Node.REFLECTED_OBJECT);
1684:       assertEquals(8, Node.FLAG_NO_THROWS);
1685:       assertEquals(47, Node.IS_DISPATCHER);
1686:       assertEquals(2, Node.POST_FLAG);
1687:       assertEquals(53, Node.INPUT_ID);
1688:       assertEquals(52, Node.LENGTH);
1689:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1690:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1691:       assertEquals(39, Node.EMPTY_BLOCK);
1692:       assertEquals(57, Node.LAST_PROP);
1693:       assertEquals(49, Node.DIRECT_EVAL);
1694:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1695:       assertEquals(12, Node.COLUMN_BITS);
1696:       assertEquals(30, Node.VAR_ARGS_NAME);
1697:       assertEquals(46, Node.IS_NAMESPACE);
1698:       assertEquals(54, Node.SLASH_V);
1699:       assertEquals(37, Node.OPT_ARG_NAME);
1700:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1701:       assertEquals(50, Node.FREE_CALL);
1702:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1703:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1704:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1705:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1706:       assertEquals(32, Node.INCRDECR_PROP);
1707:       assertEquals(1, Node.DECR_FLAG);
1708:       assertEquals(48, Node.DIRECTIVES);
1709:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1710:       assertEquals(40, Node.ORIGINALNAME_PROP);
1711:       assertEquals(4095, Node.COLUMN_MASK);
1712:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1713:       assertEquals(52, Node.LENGTH);
1714:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1715:       assertEquals(57, Node.REFLECTED_OBJECT);
1716:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1717:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1718:       assertEquals(57, Node.LAST_PROP);
1719:       assertEquals(36, Node.QUOTED_PROP);
1720:       assertEquals(8, Node.FLAG_NO_THROWS);
1721:       assertEquals(39, Node.EMPTY_BLOCK);
1722:       assertEquals(53, Node.INPUT_ID);
1723:       assertEquals(55, Node.INFERRED_FUNCTION);
1724:       assertEquals(29, Node.JSDOC_INFO_PROP);
1725:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1726:       assertEquals(32, Node.INCRDECR_PROP);
1727:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1728:       assertEquals(56, Node.CHANGE_TIME);
1729:       assertEquals(12, Node.COLUMN_BITS);
1730:       assertEquals(46, Node.IS_NAMESPACE);
1731:       assertEquals(47, Node.IS_DISPATCHER);
1732:       assertEquals(2, Node.POST_FLAG);
1733:       assertEquals(30, Node.VAR_ARGS_NAME);
1734:       assertEquals(49, Node.DIRECT_EVAL);
1735:       assertEquals(37, Node.OPT_ARG_NAME);
1736:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1737:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1738:       assertEquals(43, Node.IS_CONSTANT_NAME);
1739:       assertEquals(54, Node.SLASH_V);
1740:       assertEquals(1, Node.DECR_FLAG);
1741:       assertEquals(50, Node.FREE_CALL);
1742:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1743:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1744:       assertNotNull(node_NodeMismatch0);
1745:       
1746:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
1747:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1748:       assertNotNull(jSTypeRegistry0);
1749:       
1750:       TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
1751:       assertFalse(templateType0.hasCachedValues());
1752:       assertFalse(templateType0.isResolved());
1753:       assertFalse(templateType0.isNumberValueType());
1754:       assertEquals("Object#Key", templateType0.getReferenceName());
1755:       assertFalse(templateType0.isStringValueType());
1756:       assertFalse(templateType0.isVoidType());
1757:       assertTrue(templateType0.isTemplateType());
1758:       assertFalse(templateType0.isFunctionPrototypeType());
1759:       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
1760:       assertFalse(templateType0.isNullType());
1761:       assertFalse(templateType0.isBooleanValueType());
1762:       assertTrue(templateType0.isObject());
1763:       assertTrue(templateType0.hasAnyTemplateTypesInternal());
1764:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1765:       assertEquals(1, JSType.ENUMDECL);
1766:       assertEquals(0, JSType.NOT_ENUMDECL);
1767:       assertNotNull(templateType0);
1768:       
1769:       TemplateType templateType1 = templateType0.toMaybeTemplateType();
1770:       assertSame(templateType0, templateType1);
1771:       assertSame(templateType1, templateType0);
1772:       assertFalse(templateType0.hasCachedValues());
1773:       assertFalse(templateType0.isResolved());
1774:       assertFalse(templateType0.isNumberValueType());
1775:       assertEquals("Object#Key", templateType0.getReferenceName());
1776:       assertFalse(templateType0.isStringValueType());
1777:       assertFalse(templateType0.isVoidType());
1778:       assertTrue(templateType0.isTemplateType());
1779:       assertFalse(templateType0.isFunctionPrototypeType());
1780:       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
1781:       assertFalse(templateType0.isNullType());
1782:       assertFalse(templateType0.isBooleanValueType());
1783:       assertTrue(templateType0.isObject());
1784:       assertTrue(templateType0.hasAnyTemplateTypesInternal());
1785:       assertFalse(templateType1.hasCachedValues());
1786:       assertFalse(templateType1.isNumberValueType());
1787:       assertFalse(templateType1.isResolved());
1788:       assertEquals("Object#Key", templateType1.getReferenceName());
1789:       assertFalse(templateType1.isStringValueType());
1790:       assertTrue(templateType1.isTemplateType());
1791:       assertFalse(templateType1.isVoidType());
1792:       assertFalse(templateType1.isFunctionPrototypeType());
1793:       assertFalse(templateType1.isNullType());
1794:       assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
1795:       assertFalse(templateType1.isBooleanValueType());
1796:       assertTrue(templateType1.isObject());
1797:       assertTrue(templateType1.hasAnyTemplateTypesInternal());
1798:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1799:       assertEquals(1, JSType.ENUMDECL);
1800:       assertEquals(0, JSType.NOT_ENUMDECL);
1801:       assertEquals(0, JSType.NOT_ENUMDECL);
1802:       assertEquals(1, JSType.ENUMDECL);
1803:       assertNotNull(templateType1);
1804:       
1805:       boolean boolean5 = node_NodeMismatch0.equals(templateType1);
1806:       assertFalse(node0.equals((Object)node2));
1807:       assertFalse(node0.equals((Object)node1));
1808:       assertFalse(node0.equals((Object)node3));
1809:       assertFalse(boolean5 == boolean3);
1810:       assertTrue(boolean5 == boolean0);
1811:       assertTrue(boolean5 == boolean4);
1812:       assertTrue(boolean5 == boolean2);
1813:       assertFalse(boolean5 == boolean1);
1814:       assertFalse(node2.equals((Object)node3));
1815:       assertFalse(node2.equals((Object)node1));
1816:       assertFalse(node2.equals((Object)node0));
1817:       assertSame(templateType0, templateType1);
1818:       assertSame(templateType1, templateType0);
1819:       assertNotSame(node2, node1);
1820:       assertFalse(templateType0.hasCachedValues());
1821:       assertFalse(templateType0.isResolved());
1822:       assertFalse(templateType0.isNumberValueType());
1823:       assertEquals("Object#Key", templateType0.getReferenceName());
1824:       assertFalse(templateType0.isStringValueType());
1825:       assertFalse(templateType0.isVoidType());
1826:       assertTrue(templateType0.isTemplateType());
1827:       assertFalse(templateType0.isFunctionPrototypeType());
1828:       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
1829:       assertFalse(templateType0.isNullType());
1830:       assertFalse(templateType0.isBooleanValueType());
1831:       assertTrue(templateType0.isObject());
1832:       assertTrue(templateType0.hasAnyTemplateTypesInternal());
1833:       assertFalse(node0.hasMoreThanOneChild());
1834:       assertEquals((-1), node0.getLineno());
1835:       assertFalse(node0.isOr());
1836:       assertFalse(node0.isContinue());
1837:       assertEquals((-1), node0.getSourcePosition());
1838:       assertFalse(node0.isLabelName());
1839:       assertFalse(node0.isVar());
1840:       assertFalse(node0.isAdd());
1841:       assertFalse(node0.isNew());
1842:       assertFalse(node0.isCast());
1843:       assertFalse(node0.isSetterDef());
1844:       assertFalse(node0.isDo());
1845:       assertFalse(node0.isLabel());
1846:       assertFalse(node0.isAssignAdd());
1847:       assertEquals(0, node0.getChildCount());
1848:       assertFalse(node0.isWith());
1849:       assertFalse(node0.isCatch());
1850:       assertFalse(node0.isInstanceOf());
1851:       assertFalse(node0.isParamList());
1852:       assertFalse(node0.isStringKey());
1853:       assertFalse(node0.isHook());
1854:       assertFalse(node0.hasOneChild());
1855:       assertFalse(node0.isRegExp());
1856:       assertFalse(node0.isScript());
1857:       assertFalse(node0.isThis());
1858:       assertFalse(node0.isBlock());
1859:       assertFalse(node0.isFor());
1860:       assertFalse(node0.isTry());
1861:       assertEquals(39, node0.getType());
1862:       assertFalse(node0.isIn());
1863:       assertTrue(node0.isNumber());
1864:       assertFalse(node0.isCase());
1865:       assertFalse(node0.isString());
1866:       assertFalse(node0.isSwitch());
1867:       assertFalse(node0.isIf());
1868:       assertEquals((-1), node0.getCharno());
1869:       assertFalse(node0.isGetterDef());
1870:       assertFalse(node0.isDelProp());
1871:       assertFalse(node0.isNE());
1872:       assertFalse(node0.isArrayLit());
1873:       assertFalse(node0.isEmpty());
1874:       assertFalse(node0.isFalse());
1875:       assertFalse(node0.isDefaultCase());
1876:       assertFalse(node0.isInc());
1877:       assertFalse(node0.isFunction());
1878:       assertFalse(node0.isThrow());
1879:       assertFalse(node0.isObjectLit());
1880:       assertFalse(node0.isGetProp());
1881:       assertFalse(node0.isNull());
1882:       assertFalse(node0.isVoid());
1883:       assertFalse(node0.isBreak());
1884:       assertFalse(node0.isDebugger());
1885:       assertFalse(node0.isNot());
1886:       assertFalse(node0.isName());
1887:       assertFalse(node0.isTrue());
1888:       assertFalse(node0.isAnd());
1889:       assertFalse(node0.isGetElem());
1890:       assertFalse(node0.isCall());
1891:       assertFalse(node0.isExprResult());
1892:       assertFalse(node0.isTypeOf());
1893:       assertFalse(node0.hasChildren());
1894:       assertFalse(node0.isComma());
1895:       assertFalse(node0.isDec());
1896:       assertFalse(node0.isAssign());
1897:       assertFalse(node0.isReturn());
1898:       assertFalse(node0.isWhile());
1899:       assertFalse(templateType1.hasCachedValues());
1900:       assertFalse(templateType1.isNumberValueType());
1901:       assertFalse(templateType1.isResolved());
1902:       assertEquals("Object#Key", templateType1.getReferenceName());
1903:       assertFalse(templateType1.isStringValueType());
1904:       assertTrue(templateType1.isTemplateType());
1905:       assertFalse(templateType1.isVoidType());
1906:       assertFalse(templateType1.isFunctionPrototypeType());
1907:       assertFalse(templateType1.isNullType());
1908:       assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
1909:       assertFalse(templateType1.isBooleanValueType());
1910:       assertTrue(templateType1.isObject());
1911:       assertTrue(templateType1.hasAnyTemplateTypesInternal());
1912:       assertFalse(node2.isNE());
1913:       assertFalse(node2.isIn());
1914:       assertFalse(node2.isGetterDef());
1915:       assertFalse(node2.isDelProp());
1916:       assertFalse(node2.isIf());
1917:       assertFalse(node2.isArrayLit());
1918:       assertFalse(node2.isVoid());
1919:       assertFalse(node2.isFunction());
1920:       assertFalse(node2.isTrue());
1921:       assertFalse(node2.isInc());
1922:       assertFalse(node2.isEmpty());
1923:       assertFalse(node2.isThrow());
1924:       assertFalse(node2.isDefaultCase());
1925:       assertFalse(node2.isComma());
1926:       assertFalse(node2.isGetProp());
1927:       assertFalse(node2.isNull());
1928:       assertFalse(node2.isFalse());
1929:       assertFalse(node2.isCall());
1930:       assertFalse(node2.isAnd());
1931:       assertEquals(0, node2.getLineno());
1932:       assertFalse(node2.isBreak());
1933:       assertFalse(node2.isName());
1934:       assertFalse(node2.isExprResult());
1935:       assertFalse(node2.isDebugger());
1936:       assertFalse(node2.isString());
1937:       assertFalse(node2.isNot());
1938:       assertFalse(node2.isObjectLit());
1939:       assertEquals(55, node2.getCharno());
1940:       assertFalse(node2.isWhile());
1941:       assertFalse(node2.isReturn());
1942:       assertFalse(node2.isLabel());
1943:       assertFalse(node2.hasChildren());
1944:       assertFalse(node2.isNumber());
1945:       assertFalse(node2.isTypeOf());
1946:       assertFalse(node2.isOr());
1947:       assertFalse(node2.isDec());
1948:       assertFalse(node2.isAssign());
1949:       assertFalse(node2.hasMoreThanOneChild());
1950:       assertFalse(node2.isContinue());
1951:       assertFalse(node2.isGetElem());
1952:       assertFalse(node2.isCast());
1953:       assertFalse(node2.isLabelName());
1954:       assertFalse(node2.isAdd());
1955:       assertFalse(node2.isVar());
1956:       assertFalse(node2.isAssignAdd());
1957:       assertFalse(node2.isNew());
1958:       assertFalse(node2.isDo());
1959:       assertFalse(node2.isParamList());
1960:       assertFalse(node2.isThis());
1961:       assertFalse(node2.isSetterDef());
1962:       assertEquals(0, node2.getChildCount());
1963:       assertFalse(node2.isInstanceOf());
1964:       assertFalse(node2.isCatch());
1965:       assertFalse(node2.isStringKey());
1966:       assertFalse(node2.isSwitch());
1967:       assertFalse(node2.isBlock());
1968:       assertFalse(node2.isScript());
1969:       assertEquals(935, node2.getType());
1970:       assertFalse(node2.isWith());
1971:       assertFalse(node2.isRegExp());
1972:       assertFalse(node2.isFor());
1973:       assertFalse(node2.isHook());
1974:       assertFalse(node2.hasOneChild());
1975:       assertFalse(node2.isCase());
1976:       assertEquals(55, node2.getSourcePosition());
1977:       assertFalse(node2.isTry());
1978:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1979:       assertEquals(1, JSType.ENUMDECL);
1980:       assertEquals(0, JSType.NOT_ENUMDECL);
1981:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1982:       assertEquals(55, Node.INFERRED_FUNCTION);
1983:       assertEquals(36, Node.QUOTED_PROP);
1984:       assertEquals(4095, Node.COLUMN_MASK);
1985:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1986:       assertEquals(43, Node.IS_CONSTANT_NAME);
1987:       assertEquals(48, Node.DIRECTIVES);
1988:       assertEquals(29, Node.JSDOC_INFO_PROP);
1989:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1990:       assertEquals(40, Node.ORIGINALNAME_PROP);
1991:       assertEquals(56, Node.CHANGE_TIME);
1992:       assertEquals(57, Node.REFLECTED_OBJECT);
1993:       assertEquals(8, Node.FLAG_NO_THROWS);
1994:       assertEquals(47, Node.IS_DISPATCHER);
1995:       assertEquals(2, Node.POST_FLAG);
1996:       assertEquals(53, Node.INPUT_ID);
1997:       assertEquals(52, Node.LENGTH);
1998:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1999:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2000:       assertEquals(39, Node.EMPTY_BLOCK);
2001:       assertEquals(57, Node.LAST_PROP);
2002:       assertEquals(49, Node.DIRECT_EVAL);
2003:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2004:       assertEquals(12, Node.COLUMN_BITS);
2005:       assertEquals(30, Node.VAR_ARGS_NAME);
2006:       assertEquals(46, Node.IS_NAMESPACE);
2007:       assertEquals(54, Node.SLASH_V);
2008:       assertEquals(37, Node.OPT_ARG_NAME);
2009:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2010:       assertEquals(50, Node.FREE_CALL);
2011:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2012:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2013:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2014:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2015:       assertEquals(32, Node.INCRDECR_PROP);
2016:       assertEquals(1, Node.DECR_FLAG);
2017:       assertEquals(0, JSType.NOT_ENUMDECL);
2018:       assertEquals(1, JSType.ENUMDECL);
2019:       assertEquals(48, Node.DIRECTIVES);
2020:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2021:       assertEquals(40, Node.ORIGINALNAME_PROP);
2022:       assertEquals(4095, Node.COLUMN_MASK);
2023:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2024:       assertEquals(52, Node.LENGTH);
2025:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2026:       assertEquals(57, Node.REFLECTED_OBJECT);
2027:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2028:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2029:       assertEquals(57, Node.LAST_PROP);
2030:       assertEquals(36, Node.QUOTED_PROP);
2031:       assertEquals(8, Node.FLAG_NO_THROWS);
2032:       assertEquals(39, Node.EMPTY_BLOCK);
2033:       assertEquals(53, Node.INPUT_ID);
2034:       assertEquals(55, Node.INFERRED_FUNCTION);
2035:       assertEquals(29, Node.JSDOC_INFO_PROP);
2036:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2037:       assertEquals(32, Node.INCRDECR_PROP);
2038:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2039:       assertEquals(56, Node.CHANGE_TIME);
2040:       assertEquals(12, Node.COLUMN_BITS);
2041:       assertEquals(46, Node.IS_NAMESPACE);
2042:       assertEquals(47, Node.IS_DISPATCHER);
2043:       assertEquals(2, Node.POST_FLAG);
2044:       assertEquals(30, Node.VAR_ARGS_NAME);
2045:       assertEquals(49, Node.DIRECT_EVAL);
2046:       assertEquals(37, Node.OPT_ARG_NAME);
2047:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2048:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2049:       assertEquals(43, Node.IS_CONSTANT_NAME);
2050:       assertEquals(54, Node.SLASH_V);
2051:       assertEquals(1, Node.DECR_FLAG);
2052:       assertEquals(50, Node.FREE_CALL);
2053:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2054:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2055:       assertFalse(boolean5);
2056:       
2057:       boolean boolean6 = node3.isFromExterns();
2058:       assertTrue(boolean6 == boolean5);
2059:       assertTrue(boolean6 == boolean2);
2060:       assertFalse(boolean6 == boolean3);
2061:       assertTrue(boolean6 == boolean4);
2062:       assertFalse(boolean6 == boolean1);
2063:       assertTrue(boolean6 == boolean0);
2064:       assertFalse(node3.equals((Object)node2));
2065:       assertFalse(node3.equals((Object)node0));
2066:       assertFalse(node3.equals((Object)node1));
2067:       assertFalse(node3.isObjectLit());
2068:       assertFalse(node3.isInstanceOf());
2069:       assertFalse(node3.isAnd());
2070:       assertFalse(node3.isWith());
2071:       assertFalse(node3.isNot());
2072:       assertFalse(node3.isComma());
2073:       assertFalse(node3.isExprResult());
2074:       assertFalse(node3.isBreak());
2075:       assertFalse(node3.isAssign());
2076:       assertFalse(node3.isHook());
2077:       assertEquals((-1), node3.getSourcePosition());
2078:       assertFalse(node3.isDec());
2079:       assertEquals((-1), node3.getCharno());
2080:       assertFalse(node3.hasChildren());
2081:       assertFalse(node3.isThis());
2082:       assertFalse(node3.isScript());
2083:       assertFalse(node3.isNumber());
2084:       assertFalse(node3.hasOneChild());
2085:       assertFalse(node3.isCase());
2086:       assertFalse(node3.isGetProp());
2087:       assertFalse(node3.isReturn());
2088:       assertFalse(node3.isWhile());
2089:       assertFalse(node3.isOr());
2090:       assertFalse(node3.isLabel());
2091:       assertFalse(node3.isTypeOf());
2092:       assertFalse(node3.isSwitch());
2093:       assertFalse(node3.isLabelName());
2094:       assertFalse(node3.isDelProp());
2095:       assertFalse(node3.isGetElem());
2096:       assertFalse(node3.isVar());
2097:       assertFalse(node3.isName());
2098:       assertFalse(node3.isNull());
2099:       assertFalse(node3.isDefaultCase());
2100:       assertFalse(node3.isAssignAdd());
2101:       assertFalse(node3.isAdd());
2102:       assertFalse(node3.isEmpty());
2103:       assertFalse(node3.isDo());
2104:       assertFalse(node3.isNew());
2105:       assertFalse(node3.isCatch());
2106:       assertEquals(0, node3.getChildCount());
2107:       assertEquals(40, node3.getType());
2108:       assertFalse(node3.isFunction());
2109:       assertFalse(node3.isParamList());
2110:       assertFalse(node3.isTrue());
2111:       assertFalse(node3.isRegExp());
2112:       assertFalse(node3.isVoid());
2113:       assertFalse(node3.isArrayLit());
2114:       assertFalse(node3.isCall());
2115:       assertFalse(node3.isStringKey());
2116:       assertFalse(node3.isFor());
2117:       assertFalse(node3.isGetterDef());
2118:       assertFalse(node3.isBlock());
2119:       assertFalse(node3.isDebugger());
2120:       assertTrue(node3.isString());
2121:       assertFalse(node3.isTry());
2122:       assertFalse(node3.hasMoreThanOneChild());
2123:       assertFalse(node3.isIn());
2124:       assertFalse(node3.isContinue());
2125:       assertFalse(node3.isNE());
2126:       assertFalse(node3.isIf());
2127:       assertEquals((-1), node3.getLineno());
2128:       assertFalse(node3.isCast());
2129:       assertFalse(node3.isThrow());
2130:       assertFalse(node3.isFalse());
2131:       assertFalse(node3.isSetterDef());
2132:       assertFalse(node3.isInc());
2133:       assertEquals(30, Node.VAR_ARGS_NAME);
2134:       assertEquals(49, Node.DIRECT_EVAL);
2135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2136:       assertEquals(1, Node.DECR_FLAG);
2137:       assertEquals(12, Node.COLUMN_BITS);
2138:       assertEquals(54, Node.SLASH_V);
2139:       assertEquals(57, Node.LAST_PROP);
2140:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2141:       assertEquals(37, Node.OPT_ARG_NAME);
2142:       assertEquals(40, Node.ORIGINALNAME_PROP);
2143:       assertEquals(2, Node.POST_FLAG);
2144:       assertEquals(50, Node.FREE_CALL);
2145:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2146:       assertEquals(32, Node.INCRDECR_PROP);
2147:       assertEquals(46, Node.IS_NAMESPACE);
2148:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2149:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2150:       assertEquals(36, Node.QUOTED_PROP);
2151:       assertEquals(43, Node.IS_CONSTANT_NAME);
2152:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2153:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2154:       assertEquals(4095, Node.COLUMN_MASK);
2155:       assertEquals(29, Node.JSDOC_INFO_PROP);
2156:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2157:       assertEquals(47, Node.IS_DISPATCHER);
2158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2159:       assertEquals(48, Node.DIRECTIVES);
2160:       assertEquals(56, Node.CHANGE_TIME);
2161:       assertEquals(52, Node.LENGTH);
2162:       assertEquals(53, Node.INPUT_ID);
2163:       assertEquals(57, Node.REFLECTED_OBJECT);
2164:       assertEquals(55, Node.INFERRED_FUNCTION);
2165:       assertEquals(8, Node.FLAG_NO_THROWS);
2166:       assertEquals(39, Node.EMPTY_BLOCK);
2167:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2168:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2169:       assertFalse(boolean6);
2170:       
2171:       Iterable<Node> iterable0 = node1.children();
2172:       assertFalse(node1.equals((Object)node2));
2173:       assertFalse(node1.equals((Object)node0));
2174:       assertFalse(node1.equals((Object)node3));
2175:       assertNotSame(node1, node2);
2176:       assertFalse(node1.isContinue());
2177:       assertFalse(node1.hasMoreThanOneChild());
2178:       assertFalse(node1.isAssignAdd());
2179:       assertFalse(node1.isLabel());
2180:       assertFalse(node1.isOr());
2181:       assertFalse(node1.isWhile());
2182:       assertFalse(node1.isReturn());
2183:       assertEquals((-1), node1.getSourcePosition());
2184:       assertFalse(node1.isNumber());
2185:       assertFalse(node1.isAdd());
2186:       assertFalse(node1.isDo());
2187:       assertFalse(node1.isNew());
2188:       assertFalse(node1.isVar());
2189:       assertFalse(node1.isCast());
2190:       assertFalse(node1.isStringKey());
2191:       assertFalse(node1.isParamList());
2192:       assertFalse(node1.isLabelName());
2193:       assertFalse(node1.isCatch());
2194:       assertFalse(node1.isInstanceOf());
2195:       assertFalse(node1.isThis());
2196:       assertFalse(node1.isScript());
2197:       assertFalse(node1.isTry());
2198:       assertFalse(node1.isSetterDef());
2199:       assertFalse(node1.hasOneChild());
2200:       assertFalse(node1.isFor());
2201:       assertFalse(node1.isBlock());
2202:       assertFalse(node1.isHook());
2203:       assertFalse(node1.isRegExp());
2204:       assertFalse(node1.isNE());
2205:       assertFalse(node1.isIf());
2206:       assertFalse(node1.isWith());
2207:       assertEquals((-1), node1.getLineno());
2208:       assertFalse(node1.isIn());
2209:       assertFalse(node1.isGetterDef());
2210:       assertFalse(node1.isEmpty());
2211:       assertFalse(node1.isCase());
2212:       assertFalse(node1.isString());
2213:       assertFalse(node1.isInc());
2214:       assertFalse(node1.isArrayLit());
2215:       assertFalse(node1.isFalse());
2216:       assertEquals((-1), node1.getCharno());
2217:       assertFalse(node1.isThrow());
2218:       assertFalse(node1.isDebugger());
2219:       assertFalse(node1.isSwitch());
2220:       assertFalse(node1.isFunction());
2221:       assertEquals((-1), node1.getType());
2222:       assertFalse(node1.isAnd());
2223:       assertFalse(node1.isObjectLit());
2224:       assertEquals(0, node1.getChildCount());
2225:       assertFalse(node1.isNot());
2226:       assertFalse(node1.isDefaultCase());
2227:       assertFalse(node1.isGetProp());
2228:       assertFalse(node1.isName());
2229:       assertFalse(node1.isAssign());
2230:       assertFalse(node1.hasChildren());
2231:       assertFalse(node1.isNull());
2232:       assertFalse(node1.isTrue());
2233:       assertFalse(node1.isComma());
2234:       assertFalse(node1.isDec());
2235:       assertFalse(node1.isVoid());
2236:       assertFalse(node1.isDelProp());
2237:       assertFalse(node1.isTypeOf());
2238:       assertFalse(node1.isBreak());
2239:       assertFalse(node1.isCall());
2240:       assertFalse(node1.isExprResult());
2241:       assertFalse(node1.isGetElem());
2242:       assertFalse(iterable0.contains(node1));
2243:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2244:       assertEquals(43, Node.IS_CONSTANT_NAME);
2245:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2246:       assertEquals(39, Node.EMPTY_BLOCK);
2247:       assertEquals(53, Node.INPUT_ID);
2248:       assertEquals(55, Node.INFERRED_FUNCTION);
2249:       assertEquals(36, Node.QUOTED_PROP);
2250:       assertEquals(8, Node.FLAG_NO_THROWS);
2251:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2252:       assertEquals(29, Node.JSDOC_INFO_PROP);
2253:       assertEquals(50, Node.FREE_CALL);
2254:       assertEquals(40, Node.ORIGINALNAME_PROP);
2255:       assertEquals(47, Node.IS_DISPATCHER);
2256:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2257:       assertEquals(2, Node.POST_FLAG);
2258:       assertEquals(49, Node.DIRECT_EVAL);
2259:       assertEquals(30, Node.VAR_ARGS_NAME);
2260:       assertEquals(1, Node.DECR_FLAG);
2261:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2262:       assertEquals(12, Node.COLUMN_BITS);
2263:       assertEquals(57, Node.LAST_PROP);
2264:       assertEquals(32, Node.INCRDECR_PROP);
2265:       assertEquals(46, Node.IS_NAMESPACE);
2266:       assertEquals(54, Node.SLASH_V);
2267:       assertEquals(57, Node.REFLECTED_OBJECT);
2268:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2269:       assertEquals(52, Node.LENGTH);
2270:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2271:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2272:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2273:       assertEquals(56, Node.CHANGE_TIME);
2274:       assertEquals(48, Node.DIRECTIVES);
2275:       assertEquals(37, Node.OPT_ARG_NAME);
2276:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2277:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2278:       assertEquals(4095, Node.COLUMN_MASK);
2279:       assertNotNull(iterable0);
2280:       
2281:       boolean boolean7 = node0.isDefaultCase();
2282:       assertFalse(node0.equals((Object)node2));
2283:       assertFalse(node0.equals((Object)node1));
2284:       assertFalse(node0.equals((Object)node3));
2285:       assertFalse(boolean7 == boolean1);
2286:       assertTrue(boolean7 == boolean0);
2287:       assertFalse(boolean7 == boolean3);
2288:       assertTrue(boolean7 == boolean2);
2289:       assertTrue(boolean7 == boolean4);
2290:       assertTrue(boolean7 == boolean5);
2291:       assertTrue(boolean7 == boolean6);
2292:       assertFalse(node0.hasMoreThanOneChild());
2293:       assertEquals((-1), node0.getLineno());
2294:       assertFalse(node0.isOr());
2295:       assertFalse(node0.isContinue());
2296:       assertEquals((-1), node0.getSourcePosition());
2297:       assertFalse(node0.isLabelName());
2298:       assertFalse(node0.isVar());
2299:       assertFalse(node0.isAdd());
2300:       assertFalse(node0.isNew());
2301:       assertFalse(node0.isCast());
2302:       assertFalse(node0.isSetterDef());
2303:       assertFalse(node0.isDo());
2304:       assertFalse(node0.isLabel());
2305:       assertFalse(node0.isAssignAdd());
2306:       assertEquals(0, node0.getChildCount());
2307:       assertFalse(node0.isWith());
2308:       assertFalse(node0.isCatch());
2309:       assertFalse(node0.isInstanceOf());
2310:       assertFalse(node0.isParamList());
2311:       assertFalse(node0.isStringKey());
2312:       assertFalse(node0.isHook());
2313:       assertFalse(node0.hasOneChild());
2314:       assertFalse(node0.isRegExp());
2315:       assertFalse(node0.isScript());
2316:       assertFalse(node0.isThis());
2317:       assertFalse(node0.isBlock());
2318:       assertFalse(node0.isFor());
2319:       assertFalse(node0.isTry());
2320:       assertEquals(39, node0.getType());
2321:       assertFalse(node0.isIn());
2322:       assertTrue(node0.isNumber());
2323:       assertFalse(node0.isCase());
2324:       assertFalse(node0.isString());
2325:       assertFalse(node0.isSwitch());
2326:       assertFalse(node0.isIf());
2327:       assertEquals((-1), node0.getCharno());
2328:       assertFalse(node0.isGetterDef());
2329:       assertFalse(node0.isDelProp());
2330:       assertFalse(node0.isNE());
2331:       assertFalse(node0.isArrayLit());
2332:       assertFalse(node0.isEmpty());
2333:       assertFalse(node0.isFalse());
2334:       assertFalse(node0.isDefaultCase());
2335:       assertFalse(node0.isInc());
2336:       assertFalse(node0.isFunction());
2337:       assertFalse(node0.isThrow());
2338:       assertFalse(node0.isObjectLit());
2339:       assertFalse(node0.isGetProp());
2340:       assertFalse(node0.isNull());
2341:       assertFalse(node0.isVoid());
2342:       assertFalse(node0.isBreak());
2343:       assertFalse(node0.isDebugger());
2344:       assertFalse(node0.isNot());
2345:       assertFalse(node0.isName());
2346:       assertFalse(node0.isTrue());
2347:       assertFalse(node0.isAnd());
2348:       assertFalse(node0.isGetElem());
2349:       assertFalse(node0.isCall());
2350:       assertFalse(node0.isExprResult());
2351:       assertFalse(node0.isTypeOf());
2352:       assertFalse(node0.hasChildren());
2353:       assertFalse(node0.isComma());
2354:       assertFalse(node0.isDec());
2355:       assertFalse(node0.isAssign());
2356:       assertFalse(node0.isReturn());
2357:       assertFalse(node0.isWhile());
2358:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2359:       assertEquals(55, Node.INFERRED_FUNCTION);
2360:       assertEquals(36, Node.QUOTED_PROP);
2361:       assertEquals(4095, Node.COLUMN_MASK);
2362:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2363:       assertEquals(43, Node.IS_CONSTANT_NAME);
2364:       assertEquals(48, Node.DIRECTIVES);
2365:       assertEquals(29, Node.JSDOC_INFO_PROP);
2366:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2367:       assertEquals(40, Node.ORIGINALNAME_PROP);
2368:       assertEquals(56, Node.CHANGE_TIME);
2369:       assertEquals(57, Node.REFLECTED_OBJECT);
2370:       assertEquals(8, Node.FLAG_NO_THROWS);
2371:       assertEquals(47, Node.IS_DISPATCHER);
2372:       assertEquals(2, Node.POST_FLAG);
2373:       assertEquals(53, Node.INPUT_ID);
2374:       assertEquals(52, Node.LENGTH);
2375:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2376:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2377:       assertEquals(39, Node.EMPTY_BLOCK);
2378:       assertEquals(57, Node.LAST_PROP);
2379:       assertEquals(49, Node.DIRECT_EVAL);
2380:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2381:       assertEquals(12, Node.COLUMN_BITS);
2382:       assertEquals(30, Node.VAR_ARGS_NAME);
2383:       assertEquals(46, Node.IS_NAMESPACE);
2384:       assertEquals(54, Node.SLASH_V);
2385:       assertEquals(37, Node.OPT_ARG_NAME);
2386:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2387:       assertEquals(50, Node.FREE_CALL);
2388:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2389:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2390:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2391:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2392:       assertEquals(32, Node.INCRDECR_PROP);
2393:       assertEquals(1, Node.DECR_FLAG);
2394:       assertFalse(boolean7);
2395:   }
2396: }
RegularFileObject[/tmp/EvoSuite_48_1628161932682/com/google/javascript/rhino/Node_48_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:12:13 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_48_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_48_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_48_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.javascript.rhino.jstype.NamedType",
333:       "com.google.javascript.rhino.jstype.TemplatizedType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.javascript.rhino.JSTypeExpression",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.InputId",
348:       "com.google.javascript.rhino.jstype.JSType$TypePair",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.Platform",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
365:       "com.google.common.collect.Sets$ImprovedAbstractSet",
366:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
367:       "com.google.common.collect.Hashing",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet"
369:     );
370:   }
371: }

[MASTER] 11:12:13.204 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) (-220), (-220), (-220));
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node0);

Node node1 = new Node((-1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node1);

double double0 = node0.getDouble();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals((-220.0), double0, 0.01);

String string0 = node1.toStringTree();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(string0);
assertEquals("ERROR\n", string0);

boolean boolean0 = node1.isQualifiedName();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(boolean0);

Node node2 = new Node(364, 36, 12);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertEquals(147468, node2.getSourcePosition());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertFalse(node2.isFalse());
assertFalse(node2.isCall());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertEquals(36, node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertEquals(364, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(12, node2.getCharno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node2);

boolean boolean1 = node2.mayMutateGlobalStateOrThrow();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertNotSame(node2, node1);
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertEquals(147468, node2.getSourcePosition());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertFalse(node2.isFalse());
assertFalse(node2.isCall());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertEquals(36, node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertEquals(364, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(12, node2.getCharno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertTrue(boolean1);

boolean boolean2 = node2.isNE();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertNotSame(node2, node1);
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertEquals(147468, node2.getSourcePosition());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertFalse(node2.isFalse());
assertFalse(node2.isCall());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertEquals(36, node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertEquals(364, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(12, node2.getCharno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(boolean2);

boolean boolean3 = node0.mayMutateGlobalStateOrThrow();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(boolean3 == boolean0);
assertFalse(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertTrue(boolean3);

String string1 = node0.getQualifiedName();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNull(string1);

node2.setType(935);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node1);
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertEquals(147468, node2.getSourcePosition());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertFalse(node2.isFalse());
assertFalse(node2.isCall());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertEquals(36, node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(12, node2.getCharno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertEquals(935, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

node2.setSourceEncodedPositionForTree(55);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node1);
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertFalse(node2.isFalse());
assertFalse(node2.isCall());
assertFalse(node2.isAnd());
assertEquals(0, node2.getLineno());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(55, node2.getCharno());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertEquals(935, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertEquals(55, node2.getSourcePosition());
assertFalse(node2.isTry());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

boolean boolean4 = node1.isSetterDef();
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean4 == boolean1);
assertFalse(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertNotSame(node1, node2);
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(boolean4);

Node node3 = Node.newString("^}Wt8", 2268, (-3532));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.isObjectLit());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isAnd());
assertFalse(node3.isWith());
assertFalse(node3.isNot());
assertFalse(node3.isComma());
assertFalse(node3.isExprResult());
assertFalse(node3.isBreak());
assertFalse(node3.isAssign());
assertFalse(node3.isHook());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertEquals((-1), node3.getCharno());
assertFalse(node3.hasChildren());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCase());
assertFalse(node3.isGetProp());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isTypeOf());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabelName());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetElem());
assertFalse(node3.isVar());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertEquals(40, node3.getType());
assertFalse(node3.isFunction());
assertFalse(node3.isParamList());
assertFalse(node3.isTrue());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isArrayLit());
assertFalse(node3.isCall());
assertFalse(node3.isStringKey());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isBlock());
assertFalse(node3.isDebugger());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isIn());
assertFalse(node3.isContinue());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertNotNull(node3);

Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node1);
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertFalse(node2.isFalse());
assertFalse(node2.isCall());
assertFalse(node2.isAnd());
assertEquals(0, node2.getLineno());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(55, node2.getCharno());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertEquals(935, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertEquals(55, node2.getSourcePosition());
assertFalse(node2.isTry());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node_NodeMismatch0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
assertFalse(templateType0.hasCachedValues());
assertFalse(templateType0.isResolved());
assertFalse(templateType0.isNumberValueType());
assertEquals("Object#Key", templateType0.getReferenceName());
assertFalse(templateType0.isStringValueType());
assertFalse(templateType0.isVoidType());
assertTrue(templateType0.isTemplateType());
assertFalse(templateType0.isFunctionPrototypeType());
assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
assertFalse(templateType0.isNullType());
assertFalse(templateType0.isBooleanValueType());
assertTrue(templateType0.isObject());
assertTrue(templateType0.hasAnyTemplateTypesInternal());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertNotNull(templateType0);

TemplateType templateType1 = templateType0.toMaybeTemplateType();
assertSame(templateType0, templateType1);
assertSame(templateType1, templateType0);
assertFalse(templateType0.hasCachedValues());
assertFalse(templateType0.isResolved());
assertFalse(templateType0.isNumberValueType());
assertEquals("Object#Key", templateType0.getReferenceName());
assertFalse(templateType0.isStringValueType());
assertFalse(templateType0.isVoidType());
assertTrue(templateType0.isTemplateType());
assertFalse(templateType0.isFunctionPrototypeType());
assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
assertFalse(templateType0.isNullType());
assertFalse(templateType0.isBooleanValueType());
assertTrue(templateType0.isObject());
assertTrue(templateType0.hasAnyTemplateTypesInternal());
assertFalse(templateType1.hasCachedValues());
assertFalse(templateType1.isNumberValueType());
assertFalse(templateType1.isResolved());
assertEquals("Object#Key", templateType1.getReferenceName());
assertFalse(templateType1.isStringValueType());
assertTrue(templateType1.isTemplateType());
assertFalse(templateType1.isVoidType());
assertFalse(templateType1.isFunctionPrototypeType());
assertFalse(templateType1.isNullType());
assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
assertFalse(templateType1.isBooleanValueType());
assertTrue(templateType1.isObject());
assertTrue(templateType1.hasAnyTemplateTypesInternal());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertNotNull(templateType1);

boolean boolean5 = node_NodeMismatch0.equals(templateType1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertFalse(boolean5 == boolean1);
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertSame(templateType0, templateType1);
assertSame(templateType1, templateType0);
assertNotSame(node2, node1);
assertFalse(templateType0.hasCachedValues());
assertFalse(templateType0.isResolved());
assertFalse(templateType0.isNumberValueType());
assertEquals("Object#Key", templateType0.getReferenceName());
assertFalse(templateType0.isStringValueType());
assertFalse(templateType0.isVoidType());
assertTrue(templateType0.isTemplateType());
assertFalse(templateType0.isFunctionPrototypeType());
assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
assertFalse(templateType0.isNullType());
assertFalse(templateType0.isBooleanValueType());
assertTrue(templateType0.isObject());
assertTrue(templateType0.hasAnyTemplateTypesInternal());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(templateType1.hasCachedValues());
assertFalse(templateType1.isNumberValueType());
assertFalse(templateType1.isResolved());
assertEquals("Object#Key", templateType1.getReferenceName());
assertFalse(templateType1.isStringValueType());
assertTrue(templateType1.isTemplateType());
assertFalse(templateType1.isVoidType());
assertFalse(templateType1.isFunctionPrototypeType());
assertFalse(templateType1.isNullType());
assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
assertFalse(templateType1.isBooleanValueType());
assertTrue(templateType1.isObject());
assertTrue(templateType1.hasAnyTemplateTypesInternal());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertFalse(node2.isFalse());
assertFalse(node2.isCall());
assertFalse(node2.isAnd());
assertEquals(0, node2.getLineno());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(55, node2.getCharno());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertEquals(935, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertEquals(55, node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(boolean5);

boolean boolean6 = node3.isFromExterns();
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean2);
assertFalse(boolean6 == boolean3);
assertTrue(boolean6 == boolean4);
assertFalse(boolean6 == boolean1);
assertTrue(boolean6 == boolean0);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.isObjectLit());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isAnd());
assertFalse(node3.isWith());
assertFalse(node3.isNot());
assertFalse(node3.isComma());
assertFalse(node3.isExprResult());
assertFalse(node3.isBreak());
assertFalse(node3.isAssign());
assertFalse(node3.isHook());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertEquals((-1), node3.getCharno());
assertFalse(node3.hasChildren());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCase());
assertFalse(node3.isGetProp());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isTypeOf());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabelName());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetElem());
assertFalse(node3.isVar());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertEquals(40, node3.getType());
assertFalse(node3.isFunction());
assertFalse(node3.isParamList());
assertFalse(node3.isTrue());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isArrayLit());
assertFalse(node3.isCall());
assertFalse(node3.isStringKey());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isBlock());
assertFalse(node3.isDebugger());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isIn());
assertFalse(node3.isContinue());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertFalse(boolean6);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertNotSame(node1, node2);
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(iterable0.contains(node1));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(iterable0);

boolean boolean7 = node0.isDefaultCase();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(boolean7 == boolean1);
assertTrue(boolean7 == boolean0);
assertFalse(boolean7 == boolean3);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean6);
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(boolean7);


[MASTER] 11:12:33.343 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_172_1628161953280/com/google/javascript/rhino/Node_172_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_172_1628161953280/com/google/javascript/rhino/Node_172_tmp__ESTest_scaffolding.java]]
[MASTER] 11:12:33.343 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:33.343 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:33.344 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 950
[MASTER] 11:12:33.345 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_172_1628161953280/com/google/javascript/rhino/Node_172_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:12:33 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_172_tmp__ESTest extends Node_172_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("MHu;l");
21:       assertFalse(node0.isHook());
22:       assertFalse(node0.isThrow());
23:       assertFalse(node0.isBreak());
24:       assertFalse(node0.isSwitch());
25:       assertFalse(node0.isInc());
26:       assertEquals((-1), node0.getCharno());
27:       assertFalse(node0.isInstanceOf());
28:       assertFalse(node0.isCase());
29:       assertFalse(node0.isGetProp());
30:       assertFalse(node0.isThis());
31:       assertFalse(node0.isExprResult());
32:       assertFalse(node0.isFor());
33:       assertFalse(node0.isWith());
34:       assertFalse(node0.isComma());
35:       assertFalse(node0.isArrayLit());
36:       assertFalse(node0.isEmpty());
37:       assertFalse(node0.isTry());
38:       assertFalse(node0.isGetElem());
39:       assertFalse(node0.isVoid());
40:       assertFalse(node0.isDelProp());
41:       assertFalse(node0.isLabelName());
42:       assertFalse(node0.hasOneChild());
43:       assertFalse(node0.isScript());
44:       assertFalse(node0.isNumber());
45:       assertFalse(node0.isTrue());
46:       assertFalse(node0.isGetterDef());
47:       assertFalse(node0.isOr());
48:       assertFalse(node0.isAssignAdd());
49:       assertFalse(node0.isDo());
50:       assertFalse(node0.isDefaultCase());
51:       assertFalse(node0.isLabel());
52:       assertEquals(0, node0.getChildCount());
53:       assertFalse(node0.isVar());
54:       assertFalse(node0.isCall());
55:       assertFalse(node0.isStringKey());
56:       assertFalse(node0.isName());
57:       assertFalse(node0.isAdd());
58:       assertFalse(node0.isNew());
59:       assertTrue(node0.isString());
60:       assertFalse(node0.isNull());
61:       assertFalse(node0.isSetterDef());
62:       assertFalse(node0.isParamList());
63:       assertFalse(node0.hasMoreThanOneChild());
64:       assertFalse(node0.isCatch());
65:       assertEquals((-1), node0.getLineno());
66:       assertFalse(node0.isRegExp());
67:       assertFalse(node0.isTypeOf());
68:       assertFalse(node0.hasChildren());
69:       assertFalse(node0.isWhile());
70:       assertFalse(node0.isBlock());
71:       assertFalse(node0.isReturn());
72:       assertFalse(node0.isDec());
73:       assertFalse(node0.isAssign());
74:       assertFalse(node0.isCast());
75:       assertEquals((-1), node0.getSourcePosition());
76:       assertFalse(node0.isIf());
77:       assertFalse(node0.isNE());
78:       assertFalse(node0.isObjectLit());
79:       assertFalse(node0.isDebugger());
80:       assertFalse(node0.isNot());
81:       assertFalse(node0.isIn());
82:       assertFalse(node0.isAnd());
83:       assertFalse(node0.isContinue());
84:       assertEquals(40, node0.getType());
85:       assertFalse(node0.isFalse());
86:       assertFalse(node0.isFunction());
87:       assertEquals(29, Node.JSDOC_INFO_PROP);
88:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
89:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
90:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
91:       assertEquals(37, Node.OPT_ARG_NAME);
92:       assertEquals(43, Node.IS_CONSTANT_NAME);
93:       assertEquals(51, Node.STATIC_SOURCE_FILE);
94:       assertEquals(36, Node.QUOTED_PROP);
95:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
96:       assertEquals(46, Node.IS_NAMESPACE);
97:       assertEquals(56, Node.CHANGE_TIME);
98:       assertEquals(49, Node.DIRECT_EVAL);
99:       assertEquals(1, Node.DECR_FLAG);
100:       assertEquals(4095, Node.COLUMN_MASK);
101:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
102:       assertEquals(32, Node.INCRDECR_PROP);
103:       assertEquals(12, Node.COLUMN_BITS);
104:       assertEquals(50, Node.FREE_CALL);
105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
106:       assertEquals(8, Node.FLAG_NO_THROWS);
107:       assertEquals(39, Node.EMPTY_BLOCK);
108:       assertEquals(40, Node.ORIGINALNAME_PROP);
109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
110:       assertEquals(52, Node.LENGTH);
111:       assertEquals(48, Node.DIRECTIVES);
112:       assertEquals(57, Node.REFLECTED_OBJECT);
113:       assertEquals(54, Node.SLASH_V);
114:       assertEquals(30, Node.VAR_ARGS_NAME);
115:       assertEquals(15, Node.NO_SIDE_EFFECTS);
116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
117:       assertEquals(55, Node.INFERRED_FUNCTION);
118:       assertEquals(53, Node.INPUT_ID);
119:       assertEquals(2, Node.POST_FLAG);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
123:       assertNotNull(node0);
124:       
125:       Node node1 = Node.newNumber((-211.44086307265744));
126:       assertFalse(node1.equals((Object)node0));
127:       assertFalse(node1.isCase());
128:       assertFalse(node1.isString());
129:       assertFalse(node1.isIn());
130:       assertFalse(node1.isInc());
131:       assertTrue(node1.isNumber());
132:       assertFalse(node1.isThrow());
133:       assertFalse(node1.isArrayLit());
134:       assertFalse(node1.isGetterDef());
135:       assertFalse(node1.isFalse());
136:       assertEquals((-1), node1.getCharno());
137:       assertFalse(node1.isDebugger());
138:       assertFalse(node1.isSwitch());
139:       assertFalse(node1.isAnd());
140:       assertFalse(node1.isObjectLit());
141:       assertFalse(node1.isNot());
142:       assertEquals(0, node1.getChildCount());
143:       assertFalse(node1.isComma());
144:       assertFalse(node1.isGetProp());
145:       assertFalse(node1.isDefaultCase());
146:       assertFalse(node1.isCall());
147:       assertFalse(node1.isEmpty());
148:       assertFalse(node1.isGetElem());
149:       assertFalse(node1.isDec());
150:       assertFalse(node1.isAssign());
151:       assertFalse(node1.isTypeOf());
152:       assertFalse(node1.isVoid());
153:       assertFalse(node1.isTrue());
154:       assertFalse(node1.isExprResult());
155:       assertFalse(node1.isNull());
156:       assertFalse(node1.isBreak());
157:       assertFalse(node1.isDelProp());
158:       assertFalse(node1.isName());
159:       assertFalse(node1.isContinue());
160:       assertEquals(39, node1.getType());
161:       assertFalse(node1.isOr());
162:       assertFalse(node1.hasMoreThanOneChild());
163:       assertFalse(node1.isAdd());
164:       assertFalse(node1.isNew());
165:       assertFalse(node1.isLabel());
166:       assertFalse(node1.isBlock());
167:       assertFalse(node1.isReturn());
168:       assertFalse(node1.hasChildren());
169:       assertFalse(node1.isWhile());
170:       assertFalse(node1.isDo());
171:       assertFalse(node1.isAssignAdd());
172:       assertFalse(node1.isStringKey());
173:       assertFalse(node1.isCast());
174:       assertFalse(node1.isVar());
175:       assertFalse(node1.isParamList());
176:       assertEquals((-1), node1.getSourcePosition());
177:       assertFalse(node1.isLabelName());
178:       assertFalse(node1.isCatch());
179:       assertFalse(node1.isInstanceOf());
180:       assertFalse(node1.isRegExp());
181:       assertFalse(node1.isWith());
182:       assertFalse(node1.isFunction());
183:       assertFalse(node1.isScript());
184:       assertFalse(node1.isSetterDef());
185:       assertFalse(node1.isThis());
186:       assertFalse(node1.hasOneChild());
187:       assertFalse(node1.isTry());
188:       assertFalse(node1.isFor());
189:       assertFalse(node1.isHook());
190:       assertFalse(node1.isNE());
191:       assertEquals((-1), node1.getLineno());
192:       assertFalse(node1.isIf());
193:       assertEquals(43, Node.IS_CONSTANT_NAME);
194:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
195:       assertEquals(36, Node.QUOTED_PROP);
196:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
197:       assertEquals(55, Node.INFERRED_FUNCTION);
198:       assertEquals(29, Node.JSDOC_INFO_PROP);
199:       assertEquals(53, Node.INPUT_ID);
200:       assertEquals(39, Node.EMPTY_BLOCK);
201:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
202:       assertEquals(50, Node.FREE_CALL);
203:       assertEquals(2, Node.POST_FLAG);
204:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
205:       assertEquals(47, Node.IS_DISPATCHER);
206:       assertEquals(46, Node.IS_NAMESPACE);
207:       assertEquals(40, Node.ORIGINALNAME_PROP);
208:       assertEquals(30, Node.VAR_ARGS_NAME);
209:       assertEquals(49, Node.DIRECT_EVAL);
210:       assertEquals(57, Node.LAST_PROP);
211:       assertEquals(54, Node.SLASH_V);
212:       assertEquals(51, Node.STATIC_SOURCE_FILE);
213:       assertEquals(12, Node.COLUMN_BITS);
214:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
215:       assertEquals(32, Node.INCRDECR_PROP);
216:       assertEquals(52, Node.LENGTH);
217:       assertEquals(1, Node.DECR_FLAG);
218:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
219:       assertEquals(15, Node.NO_SIDE_EFFECTS);
220:       assertEquals(56, Node.CHANGE_TIME);
221:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
222:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
223:       assertEquals(8, Node.FLAG_NO_THROWS);
224:       assertEquals(57, Node.REFLECTED_OBJECT);
225:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
226:       assertEquals(4095, Node.COLUMN_MASK);
227:       assertEquals(37, Node.OPT_ARG_NAME);
228:       assertEquals(48, Node.DIRECTIVES);
229:       assertNotNull(node1);
230:       
231:       Node node2 = new Node(55, node1, 102, 1);
232:       assertFalse(node1.equals((Object)node0));
233:       assertFalse(node2.equals((Object)node0));
234:       assertFalse(node2.equals((Object)node1));
235:       assertFalse(node1.isCase());
236:       assertFalse(node1.isString());
237:       assertFalse(node1.isIn());
238:       assertFalse(node1.isInc());
239:       assertTrue(node1.isNumber());
240:       assertFalse(node1.isThrow());
241:       assertFalse(node1.isArrayLit());
242:       assertFalse(node1.isGetterDef());
243:       assertFalse(node1.isFalse());
244:       assertEquals((-1), node1.getCharno());
245:       assertFalse(node1.isDebugger());
246:       assertFalse(node1.isSwitch());
247:       assertFalse(node1.isAnd());
248:       assertFalse(node1.isObjectLit());
249:       assertFalse(node1.isNot());
250:       assertEquals(0, node1.getChildCount());
251:       assertFalse(node1.isComma());
252:       assertFalse(node1.isGetProp());
253:       assertFalse(node1.isDefaultCase());
254:       assertFalse(node1.isCall());
255:       assertFalse(node1.isEmpty());
256:       assertFalse(node1.isGetElem());
257:       assertFalse(node1.isDec());
258:       assertFalse(node1.isAssign());
259:       assertFalse(node1.isTypeOf());
260:       assertFalse(node1.isVoid());
261:       assertFalse(node1.isTrue());
262:       assertFalse(node1.isExprResult());
263:       assertFalse(node1.isNull());
264:       assertFalse(node1.isBreak());
265:       assertFalse(node1.isDelProp());
266:       assertFalse(node1.isName());
267:       assertFalse(node1.isContinue());
268:       assertEquals(39, node1.getType());
269:       assertFalse(node1.isOr());
270:       assertFalse(node1.hasMoreThanOneChild());
271:       assertFalse(node1.isAdd());
272:       assertFalse(node1.isNew());
273:       assertFalse(node1.isLabel());
274:       assertFalse(node1.isBlock());
275:       assertFalse(node1.isReturn());
276:       assertFalse(node1.hasChildren());
277:       assertFalse(node1.isWhile());
278:       assertFalse(node1.isDo());
279:       assertFalse(node1.isAssignAdd());
280:       assertFalse(node1.isStringKey());
281:       assertFalse(node1.isCast());
282:       assertFalse(node1.isVar());
283:       assertFalse(node1.isParamList());
284:       assertEquals((-1), node1.getSourcePosition());
285:       assertFalse(node1.isLabelName());
286:       assertFalse(node1.isCatch());
287:       assertFalse(node1.isInstanceOf());
288:       assertFalse(node1.isRegExp());
289:       assertFalse(node1.isWith());
290:       assertFalse(node1.isFunction());
291:       assertFalse(node1.isScript());
292:       assertFalse(node1.isSetterDef());
293:       assertFalse(node1.isThis());
294:       assertFalse(node1.hasOneChild());
295:       assertFalse(node1.isTry());
296:       assertFalse(node1.isFor());
297:       assertFalse(node1.isHook());
298:       assertFalse(node1.isNE());
299:       assertEquals((-1), node1.getLineno());
300:       assertFalse(node1.isIf());
301:       assertFalse(node2.isSwitch());
302:       assertFalse(node2.isInc());
303:       assertFalse(node2.isString());
304:       assertTrue(node2.hasChildren());
305:       assertFalse(node2.isBreak());
306:       assertFalse(node2.isNE());
307:       assertFalse(node2.isIf());
308:       assertFalse(node2.isFalse());
309:       assertFalse(node2.isIn());
310:       assertFalse(node2.isThrow());
311:       assertFalse(node2.isEmpty());
312:       assertFalse(node2.isFunction());
313:       assertFalse(node2.isTrue());
314:       assertFalse(node2.isExprResult());
315:       assertFalse(node2.isNot());
316:       assertFalse(node2.isDebugger());
317:       assertFalse(node2.isCast());
318:       assertFalse(node2.isAnd());
319:       assertFalse(node2.isDelProp());
320:       assertFalse(node2.isGetElem());
321:       assertFalse(node2.isVoid());
322:       assertFalse(node2.isTypeOf());
323:       assertFalse(node2.isAssign());
324:       assertTrue(node2.hasOneChild());
325:       assertFalse(node2.isReturn());
326:       assertFalse(node2.isComma());
327:       assertFalse(node2.isDec());
328:       assertFalse(node2.isObjectLit());
329:       assertEquals(417793, node2.getSourcePosition());
330:       assertFalse(node2.isGetProp());
331:       assertEquals(1, node2.getCharno());
332:       assertFalse(node2.isWhile());
333:       assertFalse(node2.isBlock());
334:       assertFalse(node2.hasMoreThanOneChild());
335:       assertFalse(node2.isCall());
336:       assertFalse(node2.isContinue());
337:       assertFalse(node2.isStringKey());
338:       assertFalse(node2.isName());
339:       assertFalse(node2.isNull());
340:       assertFalse(node2.isSetterDef());
341:       assertFalse(node2.isLabel());
342:       assertFalse(node2.isOr());
343:       assertFalse(node2.isVar());
344:       assertFalse(node2.isDo());
345:       assertFalse(node2.isAssignAdd());
346:       assertFalse(node2.isAdd());
347:       assertFalse(node2.isNew());
348:       assertFalse(node2.isScript());
349:       assertFalse(node2.isRegExp());
350:       assertFalse(node2.isDefaultCase());
351:       assertFalse(node2.isWith());
352:       assertFalse(node2.isCatch());
353:       assertFalse(node2.isInstanceOf());
354:       assertFalse(node2.isLabelName());
355:       assertFalse(node2.isArrayLit());
356:       assertFalse(node2.isNumber());
357:       assertFalse(node2.isThis());
358:       assertFalse(node2.isParamList());
359:       assertEquals(55, node2.getType());
360:       assertFalse(node2.isFor());
361:       assertFalse(node2.isGetterDef());
362:       assertEquals(102, node2.getLineno());
363:       assertEquals(1, node2.getChildCount());
364:       assertFalse(node2.isHook());
365:       assertFalse(node2.isTry());
366:       assertFalse(node2.isCase());
367:       assertEquals(43, Node.IS_CONSTANT_NAME);
368:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
369:       assertEquals(36, Node.QUOTED_PROP);
370:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
371:       assertEquals(55, Node.INFERRED_FUNCTION);
372:       assertEquals(29, Node.JSDOC_INFO_PROP);
373:       assertEquals(53, Node.INPUT_ID);
374:       assertEquals(39, Node.EMPTY_BLOCK);
375:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
376:       assertEquals(50, Node.FREE_CALL);
377:       assertEquals(2, Node.POST_FLAG);
378:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
379:       assertEquals(47, Node.IS_DISPATCHER);
380:       assertEquals(46, Node.IS_NAMESPACE);
381:       assertEquals(40, Node.ORIGINALNAME_PROP);
382:       assertEquals(30, Node.VAR_ARGS_NAME);
383:       assertEquals(49, Node.DIRECT_EVAL);
384:       assertEquals(57, Node.LAST_PROP);
385:       assertEquals(54, Node.SLASH_V);
386:       assertEquals(51, Node.STATIC_SOURCE_FILE);
387:       assertEquals(12, Node.COLUMN_BITS);
388:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
389:       assertEquals(32, Node.INCRDECR_PROP);
390:       assertEquals(52, Node.LENGTH);
391:       assertEquals(1, Node.DECR_FLAG);
392:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
393:       assertEquals(15, Node.NO_SIDE_EFFECTS);
394:       assertEquals(56, Node.CHANGE_TIME);
395:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
396:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
397:       assertEquals(8, Node.FLAG_NO_THROWS);
398:       assertEquals(57, Node.REFLECTED_OBJECT);
399:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
400:       assertEquals(4095, Node.COLUMN_MASK);
401:       assertEquals(37, Node.OPT_ARG_NAME);
402:       assertEquals(48, Node.DIRECTIVES);
403:       assertEquals(53, Node.INPUT_ID);
404:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
405:       assertEquals(43, Node.IS_CONSTANT_NAME);
406:       assertEquals(47, Node.IS_DISPATCHER);
407:       assertEquals(2, Node.POST_FLAG);
408:       assertEquals(4095, Node.COLUMN_MASK);
409:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
410:       assertEquals(48, Node.DIRECTIVES);
411:       assertEquals(37, Node.OPT_ARG_NAME);
412:       assertEquals(56, Node.CHANGE_TIME);
413:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
414:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
415:       assertEquals(29, Node.JSDOC_INFO_PROP);
416:       assertEquals(15, Node.NO_SIDE_EFFECTS);
417:       assertEquals(36, Node.QUOTED_PROP);
418:       assertEquals(55, Node.INFERRED_FUNCTION);
419:       assertEquals(8, Node.FLAG_NO_THROWS);
420:       assertEquals(39, Node.EMPTY_BLOCK);
421:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
422:       assertEquals(52, Node.LENGTH);
423:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
424:       assertEquals(57, Node.REFLECTED_OBJECT);
425:       assertEquals(57, Node.LAST_PROP);
426:       assertEquals(54, Node.SLASH_V);
427:       assertEquals(30, Node.VAR_ARGS_NAME);
428:       assertEquals(49, Node.DIRECT_EVAL);
429:       assertEquals(40, Node.ORIGINALNAME_PROP);
430:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
431:       assertEquals(32, Node.INCRDECR_PROP);
432:       assertEquals(51, Node.STATIC_SOURCE_FILE);
433:       assertEquals(12, Node.COLUMN_BITS);
434:       assertEquals(46, Node.IS_NAMESPACE);
435:       assertEquals(50, Node.FREE_CALL);
436:       assertEquals(1, Node.DECR_FLAG);
437:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
438:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
439:       assertNotNull(node2);
440:       
441:       Node node3 = Node.newNumber((double) 47);
442:       assertFalse(node3.equals((Object)node1));
443:       assertFalse(node3.equals((Object)node2));
444:       assertFalse(node3.equals((Object)node0));
445:       assertNotSame(node3, node1);
446:       assertFalse(node3.isTry());
447:       assertFalse(node3.isVoid());
448:       assertFalse(node3.isEmpty());
449:       assertFalse(node3.isArrayLit());
450:       assertFalse(node3.isIf());
451:       assertFalse(node3.isGetterDef());
452:       assertFalse(node3.isDelProp());
453:       assertFalse(node3.isDebugger());
454:       assertFalse(node3.isNE());
455:       assertFalse(node3.isTrue());
456:       assertFalse(node3.isIn());
457:       assertEquals(0, node3.getChildCount());
458:       assertFalse(node3.isSetterDef());
459:       assertFalse(node3.isFunction());
460:       assertFalse(node3.isDefaultCase());
461:       assertFalse(node3.isVar());
462:       assertFalse(node3.isInc());
463:       assertFalse(node3.isSwitch());
464:       assertEquals((-1), node3.getCharno());
465:       assertFalse(node3.isParamList());
466:       assertFalse(node3.isStringKey());
467:       assertEquals((-1), node3.getLineno());
468:       assertFalse(node3.isInstanceOf());
469:       assertFalse(node3.hasMoreThanOneChild());
470:       assertFalse(node3.isCatch());
471:       assertFalse(node3.isCase());
472:       assertFalse(node3.isRegExp());
473:       assertFalse(node3.isWith());
474:       assertEquals(39, node3.getType());
475:       assertFalse(node3.isFor());
476:       assertFalse(node3.isBlock());
477:       assertFalse(node3.isHook());
478:       assertFalse(node3.isThis());
479:       assertFalse(node3.hasOneChild());
480:       assertFalse(node3.isExprResult());
481:       assertFalse(node3.isScript());
482:       assertFalse(node3.isCast());
483:       assertFalse(node3.isGetElem());
484:       assertEquals((-1), node3.getSourcePosition());
485:       assertFalse(node3.isLabelName());
486:       assertFalse(node3.isNot());
487:       assertFalse(node3.isAnd());
488:       assertFalse(node3.isObjectLit());
489:       assertFalse(node3.isAssignAdd());
490:       assertFalse(node3.isOr());
491:       assertFalse(node3.isContinue());
492:       assertFalse(node3.isDo());
493:       assertFalse(node3.isFalse());
494:       assertFalse(node3.isThrow());
495:       assertFalse(node3.isLabel());
496:       assertFalse(node3.isNew());
497:       assertFalse(node3.isAdd());
498:       assertFalse(node3.isCall());
499:       assertFalse(node3.isBreak());
500:       assertFalse(node3.isString());
501:       assertFalse(node3.isName());
502:       assertFalse(node3.isNull());
503:       assertTrue(node3.isNumber());
504:       assertFalse(node3.isGetProp());
505:       assertFalse(node3.hasChildren());
506:       assertFalse(node3.isDec());
507:       assertFalse(node3.isWhile());
508:       assertFalse(node3.isTypeOf());
509:       assertFalse(node3.isAssign());
510:       assertFalse(node3.isComma());
511:       assertFalse(node3.isReturn());
512:       assertEquals(40, Node.ORIGINALNAME_PROP);
513:       assertEquals(57, Node.REFLECTED_OBJECT);
514:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
515:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
516:       assertEquals(50, Node.FREE_CALL);
517:       assertEquals(52, Node.LENGTH);
518:       assertEquals(8, Node.FLAG_NO_THROWS);
519:       assertEquals(54, Node.SLASH_V);
520:       assertEquals(48, Node.DIRECTIVES);
521:       assertEquals(49, Node.DIRECT_EVAL);
522:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
523:       assertEquals(55, Node.INFERRED_FUNCTION);
524:       assertEquals(30, Node.VAR_ARGS_NAME);
525:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
526:       assertEquals(53, Node.INPUT_ID);
527:       assertEquals(15, Node.NO_SIDE_EFFECTS);
528:       assertEquals(39, Node.EMPTY_BLOCK);
529:       assertEquals(47, Node.IS_DISPATCHER);
530:       assertEquals(57, Node.LAST_PROP);
531:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
532:       assertEquals(29, Node.JSDOC_INFO_PROP);
533:       assertEquals(2, Node.POST_FLAG);
534:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
535:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
536:       assertEquals(37, Node.OPT_ARG_NAME);
537:       assertEquals(36, Node.QUOTED_PROP);
538:       assertEquals(46, Node.IS_NAMESPACE);
539:       assertEquals(43, Node.IS_CONSTANT_NAME);
540:       assertEquals(56, Node.CHANGE_TIME);
541:       assertEquals(1, Node.DECR_FLAG);
542:       assertEquals(12, Node.COLUMN_BITS);
543:       assertEquals(51, Node.STATIC_SOURCE_FILE);
544:       assertEquals(4095, Node.COLUMN_MASK);
545:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
546:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
547:       assertEquals(32, Node.INCRDECR_PROP);
548:       assertNotNull(node3);
549:       
550:       boolean boolean0 = node0.isDo();
551:       assertFalse(node0.equals((Object)node2));
552:       assertFalse(node0.equals((Object)node1));
553:       assertFalse(node0.equals((Object)node3));
554:       assertFalse(node0.isHook());
555:       assertFalse(node0.isThrow());
556:       assertFalse(node0.isBreak());
557:       assertFalse(node0.isSwitch());
558:       assertFalse(node0.isInc());
559:       assertEquals((-1), node0.getCharno());
560:       assertFalse(node0.isInstanceOf());
561:       assertFalse(node0.isCase());
562:       assertFalse(node0.isGetProp());
563:       assertFalse(node0.isThis());
564:       assertFalse(node0.isExprResult());
565:       assertFalse(node0.isFor());
566:       assertFalse(node0.isWith());
567:       assertFalse(node0.isComma());
568:       assertFalse(node0.isArrayLit());
569:       assertFalse(node0.isEmpty());
570:       assertFalse(node0.isTry());
571:       assertFalse(node0.isGetElem());
572:       assertFalse(node0.isVoid());
573:       assertFalse(node0.isDelProp());
574:       assertFalse(node0.isLabelName());
575:       assertFalse(node0.hasOneChild());
576:       assertFalse(node0.isScript());
577:       assertFalse(node0.isNumber());
578:       assertFalse(node0.isTrue());
579:       assertFalse(node0.isGetterDef());
580:       assertFalse(node0.isOr());
581:       assertFalse(node0.isAssignAdd());
582:       assertFalse(node0.isDo());
583:       assertFalse(node0.isDefaultCase());
584:       assertFalse(node0.isLabel());
585:       assertEquals(0, node0.getChildCount());
586:       assertFalse(node0.isVar());
587:       assertFalse(node0.isCall());
588:       assertFalse(node0.isStringKey());
589:       assertFalse(node0.isName());
590:       assertFalse(node0.isAdd());
591:       assertFalse(node0.isNew());
592:       assertTrue(node0.isString());
593:       assertFalse(node0.isNull());
594:       assertFalse(node0.isSetterDef());
595:       assertFalse(node0.isParamList());
596:       assertFalse(node0.hasMoreThanOneChild());
597:       assertFalse(node0.isCatch());
598:       assertEquals((-1), node0.getLineno());
599:       assertFalse(node0.isRegExp());
600:       assertFalse(node0.isTypeOf());
601:       assertFalse(node0.hasChildren());
602:       assertFalse(node0.isWhile());
603:       assertFalse(node0.isBlock());
604:       assertFalse(node0.isReturn());
605:       assertFalse(node0.isDec());
606:       assertFalse(node0.isAssign());
607:       assertFalse(node0.isCast());
608:       assertEquals((-1), node0.getSourcePosition());
609:       assertFalse(node0.isIf());
610:       assertFalse(node0.isNE());
611:       assertFalse(node0.isObjectLit());
612:       assertFalse(node0.isDebugger());
613:       assertFalse(node0.isNot());
614:       assertFalse(node0.isIn());
615:       assertFalse(node0.isAnd());
616:       assertFalse(node0.isContinue());
617:       assertEquals(40, node0.getType());
618:       assertFalse(node0.isFalse());
619:       assertFalse(node0.isFunction());
620:       assertEquals(29, Node.JSDOC_INFO_PROP);
621:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
622:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
623:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
624:       assertEquals(37, Node.OPT_ARG_NAME);
625:       assertEquals(43, Node.IS_CONSTANT_NAME);
626:       assertEquals(51, Node.STATIC_SOURCE_FILE);
627:       assertEquals(36, Node.QUOTED_PROP);
628:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
629:       assertEquals(46, Node.IS_NAMESPACE);
630:       assertEquals(56, Node.CHANGE_TIME);
631:       assertEquals(49, Node.DIRECT_EVAL);
632:       assertEquals(1, Node.DECR_FLAG);
633:       assertEquals(4095, Node.COLUMN_MASK);
634:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
635:       assertEquals(32, Node.INCRDECR_PROP);
636:       assertEquals(12, Node.COLUMN_BITS);
637:       assertEquals(50, Node.FREE_CALL);
638:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
639:       assertEquals(8, Node.FLAG_NO_THROWS);
640:       assertEquals(39, Node.EMPTY_BLOCK);
641:       assertEquals(40, Node.ORIGINALNAME_PROP);
642:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
643:       assertEquals(52, Node.LENGTH);
644:       assertEquals(48, Node.DIRECTIVES);
645:       assertEquals(57, Node.REFLECTED_OBJECT);
646:       assertEquals(54, Node.SLASH_V);
647:       assertEquals(30, Node.VAR_ARGS_NAME);
648:       assertEquals(15, Node.NO_SIDE_EFFECTS);
649:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
650:       assertEquals(55, Node.INFERRED_FUNCTION);
651:       assertEquals(53, Node.INPUT_ID);
652:       assertEquals(2, Node.POST_FLAG);
653:       assertEquals(57, Node.LAST_PROP);
654:       assertEquals(47, Node.IS_DISPATCHER);
655:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
656:       assertFalse(boolean0);
657:       
658:       boolean boolean1 = node1.isOnlyModifiesThisCall();
659:       assertFalse(node1.equals((Object)node3));
660:       assertFalse(node1.equals((Object)node2));
661:       assertFalse(node1.equals((Object)node0));
662:       assertTrue(boolean1 == boolean0);
663:       assertNotSame(node1, node3);
664:       assertFalse(node1.isCase());
665:       assertFalse(node1.isString());
666:       assertFalse(node1.isIn());
667:       assertFalse(node1.isInc());
668:       assertTrue(node1.isNumber());
669:       assertFalse(node1.isThrow());
670:       assertFalse(node1.isArrayLit());
671:       assertFalse(node1.isGetterDef());
672:       assertFalse(node1.isFalse());
673:       assertEquals((-1), node1.getCharno());
674:       assertFalse(node1.isDebugger());
675:       assertFalse(node1.isSwitch());
676:       assertFalse(node1.isAnd());
677:       assertFalse(node1.isObjectLit());
678:       assertFalse(node1.isNot());
679:       assertEquals(0, node1.getChildCount());
680:       assertFalse(node1.isComma());
681:       assertFalse(node1.isGetProp());
682:       assertFalse(node1.isDefaultCase());
683:       assertFalse(node1.isCall());
684:       assertFalse(node1.isEmpty());
685:       assertFalse(node1.isGetElem());
686:       assertFalse(node1.isDec());
687:       assertFalse(node1.isAssign());
688:       assertFalse(node1.isTypeOf());
689:       assertFalse(node1.isVoid());
690:       assertFalse(node1.isTrue());
691:       assertFalse(node1.isExprResult());
692:       assertFalse(node1.isNull());
693:       assertFalse(node1.isBreak());
694:       assertFalse(node1.isDelProp());
695:       assertFalse(node1.isName());
696:       assertFalse(node1.isContinue());
697:       assertEquals(39, node1.getType());
698:       assertFalse(node1.isOr());
699:       assertFalse(node1.hasMoreThanOneChild());
700:       assertFalse(node1.isAdd());
701:       assertFalse(node1.isNew());
702:       assertFalse(node1.isLabel());
703:       assertFalse(node1.isBlock());
704:       assertFalse(node1.isReturn());
705:       assertFalse(node1.hasChildren());
706:       assertFalse(node1.isWhile());
707:       assertFalse(node1.isDo());
708:       assertFalse(node1.isAssignAdd());
709:       assertFalse(node1.isStringKey());
710:       assertFalse(node1.isCast());
711:       assertFalse(node1.isVar());
712:       assertFalse(node1.isParamList());
713:       assertEquals((-1), node1.getSourcePosition());
714:       assertFalse(node1.isLabelName());
715:       assertFalse(node1.isCatch());
716:       assertFalse(node1.isInstanceOf());
717:       assertFalse(node1.isRegExp());
718:       assertFalse(node1.isWith());
719:       assertFalse(node1.isFunction());
720:       assertFalse(node1.isScript());
721:       assertFalse(node1.isSetterDef());
722:       assertFalse(node1.isThis());
723:       assertFalse(node1.hasOneChild());
724:       assertFalse(node1.isTry());
725:       assertFalse(node1.isFor());
726:       assertFalse(node1.isHook());
727:       assertFalse(node1.isNE());
728:       assertEquals((-1), node1.getLineno());
729:       assertFalse(node1.isIf());
730:       assertEquals(43, Node.IS_CONSTANT_NAME);
731:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
732:       assertEquals(36, Node.QUOTED_PROP);
733:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
734:       assertEquals(55, Node.INFERRED_FUNCTION);
735:       assertEquals(29, Node.JSDOC_INFO_PROP);
736:       assertEquals(53, Node.INPUT_ID);
737:       assertEquals(39, Node.EMPTY_BLOCK);
738:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
739:       assertEquals(50, Node.FREE_CALL);
740:       assertEquals(2, Node.POST_FLAG);
741:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
742:       assertEquals(47, Node.IS_DISPATCHER);
743:       assertEquals(46, Node.IS_NAMESPACE);
744:       assertEquals(40, Node.ORIGINALNAME_PROP);
745:       assertEquals(30, Node.VAR_ARGS_NAME);
746:       assertEquals(49, Node.DIRECT_EVAL);
747:       assertEquals(57, Node.LAST_PROP);
748:       assertEquals(54, Node.SLASH_V);
749:       assertEquals(51, Node.STATIC_SOURCE_FILE);
750:       assertEquals(12, Node.COLUMN_BITS);
751:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
752:       assertEquals(32, Node.INCRDECR_PROP);
753:       assertEquals(52, Node.LENGTH);
754:       assertEquals(1, Node.DECR_FLAG);
755:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
756:       assertEquals(15, Node.NO_SIDE_EFFECTS);
757:       assertEquals(56, Node.CHANGE_TIME);
758:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
759:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
760:       assertEquals(8, Node.FLAG_NO_THROWS);
761:       assertEquals(57, Node.REFLECTED_OBJECT);
762:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
763:       assertEquals(4095, Node.COLUMN_MASK);
764:       assertEquals(37, Node.OPT_ARG_NAME);
765:       assertEquals(48, Node.DIRECTIVES);
766:       assertFalse(boolean1);
767:       
768:       Node node4 = Node.newString(0, "MHu;l");
769:       assertFalse(node4.equals((Object)node1));
770:       assertFalse(node4.equals((Object)node3));
771:       assertFalse(node4.equals((Object)node2));
772:       assertFalse(node4.equals((Object)node0));
773:       assertNotSame(node4, node0);
774:       assertFalse(node4.isArrayLit());
775:       assertFalse(node4.isTry());
776:       assertFalse(node4.isEmpty());
777:       assertFalse(node4.isRegExp());
778:       assertFalse(node4.isDefaultCase());
779:       assertFalse(node4.isFunction());
780:       assertFalse(node4.isFor());
781:       assertEquals(0, node4.getChildCount());
782:       assertFalse(node4.isCase());
783:       assertFalse(node4.isString());
784:       assertFalse(node4.isSwitch());
785:       assertFalse(node4.isDebugger());
786:       assertFalse(node4.isGetterDef());
787:       assertFalse(node4.isStringKey());
788:       assertEquals((-1), node4.getCharno());
789:       assertFalse(node4.isParamList());
790:       assertEquals(0, node4.getType());
791:       assertFalse(node4.isNew());
792:       assertFalse(node4.isCall());
793:       assertFalse(node4.isAdd());
794:       assertFalse(node4.isComma());
795:       assertFalse(node4.isDo());
796:       assertFalse(node4.isWhile());
797:       assertFalse(node4.isVar());
798:       assertFalse(node4.isOr());
799:       assertFalse(node4.isNull());
800:       assertFalse(node4.isBreak());
801:       assertFalse(node4.isVoid());
802:       assertFalse(node4.isDelProp());
803:       assertFalse(node4.isName());
804:       assertFalse(node4.isTrue());
805:       assertFalse(node4.hasOneChild());
806:       assertFalse(node4.isGetElem());
807:       assertFalse(node4.isExprResult());
808:       assertFalse(node4.isScript());
809:       assertFalse(node4.isCast());
810:       assertFalse(node4.isTypeOf());
811:       assertFalse(node4.isDec());
812:       assertFalse(node4.hasChildren());
813:       assertFalse(node4.isAssign());
814:       assertFalse(node4.isAssignAdd());
815:       assertFalse(node4.isLabel());
816:       assertFalse(node4.isReturn());
817:       assertFalse(node4.isObjectLit());
818:       assertFalse(node4.isContinue());
819:       assertFalse(node4.isGetProp());
820:       assertFalse(node4.isNumber());
821:       assertEquals((-1), node4.getSourcePosition());
822:       assertFalse(node4.isLabelName());
823:       assertFalse(node4.isNot());
824:       assertFalse(node4.isAnd());
825:       assertFalse(node4.isHook());
826:       assertFalse(node4.isFalse());
827:       assertFalse(node4.isInc());
828:       assertFalse(node4.isBlock());
829:       assertFalse(node4.isThis());
830:       assertFalse(node4.isThrow());
831:       assertFalse(node4.isInstanceOf());
832:       assertFalse(node4.hasMoreThanOneChild());
833:       assertFalse(node4.isIn());
834:       assertEquals((-1), node4.getLineno());
835:       assertFalse(node4.isWith());
836:       assertFalse(node4.isSetterDef());
837:       assertFalse(node4.isCatch());
838:       assertFalse(node4.isIf());
839:       assertFalse(node4.isNE());
840:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
841:       assertEquals(40, Node.ORIGINALNAME_PROP);
842:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
843:       assertEquals(57, Node.REFLECTED_OBJECT);
844:       assertEquals(52, Node.LENGTH);
845:       assertEquals(8, Node.FLAG_NO_THROWS);
846:       assertEquals(50, Node.FREE_CALL);
847:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
848:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
849:       assertEquals(39, Node.EMPTY_BLOCK);
850:       assertEquals(15, Node.NO_SIDE_EFFECTS);
851:       assertEquals(57, Node.LAST_PROP);
852:       assertEquals(1, Node.DECR_FLAG);
853:       assertEquals(51, Node.STATIC_SOURCE_FILE);
854:       assertEquals(30, Node.VAR_ARGS_NAME);
855:       assertEquals(46, Node.IS_NAMESPACE);
856:       assertEquals(54, Node.SLASH_V);
857:       assertEquals(43, Node.IS_CONSTANT_NAME);
858:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
859:       assertEquals(29, Node.JSDOC_INFO_PROP);
860:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
861:       assertEquals(47, Node.IS_DISPATCHER);
862:       assertEquals(2, Node.POST_FLAG);
863:       assertEquals(53, Node.INPUT_ID);
864:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
865:       assertEquals(32, Node.INCRDECR_PROP);
866:       assertEquals(55, Node.INFERRED_FUNCTION);
867:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
868:       assertEquals(12, Node.COLUMN_BITS);
869:       assertEquals(36, Node.QUOTED_PROP);
870:       assertEquals(4095, Node.COLUMN_MASK);
871:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
872:       assertEquals(56, Node.CHANGE_TIME);
873:       assertEquals(37, Node.OPT_ARG_NAME);
874:       assertEquals(48, Node.DIRECTIVES);
875:       assertEquals(49, Node.DIRECT_EVAL);
876:       assertNotNull(node4);
877:       
878:       Iterable<Node> iterable0 = node4.children();
879:       assertFalse(node4.equals((Object)node1));
880:       assertFalse(node4.equals((Object)node3));
881:       assertFalse(node4.equals((Object)node2));
882:       assertFalse(node4.equals((Object)node0));
883:       assertNotSame(node4, node0);
884:       assertFalse(node4.isArrayLit());
885:       assertFalse(node4.isTry());
886:       assertFalse(node4.isEmpty());
887:       assertFalse(node4.isRegExp());
888:       assertFalse(node4.isDefaultCase());
889:       assertFalse(node4.isFunction());
890:       assertFalse(node4.isFor());
891:       assertEquals(0, node4.getChildCount());
892:       assertFalse(node4.isCase());
893:       assertFalse(node4.isString());
894:       assertFalse(node4.isSwitch());
895:       assertFalse(node4.isDebugger());
896:       assertFalse(node4.isGetterDef());
897:       assertFalse(node4.isStringKey());
898:       assertEquals((-1), node4.getCharno());
899:       assertFalse(node4.isParamList());
900:       assertEquals(0, node4.getType());
901:       assertFalse(node4.isNew());
902:       assertFalse(node4.isCall());
903:       assertFalse(node4.isAdd());
904:       assertFalse(node4.isComma());
905:       assertFalse(node4.isDo());
906:       assertFalse(node4.isWhile());
907:       assertFalse(node4.isVar());
908:       assertFalse(node4.isOr());
909:       assertFalse(node4.isNull());
910:       assertFalse(node4.isBreak());
911:       assertFalse(node4.isVoid());
912:       assertFalse(node4.isDelProp());
913:       assertFalse(node4.isName());
914:       assertFalse(node4.isTrue());
915:       assertFalse(node4.hasOneChild());
916:       assertFalse(node4.isGetElem());
917:       assertFalse(node4.isExprResult());
918:       assertFalse(node4.isScript());
919:       assertFalse(node4.isCast());
920:       assertFalse(node4.isTypeOf());
921:       assertFalse(node4.isDec());
922:       assertFalse(node4.hasChildren());
923:       assertFalse(node4.isAssign());
924:       assertFalse(node4.isAssignAdd());
925:       assertFalse(node4.isLabel());
926:       assertFalse(node4.isReturn());
927:       assertFalse(node4.isObjectLit());
928:       assertFalse(node4.isContinue());
929:       assertFalse(node4.isGetProp());
930:       assertFalse(node4.isNumber());
931:       assertEquals((-1), node4.getSourcePosition());
932:       assertFalse(node4.isLabelName());
933:       assertFalse(node4.isNot());
934:       assertFalse(node4.isAnd());
935:       assertFalse(node4.isHook());
936:       assertFalse(node4.isFalse());
937:       assertFalse(node4.isInc());
938:       assertFalse(node4.isBlock());
939:       assertFalse(node4.isThis());
940:       assertFalse(node4.isThrow());
941:       assertFalse(node4.isInstanceOf());
942:       assertFalse(node4.hasMoreThanOneChild());
943:       assertFalse(node4.isIn());
944:       assertEquals((-1), node4.getLineno());
945:       assertFalse(node4.isWith());
946:       assertFalse(node4.isSetterDef());
947:       assertFalse(node4.isCatch());
948:       assertFalse(node4.isIf());
949:       assertFalse(node4.isNE());
950:       assertFalse(iterable0.contains(node2));
951:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
952:       assertEquals(40, Node.ORIGINALNAME_PROP);
953:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
954:       assertEquals(57, Node.REFLECTED_OBJECT);
955:       assertEquals(52, Node.LENGTH);
956:       assertEquals(8, Node.FLAG_NO_THROWS);
957:       assertEquals(50, Node.FREE_CALL);
958:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
959:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
960:       assertEquals(39, Node.EMPTY_BLOCK);
961:       assertEquals(15, Node.NO_SIDE_EFFECTS);
962:       assertEquals(57, Node.LAST_PROP);
963:       assertEquals(1, Node.DECR_FLAG);
964:       assertEquals(51, Node.STATIC_SOURCE_FILE);
965:       assertEquals(30, Node.VAR_ARGS_NAME);
966:       assertEquals(46, Node.IS_NAMESPACE);
967:       assertEquals(54, Node.SLASH_V);
968:       assertEquals(43, Node.IS_CONSTANT_NAME);
969:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
970:       assertEquals(29, Node.JSDOC_INFO_PROP);
971:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
972:       assertEquals(47, Node.IS_DISPATCHER);
973:       assertEquals(2, Node.POST_FLAG);
974:       assertEquals(53, Node.INPUT_ID);
975:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
976:       assertEquals(32, Node.INCRDECR_PROP);
977:       assertEquals(55, Node.INFERRED_FUNCTION);
978:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
979:       assertEquals(12, Node.COLUMN_BITS);
980:       assertEquals(36, Node.QUOTED_PROP);
981:       assertEquals(4095, Node.COLUMN_MASK);
982:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
983:       assertEquals(56, Node.CHANGE_TIME);
984:       assertEquals(37, Node.OPT_ARG_NAME);
985:       assertEquals(48, Node.DIRECTIVES);
986:       assertEquals(49, Node.DIRECT_EVAL);
987:       assertNotNull(iterable0);
988:   }
989: }
RegularFileObject[/tmp/EvoSuite_172_1628161953280/com/google/javascript/rhino/Node_172_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:12:33 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_172_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_172_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_172_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.javascript.rhino.jstype.NamedType",
333:       "com.google.javascript.rhino.jstype.TemplatizedType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.javascript.rhino.JSTypeExpression",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.InputId",
348:       "com.google.javascript.rhino.jstype.JSType$TypePair",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.Platform",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
365:       "com.google.common.collect.Sets$ImprovedAbstractSet",
366:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
367:       "com.google.common.collect.Hashing",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet"
369:     );
370:   }
371: }

[MASTER] 11:12:33.364 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("MHu;l");
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node0);

Node node1 = Node.newNumber((-211.44086307265744));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertEquals(39, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertNotNull(node1);

Node node2 = new Node(55, node1, 102, 1);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertEquals(39, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertTrue(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isFalse());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isVoid());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isObjectLit());
assertEquals(417793, node2.getSourcePosition());
assertFalse(node2.isGetProp());
assertEquals(1, node2.getCharno());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isContinue());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNumber());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertEquals(55, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertEquals(102, node2.getLineno());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node2);

Node node3 = Node.newNumber((double) 47);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertNotSame(node3, node1);
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertFalse(node3.isIf());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isDebugger());
assertFalse(node3.isNE());
assertFalse(node3.isTrue());
assertFalse(node3.isIn());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFunction());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVar());
assertFalse(node3.isInc());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isWith());
assertEquals(39, node3.getType());
assertFalse(node3.isFor());
assertFalse(node3.isBlock());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.hasOneChild());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isLabelName());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isLabel());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isString());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertTrue(node3.isNumber());
assertFalse(node3.isGetProp());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isWhile());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node3);

boolean boolean0 = node0.isDo();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(boolean0);

boolean boolean1 = node1.isOnlyModifiesThisCall();
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertNotSame(node1, node3);
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertEquals(39, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(boolean1);

Node node4 = Node.newString(0, "MHu;l");
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertNotSame(node4, node0);
assertFalse(node4.isArrayLit());
assertFalse(node4.isTry());
assertFalse(node4.isEmpty());
assertFalse(node4.isRegExp());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isFunction());
assertFalse(node4.isFor());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isCase());
assertFalse(node4.isString());
assertFalse(node4.isSwitch());
assertFalse(node4.isDebugger());
assertFalse(node4.isGetterDef());
assertFalse(node4.isStringKey());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isParamList());
assertEquals(0, node4.getType());
assertFalse(node4.isNew());
assertFalse(node4.isCall());
assertFalse(node4.isAdd());
assertFalse(node4.isComma());
assertFalse(node4.isDo());
assertFalse(node4.isWhile());
assertFalse(node4.isVar());
assertFalse(node4.isOr());
assertFalse(node4.isNull());
assertFalse(node4.isBreak());
assertFalse(node4.isVoid());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());
assertFalse(node4.isTrue());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetElem());
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.isCast());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isAssign());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isReturn());
assertFalse(node4.isObjectLit());
assertFalse(node4.isContinue());
assertFalse(node4.isGetProp());
assertFalse(node4.isNumber());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isLabelName());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isInc());
assertFalse(node4.isBlock());
assertFalse(node4.isThis());
assertFalse(node4.isThrow());
assertFalse(node4.isInstanceOf());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isIn());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isWith());
assertFalse(node4.isSetterDef());
assertFalse(node4.isCatch());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(node4);

Iterable<Node> iterable0 = node4.children();
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertNotSame(node4, node0);
assertFalse(node4.isArrayLit());
assertFalse(node4.isTry());
assertFalse(node4.isEmpty());
assertFalse(node4.isRegExp());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isFunction());
assertFalse(node4.isFor());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isCase());
assertFalse(node4.isString());
assertFalse(node4.isSwitch());
assertFalse(node4.isDebugger());
assertFalse(node4.isGetterDef());
assertFalse(node4.isStringKey());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isParamList());
assertEquals(0, node4.getType());
assertFalse(node4.isNew());
assertFalse(node4.isCall());
assertFalse(node4.isAdd());
assertFalse(node4.isComma());
assertFalse(node4.isDo());
assertFalse(node4.isWhile());
assertFalse(node4.isVar());
assertFalse(node4.isOr());
assertFalse(node4.isNull());
assertFalse(node4.isBreak());
assertFalse(node4.isVoid());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());
assertFalse(node4.isTrue());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetElem());
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.isCast());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isAssign());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isReturn());
assertFalse(node4.isObjectLit());
assertFalse(node4.isContinue());
assertFalse(node4.isGetProp());
assertFalse(node4.isNumber());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isLabelName());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isInc());
assertFalse(node4.isBlock());
assertFalse(node4.isThis());
assertFalse(node4.isThrow());
assertFalse(node4.isInstanceOf());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isIn());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isWith());
assertFalse(node4.isSetterDef());
assertFalse(node4.isCatch());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(iterable0.contains(node2));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(iterable0);


[MASTER] 11:12:36.442 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_184_1628161956114/com/google/javascript/rhino/Node_184_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_184_1628161956114/com/google/javascript/rhino/Node_184_tmp__ESTest_scaffolding.java]]
[MASTER] 11:12:36.442 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:36.442 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:36.443 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2455
[MASTER] 11:12:36.445 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_184_1628161956114/com/google/javascript/rhino/Node_184_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:12:36 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_184_tmp__ESTest extends Node_184_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber((double) (-219), (-219), 0);
21:       assertFalse(node0.isTypeOf());
22:       assertFalse(node0.isAssignAdd());
23:       assertFalse(node0.isReturn());
24:       assertFalse(node0.isOr());
25:       assertFalse(node0.isAssign());
26:       assertEquals((-1), node0.getSourcePosition());
27:       assertFalse(node0.isDec());
28:       assertFalse(node0.isLabel());
29:       assertFalse(node0.hasChildren());
30:       assertFalse(node0.hasMoreThanOneChild());
31:       assertFalse(node0.isCast());
32:       assertFalse(node0.isContinue());
33:       assertEquals((-1), node0.getLineno());
34:       assertFalse(node0.isLabelName());
35:       assertFalse(node0.isGetElem());
36:       assertFalse(node0.isVar());
37:       assertFalse(node0.isAdd());
38:       assertFalse(node0.isDo());
39:       assertFalse(node0.isNew());
40:       assertFalse(node0.isParamList());
41:       assertFalse(node0.isSetterDef());
42:       assertFalse(node0.isThis());
43:       assertEquals(0, node0.getChildCount());
44:       assertFalse(node0.isCatch());
45:       assertFalse(node0.isStringKey());
46:       assertFalse(node0.isInstanceOf());
47:       assertFalse(node0.isSwitch());
48:       assertFalse(node0.isRegExp());
49:       assertFalse(node0.isScript());
50:       assertFalse(node0.isWith());
51:       assertFalse(node0.isBlock());
52:       assertFalse(node0.isHook());
53:       assertEquals(39, node0.getType());
54:       assertEquals((-1), node0.getCharno());
55:       assertFalse(node0.isTry());
56:       assertFalse(node0.hasOneChild());
57:       assertFalse(node0.isCase());
58:       assertFalse(node0.isNE());
59:       assertFalse(node0.isIf());
60:       assertFalse(node0.isFor());
61:       assertFalse(node0.isGetterDef());
62:       assertFalse(node0.isDelProp());
63:       assertFalse(node0.isArrayLit());
64:       assertFalse(node0.isFunction());
65:       assertFalse(node0.isInc());
66:       assertFalse(node0.isVoid());
67:       assertFalse(node0.isTrue());
68:       assertFalse(node0.isDefaultCase());
69:       assertFalse(node0.isThrow());
70:       assertFalse(node0.isIn());
71:       assertFalse(node0.isEmpty());
72:       assertFalse(node0.isComma());
73:       assertFalse(node0.isNull());
74:       assertFalse(node0.isCall());
75:       assertFalse(node0.isFalse());
76:       assertFalse(node0.isAnd());
77:       assertFalse(node0.isName());
78:       assertFalse(node0.isBreak());
79:       assertFalse(node0.isExprResult());
80:       assertFalse(node0.isString());
81:       assertFalse(node0.isWhile());
82:       assertFalse(node0.isNot());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isObjectLit());
85:       assertTrue(node0.isNumber());
86:       assertFalse(node0.isGetProp());
87:       assertEquals(48, Node.DIRECTIVES);
88:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
89:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
90:       assertEquals(40, Node.ORIGINALNAME_PROP);
91:       assertEquals(4095, Node.COLUMN_MASK);
92:       assertEquals(52, Node.LENGTH);
93:       assertEquals(53, Node.INPUT_ID);
94:       assertEquals(57, Node.REFLECTED_OBJECT);
95:       assertEquals(57, Node.LAST_PROP);
96:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
97:       assertEquals(29, Node.JSDOC_INFO_PROP);
98:       assertEquals(15, Node.NO_SIDE_EFFECTS);
99:       assertEquals(36, Node.QUOTED_PROP);
100:       assertEquals(55, Node.INFERRED_FUNCTION);
101:       assertEquals(8, Node.FLAG_NO_THROWS);
102:       assertEquals(39, Node.EMPTY_BLOCK);
103:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
104:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
105:       assertEquals(32, Node.INCRDECR_PROP);
106:       assertEquals(46, Node.IS_NAMESPACE);
107:       assertEquals(51, Node.STATIC_SOURCE_FILE);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(12, Node.COLUMN_BITS);
110:       assertEquals(56, Node.CHANGE_TIME);
111:       assertEquals(30, Node.VAR_ARGS_NAME);
112:       assertEquals(49, Node.DIRECT_EVAL);
113:       assertEquals(47, Node.IS_DISPATCHER);
114:       assertEquals(2, Node.POST_FLAG);
115:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
116:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
117:       assertEquals(54, Node.SLASH_V);
118:       assertEquals(43, Node.IS_CONSTANT_NAME);
119:       assertEquals(50, Node.FREE_CALL);
120:       assertEquals(1, Node.DECR_FLAG);
121:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
122:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
123:       
124:       Node node1 = new Node((-1));
125:       assertFalse(node1.equals((Object)node0));
126:       assertFalse(node1.isThis());
127:       assertFalse(node1.isComma());
128:       assertFalse(node1.isAnd());
129:       assertFalse(node1.isWith());
130:       assertFalse(node1.isFalse());
131:       assertFalse(node1.isInstanceOf());
132:       assertFalse(node1.isBreak());
133:       assertFalse(node1.isExprResult());
134:       assertFalse(node1.hasOneChild());
135:       assertFalse(node1.isSwitch());
136:       assertEquals((-1), node1.getCharno());
137:       assertFalse(node1.isHook());
138:       assertFalse(node1.isNot());
139:       assertFalse(node1.isCase());
140:       assertFalse(node1.isString());
141:       assertFalse(node1.isNumber());
142:       assertFalse(node1.isObjectLit());
143:       assertFalse(node1.isGetProp());
144:       assertFalse(node1.isScript());
145:       assertEquals((-1), node1.getLineno());
146:       assertFalse(node1.isIn());
147:       assertFalse(node1.isNE());
148:       assertEquals((-1), node1.getSourcePosition());
149:       assertFalse(node1.isIf());
150:       assertFalse(node1.hasMoreThanOneChild());
151:       assertFalse(node1.isCast());
152:       assertFalse(node1.isContinue());
153:       assertFalse(node1.isFunction());
154:       assertFalse(node1.isThrow());
155:       assertFalse(node1.isSetterDef());
156:       assertFalse(node1.isInc());
157:       assertEquals(0, node1.getChildCount());
158:       assertFalse(node1.isParamList());
159:       assertFalse(node1.isNull());
160:       assertFalse(node1.isRegExp());
161:       assertFalse(node1.isName());
162:       assertFalse(node1.isCatch());
163:       assertFalse(node1.isCall());
164:       assertEquals((-1), node1.getType());
165:       assertFalse(node1.isTry());
166:       assertFalse(node1.isDebugger());
167:       assertFalse(node1.isStringKey());
168:       assertFalse(node1.isBlock());
169:       assertFalse(node1.isFor());
170:       assertFalse(node1.isWhile());
171:       assertFalse(node1.isGetterDef());
172:       assertFalse(node1.isAssignAdd());
173:       assertFalse(node1.isOr());
174:       assertFalse(node1.isReturn());
175:       assertFalse(node1.isLabel());
176:       assertFalse(node1.hasChildren());
177:       assertFalse(node1.isLabelName());
178:       assertFalse(node1.isAssign());
179:       assertFalse(node1.isDec());
180:       assertFalse(node1.isTypeOf());
181:       assertFalse(node1.isDelProp());
182:       assertFalse(node1.isArrayLit());
183:       assertFalse(node1.isGetElem());
184:       assertFalse(node1.isNew());
185:       assertFalse(node1.isVoid());
186:       assertFalse(node1.isVar());
187:       assertFalse(node1.isTrue());
188:       assertFalse(node1.isEmpty());
189:       assertFalse(node1.isDo());
190:       assertFalse(node1.isDefaultCase());
191:       assertFalse(node1.isAdd());
192:       assertEquals(51, Node.STATIC_SOURCE_FILE);
193:       assertEquals(46, Node.IS_NAMESPACE);
194:       assertEquals(12, Node.COLUMN_BITS);
195:       assertEquals(49, Node.DIRECT_EVAL);
196:       assertEquals(57, Node.LAST_PROP);
197:       assertEquals(1, Node.DECR_FLAG);
198:       assertEquals(32, Node.INCRDECR_PROP);
199:       assertEquals(2, Node.POST_FLAG);
200:       assertEquals(37, Node.OPT_ARG_NAME);
201:       assertEquals(47, Node.IS_DISPATCHER);
202:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
203:       assertEquals(30, Node.VAR_ARGS_NAME);
204:       assertEquals(40, Node.ORIGINALNAME_PROP);
205:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
206:       assertEquals(43, Node.IS_CONSTANT_NAME);
207:       assertEquals(54, Node.SLASH_V);
208:       assertEquals(50, Node.FREE_CALL);
209:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
210:       assertEquals(55, Node.INFERRED_FUNCTION);
211:       assertEquals(4095, Node.COLUMN_MASK);
212:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
213:       assertEquals(48, Node.DIRECTIVES);
214:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
216:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
217:       assertEquals(57, Node.REFLECTED_OBJECT);
218:       assertEquals(8, Node.FLAG_NO_THROWS);
219:       assertEquals(39, Node.EMPTY_BLOCK);
220:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
221:       assertEquals(56, Node.CHANGE_TIME);
222:       assertEquals(36, Node.QUOTED_PROP);
223:       assertEquals(15, Node.NO_SIDE_EFFECTS);
224:       assertEquals(53, Node.INPUT_ID);
225:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
226:       assertEquals(29, Node.JSDOC_INFO_PROP);
227:       assertEquals(52, Node.LENGTH);
228:       
229:       boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
230:       assertFalse(node0.equals((Object)node1));
231:       assertFalse(node0.isTypeOf());
232:       assertFalse(node0.isAssignAdd());
233:       assertFalse(node0.isReturn());
234:       assertFalse(node0.isOr());
235:       assertFalse(node0.isAssign());
236:       assertEquals((-1), node0.getSourcePosition());
237:       assertFalse(node0.isDec());
238:       assertFalse(node0.isLabel());
239:       assertFalse(node0.hasChildren());
240:       assertFalse(node0.hasMoreThanOneChild());
241:       assertFalse(node0.isCast());
242:       assertFalse(node0.isContinue());
243:       assertEquals((-1), node0.getLineno());
244:       assertFalse(node0.isLabelName());
245:       assertFalse(node0.isGetElem());
246:       assertFalse(node0.isVar());
247:       assertFalse(node0.isAdd());
248:       assertFalse(node0.isDo());
249:       assertFalse(node0.isNew());
250:       assertFalse(node0.isParamList());
251:       assertFalse(node0.isSetterDef());
252:       assertFalse(node0.isThis());
253:       assertEquals(0, node0.getChildCount());
254:       assertFalse(node0.isCatch());
255:       assertFalse(node0.isStringKey());
256:       assertFalse(node0.isInstanceOf());
257:       assertFalse(node0.isSwitch());
258:       assertFalse(node0.isRegExp());
259:       assertFalse(node0.isScript());
260:       assertFalse(node0.isWith());
261:       assertFalse(node0.isBlock());
262:       assertFalse(node0.isHook());
263:       assertEquals(39, node0.getType());
264:       assertEquals((-1), node0.getCharno());
265:       assertFalse(node0.isTry());
266:       assertFalse(node0.hasOneChild());
267:       assertFalse(node0.isCase());
268:       assertFalse(node0.isNE());
269:       assertFalse(node0.isIf());
270:       assertFalse(node0.isFor());
271:       assertFalse(node0.isGetterDef());
272:       assertFalse(node0.isDelProp());
273:       assertFalse(node0.isArrayLit());
274:       assertFalse(node0.isFunction());
275:       assertFalse(node0.isInc());
276:       assertFalse(node0.isVoid());
277:       assertFalse(node0.isTrue());
278:       assertFalse(node0.isDefaultCase());
279:       assertFalse(node0.isThrow());
280:       assertFalse(node0.isIn());
281:       assertFalse(node0.isEmpty());
282:       assertFalse(node0.isComma());
283:       assertFalse(node0.isNull());
284:       assertFalse(node0.isCall());
285:       assertFalse(node0.isFalse());
286:       assertFalse(node0.isAnd());
287:       assertFalse(node0.isName());
288:       assertFalse(node0.isBreak());
289:       assertFalse(node0.isExprResult());
290:       assertFalse(node0.isString());
291:       assertFalse(node0.isWhile());
292:       assertFalse(node0.isNot());
293:       assertFalse(node0.isDebugger());
294:       assertFalse(node0.isObjectLit());
295:       assertTrue(node0.isNumber());
296:       assertFalse(node0.isGetProp());
297:       assertEquals(48, Node.DIRECTIVES);
298:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
299:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
300:       assertEquals(40, Node.ORIGINALNAME_PROP);
301:       assertEquals(4095, Node.COLUMN_MASK);
302:       assertEquals(52, Node.LENGTH);
303:       assertEquals(53, Node.INPUT_ID);
304:       assertEquals(57, Node.REFLECTED_OBJECT);
305:       assertEquals(57, Node.LAST_PROP);
306:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
307:       assertEquals(29, Node.JSDOC_INFO_PROP);
308:       assertEquals(15, Node.NO_SIDE_EFFECTS);
309:       assertEquals(36, Node.QUOTED_PROP);
310:       assertEquals(55, Node.INFERRED_FUNCTION);
311:       assertEquals(8, Node.FLAG_NO_THROWS);
312:       assertEquals(39, Node.EMPTY_BLOCK);
313:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
314:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
315:       assertEquals(32, Node.INCRDECR_PROP);
316:       assertEquals(46, Node.IS_NAMESPACE);
317:       assertEquals(51, Node.STATIC_SOURCE_FILE);
318:       assertEquals(37, Node.OPT_ARG_NAME);
319:       assertEquals(12, Node.COLUMN_BITS);
320:       assertEquals(56, Node.CHANGE_TIME);
321:       assertEquals(30, Node.VAR_ARGS_NAME);
322:       assertEquals(49, Node.DIRECT_EVAL);
323:       assertEquals(47, Node.IS_DISPATCHER);
324:       assertEquals(2, Node.POST_FLAG);
325:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
326:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
327:       assertEquals(54, Node.SLASH_V);
328:       assertEquals(43, Node.IS_CONSTANT_NAME);
329:       assertEquals(50, Node.FREE_CALL);
330:       assertEquals(1, Node.DECR_FLAG);
331:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
332:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
333:       
334:       Node node2 = new Node(12, 31, 2);
335:       assertFalse(node2.equals((Object)node1));
336:       assertFalse(node2.equals((Object)node0));
337:       assertFalse(node2.isWhile());
338:       assertFalse(node2.isDo());
339:       assertFalse(node2.isContinue());
340:       assertFalse(node2.isNew());
341:       assertFalse(node2.isAdd());
342:       assertFalse(node2.isOr());
343:       assertFalse(node2.isStringKey());
344:       assertFalse(node2.isLabelName());
345:       assertFalse(node2.isCast());
346:       assertFalse(node2.isSetterDef());
347:       assertEquals(0, node2.getChildCount());
348:       assertFalse(node2.isAssignAdd());
349:       assertFalse(node2.isVar());
350:       assertFalse(node2.isLabel());
351:       assertEquals(2, node2.getCharno());
352:       assertFalse(node2.isNot());
353:       assertFalse(node2.isFunction());
354:       assertFalse(node2.isDefaultCase());
355:       assertFalse(node2.isVoid());
356:       assertFalse(node2.isExprResult());
357:       assertFalse(node2.isTrue());
358:       assertFalse(node2.isAnd());
359:       assertFalse(node2.isObjectLit());
360:       assertFalse(node2.isDebugger());
361:       assertFalse(node2.isNull());
362:       assertFalse(node2.isBreak());
363:       assertFalse(node2.isDelProp());
364:       assertFalse(node2.hasChildren());
365:       assertFalse(node2.isDec());
366:       assertFalse(node2.isAssign());
367:       assertFalse(node2.isName());
368:       assertFalse(node2.isTypeOf());
369:       assertFalse(node2.isCall());
370:       assertEquals(126978, node2.getSourcePosition());
371:       assertFalse(node2.isGetElem());
372:       assertFalse(node2.isGetProp());
373:       assertEquals(12, node2.getType());
374:       assertFalse(node2.isComma());
375:       assertFalse(node2.isReturn());
376:       assertFalse(node2.isString());
377:       assertFalse(node2.isSwitch());
378:       assertFalse(node2.isCase());
379:       assertFalse(node2.isInc());
380:       assertFalse(node2.isIn());
381:       assertFalse(node2.isNE());
382:       assertFalse(node2.isFalse());
383:       assertFalse(node2.isEmpty());
384:       assertFalse(node2.isArrayLit());
385:       assertFalse(node2.isThrow());
386:       assertFalse(node2.isRegExp());
387:       assertFalse(node2.isWith());
388:       assertFalse(node2.isCatch());
389:       assertFalse(node2.isScript());
390:       assertEquals(31, node2.getLineno());
391:       assertFalse(node2.isParamList());
392:       assertFalse(node2.isGetterDef());
393:       assertFalse(node2.isIf());
394:       assertFalse(node2.isNumber());
395:       assertFalse(node2.hasOneChild());
396:       assertFalse(node2.isInstanceOf());
397:       assertFalse(node2.isTry());
398:       assertFalse(node2.hasMoreThanOneChild());
399:       assertFalse(node2.isBlock());
400:       assertFalse(node2.isFor());
401:       assertFalse(node2.isHook());
402:       assertFalse(node2.isThis());
403:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
404:       assertEquals(36, Node.QUOTED_PROP);
405:       assertEquals(53, Node.INPUT_ID);
406:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
407:       assertEquals(56, Node.CHANGE_TIME);
408:       assertEquals(43, Node.IS_CONSTANT_NAME);
409:       assertEquals(2, Node.POST_FLAG);
410:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
411:       assertEquals(39, Node.EMPTY_BLOCK);
412:       assertEquals(47, Node.IS_DISPATCHER);
413:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
414:       assertEquals(8, Node.FLAG_NO_THROWS);
415:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
416:       assertEquals(55, Node.INFERRED_FUNCTION);
417:       assertEquals(29, Node.JSDOC_INFO_PROP);
418:       assertEquals(57, Node.LAST_PROP);
419:       assertEquals(54, Node.SLASH_V);
420:       assertEquals(15, Node.NO_SIDE_EFFECTS);
421:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
422:       assertEquals(30, Node.VAR_ARGS_NAME);
423:       assertEquals(52, Node.LENGTH);
424:       assertEquals(40, Node.ORIGINALNAME_PROP);
425:       assertEquals(51, Node.STATIC_SOURCE_FILE);
426:       assertEquals(57, Node.REFLECTED_OBJECT);
427:       assertEquals(46, Node.IS_NAMESPACE);
428:       assertEquals(49, Node.DIRECT_EVAL);
429:       assertEquals(37, Node.OPT_ARG_NAME);
430:       assertEquals(48, Node.DIRECTIVES);
431:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
432:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
433:       assertEquals(50, Node.FREE_CALL);
434:       assertEquals(4095, Node.COLUMN_MASK);
435:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
436:       assertEquals(1, Node.DECR_FLAG);
437:       assertEquals(12, Node.COLUMN_BITS);
438:       assertEquals(32, Node.INCRDECR_PROP);
439:       
440:       boolean boolean1 = node2.isNE();
441:       assertFalse(node2.equals((Object)node1));
442:       assertFalse(node2.equals((Object)node0));
443:       assertFalse(boolean1 == boolean0);
444:       assertNotSame(node2, node1);
445:       assertFalse(node2.isWhile());
446:       assertFalse(node2.isDo());
447:       assertFalse(node2.isContinue());
448:       assertFalse(node2.isNew());
449:       assertFalse(node2.isAdd());
450:       assertFalse(node2.isOr());
451:       assertFalse(node2.isStringKey());
452:       assertFalse(node2.isLabelName());
453:       assertFalse(node2.isCast());
454:       assertFalse(node2.isSetterDef());
455:       assertEquals(0, node2.getChildCount());
456:       assertFalse(node2.isAssignAdd());
457:       assertFalse(node2.isVar());
458:       assertFalse(node2.isLabel());
459:       assertEquals(2, node2.getCharno());
460:       assertFalse(node2.isNot());
461:       assertFalse(node2.isFunction());
462:       assertFalse(node2.isDefaultCase());
463:       assertFalse(node2.isVoid());
464:       assertFalse(node2.isExprResult());
465:       assertFalse(node2.isTrue());
466:       assertFalse(node2.isAnd());
467:       assertFalse(node2.isObjectLit());
468:       assertFalse(node2.isDebugger());
469:       assertFalse(node2.isNull());
470:       assertFalse(node2.isBreak());
471:       assertFalse(node2.isDelProp());
472:       assertFalse(node2.hasChildren());
473:       assertFalse(node2.isDec());
474:       assertFalse(node2.isAssign());
475:       assertFalse(node2.isName());
476:       assertFalse(node2.isTypeOf());
477:       assertFalse(node2.isCall());
478:       assertEquals(126978, node2.getSourcePosition());
479:       assertFalse(node2.isGetElem());
480:       assertFalse(node2.isGetProp());
481:       assertEquals(12, node2.getType());
482:       assertFalse(node2.isComma());
483:       assertFalse(node2.isReturn());
484:       assertFalse(node2.isString());
485:       assertFalse(node2.isSwitch());
486:       assertFalse(node2.isCase());
487:       assertFalse(node2.isInc());
488:       assertFalse(node2.isIn());
489:       assertFalse(node2.isNE());
490:       assertFalse(node2.isFalse());
491:       assertFalse(node2.isEmpty());
492:       assertFalse(node2.isArrayLit());
493:       assertFalse(node2.isThrow());
494:       assertFalse(node2.isRegExp());
495:       assertFalse(node2.isWith());
496:       assertFalse(node2.isCatch());
497:       assertFalse(node2.isScript());
498:       assertEquals(31, node2.getLineno());
499:       assertFalse(node2.isParamList());
500:       assertFalse(node2.isGetterDef());
501:       assertFalse(node2.isIf());
502:       assertFalse(node2.isNumber());
503:       assertFalse(node2.hasOneChild());
504:       assertFalse(node2.isInstanceOf());
505:       assertFalse(node2.isTry());
506:       assertFalse(node2.hasMoreThanOneChild());
507:       assertFalse(node2.isBlock());
508:       assertFalse(node2.isFor());
509:       assertFalse(node2.isHook());
510:       assertFalse(node2.isThis());
511:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
512:       assertEquals(36, Node.QUOTED_PROP);
513:       assertEquals(53, Node.INPUT_ID);
514:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
515:       assertEquals(56, Node.CHANGE_TIME);
516:       assertEquals(43, Node.IS_CONSTANT_NAME);
517:       assertEquals(2, Node.POST_FLAG);
518:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
519:       assertEquals(39, Node.EMPTY_BLOCK);
520:       assertEquals(47, Node.IS_DISPATCHER);
521:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
522:       assertEquals(8, Node.FLAG_NO_THROWS);
523:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
524:       assertEquals(55, Node.INFERRED_FUNCTION);
525:       assertEquals(29, Node.JSDOC_INFO_PROP);
526:       assertEquals(57, Node.LAST_PROP);
527:       assertEquals(54, Node.SLASH_V);
528:       assertEquals(15, Node.NO_SIDE_EFFECTS);
529:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
530:       assertEquals(30, Node.VAR_ARGS_NAME);
531:       assertEquals(52, Node.LENGTH);
532:       assertEquals(40, Node.ORIGINALNAME_PROP);
533:       assertEquals(51, Node.STATIC_SOURCE_FILE);
534:       assertEquals(57, Node.REFLECTED_OBJECT);
535:       assertEquals(46, Node.IS_NAMESPACE);
536:       assertEquals(49, Node.DIRECT_EVAL);
537:       assertEquals(37, Node.OPT_ARG_NAME);
538:       assertEquals(48, Node.DIRECTIVES);
539:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
540:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
541:       assertEquals(50, Node.FREE_CALL);
542:       assertEquals(4095, Node.COLUMN_MASK);
543:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
544:       assertEquals(1, Node.DECR_FLAG);
545:       assertEquals(12, Node.COLUMN_BITS);
546:       assertEquals(32, Node.INCRDECR_PROP);
547:       
548:       boolean boolean2 = node2.mayMutateGlobalStateOrThrow();
549:       assertFalse(node2.equals((Object)node1));
550:       assertFalse(node2.equals((Object)node0));
551:       assertFalse(boolean2 == boolean1);
552:       assertTrue(boolean2 == boolean0);
553:       assertNotSame(node2, node1);
554:       assertFalse(node2.isWhile());
555:       assertFalse(node2.isDo());
556:       assertFalse(node2.isContinue());
557:       assertFalse(node2.isNew());
558:       assertFalse(node2.isAdd());
559:       assertFalse(node2.isOr());
560:       assertFalse(node2.isStringKey());
561:       assertFalse(node2.isLabelName());
562:       assertFalse(node2.isCast());
563:       assertFalse(node2.isSetterDef());
564:       assertEquals(0, node2.getChildCount());
565:       assertFalse(node2.isAssignAdd());
566:       assertFalse(node2.isVar());
567:       assertFalse(node2.isLabel());
568:       assertEquals(2, node2.getCharno());
569:       assertFalse(node2.isNot());
570:       assertFalse(node2.isFunction());
571:       assertFalse(node2.isDefaultCase());
572:       assertFalse(node2.isVoid());
573:       assertFalse(node2.isExprResult());
574:       assertFalse(node2.isTrue());
575:       assertFalse(node2.isAnd());
576:       assertFalse(node2.isObjectLit());
577:       assertFalse(node2.isDebugger());
578:       assertFalse(node2.isNull());
579:       assertFalse(node2.isBreak());
580:       assertFalse(node2.isDelProp());
581:       assertFalse(node2.hasChildren());
582:       assertFalse(node2.isDec());
583:       assertFalse(node2.isAssign());
584:       assertFalse(node2.isName());
585:       assertFalse(node2.isTypeOf());
586:       assertFalse(node2.isCall());
587:       assertEquals(126978, node2.getSourcePosition());
588:       assertFalse(node2.isGetElem());
589:       assertFalse(node2.isGetProp());
590:       assertEquals(12, node2.getType());
591:       assertFalse(node2.isComma());
592:       assertFalse(node2.isReturn());
593:       assertFalse(node2.isString());
594:       assertFalse(node2.isSwitch());
595:       assertFalse(node2.isCase());
596:       assertFalse(node2.isInc());
597:       assertFalse(node2.isIn());
598:       assertFalse(node2.isNE());
599:       assertFalse(node2.isFalse());
600:       assertFalse(node2.isEmpty());
601:       assertFalse(node2.isArrayLit());
602:       assertFalse(node2.isThrow());
603:       assertFalse(node2.isRegExp());
604:       assertFalse(node2.isWith());
605:       assertFalse(node2.isCatch());
606:       assertFalse(node2.isScript());
607:       assertEquals(31, node2.getLineno());
608:       assertFalse(node2.isParamList());
609:       assertFalse(node2.isGetterDef());
610:       assertFalse(node2.isIf());
611:       assertFalse(node2.isNumber());
612:       assertFalse(node2.hasOneChild());
613:       assertFalse(node2.isInstanceOf());
614:       assertFalse(node2.isTry());
615:       assertFalse(node2.hasMoreThanOneChild());
616:       assertFalse(node2.isBlock());
617:       assertFalse(node2.isFor());
618:       assertFalse(node2.isHook());
619:       assertFalse(node2.isThis());
620:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
621:       assertEquals(36, Node.QUOTED_PROP);
622:       assertEquals(53, Node.INPUT_ID);
623:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
624:       assertEquals(56, Node.CHANGE_TIME);
625:       assertEquals(43, Node.IS_CONSTANT_NAME);
626:       assertEquals(2, Node.POST_FLAG);
627:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
628:       assertEquals(39, Node.EMPTY_BLOCK);
629:       assertEquals(47, Node.IS_DISPATCHER);
630:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
631:       assertEquals(8, Node.FLAG_NO_THROWS);
632:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
633:       assertEquals(55, Node.INFERRED_FUNCTION);
634:       assertEquals(29, Node.JSDOC_INFO_PROP);
635:       assertEquals(57, Node.LAST_PROP);
636:       assertEquals(54, Node.SLASH_V);
637:       assertEquals(15, Node.NO_SIDE_EFFECTS);
638:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
639:       assertEquals(30, Node.VAR_ARGS_NAME);
640:       assertEquals(52, Node.LENGTH);
641:       assertEquals(40, Node.ORIGINALNAME_PROP);
642:       assertEquals(51, Node.STATIC_SOURCE_FILE);
643:       assertEquals(57, Node.REFLECTED_OBJECT);
644:       assertEquals(46, Node.IS_NAMESPACE);
645:       assertEquals(49, Node.DIRECT_EVAL);
646:       assertEquals(37, Node.OPT_ARG_NAME);
647:       assertEquals(48, Node.DIRECTIVES);
648:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
649:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
650:       assertEquals(50, Node.FREE_CALL);
651:       assertEquals(4095, Node.COLUMN_MASK);
652:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
653:       assertEquals(1, Node.DECR_FLAG);
654:       assertEquals(12, Node.COLUMN_BITS);
655:       assertEquals(32, Node.INCRDECR_PROP);
656:       
657:       boolean boolean3 = node2.isOnlyModifiesArgumentsCall();
658:       assertFalse(node2.equals((Object)node1));
659:       assertFalse(node2.equals((Object)node0));
660:       assertTrue(boolean3 == boolean1);
661:       assertFalse(boolean3 == boolean0);
662:       assertFalse(boolean3 == boolean2);
663:       assertNotSame(node2, node1);
664:       assertFalse(node2.isWhile());
665:       assertFalse(node2.isDo());
666:       assertFalse(node2.isContinue());
667:       assertFalse(node2.isNew());
668:       assertFalse(node2.isAdd());
669:       assertFalse(node2.isOr());
670:       assertFalse(node2.isStringKey());
671:       assertFalse(node2.isLabelName());
672:       assertFalse(node2.isCast());
673:       assertFalse(node2.isSetterDef());
674:       assertEquals(0, node2.getChildCount());
675:       assertFalse(node2.isAssignAdd());
676:       assertFalse(node2.isVar());
677:       assertFalse(node2.isLabel());
678:       assertEquals(2, node2.getCharno());
679:       assertFalse(node2.isNot());
680:       assertFalse(node2.isFunction());
681:       assertFalse(node2.isDefaultCase());
682:       assertFalse(node2.isVoid());
683:       assertFalse(node2.isExprResult());
684:       assertFalse(node2.isTrue());
685:       assertFalse(node2.isAnd());
686:       assertFalse(node2.isObjectLit());
687:       assertFalse(node2.isDebugger());
688:       assertFalse(node2.isNull());
689:       assertFalse(node2.isBreak());
690:       assertFalse(node2.isDelProp());
691:       assertFalse(node2.hasChildren());
692:       assertFalse(node2.isDec());
693:       assertFalse(node2.isAssign());
694:       assertFalse(node2.isName());
695:       assertFalse(node2.isTypeOf());
696:       assertFalse(node2.isCall());
697:       assertEquals(126978, node2.getSourcePosition());
698:       assertFalse(node2.isGetElem());
699:       assertFalse(node2.isGetProp());
700:       assertEquals(12, node2.getType());
701:       assertFalse(node2.isComma());
702:       assertFalse(node2.isReturn());
703:       assertFalse(node2.isString());
704:       assertFalse(node2.isSwitch());
705:       assertFalse(node2.isCase());
706:       assertFalse(node2.isInc());
707:       assertFalse(node2.isIn());
708:       assertFalse(node2.isNE());
709:       assertFalse(node2.isFalse());
710:       assertFalse(node2.isEmpty());
711:       assertFalse(node2.isArrayLit());
712:       assertFalse(node2.isThrow());
713:       assertFalse(node2.isRegExp());
714:       assertFalse(node2.isWith());
715:       assertFalse(node2.isCatch());
716:       assertFalse(node2.isScript());
717:       assertEquals(31, node2.getLineno());
718:       assertFalse(node2.isParamList());
719:       assertFalse(node2.isGetterDef());
720:       assertFalse(node2.isIf());
721:       assertFalse(node2.isNumber());
722:       assertFalse(node2.hasOneChild());
723:       assertFalse(node2.isInstanceOf());
724:       assertFalse(node2.isTry());
725:       assertFalse(node2.hasMoreThanOneChild());
726:       assertFalse(node2.isBlock());
727:       assertFalse(node2.isFor());
728:       assertFalse(node2.isHook());
729:       assertFalse(node2.isThis());
730:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
731:       assertEquals(36, Node.QUOTED_PROP);
732:       assertEquals(53, Node.INPUT_ID);
733:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
734:       assertEquals(56, Node.CHANGE_TIME);
735:       assertEquals(43, Node.IS_CONSTANT_NAME);
736:       assertEquals(2, Node.POST_FLAG);
737:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
738:       assertEquals(39, Node.EMPTY_BLOCK);
739:       assertEquals(47, Node.IS_DISPATCHER);
740:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
741:       assertEquals(8, Node.FLAG_NO_THROWS);
742:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
743:       assertEquals(55, Node.INFERRED_FUNCTION);
744:       assertEquals(29, Node.JSDOC_INFO_PROP);
745:       assertEquals(57, Node.LAST_PROP);
746:       assertEquals(54, Node.SLASH_V);
747:       assertEquals(15, Node.NO_SIDE_EFFECTS);
748:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
749:       assertEquals(30, Node.VAR_ARGS_NAME);
750:       assertEquals(52, Node.LENGTH);
751:       assertEquals(40, Node.ORIGINALNAME_PROP);
752:       assertEquals(51, Node.STATIC_SOURCE_FILE);
753:       assertEquals(57, Node.REFLECTED_OBJECT);
754:       assertEquals(46, Node.IS_NAMESPACE);
755:       assertEquals(49, Node.DIRECT_EVAL);
756:       assertEquals(37, Node.OPT_ARG_NAME);
757:       assertEquals(48, Node.DIRECTIVES);
758:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
759:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
760:       assertEquals(50, Node.FREE_CALL);
761:       assertEquals(4095, Node.COLUMN_MASK);
762:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
763:       assertEquals(1, Node.DECR_FLAG);
764:       assertEquals(12, Node.COLUMN_BITS);
765:       assertEquals(32, Node.INCRDECR_PROP);
766:       
767:       node0.getQualifiedName();
768:       assertFalse(node0.equals((Object)node1));
769:       assertFalse(node0.equals((Object)node2));
770:       assertFalse(node0.isTypeOf());
771:       assertFalse(node0.isAssignAdd());
772:       assertFalse(node0.isReturn());
773:       assertFalse(node0.isOr());
774:       assertFalse(node0.isAssign());
775:       assertEquals((-1), node0.getSourcePosition());
776:       assertFalse(node0.isDec());
777:       assertFalse(node0.isLabel());
778:       assertFalse(node0.hasChildren());
779:       assertFalse(node0.hasMoreThanOneChild());
780:       assertFalse(node0.isCast());
781:       assertFalse(node0.isContinue());
782:       assertEquals((-1), node0.getLineno());
783:       assertFalse(node0.isLabelName());
784:       assertFalse(node0.isGetElem());
785:       assertFalse(node0.isVar());
786:       assertFalse(node0.isAdd());
787:       assertFalse(node0.isDo());
788:       assertFalse(node0.isNew());
789:       assertFalse(node0.isParamList());
790:       assertFalse(node0.isSetterDef());
791:       assertFalse(node0.isThis());
792:       assertEquals(0, node0.getChildCount());
793:       assertFalse(node0.isCatch());
794:       assertFalse(node0.isStringKey());
795:       assertFalse(node0.isInstanceOf());
796:       assertFalse(node0.isSwitch());
797:       assertFalse(node0.isRegExp());
798:       assertFalse(node0.isScript());
799:       assertFalse(node0.isWith());
800:       assertFalse(node0.isBlock());
801:       assertFalse(node0.isHook());
802:       assertEquals(39, node0.getType());
803:       assertEquals((-1), node0.getCharno());
804:       assertFalse(node0.isTry());
805:       assertFalse(node0.hasOneChild());
806:       assertFalse(node0.isCase());
807:       assertFalse(node0.isNE());
808:       assertFalse(node0.isIf());
809:       assertFalse(node0.isFor());
810:       assertFalse(node0.isGetterDef());
811:       assertFalse(node0.isDelProp());
812:       assertFalse(node0.isArrayLit());
813:       assertFalse(node0.isFunction());
814:       assertFalse(node0.isInc());
815:       assertFalse(node0.isVoid());
816:       assertFalse(node0.isTrue());
817:       assertFalse(node0.isDefaultCase());
818:       assertFalse(node0.isThrow());
819:       assertFalse(node0.isIn());
820:       assertFalse(node0.isEmpty());
821:       assertFalse(node0.isComma());
822:       assertFalse(node0.isNull());
823:       assertFalse(node0.isCall());
824:       assertFalse(node0.isFalse());
825:       assertFalse(node0.isAnd());
826:       assertFalse(node0.isName());
827:       assertFalse(node0.isBreak());
828:       assertFalse(node0.isExprResult());
829:       assertFalse(node0.isString());
830:       assertFalse(node0.isWhile());
831:       assertFalse(node0.isNot());
832:       assertFalse(node0.isDebugger());
833:       assertFalse(node0.isObjectLit());
834:       assertTrue(node0.isNumber());
835:       assertFalse(node0.isGetProp());
836:       assertEquals(48, Node.DIRECTIVES);
837:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
838:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
839:       assertEquals(40, Node.ORIGINALNAME_PROP);
840:       assertEquals(4095, Node.COLUMN_MASK);
841:       assertEquals(52, Node.LENGTH);
842:       assertEquals(53, Node.INPUT_ID);
843:       assertEquals(57, Node.REFLECTED_OBJECT);
844:       assertEquals(57, Node.LAST_PROP);
845:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
846:       assertEquals(29, Node.JSDOC_INFO_PROP);
847:       assertEquals(15, Node.NO_SIDE_EFFECTS);
848:       assertEquals(36, Node.QUOTED_PROP);
849:       assertEquals(55, Node.INFERRED_FUNCTION);
850:       assertEquals(8, Node.FLAG_NO_THROWS);
851:       assertEquals(39, Node.EMPTY_BLOCK);
852:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
853:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
854:       assertEquals(32, Node.INCRDECR_PROP);
855:       assertEquals(46, Node.IS_NAMESPACE);
856:       assertEquals(51, Node.STATIC_SOURCE_FILE);
857:       assertEquals(37, Node.OPT_ARG_NAME);
858:       assertEquals(12, Node.COLUMN_BITS);
859:       assertEquals(56, Node.CHANGE_TIME);
860:       assertEquals(30, Node.VAR_ARGS_NAME);
861:       assertEquals(49, Node.DIRECT_EVAL);
862:       assertEquals(47, Node.IS_DISPATCHER);
863:       assertEquals(2, Node.POST_FLAG);
864:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
865:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
866:       assertEquals(54, Node.SLASH_V);
867:       assertEquals(43, Node.IS_CONSTANT_NAME);
868:       assertEquals(50, Node.FREE_CALL);
869:       assertEquals(1, Node.DECR_FLAG);
870:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
871:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
872:       
873:       node0.setType(0);
874:       assertFalse(node0.equals((Object)node1));
875:       assertFalse(node0.equals((Object)node2));
876:       assertFalse(node0.isTypeOf());
877:       assertFalse(node0.isNumber());
878:       assertFalse(node0.isAssignAdd());
879:       assertFalse(node0.isReturn());
880:       assertFalse(node0.isOr());
881:       assertFalse(node0.isAssign());
882:       assertEquals((-1), node0.getSourcePosition());
883:       assertFalse(node0.isDec());
884:       assertFalse(node0.isLabel());
885:       assertFalse(node0.hasChildren());
886:       assertFalse(node0.hasMoreThanOneChild());
887:       assertFalse(node0.isCast());
888:       assertFalse(node0.isContinue());
889:       assertEquals((-1), node0.getLineno());
890:       assertFalse(node0.isLabelName());
891:       assertFalse(node0.isGetElem());
892:       assertFalse(node0.isVar());
893:       assertFalse(node0.isAdd());
894:       assertFalse(node0.isDo());
895:       assertFalse(node0.isNew());
896:       assertFalse(node0.isParamList());
897:       assertFalse(node0.isSetterDef());
898:       assertFalse(node0.isThis());
899:       assertEquals(0, node0.getChildCount());
900:       assertFalse(node0.isCatch());
901:       assertFalse(node0.isStringKey());
902:       assertFalse(node0.isInstanceOf());
903:       assertFalse(node0.isSwitch());
904:       assertFalse(node0.isRegExp());
905:       assertFalse(node0.isScript());
906:       assertFalse(node0.isWith());
907:       assertFalse(node0.isBlock());
908:       assertFalse(node0.isHook());
909:       assertEquals((-1), node0.getCharno());
910:       assertFalse(node0.isTry());
911:       assertFalse(node0.hasOneChild());
912:       assertFalse(node0.isCase());
913:       assertFalse(node0.isNE());
914:       assertFalse(node0.isIf());
915:       assertFalse(node0.isFor());
916:       assertFalse(node0.isGetterDef());
917:       assertFalse(node0.isDelProp());
918:       assertFalse(node0.isArrayLit());
919:       assertFalse(node0.isFunction());
920:       assertFalse(node0.isInc());
921:       assertFalse(node0.isVoid());
922:       assertFalse(node0.isTrue());
923:       assertFalse(node0.isDefaultCase());
924:       assertFalse(node0.isThrow());
925:       assertFalse(node0.isIn());
926:       assertFalse(node0.isEmpty());
927:       assertFalse(node0.isComma());
928:       assertFalse(node0.isNull());
929:       assertFalse(node0.isCall());
930:       assertFalse(node0.isFalse());
931:       assertFalse(node0.isAnd());
932:       assertFalse(node0.isName());
933:       assertEquals(0, node0.getType());
934:       assertFalse(node0.isBreak());
935:       assertFalse(node0.isExprResult());
936:       assertFalse(node0.isString());
937:       assertFalse(node0.isWhile());
938:       assertFalse(node0.isNot());
939:       assertFalse(node0.isDebugger());
940:       assertFalse(node0.isObjectLit());
941:       assertFalse(node0.isGetProp());
942:       assertEquals(48, Node.DIRECTIVES);
943:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
944:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
945:       assertEquals(40, Node.ORIGINALNAME_PROP);
946:       assertEquals(4095, Node.COLUMN_MASK);
947:       assertEquals(52, Node.LENGTH);
948:       assertEquals(53, Node.INPUT_ID);
949:       assertEquals(57, Node.REFLECTED_OBJECT);
950:       assertEquals(57, Node.LAST_PROP);
951:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
952:       assertEquals(29, Node.JSDOC_INFO_PROP);
953:       assertEquals(15, Node.NO_SIDE_EFFECTS);
954:       assertEquals(36, Node.QUOTED_PROP);
955:       assertEquals(55, Node.INFERRED_FUNCTION);
956:       assertEquals(8, Node.FLAG_NO_THROWS);
957:       assertEquals(39, Node.EMPTY_BLOCK);
958:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
959:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
960:       assertEquals(32, Node.INCRDECR_PROP);
961:       assertEquals(46, Node.IS_NAMESPACE);
962:       assertEquals(51, Node.STATIC_SOURCE_FILE);
963:       assertEquals(37, Node.OPT_ARG_NAME);
964:       assertEquals(12, Node.COLUMN_BITS);
965:       assertEquals(56, Node.CHANGE_TIME);
966:       assertEquals(30, Node.VAR_ARGS_NAME);
967:       assertEquals(49, Node.DIRECT_EVAL);
968:       assertEquals(47, Node.IS_DISPATCHER);
969:       assertEquals(2, Node.POST_FLAG);
970:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
971:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
972:       assertEquals(54, Node.SLASH_V);
973:       assertEquals(43, Node.IS_CONSTANT_NAME);
974:       assertEquals(50, Node.FREE_CALL);
975:       assertEquals(1, Node.DECR_FLAG);
976:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
977:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
978:       
979:       Node node3 = new Node(4095, node0, node2, node2, 56, 47);
980:       assertFalse(node0.equals((Object)node1));
981:       assertFalse(node0.equals((Object)node2));
982:       assertFalse(node2.equals((Object)node1));
983:       assertFalse(node2.equals((Object)node0));
984:       assertFalse(node3.equals((Object)node2));
985:       assertFalse(node3.equals((Object)node1));
986:       assertFalse(node3.equals((Object)node0));
987:       assertFalse(node0.isTypeOf());
988:       assertFalse(node0.isNumber());
989:       assertFalse(node0.isAssignAdd());
990:       assertFalse(node0.isReturn());
991:       assertFalse(node0.isOr());
992:       assertFalse(node0.isAssign());
993:       assertEquals((-1), node0.getSourcePosition());
994:       assertFalse(node0.isDec());
995:       assertFalse(node0.isLabel());
996:       assertFalse(node0.hasChildren());
997:       assertFalse(node0.hasMoreThanOneChild());
998:       assertFalse(node0.isCast());
999:       assertFalse(node0.isContinue());
1000:       assertEquals((-1), node0.getLineno());
1001:       assertFalse(node0.isLabelName());
1002:       assertFalse(node0.isGetElem());
1003:       assertFalse(node0.isVar());
1004:       assertFalse(node0.isAdd());
1005:       assertFalse(node0.isDo());
1006:       assertFalse(node0.isNew());
1007:       assertFalse(node0.isParamList());
1008:       assertFalse(node0.isSetterDef());
1009:       assertFalse(node0.isThis());
1010:       assertEquals(0, node0.getChildCount());
1011:       assertFalse(node0.isCatch());
1012:       assertFalse(node0.isStringKey());
1013:       assertFalse(node0.isInstanceOf());
1014:       assertFalse(node0.isSwitch());
1015:       assertFalse(node0.isRegExp());
1016:       assertFalse(node0.isScript());
1017:       assertFalse(node0.isWith());
1018:       assertFalse(node0.isBlock());
1019:       assertFalse(node0.isHook());
1020:       assertEquals((-1), node0.getCharno());
1021:       assertFalse(node0.isTry());
1022:       assertFalse(node0.hasOneChild());
1023:       assertFalse(node0.isCase());
1024:       assertFalse(node0.isNE());
1025:       assertFalse(node0.isIf());
1026:       assertFalse(node0.isFor());
1027:       assertFalse(node0.isGetterDef());
1028:       assertFalse(node0.isDelProp());
1029:       assertFalse(node0.isArrayLit());
1030:       assertFalse(node0.isFunction());
1031:       assertFalse(node0.isInc());
1032:       assertFalse(node0.isVoid());
1033:       assertFalse(node0.isTrue());
1034:       assertFalse(node0.isDefaultCase());
1035:       assertFalse(node0.isThrow());
1036:       assertFalse(node0.isIn());
1037:       assertFalse(node0.isEmpty());
1038:       assertFalse(node0.isComma());
1039:       assertFalse(node0.isNull());
1040:       assertFalse(node0.isCall());
1041:       assertFalse(node0.isFalse());
1042:       assertFalse(node0.isAnd());
1043:       assertFalse(node0.isName());
1044:       assertEquals(0, node0.getType());
1045:       assertFalse(node0.isBreak());
1046:       assertFalse(node0.isExprResult());
1047:       assertFalse(node0.isString());
1048:       assertFalse(node0.isWhile());
1049:       assertFalse(node0.isNot());
1050:       assertFalse(node0.isDebugger());
1051:       assertFalse(node0.isObjectLit());
1052:       assertFalse(node0.isGetProp());
1053:       assertFalse(node2.isWhile());
1054:       assertFalse(node2.isDo());
1055:       assertFalse(node2.isContinue());
1056:       assertFalse(node2.isNew());
1057:       assertFalse(node2.isAdd());
1058:       assertFalse(node2.isOr());
1059:       assertFalse(node2.isStringKey());
1060:       assertFalse(node2.isLabelName());
1061:       assertFalse(node2.isCast());
1062:       assertFalse(node2.isSetterDef());
1063:       assertEquals(0, node2.getChildCount());
1064:       assertFalse(node2.isAssignAdd());
1065:       assertFalse(node2.isVar());
1066:       assertFalse(node2.isLabel());
1067:       assertEquals(2, node2.getCharno());
1068:       assertFalse(node2.isNot());
1069:       assertFalse(node2.isFunction());
1070:       assertFalse(node2.isDefaultCase());
1071:       assertFalse(node2.isVoid());
1072:       assertFalse(node2.isExprResult());
1073:       assertFalse(node2.isTrue());
1074:       assertFalse(node2.isAnd());
1075:       assertFalse(node2.isObjectLit());
1076:       assertFalse(node2.isDebugger());
1077:       assertFalse(node2.isNull());
1078:       assertFalse(node2.isBreak());
1079:       assertFalse(node2.isDelProp());
1080:       assertFalse(node2.hasChildren());
1081:       assertFalse(node2.isDec());
1082:       assertFalse(node2.isAssign());
1083:       assertFalse(node2.isName());
1084:       assertFalse(node2.isTypeOf());
1085:       assertFalse(node2.isCall());
1086:       assertEquals(126978, node2.getSourcePosition());
1087:       assertFalse(node2.isGetElem());
1088:       assertFalse(node2.isGetProp());
1089:       assertEquals(12, node2.getType());
1090:       assertFalse(node2.isComma());
1091:       assertFalse(node2.isReturn());
1092:       assertFalse(node2.isString());
1093:       assertFalse(node2.isSwitch());
1094:       assertFalse(node2.isCase());
1095:       assertFalse(node2.isInc());
1096:       assertFalse(node2.isIn());
1097:       assertFalse(node2.isNE());
1098:       assertFalse(node2.isFalse());
1099:       assertFalse(node2.isEmpty());
1100:       assertFalse(node2.isArrayLit());
1101:       assertFalse(node2.isThrow());
1102:       assertFalse(node2.isRegExp());
1103:       assertFalse(node2.isWith());
1104:       assertFalse(node2.isCatch());
1105:       assertFalse(node2.isScript());
1106:       assertEquals(31, node2.getLineno());
1107:       assertFalse(node2.isParamList());
1108:       assertFalse(node2.isGetterDef());
1109:       assertFalse(node2.isIf());
1110:       assertFalse(node2.isNumber());
1111:       assertFalse(node2.hasOneChild());
1112:       assertFalse(node2.isInstanceOf());
1113:       assertFalse(node2.isTry());
1114:       assertFalse(node2.hasMoreThanOneChild());
1115:       assertFalse(node2.isBlock());
1116:       assertFalse(node2.isFor());
1117:       assertFalse(node2.isHook());
1118:       assertFalse(node2.isThis());
1119:       assertFalse(node3.isVoid());
1120:       assertEquals(4095, node3.getType());
1121:       assertFalse(node3.isTry());
1122:       assertFalse(node3.isTrue());
1123:       assertFalse(node3.isDebugger());
1124:       assertFalse(node3.isFor());
1125:       assertFalse(node3.isDefaultCase());
1126:       assertFalse(node3.isGetterDef());
1127:       assertFalse(node3.isEmpty());
1128:       assertFalse(node3.isIn());
1129:       assertEquals(47, node3.getCharno());
1130:       assertFalse(node3.isNull());
1131:       assertFalse(node3.isNE());
1132:       assertFalse(node3.isIf());
1133:       assertFalse(node3.isName());
1134:       assertTrue(node3.hasMoreThanOneChild());
1135:       assertFalse(node3.isRegExp());
1136:       assertFalse(node3.isDelProp());
1137:       assertFalse(node3.isCatch());
1138:       assertFalse(node3.isCall());
1139:       assertTrue(node3.hasChildren());
1140:       assertFalse(node3.isNew());
1141:       assertFalse(node3.isSwitch());
1142:       assertFalse(node3.isBlock());
1143:       assertFalse(node3.isStringKey());
1144:       assertFalse(node3.isHook());
1145:       assertFalse(node3.isVar());
1146:       assertFalse(node3.isCase());
1147:       assertFalse(node3.isDo());
1148:       assertFalse(node3.isAdd());
1149:       assertFalse(node3.isAssignAdd());
1150:       assertFalse(node3.isLabel());
1151:       assertFalse(node3.isParamList());
1152:       assertEquals(229423, node3.getSourcePosition());
1153:       assertFalse(node3.isLabelName());
1154:       assertFalse(node3.isArrayLit());
1155:       assertFalse(node3.hasOneChild());
1156:       assertEquals(56, node3.getLineno());
1157:       assertFalse(node3.isNumber());
1158:       assertFalse(node3.isObjectLit());
1159:       assertFalse(node3.isNot());
1160:       assertFalse(node3.isScript());
1161:       assertFalse(node3.isReturn());
1162:       assertFalse(node3.isOr());
1163:       assertFalse(node3.isThis());
1164:       assertFalse(node3.isComma());
1165:       assertFalse(node3.isWith());
1166:       assertFalse(node3.isBreak());
1167:       assertFalse(node3.isTypeOf());
1168:       assertFalse(node3.isDec());
1169:       assertFalse(node3.isAssign());
1170:       assertFalse(node3.isExprResult());
1171:       assertFalse(node3.isInstanceOf());
1172:       assertFalse(node3.isGetElem());
1173:       assertFalse(node3.isThrow());
1174:       assertFalse(node3.isString());
1175:       assertFalse(node3.isWhile());
1176:       assertFalse(node3.isSetterDef());
1177:       assertFalse(node3.isInc());
1178:       assertFalse(node3.isGetProp());
1179:       assertEquals(2, node3.getChildCount());
1180:       assertFalse(node3.isAnd());
1181:       assertFalse(node3.isFalse());
1182:       assertFalse(node3.isFunction());
1183:       assertFalse(node3.isContinue());
1184:       assertFalse(node3.isCast());
1185:       assertEquals(48, Node.DIRECTIVES);
1186:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1187:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1188:       assertEquals(40, Node.ORIGINALNAME_PROP);
1189:       assertEquals(4095, Node.COLUMN_MASK);
1190:       assertEquals(52, Node.LENGTH);
1191:       assertEquals(53, Node.INPUT_ID);
1192:       assertEquals(57, Node.REFLECTED_OBJECT);
1193:       assertEquals(57, Node.LAST_PROP);
1194:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1195:       assertEquals(29, Node.JSDOC_INFO_PROP);
1196:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1197:       assertEquals(36, Node.QUOTED_PROP);
1198:       assertEquals(55, Node.INFERRED_FUNCTION);
1199:       assertEquals(8, Node.FLAG_NO_THROWS);
1200:       assertEquals(39, Node.EMPTY_BLOCK);
1201:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1203:       assertEquals(32, Node.INCRDECR_PROP);
1204:       assertEquals(46, Node.IS_NAMESPACE);
1205:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1206:       assertEquals(37, Node.OPT_ARG_NAME);
1207:       assertEquals(12, Node.COLUMN_BITS);
1208:       assertEquals(56, Node.CHANGE_TIME);
1209:       assertEquals(30, Node.VAR_ARGS_NAME);
1210:       assertEquals(49, Node.DIRECT_EVAL);
1211:       assertEquals(47, Node.IS_DISPATCHER);
1212:       assertEquals(2, Node.POST_FLAG);
1213:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1214:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1215:       assertEquals(54, Node.SLASH_V);
1216:       assertEquals(43, Node.IS_CONSTANT_NAME);
1217:       assertEquals(50, Node.FREE_CALL);
1218:       assertEquals(1, Node.DECR_FLAG);
1219:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1220:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1221:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1222:       assertEquals(36, Node.QUOTED_PROP);
1223:       assertEquals(53, Node.INPUT_ID);
1224:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1225:       assertEquals(56, Node.CHANGE_TIME);
1226:       assertEquals(43, Node.IS_CONSTANT_NAME);
1227:       assertEquals(2, Node.POST_FLAG);
1228:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1229:       assertEquals(39, Node.EMPTY_BLOCK);
1230:       assertEquals(47, Node.IS_DISPATCHER);
1231:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1232:       assertEquals(8, Node.FLAG_NO_THROWS);
1233:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1234:       assertEquals(55, Node.INFERRED_FUNCTION);
1235:       assertEquals(29, Node.JSDOC_INFO_PROP);
1236:       assertEquals(57, Node.LAST_PROP);
1237:       assertEquals(54, Node.SLASH_V);
1238:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1239:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1240:       assertEquals(30, Node.VAR_ARGS_NAME);
1241:       assertEquals(52, Node.LENGTH);
1242:       assertEquals(40, Node.ORIGINALNAME_PROP);
1243:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1244:       assertEquals(57, Node.REFLECTED_OBJECT);
1245:       assertEquals(46, Node.IS_NAMESPACE);
1246:       assertEquals(49, Node.DIRECT_EVAL);
1247:       assertEquals(37, Node.OPT_ARG_NAME);
1248:       assertEquals(48, Node.DIRECTIVES);
1249:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1250:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1251:       assertEquals(50, Node.FREE_CALL);
1252:       assertEquals(4095, Node.COLUMN_MASK);
1253:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1254:       assertEquals(1, Node.DECR_FLAG);
1255:       assertEquals(12, Node.COLUMN_BITS);
1256:       assertEquals(32, Node.INCRDECR_PROP);
1257:       assertEquals(57, Node.REFLECTED_OBJECT);
1258:       assertEquals(40, Node.ORIGINALNAME_PROP);
1259:       assertEquals(8, Node.FLAG_NO_THROWS);
1260:       assertEquals(39, Node.EMPTY_BLOCK);
1261:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1262:       assertEquals(54, Node.SLASH_V);
1263:       assertEquals(52, Node.LENGTH);
1264:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1265:       assertEquals(50, Node.FREE_CALL);
1266:       assertEquals(4095, Node.COLUMN_MASK);
1267:       assertEquals(12, Node.COLUMN_BITS);
1268:       assertEquals(1, Node.DECR_FLAG);
1269:       assertEquals(48, Node.DIRECTIVES);
1270:       assertEquals(49, Node.DIRECT_EVAL);
1271:       assertEquals(32, Node.INCRDECR_PROP);
1272:       assertEquals(37, Node.OPT_ARG_NAME);
1273:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1274:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1275:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1276:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1277:       assertEquals(29, Node.JSDOC_INFO_PROP);
1278:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1279:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1280:       assertEquals(43, Node.IS_CONSTANT_NAME);
1281:       assertEquals(56, Node.CHANGE_TIME);
1282:       assertEquals(53, Node.INPUT_ID);
1283:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1284:       assertEquals(36, Node.QUOTED_PROP);
1285:       assertEquals(55, Node.INFERRED_FUNCTION);
1286:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1287:       assertEquals(46, Node.IS_NAMESPACE);
1288:       assertEquals(57, Node.LAST_PROP);
1289:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1290:       assertEquals(47, Node.IS_DISPATCHER);
1291:       assertEquals(30, Node.VAR_ARGS_NAME);
1292:       assertEquals(2, Node.POST_FLAG);
1293:       
1294:       node3.setSourceEncodedPositionForTree(52);
1295:       assertFalse(node0.equals((Object)node3));
1296:       assertFalse(node0.equals((Object)node1));
1297:       assertFalse(node0.equals((Object)node2));
1298:       assertFalse(node2.equals((Object)node1));
1299:       assertFalse(node2.equals((Object)node3));
1300:       assertFalse(node2.equals((Object)node0));
1301:       assertFalse(node3.equals((Object)node2));
1302:       assertFalse(node3.equals((Object)node1));
1303:       assertFalse(node3.equals((Object)node0));
1304:       assertNotSame(node2, node1);
1305:       assertNotSame(node2, node3);
1306:       assertNotSame(node3, node2);
1307:       assertNotSame(node3, node1);
1308:       assertFalse(node0.isTypeOf());
1309:       assertFalse(node0.isNumber());
1310:       assertFalse(node0.isAssignAdd());
1311:       assertFalse(node0.isReturn());
1312:       assertFalse(node0.isOr());
1313:       assertFalse(node0.isAssign());
1314:       assertFalse(node0.isDec());
1315:       assertFalse(node0.isLabel());
1316:       assertFalse(node0.hasChildren());
1317:       assertFalse(node0.hasMoreThanOneChild());
1318:       assertFalse(node0.isCast());
1319:       assertFalse(node0.isContinue());
1320:       assertFalse(node0.isLabelName());
1321:       assertFalse(node0.isGetElem());
1322:       assertFalse(node0.isVar());
1323:       assertEquals(52, node0.getSourcePosition());
1324:       assertFalse(node0.isAdd());
1325:       assertFalse(node0.isDo());
1326:       assertFalse(node0.isNew());
1327:       assertFalse(node0.isParamList());
1328:       assertFalse(node0.isSetterDef());
1329:       assertFalse(node0.isThis());
1330:       assertEquals(0, node0.getChildCount());
1331:       assertFalse(node0.isCatch());
1332:       assertFalse(node0.isStringKey());
1333:       assertFalse(node0.isInstanceOf());
1334:       assertFalse(node0.isSwitch());
1335:       assertFalse(node0.isRegExp());
1336:       assertFalse(node0.isScript());
1337:       assertFalse(node0.isWith());
1338:       assertFalse(node0.isBlock());
1339:       assertFalse(node0.isHook());
1340:       assertFalse(node0.isTry());
1341:       assertFalse(node0.hasOneChild());
1342:       assertFalse(node0.isCase());
1343:       assertFalse(node0.isNE());
1344:       assertFalse(node0.isIf());
1345:       assertFalse(node0.isFor());
1346:       assertFalse(node0.isGetterDef());
1347:       assertFalse(node0.isDelProp());
1348:       assertFalse(node0.isArrayLit());
1349:       assertFalse(node0.isFunction());
1350:       assertFalse(node0.isInc());
1351:       assertFalse(node0.isVoid());
1352:       assertFalse(node0.isTrue());
1353:       assertFalse(node0.isDefaultCase());
1354:       assertFalse(node0.isThrow());
1355:       assertFalse(node0.isIn());
1356:       assertEquals(52, node0.getCharno());
1357:       assertFalse(node0.isEmpty());
1358:       assertFalse(node0.isComma());
1359:       assertFalse(node0.isNull());
1360:       assertFalse(node0.isCall());
1361:       assertFalse(node0.isFalse());
1362:       assertFalse(node0.isAnd());
1363:       assertFalse(node0.isName());
1364:       assertEquals(0, node0.getType());
1365:       assertEquals(0, node0.getLineno());
1366:       assertFalse(node0.isBreak());
1367:       assertFalse(node0.isExprResult());
1368:       assertFalse(node0.isString());
1369:       assertFalse(node0.isWhile());
1370:       assertFalse(node0.isNot());
1371:       assertFalse(node0.isDebugger());
1372:       assertFalse(node0.isObjectLit());
1373:       assertFalse(node0.isGetProp());
1374:       assertFalse(node2.isWhile());
1375:       assertFalse(node2.isDo());
1376:       assertFalse(node2.isContinue());
1377:       assertFalse(node2.isNew());
1378:       assertFalse(node2.isAdd());
1379:       assertFalse(node2.isOr());
1380:       assertFalse(node2.isStringKey());
1381:       assertFalse(node2.isLabelName());
1382:       assertFalse(node2.isCast());
1383:       assertEquals(0, node2.getLineno());
1384:       assertFalse(node2.isSetterDef());
1385:       assertEquals(0, node2.getChildCount());
1386:       assertFalse(node2.isAssignAdd());
1387:       assertFalse(node2.isVar());
1388:       assertFalse(node2.isLabel());
1389:       assertFalse(node2.isNot());
1390:       assertFalse(node2.isFunction());
1391:       assertFalse(node2.isDefaultCase());
1392:       assertFalse(node2.isVoid());
1393:       assertFalse(node2.isExprResult());
1394:       assertFalse(node2.isTrue());
1395:       assertFalse(node2.isAnd());
1396:       assertFalse(node2.isObjectLit());
1397:       assertFalse(node2.isDebugger());
1398:       assertFalse(node2.isNull());
1399:       assertFalse(node2.isBreak());
1400:       assertFalse(node2.isDelProp());
1401:       assertFalse(node2.hasChildren());
1402:       assertFalse(node2.isDec());
1403:       assertFalse(node2.isAssign());
1404:       assertFalse(node2.isName());
1405:       assertFalse(node2.isTypeOf());
1406:       assertFalse(node2.isCall());
1407:       assertFalse(node2.isGetElem());
1408:       assertFalse(node2.isGetProp());
1409:       assertEquals(12, node2.getType());
1410:       assertFalse(node2.isComma());
1411:       assertFalse(node2.isReturn());
1412:       assertFalse(node2.isString());
1413:       assertFalse(node2.isSwitch());
1414:       assertFalse(node2.isCase());
1415:       assertFalse(node2.isInc());
1416:       assertFalse(node2.isIn());
1417:       assertFalse(node2.isNE());
1418:       assertEquals(52, node2.getCharno());
1419:       assertFalse(node2.isFalse());
1420:       assertFalse(node2.isEmpty());
1421:       assertFalse(node2.isArrayLit());
1422:       assertFalse(node2.isThrow());
1423:       assertFalse(node2.isRegExp());
1424:       assertEquals(52, node2.getSourcePosition());
1425:       assertFalse(node2.isWith());
1426:       assertFalse(node2.isCatch());
1427:       assertFalse(node2.isScript());
1428:       assertFalse(node2.isParamList());
1429:       assertFalse(node2.isGetterDef());
1430:       assertFalse(node2.isIf());
1431:       assertFalse(node2.isNumber());
1432:       assertFalse(node2.hasOneChild());
1433:       assertFalse(node2.isInstanceOf());
1434:       assertFalse(node2.isTry());
1435:       assertFalse(node2.hasMoreThanOneChild());
1436:       assertFalse(node2.isBlock());
1437:       assertFalse(node2.isFor());
1438:       assertFalse(node2.isHook());
1439:       assertFalse(node2.isThis());
1440:       assertFalse(node3.isVoid());
1441:       assertEquals(4095, node3.getType());
1442:       assertFalse(node3.isTry());
1443:       assertFalse(node3.isTrue());
1444:       assertFalse(node3.isDebugger());
1445:       assertFalse(node3.isFor());
1446:       assertEquals(52, node3.getCharno());
1447:       assertFalse(node3.isDefaultCase());
1448:       assertFalse(node3.isGetterDef());
1449:       assertFalse(node3.isEmpty());
1450:       assertFalse(node3.isIn());
1451:       assertFalse(node3.isNull());
1452:       assertFalse(node3.isNE());
1453:       assertFalse(node3.isIf());
1454:       assertFalse(node3.isName());
1455:       assertTrue(node3.hasMoreThanOneChild());
1456:       assertFalse(node3.isRegExp());
1457:       assertFalse(node3.isDelProp());
1458:       assertFalse(node3.isCatch());
1459:       assertFalse(node3.isCall());
1460:       assertTrue(node3.hasChildren());
1461:       assertFalse(node3.isNew());
1462:       assertFalse(node3.isSwitch());
1463:       assertFalse(node3.isBlock());
1464:       assertFalse(node3.isStringKey());
1465:       assertFalse(node3.isHook());
1466:       assertFalse(node3.isVar());
1467:       assertFalse(node3.isCase());
1468:       assertFalse(node3.isDo());
1469:       assertFalse(node3.isAdd());
1470:       assertFalse(node3.isAssignAdd());
1471:       assertFalse(node3.isLabel());
1472:       assertFalse(node3.isParamList());
1473:       assertFalse(node3.isLabelName());
1474:       assertFalse(node3.isArrayLit());
1475:       assertFalse(node3.hasOneChild());
1476:       assertFalse(node3.isNumber());
1477:       assertFalse(node3.isObjectLit());
1478:       assertFalse(node3.isNot());
1479:       assertFalse(node3.isScript());
1480:       assertFalse(node3.isReturn());
1481:       assertFalse(node3.isOr());
1482:       assertFalse(node3.isThis());
1483:       assertFalse(node3.isComma());
1484:       assertFalse(node3.isWith());
1485:       assertFalse(node3.isBreak());
1486:       assertFalse(node3.isTypeOf());
1487:       assertFalse(node3.isDec());
1488:       assertFalse(node3.isAssign());
1489:       assertFalse(node3.isExprResult());
1490:       assertFalse(node3.isInstanceOf());
1491:       assertFalse(node3.isGetElem());
1492:       assertFalse(node3.isThrow());
1493:       assertFalse(node3.isString());
1494:       assertFalse(node3.isWhile());
1495:       assertFalse(node3.isSetterDef());
1496:       assertFalse(node3.isInc());
1497:       assertFalse(node3.isGetProp());
1498:       assertEquals(0, node3.getLineno());
1499:       assertEquals(2, node3.getChildCount());
1500:       assertFalse(node3.isAnd());
1501:       assertEquals(52, node3.getSourcePosition());
1502:       assertFalse(node3.isFalse());
1503:       assertFalse(node3.isFunction());
1504:       assertFalse(node3.isContinue());
1505:       assertFalse(node3.isCast());
1506:       assertEquals(48, Node.DIRECTIVES);
1507:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1508:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1509:       assertEquals(40, Node.ORIGINALNAME_PROP);
1510:       assertEquals(4095, Node.COLUMN_MASK);
1511:       assertEquals(52, Node.LENGTH);
1512:       assertEquals(53, Node.INPUT_ID);
1513:       assertEquals(57, Node.REFLECTED_OBJECT);
1514:       assertEquals(57, Node.LAST_PROP);
1515:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1516:       assertEquals(29, Node.JSDOC_INFO_PROP);
1517:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1518:       assertEquals(36, Node.QUOTED_PROP);
1519:       assertEquals(55, Node.INFERRED_FUNCTION);
1520:       assertEquals(8, Node.FLAG_NO_THROWS);
1521:       assertEquals(39, Node.EMPTY_BLOCK);
1522:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1523:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1524:       assertEquals(32, Node.INCRDECR_PROP);
1525:       assertEquals(46, Node.IS_NAMESPACE);
1526:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1527:       assertEquals(37, Node.OPT_ARG_NAME);
1528:       assertEquals(12, Node.COLUMN_BITS);
1529:       assertEquals(56, Node.CHANGE_TIME);
1530:       assertEquals(30, Node.VAR_ARGS_NAME);
1531:       assertEquals(49, Node.DIRECT_EVAL);
1532:       assertEquals(47, Node.IS_DISPATCHER);
1533:       assertEquals(2, Node.POST_FLAG);
1534:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1535:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1536:       assertEquals(54, Node.SLASH_V);
1537:       assertEquals(43, Node.IS_CONSTANT_NAME);
1538:       assertEquals(50, Node.FREE_CALL);
1539:       assertEquals(1, Node.DECR_FLAG);
1540:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1541:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1542:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1543:       assertEquals(36, Node.QUOTED_PROP);
1544:       assertEquals(53, Node.INPUT_ID);
1545:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1546:       assertEquals(56, Node.CHANGE_TIME);
1547:       assertEquals(43, Node.IS_CONSTANT_NAME);
1548:       assertEquals(2, Node.POST_FLAG);
1549:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1550:       assertEquals(39, Node.EMPTY_BLOCK);
1551:       assertEquals(47, Node.IS_DISPATCHER);
1552:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1553:       assertEquals(8, Node.FLAG_NO_THROWS);
1554:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1555:       assertEquals(55, Node.INFERRED_FUNCTION);
1556:       assertEquals(29, Node.JSDOC_INFO_PROP);
1557:       assertEquals(57, Node.LAST_PROP);
1558:       assertEquals(54, Node.SLASH_V);
1559:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1560:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1561:       assertEquals(30, Node.VAR_ARGS_NAME);
1562:       assertEquals(52, Node.LENGTH);
1563:       assertEquals(40, Node.ORIGINALNAME_PROP);
1564:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1565:       assertEquals(57, Node.REFLECTED_OBJECT);
1566:       assertEquals(46, Node.IS_NAMESPACE);
1567:       assertEquals(49, Node.DIRECT_EVAL);
1568:       assertEquals(37, Node.OPT_ARG_NAME);
1569:       assertEquals(48, Node.DIRECTIVES);
1570:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1571:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1572:       assertEquals(50, Node.FREE_CALL);
1573:       assertEquals(4095, Node.COLUMN_MASK);
1574:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1575:       assertEquals(1, Node.DECR_FLAG);
1576:       assertEquals(12, Node.COLUMN_BITS);
1577:       assertEquals(32, Node.INCRDECR_PROP);
1578:       assertEquals(57, Node.REFLECTED_OBJECT);
1579:       assertEquals(40, Node.ORIGINALNAME_PROP);
1580:       assertEquals(8, Node.FLAG_NO_THROWS);
1581:       assertEquals(39, Node.EMPTY_BLOCK);
1582:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1583:       assertEquals(54, Node.SLASH_V);
1584:       assertEquals(52, Node.LENGTH);
1585:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1586:       assertEquals(50, Node.FREE_CALL);
1587:       assertEquals(4095, Node.COLUMN_MASK);
1588:       assertEquals(12, Node.COLUMN_BITS);
1589:       assertEquals(1, Node.DECR_FLAG);
1590:       assertEquals(48, Node.DIRECTIVES);
1591:       assertEquals(49, Node.DIRECT_EVAL);
1592:       assertEquals(32, Node.INCRDECR_PROP);
1593:       assertEquals(37, Node.OPT_ARG_NAME);
1594:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1595:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1596:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1597:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1598:       assertEquals(29, Node.JSDOC_INFO_PROP);
1599:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1600:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1601:       assertEquals(43, Node.IS_CONSTANT_NAME);
1602:       assertEquals(56, Node.CHANGE_TIME);
1603:       assertEquals(53, Node.INPUT_ID);
1604:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1605:       assertEquals(36, Node.QUOTED_PROP);
1606:       assertEquals(55, Node.INFERRED_FUNCTION);
1607:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1608:       assertEquals(46, Node.IS_NAMESPACE);
1609:       assertEquals(57, Node.LAST_PROP);
1610:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1611:       assertEquals(47, Node.IS_DISPATCHER);
1612:       assertEquals(30, Node.VAR_ARGS_NAME);
1613:       assertEquals(2, Node.POST_FLAG);
1614:       
1615:       boolean boolean4 = node1.isSetterDef();
1616:       assertFalse(node1.equals((Object)node3));
1617:       assertFalse(node1.equals((Object)node2));
1618:       assertFalse(node1.equals((Object)node0));
1619:       assertFalse(boolean4 == boolean2);
1620:       assertFalse(boolean4 == boolean0);
1621:       assertTrue(boolean4 == boolean3);
1622:       assertTrue(boolean4 == boolean1);
1623:       assertNotSame(node1, node3);
1624:       assertNotSame(node1, node2);
1625:       assertFalse(node1.isThis());
1626:       assertFalse(node1.isComma());
1627:       assertFalse(node1.isAnd());
1628:       assertFalse(node1.isWith());
1629:       assertFalse(node1.isFalse());
1630:       assertFalse(node1.isInstanceOf());
1631:       assertFalse(node1.isBreak());
1632:       assertFalse(node1.isExprResult());
1633:       assertFalse(node1.hasOneChild());
1634:       assertFalse(node1.isSwitch());
1635:       assertEquals((-1), node1.getCharno());
1636:       assertFalse(node1.isHook());
1637:       assertFalse(node1.isNot());
1638:       assertFalse(node1.isCase());
1639:       assertFalse(node1.isString());
1640:       assertFalse(node1.isNumber());
1641:       assertFalse(node1.isObjectLit());
1642:       assertFalse(node1.isGetProp());
1643:       assertFalse(node1.isScript());
1644:       assertEquals((-1), node1.getLineno());
1645:       assertFalse(node1.isIn());
1646:       assertFalse(node1.isNE());
1647:       assertEquals((-1), node1.getSourcePosition());
1648:       assertFalse(node1.isIf());
1649:       assertFalse(node1.hasMoreThanOneChild());
1650:       assertFalse(node1.isCast());
1651:       assertFalse(node1.isContinue());
1652:       assertFalse(node1.isFunction());
1653:       assertFalse(node1.isThrow());
1654:       assertFalse(node1.isSetterDef());
1655:       assertFalse(node1.isInc());
1656:       assertEquals(0, node1.getChildCount());
1657:       assertFalse(node1.isParamList());
1658:       assertFalse(node1.isNull());
1659:       assertFalse(node1.isRegExp());
1660:       assertFalse(node1.isName());
1661:       assertFalse(node1.isCatch());
1662:       assertFalse(node1.isCall());
1663:       assertEquals((-1), node1.getType());
1664:       assertFalse(node1.isTry());
1665:       assertFalse(node1.isDebugger());
1666:       assertFalse(node1.isStringKey());
1667:       assertFalse(node1.isBlock());
1668:       assertFalse(node1.isFor());
1669:       assertFalse(node1.isWhile());
1670:       assertFalse(node1.isGetterDef());
1671:       assertFalse(node1.isAssignAdd());
1672:       assertFalse(node1.isOr());
1673:       assertFalse(node1.isReturn());
1674:       assertFalse(node1.isLabel());
1675:       assertFalse(node1.hasChildren());
1676:       assertFalse(node1.isLabelName());
1677:       assertFalse(node1.isAssign());
1678:       assertFalse(node1.isDec());
1679:       assertFalse(node1.isTypeOf());
1680:       assertFalse(node1.isDelProp());
1681:       assertFalse(node1.isArrayLit());
1682:       assertFalse(node1.isGetElem());
1683:       assertFalse(node1.isNew());
1684:       assertFalse(node1.isVoid());
1685:       assertFalse(node1.isVar());
1686:       assertFalse(node1.isTrue());
1687:       assertFalse(node1.isEmpty());
1688:       assertFalse(node1.isDo());
1689:       assertFalse(node1.isDefaultCase());
1690:       assertFalse(node1.isAdd());
1691:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1692:       assertEquals(46, Node.IS_NAMESPACE);
1693:       assertEquals(12, Node.COLUMN_BITS);
1694:       assertEquals(49, Node.DIRECT_EVAL);
1695:       assertEquals(57, Node.LAST_PROP);
1696:       assertEquals(1, Node.DECR_FLAG);
1697:       assertEquals(32, Node.INCRDECR_PROP);
1698:       assertEquals(2, Node.POST_FLAG);
1699:       assertEquals(37, Node.OPT_ARG_NAME);
1700:       assertEquals(47, Node.IS_DISPATCHER);
1701:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1702:       assertEquals(30, Node.VAR_ARGS_NAME);
1703:       assertEquals(40, Node.ORIGINALNAME_PROP);
1704:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1705:       assertEquals(43, Node.IS_CONSTANT_NAME);
1706:       assertEquals(54, Node.SLASH_V);
1707:       assertEquals(50, Node.FREE_CALL);
1708:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1709:       assertEquals(55, Node.INFERRED_FUNCTION);
1710:       assertEquals(4095, Node.COLUMN_MASK);
1711:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1712:       assertEquals(48, Node.DIRECTIVES);
1713:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1714:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1715:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1716:       assertEquals(57, Node.REFLECTED_OBJECT);
1717:       assertEquals(8, Node.FLAG_NO_THROWS);
1718:       assertEquals(39, Node.EMPTY_BLOCK);
1719:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1720:       assertEquals(56, Node.CHANGE_TIME);
1721:       assertEquals(36, Node.QUOTED_PROP);
1722:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1723:       assertEquals(53, Node.INPUT_ID);
1724:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1725:       assertEquals(29, Node.JSDOC_INFO_PROP);
1726:       assertEquals(52, Node.LENGTH);
1727:       
1728:       Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node3);
1729:       assertFalse(node0.equals((Object)node3));
1730:       assertFalse(node0.equals((Object)node1));
1731:       assertFalse(node0.equals((Object)node2));
1732:       assertFalse(node2.equals((Object)node1));
1733:       assertFalse(node2.equals((Object)node3));
1734:       assertFalse(node2.equals((Object)node0));
1735:       assertFalse(node3.equals((Object)node2));
1736:       assertFalse(node3.equals((Object)node1));
1737:       assertFalse(node3.equals((Object)node0));
1738:       assertNotSame(node2, node1);
1739:       assertNotSame(node2, node3);
1740:       assertNotSame(node3, node2);
1741:       assertNotSame(node3, node1);
1742:       assertFalse(node0.isTypeOf());
1743:       assertFalse(node0.isNumber());
1744:       assertFalse(node0.isAssignAdd());
1745:       assertFalse(node0.isReturn());
1746:       assertFalse(node0.isOr());
1747:       assertFalse(node0.isAssign());
1748:       assertFalse(node0.isDec());
1749:       assertFalse(node0.isLabel());
1750:       assertFalse(node0.hasChildren());
1751:       assertFalse(node0.hasMoreThanOneChild());
1752:       assertFalse(node0.isCast());
1753:       assertFalse(node0.isContinue());
1754:       assertFalse(node0.isLabelName());
1755:       assertFalse(node0.isGetElem());
1756:       assertFalse(node0.isVar());
1757:       assertEquals(52, node0.getSourcePosition());
1758:       assertFalse(node0.isAdd());
1759:       assertFalse(node0.isDo());
1760:       assertFalse(node0.isNew());
1761:       assertFalse(node0.isParamList());
1762:       assertFalse(node0.isSetterDef());
1763:       assertFalse(node0.isThis());
1764:       assertEquals(0, node0.getChildCount());
1765:       assertFalse(node0.isCatch());
1766:       assertFalse(node0.isStringKey());
1767:       assertFalse(node0.isInstanceOf());
1768:       assertFalse(node0.isSwitch());
1769:       assertFalse(node0.isRegExp());
1770:       assertFalse(node0.isScript());
1771:       assertFalse(node0.isWith());
1772:       assertFalse(node0.isBlock());
1773:       assertFalse(node0.isHook());
1774:       assertFalse(node0.isTry());
1775:       assertFalse(node0.hasOneChild());
1776:       assertFalse(node0.isCase());
1777:       assertFalse(node0.isNE());
1778:       assertFalse(node0.isIf());
1779:       assertFalse(node0.isFor());
1780:       assertFalse(node0.isGetterDef());
1781:       assertFalse(node0.isDelProp());
1782:       assertFalse(node0.isArrayLit());
1783:       assertFalse(node0.isFunction());
1784:       assertFalse(node0.isInc());
1785:       assertFalse(node0.isVoid());
1786:       assertFalse(node0.isTrue());
1787:       assertFalse(node0.isDefaultCase());
1788:       assertFalse(node0.isThrow());
1789:       assertFalse(node0.isIn());
1790:       assertEquals(52, node0.getCharno());
1791:       assertFalse(node0.isEmpty());
1792:       assertFalse(node0.isComma());
1793:       assertFalse(node0.isNull());
1794:       assertFalse(node0.isCall());
1795:       assertFalse(node0.isFalse());
1796:       assertFalse(node0.isAnd());
1797:       assertFalse(node0.isName());
1798:       assertEquals(0, node0.getType());
1799:       assertEquals(0, node0.getLineno());
1800:       assertFalse(node0.isBreak());
1801:       assertFalse(node0.isExprResult());
1802:       assertFalse(node0.isString());
1803:       assertFalse(node0.isWhile());
1804:       assertFalse(node0.isNot());
1805:       assertFalse(node0.isDebugger());
1806:       assertFalse(node0.isObjectLit());
1807:       assertFalse(node0.isGetProp());
1808:       assertFalse(node2.isWhile());
1809:       assertFalse(node2.isDo());
1810:       assertFalse(node2.isContinue());
1811:       assertFalse(node2.isNew());
1812:       assertFalse(node2.isAdd());
1813:       assertFalse(node2.isOr());
1814:       assertFalse(node2.isStringKey());
1815:       assertFalse(node2.isLabelName());
1816:       assertFalse(node2.isCast());
1817:       assertEquals(0, node2.getLineno());
1818:       assertFalse(node2.isSetterDef());
1819:       assertEquals(0, node2.getChildCount());
1820:       assertFalse(node2.isAssignAdd());
1821:       assertFalse(node2.isVar());
1822:       assertFalse(node2.isLabel());
1823:       assertFalse(node2.isNot());
1824:       assertFalse(node2.isFunction());
1825:       assertFalse(node2.isDefaultCase());
1826:       assertFalse(node2.isVoid());
1827:       assertFalse(node2.isExprResult());
1828:       assertFalse(node2.isTrue());
1829:       assertFalse(node2.isAnd());
1830:       assertFalse(node2.isObjectLit());
1831:       assertFalse(node2.isDebugger());
1832:       assertFalse(node2.isNull());
1833:       assertFalse(node2.isBreak());
1834:       assertFalse(node2.isDelProp());
1835:       assertFalse(node2.hasChildren());
1836:       assertFalse(node2.isDec());
1837:       assertFalse(node2.isAssign());
1838:       assertFalse(node2.isName());
1839:       assertFalse(node2.isTypeOf());
1840:       assertFalse(node2.isCall());
1841:       assertFalse(node2.isGetElem());
1842:       assertFalse(node2.isGetProp());
1843:       assertEquals(12, node2.getType());
1844:       assertFalse(node2.isComma());
1845:       assertFalse(node2.isReturn());
1846:       assertFalse(node2.isString());
1847:       assertFalse(node2.isSwitch());
1848:       assertFalse(node2.isCase());
1849:       assertFalse(node2.isInc());
1850:       assertFalse(node2.isIn());
1851:       assertFalse(node2.isNE());
1852:       assertEquals(52, node2.getCharno());
1853:       assertFalse(node2.isFalse());
1854:       assertFalse(node2.isEmpty());
1855:       assertFalse(node2.isArrayLit());
1856:       assertFalse(node2.isThrow());
1857:       assertFalse(node2.isRegExp());
1858:       assertEquals(52, node2.getSourcePosition());
1859:       assertFalse(node2.isWith());
1860:       assertFalse(node2.isCatch());
1861:       assertFalse(node2.isScript());
1862:       assertFalse(node2.isParamList());
1863:       assertFalse(node2.isGetterDef());
1864:       assertFalse(node2.isIf());
1865:       assertFalse(node2.isNumber());
1866:       assertFalse(node2.hasOneChild());
1867:       assertFalse(node2.isInstanceOf());
1868:       assertFalse(node2.isTry());
1869:       assertFalse(node2.hasMoreThanOneChild());
1870:       assertFalse(node2.isBlock());
1871:       assertFalse(node2.isFor());
1872:       assertFalse(node2.isHook());
1873:       assertFalse(node2.isThis());
1874:       assertFalse(node3.isVoid());
1875:       assertEquals(4095, node3.getType());
1876:       assertFalse(node3.isTry());
1877:       assertFalse(node3.isTrue());
1878:       assertFalse(node3.isDebugger());
1879:       assertFalse(node3.isFor());
1880:       assertEquals(52, node3.getCharno());
1881:       assertFalse(node3.isDefaultCase());
1882:       assertFalse(node3.isGetterDef());
1883:       assertFalse(node3.isEmpty());
1884:       assertFalse(node3.isIn());
1885:       assertFalse(node3.isNull());
1886:       assertFalse(node3.isNE());
1887:       assertFalse(node3.isIf());
1888:       assertFalse(node3.isName());
1889:       assertTrue(node3.hasMoreThanOneChild());
1890:       assertFalse(node3.isRegExp());
1891:       assertFalse(node3.isDelProp());
1892:       assertFalse(node3.isCatch());
1893:       assertFalse(node3.isCall());
1894:       assertTrue(node3.hasChildren());
1895:       assertFalse(node3.isNew());
1896:       assertFalse(node3.isSwitch());
1897:       assertFalse(node3.isBlock());
1898:       assertFalse(node3.isStringKey());
1899:       assertFalse(node3.isHook());
1900:       assertFalse(node3.isVar());
1901:       assertFalse(node3.isCase());
1902:       assertFalse(node3.isDo());
1903:       assertFalse(node3.isAdd());
1904:       assertFalse(node3.isAssignAdd());
1905:       assertFalse(node3.isLabel());
1906:       assertFalse(node3.isParamList());
1907:       assertFalse(node3.isLabelName());
1908:       assertFalse(node3.isArrayLit());
1909:       assertFalse(node3.hasOneChild());
1910:       assertFalse(node3.isNumber());
1911:       assertFalse(node3.isObjectLit());
1912:       assertFalse(node3.isNot());
1913:       assertFalse(node3.isScript());
1914:       assertFalse(node3.isReturn());
1915:       assertFalse(node3.isOr());
1916:       assertFalse(node3.isThis());
1917:       assertFalse(node3.isComma());
1918:       assertFalse(node3.isWith());
1919:       assertFalse(node3.isBreak());
1920:       assertFalse(node3.isTypeOf());
1921:       assertFalse(node3.isDec());
1922:       assertFalse(node3.isAssign());
1923:       assertFalse(node3.isExprResult());
1924:       assertFalse(node3.isInstanceOf());
1925:       assertFalse(node3.isGetElem());
1926:       assertFalse(node3.isThrow());
1927:       assertFalse(node3.isString());
1928:       assertFalse(node3.isWhile());
1929:       assertFalse(node3.isSetterDef());
1930:       assertFalse(node3.isInc());
1931:       assertFalse(node3.isGetProp());
1932:       assertEquals(0, node3.getLineno());
1933:       assertEquals(2, node3.getChildCount());
1934:       assertFalse(node3.isAnd());
1935:       assertEquals(52, node3.getSourcePosition());
1936:       assertFalse(node3.isFalse());
1937:       assertFalse(node3.isFunction());
1938:       assertFalse(node3.isContinue());
1939:       assertFalse(node3.isCast());
1940:       assertEquals(48, Node.DIRECTIVES);
1941:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1942:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1943:       assertEquals(40, Node.ORIGINALNAME_PROP);
1944:       assertEquals(4095, Node.COLUMN_MASK);
1945:       assertEquals(52, Node.LENGTH);
1946:       assertEquals(53, Node.INPUT_ID);
1947:       assertEquals(57, Node.REFLECTED_OBJECT);
1948:       assertEquals(57, Node.LAST_PROP);
1949:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1950:       assertEquals(29, Node.JSDOC_INFO_PROP);
1951:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1952:       assertEquals(36, Node.QUOTED_PROP);
1953:       assertEquals(55, Node.INFERRED_FUNCTION);
1954:       assertEquals(8, Node.FLAG_NO_THROWS);
1955:       assertEquals(39, Node.EMPTY_BLOCK);
1956:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1957:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1958:       assertEquals(32, Node.INCRDECR_PROP);
1959:       assertEquals(46, Node.IS_NAMESPACE);
1960:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1961:       assertEquals(37, Node.OPT_ARG_NAME);
1962:       assertEquals(12, Node.COLUMN_BITS);
1963:       assertEquals(56, Node.CHANGE_TIME);
1964:       assertEquals(30, Node.VAR_ARGS_NAME);
1965:       assertEquals(49, Node.DIRECT_EVAL);
1966:       assertEquals(47, Node.IS_DISPATCHER);
1967:       assertEquals(2, Node.POST_FLAG);
1968:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1969:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1970:       assertEquals(54, Node.SLASH_V);
1971:       assertEquals(43, Node.IS_CONSTANT_NAME);
1972:       assertEquals(50, Node.FREE_CALL);
1973:       assertEquals(1, Node.DECR_FLAG);
1974:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1975:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1976:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1977:       assertEquals(36, Node.QUOTED_PROP);
1978:       assertEquals(53, Node.INPUT_ID);
1979:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1980:       assertEquals(56, Node.CHANGE_TIME);
1981:       assertEquals(43, Node.IS_CONSTANT_NAME);
1982:       assertEquals(2, Node.POST_FLAG);
1983:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1984:       assertEquals(39, Node.EMPTY_BLOCK);
1985:       assertEquals(47, Node.IS_DISPATCHER);
1986:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1987:       assertEquals(8, Node.FLAG_NO_THROWS);
1988:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1989:       assertEquals(55, Node.INFERRED_FUNCTION);
1990:       assertEquals(29, Node.JSDOC_INFO_PROP);
1991:       assertEquals(57, Node.LAST_PROP);
1992:       assertEquals(54, Node.SLASH_V);
1993:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1994:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1995:       assertEquals(30, Node.VAR_ARGS_NAME);
1996:       assertEquals(52, Node.LENGTH);
1997:       assertEquals(40, Node.ORIGINALNAME_PROP);
1998:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1999:       assertEquals(57, Node.REFLECTED_OBJECT);
2000:       assertEquals(46, Node.IS_NAMESPACE);
2001:       assertEquals(49, Node.DIRECT_EVAL);
2002:       assertEquals(37, Node.OPT_ARG_NAME);
2003:       assertEquals(48, Node.DIRECTIVES);
2004:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2005:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2006:       assertEquals(50, Node.FREE_CALL);
2007:       assertEquals(4095, Node.COLUMN_MASK);
2008:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2009:       assertEquals(1, Node.DECR_FLAG);
2010:       assertEquals(12, Node.COLUMN_BITS);
2011:       assertEquals(32, Node.INCRDECR_PROP);
2012:       assertEquals(57, Node.REFLECTED_OBJECT);
2013:       assertEquals(40, Node.ORIGINALNAME_PROP);
2014:       assertEquals(8, Node.FLAG_NO_THROWS);
2015:       assertEquals(39, Node.EMPTY_BLOCK);
2016:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2017:       assertEquals(54, Node.SLASH_V);
2018:       assertEquals(52, Node.LENGTH);
2019:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2020:       assertEquals(50, Node.FREE_CALL);
2021:       assertEquals(4095, Node.COLUMN_MASK);
2022:       assertEquals(12, Node.COLUMN_BITS);
2023:       assertEquals(1, Node.DECR_FLAG);
2024:       assertEquals(48, Node.DIRECTIVES);
2025:       assertEquals(49, Node.DIRECT_EVAL);
2026:       assertEquals(32, Node.INCRDECR_PROP);
2027:       assertEquals(37, Node.OPT_ARG_NAME);
2028:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2029:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2030:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2031:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2032:       assertEquals(29, Node.JSDOC_INFO_PROP);
2033:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2034:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2035:       assertEquals(43, Node.IS_CONSTANT_NAME);
2036:       assertEquals(56, Node.CHANGE_TIME);
2037:       assertEquals(53, Node.INPUT_ID);
2038:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2039:       assertEquals(36, Node.QUOTED_PROP);
2040:       assertEquals(55, Node.INFERRED_FUNCTION);
2041:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2042:       assertEquals(46, Node.IS_NAMESPACE);
2043:       assertEquals(57, Node.LAST_PROP);
2044:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2045:       assertEquals(47, Node.IS_DISPATCHER);
2046:       assertEquals(30, Node.VAR_ARGS_NAME);
2047:       assertEquals(2, Node.POST_FLAG);
2048:       
2049:       boolean boolean5 = node_NodeMismatch0.equals((Object) null);
2050:       assertFalse(node0.equals((Object)node3));
2051:       assertFalse(node0.equals((Object)node1));
2052:       assertFalse(node0.equals((Object)node2));
2053:       assertFalse(node2.equals((Object)node1));
2054:       assertFalse(node2.equals((Object)node3));
2055:       assertFalse(node2.equals((Object)node0));
2056:       assertFalse(node3.equals((Object)node2));
2057:       assertFalse(node3.equals((Object)node1));
2058:       assertFalse(node3.equals((Object)node0));
2059:       assertTrue(boolean5 == boolean3);
2060:       assertTrue(boolean5 == boolean1);
2061:       assertFalse(boolean5 == boolean0);
2062:       assertFalse(boolean5 == boolean2);
2063:       assertTrue(boolean5 == boolean4);
2064:       assertNotSame(node2, node1);
2065:       assertNotSame(node2, node3);
2066:       assertNotSame(node3, node2);
2067:       assertNotSame(node3, node1);
2068:       assertFalse(node0.isTypeOf());
2069:       assertFalse(node0.isNumber());
2070:       assertFalse(node0.isAssignAdd());
2071:       assertFalse(node0.isReturn());
2072:       assertFalse(node0.isOr());
2073:       assertFalse(node0.isAssign());
2074:       assertFalse(node0.isDec());
2075:       assertFalse(node0.isLabel());
2076:       assertFalse(node0.hasChildren());
2077:       assertFalse(node0.hasMoreThanOneChild());
2078:       assertFalse(node0.isCast());
2079:       assertFalse(node0.isContinue());
2080:       assertFalse(node0.isLabelName());
2081:       assertFalse(node0.isGetElem());
2082:       assertFalse(node0.isVar());
2083:       assertEquals(52, node0.getSourcePosition());
2084:       assertFalse(node0.isAdd());
2085:       assertFalse(node0.isDo());
2086:       assertFalse(node0.isNew());
2087:       assertFalse(node0.isParamList());
2088:       assertFalse(node0.isSetterDef());
2089:       assertFalse(node0.isThis());
2090:       assertEquals(0, node0.getChildCount());
2091:       assertFalse(node0.isCatch());
2092:       assertFalse(node0.isStringKey());
2093:       assertFalse(node0.isInstanceOf());
2094:       assertFalse(node0.isSwitch());
2095:       assertFalse(node0.isRegExp());
2096:       assertFalse(node0.isScript());
2097:       assertFalse(node0.isWith());
2098:       assertFalse(node0.isBlock());
2099:       assertFalse(node0.isHook());
2100:       assertFalse(node0.isTry());
2101:       assertFalse(node0.hasOneChild());
2102:       assertFalse(node0.isCase());
2103:       assertFalse(node0.isNE());
2104:       assertFalse(node0.isIf());
2105:       assertFalse(node0.isFor());
2106:       assertFalse(node0.isGetterDef());
2107:       assertFalse(node0.isDelProp());
2108:       assertFalse(node0.isArrayLit());
2109:       assertFalse(node0.isFunction());
2110:       assertFalse(node0.isInc());
2111:       assertFalse(node0.isVoid());
2112:       assertFalse(node0.isTrue());
2113:       assertFalse(node0.isDefaultCase());
2114:       assertFalse(node0.isThrow());
2115:       assertFalse(node0.isIn());
2116:       assertEquals(52, node0.getCharno());
2117:       assertFalse(node0.isEmpty());
2118:       assertFalse(node0.isComma());
2119:       assertFalse(node0.isNull());
2120:       assertFalse(node0.isCall());
2121:       assertFalse(node0.isFalse());
2122:       assertFalse(node0.isAnd());
2123:       assertFalse(node0.isName());
2124:       assertEquals(0, node0.getType());
2125:       assertEquals(0, node0.getLineno());
2126:       assertFalse(node0.isBreak());
2127:       assertFalse(node0.isExprResult());
2128:       assertFalse(node0.isString());
2129:       assertFalse(node0.isWhile());
2130:       assertFalse(node0.isNot());
2131:       assertFalse(node0.isDebugger());
2132:       assertFalse(node0.isObjectLit());
2133:       assertFalse(node0.isGetProp());
2134:       assertFalse(node2.isWhile());
2135:       assertFalse(node2.isDo());
2136:       assertFalse(node2.isContinue());
2137:       assertFalse(node2.isNew());
2138:       assertFalse(node2.isAdd());
2139:       assertFalse(node2.isOr());
2140:       assertFalse(node2.isStringKey());
2141:       assertFalse(node2.isLabelName());
2142:       assertFalse(node2.isCast());
2143:       assertEquals(0, node2.getLineno());
2144:       assertFalse(node2.isSetterDef());
2145:       assertEquals(0, node2.getChildCount());
2146:       assertFalse(node2.isAssignAdd());
2147:       assertFalse(node2.isVar());
2148:       assertFalse(node2.isLabel());
2149:       assertFalse(node2.isNot());
2150:       assertFalse(node2.isFunction());
2151:       assertFalse(node2.isDefaultCase());
2152:       assertFalse(node2.isVoid());
2153:       assertFalse(node2.isExprResult());
2154:       assertFalse(node2.isTrue());
2155:       assertFalse(node2.isAnd());
2156:       assertFalse(node2.isObjectLit());
2157:       assertFalse(node2.isDebugger());
2158:       assertFalse(node2.isNull());
2159:       assertFalse(node2.isBreak());
2160:       assertFalse(node2.isDelProp());
2161:       assertFalse(node2.hasChildren());
2162:       assertFalse(node2.isDec());
2163:       assertFalse(node2.isAssign());
2164:       assertFalse(node2.isName());
2165:       assertFalse(node2.isTypeOf());
2166:       assertFalse(node2.isCall());
2167:       assertFalse(node2.isGetElem());
2168:       assertFalse(node2.isGetProp());
2169:       assertEquals(12, node2.getType());
2170:       assertFalse(node2.isComma());
2171:       assertFalse(node2.isReturn());
2172:       assertFalse(node2.isString());
2173:       assertFalse(node2.isSwitch());
2174:       assertFalse(node2.isCase());
2175:       assertFalse(node2.isInc());
2176:       assertFalse(node2.isIn());
2177:       assertFalse(node2.isNE());
2178:       assertEquals(52, node2.getCharno());
2179:       assertFalse(node2.isFalse());
2180:       assertFalse(node2.isEmpty());
2181:       assertFalse(node2.isArrayLit());
2182:       assertFalse(node2.isThrow());
2183:       assertFalse(node2.isRegExp());
2184:       assertEquals(52, node2.getSourcePosition());
2185:       assertFalse(node2.isWith());
2186:       assertFalse(node2.isCatch());
2187:       assertFalse(node2.isScript());
2188:       assertFalse(node2.isParamList());
2189:       assertFalse(node2.isGetterDef());
2190:       assertFalse(node2.isIf());
2191:       assertFalse(node2.isNumber());
2192:       assertFalse(node2.hasOneChild());
2193:       assertFalse(node2.isInstanceOf());
2194:       assertFalse(node2.isTry());
2195:       assertFalse(node2.hasMoreThanOneChild());
2196:       assertFalse(node2.isBlock());
2197:       assertFalse(node2.isFor());
2198:       assertFalse(node2.isHook());
2199:       assertFalse(node2.isThis());
2200:       assertFalse(node3.isVoid());
2201:       assertEquals(4095, node3.getType());
2202:       assertFalse(node3.isTry());
2203:       assertFalse(node3.isTrue());
2204:       assertFalse(node3.isDebugger());
2205:       assertFalse(node3.isFor());
2206:       assertEquals(52, node3.getCharno());
2207:       assertFalse(node3.isDefaultCase());
2208:       assertFalse(node3.isGetterDef());
2209:       assertFalse(node3.isEmpty());
2210:       assertFalse(node3.isIn());
2211:       assertFalse(node3.isNull());
2212:       assertFalse(node3.isNE());
2213:       assertFalse(node3.isIf());
2214:       assertFalse(node3.isName());
2215:       assertTrue(node3.hasMoreThanOneChild());
2216:       assertFalse(node3.isRegExp());
2217:       assertFalse(node3.isDelProp());
2218:       assertFalse(node3.isCatch());
2219:       assertFalse(node3.isCall());
2220:       assertTrue(node3.hasChildren());
2221:       assertFalse(node3.isNew());
2222:       assertFalse(node3.isSwitch());
2223:       assertFalse(node3.isBlock());
2224:       assertFalse(node3.isStringKey());
2225:       assertFalse(node3.isHook());
2226:       assertFalse(node3.isVar());
2227:       assertFalse(node3.isCase());
2228:       assertFalse(node3.isDo());
2229:       assertFalse(node3.isAdd());
2230:       assertFalse(node3.isAssignAdd());
2231:       assertFalse(node3.isLabel());
2232:       assertFalse(node3.isParamList());
2233:       assertFalse(node3.isLabelName());
2234:       assertFalse(node3.isArrayLit());
2235:       assertFalse(node3.hasOneChild());
2236:       assertFalse(node3.isNumber());
2237:       assertFalse(node3.isObjectLit());
2238:       assertFalse(node3.isNot());
2239:       assertFalse(node3.isScript());
2240:       assertFalse(node3.isReturn());
2241:       assertFalse(node3.isOr());
2242:       assertFalse(node3.isThis());
2243:       assertFalse(node3.isComma());
2244:       assertFalse(node3.isWith());
2245:       assertFalse(node3.isBreak());
2246:       assertFalse(node3.isTypeOf());
2247:       assertFalse(node3.isDec());
2248:       assertFalse(node3.isAssign());
2249:       assertFalse(node3.isExprResult());
2250:       assertFalse(node3.isInstanceOf());
2251:       assertFalse(node3.isGetElem());
2252:       assertFalse(node3.isThrow());
2253:       assertFalse(node3.isString());
2254:       assertFalse(node3.isWhile());
2255:       assertFalse(node3.isSetterDef());
2256:       assertFalse(node3.isInc());
2257:       assertFalse(node3.isGetProp());
2258:       assertEquals(0, node3.getLineno());
2259:       assertEquals(2, node3.getChildCount());
2260:       assertFalse(node3.isAnd());
2261:       assertEquals(52, node3.getSourcePosition());
2262:       assertFalse(node3.isFalse());
2263:       assertFalse(node3.isFunction());
2264:       assertFalse(node3.isContinue());
2265:       assertFalse(node3.isCast());
2266:       assertEquals(48, Node.DIRECTIVES);
2267:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2268:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2269:       assertEquals(40, Node.ORIGINALNAME_PROP);
2270:       assertEquals(4095, Node.COLUMN_MASK);
2271:       assertEquals(52, Node.LENGTH);
2272:       assertEquals(53, Node.INPUT_ID);
2273:       assertEquals(57, Node.REFLECTED_OBJECT);
2274:       assertEquals(57, Node.LAST_PROP);
2275:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2276:       assertEquals(29, Node.JSDOC_INFO_PROP);
2277:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2278:       assertEquals(36, Node.QUOTED_PROP);
2279:       assertEquals(55, Node.INFERRED_FUNCTION);
2280:       assertEquals(8, Node.FLAG_NO_THROWS);
2281:       assertEquals(39, Node.EMPTY_BLOCK);
2282:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2283:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2284:       assertEquals(32, Node.INCRDECR_PROP);
2285:       assertEquals(46, Node.IS_NAMESPACE);
2286:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2287:       assertEquals(37, Node.OPT_ARG_NAME);
2288:       assertEquals(12, Node.COLUMN_BITS);
2289:       assertEquals(56, Node.CHANGE_TIME);
2290:       assertEquals(30, Node.VAR_ARGS_NAME);
2291:       assertEquals(49, Node.DIRECT_EVAL);
2292:       assertEquals(47, Node.IS_DISPATCHER);
2293:       assertEquals(2, Node.POST_FLAG);
2294:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2295:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2296:       assertEquals(54, Node.SLASH_V);
2297:       assertEquals(43, Node.IS_CONSTANT_NAME);
2298:       assertEquals(50, Node.FREE_CALL);
2299:       assertEquals(1, Node.DECR_FLAG);
2300:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2301:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2302:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2303:       assertEquals(36, Node.QUOTED_PROP);
2304:       assertEquals(53, Node.INPUT_ID);
2305:       
2306:       boolean boolean6 = node1.isFromExterns();
2307:       assertFalse(node1.equals((Object)node3));
2308:       assertFalse(node1.equals((Object)node2));
2309:       assertFalse(node1.equals((Object)node0));
2310:       assertTrue(boolean6 == boolean5);
2311:       assertTrue(boolean6 == boolean3);
2312:       assertTrue(boolean6 == boolean1);
2313:       assertFalse(boolean6 == boolean0);
2314:       assertTrue(boolean6 == boolean4);
2315:       assertFalse(boolean6 == boolean2);
2316:       assertNotSame(node1, node3);
2317:       assertNotSame(node1, node2);
2318:       assertFalse(node1.isThis());
2319:       assertFalse(node1.isComma());
2320:       assertFalse(node1.isAnd());
2321:       assertFalse(node1.isWith());
2322:       assertFalse(node1.isFalse());
2323:       assertFalse(node1.isInstanceOf());
2324:       assertFalse(node1.isBreak());
2325:       assertFalse(node1.isExprResult());
2326:       assertFalse(node1.hasOneChild());
2327:       assertFalse(node1.isSwitch());
2328:       assertEquals((-1), node1.getCharno());
2329:       assertFalse(node1.isHook());
2330:       assertFalse(node1.isNot());
2331:       assertFalse(node1.isCase());
2332:       assertFalse(node1.isString());
2333:       assertFalse(node1.isNumber());
2334:       assertFalse(node1.isObjectLit());
2335:       assertFalse(node1.isGetProp());
2336:       assertFalse(node1.isScript());
2337:       assertEquals((-1), node1.getLineno());
2338:       assertFalse(node1.isIn());
2339:       assertFalse(node1.isNE());
2340:       assertEquals((-1), node1.getSourcePosition());
2341:       assertFalse(node1.isIf());
2342:       assertFalse(node1.hasMoreThanOneChild());
2343:       assertFalse(node1.isCast());
2344:       assertFalse(node1.isContinue());
2345:       assertFalse(node1.isFunction());
2346:       assertFalse(node1.isThrow());
2347:       assertFalse(node1.isSetterDef());
2348:       assertFalse(node1.isInc());
2349:       assertEquals(0, node1.getChildCount());
2350:       assertFalse(node1.isParamList());
2351:       assertFalse(node1.isNull());
2352:       assertFalse(node1.isRegExp());
2353:       assertFalse(node1.isName());
2354:       assertFalse(node1.isCatch());
2355:       assertFalse(node1.isCall());
2356:       assertEquals((-1), node1.getType());
2357:       assertFalse(node1.isTry());
2358:       assertFalse(node1.isDebugger());
2359:       assertFalse(node1.isStringKey());
2360:       assertFalse(node1.isBlock());
2361:       assertFalse(node1.isFor());
2362:       assertFalse(node1.isWhile());
2363:       assertFalse(node1.isGetterDef());
2364:       assertFalse(node1.isAssignAdd());
2365:       assertFalse(node1.isOr());
2366:       assertFalse(node1.isReturn());
2367:       assertFalse(node1.isLabel());
2368:       assertFalse(node1.hasChildren());
2369:       assertFalse(node1.isLabelName());
2370:       assertFalse(node1.isAssign());
2371:       assertFalse(node1.isDec());
2372:       assertFalse(node1.isTypeOf());
2373:       assertFalse(node1.isDelProp());
2374:       assertFalse(node1.isArrayLit());
2375:       assertFalse(node1.isGetElem());
2376:       assertFalse(node1.isNew());
2377:       assertFalse(node1.isVoid());
2378:       assertFalse(node1.isVar());
2379:       assertFalse(node1.isTrue());
2380:       assertFalse(node1.isEmpty());
2381:       assertFalse(node1.isDo());
2382:       assertFalse(node1.isDefaultCase());
2383:       assertFalse(node1.isAdd());
2384:       
2385:       Iterable<Node> iterable0 = node0.children();
2386:       assertFalse(node0.equals((Object)node3));
2387:       assertFalse(node0.equals((Object)node1));
2388:       assertFalse(node0.equals((Object)node2));
2389:       assertFalse(node0.isTypeOf());
2390:       assertFalse(node0.isNumber());
2391:       assertFalse(node0.isAssignAdd());
2392:       assertFalse(node0.isReturn());
2393:       assertFalse(node0.isOr());
2394:       assertFalse(node0.isAssign());
2395:       assertFalse(node0.isDec());
2396:       assertFalse(node0.isLabel());
2397:       assertFalse(node0.hasChildren());
2398:       assertFalse(node0.hasMoreThanOneChild());
2399:       assertFalse(node0.isCast());
2400:       assertFalse(node0.isContinue());
2401:       assertFalse(node0.isLabelName());
2402:       assertFalse(node0.isGetElem());
2403:       assertFalse(node0.isVar());
2404:       assertEquals(52, node0.getSourcePosition());
2405:       assertFalse(node0.isAdd());
2406:       assertFalse(node0.isDo());
2407:       assertFalse(node0.isNew());
2408:       assertFalse(node0.isParamList());
2409:       assertFalse(node0.isSetterDef());
2410:       assertFalse(node0.isThis());
2411:       assertEquals(0, node0.getChildCount());
2412:       assertFalse(node0.isCatch());
2413:       assertFalse(node0.isStringKey());
2414:       assertFalse(node0.isInstanceOf());
2415:       assertFalse(node0.isSwitch());
2416:       assertFalse(node0.isRegExp());
2417:       assertFalse(node0.isScript());
2418:       assertFalse(node0.isWith());
2419:       assertFalse(node0.isBlock());
2420:       assertFalse(node0.isHook());
2421:       assertFalse(node0.isTry());
2422:       assertFalse(node0.hasOneChild());
2423:       assertFalse(node0.isCase());
2424:       assertFalse(node0.isNE());
2425:       assertFalse(node0.isIf());
2426:       assertFalse(node0.isFor());
2427:       assertFalse(node0.isGetterDef());
2428:       assertFalse(node0.isDelProp());
2429:       assertFalse(node0.isArrayLit());
2430:       assertFalse(node0.isFunction());
2431:       assertFalse(node0.isInc());
2432:       assertFalse(node0.isVoid());
2433:       assertFalse(node0.isTrue());
2434:       assertFalse(node0.isDefaultCase());
2435:       assertFalse(node0.isThrow());
2436:       assertFalse(node0.isIn());
2437:       assertEquals(52, node0.getCharno());
2438:       assertFalse(node0.isEmpty());
2439:       assertFalse(node0.isComma());
2440:       assertFalse(node0.isNull());
2441:       assertFalse(node0.isCall());
2442:       assertFalse(node0.isFalse());
2443:       assertFalse(node0.isAnd());
2444:       assertFalse(node0.isName());
2445:       assertEquals(0, node0.getType());
2446:       assertEquals(0, node0.getLineno());
2447:       assertFalse(node0.isBreak());
2448:       assertFalse(node0.isExprResult());
2449:       assertFalse(node0.isString());
2450:       assertFalse(node0.isWhile());
2451:       assertFalse(node0.isNot());
2452:       assertFalse(node0.isDebugger());
2453:       assertFalse(node0.isObjectLit());
2454:       assertFalse(node0.isGetProp());
2455:       assertFalse(iterable0.contains(node1));
2456:       
2457:       boolean boolean7 = node1.isDefaultCase();
2458:       assertFalse(boolean7 == boolean2);
2459:       assertTrue(boolean7 == boolean4);
2460:       assertTrue(boolean7 == boolean5);
2461:       assertTrue(boolean7 == boolean3);
2462:       assertFalse(boolean7 == boolean0);
2463:       assertTrue(boolean7 == boolean1);
2464:       assertTrue(boolean7 == boolean6);
2465:       assertFalse(node1.equals((Object)node3));
2466:       assertFalse(node1.equals((Object)node2));
2467:       assertFalse(node1.equals((Object)node0));
2468:       assertNotSame(node1, node3);
2469:       assertNotSame(node1, node2);
2470:       assertFalse(node1.isThis());
2471:       assertFalse(node1.isComma());
2472:       assertFalse(node1.isAnd());
2473:       assertFalse(node1.isWith());
2474:       assertFalse(node1.isFalse());
2475:       assertFalse(node1.isInstanceOf());
2476:       assertFalse(node1.isBreak());
2477:       assertFalse(node1.isExprResult());
2478:       assertFalse(node1.hasOneChild());
2479:       assertFalse(node1.isSwitch());
2480:       assertEquals((-1), node1.getCharno());
2481:       assertFalse(node1.isHook());
2482:       assertFalse(node1.isNot());
2483:       assertFalse(node1.isCase());
2484:       assertFalse(node1.isString());
2485:       assertFalse(node1.isNumber());
2486:       assertFalse(node1.isObjectLit());
2487:       assertFalse(node1.isGetProp());
2488:       assertFalse(node1.isScript());
2489:       assertEquals((-1), node1.getLineno());
2490:       assertFalse(node1.isIn());
2491:       assertFalse(node1.isNE());
2492:       assertEquals((-1), node1.getSourcePosition());
2493:       assertFalse(node1.isIf());
2494:       assertFalse(node1.hasMoreThanOneChild());
2495:       assertFalse(node1.isCast());
2496:       assertFalse(node1.isContinue());
2497:       assertFalse(node1.isFunction());
2498:       assertFalse(node1.isThrow());
2499:       assertFalse(node1.isSetterDef());
2500:       assertFalse(node1.isInc());
2501:       assertEquals(0, node1.getChildCount());
2502:       assertFalse(node1.isParamList());
2503:       assertFalse(node1.isNull());
2504:       assertFalse(node1.isRegExp());
2505:       assertFalse(node1.isName());
2506:       assertFalse(node1.isCatch());
2507:       assertFalse(node1.isCall());
2508:       assertEquals((-1), node1.getType());
2509:       assertFalse(node1.isTry());
2510:       assertFalse(node1.isDebugger());
2511:       assertFalse(node1.isStringKey());
2512:       assertFalse(node1.isBlock());
2513:       assertFalse(node1.isFor());
2514:       assertFalse(node1.isWhile());
2515:       assertFalse(node1.isGetterDef());
2516:       assertFalse(node1.isAssignAdd());
2517:       assertFalse(node1.isOr());
2518:       assertFalse(node1.isReturn());
2519:       assertFalse(node1.isLabel());
2520:       assertFalse(node1.hasChildren());
2521:       assertFalse(node1.isLabelName());
2522:       assertFalse(node1.isAssign());
2523:       assertFalse(node1.isDec());
2524:       assertFalse(node1.isTypeOf());
2525:       assertFalse(node1.isDelProp());
2526:       assertFalse(node1.isArrayLit());
2527:       assertFalse(node1.isGetElem());
2528:       assertFalse(node1.isNew());
2529:       assertFalse(node1.isVoid());
2530:       assertFalse(node1.isVar());
2531:       assertFalse(node1.isTrue());
2532:       assertFalse(node1.isEmpty());
2533:       assertFalse(node1.isDo());
2534:       assertFalse(node1.isDefaultCase());
2535:       assertFalse(node1.isAdd());
2536:   }
2537: }
RegularFileObject[/tmp/EvoSuite_184_1628161956114/com/google/javascript/rhino/Node_184_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:12:36 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_184_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_184_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_184_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.javascript.rhino.jstype.NamedType",
333:       "com.google.javascript.rhino.jstype.TemplatizedType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.javascript.rhino.JSTypeExpression",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.InputId",
348:       "com.google.javascript.rhino.jstype.JSType$TypePair",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.Platform",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
365:       "com.google.common.collect.Sets$ImprovedAbstractSet",
366:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
367:       "com.google.common.collect.Hashing",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet"
369:     );
370:   }
371: }

[MASTER] 11:12:36.654 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) (-219), (-219), 0);
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node node1 = new Node((-1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertEquals((-1), node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);

boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node node2 = new Node(12, 31, 2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertEquals(2, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertEquals(126978, node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isGetProp());
assertEquals(12, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isFalse());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertEquals(31, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean1 = node2.isNE();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertNotSame(node2, node1);
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertEquals(2, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertEquals(126978, node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isGetProp());
assertEquals(12, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isFalse());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertEquals(31, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean2 = node2.mayMutateGlobalStateOrThrow();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertNotSame(node2, node1);
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertEquals(2, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertEquals(126978, node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isGetProp());
assertEquals(12, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isFalse());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertEquals(31, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean3 = node2.isOnlyModifiesArgumentsCall();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean3 == boolean1);
assertFalse(boolean3 == boolean0);
assertFalse(boolean3 == boolean2);
assertNotSame(node2, node1);
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertEquals(2, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertEquals(126978, node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isGetProp());
assertEquals(12, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isFalse());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertEquals(31, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

node0.getQualifiedName();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

node0.setType(0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertEquals(0, node0.getType());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node node3 = new Node(4095, node0, node2, node2, 56, 47);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertEquals(0, node0.getType());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertEquals(2, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertEquals(126978, node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isGetProp());
assertEquals(12, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isFalse());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertEquals(31, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node3.isVoid());
assertEquals(4095, node3.getType());
assertFalse(node3.isTry());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isFor());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.isIn());
assertEquals(47, node3.getCharno());
assertFalse(node3.isNull());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isName());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isDelProp());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertTrue(node3.hasChildren());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isBlock());
assertFalse(node3.isStringKey());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isCase());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isParamList());
assertEquals(229423, node3.getSourcePosition());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertEquals(56, node3.getLineno());
assertFalse(node3.isNumber());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isScript());
assertFalse(node3.isReturn());
assertFalse(node3.isOr());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isWith());
assertFalse(node3.isBreak());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isExprResult());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isThrow());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isGetProp());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isAnd());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

node3.setSourceEncodedPositionForTree(52);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertNotSame(node3, node2);
assertNotSame(node3, node1);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertEquals(52, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertEquals(52, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertEquals(0, node0.getType());
assertEquals(0, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertEquals(0, node2.getLineno());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isGetProp());
assertEquals(12, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertEquals(52, node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isRegExp());
assertEquals(52, node2.getSourcePosition());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node3.isVoid());
assertEquals(4095, node3.getType());
assertFalse(node3.isTry());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isFor());
assertEquals(52, node3.getCharno());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.isIn());
assertFalse(node3.isNull());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isName());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isDelProp());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertTrue(node3.hasChildren());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isBlock());
assertFalse(node3.isStringKey());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isCase());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isNumber());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isScript());
assertFalse(node3.isReturn());
assertFalse(node3.isOr());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isWith());
assertFalse(node3.isBreak());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isExprResult());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isThrow());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isGetProp());
assertEquals(0, node3.getLineno());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isAnd());
assertEquals(52, node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

boolean boolean4 = node1.isSetterDef();
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean4 == boolean2);
assertFalse(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertEquals((-1), node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);

Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node3);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertNotSame(node3, node2);
assertNotSame(node3, node1);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertEquals(52, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertEquals(52, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertEquals(0, node0.getType());
assertEquals(0, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertEquals(0, node2.getLineno());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isGetProp());
assertEquals(12, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertEquals(52, node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isRegExp());
assertEquals(52, node2.getSourcePosition());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node3.isVoid());
assertEquals(4095, node3.getType());
assertFalse(node3.isTry());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isFor());
assertEquals(52, node3.getCharno());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.isIn());
assertFalse(node3.isNull());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isName());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isDelProp());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertTrue(node3.hasChildren());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isBlock());
assertFalse(node3.isStringKey());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isCase());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isNumber());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isScript());
assertFalse(node3.isReturn());
assertFalse(node3.isOr());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isWith());
assertFalse(node3.isBreak());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isExprResult());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isThrow());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isGetProp());
assertEquals(0, node3.getLineno());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isAnd());
assertEquals(52, node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

boolean boolean5 = node_NodeMismatch0.equals((Object) null);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertFalse(boolean5 == boolean0);
assertFalse(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertNotSame(node3, node2);
assertNotSame(node3, node1);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertEquals(52, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertEquals(52, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertEquals(0, node0.getType());
assertEquals(0, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertEquals(0, node2.getLineno());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isGetProp());
assertEquals(12, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertEquals(52, node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isRegExp());
assertEquals(52, node2.getSourcePosition());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node3.isVoid());
assertEquals(4095, node3.getType());
assertFalse(node3.isTry());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isFor());
assertEquals(52, node3.getCharno());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.isIn());
assertFalse(node3.isNull());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isName());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isDelProp());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertTrue(node3.hasChildren());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isBlock());
assertFalse(node3.isStringKey());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isCase());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isNumber());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isScript());
assertFalse(node3.isReturn());
assertFalse(node3.isOr());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isWith());
assertFalse(node3.isBreak());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isExprResult());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isThrow());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isGetProp());
assertEquals(0, node3.getLineno());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isAnd());
assertEquals(52, node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);

boolean boolean6 = node1.isFromExterns();
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean1);
assertFalse(boolean6 == boolean0);
assertTrue(boolean6 == boolean4);
assertFalse(boolean6 == boolean2);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertEquals((-1), node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertEquals(52, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertEquals(52, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertEquals(0, node0.getType());
assertEquals(0, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(iterable0.contains(node1));

boolean boolean7 = node1.isDefaultCase();
assertFalse(boolean7 == boolean2);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean3);
assertFalse(boolean7 == boolean0);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean6);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertEquals((-1), node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());


[MASTER] 11:12:45.317 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_230_1628161964926/com/google/javascript/rhino/Node_230_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_230_1628161964926/com/google/javascript/rhino/Node_230_tmp__ESTest_scaffolding.java]]
[MASTER] 11:12:45.317 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:45.317 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:12:45.317 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1820
[MASTER] 11:12:45.318 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_230_1628161964926/com/google/javascript/rhino/Node_230_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:12:44 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_230_tmp__ESTest extends Node_230_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber((double) (-219), (-219), (-219));
21:       assertFalse(node0.isReturn());
22:       assertFalse(node0.isLabel());
23:       assertFalse(node0.isContinue());
24:       assertFalse(node0.hasMoreThanOneChild());
25:       assertFalse(node0.isOr());
26:       assertFalse(node0.isTypeOf());
27:       assertEquals((-1), node0.getSourcePosition());
28:       assertFalse(node0.isGetElem());
29:       assertEquals((-1), node0.getLineno());
30:       assertFalse(node0.isLabelName());
31:       assertFalse(node0.hasOneChild());
32:       assertFalse(node0.isCall());
33:       assertFalse(node0.isBlock());
34:       assertFalse(node0.isAssign());
35:       assertFalse(node0.isDec());
36:       assertFalse(node0.hasChildren());
37:       assertFalse(node0.isWhile());
38:       assertEquals(39, node0.getType());
39:       assertFalse(node0.isScript());
40:       assertFalse(node0.isInstanceOf());
41:       assertFalse(node0.isCatch());
42:       assertFalse(node0.isWith());
43:       assertFalse(node0.isObjectLit());
44:       assertFalse(node0.isNot());
45:       assertFalse(node0.isAnd());
46:       assertFalse(node0.isCast());
47:       assertFalse(node0.isFalse());
48:       assertFalse(node0.isFunction());
49:       assertFalse(node0.isSetterDef());
50:       assertFalse(node0.isInc());
51:       assertFalse(node0.isThrow());
52:       assertFalse(node0.isIn());
53:       assertFalse(node0.isIf());
54:       assertFalse(node0.isNE());
55:       assertFalse(node0.isSwitch());
56:       assertFalse(node0.isDelProp());
57:       assertFalse(node0.isHook());
58:       assertEquals((-1), node0.getCharno());
59:       assertFalse(node0.isDebugger());
60:       assertFalse(node0.isRegExp());
61:       assertFalse(node0.isGetterDef());
62:       assertFalse(node0.isString());
63:       assertFalse(node0.isThis());
64:       assertFalse(node0.isFor());
65:       assertFalse(node0.isGetProp());
66:       assertFalse(node0.isCase());
67:       assertTrue(node0.isNumber());
68:       assertFalse(node0.isTry());
69:       assertEquals(0, node0.getChildCount());
70:       assertFalse(node0.isComma());
71:       assertFalse(node0.isBreak());
72:       assertFalse(node0.isNull());
73:       assertFalse(node0.isTrue());
74:       assertFalse(node0.isExprResult());
75:       assertFalse(node0.isStringKey());
76:       assertFalse(node0.isParamList());
77:       assertFalse(node0.isVoid());
78:       assertFalse(node0.isName());
79:       assertFalse(node0.isArrayLit());
80:       assertFalse(node0.isVar());
81:       assertFalse(node0.isAdd());
82:       assertFalse(node0.isDefaultCase());
83:       assertFalse(node0.isEmpty());
84:       assertFalse(node0.isNew());
85:       assertFalse(node0.isAssignAdd());
86:       assertFalse(node0.isDo());
87:       assertEquals(43, Node.IS_CONSTANT_NAME);
88:       assertEquals(36, Node.QUOTED_PROP);
89:       assertEquals(48, Node.DIRECTIVES);
90:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
91:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
92:       assertEquals(4095, Node.COLUMN_MASK);
93:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
94:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
95:       assertEquals(50, Node.FREE_CALL);
96:       assertEquals(32, Node.INCRDECR_PROP);
97:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
98:       assertEquals(1, Node.DECR_FLAG);
99:       assertEquals(30, Node.VAR_ARGS_NAME);
100:       assertEquals(49, Node.DIRECT_EVAL);
101:       assertEquals(57, Node.LAST_PROP);
102:       assertEquals(51, Node.STATIC_SOURCE_FILE);
103:       assertEquals(12, Node.COLUMN_BITS);
104:       assertEquals(46, Node.IS_NAMESPACE);
105:       assertEquals(54, Node.SLASH_V);
106:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
107:       assertEquals(37, Node.OPT_ARG_NAME);
108:       assertEquals(2, Node.POST_FLAG);
109:       assertEquals(40, Node.ORIGINALNAME_PROP);
110:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
111:       assertEquals(56, Node.CHANGE_TIME);
112:       assertEquals(47, Node.IS_DISPATCHER);
113:       assertEquals(57, Node.REFLECTED_OBJECT);
114:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
115:       assertEquals(52, Node.LENGTH);
116:       assertEquals(8, Node.FLAG_NO_THROWS);
117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
118:       assertEquals(55, Node.INFERRED_FUNCTION);
119:       assertEquals(39, Node.EMPTY_BLOCK);
120:       assertEquals(29, Node.JSDOC_INFO_PROP);
121:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
122:       assertEquals(53, Node.INPUT_ID);
123:       assertNotNull(node0);
124:       
125:       Node node1 = new Node((-1));
126:       assertFalse(node1.equals((Object)node0));
127:       assertFalse(node1.isIn());
128:       assertFalse(node1.isGetterDef());
129:       assertFalse(node1.isString());
130:       assertFalse(node1.isEmpty());
131:       assertFalse(node1.isFor());
132:       assertFalse(node1.isInc());
133:       assertFalse(node1.isCase());
134:       assertEquals((-1), node1.getType());
135:       assertFalse(node1.isFunction());
136:       assertFalse(node1.isDebugger());
137:       assertEquals((-1), node1.getCharno());
138:       assertFalse(node1.isFalse());
139:       assertFalse(node1.isSwitch());
140:       assertFalse(node1.isArrayLit());
141:       assertFalse(node1.isInstanceOf());
142:       assertFalse(node1.isCatch());
143:       assertFalse(node1.isThis());
144:       assertFalse(node1.isScript());
145:       assertFalse(node1.isThrow());
146:       assertFalse(node1.isSetterDef());
147:       assertFalse(node1.isTry());
148:       assertFalse(node1.isBlock());
149:       assertFalse(node1.isHook());
150:       assertFalse(node1.isRegExp());
151:       assertFalse(node1.isIf());
152:       assertFalse(node1.isWith());
153:       assertFalse(node1.isNE());
154:       assertEquals((-1), node1.getLineno());
155:       assertFalse(node1.isReturn());
156:       assertFalse(node1.isAssignAdd());
157:       assertFalse(node1.isLabel());
158:       assertFalse(node1.hasMoreThanOneChild());
159:       assertFalse(node1.isContinue());
160:       assertFalse(node1.isNumber());
161:       assertEquals((-1), node1.getSourcePosition());
162:       assertFalse(node1.isTypeOf());
163:       assertFalse(node1.isDec());
164:       assertFalse(node1.isOr());
165:       assertFalse(node1.isWhile());
166:       assertFalse(node1.hasChildren());
167:       assertFalse(node1.isNew());
168:       assertFalse(node1.hasOneChild());
169:       assertFalse(node1.isDo());
170:       assertFalse(node1.isVar());
171:       assertFalse(node1.isCast());
172:       assertFalse(node1.isStringKey());
173:       assertFalse(node1.isParamList());
174:       assertFalse(node1.isAnd());
175:       assertFalse(node1.isLabelName());
176:       assertFalse(node1.isObjectLit());
177:       assertFalse(node1.isComma());
178:       assertFalse(node1.isNot());
179:       assertEquals(0, node1.getChildCount());
180:       assertFalse(node1.isDefaultCase());
181:       assertFalse(node1.isGetProp());
182:       assertFalse(node1.isAdd());
183:       assertFalse(node1.isTrue());
184:       assertFalse(node1.isAssign());
185:       assertFalse(node1.isBreak());
186:       assertFalse(node1.isNull());
187:       assertFalse(node1.isGetElem());
188:       assertFalse(node1.isCall());
189:       assertFalse(node1.isExprResult());
190:       assertFalse(node1.isName());
191:       assertFalse(node1.isVoid());
192:       assertFalse(node1.isDelProp());
193:       assertEquals(4095, Node.COLUMN_MASK);
194:       assertEquals(43, Node.IS_CONSTANT_NAME);
195:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
196:       assertEquals(8, Node.FLAG_NO_THROWS);
197:       assertEquals(39, Node.EMPTY_BLOCK);
198:       assertEquals(36, Node.QUOTED_PROP);
199:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
200:       assertEquals(53, Node.INPUT_ID);
201:       assertEquals(55, Node.INFERRED_FUNCTION);
202:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
203:       assertEquals(40, Node.ORIGINALNAME_PROP);
204:       assertEquals(50, Node.FREE_CALL);
205:       assertEquals(47, Node.IS_DISPATCHER);
206:       assertEquals(54, Node.SLASH_V);
207:       assertEquals(2, Node.POST_FLAG);
208:       assertEquals(51, Node.STATIC_SOURCE_FILE);
209:       assertEquals(1, Node.DECR_FLAG);
210:       assertEquals(30, Node.VAR_ARGS_NAME);
211:       assertEquals(49, Node.DIRECT_EVAL);
212:       assertEquals(32, Node.INCRDECR_PROP);
213:       assertEquals(57, Node.LAST_PROP);
214:       assertEquals(12, Node.COLUMN_BITS);
215:       assertEquals(46, Node.IS_NAMESPACE);
216:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
217:       assertEquals(52, Node.LENGTH);
218:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
219:       assertEquals(15, Node.NO_SIDE_EFFECTS);
220:       assertEquals(29, Node.JSDOC_INFO_PROP);
221:       assertEquals(56, Node.CHANGE_TIME);
222:       assertEquals(57, Node.REFLECTED_OBJECT);
223:       assertEquals(37, Node.OPT_ARG_NAME);
224:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
225:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
226:       assertEquals(48, Node.DIRECTIVES);
227:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
228:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
229:       assertNotNull(node1);
230:       
231:       String string0 = node1.toStringTree();
232:       assertFalse(node1.equals((Object)node0));
233:       assertFalse(node1.isIn());
234:       assertFalse(node1.isGetterDef());
235:       assertFalse(node1.isString());
236:       assertFalse(node1.isEmpty());
237:       assertFalse(node1.isFor());
238:       assertFalse(node1.isInc());
239:       assertFalse(node1.isCase());
240:       assertEquals((-1), node1.getType());
241:       assertFalse(node1.isFunction());
242:       assertFalse(node1.isDebugger());
243:       assertEquals((-1), node1.getCharno());
244:       assertFalse(node1.isFalse());
245:       assertFalse(node1.isSwitch());
246:       assertFalse(node1.isArrayLit());
247:       assertFalse(node1.isInstanceOf());
248:       assertFalse(node1.isCatch());
249:       assertFalse(node1.isThis());
250:       assertFalse(node1.isScript());
251:       assertFalse(node1.isThrow());
252:       assertFalse(node1.isSetterDef());
253:       assertFalse(node1.isTry());
254:       assertFalse(node1.isBlock());
255:       assertFalse(node1.isHook());
256:       assertFalse(node1.isRegExp());
257:       assertFalse(node1.isIf());
258:       assertFalse(node1.isWith());
259:       assertFalse(node1.isNE());
260:       assertEquals((-1), node1.getLineno());
261:       assertFalse(node1.isReturn());
262:       assertFalse(node1.isAssignAdd());
263:       assertFalse(node1.isLabel());
264:       assertFalse(node1.hasMoreThanOneChild());
265:       assertFalse(node1.isContinue());
266:       assertFalse(node1.isNumber());
267:       assertEquals((-1), node1.getSourcePosition());
268:       assertFalse(node1.isTypeOf());
269:       assertFalse(node1.isDec());
270:       assertFalse(node1.isOr());
271:       assertFalse(node1.isWhile());
272:       assertFalse(node1.hasChildren());
273:       assertFalse(node1.isNew());
274:       assertFalse(node1.hasOneChild());
275:       assertFalse(node1.isDo());
276:       assertFalse(node1.isVar());
277:       assertFalse(node1.isCast());
278:       assertFalse(node1.isStringKey());
279:       assertFalse(node1.isParamList());
280:       assertFalse(node1.isAnd());
281:       assertFalse(node1.isLabelName());
282:       assertFalse(node1.isObjectLit());
283:       assertFalse(node1.isComma());
284:       assertFalse(node1.isNot());
285:       assertEquals(0, node1.getChildCount());
286:       assertFalse(node1.isDefaultCase());
287:       assertFalse(node1.isGetProp());
288:       assertFalse(node1.isAdd());
289:       assertFalse(node1.isTrue());
290:       assertFalse(node1.isAssign());
291:       assertFalse(node1.isBreak());
292:       assertFalse(node1.isNull());
293:       assertFalse(node1.isGetElem());
294:       assertFalse(node1.isCall());
295:       assertFalse(node1.isExprResult());
296:       assertFalse(node1.isName());
297:       assertFalse(node1.isVoid());
298:       assertFalse(node1.isDelProp());
299:       assertEquals(4095, Node.COLUMN_MASK);
300:       assertEquals(43, Node.IS_CONSTANT_NAME);
301:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
302:       assertEquals(8, Node.FLAG_NO_THROWS);
303:       assertEquals(39, Node.EMPTY_BLOCK);
304:       assertEquals(36, Node.QUOTED_PROP);
305:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
306:       assertEquals(53, Node.INPUT_ID);
307:       assertEquals(55, Node.INFERRED_FUNCTION);
308:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
309:       assertEquals(40, Node.ORIGINALNAME_PROP);
310:       assertEquals(50, Node.FREE_CALL);
311:       assertEquals(47, Node.IS_DISPATCHER);
312:       assertEquals(54, Node.SLASH_V);
313:       assertEquals(2, Node.POST_FLAG);
314:       assertEquals(51, Node.STATIC_SOURCE_FILE);
315:       assertEquals(1, Node.DECR_FLAG);
316:       assertEquals(30, Node.VAR_ARGS_NAME);
317:       assertEquals(49, Node.DIRECT_EVAL);
318:       assertEquals(32, Node.INCRDECR_PROP);
319:       assertEquals(57, Node.LAST_PROP);
320:       assertEquals(12, Node.COLUMN_BITS);
321:       assertEquals(46, Node.IS_NAMESPACE);
322:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
323:       assertEquals(52, Node.LENGTH);
324:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
325:       assertEquals(15, Node.NO_SIDE_EFFECTS);
326:       assertEquals(29, Node.JSDOC_INFO_PROP);
327:       assertEquals(56, Node.CHANGE_TIME);
328:       assertEquals(57, Node.REFLECTED_OBJECT);
329:       assertEquals(37, Node.OPT_ARG_NAME);
330:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
331:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
332:       assertEquals(48, Node.DIRECTIVES);
333:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
334:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
335:       assertNotNull(string0);
336:       assertEquals("ERROR\n", string0);
337:       
338:       boolean boolean0 = node1.isQualifiedName();
339:       assertFalse(node1.equals((Object)node0));
340:       assertFalse(node1.isIn());
341:       assertFalse(node1.isGetterDef());
342:       assertFalse(node1.isString());
343:       assertFalse(node1.isEmpty());
344:       assertFalse(node1.isFor());
345:       assertFalse(node1.isInc());
346:       assertFalse(node1.isCase());
347:       assertEquals((-1), node1.getType());
348:       assertFalse(node1.isFunction());
349:       assertFalse(node1.isDebugger());
350:       assertEquals((-1), node1.getCharno());
351:       assertFalse(node1.isFalse());
352:       assertFalse(node1.isSwitch());
353:       assertFalse(node1.isArrayLit());
354:       assertFalse(node1.isInstanceOf());
355:       assertFalse(node1.isCatch());
356:       assertFalse(node1.isThis());
357:       assertFalse(node1.isScript());
358:       assertFalse(node1.isThrow());
359:       assertFalse(node1.isSetterDef());
360:       assertFalse(node1.isTry());
361:       assertFalse(node1.isBlock());
362:       assertFalse(node1.isHook());
363:       assertFalse(node1.isRegExp());
364:       assertFalse(node1.isIf());
365:       assertFalse(node1.isWith());
366:       assertFalse(node1.isNE());
367:       assertEquals((-1), node1.getLineno());
368:       assertFalse(node1.isReturn());
369:       assertFalse(node1.isAssignAdd());
370:       assertFalse(node1.isLabel());
371:       assertFalse(node1.hasMoreThanOneChild());
372:       assertFalse(node1.isContinue());
373:       assertFalse(node1.isNumber());
374:       assertEquals((-1), node1.getSourcePosition());
375:       assertFalse(node1.isTypeOf());
376:       assertFalse(node1.isDec());
377:       assertFalse(node1.isOr());
378:       assertFalse(node1.isWhile());
379:       assertFalse(node1.hasChildren());
380:       assertFalse(node1.isNew());
381:       assertFalse(node1.hasOneChild());
382:       assertFalse(node1.isDo());
383:       assertFalse(node1.isVar());
384:       assertFalse(node1.isCast());
385:       assertFalse(node1.isStringKey());
386:       assertFalse(node1.isParamList());
387:       assertFalse(node1.isAnd());
388:       assertFalse(node1.isLabelName());
389:       assertFalse(node1.isObjectLit());
390:       assertFalse(node1.isComma());
391:       assertFalse(node1.isNot());
392:       assertEquals(0, node1.getChildCount());
393:       assertFalse(node1.isDefaultCase());
394:       assertFalse(node1.isGetProp());
395:       assertFalse(node1.isAdd());
396:       assertFalse(node1.isTrue());
397:       assertFalse(node1.isAssign());
398:       assertFalse(node1.isBreak());
399:       assertFalse(node1.isNull());
400:       assertFalse(node1.isGetElem());
401:       assertFalse(node1.isCall());
402:       assertFalse(node1.isExprResult());
403:       assertFalse(node1.isName());
404:       assertFalse(node1.isVoid());
405:       assertFalse(node1.isDelProp());
406:       assertEquals(4095, Node.COLUMN_MASK);
407:       assertEquals(43, Node.IS_CONSTANT_NAME);
408:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
409:       assertEquals(8, Node.FLAG_NO_THROWS);
410:       assertEquals(39, Node.EMPTY_BLOCK);
411:       assertEquals(36, Node.QUOTED_PROP);
412:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
413:       assertEquals(53, Node.INPUT_ID);
414:       assertEquals(55, Node.INFERRED_FUNCTION);
415:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
416:       assertEquals(40, Node.ORIGINALNAME_PROP);
417:       assertEquals(50, Node.FREE_CALL);
418:       assertEquals(47, Node.IS_DISPATCHER);
419:       assertEquals(54, Node.SLASH_V);
420:       assertEquals(2, Node.POST_FLAG);
421:       assertEquals(51, Node.STATIC_SOURCE_FILE);
422:       assertEquals(1, Node.DECR_FLAG);
423:       assertEquals(30, Node.VAR_ARGS_NAME);
424:       assertEquals(49, Node.DIRECT_EVAL);
425:       assertEquals(32, Node.INCRDECR_PROP);
426:       assertEquals(57, Node.LAST_PROP);
427:       assertEquals(12, Node.COLUMN_BITS);
428:       assertEquals(46, Node.IS_NAMESPACE);
429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
430:       assertEquals(52, Node.LENGTH);
431:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
432:       assertEquals(15, Node.NO_SIDE_EFFECTS);
433:       assertEquals(29, Node.JSDOC_INFO_PROP);
434:       assertEquals(56, Node.CHANGE_TIME);
435:       assertEquals(57, Node.REFLECTED_OBJECT);
436:       assertEquals(37, Node.OPT_ARG_NAME);
437:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
438:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
439:       assertEquals(48, Node.DIRECTIVES);
440:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
441:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
442:       assertFalse(boolean0);
443:       
444:       boolean boolean1 = node0.mayMutateGlobalStateOrThrow();
445:       assertFalse(node0.equals((Object)node1));
446:       assertFalse(boolean1 == boolean0);
447:       assertFalse(node0.isReturn());
448:       assertFalse(node0.isLabel());
449:       assertFalse(node0.isContinue());
450:       assertFalse(node0.hasMoreThanOneChild());
451:       assertFalse(node0.isOr());
452:       assertFalse(node0.isTypeOf());
453:       assertEquals((-1), node0.getSourcePosition());
454:       assertFalse(node0.isGetElem());
455:       assertEquals((-1), node0.getLineno());
456:       assertFalse(node0.isLabelName());
457:       assertFalse(node0.hasOneChild());
458:       assertFalse(node0.isCall());
459:       assertFalse(node0.isBlock());
460:       assertFalse(node0.isAssign());
461:       assertFalse(node0.isDec());
462:       assertFalse(node0.hasChildren());
463:       assertFalse(node0.isWhile());
464:       assertEquals(39, node0.getType());
465:       assertFalse(node0.isScript());
466:       assertFalse(node0.isInstanceOf());
467:       assertFalse(node0.isCatch());
468:       assertFalse(node0.isWith());
469:       assertFalse(node0.isObjectLit());
470:       assertFalse(node0.isNot());
471:       assertFalse(node0.isAnd());
472:       assertFalse(node0.isCast());
473:       assertFalse(node0.isFalse());
474:       assertFalse(node0.isFunction());
475:       assertFalse(node0.isSetterDef());
476:       assertFalse(node0.isInc());
477:       assertFalse(node0.isThrow());
478:       assertFalse(node0.isIn());
479:       assertFalse(node0.isIf());
480:       assertFalse(node0.isNE());
481:       assertFalse(node0.isSwitch());
482:       assertFalse(node0.isDelProp());
483:       assertFalse(node0.isHook());
484:       assertEquals((-1), node0.getCharno());
485:       assertFalse(node0.isDebugger());
486:       assertFalse(node0.isRegExp());
487:       assertFalse(node0.isGetterDef());
488:       assertFalse(node0.isString());
489:       assertFalse(node0.isThis());
490:       assertFalse(node0.isFor());
491:       assertFalse(node0.isGetProp());
492:       assertFalse(node0.isCase());
493:       assertTrue(node0.isNumber());
494:       assertFalse(node0.isTry());
495:       assertEquals(0, node0.getChildCount());
496:       assertFalse(node0.isComma());
497:       assertFalse(node0.isBreak());
498:       assertFalse(node0.isNull());
499:       assertFalse(node0.isTrue());
500:       assertFalse(node0.isExprResult());
501:       assertFalse(node0.isStringKey());
502:       assertFalse(node0.isParamList());
503:       assertFalse(node0.isVoid());
504:       assertFalse(node0.isName());
505:       assertFalse(node0.isArrayLit());
506:       assertFalse(node0.isVar());
507:       assertFalse(node0.isAdd());
508:       assertFalse(node0.isDefaultCase());
509:       assertFalse(node0.isEmpty());
510:       assertFalse(node0.isNew());
511:       assertFalse(node0.isAssignAdd());
512:       assertFalse(node0.isDo());
513:       assertEquals(43, Node.IS_CONSTANT_NAME);
514:       assertEquals(36, Node.QUOTED_PROP);
515:       assertEquals(48, Node.DIRECTIVES);
516:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
517:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
518:       assertEquals(4095, Node.COLUMN_MASK);
519:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
520:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
521:       assertEquals(50, Node.FREE_CALL);
522:       assertEquals(32, Node.INCRDECR_PROP);
523:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
524:       assertEquals(1, Node.DECR_FLAG);
525:       assertEquals(30, Node.VAR_ARGS_NAME);
526:       assertEquals(49, Node.DIRECT_EVAL);
527:       assertEquals(57, Node.LAST_PROP);
528:       assertEquals(51, Node.STATIC_SOURCE_FILE);
529:       assertEquals(12, Node.COLUMN_BITS);
530:       assertEquals(46, Node.IS_NAMESPACE);
531:       assertEquals(54, Node.SLASH_V);
532:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
533:       assertEquals(37, Node.OPT_ARG_NAME);
534:       assertEquals(2, Node.POST_FLAG);
535:       assertEquals(40, Node.ORIGINALNAME_PROP);
536:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
537:       assertEquals(56, Node.CHANGE_TIME);
538:       assertEquals(47, Node.IS_DISPATCHER);
539:       assertEquals(57, Node.REFLECTED_OBJECT);
540:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
541:       assertEquals(52, Node.LENGTH);
542:       assertEquals(8, Node.FLAG_NO_THROWS);
543:       assertEquals(15, Node.NO_SIDE_EFFECTS);
544:       assertEquals(55, Node.INFERRED_FUNCTION);
545:       assertEquals(39, Node.EMPTY_BLOCK);
546:       assertEquals(29, Node.JSDOC_INFO_PROP);
547:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
548:       assertEquals(53, Node.INPUT_ID);
549:       assertTrue(boolean1);
550:       
551:       boolean boolean2 = node0.isNE();
552:       assertFalse(node0.equals((Object)node1));
553:       assertTrue(boolean2 == boolean0);
554:       assertFalse(boolean2 == boolean1);
555:       assertFalse(node0.isReturn());
556:       assertFalse(node0.isLabel());
557:       assertFalse(node0.isContinue());
558:       assertFalse(node0.hasMoreThanOneChild());
559:       assertFalse(node0.isOr());
560:       assertFalse(node0.isTypeOf());
561:       assertEquals((-1), node0.getSourcePosition());
562:       assertFalse(node0.isGetElem());
563:       assertEquals((-1), node0.getLineno());
564:       assertFalse(node0.isLabelName());
565:       assertFalse(node0.hasOneChild());
566:       assertFalse(node0.isCall());
567:       assertFalse(node0.isBlock());
568:       assertFalse(node0.isAssign());
569:       assertFalse(node0.isDec());
570:       assertFalse(node0.hasChildren());
571:       assertFalse(node0.isWhile());
572:       assertEquals(39, node0.getType());
573:       assertFalse(node0.isScript());
574:       assertFalse(node0.isInstanceOf());
575:       assertFalse(node0.isCatch());
576:       assertFalse(node0.isWith());
577:       assertFalse(node0.isObjectLit());
578:       assertFalse(node0.isNot());
579:       assertFalse(node0.isAnd());
580:       assertFalse(node0.isCast());
581:       assertFalse(node0.isFalse());
582:       assertFalse(node0.isFunction());
583:       assertFalse(node0.isSetterDef());
584:       assertFalse(node0.isInc());
585:       assertFalse(node0.isThrow());
586:       assertFalse(node0.isIn());
587:       assertFalse(node0.isIf());
588:       assertFalse(node0.isNE());
589:       assertFalse(node0.isSwitch());
590:       assertFalse(node0.isDelProp());
591:       assertFalse(node0.isHook());
592:       assertEquals((-1), node0.getCharno());
593:       assertFalse(node0.isDebugger());
594:       assertFalse(node0.isRegExp());
595:       assertFalse(node0.isGetterDef());
596:       assertFalse(node0.isString());
597:       assertFalse(node0.isThis());
598:       assertFalse(node0.isFor());
599:       assertFalse(node0.isGetProp());
600:       assertFalse(node0.isCase());
601:       assertTrue(node0.isNumber());
602:       assertFalse(node0.isTry());
603:       assertEquals(0, node0.getChildCount());
604:       assertFalse(node0.isComma());
605:       assertFalse(node0.isBreak());
606:       assertFalse(node0.isNull());
607:       assertFalse(node0.isTrue());
608:       assertFalse(node0.isExprResult());
609:       assertFalse(node0.isStringKey());
610:       assertFalse(node0.isParamList());
611:       assertFalse(node0.isVoid());
612:       assertFalse(node0.isName());
613:       assertFalse(node0.isArrayLit());
614:       assertFalse(node0.isVar());
615:       assertFalse(node0.isAdd());
616:       assertFalse(node0.isDefaultCase());
617:       assertFalse(node0.isEmpty());
618:       assertFalse(node0.isNew());
619:       assertFalse(node0.isAssignAdd());
620:       assertFalse(node0.isDo());
621:       assertEquals(43, Node.IS_CONSTANT_NAME);
622:       assertEquals(36, Node.QUOTED_PROP);
623:       assertEquals(48, Node.DIRECTIVES);
624:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
625:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
626:       assertEquals(4095, Node.COLUMN_MASK);
627:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
628:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
629:       assertEquals(50, Node.FREE_CALL);
630:       assertEquals(32, Node.INCRDECR_PROP);
631:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
632:       assertEquals(1, Node.DECR_FLAG);
633:       assertEquals(30, Node.VAR_ARGS_NAME);
634:       assertEquals(49, Node.DIRECT_EVAL);
635:       assertEquals(57, Node.LAST_PROP);
636:       assertEquals(51, Node.STATIC_SOURCE_FILE);
637:       assertEquals(12, Node.COLUMN_BITS);
638:       assertEquals(46, Node.IS_NAMESPACE);
639:       assertEquals(54, Node.SLASH_V);
640:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
641:       assertEquals(37, Node.OPT_ARG_NAME);
642:       assertEquals(2, Node.POST_FLAG);
643:       assertEquals(40, Node.ORIGINALNAME_PROP);
644:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
645:       assertEquals(56, Node.CHANGE_TIME);
646:       assertEquals(47, Node.IS_DISPATCHER);
647:       assertEquals(57, Node.REFLECTED_OBJECT);
648:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
649:       assertEquals(52, Node.LENGTH);
650:       assertEquals(8, Node.FLAG_NO_THROWS);
651:       assertEquals(15, Node.NO_SIDE_EFFECTS);
652:       assertEquals(55, Node.INFERRED_FUNCTION);
653:       assertEquals(39, Node.EMPTY_BLOCK);
654:       assertEquals(29, Node.JSDOC_INFO_PROP);
655:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
656:       assertEquals(53, Node.INPUT_ID);
657:       assertFalse(boolean2);
658:       
659:       boolean boolean3 = node0.mayMutateGlobalStateOrThrow();
660:       assertFalse(node0.equals((Object)node1));
661:       assertFalse(boolean3 == boolean0);
662:       assertTrue(boolean3 == boolean1);
663:       assertFalse(boolean3 == boolean2);
664:       assertFalse(node0.isReturn());
665:       assertFalse(node0.isLabel());
666:       assertFalse(node0.isContinue());
667:       assertFalse(node0.hasMoreThanOneChild());
668:       assertFalse(node0.isOr());
669:       assertFalse(node0.isTypeOf());
670:       assertEquals((-1), node0.getSourcePosition());
671:       assertFalse(node0.isGetElem());
672:       assertEquals((-1), node0.getLineno());
673:       assertFalse(node0.isLabelName());
674:       assertFalse(node0.hasOneChild());
675:       assertFalse(node0.isCall());
676:       assertFalse(node0.isBlock());
677:       assertFalse(node0.isAssign());
678:       assertFalse(node0.isDec());
679:       assertFalse(node0.hasChildren());
680:       assertFalse(node0.isWhile());
681:       assertEquals(39, node0.getType());
682:       assertFalse(node0.isScript());
683:       assertFalse(node0.isInstanceOf());
684:       assertFalse(node0.isCatch());
685:       assertFalse(node0.isWith());
686:       assertFalse(node0.isObjectLit());
687:       assertFalse(node0.isNot());
688:       assertFalse(node0.isAnd());
689:       assertFalse(node0.isCast());
690:       assertFalse(node0.isFalse());
691:       assertFalse(node0.isFunction());
692:       assertFalse(node0.isSetterDef());
693:       assertFalse(node0.isInc());
694:       assertFalse(node0.isThrow());
695:       assertFalse(node0.isIn());
696:       assertFalse(node0.isIf());
697:       assertFalse(node0.isNE());
698:       assertFalse(node0.isSwitch());
699:       assertFalse(node0.isDelProp());
700:       assertFalse(node0.isHook());
701:       assertEquals((-1), node0.getCharno());
702:       assertFalse(node0.isDebugger());
703:       assertFalse(node0.isRegExp());
704:       assertFalse(node0.isGetterDef());
705:       assertFalse(node0.isString());
706:       assertFalse(node0.isThis());
707:       assertFalse(node0.isFor());
708:       assertFalse(node0.isGetProp());
709:       assertFalse(node0.isCase());
710:       assertTrue(node0.isNumber());
711:       assertFalse(node0.isTry());
712:       assertEquals(0, node0.getChildCount());
713:       assertFalse(node0.isComma());
714:       assertFalse(node0.isBreak());
715:       assertFalse(node0.isNull());
716:       assertFalse(node0.isTrue());
717:       assertFalse(node0.isExprResult());
718:       assertFalse(node0.isStringKey());
719:       assertFalse(node0.isParamList());
720:       assertFalse(node0.isVoid());
721:       assertFalse(node0.isName());
722:       assertFalse(node0.isArrayLit());
723:       assertFalse(node0.isVar());
724:       assertFalse(node0.isAdd());
725:       assertFalse(node0.isDefaultCase());
726:       assertFalse(node0.isEmpty());
727:       assertFalse(node0.isNew());
728:       assertFalse(node0.isAssignAdd());
729:       assertFalse(node0.isDo());
730:       assertEquals(43, Node.IS_CONSTANT_NAME);
731:       assertEquals(36, Node.QUOTED_PROP);
732:       assertEquals(48, Node.DIRECTIVES);
733:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
734:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
735:       assertEquals(4095, Node.COLUMN_MASK);
736:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
737:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
738:       assertEquals(50, Node.FREE_CALL);
739:       assertEquals(32, Node.INCRDECR_PROP);
740:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
741:       assertEquals(1, Node.DECR_FLAG);
742:       assertEquals(30, Node.VAR_ARGS_NAME);
743:       assertEquals(49, Node.DIRECT_EVAL);
744:       assertEquals(57, Node.LAST_PROP);
745:       assertEquals(51, Node.STATIC_SOURCE_FILE);
746:       assertEquals(12, Node.COLUMN_BITS);
747:       assertEquals(46, Node.IS_NAMESPACE);
748:       assertEquals(54, Node.SLASH_V);
749:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
750:       assertEquals(37, Node.OPT_ARG_NAME);
751:       assertEquals(2, Node.POST_FLAG);
752:       assertEquals(40, Node.ORIGINALNAME_PROP);
753:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
754:       assertEquals(56, Node.CHANGE_TIME);
755:       assertEquals(47, Node.IS_DISPATCHER);
756:       assertEquals(57, Node.REFLECTED_OBJECT);
757:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
758:       assertEquals(52, Node.LENGTH);
759:       assertEquals(8, Node.FLAG_NO_THROWS);
760:       assertEquals(15, Node.NO_SIDE_EFFECTS);
761:       assertEquals(55, Node.INFERRED_FUNCTION);
762:       assertEquals(39, Node.EMPTY_BLOCK);
763:       assertEquals(29, Node.JSDOC_INFO_PROP);
764:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
765:       assertEquals(53, Node.INPUT_ID);
766:       assertTrue(boolean3);
767:       
768:       String string1 = node0.getQualifiedName();
769:       assertFalse(node0.equals((Object)node1));
770:       assertFalse(node0.isReturn());
771:       assertFalse(node0.isLabel());
772:       assertFalse(node0.isContinue());
773:       assertFalse(node0.hasMoreThanOneChild());
774:       assertFalse(node0.isOr());
775:       assertFalse(node0.isTypeOf());
776:       assertEquals((-1), node0.getSourcePosition());
777:       assertFalse(node0.isGetElem());
778:       assertEquals((-1), node0.getLineno());
779:       assertFalse(node0.isLabelName());
780:       assertFalse(node0.hasOneChild());
781:       assertFalse(node0.isCall());
782:       assertFalse(node0.isBlock());
783:       assertFalse(node0.isAssign());
784:       assertFalse(node0.isDec());
785:       assertFalse(node0.hasChildren());
786:       assertFalse(node0.isWhile());
787:       assertEquals(39, node0.getType());
788:       assertFalse(node0.isScript());
789:       assertFalse(node0.isInstanceOf());
790:       assertFalse(node0.isCatch());
791:       assertFalse(node0.isWith());
792:       assertFalse(node0.isObjectLit());
793:       assertFalse(node0.isNot());
794:       assertFalse(node0.isAnd());
795:       assertFalse(node0.isCast());
796:       assertFalse(node0.isFalse());
797:       assertFalse(node0.isFunction());
798:       assertFalse(node0.isSetterDef());
799:       assertFalse(node0.isInc());
800:       assertFalse(node0.isThrow());
801:       assertFalse(node0.isIn());
802:       assertFalse(node0.isIf());
803:       assertFalse(node0.isNE());
804:       assertFalse(node0.isSwitch());
805:       assertFalse(node0.isDelProp());
806:       assertFalse(node0.isHook());
807:       assertEquals((-1), node0.getCharno());
808:       assertFalse(node0.isDebugger());
809:       assertFalse(node0.isRegExp());
810:       assertFalse(node0.isGetterDef());
811:       assertFalse(node0.isString());
812:       assertFalse(node0.isThis());
813:       assertFalse(node0.isFor());
814:       assertFalse(node0.isGetProp());
815:       assertFalse(node0.isCase());
816:       assertTrue(node0.isNumber());
817:       assertFalse(node0.isTry());
818:       assertEquals(0, node0.getChildCount());
819:       assertFalse(node0.isComma());
820:       assertFalse(node0.isBreak());
821:       assertFalse(node0.isNull());
822:       assertFalse(node0.isTrue());
823:       assertFalse(node0.isExprResult());
824:       assertFalse(node0.isStringKey());
825:       assertFalse(node0.isParamList());
826:       assertFalse(node0.isVoid());
827:       assertFalse(node0.isName());
828:       assertFalse(node0.isArrayLit());
829:       assertFalse(node0.isVar());
830:       assertFalse(node0.isAdd());
831:       assertFalse(node0.isDefaultCase());
832:       assertFalse(node0.isEmpty());
833:       assertFalse(node0.isNew());
834:       assertFalse(node0.isAssignAdd());
835:       assertFalse(node0.isDo());
836:       assertEquals(43, Node.IS_CONSTANT_NAME);
837:       assertEquals(36, Node.QUOTED_PROP);
838:       assertEquals(48, Node.DIRECTIVES);
839:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
840:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
841:       assertEquals(4095, Node.COLUMN_MASK);
842:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
843:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
844:       assertEquals(50, Node.FREE_CALL);
845:       assertEquals(32, Node.INCRDECR_PROP);
846:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
847:       assertEquals(1, Node.DECR_FLAG);
848:       assertEquals(30, Node.VAR_ARGS_NAME);
849:       assertEquals(49, Node.DIRECT_EVAL);
850:       assertEquals(57, Node.LAST_PROP);
851:       assertEquals(51, Node.STATIC_SOURCE_FILE);
852:       assertEquals(12, Node.COLUMN_BITS);
853:       assertEquals(46, Node.IS_NAMESPACE);
854:       assertEquals(54, Node.SLASH_V);
855:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
856:       assertEquals(37, Node.OPT_ARG_NAME);
857:       assertEquals(2, Node.POST_FLAG);
858:       assertEquals(40, Node.ORIGINALNAME_PROP);
859:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
860:       assertEquals(56, Node.CHANGE_TIME);
861:       assertEquals(47, Node.IS_DISPATCHER);
862:       assertEquals(57, Node.REFLECTED_OBJECT);
863:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
864:       assertEquals(52, Node.LENGTH);
865:       assertEquals(8, Node.FLAG_NO_THROWS);
866:       assertEquals(15, Node.NO_SIDE_EFFECTS);
867:       assertEquals(55, Node.INFERRED_FUNCTION);
868:       assertEquals(39, Node.EMPTY_BLOCK);
869:       assertEquals(29, Node.JSDOC_INFO_PROP);
870:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
871:       assertEquals(53, Node.INPUT_ID);
872:       assertNull(string1);
873:       
874:       node0.setType(117);
875:       assertFalse(node0.equals((Object)node1));
876:       assertFalse(node0.isReturn());
877:       assertFalse(node0.isLabel());
878:       assertFalse(node0.hasMoreThanOneChild());
879:       assertFalse(node0.isOr());
880:       assertFalse(node0.isTypeOf());
881:       assertEquals(117, node0.getType());
882:       assertEquals((-1), node0.getSourcePosition());
883:       assertFalse(node0.isGetElem());
884:       assertEquals((-1), node0.getLineno());
885:       assertFalse(node0.isLabelName());
886:       assertFalse(node0.hasOneChild());
887:       assertFalse(node0.isCall());
888:       assertFalse(node0.isBlock());
889:       assertFalse(node0.isAssign());
890:       assertFalse(node0.isNumber());
891:       assertFalse(node0.isDec());
892:       assertFalse(node0.hasChildren());
893:       assertFalse(node0.isWhile());
894:       assertFalse(node0.isScript());
895:       assertFalse(node0.isInstanceOf());
896:       assertFalse(node0.isCatch());
897:       assertFalse(node0.isWith());
898:       assertFalse(node0.isObjectLit());
899:       assertFalse(node0.isNot());
900:       assertFalse(node0.isAnd());
901:       assertFalse(node0.isCast());
902:       assertFalse(node0.isFalse());
903:       assertFalse(node0.isFunction());
904:       assertFalse(node0.isSetterDef());
905:       assertFalse(node0.isInc());
906:       assertFalse(node0.isThrow());
907:       assertFalse(node0.isIn());
908:       assertFalse(node0.isIf());
909:       assertFalse(node0.isNE());
910:       assertFalse(node0.isSwitch());
911:       assertTrue(node0.isContinue());
912:       assertFalse(node0.isDelProp());
913:       assertFalse(node0.isHook());
914:       assertEquals((-1), node0.getCharno());
915:       assertFalse(node0.isDebugger());
916:       assertFalse(node0.isRegExp());
917:       assertFalse(node0.isGetterDef());
918:       assertFalse(node0.isString());
919:       assertFalse(node0.isThis());
920:       assertFalse(node0.isFor());
921:       assertFalse(node0.isGetProp());
922:       assertFalse(node0.isCase());
923:       assertFalse(node0.isTry());
924:       assertEquals(0, node0.getChildCount());
925:       assertFalse(node0.isComma());
926:       assertFalse(node0.isBreak());
927:       assertFalse(node0.isNull());
928:       assertFalse(node0.isTrue());
929:       assertFalse(node0.isExprResult());
930:       assertFalse(node0.isStringKey());
931:       assertFalse(node0.isParamList());
932:       assertFalse(node0.isVoid());
933:       assertFalse(node0.isName());
934:       assertFalse(node0.isArrayLit());
935:       assertFalse(node0.isVar());
936:       assertFalse(node0.isAdd());
937:       assertFalse(node0.isDefaultCase());
938:       assertFalse(node0.isEmpty());
939:       assertFalse(node0.isNew());
940:       assertFalse(node0.isAssignAdd());
941:       assertFalse(node0.isDo());
942:       assertEquals(43, Node.IS_CONSTANT_NAME);
943:       assertEquals(36, Node.QUOTED_PROP);
944:       assertEquals(48, Node.DIRECTIVES);
945:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
946:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
947:       assertEquals(4095, Node.COLUMN_MASK);
948:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
949:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
950:       assertEquals(50, Node.FREE_CALL);
951:       assertEquals(32, Node.INCRDECR_PROP);
952:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
953:       assertEquals(1, Node.DECR_FLAG);
954:       assertEquals(30, Node.VAR_ARGS_NAME);
955:       assertEquals(49, Node.DIRECT_EVAL);
956:       assertEquals(57, Node.LAST_PROP);
957:       assertEquals(51, Node.STATIC_SOURCE_FILE);
958:       assertEquals(12, Node.COLUMN_BITS);
959:       assertEquals(46, Node.IS_NAMESPACE);
960:       assertEquals(54, Node.SLASH_V);
961:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
962:       assertEquals(37, Node.OPT_ARG_NAME);
963:       assertEquals(2, Node.POST_FLAG);
964:       assertEquals(40, Node.ORIGINALNAME_PROP);
965:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
966:       assertEquals(56, Node.CHANGE_TIME);
967:       assertEquals(47, Node.IS_DISPATCHER);
968:       assertEquals(57, Node.REFLECTED_OBJECT);
969:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
970:       assertEquals(52, Node.LENGTH);
971:       assertEquals(8, Node.FLAG_NO_THROWS);
972:       assertEquals(15, Node.NO_SIDE_EFFECTS);
973:       assertEquals(55, Node.INFERRED_FUNCTION);
974:       assertEquals(39, Node.EMPTY_BLOCK);
975:       assertEquals(29, Node.JSDOC_INFO_PROP);
976:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
977:       assertEquals(53, Node.INPUT_ID);
978:       
979:       node1.setSourceEncodedPositionForTree(55);
980:       assertFalse(node1.equals((Object)node0));
981:       assertFalse(node1.isIn());
982:       assertFalse(node1.isGetterDef());
983:       assertFalse(node1.isString());
984:       assertFalse(node1.isEmpty());
985:       assertFalse(node1.isFor());
986:       assertFalse(node1.isInc());
987:       assertFalse(node1.isCase());
988:       assertEquals(55, node1.getSourcePosition());
989:       assertEquals((-1), node1.getType());
990:       assertFalse(node1.isFunction());
991:       assertFalse(node1.isDebugger());
992:       assertFalse(node1.isFalse());
993:       assertFalse(node1.isSwitch());
994:       assertFalse(node1.isArrayLit());
995:       assertEquals(0, node1.getLineno());
996:       assertFalse(node1.isInstanceOf());
997:       assertFalse(node1.isCatch());
998:       assertFalse(node1.isThis());
999:       assertFalse(node1.isScript());
1000:       assertFalse(node1.isThrow());
1001:       assertFalse(node1.isSetterDef());
1002:       assertFalse(node1.isTry());
1003:       assertFalse(node1.isBlock());
1004:       assertFalse(node1.isHook());
1005:       assertFalse(node1.isRegExp());
1006:       assertFalse(node1.isIf());
1007:       assertFalse(node1.isWith());
1008:       assertFalse(node1.isNE());
1009:       assertFalse(node1.isReturn());
1010:       assertFalse(node1.isAssignAdd());
1011:       assertFalse(node1.isLabel());
1012:       assertFalse(node1.hasMoreThanOneChild());
1013:       assertFalse(node1.isContinue());
1014:       assertFalse(node1.isNumber());
1015:       assertFalse(node1.isTypeOf());
1016:       assertFalse(node1.isDec());
1017:       assertFalse(node1.isOr());
1018:       assertFalse(node1.isWhile());
1019:       assertFalse(node1.hasChildren());
1020:       assertFalse(node1.isNew());
1021:       assertFalse(node1.hasOneChild());
1022:       assertFalse(node1.isDo());
1023:       assertFalse(node1.isVar());
1024:       assertFalse(node1.isCast());
1025:       assertFalse(node1.isStringKey());
1026:       assertFalse(node1.isParamList());
1027:       assertFalse(node1.isAnd());
1028:       assertFalse(node1.isLabelName());
1029:       assertFalse(node1.isObjectLit());
1030:       assertFalse(node1.isComma());
1031:       assertFalse(node1.isNot());
1032:       assertEquals(0, node1.getChildCount());
1033:       assertFalse(node1.isDefaultCase());
1034:       assertEquals(55, node1.getCharno());
1035:       assertFalse(node1.isGetProp());
1036:       assertFalse(node1.isAdd());
1037:       assertFalse(node1.isTrue());
1038:       assertFalse(node1.isAssign());
1039:       assertFalse(node1.isBreak());
1040:       assertFalse(node1.isNull());
1041:       assertFalse(node1.isGetElem());
1042:       assertFalse(node1.isCall());
1043:       assertFalse(node1.isExprResult());
1044:       assertFalse(node1.isName());
1045:       assertFalse(node1.isVoid());
1046:       assertFalse(node1.isDelProp());
1047:       assertEquals(4095, Node.COLUMN_MASK);
1048:       assertEquals(43, Node.IS_CONSTANT_NAME);
1049:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1050:       assertEquals(8, Node.FLAG_NO_THROWS);
1051:       assertEquals(39, Node.EMPTY_BLOCK);
1052:       assertEquals(36, Node.QUOTED_PROP);
1053:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1054:       assertEquals(53, Node.INPUT_ID);
1055:       assertEquals(55, Node.INFERRED_FUNCTION);
1056:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1057:       assertEquals(40, Node.ORIGINALNAME_PROP);
1058:       assertEquals(50, Node.FREE_CALL);
1059:       assertEquals(47, Node.IS_DISPATCHER);
1060:       assertEquals(54, Node.SLASH_V);
1061:       assertEquals(2, Node.POST_FLAG);
1062:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1063:       assertEquals(1, Node.DECR_FLAG);
1064:       assertEquals(30, Node.VAR_ARGS_NAME);
1065:       assertEquals(49, Node.DIRECT_EVAL);
1066:       assertEquals(32, Node.INCRDECR_PROP);
1067:       assertEquals(57, Node.LAST_PROP);
1068:       assertEquals(12, Node.COLUMN_BITS);
1069:       assertEquals(46, Node.IS_NAMESPACE);
1070:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1071:       assertEquals(52, Node.LENGTH);
1072:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1073:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1074:       assertEquals(29, Node.JSDOC_INFO_PROP);
1075:       assertEquals(56, Node.CHANGE_TIME);
1076:       assertEquals(57, Node.REFLECTED_OBJECT);
1077:       assertEquals(37, Node.OPT_ARG_NAME);
1078:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1079:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1080:       assertEquals(48, Node.DIRECTIVES);
1081:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1082:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1083:       
1084:       boolean boolean4 = node1.isSetterDef();
1085:       assertFalse(node1.equals((Object)node0));
1086:       assertFalse(boolean4 == boolean3);
1087:       assertTrue(boolean4 == boolean2);
1088:       assertTrue(boolean4 == boolean0);
1089:       assertFalse(boolean4 == boolean1);
1090:       assertFalse(node1.isIn());
1091:       assertFalse(node1.isGetterDef());
1092:       assertFalse(node1.isString());
1093:       assertFalse(node1.isEmpty());
1094:       assertFalse(node1.isFor());
1095:       assertFalse(node1.isInc());
1096:       assertFalse(node1.isCase());
1097:       assertEquals(55, node1.getSourcePosition());
1098:       assertEquals((-1), node1.getType());
1099:       assertFalse(node1.isFunction());
1100:       assertFalse(node1.isDebugger());
1101:       assertFalse(node1.isFalse());
1102:       assertFalse(node1.isSwitch());
1103:       assertFalse(node1.isArrayLit());
1104:       assertEquals(0, node1.getLineno());
1105:       assertFalse(node1.isInstanceOf());
1106:       assertFalse(node1.isCatch());
1107:       assertFalse(node1.isThis());
1108:       assertFalse(node1.isScript());
1109:       assertFalse(node1.isThrow());
1110:       assertFalse(node1.isSetterDef());
1111:       assertFalse(node1.isTry());
1112:       assertFalse(node1.isBlock());
1113:       assertFalse(node1.isHook());
1114:       assertFalse(node1.isRegExp());
1115:       assertFalse(node1.isIf());
1116:       assertFalse(node1.isWith());
1117:       assertFalse(node1.isNE());
1118:       assertFalse(node1.isReturn());
1119:       assertFalse(node1.isAssignAdd());
1120:       assertFalse(node1.isLabel());
1121:       assertFalse(node1.hasMoreThanOneChild());
1122:       assertFalse(node1.isContinue());
1123:       assertFalse(node1.isNumber());
1124:       assertFalse(node1.isTypeOf());
1125:       assertFalse(node1.isDec());
1126:       assertFalse(node1.isOr());
1127:       assertFalse(node1.isWhile());
1128:       assertFalse(node1.hasChildren());
1129:       assertFalse(node1.isNew());
1130:       assertFalse(node1.hasOneChild());
1131:       assertFalse(node1.isDo());
1132:       assertFalse(node1.isVar());
1133:       assertFalse(node1.isCast());
1134:       assertFalse(node1.isStringKey());
1135:       assertFalse(node1.isParamList());
1136:       assertFalse(node1.isAnd());
1137:       assertFalse(node1.isLabelName());
1138:       assertFalse(node1.isObjectLit());
1139:       assertFalse(node1.isComma());
1140:       assertFalse(node1.isNot());
1141:       assertEquals(0, node1.getChildCount());
1142:       assertFalse(node1.isDefaultCase());
1143:       assertEquals(55, node1.getCharno());
1144:       assertFalse(node1.isGetProp());
1145:       assertFalse(node1.isAdd());
1146:       assertFalse(node1.isTrue());
1147:       assertFalse(node1.isAssign());
1148:       assertFalse(node1.isBreak());
1149:       assertFalse(node1.isNull());
1150:       assertFalse(node1.isGetElem());
1151:       assertFalse(node1.isCall());
1152:       assertFalse(node1.isExprResult());
1153:       assertFalse(node1.isName());
1154:       assertFalse(node1.isVoid());
1155:       assertFalse(node1.isDelProp());
1156:       assertEquals(4095, Node.COLUMN_MASK);
1157:       assertEquals(43, Node.IS_CONSTANT_NAME);
1158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1159:       assertEquals(8, Node.FLAG_NO_THROWS);
1160:       assertEquals(39, Node.EMPTY_BLOCK);
1161:       assertEquals(36, Node.QUOTED_PROP);
1162:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1163:       assertEquals(53, Node.INPUT_ID);
1164:       assertEquals(55, Node.INFERRED_FUNCTION);
1165:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1166:       assertEquals(40, Node.ORIGINALNAME_PROP);
1167:       assertEquals(50, Node.FREE_CALL);
1168:       assertEquals(47, Node.IS_DISPATCHER);
1169:       assertEquals(54, Node.SLASH_V);
1170:       assertEquals(2, Node.POST_FLAG);
1171:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1172:       assertEquals(1, Node.DECR_FLAG);
1173:       assertEquals(30, Node.VAR_ARGS_NAME);
1174:       assertEquals(49, Node.DIRECT_EVAL);
1175:       assertEquals(32, Node.INCRDECR_PROP);
1176:       assertEquals(57, Node.LAST_PROP);
1177:       assertEquals(12, Node.COLUMN_BITS);
1178:       assertEquals(46, Node.IS_NAMESPACE);
1179:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1180:       assertEquals(52, Node.LENGTH);
1181:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1182:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1183:       assertEquals(29, Node.JSDOC_INFO_PROP);
1184:       assertEquals(56, Node.CHANGE_TIME);
1185:       assertEquals(57, Node.REFLECTED_OBJECT);
1186:       assertEquals(37, Node.OPT_ARG_NAME);
1187:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1188:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1189:       assertEquals(48, Node.DIRECTIVES);
1190:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1191:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1192:       assertFalse(boolean4);
1193:       
1194:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
1195:       assertEquals(0, node_SideEffectFlags0.valueOf());
1196:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1197:       assertNotNull(node_SideEffectFlags0);
1198:       
1199:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
1200:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1201:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1202:       assertEquals(31, node_SideEffectFlags0.valueOf());
1203:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1204:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1205:       assertEquals(31, node_SideEffectFlags1.valueOf());
1206:       assertNotNull(node_SideEffectFlags1);
1207:       
1208:       boolean boolean5 = node0.isTrue();
1209:       assertFalse(node0.equals((Object)node1));
1210:       assertFalse(boolean5 == boolean3);
1211:       assertFalse(boolean5 == boolean1);
1212:       assertTrue(boolean5 == boolean4);
1213:       assertTrue(boolean5 == boolean2);
1214:       assertTrue(boolean5 == boolean0);
1215:       assertFalse(node0.isReturn());
1216:       assertFalse(node0.isLabel());
1217:       assertFalse(node0.hasMoreThanOneChild());
1218:       assertFalse(node0.isOr());
1219:       assertFalse(node0.isTypeOf());
1220:       assertEquals(117, node0.getType());
1221:       assertEquals((-1), node0.getSourcePosition());
1222:       assertFalse(node0.isGetElem());
1223:       assertEquals((-1), node0.getLineno());
1224:       assertFalse(node0.isLabelName());
1225:       assertFalse(node0.hasOneChild());
1226:       assertFalse(node0.isCall());
1227:       assertFalse(node0.isBlock());
1228:       assertFalse(node0.isAssign());
1229:       assertFalse(node0.isNumber());
1230:       assertFalse(node0.isDec());
1231:       assertFalse(node0.hasChildren());
1232:       assertFalse(node0.isWhile());
1233:       assertFalse(node0.isScript());
1234:       assertFalse(node0.isInstanceOf());
1235:       assertFalse(node0.isCatch());
1236:       assertFalse(node0.isWith());
1237:       assertFalse(node0.isObjectLit());
1238:       assertFalse(node0.isNot());
1239:       assertFalse(node0.isAnd());
1240:       assertFalse(node0.isCast());
1241:       assertFalse(node0.isFalse());
1242:       assertFalse(node0.isFunction());
1243:       assertFalse(node0.isSetterDef());
1244:       assertFalse(node0.isInc());
1245:       assertFalse(node0.isThrow());
1246:       assertFalse(node0.isIn());
1247:       assertFalse(node0.isIf());
1248:       assertFalse(node0.isNE());
1249:       assertFalse(node0.isSwitch());
1250:       assertTrue(node0.isContinue());
1251:       assertFalse(node0.isDelProp());
1252:       assertFalse(node0.isHook());
1253:       assertEquals((-1), node0.getCharno());
1254:       assertFalse(node0.isDebugger());
1255:       assertFalse(node0.isRegExp());
1256:       assertFalse(node0.isGetterDef());
1257:       assertFalse(node0.isString());
1258:       assertFalse(node0.isThis());
1259:       assertFalse(node0.isFor());
1260:       assertFalse(node0.isGetProp());
1261:       assertFalse(node0.isCase());
1262:       assertFalse(node0.isTry());
1263:       assertEquals(0, node0.getChildCount());
1264:       assertFalse(node0.isComma());
1265:       assertFalse(node0.isBreak());
1266:       assertFalse(node0.isNull());
1267:       assertFalse(node0.isTrue());
1268:       assertFalse(node0.isExprResult());
1269:       assertFalse(node0.isStringKey());
1270:       assertFalse(node0.isParamList());
1271:       assertFalse(node0.isVoid());
1272:       assertFalse(node0.isName());
1273:       assertFalse(node0.isArrayLit());
1274:       assertFalse(node0.isVar());
1275:       assertFalse(node0.isAdd());
1276:       assertFalse(node0.isDefaultCase());
1277:       assertFalse(node0.isEmpty());
1278:       assertFalse(node0.isNew());
1279:       assertFalse(node0.isAssignAdd());
1280:       assertFalse(node0.isDo());
1281:       assertEquals(43, Node.IS_CONSTANT_NAME);
1282:       assertEquals(36, Node.QUOTED_PROP);
1283:       assertEquals(48, Node.DIRECTIVES);
1284:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1285:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1286:       assertEquals(4095, Node.COLUMN_MASK);
1287:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1288:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1289:       assertEquals(50, Node.FREE_CALL);
1290:       assertEquals(32, Node.INCRDECR_PROP);
1291:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1292:       assertEquals(1, Node.DECR_FLAG);
1293:       assertEquals(30, Node.VAR_ARGS_NAME);
1294:       assertEquals(49, Node.DIRECT_EVAL);
1295:       assertEquals(57, Node.LAST_PROP);
1296:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1297:       assertEquals(12, Node.COLUMN_BITS);
1298:       assertEquals(46, Node.IS_NAMESPACE);
1299:       assertEquals(54, Node.SLASH_V);
1300:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1301:       assertEquals(37, Node.OPT_ARG_NAME);
1302:       assertEquals(2, Node.POST_FLAG);
1303:       assertEquals(40, Node.ORIGINALNAME_PROP);
1304:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1305:       assertEquals(56, Node.CHANGE_TIME);
1306:       assertEquals(47, Node.IS_DISPATCHER);
1307:       assertEquals(57, Node.REFLECTED_OBJECT);
1308:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1309:       assertEquals(52, Node.LENGTH);
1310:       assertEquals(8, Node.FLAG_NO_THROWS);
1311:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1312:       assertEquals(55, Node.INFERRED_FUNCTION);
1313:       assertEquals(39, Node.EMPTY_BLOCK);
1314:       assertEquals(29, Node.JSDOC_INFO_PROP);
1315:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1316:       assertEquals(53, Node.INPUT_ID);
1317:       assertFalse(boolean5);
1318:       
1319:       node0.addChildrenToBack(node1);
1320:       assertFalse(node0.equals((Object)node1));
1321:       assertFalse(node1.equals((Object)node0));
1322:       assertFalse(node0.isReturn());
1323:       assertFalse(node0.isLabel());
1324:       assertFalse(node0.hasMoreThanOneChild());
1325:       assertFalse(node0.isOr());
1326:       assertFalse(node0.isTypeOf());
1327:       assertEquals(117, node0.getType());
1328:       assertEquals((-1), node0.getSourcePosition());
1329:       assertFalse(node0.isGetElem());
1330:       assertEquals((-1), node0.getLineno());
1331:       assertFalse(node0.isLabelName());
1332:       assertFalse(node0.isCall());
1333:       assertFalse(node0.isBlock());
1334:       assertFalse(node0.isAssign());
1335:       assertFalse(node0.isNumber());
1336:       assertFalse(node0.isDec());
1337:       assertFalse(node0.isWhile());
1338:       assertFalse(node0.isScript());
1339:       assertFalse(node0.isInstanceOf());
1340:       assertFalse(node0.isCatch());
1341:       assertFalse(node0.isWith());
1342:       assertFalse(node0.isObjectLit());
1343:       assertFalse(node0.isNot());
1344:       assertFalse(node0.isAnd());
1345:       assertFalse(node0.isCast());
1346:       assertFalse(node0.isFalse());
1347:       assertFalse(node0.isFunction());
1348:       assertFalse(node0.isSetterDef());
1349:       assertFalse(node0.isInc());
1350:       assertFalse(node0.isThrow());
1351:       assertFalse(node0.isIn());
1352:       assertEquals(1, node0.getChildCount());
1353:       assertTrue(node0.hasChildren());
1354:       assertFalse(node0.isIf());
1355:       assertFalse(node0.isNE());
1356:       assertFalse(node0.isSwitch());
1357:       assertTrue(node0.isContinue());
1358:       assertFalse(node0.isDelProp());
1359:       assertFalse(node0.isHook());
1360:       assertEquals((-1), node0.getCharno());
1361:       assertFalse(node0.isDebugger());
1362:       assertFalse(node0.isRegExp());
1363:       assertFalse(node0.isGetterDef());
1364:       assertFalse(node0.isString());
1365:       assertTrue(node0.hasOneChild());
1366:       assertFalse(node0.isThis());
1367:       assertFalse(node0.isFor());
1368:       assertFalse(node0.isGetProp());
1369:       assertFalse(node0.isCase());
1370:       assertFalse(node0.isTry());
1371:       assertFalse(node0.isComma());
1372:       assertFalse(node0.isBreak());
1373:       assertFalse(node0.isNull());
1374:       assertFalse(node0.isTrue());
1375:       assertFalse(node0.isExprResult());
1376:       assertFalse(node0.isStringKey());
1377:       assertFalse(node0.isParamList());
1378:       assertFalse(node0.isVoid());
1379:       assertFalse(node0.isName());
1380:       assertFalse(node0.isArrayLit());
1381:       assertFalse(node0.isVar());
1382:       assertFalse(node0.isAdd());
1383:       assertFalse(node0.isDefaultCase());
1384:       assertFalse(node0.isEmpty());
1385:       assertFalse(node0.isNew());
1386:       assertFalse(node0.isAssignAdd());
1387:       assertFalse(node0.isDo());
1388:       assertFalse(node1.isIn());
1389:       assertFalse(node1.isGetterDef());
1390:       assertFalse(node1.isString());
1391:       assertFalse(node1.isEmpty());
1392:       assertFalse(node1.isFor());
1393:       assertFalse(node1.isInc());
1394:       assertFalse(node1.isCase());
1395:       assertEquals(55, node1.getSourcePosition());
1396:       assertEquals((-1), node1.getType());
1397:       assertFalse(node1.isFunction());
1398:       assertFalse(node1.isDebugger());
1399:       assertFalse(node1.isFalse());
1400:       assertFalse(node1.isSwitch());
1401:       assertFalse(node1.isArrayLit());
1402:       assertEquals(0, node1.getLineno());
1403:       assertFalse(node1.isInstanceOf());
1404:       assertFalse(node1.isCatch());
1405:       assertFalse(node1.isThis());
1406:       assertFalse(node1.isScript());
1407:       assertFalse(node1.isThrow());
1408:       assertFalse(node1.isSetterDef());
1409:       assertFalse(node1.isTry());
1410:       assertFalse(node1.isBlock());
1411:       assertFalse(node1.isHook());
1412:       assertFalse(node1.isRegExp());
1413:       assertFalse(node1.isIf());
1414:       assertFalse(node1.isWith());
1415:       assertFalse(node1.isNE());
1416:       assertFalse(node1.isReturn());
1417:       assertFalse(node1.isAssignAdd());
1418:       assertFalse(node1.isLabel());
1419:       assertFalse(node1.hasMoreThanOneChild());
1420:       assertFalse(node1.isContinue());
1421:       assertFalse(node1.isNumber());
1422:       assertFalse(node1.isTypeOf());
1423:       assertFalse(node1.isDec());
1424:       assertFalse(node1.isOr());
1425:       assertFalse(node1.isWhile());
1426:       assertFalse(node1.hasChildren());
1427:       assertFalse(node1.isNew());
1428:       assertFalse(node1.hasOneChild());
1429:       assertFalse(node1.isDo());
1430:       assertFalse(node1.isVar());
1431:       assertFalse(node1.isCast());
1432:       assertFalse(node1.isStringKey());
1433:       assertFalse(node1.isParamList());
1434:       assertFalse(node1.isAnd());
1435:       assertFalse(node1.isLabelName());
1436:       assertFalse(node1.isObjectLit());
1437:       assertFalse(node1.isComma());
1438:       assertFalse(node1.isNot());
1439:       assertEquals(0, node1.getChildCount());
1440:       assertFalse(node1.isDefaultCase());
1441:       assertEquals(55, node1.getCharno());
1442:       assertFalse(node1.isGetProp());
1443:       assertFalse(node1.isAdd());
1444:       assertFalse(node1.isTrue());
1445:       assertFalse(node1.isAssign());
1446:       assertFalse(node1.isBreak());
1447:       assertFalse(node1.isNull());
1448:       assertFalse(node1.isGetElem());
1449:       assertFalse(node1.isCall());
1450:       assertFalse(node1.isExprResult());
1451:       assertFalse(node1.isName());
1452:       assertFalse(node1.isVoid());
1453:       assertFalse(node1.isDelProp());
1454:       assertEquals(43, Node.IS_CONSTANT_NAME);
1455:       assertEquals(36, Node.QUOTED_PROP);
1456:       assertEquals(48, Node.DIRECTIVES);
1457:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1458:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1459:       assertEquals(4095, Node.COLUMN_MASK);
1460:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1461:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1462:       assertEquals(50, Node.FREE_CALL);
1463:       assertEquals(32, Node.INCRDECR_PROP);
1464:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1465:       assertEquals(1, Node.DECR_FLAG);
1466:       assertEquals(30, Node.VAR_ARGS_NAME);
1467:       assertEquals(49, Node.DIRECT_EVAL);
1468:       assertEquals(57, Node.LAST_PROP);
1469:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1470:       assertEquals(12, Node.COLUMN_BITS);
1471:       assertEquals(46, Node.IS_NAMESPACE);
1472:       assertEquals(54, Node.SLASH_V);
1473:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1474:       assertEquals(37, Node.OPT_ARG_NAME);
1475:       assertEquals(2, Node.POST_FLAG);
1476:       assertEquals(40, Node.ORIGINALNAME_PROP);
1477:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1478:       assertEquals(56, Node.CHANGE_TIME);
1479:       assertEquals(47, Node.IS_DISPATCHER);
1480:       assertEquals(57, Node.REFLECTED_OBJECT);
1481:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1482:       assertEquals(52, Node.LENGTH);
1483:       assertEquals(8, Node.FLAG_NO_THROWS);
1484:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1485:       assertEquals(55, Node.INFERRED_FUNCTION);
1486:       assertEquals(39, Node.EMPTY_BLOCK);
1487:       assertEquals(29, Node.JSDOC_INFO_PROP);
1488:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1489:       assertEquals(53, Node.INPUT_ID);
1490:       assertEquals(4095, Node.COLUMN_MASK);
1491:       assertEquals(43, Node.IS_CONSTANT_NAME);
1492:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1493:       assertEquals(8, Node.FLAG_NO_THROWS);
1494:       assertEquals(39, Node.EMPTY_BLOCK);
1495:       assertEquals(36, Node.QUOTED_PROP);
1496:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1497:       assertEquals(53, Node.INPUT_ID);
1498:       assertEquals(55, Node.INFERRED_FUNCTION);
1499:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1500:       assertEquals(40, Node.ORIGINALNAME_PROP);
1501:       assertEquals(50, Node.FREE_CALL);
1502:       assertEquals(47, Node.IS_DISPATCHER);
1503:       assertEquals(54, Node.SLASH_V);
1504:       assertEquals(2, Node.POST_FLAG);
1505:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1506:       assertEquals(1, Node.DECR_FLAG);
1507:       assertEquals(30, Node.VAR_ARGS_NAME);
1508:       assertEquals(49, Node.DIRECT_EVAL);
1509:       assertEquals(32, Node.INCRDECR_PROP);
1510:       assertEquals(57, Node.LAST_PROP);
1511:       assertEquals(12, Node.COLUMN_BITS);
1512:       assertEquals(46, Node.IS_NAMESPACE);
1513:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1514:       assertEquals(52, Node.LENGTH);
1515:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1516:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1517:       assertEquals(29, Node.JSDOC_INFO_PROP);
1518:       assertEquals(56, Node.CHANGE_TIME);
1519:       assertEquals(57, Node.REFLECTED_OBJECT);
1520:       assertEquals(37, Node.OPT_ARG_NAME);
1521:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1522:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1523:       assertEquals(48, Node.DIRECTIVES);
1524:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1525:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1526:       
1527:       boolean boolean6 = node0.isIf();
1528:       assertFalse(node0.equals((Object)node1));
1529:       assertFalse(boolean6 == boolean1);
1530:       assertTrue(boolean6 == boolean5);
1531:       assertFalse(boolean6 == boolean3);
1532:       assertTrue(boolean6 == boolean2);
1533:       assertTrue(boolean6 == boolean0);
1534:       assertTrue(boolean6 == boolean4);
1535:       assertFalse(node0.isReturn());
1536:       assertFalse(node0.isLabel());
1537:       assertFalse(node0.hasMoreThanOneChild());
1538:       assertFalse(node0.isOr());
1539:       assertFalse(node0.isTypeOf());
1540:       assertEquals(117, node0.getType());
1541:       assertEquals((-1), node0.getSourcePosition());
1542:       assertFalse(node0.isGetElem());
1543:       assertEquals((-1), node0.getLineno());
1544:       assertFalse(node0.isLabelName());
1545:       assertFalse(node0.isCall());
1546:       assertFalse(node0.isBlock());
1547:       assertFalse(node0.isAssign());
1548:       assertFalse(node0.isNumber());
1549:       assertFalse(node0.isDec());
1550:       assertFalse(node0.isWhile());
1551:       assertFalse(node0.isScript());
1552:       assertFalse(node0.isInstanceOf());
1553:       assertFalse(node0.isCatch());
1554:       assertFalse(node0.isWith());
1555:       assertFalse(node0.isObjectLit());
1556:       assertFalse(node0.isNot());
1557:       assertFalse(node0.isAnd());
1558:       assertFalse(node0.isCast());
1559:       assertFalse(node0.isFalse());
1560:       assertFalse(node0.isFunction());
1561:       assertFalse(node0.isSetterDef());
1562:       assertFalse(node0.isInc());
1563:       assertFalse(node0.isThrow());
1564:       assertFalse(node0.isIn());
1565:       assertEquals(1, node0.getChildCount());
1566:       assertTrue(node0.hasChildren());
1567:       assertFalse(node0.isIf());
1568:       assertFalse(node0.isNE());
1569:       assertFalse(node0.isSwitch());
1570:       assertTrue(node0.isContinue());
1571:       assertFalse(node0.isDelProp());
1572:       assertFalse(node0.isHook());
1573:       assertEquals((-1), node0.getCharno());
1574:       assertFalse(node0.isDebugger());
1575:       assertFalse(node0.isRegExp());
1576:       assertFalse(node0.isGetterDef());
1577:       assertFalse(node0.isString());
1578:       assertTrue(node0.hasOneChild());
1579:       assertFalse(node0.isThis());
1580:       assertFalse(node0.isFor());
1581:       assertFalse(node0.isGetProp());
1582:       assertFalse(node0.isCase());
1583:       assertFalse(node0.isTry());
1584:       assertFalse(node0.isComma());
1585:       assertFalse(node0.isBreak());
1586:       assertFalse(node0.isNull());
1587:       assertFalse(node0.isTrue());
1588:       assertFalse(node0.isExprResult());
1589:       assertFalse(node0.isStringKey());
1590:       assertFalse(node0.isParamList());
1591:       assertFalse(node0.isVoid());
1592:       assertFalse(node0.isName());
1593:       assertFalse(node0.isArrayLit());
1594:       assertFalse(node0.isVar());
1595:       assertFalse(node0.isAdd());
1596:       assertFalse(node0.isDefaultCase());
1597:       assertFalse(node0.isEmpty());
1598:       assertFalse(node0.isNew());
1599:       assertFalse(node0.isAssignAdd());
1600:       assertFalse(node0.isDo());
1601:       assertEquals(43, Node.IS_CONSTANT_NAME);
1602:       assertEquals(36, Node.QUOTED_PROP);
1603:       assertEquals(48, Node.DIRECTIVES);
1604:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1605:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1606:       assertEquals(4095, Node.COLUMN_MASK);
1607:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1608:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1609:       assertEquals(50, Node.FREE_CALL);
1610:       assertEquals(32, Node.INCRDECR_PROP);
1611:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1612:       assertEquals(1, Node.DECR_FLAG);
1613:       assertEquals(30, Node.VAR_ARGS_NAME);
1614:       assertEquals(49, Node.DIRECT_EVAL);
1615:       assertEquals(57, Node.LAST_PROP);
1616:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1617:       assertEquals(12, Node.COLUMN_BITS);
1618:       assertEquals(46, Node.IS_NAMESPACE);
1619:       assertEquals(54, Node.SLASH_V);
1620:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1621:       assertEquals(37, Node.OPT_ARG_NAME);
1622:       assertEquals(2, Node.POST_FLAG);
1623:       assertEquals(40, Node.ORIGINALNAME_PROP);
1624:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1625:       assertEquals(56, Node.CHANGE_TIME);
1626:       assertEquals(47, Node.IS_DISPATCHER);
1627:       assertEquals(57, Node.REFLECTED_OBJECT);
1628:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1629:       assertEquals(52, Node.LENGTH);
1630:       assertEquals(8, Node.FLAG_NO_THROWS);
1631:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1632:       assertEquals(55, Node.INFERRED_FUNCTION);
1633:       assertEquals(39, Node.EMPTY_BLOCK);
1634:       assertEquals(29, Node.JSDOC_INFO_PROP);
1635:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1636:       assertEquals(53, Node.INPUT_ID);
1637:       assertFalse(boolean6);
1638:       
1639:       boolean boolean7 = node0.hasChild(node0);
1640:       assertTrue(boolean7 == boolean6);
1641:       assertTrue(boolean7 == boolean2);
1642:       assertTrue(boolean7 == boolean0);
1643:       assertTrue(boolean7 == boolean4);
1644:       assertFalse(boolean7 == boolean3);
1645:       assertTrue(boolean7 == boolean5);
1646:       assertFalse(boolean7 == boolean1);
1647:       assertFalse(node0.equals((Object)node1));
1648:       assertFalse(node0.isReturn());
1649:       assertFalse(node0.isLabel());
1650:       assertFalse(node0.hasMoreThanOneChild());
1651:       assertFalse(node0.isOr());
1652:       assertFalse(node0.isTypeOf());
1653:       assertEquals(117, node0.getType());
1654:       assertEquals((-1), node0.getSourcePosition());
1655:       assertFalse(node0.isGetElem());
1656:       assertEquals((-1), node0.getLineno());
1657:       assertFalse(node0.isLabelName());
1658:       assertFalse(node0.isCall());
1659:       assertFalse(node0.isBlock());
1660:       assertFalse(node0.isAssign());
1661:       assertFalse(node0.isNumber());
1662:       assertFalse(node0.isDec());
1663:       assertFalse(node0.isWhile());
1664:       assertFalse(node0.isScript());
1665:       assertFalse(node0.isInstanceOf());
1666:       assertFalse(node0.isCatch());
1667:       assertFalse(node0.isWith());
1668:       assertFalse(node0.isObjectLit());
1669:       assertFalse(node0.isNot());
1670:       assertFalse(node0.isAnd());
1671:       assertFalse(node0.isCast());
1672:       assertFalse(node0.isFalse());
1673:       assertFalse(node0.isFunction());
1674:       assertFalse(node0.isSetterDef());
1675:       assertFalse(node0.isInc());
1676:       assertFalse(node0.isThrow());
1677:       assertFalse(node0.isIn());
1678:       assertEquals(1, node0.getChildCount());
1679:       assertTrue(node0.hasChildren());
1680:       assertFalse(node0.isIf());
1681:       assertFalse(node0.isNE());
1682:       assertFalse(node0.isSwitch());
1683:       assertTrue(node0.isContinue());
1684:       assertFalse(node0.isDelProp());
1685:       assertFalse(node0.isHook());
1686:       assertEquals((-1), node0.getCharno());
1687:       assertFalse(node0.isDebugger());
1688:       assertFalse(node0.isRegExp());
1689:       assertFalse(node0.isGetterDef());
1690:       assertFalse(node0.isString());
1691:       assertTrue(node0.hasOneChild());
1692:       assertFalse(node0.isThis());
1693:       assertFalse(node0.isFor());
1694:       assertFalse(node0.isGetProp());
1695:       assertFalse(node0.isCase());
1696:       assertFalse(node0.isTry());
1697:       assertFalse(node0.isComma());
1698:       assertFalse(node0.isBreak());
1699:       assertFalse(node0.isNull());
1700:       assertFalse(node0.isTrue());
1701:       assertFalse(node0.isExprResult());
1702:       assertFalse(node0.isStringKey());
1703:       assertFalse(node0.isParamList());
1704:       assertFalse(node0.isVoid());
1705:       assertFalse(node0.isName());
1706:       assertFalse(node0.isArrayLit());
1707:       assertFalse(node0.isVar());
1708:       assertFalse(node0.isAdd());
1709:       assertFalse(node0.isDefaultCase());
1710:       assertFalse(node0.isEmpty());
1711:       assertFalse(node0.isNew());
1712:       assertFalse(node0.isAssignAdd());
1713:       assertFalse(node0.isDo());
1714:       assertEquals(43, Node.IS_CONSTANT_NAME);
1715:       assertEquals(36, Node.QUOTED_PROP);
1716:       assertEquals(48, Node.DIRECTIVES);
1717:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1718:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1719:       assertEquals(4095, Node.COLUMN_MASK);
1720:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1721:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1722:       assertEquals(50, Node.FREE_CALL);
1723:       assertEquals(32, Node.INCRDECR_PROP);
1724:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1725:       assertEquals(1, Node.DECR_FLAG);
1726:       assertEquals(30, Node.VAR_ARGS_NAME);
1727:       assertEquals(49, Node.DIRECT_EVAL);
1728:       assertEquals(57, Node.LAST_PROP);
1729:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1730:       assertEquals(12, Node.COLUMN_BITS);
1731:       assertEquals(46, Node.IS_NAMESPACE);
1732:       assertEquals(54, Node.SLASH_V);
1733:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1734:       assertEquals(37, Node.OPT_ARG_NAME);
1735:       assertEquals(2, Node.POST_FLAG);
1736:       assertEquals(40, Node.ORIGINALNAME_PROP);
1737:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1738:       assertEquals(56, Node.CHANGE_TIME);
1739:       assertEquals(47, Node.IS_DISPATCHER);
1740:       assertEquals(57, Node.REFLECTED_OBJECT);
1741:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1742:       assertEquals(52, Node.LENGTH);
1743:       assertEquals(8, Node.FLAG_NO_THROWS);
1744:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1745:       assertEquals(55, Node.INFERRED_FUNCTION);
1746:       assertEquals(39, Node.EMPTY_BLOCK);
1747:       assertEquals(29, Node.JSDOC_INFO_PROP);
1748:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1749:       assertEquals(53, Node.INPUT_ID);
1750:       assertFalse(boolean7);
1751:       
1752:       Iterable<Node> iterable0 = node1.children();
1753:       assertFalse(node1.equals((Object)node0));
1754:       assertFalse(node1.isIn());
1755:       assertFalse(node1.isGetterDef());
1756:       assertFalse(node1.isString());
1757:       assertFalse(node1.isEmpty());
1758:       assertFalse(node1.isFor());
1759:       assertFalse(node1.isInc());
1760:       assertFalse(node1.isCase());
1761:       assertEquals(55, node1.getSourcePosition());
1762:       assertEquals((-1), node1.getType());
1763:       assertFalse(node1.isFunction());
1764:       assertFalse(node1.isDebugger());
1765:       assertFalse(node1.isFalse());
1766:       assertFalse(node1.isSwitch());
1767:       assertFalse(node1.isArrayLit());
1768:       assertEquals(0, node1.getLineno());
1769:       assertFalse(node1.isInstanceOf());
1770:       assertFalse(node1.isCatch());
1771:       assertFalse(node1.isThis());
1772:       assertFalse(node1.isScript());
1773:       assertFalse(node1.isThrow());
1774:       assertFalse(node1.isSetterDef());
1775:       assertFalse(node1.isTry());
1776:       assertFalse(node1.isBlock());
1777:       assertFalse(node1.isHook());
1778:       assertFalse(node1.isRegExp());
1779:       assertFalse(node1.isIf());
1780:       assertFalse(node1.isWith());
1781:       assertFalse(node1.isNE());
1782:       assertFalse(node1.isReturn());
1783:       assertFalse(node1.isAssignAdd());
1784:       assertFalse(node1.isLabel());
1785:       assertFalse(node1.hasMoreThanOneChild());
1786:       assertFalse(node1.isContinue());
1787:       assertFalse(node1.isNumber());
1788:       assertFalse(node1.isTypeOf());
1789:       assertFalse(node1.isDec());
1790:       assertFalse(node1.isOr());
1791:       assertFalse(node1.isWhile());
1792:       assertFalse(node1.hasChildren());
1793:       assertFalse(node1.isNew());
1794:       assertFalse(node1.hasOneChild());
1795:       assertFalse(node1.isDo());
1796:       assertFalse(node1.isVar());
1797:       assertFalse(node1.isCast());
1798:       assertFalse(node1.isStringKey());
1799:       assertFalse(node1.isParamList());
1800:       assertFalse(node1.isAnd());
1801:       assertFalse(node1.isLabelName());
1802:       assertFalse(node1.isObjectLit());
1803:       assertFalse(node1.isComma());
1804:       assertFalse(node1.isNot());
1805:       assertEquals(0, node1.getChildCount());
1806:       assertFalse(node1.isDefaultCase());
1807:       assertEquals(55, node1.getCharno());
1808:       assertFalse(node1.isGetProp());
1809:       assertFalse(node1.isAdd());
1810:       assertFalse(node1.isTrue());
1811:       assertFalse(node1.isAssign());
1812:       assertFalse(node1.isBreak());
1813:       assertFalse(node1.isNull());
1814:       assertFalse(node1.isGetElem());
1815:       assertFalse(node1.isCall());
1816:       assertFalse(node1.isExprResult());
1817:       assertFalse(node1.isName());
1818:       assertFalse(node1.isVoid());
1819:       assertFalse(node1.isDelProp());
1820:       assertFalse(iterable0.contains(node1));
1821:       assertEquals(4095, Node.COLUMN_MASK);
1822:       assertEquals(43, Node.IS_CONSTANT_NAME);
1823:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1824:       assertEquals(8, Node.FLAG_NO_THROWS);
1825:       assertEquals(39, Node.EMPTY_BLOCK);
1826:       assertEquals(36, Node.QUOTED_PROP);
1827:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1828:       assertEquals(53, Node.INPUT_ID);
1829:       assertEquals(55, Node.INFERRED_FUNCTION);
1830:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1831:       assertEquals(40, Node.ORIGINALNAME_PROP);
1832:       assertEquals(50, Node.FREE_CALL);
1833:       assertEquals(47, Node.IS_DISPATCHER);
1834:       assertEquals(54, Node.SLASH_V);
1835:       assertEquals(2, Node.POST_FLAG);
1836:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1837:       assertEquals(1, Node.DECR_FLAG);
1838:       assertEquals(30, Node.VAR_ARGS_NAME);
1839:       assertEquals(49, Node.DIRECT_EVAL);
1840:       assertEquals(32, Node.INCRDECR_PROP);
1841:       assertEquals(57, Node.LAST_PROP);
1842:       assertEquals(12, Node.COLUMN_BITS);
1843:       assertEquals(46, Node.IS_NAMESPACE);
1844:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1845:       assertEquals(52, Node.LENGTH);
1846:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1847:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1848:       assertEquals(29, Node.JSDOC_INFO_PROP);
1849:       assertEquals(56, Node.CHANGE_TIME);
1850:       assertEquals(57, Node.REFLECTED_OBJECT);
1851:       assertEquals(37, Node.OPT_ARG_NAME);
1852:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1853:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1854:       assertEquals(48, Node.DIRECTIVES);
1855:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1856:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1857:       assertNotNull(iterable0);
1858:       
1859:       Node node2 = node1.getParent();
1860:       assertFalse(node1.equals((Object)node0));
1861:       assertFalse(node2.equals((Object)node1));
1862:       assertSame(node2, node0);
1863:       assertFalse(node1.isIn());
1864:       assertFalse(node1.isGetterDef());
1865:       assertFalse(node1.isString());
1866:       assertFalse(node1.isEmpty());
1867:       assertFalse(node1.isFor());
1868:       assertFalse(node1.isInc());
1869:       assertFalse(node1.isCase());
1870:       assertEquals(55, node1.getSourcePosition());
1871:       assertEquals((-1), node1.getType());
1872:       assertFalse(node1.isFunction());
1873:       assertFalse(node1.isDebugger());
1874:       assertFalse(node1.isFalse());
1875:       assertFalse(node1.isSwitch());
1876:       assertFalse(node1.isArrayLit());
1877:       assertEquals(0, node1.getLineno());
1878:       assertFalse(node1.isInstanceOf());
1879:       assertFalse(node1.isCatch());
1880:       assertFalse(node1.isThis());
1881:       assertFalse(node1.isScript());
1882:       assertFalse(node1.isThrow());
1883:       assertFalse(node1.isSetterDef());
1884:       assertFalse(node1.isTry());
1885:       assertFalse(node1.isBlock());
1886:       assertFalse(node1.isHook());
1887:       assertFalse(node1.isRegExp());
1888:       assertFalse(node1.isIf());
1889:       assertFalse(node1.isWith());
1890:       assertFalse(node1.isNE());
1891:       assertFalse(node1.isReturn());
1892:       assertFalse(node1.isAssignAdd());
1893:       assertFalse(node1.isLabel());
1894:       assertFalse(node1.hasMoreThanOneChild());
1895:       assertFalse(node1.isContinue());
1896:       assertFalse(node1.isNumber());
1897:       assertFalse(node1.isTypeOf());
1898:       assertFalse(node1.isDec());
1899:       assertFalse(node1.isOr());
1900:       assertFalse(node1.isWhile());
1901:       assertFalse(node1.hasChildren());
1902:       assertFalse(node1.isNew());
1903:       assertFalse(node1.hasOneChild());
1904:       assertFalse(node1.isDo());
1905:       assertFalse(node1.isVar());
1906:       assertFalse(node1.isCast());
1907:       assertFalse(node1.isStringKey());
1908:       assertFalse(node1.isParamList());
1909:       assertFalse(node1.isAnd());
1910:       assertFalse(node1.isLabelName());
1911:       assertFalse(node1.isObjectLit());
1912:       assertFalse(node1.isComma());
1913:       assertFalse(node1.isNot());
1914:       assertEquals(0, node1.getChildCount());
1915:       assertFalse(node1.isDefaultCase());
1916:       assertEquals(55, node1.getCharno());
1917:       assertFalse(node1.isGetProp());
1918:       assertFalse(node1.isAdd());
1919:       assertFalse(node1.isTrue());
1920:       assertFalse(node1.isAssign());
1921:       assertFalse(node1.isBreak());
1922:       assertFalse(node1.isNull());
1923:       assertFalse(node1.isGetElem());
1924:       assertFalse(node1.isCall());
1925:       assertFalse(node1.isExprResult());
1926:       assertFalse(node1.isName());
1927:       assertFalse(node1.isVoid());
1928:       assertFalse(node1.isDelProp());
1929:       assertFalse(node2.isNot());
1930:       assertEquals(117, node2.getType());
1931:       assertFalse(node2.isObjectLit());
1932:       assertEquals((-1), node2.getSourcePosition());
1933:       assertFalse(node2.isScript());
1934:       assertFalse(node2.isNumber());
1935:       assertFalse(node2.isOr());
1936:       assertFalse(node2.isReturn());
1937:       assertFalse(node2.isGetProp());
1938:       assertEquals((-1), node2.getLineno());
1939:       assertFalse(node2.isComma());
1940:       assertFalse(node2.isThis());
1941:       assertFalse(node2.isAssign());
1942:       assertFalse(node2.isWith());
1943:       assertFalse(node2.isGetElem());
1944:       assertFalse(node2.isBreak());
1945:       assertFalse(node2.isDec());
1946:       assertFalse(node2.hasMoreThanOneChild());
1947:       assertFalse(node2.isExprResult());
1948:       assertFalse(node2.isTypeOf());
1949:       assertFalse(node2.isInstanceOf());
1950:       assertFalse(node2.isThrow());
1951:       assertFalse(node2.isWhile());
1952:       assertFalse(node2.isSetterDef());
1953:       assertFalse(node2.isInc());
1954:       assertFalse(node2.isIn());
1955:       assertFalse(node2.isString());
1956:       assertFalse(node2.isAnd());
1957:       assertFalse(node2.isFalse());
1958:       assertFalse(node2.isCast());
1959:       assertFalse(node2.isFunction());
1960:       assertFalse(node2.isTry());
1961:       assertFalse(node2.isVoid());
1962:       assertFalse(node2.isDebugger());
1963:       assertFalse(node2.isTrue());
1964:       assertFalse(node2.isDefaultCase());
1965:       assertFalse(node2.isEmpty());
1966:       assertFalse(node2.isGetterDef());
1967:       assertTrue(node2.hasChildren());
1968:       assertEquals(1, node2.getChildCount());
1969:       assertFalse(node2.isNE());
1970:       assertFalse(node2.isNull());
1971:       assertFalse(node2.isIf());
1972:       assertFalse(node2.isFor());
1973:       assertFalse(node2.isName());
1974:       assertTrue(node2.hasOneChild());
1975:       assertFalse(node2.isDelProp());
1976:       assertFalse(node2.isRegExp());
1977:       assertFalse(node2.isCall());
1978:       assertFalse(node2.isCatch());
1979:       assertFalse(node2.isAdd());
1980:       assertFalse(node2.isBlock());
1981:       assertEquals((-1), node2.getCharno());
1982:       assertFalse(node2.isNew());
1983:       assertFalse(node2.isVar());
1984:       assertFalse(node2.isSwitch());
1985:       assertTrue(node2.isContinue());
1986:       assertFalse(node2.isHook());
1987:       assertFalse(node2.isStringKey());
1988:       assertFalse(node2.isDo());
1989:       assertFalse(node2.isCase());
1990:       assertFalse(node2.isAssignAdd());
1991:       assertFalse(node2.isLabel());
1992:       assertFalse(node2.isParamList());
1993:       assertFalse(node2.isLabelName());
1994:       assertFalse(node2.isArrayLit());
1995:       assertEquals(4095, Node.COLUMN_MASK);
1996:       assertEquals(43, Node.IS_CONSTANT_NAME);
1997:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1998:       assertEquals(8, Node.FLAG_NO_THROWS);
1999:       assertEquals(39, Node.EMPTY_BLOCK);
2000:       assertEquals(36, Node.QUOTED_PROP);
2001:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2002:       assertEquals(53, Node.INPUT_ID);
2003:       assertEquals(55, Node.INFERRED_FUNCTION);
2004:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2005:       assertEquals(40, Node.ORIGINALNAME_PROP);
2006:       assertEquals(50, Node.FREE_CALL);
2007:       assertEquals(47, Node.IS_DISPATCHER);
2008:       assertEquals(54, Node.SLASH_V);
2009:       assertEquals(2, Node.POST_FLAG);
2010:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2011:       assertEquals(1, Node.DECR_FLAG);
2012:       assertEquals(30, Node.VAR_ARGS_NAME);
2013:       assertEquals(49, Node.DIRECT_EVAL);
2014:       assertEquals(32, Node.INCRDECR_PROP);
2015:       assertEquals(57, Node.LAST_PROP);
2016:       assertEquals(12, Node.COLUMN_BITS);
2017:       assertEquals(46, Node.IS_NAMESPACE);
2018:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2019:       assertEquals(52, Node.LENGTH);
2020:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2021:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2022:       assertEquals(29, Node.JSDOC_INFO_PROP);
2023:       assertEquals(56, Node.CHANGE_TIME);
2024:       assertEquals(57, Node.REFLECTED_OBJECT);
2025:       assertEquals(37, Node.OPT_ARG_NAME);
2026:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2027:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2028:       assertEquals(48, Node.DIRECTIVES);
2029:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2030:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2031:       assertEquals(57, Node.REFLECTED_OBJECT);
2032:       assertEquals(40, Node.ORIGINALNAME_PROP);
2033:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2034:       assertEquals(8, Node.FLAG_NO_THROWS);
2035:       assertEquals(39, Node.EMPTY_BLOCK);
2036:       assertEquals(54, Node.SLASH_V);
2037:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2038:       assertEquals(50, Node.FREE_CALL);
2039:       assertEquals(52, Node.LENGTH);
2040:       assertEquals(12, Node.COLUMN_BITS);
2041:       assertEquals(4095, Node.COLUMN_MASK);
2042:       assertEquals(49, Node.DIRECT_EVAL);
2043:       assertEquals(37, Node.OPT_ARG_NAME);
2044:       assertEquals(48, Node.DIRECTIVES);
2045:       assertEquals(32, Node.INCRDECR_PROP);
2046:       assertEquals(1, Node.DECR_FLAG);
2047:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2048:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2049:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2050:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2051:       assertEquals(29, Node.JSDOC_INFO_PROP);
2052:       assertEquals(53, Node.INPUT_ID);
2053:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2054:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2055:       assertEquals(43, Node.IS_CONSTANT_NAME);
2056:       assertEquals(56, Node.CHANGE_TIME);
2057:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2058:       assertEquals(36, Node.QUOTED_PROP);
2059:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2060:       assertEquals(46, Node.IS_NAMESPACE);
2061:       assertEquals(55, Node.INFERRED_FUNCTION);
2062:       assertEquals(2, Node.POST_FLAG);
2063:       assertEquals(47, Node.IS_DISPATCHER);
2064:       assertEquals(57, Node.LAST_PROP);
2065:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2066:       assertEquals(30, Node.VAR_ARGS_NAME);
2067:       assertNotNull(node2);
2068:       
2069:       String string2 = node1.checkTreeEquals(node0);
2070:       assertFalse(node0.equals((Object)node1));
2071:       assertFalse(node1.equals((Object)node2));
2072:       assertFalse(node1.equals((Object)node0));
2073:       assertFalse(string2.equals((Object)string0));
2074:       assertSame(node0, node2);
2075:       assertFalse(node0.isReturn());
2076:       assertFalse(node0.isLabel());
2077:       assertFalse(node0.hasMoreThanOneChild());
2078:       assertFalse(node0.isOr());
2079:       assertFalse(node0.isTypeOf());
2080:       assertEquals(117, node0.getType());
2081:       assertEquals((-1), node0.getSourcePosition());
2082:       assertFalse(node0.isGetElem());
2083:       assertEquals((-1), node0.getLineno());
2084:       assertFalse(node0.isLabelName());
2085:       assertFalse(node0.isCall());
2086:       assertFalse(node0.isBlock());
2087:       assertFalse(node0.isAssign());
2088:       assertFalse(node0.isNumber());
2089:       assertFalse(node0.isDec());
2090:       assertFalse(node0.isWhile());
2091:       assertFalse(node0.isScript());
2092:       assertFalse(node0.isInstanceOf());
2093:       assertFalse(node0.isCatch());
2094:       assertFalse(node0.isWith());
2095:       assertFalse(node0.isObjectLit());
2096:       assertFalse(node0.isNot());
2097:       assertFalse(node0.isAnd());
2098:       assertFalse(node0.isCast());
2099:       assertFalse(node0.isFalse());
2100:       assertFalse(node0.isFunction());
2101:       assertFalse(node0.isSetterDef());
2102:       assertFalse(node0.isInc());
2103:       assertFalse(node0.isThrow());
2104:       assertFalse(node0.isIn());
2105:       assertEquals(1, node0.getChildCount());
2106:       assertTrue(node0.hasChildren());
2107:       assertFalse(node0.isIf());
2108:       assertFalse(node0.isNE());
2109:       assertFalse(node0.isSwitch());
2110:       assertTrue(node0.isContinue());
2111:       assertFalse(node0.isDelProp());
2112:       assertFalse(node0.isHook());
2113:       assertEquals((-1), node0.getCharno());
2114:       assertFalse(node0.isDebugger());
2115:       assertFalse(node0.isRegExp());
2116:       assertFalse(node0.isGetterDef());
2117:       assertFalse(node0.isString());
2118:       assertTrue(node0.hasOneChild());
2119:       assertFalse(node0.isThis());
2120:       assertFalse(node0.isFor());
2121:       assertFalse(node0.isGetProp());
2122:       assertFalse(node0.isCase());
2123:       assertFalse(node0.isTry());
2124:       assertFalse(node0.isComma());
2125:       assertFalse(node0.isBreak());
2126:       assertFalse(node0.isNull());
2127:       assertFalse(node0.isTrue());
2128:       assertFalse(node0.isExprResult());
2129:       assertFalse(node0.isStringKey());
2130:       assertFalse(node0.isParamList());
2131:       assertFalse(node0.isVoid());
2132:       assertFalse(node0.isName());
2133:       assertFalse(node0.isArrayLit());
2134:       assertFalse(node0.isVar());
2135:       assertFalse(node0.isAdd());
2136:       assertFalse(node0.isDefaultCase());
2137:       assertFalse(node0.isEmpty());
2138:       assertFalse(node0.isNew());
2139:       assertFalse(node0.isAssignAdd());
2140:       assertFalse(node0.isDo());
2141:       assertFalse(node1.isIn());
2142:       assertFalse(node1.isGetterDef());
2143:       assertFalse(node1.isString());
2144:       assertFalse(node1.isEmpty());
2145:       assertFalse(node1.isFor());
2146:       assertFalse(node1.isInc());
2147:       assertFalse(node1.isCase());
2148:       assertEquals(55, node1.getSourcePosition());
2149:       assertEquals((-1), node1.getType());
2150:       assertFalse(node1.isFunction());
2151:       assertFalse(node1.isDebugger());
2152:       assertFalse(node1.isFalse());
2153:       assertFalse(node1.isSwitch());
2154:       assertFalse(node1.isArrayLit());
2155:       assertEquals(0, node1.getLineno());
2156:       assertFalse(node1.isInstanceOf());
2157:       assertFalse(node1.isCatch());
2158:       assertFalse(node1.isThis());
2159:       assertFalse(node1.isScript());
2160:       assertFalse(node1.isThrow());
2161:       assertFalse(node1.isSetterDef());
2162:       assertFalse(node1.isTry());
2163:       assertFalse(node1.isBlock());
2164:       assertFalse(node1.isHook());
2165:       assertFalse(node1.isRegExp());
2166:       assertFalse(node1.isIf());
2167:       assertFalse(node1.isWith());
2168:       assertFalse(node1.isNE());
2169:       assertFalse(node1.isReturn());
2170:       assertFalse(node1.isAssignAdd());
2171:       assertFalse(node1.isLabel());
2172:       assertFalse(node1.hasMoreThanOneChild());
2173:       assertFalse(node1.isContinue());
2174:       assertFalse(node1.isNumber());
2175:       assertFalse(node1.isTypeOf());
2176:       assertFalse(node1.isDec());
2177:       assertFalse(node1.isOr());
2178:       assertFalse(node1.isWhile());
2179:       assertFalse(node1.hasChildren());
2180:       assertFalse(node1.isNew());
2181:       assertFalse(node1.hasOneChild());
2182:       assertFalse(node1.isDo());
2183:       assertFalse(node1.isVar());
2184:       assertFalse(node1.isCast());
2185:       assertFalse(node1.isStringKey());
2186:       assertFalse(node1.isParamList());
2187:       assertFalse(node1.isAnd());
2188:       assertFalse(node1.isLabelName());
2189:       assertFalse(node1.isObjectLit());
2190:       assertFalse(node1.isComma());
2191:       assertFalse(node1.isNot());
2192:       assertEquals(0, node1.getChildCount());
2193:       assertFalse(node1.isDefaultCase());
2194:       assertEquals(55, node1.getCharno());
2195:       assertFalse(node1.isGetProp());
2196:       assertFalse(node1.isAdd());
2197:       assertFalse(node1.isTrue());
2198:       assertFalse(node1.isAssign());
2199:       assertFalse(node1.isBreak());
2200:       assertFalse(node1.isNull());
2201:       assertFalse(node1.isGetElem());
2202:       assertFalse(node1.isCall());
2203:       assertFalse(node1.isExprResult());
2204:       assertFalse(node1.isName());
2205:       assertFalse(node1.isVoid());
2206:       assertFalse(node1.isDelProp());
2207:       assertEquals(43, Node.IS_CONSTANT_NAME);
2208:       assertEquals(36, Node.QUOTED_PROP);
2209:       assertEquals(48, Node.DIRECTIVES);
2210:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2211:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2212:       assertEquals(4095, Node.COLUMN_MASK);
2213:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2214:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2215:       assertEquals(50, Node.FREE_CALL);
2216:       assertEquals(32, Node.INCRDECR_PROP);
2217:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2218:       assertEquals(1, Node.DECR_FLAG);
2219:       assertEquals(30, Node.VAR_ARGS_NAME);
2220:       assertEquals(49, Node.DIRECT_EVAL);
2221:       assertEquals(57, Node.LAST_PROP);
2222:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2223:       assertEquals(12, Node.COLUMN_BITS);
2224:       assertEquals(46, Node.IS_NAMESPACE);
2225:       assertEquals(54, Node.SLASH_V);
2226:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2227:       assertEquals(37, Node.OPT_ARG_NAME);
2228:       assertEquals(2, Node.POST_FLAG);
2229:       assertEquals(40, Node.ORIGINALNAME_PROP);
2230:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2231:       assertEquals(56, Node.CHANGE_TIME);
2232:       assertEquals(47, Node.IS_DISPATCHER);
2233:       assertEquals(57, Node.REFLECTED_OBJECT);
2234:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2235:       assertEquals(52, Node.LENGTH);
2236:       assertEquals(8, Node.FLAG_NO_THROWS);
2237:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2238:       assertEquals(55, Node.INFERRED_FUNCTION);
2239:       assertEquals(39, Node.EMPTY_BLOCK);
2240:       assertEquals(29, Node.JSDOC_INFO_PROP);
2241:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2242:       assertEquals(53, Node.INPUT_ID);
2243:       assertEquals(4095, Node.COLUMN_MASK);
2244:       assertEquals(43, Node.IS_CONSTANT_NAME);
2245:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2246:       assertEquals(8, Node.FLAG_NO_THROWS);
2247:       assertEquals(39, Node.EMPTY_BLOCK);
2248:       assertEquals(36, Node.QUOTED_PROP);
2249:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2250:       assertEquals(53, Node.INPUT_ID);
2251:       assertEquals(55, Node.INFERRED_FUNCTION);
2252:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2253:       assertEquals(40, Node.ORIGINALNAME_PROP);
2254:       assertEquals(50, Node.FREE_CALL);
2255:       assertEquals(47, Node.IS_DISPATCHER);
2256:       assertEquals(54, Node.SLASH_V);
2257:       assertEquals(2, Node.POST_FLAG);
2258:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2259:       assertEquals(1, Node.DECR_FLAG);
2260:       assertEquals(30, Node.VAR_ARGS_NAME);
2261:       assertEquals(49, Node.DIRECT_EVAL);
2262:       assertEquals(32, Node.INCRDECR_PROP);
2263:       assertEquals(57, Node.LAST_PROP);
2264:       assertEquals(12, Node.COLUMN_BITS);
2265:       assertEquals(46, Node.IS_NAMESPACE);
2266:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2267:       assertEquals(52, Node.LENGTH);
2268:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2269:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2270:       assertEquals(29, Node.JSDOC_INFO_PROP);
2271:       assertEquals(56, Node.CHANGE_TIME);
2272:       assertEquals(57, Node.REFLECTED_OBJECT);
2273:       assertEquals(37, Node.OPT_ARG_NAME);
2274:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2275:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2276:       assertEquals(48, Node.DIRECTIVES);
2277:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2278:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2279:       assertNotNull(string2);
2280:       assertEquals("Node tree inequality:\nTree1:\nERROR 0\n\n\nTree2:\nCONTINUE\n    ERROR 0\n\n\nSubtree1: ERROR 0\n\n\nSubtree2: CONTINUE\n    ERROR 0\n", string2);
2281:   }
2282: }
RegularFileObject[/tmp/EvoSuite_230_1628161964926/com/google/javascript/rhino/Node_230_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:12:45 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_230_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_230_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_230_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.javascript.rhino.jstype.NamedType",
333:       "com.google.javascript.rhino.jstype.TemplatizedType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.javascript.rhino.JSTypeExpression",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.InputId",
348:       "com.google.javascript.rhino.jstype.JSType$TypePair",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.Platform",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
365:       "com.google.common.collect.Sets$ImprovedAbstractSet",
366:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
367:       "com.google.common.collect.Hashing",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet"
369:     );
370:   }
371: }

[MASTER] 11:12:45.439 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) (-219), (-219), (-219));
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node0);

Node node1 = new Node((-1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals((-1), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isNew());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(node1);

String string0 = node1.toStringTree();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals((-1), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isNew());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(string0);
assertEquals("ERROR\n", string0);

boolean boolean0 = node1.isQualifiedName();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals((-1), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isNew());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(boolean0);

boolean boolean1 = node0.mayMutateGlobalStateOrThrow();
assertFalse(node0.equals((Object)node1));
assertFalse(boolean1 == boolean0);
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertTrue(boolean1);

boolean boolean2 = node0.isNE();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(boolean2);

boolean boolean3 = node0.mayMutateGlobalStateOrThrow();
assertFalse(node0.equals((Object)node1));
assertFalse(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3 == boolean2);
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertTrue(boolean3);

String string1 = node0.getQualifiedName();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNull(string1);

node0.setType(117);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals(117, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertTrue(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);

node1.setSourceEncodedPositionForTree(55);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals(55, node1.getSourcePosition());
assertEquals((-1), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isNew());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertEquals(55, node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean4 = node1.isSetterDef();
assertFalse(node1.equals((Object)node0));
assertFalse(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertFalse(boolean4 == boolean1);
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals(55, node1.getSourcePosition());
assertEquals((-1), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isNew());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertEquals(55, node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(boolean4);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);

boolean boolean5 = node0.isTrue();
assertFalse(node0.equals((Object)node1));
assertFalse(boolean5 == boolean3);
assertFalse(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals(117, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertTrue(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(boolean5);

node0.addChildrenToBack(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals(117, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertEquals(1, node0.getChildCount());
assertTrue(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertTrue(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertTrue(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals(55, node1.getSourcePosition());
assertEquals((-1), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isNew());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertEquals(55, node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean6 = node0.isIf();
assertFalse(node0.equals((Object)node1));
assertFalse(boolean6 == boolean1);
assertTrue(boolean6 == boolean5);
assertFalse(boolean6 == boolean3);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean4);
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals(117, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertEquals(1, node0.getChildCount());
assertTrue(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertTrue(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertTrue(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(boolean6);

boolean boolean7 = node0.hasChild(node0);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean4);
assertFalse(boolean7 == boolean3);
assertTrue(boolean7 == boolean5);
assertFalse(boolean7 == boolean1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals(117, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertEquals(1, node0.getChildCount());
assertTrue(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertTrue(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertTrue(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(boolean7);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals(55, node1.getSourcePosition());
assertEquals((-1), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isNew());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertEquals(55, node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(iterable0.contains(node1));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(iterable0);

Node node2 = node1.getParent();
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertSame(node2, node0);
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals(55, node1.getSourcePosition());
assertEquals((-1), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isNew());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertEquals(55, node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node2.isNot());
assertEquals(117, node2.getType());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThrow());
assertFalse(node2.isWhile());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isName());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDelProp());
assertFalse(node2.isRegExp());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isSwitch());
assertTrue(node2.isContinue());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node2);

String string2 = node1.checkTreeEquals(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(string2.equals((Object)string0));
assertSame(node0, node2);
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertEquals(117, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertEquals(1, node0.getChildCount());
assertTrue(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertTrue(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertTrue(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals(55, node1.getSourcePosition());
assertEquals((-1), node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isNew());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertEquals(55, node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(string2);
assertEquals("Node tree inequality:\nTree1:\nERROR 0\n\n\nTree2:\nCONTINUE\n    ERROR 0\n\n\nSubtree1: ERROR 0\n\n\nSubtree2: CONTINUE\n    ERROR 0\n", string2);


[MASTER] 11:13:02.221 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:02.561 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:02.896 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:03.115 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:03.307 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:04.125 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:04.344 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:04.523 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:04.698 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:04.874 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:05.054 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:05.233 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:05.416 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:13:05.646 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/28
* Done!

* Computation finished
